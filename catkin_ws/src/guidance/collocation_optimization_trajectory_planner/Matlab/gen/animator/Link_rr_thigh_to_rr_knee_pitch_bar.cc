/*
 * Automatically Generated from Mathematica.
 * Sat 13 Nov 2021 18:01:44 GMT+01:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t2262;
  double t2346;
  double t2461;
  double t2526;
  double t131;
  double t574;
  double t797;
  double t799;
  double t890;
  double t1406;
  double t2718;
  double t2722;
  double t451;
  double t2991;
  double t3115;
  double t2515;
  double t2832;
  double t3245;
  double t3198;
  double t3212;
  double t3217;
  double t3345;
  double t3352;
  double t3354;
  double t2751;
  double t3396;
  double t2600;
  double t3461;
  double t3159;
  double t3422;
  double t3128;
  double t2069;
  double t2196;
  double t2198;
  double t2199;
  double t2502;
  double t2657;
  double t2689;
  double t2785;
  double t2814;
  double t2829;
  double t2863;
  double t2867;
  double t2887;
  double t3046;
  double t3050;
  double t3063;
  double t3144;
  double t3146;
  double t3164;
  double t3168;
  double t3195;
  double t3224;
  double t3234;
  double t3241;
  double t3249;
  double t3273;
  double t3304;
  double t3320;
  double t3344;
  double t3384;
  double t3402;
  double t3411;
  double t3425;
  double t3434;
  double t3437;
  double t3444;
  double t3446;
  double t3447;
  double t3456;
  double t3457;
  double t3460;
  double t3462;
  double t3466;
  double t3467;
  double t3469;
  double t3471;
  double t3474;
  double t3477;
  double t3482;
  double t3483;
  double t3495;
  double t3497;
  double t3499;
  double t3500;
  double t3455;
  double t3472;
  double t3501;
  double t3506;
  double t3795;
  double t3804;
  double t3800;
  double t3805;
  double t3807;
  double t3811;
  double t3815;
  double t3817;
  double t3819;
  double t3820;
  double t3824;
  double t3826;
  double t3828;
  double t3830;
  double t3799;
  double t3810;
  double t3818;
  double t3825;
  double t3831;
  double t3832;
  double t3834;
  double t3835;
  double t3837;
  double t3840;
  double t3846;
  double t3851;
  double t3854;
  double t3856;
  double t3857;
  double t3861;
  double t3865;
  double t3838;
  double t3855;
  double t3866;
  double t3869;
  double t4049;
  double t4050;
  double t4051;
  double t4054;
  double t4055;
  double t4058;
  double t4069;
  double t4071;
  double t4073;
  double t4075;
  double t4077;
  double t4080;
  double t4043;
  double t4053;
  double t4068;
  double t4074;
  double t4081;
  double t4082;
  double t4084;
  double t4085;
  double t4086;
  double t4088;
  double t4090;
  double t4091;
  double t4094;
  double t4097;
  double t4099;
  double t4100;
  double t4101;
  double t4087;
  double t4096;
  double t4103;
  double t4104;
  double t4253;
  double t4255;
  double t4256;
  double t4258;
  double t4396;
  double t4399;
  double t4400;
  double t4401;
  double t4533;
  double t4534;
  double t4536;
  double t4537;
  t2262 = Cos(var1[16]);
  t2346 = -1.*t2262;
  t2461 = 1. + t2346;
  t2526 = Sin(var1[16]);
  t131 = Cos(var1[4]);
  t574 = Cos(var1[15]);
  t797 = -1.*t574;
  t799 = 1. + t797;
  t890 = -0.15121*t799;
  t1406 = Sin(var1[15]);
  t2718 = -1. + t2262;
  t2722 = 4.e-6*t2718;
  t451 = Cos(var1[5]);
  t2991 = Sin(var1[5]);
  t3115 = 7.e-6*t2461;
  t2515 = 2.8e-11*t2461;
  t2832 = Sin(var1[4]);
  t3245 = -4.e-6*t2526;
  t3198 = -1.*t131*t451*t1406;
  t3212 = -1.*t574*t131*t2991;
  t3217 = t3198 + t3212;
  t3345 = t574*t131*t451;
  t3352 = -1.*t131*t1406*t2991;
  t3354 = t3345 + t3352;
  t2751 = -7.e-6*t2526;
  t3396 = -2.8e-11*t2461;
  t2600 = -1.*t2526;
  t3461 = 4.e-6*t2461;
  t3159 = 7.e-6*t2526;
  t3422 = -7.e-6*t2461;
  t3128 = 4.e-6*t2526;
  t2069 = -0.15121*t1406;
  t2196 = t890 + t2069;
  t2198 = t131*t451*t2196;
  t2199 = 1.5843479999999999e-12*var1[16];
  t2502 = -0.03874900000889869*t2461;
  t2657 = t2515 + t2600;
  t2689 = -0.281211000004*t2657;
  t2785 = t2722 + t2751;
  t2814 = -1.8134809999999998e-6*t2785;
  t2829 = t2199 + t2502 + t2689 + t2814;
  t2863 = t2829*t2832;
  t2867 = 0.15121*t1406;
  t2887 = t890 + t2867;
  t3046 = -1.*t131*t2887*t2991;
  t3050 = 3.9608699999999997e-7*var1[16];
  t3063 = -1.1787626499999999e-16*t2461;
  t3144 = t3115 + t3128;
  t3146 = -0.281211000004*t3144;
  t3164 = t2722 + t3159;
  t3168 = -0.038749000006999997*t3164;
  t3195 = t3050 + t3063 + t3146 + t3168;
  t3224 = t3195*t3217;
  t3234 = -2.7726089999999997e-12*var1[16];
  t3241 = -0.2812110000084994*t2461;
  t3249 = t3115 + t3245;
  t3273 = -1.8134809999999998e-6*t3249;
  t3304 = t2515 + t2526;
  t3320 = -0.038749000006999997*t3304;
  t3344 = t3234 + t3241 + t3273 + t3320;
  t3384 = t3344*t3354;
  t3402 = t3396 + t2526;
  t3411 = t3402*t2832;
  t3425 = t3422 + t3245;
  t3434 = t3425*t3217;
  t3437 = -1.000000000016*t2461;
  t3444 = 1. + t3437;
  t3446 = t3444*t3354;
  t3447 = t3411 + t3434 + t3446;
  t3456 = -1.000000000049*t2461;
  t3457 = 1. + t3456;
  t3460 = t3457*t2832;
  t3462 = t3461 + t2751;
  t3466 = t3462*t3217;
  t3467 = t3396 + t2600;
  t3469 = t3467*t3354;
  t3471 = t3460 + t3466 + t3469;
  t3474 = t3461 + t3159;
  t3477 = t3474*t2832;
  t3482 = -6.5e-11*t2461;
  t3483 = 1. + t3482;
  t3495 = t3483*t3217;
  t3497 = t3422 + t3128;
  t3499 = t3497*t3354;
  t3500 = t3477 + t3495 + t3499;
  t3455 = -0.278393*t3447;
  t3472 = -0.028135*t3471;
  t3501 = -0.216494*t3500;
  t3506 = var1[0] + t2198 + t2863 + t3046 + t3224 + t3384 + t3455 + t3472 + t3501;
  t3795 = Sin(var1[3]);
  t3804 = Cos(var1[3]);
  t3800 = t451*t3795*t2832;
  t3805 = t3804*t2991;
  t3807 = t3800 + t3805;
  t3811 = t3804*t451;
  t3815 = -1.*t3795*t2832*t2991;
  t3817 = t3811 + t3815;
  t3819 = -1.*t1406*t3807;
  t3820 = t574*t3817;
  t3824 = t3819 + t3820;
  t3826 = t574*t3807;
  t3828 = t1406*t3817;
  t3830 = t3826 + t3828;
  t3799 = -1.*t131*t2829*t3795;
  t3810 = t2196*t3807;
  t3818 = t2887*t3817;
  t3825 = t3195*t3824;
  t3831 = t3344*t3830;
  t3832 = -1.*t131*t3402*t3795;
  t3834 = t3425*t3824;
  t3835 = t3444*t3830;
  t3837 = t3832 + t3834 + t3835;
  t3840 = -1.*t3457*t131*t3795;
  t3846 = t3462*t3824;
  t3851 = t3467*t3830;
  t3854 = t3840 + t3846 + t3851;
  t3856 = -1.*t131*t3474*t3795;
  t3857 = t3483*t3824;
  t3861 = t3497*t3830;
  t3865 = t3856 + t3857 + t3861;
  t3838 = -0.278393*t3837;
  t3855 = -0.028135*t3854;
  t3866 = -0.216494*t3865;
  t3869 = var1[1] + t3799 + t3810 + t3818 + t3825 + t3831 + t3838 + t3855 + t3866;
  t4049 = -1.*t3804*t451*t2832;
  t4050 = t3795*t2991;
  t4051 = t4049 + t4050;
  t4054 = t451*t3795;
  t4055 = t3804*t2832*t2991;
  t4058 = t4054 + t4055;
  t4069 = -1.*t1406*t4051;
  t4071 = t574*t4058;
  t4073 = t4069 + t4071;
  t4075 = t574*t4051;
  t4077 = t1406*t4058;
  t4080 = t4075 + t4077;
  t4043 = t3804*t131*t2829;
  t4053 = t2196*t4051;
  t4068 = t2887*t4058;
  t4074 = t3195*t4073;
  t4081 = t3344*t4080;
  t4082 = t3804*t131*t3402;
  t4084 = t3425*t4073;
  t4085 = t3444*t4080;
  t4086 = t4082 + t4084 + t4085;
  t4088 = t3457*t3804*t131;
  t4090 = t3462*t4073;
  t4091 = t3467*t4080;
  t4094 = t4088 + t4090 + t4091;
  t4097 = t3804*t131*t3474;
  t4099 = t3483*t4073;
  t4100 = t3497*t4080;
  t4101 = t4097 + t4099 + t4100;
  t4087 = -0.278393*t4086;
  t4096 = -0.028135*t4094;
  t4103 = -0.216494*t4101;
  t4104 = var1[2] + t4043 + t4053 + t4068 + t4074 + t4081 + t4087 + t4096 + t4103;
  t4253 = -0.500334*t3447;
  t4255 = -0.027961*t3471;
  t4256 = -0.155496*t3500;
  t4258 = var1[0] + t2198 + t2863 + t3046 + t3224 + t3384 + t4253 + t4255 + t4256;
  t4396 = -0.500334*t3837;
  t4399 = -0.027961*t3854;
  t4400 = -0.155496*t3865;
  t4401 = var1[1] + t3799 + t3810 + t3818 + t3825 + t3831 + t4396 + t4399 + t4400;
  t4533 = -0.500334*t4086;
  t4534 = -0.027961*t4094;
  t4536 = -0.155496*t4101;
  t4537 = var1[2] + t4043 + t4053 + t4068 + t4074 + t4081 + t4533 + t4534 + t4536;
  p_output1[0]=t3506;
  p_output1[1]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.277635*t3447 - 0.032151*t3471 - 0.213723*t3500 + var1[0];
  p_output1[2]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.277264*t3447 - 0.036883*t3471 - 0.21236*t3500 + var1[0];
  p_output1[3]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.27732*t3447 - 0.041816*t3471 - 0.212552*t3500 + var1[0];
  p_output1[4]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.277798*t3447 - 0.046418*t3471 - 0.214278*t3500 + var1[0];
  p_output1[5]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.278646*t3447 - 0.050188*t3471 - 0.217352*t3500 + var1[0];
  p_output1[6]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.279772*t3447 - 0.052719*t3471 - 0.22144*t3500 + var1[0];
  p_output1[7]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.281053*t3447 - 0.053737*t3471 - 0.226099*t3500 + var1[0];
  p_output1[8]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.282351*t3447 - 0.05313*t3471 - 0.230824*t3500 + var1[0];
  p_output1[9]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.283526*t3447 - 0.050965*t3471 - 0.235103*t3500 + var1[0];
  p_output1[10]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.284449*t3447 - 0.047476*t3471 - 0.238474*t3500 + var1[0];
  p_output1[11]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.285022*t3447 - 0.043042*t3471 - 0.240569*t3500 + var1[0];
  p_output1[12]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.285181*t3447 - 0.038142*t3471 - 0.241163*t3500 + var1[0];
  p_output1[13]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.28491*t3447 - 0.033309*t3471 - 0.24019*t3500 + var1[0];
  p_output1[14]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.284238*t3447 - 0.029065*t3471 - 0.237757*t3500 + var1[0];
  p_output1[15]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.283238*t3447 - 0.02587*t3471 - 0.234127*t3500 + var1[0];
  p_output1[16]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.282018*t3447 - 0.024072*t3471 - 0.229693*t3500 + var1[0];
  p_output1[17]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.28071*t3447 - 0.023864*t3471 - 0.224936*t3500 + var1[0];
  p_output1[18]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.279457*t3447 - 0.025269*t3471 - 0.220372*t3500 + var1[0];
  p_output1[19]=t3506;
  p_output1[20]=t3869;
  p_output1[21]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.277635*t3837 - 0.032151*t3854 - 0.213723*t3865 + var1[1];
  p_output1[22]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.277264*t3837 - 0.036883*t3854 - 0.21236*t3865 + var1[1];
  p_output1[23]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.27732*t3837 - 0.041816*t3854 - 0.212552*t3865 + var1[1];
  p_output1[24]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.277798*t3837 - 0.046418*t3854 - 0.214278*t3865 + var1[1];
  p_output1[25]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.278646*t3837 - 0.050188*t3854 - 0.217352*t3865 + var1[1];
  p_output1[26]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.279772*t3837 - 0.052719*t3854 - 0.22144*t3865 + var1[1];
  p_output1[27]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.281053*t3837 - 0.053737*t3854 - 0.226099*t3865 + var1[1];
  p_output1[28]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.282351*t3837 - 0.05313*t3854 - 0.230824*t3865 + var1[1];
  p_output1[29]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.283526*t3837 - 0.050965*t3854 - 0.235103*t3865 + var1[1];
  p_output1[30]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.284449*t3837 - 0.047476*t3854 - 0.238474*t3865 + var1[1];
  p_output1[31]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.285022*t3837 - 0.043042*t3854 - 0.240569*t3865 + var1[1];
  p_output1[32]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.285181*t3837 - 0.038142*t3854 - 0.241163*t3865 + var1[1];
  p_output1[33]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.28491*t3837 - 0.033309*t3854 - 0.24019*t3865 + var1[1];
  p_output1[34]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.284238*t3837 - 0.029065*t3854 - 0.237757*t3865 + var1[1];
  p_output1[35]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.283238*t3837 - 0.02587*t3854 - 0.234127*t3865 + var1[1];
  p_output1[36]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.282018*t3837 - 0.024072*t3854 - 0.229693*t3865 + var1[1];
  p_output1[37]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.28071*t3837 - 0.023864*t3854 - 0.224936*t3865 + var1[1];
  p_output1[38]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.279457*t3837 - 0.025269*t3854 - 0.220372*t3865 + var1[1];
  p_output1[39]=t3869;
  p_output1[40]=t4104;
  p_output1[41]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.277635*t4086 - 0.032151*t4094 - 0.213723*t4101 + var1[2];
  p_output1[42]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.277264*t4086 - 0.036883*t4094 - 0.21236*t4101 + var1[2];
  p_output1[43]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.27732*t4086 - 0.041816*t4094 - 0.212552*t4101 + var1[2];
  p_output1[44]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.277798*t4086 - 0.046418*t4094 - 0.214278*t4101 + var1[2];
  p_output1[45]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.278646*t4086 - 0.050188*t4094 - 0.217352*t4101 + var1[2];
  p_output1[46]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.279772*t4086 - 0.052719*t4094 - 0.22144*t4101 + var1[2];
  p_output1[47]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.281053*t4086 - 0.053737*t4094 - 0.226099*t4101 + var1[2];
  p_output1[48]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.282351*t4086 - 0.05313*t4094 - 0.230824*t4101 + var1[2];
  p_output1[49]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.283526*t4086 - 0.050965*t4094 - 0.235103*t4101 + var1[2];
  p_output1[50]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.284449*t4086 - 0.047476*t4094 - 0.238474*t4101 + var1[2];
  p_output1[51]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.285022*t4086 - 0.043042*t4094 - 0.240569*t4101 + var1[2];
  p_output1[52]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.285181*t4086 - 0.038142*t4094 - 0.241163*t4101 + var1[2];
  p_output1[53]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.28491*t4086 - 0.033309*t4094 - 0.24019*t4101 + var1[2];
  p_output1[54]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.284238*t4086 - 0.029065*t4094 - 0.237757*t4101 + var1[2];
  p_output1[55]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.283238*t4086 - 0.02587*t4094 - 0.234127*t4101 + var1[2];
  p_output1[56]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.282018*t4086 - 0.024072*t4094 - 0.229693*t4101 + var1[2];
  p_output1[57]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.28071*t4086 - 0.023864*t4094 - 0.224936*t4101 + var1[2];
  p_output1[58]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.279457*t4086 - 0.025269*t4094 - 0.220372*t4101 + var1[2];
  p_output1[59]=t4104;
  p_output1[60]=t4258;
  p_output1[61]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.499575*t3447 - 0.031977*t3471 - 0.152725*t3500 + var1[0];
  p_output1[62]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.499204*t3447 - 0.036708*t3471 - 0.151362*t3500 + var1[0];
  p_output1[63]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.499261*t3447 - 0.041642*t3471 - 0.151554*t3500 + var1[0];
  p_output1[64]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.499739*t3447 - 0.046244*t3471 - 0.15328*t3500 + var1[0];
  p_output1[65]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.500587*t3447 - 0.050014*t3471 - 0.156353*t3500 + var1[0];
  p_output1[66]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.501712*t3447 - 0.052545*t3471 - 0.160441*t3500 + var1[0];
  p_output1[67]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.502993*t3447 - 0.053562*t3471 - 0.1651*t3500 + var1[0];
  p_output1[68]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.504292*t3447 - 0.052956*t3471 - 0.169825*t3500 + var1[0];
  p_output1[69]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.505466*t3447 - 0.050791*t3471 - 0.174105*t3500 + var1[0];
  p_output1[70]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.50639*t3447 - 0.047302*t3471 - 0.177475*t3500 + var1[0];
  p_output1[71]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.506962*t3447 - 0.042867*t3471 - 0.179571*t3500 + var1[0];
  p_output1[72]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.507121*t3447 - 0.037968*t3471 - 0.180164*t3500 + var1[0];
  p_output1[73]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.50685*t3447 - 0.033134*t3471 - 0.179192*t3500 + var1[0];
  p_output1[74]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.506178*t3447 - 0.028891*t3471 - 0.176759*t3500 + var1[0];
  p_output1[75]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.505178*t3447 - 0.025696*t3471 - 0.173129*t3500 + var1[0];
  p_output1[76]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.503958*t3447 - 0.023898*t3471 - 0.168695*t3500 + var1[0];
  p_output1[77]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.502651*t3447 - 0.023689*t3471 - 0.163938*t3500 + var1[0];
  p_output1[78]=t2198 + t2863 + t3046 + t3224 + t3384 - 0.501397*t3447 - 0.025095*t3471 - 0.159373*t3500 + var1[0];
  p_output1[79]=t4258;
  p_output1[80]=t4401;
  p_output1[81]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.499575*t3837 - 0.031977*t3854 - 0.152725*t3865 + var1[1];
  p_output1[82]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.499204*t3837 - 0.036708*t3854 - 0.151362*t3865 + var1[1];
  p_output1[83]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.499261*t3837 - 0.041642*t3854 - 0.151554*t3865 + var1[1];
  p_output1[84]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.499739*t3837 - 0.046244*t3854 - 0.15328*t3865 + var1[1];
  p_output1[85]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.500587*t3837 - 0.050014*t3854 - 0.156353*t3865 + var1[1];
  p_output1[86]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.501712*t3837 - 0.052545*t3854 - 0.160441*t3865 + var1[1];
  p_output1[87]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.502993*t3837 - 0.053562*t3854 - 0.1651*t3865 + var1[1];
  p_output1[88]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.504292*t3837 - 0.052956*t3854 - 0.169825*t3865 + var1[1];
  p_output1[89]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.505466*t3837 - 0.050791*t3854 - 0.174105*t3865 + var1[1];
  p_output1[90]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.50639*t3837 - 0.047302*t3854 - 0.177475*t3865 + var1[1];
  p_output1[91]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.506962*t3837 - 0.042867*t3854 - 0.179571*t3865 + var1[1];
  p_output1[92]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.507121*t3837 - 0.037968*t3854 - 0.180164*t3865 + var1[1];
  p_output1[93]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.50685*t3837 - 0.033134*t3854 - 0.179192*t3865 + var1[1];
  p_output1[94]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.506178*t3837 - 0.028891*t3854 - 0.176759*t3865 + var1[1];
  p_output1[95]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.505178*t3837 - 0.025696*t3854 - 0.173129*t3865 + var1[1];
  p_output1[96]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.503958*t3837 - 0.023898*t3854 - 0.168695*t3865 + var1[1];
  p_output1[97]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.502651*t3837 - 0.023689*t3854 - 0.163938*t3865 + var1[1];
  p_output1[98]=t3799 + t3810 + t3818 + t3825 + t3831 - 0.501397*t3837 - 0.025095*t3854 - 0.159373*t3865 + var1[1];
  p_output1[99]=t4401;
  p_output1[100]=t4537;
  p_output1[101]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.499575*t4086 - 0.031977*t4094 - 0.152725*t4101 + var1[2];
  p_output1[102]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.499204*t4086 - 0.036708*t4094 - 0.151362*t4101 + var1[2];
  p_output1[103]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.499261*t4086 - 0.041642*t4094 - 0.151554*t4101 + var1[2];
  p_output1[104]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.499739*t4086 - 0.046244*t4094 - 0.15328*t4101 + var1[2];
  p_output1[105]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.500587*t4086 - 0.050014*t4094 - 0.156353*t4101 + var1[2];
  p_output1[106]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.501712*t4086 - 0.052545*t4094 - 0.160441*t4101 + var1[2];
  p_output1[107]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.502993*t4086 - 0.053562*t4094 - 0.1651*t4101 + var1[2];
  p_output1[108]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.504292*t4086 - 0.052956*t4094 - 0.169825*t4101 + var1[2];
  p_output1[109]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.505466*t4086 - 0.050791*t4094 - 0.174105*t4101 + var1[2];
  p_output1[110]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.50639*t4086 - 0.047302*t4094 - 0.177475*t4101 + var1[2];
  p_output1[111]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.506962*t4086 - 0.042867*t4094 - 0.179571*t4101 + var1[2];
  p_output1[112]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.507121*t4086 - 0.037968*t4094 - 0.180164*t4101 + var1[2];
  p_output1[113]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.50685*t4086 - 0.033134*t4094 - 0.179192*t4101 + var1[2];
  p_output1[114]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.506178*t4086 - 0.028891*t4094 - 0.176759*t4101 + var1[2];
  p_output1[115]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.505178*t4086 - 0.025696*t4094 - 0.173129*t4101 + var1[2];
  p_output1[116]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.503958*t4086 - 0.023898*t4094 - 0.168695*t4101 + var1[2];
  p_output1[117]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.502651*t4086 - 0.023689*t4094 - 0.163938*t4101 + var1[2];
  p_output1[118]=t4043 + t4053 + t4068 + t4074 + t4081 - 0.501397*t4086 - 0.025095*t4094 - 0.159373*t4101 + var1[2];
  p_output1[119]=t4537;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 20, (mwSize) 6, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "Link_rr_thigh_to_rr_knee_pitch_bar.hh"

namespace SymFunction
{

void Link_rr_thigh_to_rr_knee_pitch_bar_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
