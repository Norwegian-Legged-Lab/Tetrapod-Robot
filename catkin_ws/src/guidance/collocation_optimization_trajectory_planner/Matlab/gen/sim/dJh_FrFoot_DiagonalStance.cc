/*
 * Automatically Generated from Mathematica.
 * Fri 12 Nov 2021 16:10:34 GMT+01:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t476;
  double t502;
  double t520;
  double t544;
  double t257;
  double t588;
  double t530;
  double t564;
  double t565;
  double t728;
  double t749;
  double t611;
  double t623;
  double t628;
  double t629;
  double t645;
  double t767;
  double t774;
  double t782;
  double t852;
  double t322;
  double t333;
  double t387;
  double t583;
  double t668;
  double t787;
  double t821;
  double t247;
  double t890;
  double t891;
  double t931;
  double t961;
  double t973;
  double t978;
  double t116;
  double t997;
  double t1016;
  double t1056;
  double t825;
  double t988;
  double t995;
  double t1072;
  double t1116;
  double t996;
  double t1083;
  double t1095;
  double t48;
  double t1121;
  double t1150;
  double t1166;
  double t1168;
  double t1176;
  double t1179;
  double t1182;
  double t1200;
  double t1233;
  double t1243;
  double t1244;
  double t1246;
  double t1292;
  double t1294;
  double t1298;
  double t1318;
  double t1326;
  double t1328;
  double t1329;
  double t1336;
  double t1344;
  double t1362;
  double t1366;
  double t1371;
  double t1376;
  double t1312;
  double t1354;
  double t1382;
  double t1383;
  double t1387;
  double t1389;
  double t1391;
  double t1392;
  double t1447;
  double t1478;
  double t1487;
  double t1385;
  double t1397;
  double t1405;
  double t1431;
  double t1493;
  double t1504;
  double t1515;
  double t1548;
  double t1552;
  double t1560;
  double t1571;
  double t1599;
  double t1601;
  double t1610;
  double t1616;
  double t1617;
  double t1713;
  double t1726;
  double t1751;
  double t1765;
  double t1725;
  double t1768;
  double t1774;
  double t1794;
  double t1816;
  double t1821;
  double t1843;
  double t1855;
  double t1857;
  double t1775;
  double t1827;
  double t1836;
  double t1837;
  double t1860;
  double t1863;
  double t1872;
  double t1876;
  double t1900;
  double t1902;
  double t1913;
  double t1947;
  double t1949;
  double t1975;
  double t1984;
  double t2064;
  double t2084;
  double t2092;
  double t2192;
  double t2193;
  double t2215;
  double t2224;
  double t2227;
  double t2228;
  double t2229;
  double t2235;
  double t2237;
  double t2242;
  double t2243;
  double t2248;
  double t2257;
  double t2259;
  double t2268;
  double t2269;
  double t2273;
  double t2300;
  double t2302;
  double t2312;
  double t2318;
  double t2319;
  double t2320;
  double t2322;
  double t2330;
  double t2333;
  double t2334;
  double t2346;
  double t2357;
  double t2359;
  double t2373;
  double t2389;
  double t2391;
  double t2392;
  double t2155;
  double t2163;
  double t2171;
  double t2188;
  double t2234;
  double t2246;
  double t2274;
  double t2283;
  double t2310;
  double t2356;
  double t2397;
  double t2402;
  double t2404;
  double t2407;
  double t2410;
  double t2424;
  double t2430;
  double t2435;
  double t2436;
  double t2492;
  double t2495;
  double t2484;
  double t2486;
  double t2487;
  double t2463;
  double t2471;
  double t2472;
  double t2529;
  double t2292;
  double t2450;
  double t2451;
  double t2554;
  double t2138;
  double t2143;
  double t2149;
  double t2499;
  double t2558;
  double t2565;
  double t2568;
  double t2611;
  double t2618;
  double t2621;
  double t2501;
  double t2503;
  double t2521;
  double t2134;
  double t2730;
  double t2736;
  double t2756;
  double t2972;
  double t2974;
  double t2976;
  double t2979;
  double t2571;
  double t3005;
  double t3010;
  double t3015;
  double t3072;
  double t3027;
  double t2685;
  double t3021;
  double t3035;
  double t3036;
  double t3044;
  double t3054;
  double t3120;
  double t3129;
  double t3132;
  double t3134;
  double t3142;
  double t2581;
  double t2582;
  double t2583;
  double t2691;
  double t2699;
  double t2703;
  double t2781;
  double t2854;
  double t3314;
  double t3317;
  double t2783;
  double t2785;
  double t2794;
  double t3342;
  double t3344;
  double t2856;
  double t2863;
  double t2870;
  double t2921;
  double t2959;
  double t3530;
  double t3544;
  double t2925;
  double t2933;
  double t2937;
  double t3627;
  double t3629;
  double t2960;
  double t2962;
  double t2963;
  double t3773;
  double t3774;
  double t3782;
  double t3783;
  double t3788;
  double t3797;
  double t3840;
  double t3845;
  double t3849;
  double t3850;
  double t3851;
  double t3858;
  double t3859;
  double t3880;
  double t3882;
  double t3883;
  double t3814;
  double t3816;
  double t3817;
  double t3804;
  double t3761;
  double t3764;
  double t3766;
  double t3080;
  double t3086;
  double t3093;
  double t3979;
  double t3986;
  double t3987;
  double t3934;
  double t3936;
  double t3942;
  double t3946;
  double t3952;
  double t3954;
  double t3912;
  double t3923;
  double t3163;
  double t3164;
  double t3175;
  double t3931;
  double t3956;
  double t3957;
  double t3958;
  double t4000;
  double t4006;
  double t4012;
  double t4014;
  double t4018;
  double t3331;
  double t3334;
  double t3335;
  double t3355;
  double t3361;
  double t3364;
  double t4232;
  double t4240;
  double t4263;
  double t4268;
  double t3578;
  double t3581;
  double t3590;
  double t3641;
  double t3643;
  double t3645;
  double t4453;
  double t4462;
  double t4474;
  double t4475;
  double t4675;
  double t4676;
  double t4679;
  double t4680;
  double t4685;
  double t4686;
  double t4698;
  double t4704;
  double t4716;
  double t4721;
  double t4723;
  double t4726;
  double t4728;
  double t4729;
  double t4737;
  double t4738;
  double t4741;
  double t4745;
  double t4747;
  double t4750;
  double t4800;
  double t4804;
  double t4808;
  double t4817;
  double t4818;
  double t4823;
  double t4731;
  double t4751;
  double t4754;
  double t4759;
  double t4760;
  double t4761;
  double t4781;
  double t4788;
  double t4789;
  double t4765;
  double t4767;
  double t4873;
  double t4790;
  double t4849;
  double t4951;
  double t4952;
  double t4959;
  double t4960;
  double t4967;
  double t4968;
  double t4969;
  double t4973;
  double t4708;
  double t4709;
  double t4710;
  double t4681;
  double t4705;
  double t4706;
  double t4831;
  double t4832;
  double t4833;
  double t4810;
  double t4824;
  double t4825;
  double t4842;
  double t5045;
  double t5046;
  double t5047;
  double t4775;
  double t5031;
  double t5033;
  double t5035;
  double t5057;
  double t5058;
  double t5059;
  double t5062;
  double t5063;
  double t5064;
  double t4990;
  double t4997;
  double t5005;
  double t4985;
  double t4987;
  double t4988;
  double t4981;
  double t4983;
  double t4989;
  double t5007;
  double t5008;
  double t5091;
  double t5092;
  double t5093;
  double t5103;
  double t5108;
  double t5110;
  double t5073;
  double t5074;
  double t5075;
  double t5051;
  double t5052;
  double t5053;
  double t5050;
  double t5065;
  double t5158;
  double t5160;
  double t5166;
  double t5071;
  double t5079;
  double t5143;
  double t5145;
  double t5155;
  double t5192;
  double t5193;
  double t5196;
  double t5200;
  double t5202;
  double t5203;
  double t5279;
  double t5296;
  double t5218;
  double t5224;
  double t5227;
  double t5294;
  double t5280;
  double t4984;
  double t5017;
  double t5021;
  double t5415;
  double t5423;
  double t5171;
  double t5173;
  double t5176;
  double t5431;
  double t5444;
  double t5529;
  double t5550;
  double t5548;
  double t5532;
  double t5668;
  double t5676;
  double t5689;
  double t5699;
  double t5774;
  double t5775;
  double t5776;
  double t5783;
  double t5784;
  double t5786;
  double t5797;
  double t5801;
  double t5779;
  double t5790;
  double t5804;
  double t5808;
  double t5813;
  double t5814;
  double t5816;
  double t5819;
  double t5838;
  double t5839;
  double t5851;
  double t5852;
  double t5854;
  double t5861;
  double t5863;
  double t5868;
  double t5840;
  double t5857;
  double t5870;
  double t5873;
  double t5876;
  double t5879;
  double t5889;
  double t5895;
  double t4855;
  double t4856;
  double t4857;
  double t5939;
  double t5940;
  double t5941;
  double t5946;
  double t5810;
  double t5822;
  double t5826;
  double t5828;
  double t5830;
  double t5836;
  double t5927;
  double t5933;
  double t5934;
  double t5936;
  double t5938;
  double t4945;
  double t4946;
  double t4947;
  double t4949;
  double t6033;
  double t6034;
  double t6042;
  double t5971;
  double t6078;
  double t6086;
  double t6087;
  double t6089;
  double t6092;
  double t6093;
  double t6095;
  double t6105;
  double t6110;
  double t6112;
  double t6100;
  double t6101;
  double t6103;
  double t6030;
  double t6037;
  double t6043;
  double t6044;
  double t6050;
  double t6057;
  double t6058;
  double t6059;
  double t6187;
  double t6188;
  double t6192;
  double t6178;
  double t6181;
  double t6182;
  double t6160;
  double t6164;
  double t6168;
  double t6170;
  double t6186;
  double t6194;
  double t6195;
  double t6213;
  double t6214;
  double t6217;
  double t6223;
  double t6226;
  double t6229;
  double t5914;
  double t5918;
  double t5921;
  double t5875;
  double t5897;
  double t5899;
  double t5947;
  double t6251;
  double t6252;
  double t6254;
  double t6256;
  double t6257;
  double t6262;
  double t6268;
  double t6269;
  double t6271;
  double t6255;
  double t6282;
  double t6285;
  double t6286;
  double t6276;
  double t6280;
  double t6299;
  double t6300;
  double t6301;
  double t6305;
  double t6306;
  double t6307;
  double t6313;
  double t6319;
  double t6321;
  double t5306;
  double t5310;
  double t5311;
  double t6361;
  double t5376;
  double t5378;
  double t5381;
  double t5382;
  double t6375;
  double t6432;
  double t6434;
  double t6436;
  double t6438;
  double t6439;
  double t6440;
  double t6441;
  double t6454;
  double t6459;
  double t6466;
  double t6445;
  double t6446;
  double t6447;
  double t6327;
  double t6328;
  double t6329;
  double t6360;
  double t6515;
  double t6175;
  double t6199;
  double t6201;
  double t6528;
  double t6530;
  double t5535;
  double t5536;
  double t5537;
  double t5555;
  double t5557;
  double t5558;
  double t5587;
  double t5591;
  double t5592;
  double t5597;
  double t5611;
  double t5612;
  double t5614;
  double t5621;
  double t6574;
  double t6591;
  double t6689;
  double t6694;
  double t6695;
  double t6699;
  double t6701;
  double t6704;
  double t6706;
  double t6666;
  double t6667;
  double t6671;
  double t6675;
  double t6683;
  double t6685;
  double t6687;
  double t6660;
  double t6662;
  double t6663;
  double t6664;
  double t6647;
  double t6648;
  double t6650;
  double t6654;
  double t6592;
  double t6572;
  double t6718;
  double t6722;
  double t6744;
  double t6751;
  t476 = Cos(var1[11]);
  t502 = -1.*t476;
  t520 = 1. + t502;
  t544 = Sin(var1[11]);
  t257 = Cos(var1[10]);
  t588 = Sin(var1[10]);
  t530 = -1.7408e-8*t520;
  t564 = -3.999964e-6*t544;
  t565 = t530 + t564;
  t728 = -1.*t257;
  t749 = 1. + t728;
  t611 = -1.000000000016*t520;
  t623 = 1. + t611;
  t628 = 0.999991*t623;
  t629 = 0.004352*t544;
  t645 = t628 + t629;
  t767 = -0.004352*t476;
  t774 = 0.999991*t544;
  t782 = t767 + t774;
  t852 = Sin(var1[9]);
  t322 = -1. + t257;
  t333 = 1.6e-11*t322;
  t387 = 1. + t333;
  t583 = t387*t565;
  t668 = -4.e-6*t588*t645;
  t787 = 4.e-6*t749*t782;
  t821 = 0. + t583 + t668 + t787;
  t247 = Cos(var1[9]);
  t890 = 4.e-6*t588*t565;
  t891 = -1.000000000016*t749;
  t931 = 1. + t891;
  t961 = t931*t645;
  t973 = -1.*t588*t782;
  t978 = 0. + t890 + t961 + t973;
  t116 = Cos(var1[5]);
  t997 = -1.*t852*t821;
  t1016 = t247*t978;
  t1056 = 0. + t997 + t1016;
  t825 = t247*t821;
  t988 = t852*t978;
  t995 = 0. + t825 + t988;
  t1072 = Sin(var1[5]);
  t1116 = Cos(var1[3]);
  t996 = t116*t995;
  t1083 = t1056*t1072;
  t1095 = 0. + t996 + t1083;
  t48 = Sin(var1[3]);
  t1121 = Cos(var1[4]);
  t1150 = 4.e-6*t749*t565;
  t1166 = t588*t645;
  t1168 = t257*t782;
  t1176 = 0. + t1150 + t1166 + t1168;
  t1179 = t1121*t1176;
  t1182 = Sin(var1[4]);
  t1200 = t116*t1056;
  t1233 = -1.*t995*t1072;
  t1243 = 0. + t1200 + t1233;
  t1244 = -1.*t1182*t1243;
  t1246 = 0. + t1179 + t1244;
  t1292 = 0.004352*t623;
  t1294 = -0.9999910000159999*t544;
  t1298 = t1292 + t1294;
  t1318 = 1.6e-11*t520;
  t1326 = -1. + t1318;
  t1328 = 4.e-6*t1326;
  t1329 = 3.999964e-6*t520;
  t1336 = -1.7408e-8*t544;
  t1344 = t1328 + t1329 + t1336;
  t1362 = -1. + t476;
  t1366 = 1.6e-11*t1362;
  t1371 = 0.999991*t476;
  t1376 = t1366 + t1371 + t629;
  t1312 = -4.e-6*t588*t1298;
  t1354 = t387*t1344;
  t1382 = 4.e-6*t749*t1376;
  t1383 = 0. + t1312 + t1354 + t1382;
  t1387 = t931*t1298;
  t1389 = 4.e-6*t588*t1344;
  t1391 = -1.*t588*t1376;
  t1392 = 0. + t1387 + t1389 + t1391;
  t1447 = -1.*t852*t1383;
  t1478 = t247*t1392;
  t1487 = 0. + t1447 + t1478;
  t1385 = t247*t1383;
  t1397 = t852*t1392;
  t1405 = 0. + t1385 + t1397;
  t1431 = t116*t1405;
  t1493 = t1487*t1072;
  t1504 = 0. + t1431 + t1493;
  t1515 = t588*t1298;
  t1548 = 4.e-6*t749*t1344;
  t1552 = t257*t1376;
  t1560 = 0. + t1515 + t1548 + t1552;
  t1571 = t1121*t1560;
  t1599 = t116*t1487;
  t1601 = -1.*t1405*t1072;
  t1610 = 0. + t1599 + t1601;
  t1616 = -1.*t1182*t1610;
  t1617 = 0. + t1571 + t1616;
  t1713 = -1. + t1318 + t1366;
  t1726 = 4.e-6*t1362;
  t1751 = -4.e-6*t476;
  t1765 = t1726 + t1751;
  t1725 = t387*t1713;
  t1768 = 4.e-6*t749*t1765;
  t1774 = t1725 + t1768;
  t1794 = 4.e-6*t1713*t588;
  t1816 = -1.*t1765*t588;
  t1821 = t1794 + t1816;
  t1843 = -1.*t1774*t852;
  t1855 = t247*t1821;
  t1857 = t1843 + t1855;
  t1775 = t247*t1774;
  t1827 = t852*t1821;
  t1836 = t1775 + t1827;
  t1837 = t116*t1836;
  t1860 = t1857*t1072;
  t1863 = t1837 + t1860;
  t1872 = 4.e-6*t749*t1713;
  t1876 = t257*t1765;
  t1900 = t1872 + t1876;
  t1902 = t1900*t1121;
  t1913 = t116*t1857;
  t1947 = -1.*t1836*t1072;
  t1949 = t1913 + t1947;
  t1975 = -1.*t1182*t1949;
  t1984 = t1902 + t1975;
  t2064 = -1.*t1176*t1182;
  t2084 = -1.*t1121*t1243;
  t2092 = t2064 + t2084;
  t2192 = -1.26e-8*var1[11];
  t2193 = 1. + t1366;
  t2215 = -0.14871*t2193;
  t2224 = -1.64779999997447e-7*t520;
  t2227 = -1.59556e-7*t1362;
  t2228 = -1.199987999968e-6*t544;
  t2229 = t2192 + t2215 + t2224 + t2227 + t2228;
  t2235 = 0.803147*t623;
  t2237 = 0.50315000001605*t520;
  t2242 = 0.00130540515936178*t544;
  t2243 = t2235 + t2237 + t2242;
  t2248 = -5.04e-14*var1[11];
  t2257 = -0.03988959484*t520;
  t2259 = 6.38224e-13*t1362;
  t2268 = -0.041195*t476;
  t2269 = 0.299996999992*t544;
  t2273 = t2248 + t2257 + t2259 + t2268 + t2269;
  t2300 = -1.*t247;
  t2302 = 1. + t2300;
  t2312 = -0.15121*t852;
  t2318 = -1.2484e-7*var1[10];
  t2319 = 2.479936e-18*t749;
  t2320 = -1.54996e-7*t322;
  t2322 = 1.124840000016e-6*t588;
  t2330 = t387*t2229;
  t2333 = -4.e-6*t588*t2243;
  t2334 = 4.e-6*t749*t2273;
  t2346 = t2318 + t2319 + t2320 + t2322 + t2330 + t2333 + t2334;
  t2357 = 0.281210000008499*t749;
  t2359 = -0.03874900000062*t588;
  t2373 = 4.e-6*t588*t2229;
  t2389 = t931*t2243;
  t2391 = -1.*t588*t2273;
  t2392 = t2357 + t2359 + t2373 + t2389 + t2391;
  t2155 = -4.9936e-13*var1[10];
  t2163 = -0.038749*t749;
  t2171 = 6.19984e-13*t322;
  t2188 = -0.281210000004*t588;
  t2234 = 4.e-6*t749*t2229;
  t2246 = t588*t2243;
  t2274 = t257*t2273;
  t2283 = 0. + t2155 + t2163 + t2171 + t2188 + t2234 + t2246 + t2274;
  t2310 = 0.15121*t2302;
  t2356 = -1.*t852*t2346;
  t2397 = t247*t2392;
  t2402 = t2310 + t2312 + t2356 + t2397;
  t2404 = t116*t2402;
  t2407 = -0.15121*t2302;
  t2410 = t247*t2346;
  t2424 = t852*t2392;
  t2430 = t2407 + t2312 + t2410 + t2424;
  t2435 = -1.*t2430*t1072;
  t2436 = 0. + t2404 + t2435;
  t2492 = t1121*t2283;
  t2495 = -1.*t1182*t2436;
  t2484 = t1900*t1182;
  t2486 = t1121*t1949;
  t2487 = t2484 + t2486;
  t2463 = t2283*t1182;
  t2471 = t1121*t2436;
  t2472 = 0. + t2463 + t2471;
  t2529 = 0. + t2492 + t2495;
  t2292 = -1.*t2283*t1182;
  t2450 = -1.*t1121*t2436;
  t2451 = t2292 + t2450;
  t2554 = t1571 + t1616;
  t2138 = t1560*t1182;
  t2143 = t1121*t1610;
  t2149 = 0. + t2138 + t2143;
  t2499 = t2492 + t2495;
  t2558 = t116*t2430;
  t2565 = t2402*t1072;
  t2568 = 0. + t2558 + t2565;
  t2611 = -1.*t1560*t1182;
  t2618 = -1.*t1121*t1610;
  t2621 = t2611 + t2618;
  t2501 = -1.*t1900*t1182;
  t2503 = -1.*t1121*t1949;
  t2521 = t2501 + t2503;
  t2134 = t1179 + t1244;
  t2730 = t1176*t1182;
  t2736 = t1121*t1243;
  t2756 = 0. + t2730 + t2736;
  t2972 = -1.*t116*t995;
  t2974 = -1.*t1056*t1072;
  t2976 = t2972 + t2974;
  t2979 = t1200 + t1233;
  t2571 = t1863*t2568;
  t3005 = -1.*t116*t2430;
  t3010 = -1.*t2402*t1072;
  t3015 = t3005 + t3010;
  t3072 = t1599 + t1601;
  t3027 = t2404 + t2435;
  t2685 = -1.*t1504*t2568;
  t3021 = t1949*t2568;
  t3035 = t1863*t3027;
  t3036 = -1.*t116*t1836;
  t3044 = -1.*t1857*t1072;
  t3054 = t3036 + t3044;
  t3120 = -1.*t3072*t2568;
  t3129 = -1.*t1504*t3027;
  t3132 = -1.*t116*t1405;
  t3134 = -1.*t1487*t1072;
  t3142 = t3132 + t3134;
  t2581 = t2487*t2472;
  t2582 = t1984*t2529;
  t2583 = t2571 + t2581 + t2582;
  t2691 = -1.*t2149*t2472;
  t2699 = -1.*t1617*t2529;
  t2703 = t2685 + t2691 + t2699;
  t2781 = -1.*t1863*t2568;
  t2854 = t2568*t1095;
  t3314 = -1.*t1949*t2568;
  t3317 = -1.*t1863*t3027;
  t2783 = -1.*t2487*t2472;
  t2785 = -1.*t1984*t2529;
  t2794 = t2781 + t2783 + t2785;
  t3342 = t3027*t1095;
  t3344 = t2568*t2979;
  t2856 = t2472*t2756;
  t2863 = t2529*t1246;
  t2870 = t2854 + t2856 + t2863;
  t2921 = t1504*t2568;
  t2959 = -1.*t2568*t1095;
  t3530 = t3072*t2568;
  t3544 = t1504*t3027;
  t2925 = t2149*t2472;
  t2933 = t1617*t2529;
  t2937 = t2921 + t2925 + t2933;
  t3627 = -1.*t3027*t1095;
  t3629 = -1.*t2568*t2979;
  t2960 = -1.*t2472*t2756;
  t2962 = -1.*t2529*t1246;
  t2963 = t2959 + t2960 + t2962;
  t3773 = -0.15121*t247;
  t3774 = t3773 + t2312 + t2356 + t2397;
  t3782 = 0.15121*t852;
  t3783 = -1.*t247*t2346;
  t3788 = -1.*t852*t2392;
  t3797 = t3773 + t3782 + t3783 + t3788;
  t3840 = -1.*t247*t821;
  t3845 = -1.*t852*t978;
  t3849 = t3840 + t3845;
  t3850 = t116*t3849;
  t3851 = t997 + t1016;
  t3858 = -1.*t3851*t1072;
  t3859 = t3850 + t3858;
  t3880 = t116*t3851;
  t3882 = t3849*t1072;
  t3883 = t3880 + t3882;
  t3814 = -1.*t247*t1774;
  t3816 = -1.*t852*t1821;
  t3817 = t3814 + t3816;
  t3804 = t1447 + t1478;
  t3761 = -1.*t247*t1383;
  t3764 = -1.*t852*t1392;
  t3766 = t3761 + t3764;
  t3080 = t1900*t2283;
  t3086 = t1949*t2436;
  t3093 = t3080 + t2571 + t3086;
  t3979 = t116*t3804;
  t3986 = t3766*t1072;
  t3987 = t3979 + t3986;
  t3934 = t116*t3797;
  t3936 = -1.*t3774*t1072;
  t3942 = t3934 + t3936;
  t3946 = t116*t3774;
  t3952 = t3797*t1072;
  t3954 = t3946 + t3952;
  t3912 = t3817*t1072;
  t3923 = t1913 + t3912;
  t3163 = -1.*t1560*t2283;
  t3164 = -1.*t1610*t2436;
  t3175 = t3163 + t2685 + t3164;
  t3931 = t3923*t2568;
  t3956 = t1863*t3954;
  t3957 = t116*t3817;
  t3958 = t3957 + t3044;
  t4000 = -1.*t3987*t2568;
  t4006 = -1.*t1504*t3954;
  t4012 = t116*t3766;
  t4014 = -1.*t3804*t1072;
  t4018 = t4012 + t4014;
  t3331 = -1.*t1900*t2283;
  t3334 = -1.*t1949*t2436;
  t3335 = t3331 + t2781 + t3334;
  t3355 = t2283*t1176;
  t3361 = t2436*t1243;
  t3364 = t3355 + t2854 + t3361;
  t4232 = -1.*t3923*t2568;
  t4240 = -1.*t1863*t3954;
  t4263 = t3954*t1095;
  t4268 = t2568*t3883;
  t3578 = t1560*t2283;
  t3581 = t1610*t2436;
  t3590 = t3578 + t2921 + t3581;
  t3641 = -1.*t2283*t1176;
  t3643 = -1.*t2436*t1243;
  t3645 = t3641 + t2959 + t3643;
  t4453 = t3987*t2568;
  t4462 = t1504*t3954;
  t4474 = -1.*t3954*t1095;
  t4475 = -1.*t2568*t3883;
  t4675 = -1.000000000016*t588*t1298;
  t4676 = 4.e-6*t257*t1344;
  t4679 = -1.*t257*t1376;
  t4680 = t4675 + t4676 + t4679;
  t4685 = -4.e-6*t257*t1298;
  t4686 = -1.6e-11*t588*t1344;
  t4698 = 4.e-6*t588*t1376;
  t4704 = t4685 + t4686 + t4698;
  t4716 = -0.03874900000062*t257;
  t4721 = 0.281210000008499*t588;
  t4723 = 4.e-6*t257*t2229;
  t4726 = -1.000000000016*t588*t2243;
  t4728 = -1.*t257*t2273;
  t4729 = t4716 + t4721 + t4723 + t4726 + t4728;
  t4737 = 1.124840000016e-6*t257;
  t4738 = 1.5499600000248e-7*t588;
  t4741 = -1.6e-11*t588*t2229;
  t4745 = -4.e-6*t257*t2243;
  t4747 = 4.e-6*t588*t2273;
  t4750 = -1.2484e-7 + t4737 + t4738 + t4741 + t4745 + t4747;
  t4800 = 4.e-6*t257*t1713;
  t4804 = -1.*t257*t1765;
  t4808 = t4800 + t4804;
  t4817 = -1.6e-11*t1713*t588;
  t4818 = 4.e-6*t1765*t588;
  t4823 = t4817 + t4818;
  t4731 = t852*t4729;
  t4751 = t247*t4750;
  t4754 = t4731 + t4751;
  t4759 = t247*t4729;
  t4760 = -1.*t852*t4750;
  t4761 = t4759 + t4760;
  t4781 = -0.281210000004*t257;
  t4788 = t257*t2243;
  t4789 = -4.9936e-13 + t4781 + t2359 + t2373 + t4788 + t2391;
  t4765 = t257*t1298;
  t4767 = t4765 + t1389 + t1391;
  t4873 = t2155 + t2163 + t2171 + t2188 + t2234 + t2246 + t2274;
  t4790 = -1.*t1560*t4789;
  t4849 = t1900*t4789;
  t4951 = 4.e-6*t257*t565;
  t4952 = -1.000000000016*t588*t645;
  t4959 = -1.*t257*t782;
  t4960 = t4951 + t4952 + t4959;
  t4967 = -1.6e-11*t588*t565;
  t4968 = -4.e-6*t257*t645;
  t4969 = 4.e-6*t588*t782;
  t4973 = t4967 + t4968 + t4969;
  t4708 = t852*t4680;
  t4709 = t247*t4704;
  t4710 = t4708 + t4709;
  t4681 = t247*t4680;
  t4705 = -1.*t852*t4704;
  t4706 = t4681 + t4705;
  t4831 = t4808*t852;
  t4832 = t247*t4823;
  t4833 = t4831 + t4832;
  t4810 = t247*t4808;
  t4824 = -1.*t852*t4823;
  t4825 = t4810 + t4824;
  t4842 = t1821*t2283;
  t5045 = t116*t4833;
  t5046 = t4825*t1072;
  t5047 = t5045 + t5046;
  t4775 = -1.*t4767*t2283;
  t5031 = t116*t4710;
  t5033 = t4706*t1072;
  t5035 = t5031 + t5033;
  t5057 = t116*t4761;
  t5058 = -1.*t4754*t1072;
  t5059 = t5057 + t5058;
  t5062 = t116*t4754;
  t5063 = t4761*t1072;
  t5064 = t5062 + t5063;
  t4990 = t852*t4960;
  t4997 = t247*t4973;
  t5005 = t4990 + t4997;
  t4985 = t247*t4960;
  t4987 = -1.*t852*t4973;
  t4988 = t4985 + t4987;
  t4981 = t257*t645;
  t4983 = t890 + t4981 + t973;
  t4989 = t116*t4988;
  t5007 = -1.*t5005*t1072;
  t5008 = t4989 + t5007;
  t5091 = t116*t5005;
  t5092 = t4988*t1072;
  t5093 = t5091 + t5092;
  t5103 = t1121*t4983;
  t5108 = -1.*t1182*t5008;
  t5110 = t5103 + t5108;
  t5073 = t116*t4706;
  t5074 = -1.*t4710*t1072;
  t5075 = t5073 + t5074;
  t5051 = t116*t4825;
  t5052 = -1.*t4833*t1072;
  t5053 = t5051 + t5052;
  t5050 = t5047*t2568;
  t5065 = t1863*t5064;
  t5158 = t1821*t1182;
  t5160 = t1121*t5053;
  t5166 = t5158 + t5160;
  t5071 = -1.*t5035*t2568;
  t5079 = -1.*t1504*t5064;
  t5143 = t4767*t1182;
  t5145 = t1121*t5075;
  t5155 = t5143 + t5145;
  t5192 = t4789*t1182;
  t5193 = t1121*t5059;
  t5196 = t5192 + t5193;
  t5200 = t1121*t4789;
  t5202 = -1.*t1182*t5059;
  t5203 = t5200 + t5202;
  t5279 = t4789*t1176;
  t5296 = -1.*t1900*t4789;
  t5218 = t1121*t4767;
  t5224 = -1.*t1182*t5075;
  t5227 = t5218 + t5224;
  t5294 = -1.*t1821*t2283;
  t5280 = t2283*t4983;
  t4984 = t4983*t1182;
  t5017 = t1121*t5008;
  t5021 = t4984 + t5017;
  t5415 = -1.*t5047*t2568;
  t5423 = -1.*t1863*t5064;
  t5171 = t1121*t1821;
  t5173 = -1.*t1182*t5053;
  t5176 = t5171 + t5173;
  t5431 = t5064*t1095;
  t5444 = t2568*t5093;
  t5529 = -1.*t4789*t1176;
  t5550 = t1560*t4789;
  t5548 = t4767*t2283;
  t5532 = -1.*t2283*t4983;
  t5668 = t5035*t2568;
  t5676 = t1504*t5064;
  t5689 = -1.*t5064*t1095;
  t5699 = -1.*t2568*t5093;
  t5774 = 0.00130540515936178*t476;
  t5775 = -0.2999969999968001*t544;
  t5776 = t5774 + t5775;
  t5783 = -1.199987999968e-6*t476;
  t5784 = -5.2216206374471e-9*t544;
  t5786 = -1.26e-8 + t5783 + t5784;
  t5797 = 0.299996999992*t476;
  t5801 = -5.04e-14 + t5797 + t2242;
  t5779 = -4.e-6*t588*t5776;
  t5790 = t387*t5786;
  t5804 = 4.e-6*t749*t5801;
  t5808 = t5779 + t5790 + t5804;
  t5813 = t931*t5776;
  t5814 = 4.e-6*t588*t5786;
  t5816 = -1.*t588*t5801;
  t5819 = t5813 + t5814 + t5816;
  t5838 = 0.004352*t476;
  t5839 = t5838 + t1294;
  t5851 = -0.9999910000159999*t476;
  t5852 = -0.00435200000006963*t544;
  t5854 = t5851 + t5852;
  t5861 = -1.7408e-8*t476;
  t5863 = 3.999964000064e-6*t544;
  t5868 = t5861 + t5863;
  t5840 = 4.e-6*t749*t5839;
  t5857 = -4.e-6*t588*t5854;
  t5870 = t387*t5868;
  t5873 = t5840 + t5857 + t5870;
  t5876 = -1.*t588*t5839;
  t5879 = t931*t5854;
  t5889 = 4.e-6*t588*t5868;
  t5895 = t5876 + t5879 + t5889;
  t4855 = t1857*t2402;
  t4856 = t1836*t2430;
  t4857 = t4855 + t4856 + t3080;
  t5939 = t257*t5839;
  t5940 = t588*t5854;
  t5941 = 4.e-6*t749*t5868;
  t5946 = t5939 + t5940 + t5941;
  t5810 = -1.*t852*t5808;
  t5822 = t247*t5819;
  t5826 = t5810 + t5822;
  t5828 = t247*t5808;
  t5830 = t852*t5819;
  t5836 = t5828 + t5830;
  t5927 = t588*t5776;
  t5933 = 4.e-6*t749*t5786;
  t5934 = t257*t5801;
  t5936 = t5927 + t5933 + t5934;
  t5938 = -1.*t5936*t1560;
  t4945 = t1774*t2346;
  t4946 = t1900*t4873;
  t4947 = t1821*t2392;
  t4949 = t4945 + t4946 + t4947;
  t6033 = -3.999964e-6*t476;
  t6034 = t6033 + t1336;
  t6042 = t1371 + t629;
  t5971 = t1900*t5936;
  t6078 = -1.*t1298*t5776;
  t6086 = -1.*t1344*t5786;
  t6087 = -1.*t2229*t5868;
  t6089 = -1.*t5854*t2243;
  t6092 = -1.*t5801*t1376;
  t6093 = -1.*t5839*t2273;
  t6095 = t6078 + t6086 + t6087 + t6089 + t6092 + t6093;
  t6105 = t1713*t5786;
  t6110 = t1765*t5801;
  t6112 = t6105 + t6110;
  t6100 = t1713*t2229;
  t6101 = t1765*t2273;
  t6103 = t6100 + t6101;
  t6030 = -4.e-6*t588*t5839;
  t6037 = t387*t6034;
  t6043 = 4.e-6*t749*t6042;
  t6044 = t6030 + t6037 + t6043;
  t6050 = t931*t5839;
  t6057 = 4.e-6*t588*t6034;
  t6058 = -1.*t588*t6042;
  t6059 = t6050 + t6057 + t6058;
  t6187 = t247*t6044;
  t6188 = t852*t6059;
  t6192 = t6187 + t6188;
  t6178 = -1.*t852*t6044;
  t6181 = t247*t6059;
  t6182 = t6178 + t6181;
  t6160 = t588*t5839;
  t6164 = 4.e-6*t749*t6034;
  t6168 = t257*t6042;
  t6170 = t6160 + t6164 + t6168;
  t6186 = t116*t6182;
  t6194 = -1.*t6192*t1072;
  t6195 = t6186 + t6194;
  t6213 = t116*t6192;
  t6214 = t6182*t1072;
  t6217 = t6213 + t6214;
  t6223 = t1121*t6170;
  t6226 = -1.*t1182*t6195;
  t6229 = t6223 + t6226;
  t5914 = t247*t5873;
  t5918 = t852*t5895;
  t5921 = t5914 + t5918;
  t5875 = -1.*t852*t5873;
  t5897 = t247*t5895;
  t5899 = t5875 + t5897;
  t5947 = -1.*t5946*t2283;
  t6251 = t116*t5836;
  t6252 = t5826*t1072;
  t6254 = t6251 + t6252;
  t6256 = t116*t5826;
  t6257 = -1.*t5836*t1072;
  t6262 = t6256 + t6257;
  t6268 = t116*t5921;
  t6269 = t5899*t1072;
  t6271 = t6268 + t6269;
  t6255 = t1863*t6254;
  t6282 = t116*t5899;
  t6285 = -1.*t5921*t1072;
  t6286 = t6282 + t6285;
  t6276 = -1.*t6254*t1504;
  t6280 = -1.*t6271*t2568;
  t6299 = t5936*t1182;
  t6300 = t1121*t6262;
  t6301 = t6299 + t6300;
  t6305 = t1121*t5936;
  t6306 = -1.*t1182*t6262;
  t6307 = t6305 + t6306;
  t6313 = t5946*t1182;
  t6319 = t1121*t6286;
  t6321 = t6313 + t6319;
  t5306 = -1.*t1857*t2402;
  t5310 = -1.*t1836*t2430;
  t5311 = t5306 + t5310 + t3331;
  t6361 = t5936*t1176;
  t5376 = -1.*t1774*t2346;
  t5378 = -1.*t1900*t4873;
  t5381 = -1.*t1821*t2392;
  t5382 = t5376 + t5378 + t5381;
  t6375 = -1.*t1900*t5936;
  t6432 = t2229*t6034;
  t6434 = t565*t5786;
  t6436 = t5839*t2243;
  t6438 = t5776*t645;
  t6439 = t6042*t2273;
  t6440 = t5801*t782;
  t6441 = t6432 + t6434 + t6436 + t6438 + t6439 + t6440;
  t6454 = -1.*t1713*t5786;
  t6459 = -1.*t1765*t5801;
  t6466 = t6454 + t6459;
  t6445 = -1.*t1713*t2229;
  t6446 = -1.*t1765*t2273;
  t6447 = t6445 + t6446;
  t6327 = t1121*t5946;
  t6328 = -1.*t1182*t6286;
  t6329 = t6327 + t6328;
  t6360 = t6170*t2283;
  t6515 = -1.*t1863*t6254;
  t6175 = t6170*t1182;
  t6199 = t1121*t6195;
  t6201 = t6175 + t6199;
  t6528 = t6217*t2568;
  t6530 = t6254*t1095;
  t5535 = -1.*t2402*t1056;
  t5536 = -1.*t2430*t995;
  t5537 = t5535 + t5536 + t3641;
  t5555 = t1487*t2402;
  t5557 = t1405*t2430;
  t5558 = t5555 + t5557 + t3578;
  t5587 = -1.*t2346*t821;
  t5591 = -1.*t4873*t1176;
  t5592 = -1.*t2392*t978;
  t5597 = t5587 + t5591 + t5592;
  t5611 = t1383*t2346;
  t5612 = t1560*t4873;
  t5614 = t1392*t2392;
  t5621 = t5611 + t5612 + t5614;
  t6574 = -1.*t5936*t1176;
  t6591 = t5936*t1560;
  t6689 = t1298*t5776;
  t6694 = t1344*t5786;
  t6695 = t2229*t5868;
  t6699 = t5854*t2243;
  t6701 = t5801*t1376;
  t6704 = t5839*t2273;
  t6706 = t6689 + t6694 + t6695 + t6699 + t6701 + t6704;
  t6666 = -1.*t2229*t6034;
  t6667 = -1.*t565*t5786;
  t6671 = -1.*t5839*t2243;
  t6675 = -1.*t5776*t645;
  t6683 = -1.*t6042*t2273;
  t6685 = -1.*t5801*t782;
  t6687 = t6666 + t6667 + t6671 + t6675 + t6683 + t6685;
  t6660 = t2229*t1344;
  t6662 = t1298*t2243;
  t6663 = t1376*t2273;
  t6664 = t6660 + t6662 + t6663;
  t6647 = -1.*t565*t2229;
  t6648 = -1.*t2243*t645;
  t6650 = -1.*t2273*t782;
  t6654 = t6647 + t6648 + t6650;
  t6592 = t5946*t2283;
  t6572 = -1.*t6170*t2283;
  t6718 = t6254*t1504;
  t6722 = t6271*t2568;
  t6744 = -1.*t6217*t2568;
  t6751 = -1.*t6254*t1095;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=(-1.*t1116*t1246 - 1.*t1095*t48)*var2[1] + (t1095*t1116 - 1.*t1246*t48)*var2[2];
  p_output1[10]=(-1.*t1116*t1617 - 1.*t1504*t48)*var2[1] + (t1116*t1504 - 1.*t1617*t48)*var2[2];
  p_output1[11]=(-1.*t1116*t1984 - 1.*t1863*t48)*var2[1] + (t1116*t1863 - 1.*t1984*t48)*var2[2];
  p_output1[12]=t2134*var2[0] - 1.*t2092*t48*var2[1] + t1116*t2092*var2[2] + (t2149*(t1984*t2451 + t1984*t2472 + t2487*t2499 + t2521*t2529) + t2554*t2583 + t2487*(-1.*t1617*t2451 - 1.*t2149*t2499 - 1.*t2472*t2554 - 1.*t2529*t2621) + t1984*t2703)*var2[3];
  p_output1[13]=t2554*var2[0] - 1.*t2621*t48*var2[1] + t1116*t2621*var2[2] + ((-1.*t1984*t2451 - 1.*t1984*t2472 - 1.*t2487*t2499 - 1.*t2521*t2529)*t2756 + t2487*(t1246*t2451 + t2134*t2472 + t2092*t2529 + t2499*t2756) + t2134*t2794 + t1984*t2870)*var2[3];
  p_output1[14]=t1984*var2[0] - 1.*t2521*t48*var2[1] + t1116*t2521*var2[2] + ((t1617*t2451 + t2149*t2499 + t2472*t2554 + t2529*t2621)*t2756 + t2149*(-1.*t1246*t2451 - 1.*t2134*t2472 - 1.*t2092*t2529 - 1.*t2499*t2756) + t2134*t2937 + t2554*t2963)*var2[3];
  p_output1[15]=t1121*t2976*var2[0] + (t1116*t2979 + t1182*t2976*t48)*var2[1] + (-1.*t1116*t1182*t2976 + t2979*t48)*var2[2] + (t1121*t2703*t3054 + t2149*(-1.*t1182*t1984*t3015 + t1121*t2487*t3015 + t3021 + t3035 + t1121*t2472*t3054 - 1.*t1182*t2529*t3054) + t1121*t2583*t3142 + t2487*(t1182*t1617*t3015 - 1.*t1121*t2149*t3015 + t3120 + t3129 - 1.*t1121*t2472*t3142 + t1182*t2529*t3142))*var2[3] + (t1504*(t1949*t3015 + t3021 + t3035 + t2436*t3054) + t3072*t3093 + t1863*(-1.*t1610*t3015 + t3120 + t3129 - 1.*t2436*t3142) + t1949*t3175)*var2[4];
  p_output1[16]=t1121*t3142*var2[0] + (t1116*t3072 + t1182*t3142*t48)*var2[1] + (-1.*t1116*t1182*t3142 + t3072*t48)*var2[2] + (t1121*t2794*t2976 + t1121*t2870*t3054 + t2756*(t1182*t1984*t3015 - 1.*t1121*t2487*t3015 - 1.*t1121*t2472*t3054 + t1182*t2529*t3054 + t3314 + t3317) + t2487*(t1121*t2472*t2976 - 1.*t1182*t2529*t2976 - 1.*t1182*t1246*t3015 + t1121*t2756*t3015 + t3342 + t3344))*var2[3] + (t1095*(-1.*t1949*t3015 - 1.*t2436*t3054 + t3314 + t3317) + t2979*t3335 + t1863*(t2436*t2976 + t1243*t3015 + t3342 + t3344) + t1949*t3364)*var2[4];
  p_output1[17]=t1121*t3054*var2[0] + (t1116*t1949 + t1182*t3054*t48)*var2[1] + (-1.*t1116*t1182*t3054 + t1949*t48)*var2[2] + (t1121*t2937*t2976 + t1121*t2963*t3142 + t2756*(-1.*t1182*t1617*t3015 + t1121*t2149*t3015 + t1121*t2472*t3142 - 1.*t1182*t2529*t3142 + t3530 + t3544) + t2149*(-1.*t1121*t2472*t2976 + t1182*t2529*t2976 + t1182*t1246*t3015 - 1.*t1121*t2756*t3015 + t3627 + t3629))*var2[3] + (t1095*(t1610*t3015 + t2436*t3142 + t3530 + t3544) + t2979*t3590 + t1504*(-1.*t2436*t2976 - 1.*t1243*t3015 + t3627 + t3629) + t3072*t3645)*var2[4];
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=t1121*t3859*var2[0] + (t1116*t3883 + t1182*t3859*t48)*var2[1] + (-1.*t1116*t1182*t3859 + t3883*t48)*var2[2] + (t1121*t2703*t3958 + t2149*(t3931 - 1.*t1182*t1984*t3942 + t1121*t2487*t3942 + t3956 + t1121*t2472*t3958 - 1.*t1182*t2529*t3958) + t1121*t2583*t4018 + t2487*(t1182*t1617*t3942 - 1.*t1121*t2149*t3942 + t4000 + t4006 - 1.*t1121*t2472*t4018 + t1182*t2529*t4018))*var2[3] + (t3175*t3923 + t1504*(t3931 + t1949*t3942 + t3956 + t2436*t3958) + t3093*t3987 + t1863*(-1.*t1610*t3942 + t4000 + t4006 - 1.*t2436*t4018))*var2[4] + (t1900*(-1.*t2402*t3766 - 1.*t1405*t3774 - 1.*t1487*t3797 - 1.*t2430*t3804) + t1560*(t1857*t2430 + t1836*t3774 + t1857*t3797 + t2402*t3817))*var2[5];
  p_output1[28]=t1121*t4018*var2[0] + (t1116*t3987 + t1182*t4018*t48)*var2[1] + (-1.*t1116*t1182*t4018 + t3987*t48)*var2[2] + (t1121*t2794*t3859 + t1121*t2870*t3958 + t2756*(t1182*t1984*t3942 - 1.*t1121*t2487*t3942 - 1.*t1121*t2472*t3958 + t1182*t2529*t3958 + t4232 + t4240) + t2487*(t1121*t2472*t3859 - 1.*t1182*t2529*t3859 - 1.*t1182*t1246*t3942 + t1121*t2756*t3942 + t4263 + t4268))*var2[3] + (t3335*t3883 + t3364*t3923 + t1095*(-1.*t1949*t3942 - 1.*t2436*t3958 + t4232 + t4240) + t1863*(t2436*t3859 + t1243*t3942 + t4263 + t4268))*var2[4] + (t1176*(-1.*t1857*t2430 - 1.*t1836*t3774 - 1.*t1857*t3797 - 1.*t2402*t3817) + t1900*(t1056*t3797 + t2402*t3849 + t2430*t3851 + t3774*t995))*var2[5];
  p_output1[29]=t1121*t3958*var2[0] + (t1116*t3923 + t1182*t3958*t48)*var2[1] + (-1.*t1116*t1182*t3958 + t3923*t48)*var2[2] + (t1121*t2937*t3859 + t1121*t2963*t4018 + t2756*(-1.*t1182*t1617*t3942 + t1121*t2149*t3942 + t1121*t2472*t4018 - 1.*t1182*t2529*t4018 + t4453 + t4462) + t2149*(-1.*t1121*t2472*t3859 + t1182*t2529*t3859 + t1182*t1246*t3942 - 1.*t1121*t2756*t3942 + t4474 + t4475))*var2[3] + (t3590*t3883 + t3645*t3987 + t1095*(t1610*t3942 + t2436*t4018 + t4453 + t4462) + t1504*(-1.*t2436*t3859 - 1.*t1243*t3942 + t4474 + t4475))*var2[4] + (t1176*(t2402*t3766 + t1405*t3774 + t1487*t3797 + t2430*t3804) + t1560*(-1.*t1056*t3797 - 1.*t2402*t3849 - 1.*t2430*t3851 - 1.*t3774*t995))*var2[5];
  p_output1[30]=t5021*var2[0] + (t1116*t5093 - 1.*t48*t5110)*var2[1] + (t48*t5093 + t1116*t5110)*var2[2] + (t2583*t5155 + t2703*t5166 + t2149*(t5050 + t5065 + t2472*t5166 + t2529*t5176 + t2487*t5196 + t1984*t5203) + t2487*(t5071 + t5079 - 1.*t2472*t5155 - 1.*t2149*t5196 - 1.*t1617*t5203 - 1.*t2529*t5227))*var2[3] + (t3093*t5035 + t3175*t5047 + t1504*(t4842 + t4849 + t5050 + t2436*t5053 + t1949*t5059 + t5065) + t1863*(t4775 + t4790 - 1.*t1610*t5059 + t5071 - 1.*t2436*t5075 + t5079))*var2[4] + (t1821*(-1.*t1487*t2402 - 1.*t1405*t2430 + t3163) + t1900*(-1.*t2402*t4706 - 1.*t2430*t4710 - 1.*t1405*t4754 - 1.*t1487*t4761 + t4775 + t4790) + t1560*(t1836*t4754 + t1857*t4761 + t2402*t4825 + t2430*t4833 + t4842 + t4849) + t4767*t4857)*var2[5] + (t1821*(-1.*t1383*t2346 - 1.*t1392*t2392 - 1.*t1560*t4873) + t1560*(t1821*t4729 + t1774*t4750 + t2392*t4808 + t2346*t4823 + t4849 + t1821*t4873) + t1900*(-1.*t2392*t4680 - 1.*t2346*t4704 - 1.*t1392*t4729 - 1.*t1383*t4750 + t4790 - 1.*t4767*t4873) + t4767*t4949 - 0.15121*t4960 - 0.15121*t4973)*var2[9];
  p_output1[31]=t5155*var2[0] + (t1116*t5035 - 1.*t48*t5227)*var2[1] + (t48*t5035 + t1116*t5227)*var2[2] + (t2794*t5021 + t2870*t5166 + t2756*(-1.*t2472*t5166 - 1.*t2529*t5176 - 1.*t2487*t5196 - 1.*t1984*t5203 + t5415 + t5423) + t2487*(t2472*t5021 + t2529*t5110 + t2756*t5196 + t1246*t5203 + t5431 + t5444))*var2[3] + (t3364*t5047 + t3335*t5093 + t1095*(-1.*t2436*t5053 - 1.*t1949*t5059 + t5294 + t5296 + t5415 + t5423) + t1863*(t2436*t5008 + t1243*t5059 + t5279 + t5280 + t5431 + t5444))*var2[4] + (t1176*(-1.*t1836*t4754 - 1.*t1857*t4761 - 1.*t2402*t4825 - 1.*t2430*t4833 + t5294 + t5296) + t4983*t5311 + t1821*(t1056*t2402 + t3355 + t2430*t995) + t1900*(t1056*t4761 + t2402*t4988 + t2430*t5005 + t5279 + t5280 + t4754*t995))*var2[5] + (-0.15121*t4680 - 0.15121*t4704 + t1176*(-1.*t1821*t4729 - 1.*t1774*t4750 - 1.*t2392*t4808 - 1.*t2346*t4823 - 1.*t1821*t4873 + t5296) + t4983*t5382 + t1821*(t1176*t4873 + t2346*t821 + t2392*t978) + t1900*(t2392*t4960 + t2346*t4973 + t4873*t4983 + t5279 + t4750*t821 + t4729*t978))*var2[9];
  p_output1[32]=t5166*var2[0] + (t1116*t5047 - 1.*t48*t5176)*var2[1] + (t48*t5047 + t1116*t5176)*var2[2] + (t2937*t5021 + t2963*t5155 + t2756*(t2472*t5155 + t2149*t5196 + t1617*t5203 + t2529*t5227 + t5668 + t5676) + t2149*(-1.*t2472*t5021 - 1.*t2529*t5110 - 1.*t2756*t5196 - 1.*t1246*t5203 + t5689 + t5699))*var2[3] + (t3645*t5035 + t3590*t5093 + t1095*(t1610*t5059 + t2436*t5075 + t5548 + t5550 + t5668 + t5676) + t1504*(-1.*t2436*t5008 - 1.*t1243*t5059 + t5529 + t5532 + t5689 + t5699))*var2[4] + (t4767*t5537 + t1176*(t2402*t4706 + t2430*t4710 + t1405*t4754 + t1487*t4761 + t5548 + t5550) + t4983*t5558 + t1560*(-1.*t1056*t4761 - 1.*t2402*t4988 - 1.*t2430*t5005 + t5529 + t5532 - 1.*t4754*t995))*var2[5] + (-0.15121*t4808 - 0.15121*t4823 + t1176*(t2392*t4680 + t2346*t4704 + t1392*t4729 + t1383*t4750 + t4767*t4873 + t5550) + t4767*t5597 + t4983*t5621 + t1560*(-1.*t2392*t4960 - 1.*t2346*t4973 - 1.*t4873*t4983 + t5529 - 1.*t4750*t821 - 1.*t4729*t978))*var2[9];
  p_output1[33]=t6201*var2[0] + (t1116*t6217 - 1.*t48*t6229)*var2[1] + (t48*t6217 + t1116*t6229)*var2[2] + (t2149*(t6255 + t2487*t6301 + t1984*t6307) + t2583*t6321 + t2487*(t6276 + t6280 - 1.*t2149*t6301 - 1.*t1617*t6307 - 1.*t2472*t6321 - 1.*t2529*t6329))*var2[3] + (t1504*(t5971 + t6255 + t1949*t6262) + t3093*t6271 + t1863*(t5938 + t5947 - 1.*t1610*t6262 + t6276 + t6280 - 1.*t2436*t6286))*var2[4] + (t4857*t5946 + t1900*(-1.*t1487*t5826 - 1.*t1405*t5836 - 1.*t2402*t5899 - 1.*t2430*t5921 + t5938 + t5947) + t1560*(t1857*t5826 + t1836*t5836 + t5971))*var2[5] + (t4949*t5946 + t1900*(-1.*t1383*t5808 - 1.*t1392*t5819 - 1.*t2346*t5873 - 1.*t2392*t5895 + t5938 - 1.*t4873*t5946) + t1560*(t1774*t5808 + t1821*t5819 + t5971) - 0.15121*t6044 - 0.15121*t6059)*var2[9] + (-0.038749*t5839 + 1.e-6*t6034 - 0.28121*t6042 - 1.*t1713*t6095 - 1.*t5868*t6103 - 1.*t1344*t6112 + 4.e-6*(-1.*t1765*t6095 - 1.*t5839*t6103 - 1.*t1376*t6112))*var2[10];
  p_output1[34]=t6321*var2[0] + (t1116*t6271 - 1.*t48*t6329)*var2[1] + (t48*t6271 + t1116*t6329)*var2[2] + (t2794*t6201 + t2756*(-1.*t2487*t6301 - 1.*t1984*t6307 + t6515) + t2487*(t2472*t6201 + t2529*t6229 + t2756*t6301 + t1246*t6307 + t6528 + t6530))*var2[3] + (t3335*t6217 + t1095*(-1.*t1949*t6262 + t6375 + t6515) + t1863*(t2436*t6195 + t1243*t6262 + t6360 + t6361 + t6528 + t6530))*var2[4] + (t5311*t6170 + t1176*(-1.*t1857*t5826 - 1.*t1836*t5836 + t6375) + t1900*(t1056*t5826 + t2402*t6182 + t2430*t6192 + t6360 + t6361 + t5836*t995))*var2[5] + (-0.15121*t5873 - 0.15121*t5895 + t5382*t6170 + t1176*(-1.*t1774*t5808 - 1.*t1821*t5819 + t6375) + t1900*(t2346*t6044 + t2392*t6059 + t4873*t6170 + t6361 + t5808*t821 + t5819*t978))*var2[9] + (-0.28121*t5839 - 0.038749*t5854 + 1.e-6*t5868 - 1.*t1713*t6441 - 1.*t6034*t6447 - 1.*t565*t6466 + 4.e-6*(-1.*t1765*t6441 - 1.*t6042*t6447 - 1.*t6466*t782))*var2[10];
  p_output1[35]=(t2937*t6201 + t2963*t6321 + t2756*(t2149*t6301 + t1617*t6307 + t2472*t6321 + t2529*t6329 + t6718 + t6722) + t2149*(-1.*t2472*t6201 - 1.*t2529*t6229 - 1.*t2756*t6301 - 1.*t1246*t6307 + t6744 + t6751))*var2[3] + (t3590*t6217 + t3645*t6271 + t1095*(t1610*t6262 + t2436*t6286 + t6591 + t6592 + t6718 + t6722) + t1504*(-1.*t2436*t6195 - 1.*t1243*t6262 + t6572 + t6574 + t6744 + t6751))*var2[4] + (t5537*t5946 + t5558*t6170 + t1176*(t1487*t5826 + t1405*t5836 + t2402*t5899 + t2430*t5921 + t6591 + t6592) + t1560*(-1.*t1056*t5826 - 1.*t2402*t6182 - 1.*t2430*t6192 + t6572 + t6574 - 1.*t5836*t995))*var2[5] + (t5597*t5946 + t5621*t6170 + t1176*(t1383*t5808 + t1392*t5819 + t2346*t5873 + t2392*t5895 + t4873*t5946 + t6591) + t1560*(-1.*t2346*t6044 - 1.*t2392*t6059 - 1.*t4873*t6170 + t6574 - 1.*t5808*t821 - 1.*t5819*t978))*var2[9] + (-1.*t5868*t6654 - 1.*t6034*t6664 - 1.*t1344*t6687 - 1.*t565*t6706 + 4.e-6*(-1.*t5839*t6654 - 1.*t6042*t6664 - 1.*t1376*t6687 - 1.*t6706*t782))*var2[10];
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 18, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "dJh_FrFoot_DiagonalStance.hh"

namespace SymFunction
{

void dJh_FrFoot_DiagonalStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
