/*
 * Automatically Generated from Mathematica.
 * Sat 13 Nov 2021 17:51:45 GMT+01:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t1079;
  double t1101;
  double t1461;
  double t191;
  double t192;
  double t207;
  double t327;
  double t401;
  double t485;
  double t1694;
  double t583;
  double t1407;
  double t1459;
  double t1465;
  double t1576;
  double t1639;
  double t139;
  double t1705;
  double t1742;
  double t1761;
  double t1769;
  double t1809;
  double t1811;
  double t1848;
  double t1894;
  double t1677;
  double t1853;
  double t1870;
  double t99;
  double t1905;
  double t1908;
  double t2044;
  double t2185;
  double t1889;
  double t2045;
  double t2096;
  double t34;
  double t2275;
  double t2299;
  double t2332;
  double t2334;
  double t2494;
  double t2559;
  double t2563;
  double t2582;
  double t2646;
  double t2656;
  double t2678;
  double t2754;
  double t3227;
  double t3250;
  double t3336;
  double t3465;
  double t3399;
  double t3497;
  double t3511;
  double t3594;
  double t3615;
  double t3625;
  double t3751;
  double t3753;
  double t3758;
  double t3815;
  double t3834;
  double t3877;
  double t4253;
  double t4254;
  double t4266;
  double t4272;
  double t4277;
  double t4278;
  double t4284;
  double t4286;
  double t4288;
  double t4295;
  double t4296;
  double t4303;
  double t4304;
  double t4319;
  double t4329;
  double t4337;
  double t4338;
  double t4124;
  double t4164;
  double t4203;
  double t4229;
  double t4232;
  double t4279;
  double t4309;
  double t4342;
  double t4344;
  double t4353;
  double t4371;
  double t4372;
  double t4394;
  double t4395;
  double t4398;
  double t4399;
  double t3573;
  double t3639;
  double t3697;
  double t3786;
  double t3943;
  double t4018;
  double t4023;
  double t4064;
  double t4088;
  double t4091;
  double t4092;
  double t4096;
  double t4209;
  double t4346;
  double t4411;
  double t4413;
  double t4417;
  double t4423;
  double t4424;
  double t4425;
  double t4427;
  double t4428;
  double t4433;
  double t4434;
  double t4442;
  double t4447;
  double t4451;
  double t4452;
  double t4455;
  double t4458;
  double t4465;
  double t4470;
  double t4484;
  double t4515;
  double t4535;
  double t4543;
  double t4633;
  double t4649;
  double t4688;
  double t4723;
  double t4734;
  double t4788;
  double t4792;
  double t4795;
  double t4823;
  double t4834;
  double t4849;
  double t4869;
  double t4897;
  double t4503;
  double t4504;
  double t4513;
  double t4579;
  double t4594;
  double t4613;
  double t4731;
  double t4742;
  double t4751;
  double t4755;
  double t4828;
  double t4938;
  double t4945;
  double t4946;
  double t4954;
  double t4956;
  double t4970;
  double t4987;
  double t4990;
  double t5055;
  double t5058;
  double t5060;
  double t4779;
  double t4993;
  double t4994;
  double t5099;
  double t5100;
  double t5111;
  double t4557;
  double t4558;
  double t4562;
  double t5265;
  double t5302;
  double t5321;
  double t5008;
  double t5015;
  double t5027;
  double t5064;
  double t5119;
  double t5132;
  double t5139;
  double t5524;
  double t5532;
  double t5536;
  double t5153;
  double t5073;
  double t5084;
  double t5092;
  double t5557;
  double t5565;
  double t5575;
  double t5513;
  double t5545;
  double t5486;
  double t5499;
  double t5502;
  double t5555;
  double t5582;
  double t5154;
  double t5156;
  double t5158;
  double t5807;
  double t5813;
  double t5814;
  double t5815;
  double t5816;
  double t5849;
  double t5852;
  double t5910;
  double t5913;
  double t5879;
  double t5884;
  double t5885;
  double t5886;
  double t5433;
  double t5451;
  double t5465;
  double t5927;
  double t5928;
  double t5929;
  double t5901;
  double t5902;
  double t5905;
  double t6010;
  double t6011;
  double t5585;
  double t5589;
  double t5592;
  double t5955;
  double t5981;
  double t6041;
  double t6044;
  double t6046;
  double t6030;
  double t6031;
  double t6035;
  double t6074;
  double t6076;
  double t6012;
  double t6037;
  double t5989;
  double t5993;
  double t6063;
  double t6099;
  double t6465;
  double t6467;
  double t6468;
  double t6383;
  double t6397;
  double t6399;
  double t6423;
  double t6441;
  double t6236;
  double t6239;
  double t6241;
  double t6245;
  double t6335;
  double t6338;
  double t6340;
  double t6342;
  double t6344;
  double t6354;
  double t6311;
  double t6316;
  double t6318;
  double t6322;
  double t6330;
  double t6333;
  double t6211;
  double t6219;
  double t6220;
  double t6267;
  double t6269;
  double t6286;
  double t6295;
  double t6488;
  double t6497;
  double t6501;
  double t6334;
  double t6481;
  double t6562;
  double t6584;
  double t6798;
  double t6800;
  double t6803;
  double t6779;
  double t6782;
  double t6794;
  double t6548;
  double t6549;
  double t6552;
  double t6553;
  double t6599;
  double t6601;
  double t6603;
  double t6677;
  double t6686;
  double t6694;
  double t6723;
  double t6735;
  double t6737;
  double t6651;
  double t6656;
  double t6704;
  double t6739;
  double t6741;
  double t7060;
  double t7061;
  double t7062;
  double t7068;
  double t7073;
  double t7077;
  double t6814;
  double t6817;
  double t6840;
  double t6844;
  double t6845;
  double t6852;
  double t6977;
  double t6983;
  double t6991;
  double t7004;
  double t7010;
  double t7018;
  double t7156;
  double t7157;
  double t7158;
  double t7119;
  double t7121;
  double t7124;
  double t7098;
  double t7099;
  double t7116;
  double t7180;
  double t7182;
  double t7185;
  double t7117;
  double t7175;
  double t7136;
  double t7140;
  double t7152;
  double t7195;
  double t7198;
  double t7201;
  double t7279;
  double t7280;
  double t7283;
  double t7191;
  double t7192;
  double t7221;
  double t7225;
  double t7226;
  double t7208;
  double t7210;
  double t7216;
  double t7319;
  double t7320;
  double t7321;
  double t6225;
  double t6233;
  double t6234;
  double t7484;
  double t7493;
  double t7495;
  double t7508;
  double t7510;
  double t7523;
  double t7528;
  double t7530;
  double t7533;
  double t7570;
  double t7574;
  double t7575;
  double t7578;
  double t7448;
  double t7449;
  double t7450;
  double t7506;
  double t7526;
  double t7537;
  double t7539;
  double t7543;
  double t7545;
  double t7552;
  double t7556;
  double t7662;
  double t7663;
  double t7664;
  double t7672;
  double t7674;
  double t7675;
  double t7685;
  double t7688;
  double t7690;
  double t7694;
  double t7713;
  double t7715;
  double t7717;
  double t7440;
  double t7442;
  double t7453;
  double t7455;
  double t7473;
  double t6765;
  double t6766;
  double t6776;
  double t7569;
  double t7615;
  double t7640;
  double t7945;
  double t7946;
  double t7948;
  double t7939;
  double t7940;
  double t7942;
  double t7602;
  double t7604;
  double t7608;
  double t7611;
  double t7646;
  double t7649;
  double t7800;
  double t7812;
  double t7814;
  double t7871;
  double t7876;
  double t7909;
  double t7784;
  double t7785;
  double t7786;
  double t7831;
  double t7912;
  double t7916;
  double t8070;
  double t8071;
  double t8075;
  double t8082;
  double t8083;
  double t8085;
  double t7978;
  double t7979;
  double t7996;
  double t8009;
  double t8011;
  double t8026;
  double t8152;
  double t8161;
  double t8171;
  double t8104;
  double t8124;
  double t8129;
  double t8190;
  double t8192;
  double t8199;
  double t8141;
  double t8221;
  double t8229;
  double t8230;
  double t8216;
  double t8217;
  double t8315;
  double t8332;
  double t8371;
  double t8252;
  double t8253;
  double t8255;
  double t8390;
  double t8393;
  double t8394;
  double t3097;
  double t3127;
  double t3133;
  double t6874;
  double t6882;
  double t6903;
  double t6530;
  double t6539;
  double t6540;
  double t8544;
  double t8551;
  double t8554;
  double t8558;
  double t5175;
  double t5176;
  double t5193;
  double t3699;
  double t4102;
  double t4110;
  double t8433;
  double t8437;
  double t8438;
  double t8657;
  double t8667;
  double t8658;
  double t8659;
  double t8663;
  double t8726;
  double t8732;
  double t8767;
  double t8774;
  double t8668;
  double t8673;
  double t8674;
  double t8742;
  double t8743;
  double t8747;
  double t8751;
  double t8752;
  double t8755;
  double t8885;
  double t8888;
  double t8904;
  double t8906;
  double t8960;
  double t8973;
  double t9014;
  double t9022;
  double t7329;
  double t7330;
  double t7333;
  double t9108;
  double t9116;
  double t7239;
  double t7241;
  double t7268;
  double t6660;
  double t6750;
  double t6752;
  double t9127;
  double t9132;
  double t8986;
  double t8987;
  double t8988;
  double t9333;
  double t9334;
  double t9339;
  double t9345;
  double t9348;
  double t9349;
  double t9355;
  double t9357;
  double t9359;
  double t9367;
  double t9372;
  double t9377;
  double t9380;
  double t9265;
  double t9071;
  double t9076;
  double t9077;
  double t9305;
  double t9312;
  double t8408;
  double t8409;
  double t8417;
  double t9430;
  double t7792;
  double t7924;
  double t7930;
  double t9442;
  double t9445;
  double t8603;
  double t8606;
  double t8610;
  double t9082;
  double t9083;
  double t9084;
  double t8996;
  double t8997;
  double t8998;
  double t7668;
  double t9543;
  double t9545;
  double t9546;
  double t9547;
  double t9592;
  double t9610;
  double t9653;
  double t9655;
  double t9593;
  double t9597;
  double t9598;
  double t9662;
  double t9666;
  double t9611;
  double t9614;
  double t9615;
  double t9648;
  double t9649;
  double t9650;
  double t9672;
  double t9675;
  double t9679;
  double t9801;
  double t9803;
  double t9827;
  double t9830;
  double t9950;
  double t9955;
  double t9972;
  double t9980;
  double t10030;
  double t10044;
  double t10049;
  double t10054;
  double t9934;
  double t9935;
  double t9936;
  double t9960;
  double t9961;
  double t9962;
  double t10138;
  double t10140;
  double t10141;
  double t10142;
  double t10145;
  double t10147;
  double t10149;
  double t10151;
  double t10152;
  double t10153;
  double t10157;
  double t10160;
  double t10162;
  double t10163;
  double t10166;
  double t10170;
  double t10172;
  double t10182;
  double t10183;
  double t10186;
  double t9991;
  double t9992;
  double t9995;
  double t10008;
  double t10009;
  double t10010;
  double t10106;
  double t10111;
  double t10118;
  double t10123;
  double t10237;
  double t10248;
  double t10254;
  double t10255;
  double t9574;
  double t9575;
  double t9577;
  t1079 = Cos(var1[7]);
  t1101 = -1. + t1079;
  t1461 = Sin(var1[8]);
  t191 = Cos(var1[8]);
  t192 = -1.*t191;
  t207 = 1. + t192;
  t327 = -1.000000000016*t207;
  t401 = 1. + t327;
  t485 = Sin(var1[7]);
  t1694 = Cos(var1[6]);
  t583 = -4.e-6*t401*t485;
  t1407 = 1.6e-11*t1101;
  t1459 = 1. + t1407;
  t1465 = -4.e-6*t1459*t1461;
  t1576 = -4.e-6*t1101*t1461;
  t1639 = t583 + t1465 + t1576;
  t139 = Sin(var1[6]);
  t1705 = -1.*t1079;
  t1742 = 1. + t1705;
  t1761 = -1.000000000016*t1742;
  t1769 = 1. + t1761;
  t1809 = t1769*t401;
  t1811 = -1.000000000016*t485*t1461;
  t1848 = t1809 + t1811;
  t1894 = Cos(var1[5]);
  t1677 = -1.*t139*t1639;
  t1853 = t1694*t1848;
  t1870 = t1677 + t1853;
  t99 = Sin(var1[5]);
  t1905 = t1694*t1639;
  t1908 = t139*t1848;
  t2044 = t1905 + t1908;
  t2185 = Cos(var1[3]);
  t1889 = t99*t1870;
  t2045 = t1894*t2044;
  t2096 = t1889 + t2045;
  t34 = Sin(var1[3]);
  t2275 = Cos(var1[4]);
  t2299 = -1.*t401*t485;
  t2332 = -1.6e-11*t1101*t1461;
  t2334 = -1.*t1079*t1461;
  t2494 = t2299 + t2332 + t2334;
  t2559 = t2275*t2494;
  t2563 = Sin(var1[4]);
  t2582 = t1894*t1870;
  t2646 = -1.*t99*t2044;
  t2656 = t2582 + t2646;
  t2678 = -1.*t2563*t2656;
  t2754 = t2559 + t2678;
  t3227 = -1.*t2563*t2494;
  t3250 = -1.*t2275*t2656;
  t3336 = t3227 + t3250;
  t3465 = -1. + t191;
  t3399 = 1.6e-11*t207;
  t3497 = 1.6e-11*t3465;
  t3511 = 1. + t3399 + t3497;
  t3594 = 4.e-6*t3465;
  t3615 = -4.e-6*t191;
  t3625 = t3594 + t3615;
  t3751 = t1459*t3511;
  t3753 = 4.e-6*t1101*t3625;
  t3758 = t3751 + t3753;
  t3815 = 4.e-6*t3511*t485;
  t3834 = t3625*t485;
  t3877 = t3815 + t3834;
  t4253 = 5.136e-14*var1[8];
  t4254 = -0.03874900000062*t207;
  t4266 = 5.9484e-7*t3465;
  t4272 = -0.03875*t191;
  t4277 = -0.299999999992*t1461;
  t4278 = t4253 + t4254 + t4266 + t4272 + t4277;
  t4284 = -1.284e-8*var1[8];
  t4286 = 1. + t3497;
  t4288 = 0.14871*t4286;
  t4295 = -1.5499600000248e-7*t207;
  t4296 = -1.55e-7*t3465;
  t4303 = -1.199999999968e-6*t1461;
  t4304 = t4284 + t4288 + t4295 + t4296 + t4303;
  t4319 = 0.80321*t401;
  t4329 = 0.503210000016051*t207;
  t4337 = -4.05159380016e-7*t1461;
  t4338 = t4319 + t4329 + t4337;
  t4124 = -1.*t1694;
  t4164 = 1. + t4124;
  t4203 = 0.15121*t4164;
  t4229 = 0.281210000008499*t1742;
  t4232 = 0.03874900000062*t485;
  t4279 = t485*t4278;
  t4309 = 4.e-6*t485*t4304;
  t4342 = t1769*t4338;
  t4344 = t4229 + t4232 + t4279 + t4309 + t4342;
  t4353 = -1.2484e-7*var1[7];
  t4371 = -1.5499600000248e-7*t1742;
  t4372 = 1.124840000016e-6*t485;
  t4394 = 4.e-6*t1101*t4278;
  t4395 = t1459*t4304;
  t4398 = -4.e-6*t485*t4338;
  t4399 = t4353 + t4371 + t4372 + t4394 + t4395 + t4398;
  t3573 = 4.e-6*t1101*t3511;
  t3639 = t1079*t3625;
  t3697 = t3573 + t3639;
  t3786 = -1.*t3758*t139;
  t3943 = t1694*t3877;
  t4018 = t3786 + t3943;
  t4023 = t1894*t4018;
  t4064 = t1694*t3758;
  t4088 = t139*t3877;
  t4091 = t4064 + t4088;
  t4092 = -1.*t99*t4091;
  t4096 = t4023 + t4092;
  t4209 = -0.15121*t139;
  t4346 = t139*t4344;
  t4411 = t1694*t4399;
  t4413 = t4203 + t4209 + t4346 + t4411;
  t4417 = -1.*t99*t4413;
  t4423 = 0.15121*t139;
  t4424 = t1694*t4344;
  t4425 = -1.*t139*t4399;
  t4427 = t4203 + t4423 + t4424 + t4425;
  t4428 = t1894*t4427;
  t4433 = t4417 + t4428;
  t4434 = -1.*t2563*t4433;
  t4442 = 4.9936e-13*var1[7];
  t4447 = -0.03874900000062*t1742;
  t4451 = 0.281210000004*t485;
  t4452 = t1079*t4278;
  t4455 = 4.e-6*t1101*t4304;
  t4458 = -1.*t485*t4338;
  t4465 = t4442 + t4447 + t4451 + t4452 + t4455 + t4458;
  t4470 = t2275*t4465;
  t4484 = t4434 + t4470;
  t4515 = t2275*t3697;
  t4535 = -1.*t2563*t4096;
  t4543 = t4515 + t4535;
  t4633 = -1. + t3399;
  t4649 = 4.e-6*t4633;
  t4688 = 4.e-6*t207;
  t4723 = t4649 + t4688;
  t4734 = t3399 + t192;
  t4788 = 4.e-6*t4723*t485;
  t4792 = t4734*t485;
  t4795 = -1.000000000016*t1769*t1461;
  t4823 = t4788 + t4792 + t4795;
  t4834 = t1459*t4723;
  t4849 = 4.e-6*t1101*t4734;
  t4869 = 4.000000000064e-6*t485*t1461;
  t4897 = t4834 + t4849 + t4869;
  t4503 = t3697*t2563;
  t4504 = t2275*t4096;
  t4513 = t4503 + t4504;
  t4579 = t2275*t4433;
  t4594 = t2563*t4465;
  t4613 = t4579 + t4594;
  t4731 = 4.e-6*t1101*t4723;
  t4742 = t1079*t4734;
  t4751 = 1.000000000016*t485*t1461;
  t4755 = t4731 + t4742 + t4751;
  t4828 = t139*t4823;
  t4938 = t1694*t4897;
  t4945 = t4828 + t4938;
  t4946 = -1.*t99*t4945;
  t4954 = t1694*t4823;
  t4956 = -1.*t139*t4897;
  t4970 = t4954 + t4956;
  t4987 = t1894*t4970;
  t4990 = t4946 + t4987;
  t5055 = t1894*t4413;
  t5058 = t99*t4427;
  t5060 = t5055 + t5058;
  t4779 = t2563*t4755;
  t4993 = t2275*t4990;
  t4994 = t4779 + t4993;
  t5099 = t2275*t4755;
  t5100 = -1.*t2563*t4990;
  t5111 = t5099 + t5100;
  t4557 = -1.*t2275*t4433;
  t4558 = -1.*t2563*t4465;
  t4562 = t4557 + t4558;
  t5265 = -1.*t99*t1870;
  t5302 = -1.*t1894*t2044;
  t5321 = t5265 + t5302;
  t5008 = t99*t4018;
  t5015 = t1894*t4091;
  t5027 = t5008 + t5015;
  t5064 = t5027*t5060;
  t5119 = t1894*t4945;
  t5132 = t99*t4970;
  t5139 = t5119 + t5132;
  t5524 = -1.*t1894*t4413;
  t5532 = -1.*t99*t4427;
  t5536 = t5524 + t5532;
  t5153 = -1.*t5060*t5139;
  t5073 = t4543*t4484;
  t5084 = t4513*t4613;
  t5092 = t5064 + t5073 + t5084;
  t5557 = -1.*t1894*t4945;
  t5565 = -1.*t99*t4970;
  t5575 = t5557 + t5565;
  t5513 = t5027*t4433;
  t5545 = t4096*t5060;
  t5486 = -1.*t99*t4018;
  t5499 = -1.*t1894*t4091;
  t5502 = t5486 + t5499;
  t5555 = -1.*t5060*t4990;
  t5582 = -1.*t4433*t5139;
  t5154 = -1.*t4613*t4994;
  t5156 = -1.*t4484*t5111;
  t5158 = t5153 + t5154 + t5156;
  t5807 = -1.*t1694*t1639;
  t5813 = -1.*t139*t1848;
  t5814 = t5807 + t5813;
  t5815 = t1894*t5814;
  t5816 = t5265 + t5815;
  t5849 = t99*t5814;
  t5852 = t2582 + t5849;
  t5910 = -0.15121*t1694;
  t5913 = t5910 + t4423 + t4424 + t4425;
  t5879 = 0.15121*t1694;
  t5884 = -1.*t139*t4344;
  t5885 = -1.*t1694*t4399;
  t5886 = t5879 + t4423 + t5884 + t5885;
  t5433 = t4096*t4433;
  t5451 = t3697*t4465;
  t5465 = t5433 + t5064 + t5451;
  t5927 = -1.*t139*t4823;
  t5928 = -1.*t1694*t4897;
  t5929 = t5927 + t5928;
  t5901 = -1.*t1694*t3758;
  t5902 = -1.*t139*t3877;
  t5905 = t5901 + t5902;
  t6010 = t99*t5905;
  t6011 = t4023 + t6010;
  t5585 = -1.*t4465*t4755;
  t5589 = -1.*t4433*t4990;
  t5592 = t5585 + t5589 + t5153;
  t5955 = t99*t5929;
  t5981 = t5955 + t4987;
  t6041 = t1894*t5886;
  t6044 = -1.*t99*t5913;
  t6046 = t6041 + t6044;
  t6030 = t99*t5886;
  t6031 = t1894*t5913;
  t6035 = t6030 + t6031;
  t6074 = t1894*t5929;
  t6076 = t6074 + t5565;
  t6012 = t6011*t5060;
  t6037 = t5027*t6035;
  t5989 = t1894*t5905;
  t5993 = t5486 + t5989;
  t6063 = -1.*t5060*t5981;
  t6099 = -1.*t6035*t5139;
  t6465 = -4.e-6*t3511*t485;
  t6467 = -1.*t3625*t485;
  t6468 = t6465 + t6467;
  t6383 = 0.03874900000062*t1079;
  t6397 = 0.281210000008499*t485;
  t6399 = 4.e-6*t1079*t4304;
  t6423 = -1.000000000016*t485*t4338;
  t6441 = t6383 + t6397 + t4452 + t6399 + t6423;
  t6236 = -4.e-6*t4723*t485;
  t6239 = -1.*t4734*t485;
  t6241 = 1.000000000016*t1079*t1461;
  t6245 = t6236 + t6239 + t6241;
  t6335 = 1.124840000016e-6*t1079;
  t6338 = -1.5499600000248e-7*t485;
  t6340 = -4.e-6*t485*t4278;
  t6342 = -1.6e-11*t485*t4304;
  t6344 = -4.e-6*t1079*t4338;
  t6354 = -1.2484e-7 + t6335 + t6338 + t6340 + t6342 + t6344;
  t6311 = 0.281210000004*t1079;
  t6316 = -0.03874900000062*t485;
  t6318 = -1.*t485*t4278;
  t6322 = -4.e-6*t485*t4304;
  t6330 = -1.*t1079*t4338;
  t6333 = 4.9936e-13 + t6311 + t6316 + t6318 + t6322 + t6330;
  t6211 = -1.000000000016*t401*t485;
  t6219 = -1.000000000016*t1079*t1461;
  t6220 = t6211 + t6219;
  t6267 = -4.e-6*t1079*t401;
  t6269 = t6267 + t4869;
  t6286 = 4.e-6*t1079*t3511;
  t6295 = t6286 + t3639;
  t6488 = -1.6e-11*t3511*t485;
  t6497 = -4.e-6*t3625*t485;
  t6501 = t6488 + t6497;
  t6334 = t3697*t6333;
  t6481 = t6468*t4465;
  t6562 = -1.*t4465*t6245;
  t6584 = -1.*t6333*t4755;
  t6798 = t1694*t6354;
  t6800 = t139*t6441;
  t6803 = t6798 + t6800;
  t6779 = -1.*t139*t6354;
  t6782 = t1694*t6441;
  t6794 = t6779 + t6782;
  t6548 = -1.6e-11*t4723*t485;
  t6549 = -4.e-6*t4734*t485;
  t6552 = 4.000000000064e-6*t1079*t1461;
  t6553 = t6548 + t6549 + t6552;
  t6599 = 4.e-6*t1079*t4723;
  t6601 = 1.000000000032*t485*t1461;
  t6603 = t6599 + t4742 + t6601;
  t6677 = t139*t6220;
  t6686 = t1694*t6269;
  t6694 = t6677 + t6686;
  t6723 = t1694*t6220;
  t6735 = -1.*t139*t6269;
  t6737 = t6723 + t6735;
  t6651 = -1.*t1079*t401;
  t6656 = t6651 + t4751;
  t6704 = -1.*t99*t6694;
  t6739 = t1894*t6737;
  t6741 = t6704 + t6739;
  t7060 = t1894*t6694;
  t7061 = t99*t6737;
  t7062 = t7060 + t7061;
  t7068 = t2275*t6656;
  t7073 = -1.*t2563*t6741;
  t7077 = t7068 + t7073;
  t6814 = t6295*t139;
  t6817 = t1694*t6501;
  t6840 = t6814 + t6817;
  t6844 = t1694*t6295;
  t6845 = -1.*t139*t6501;
  t6852 = t6844 + t6845;
  t6977 = -1.*t139*t6553;
  t6983 = t1694*t6603;
  t6991 = t6977 + t6983;
  t7004 = t1694*t6553;
  t7010 = t139*t6603;
  t7018 = t7004 + t7010;
  t7156 = t1894*t6840;
  t7157 = t99*t6852;
  t7158 = t7156 + t7157;
  t7119 = t1894*t6794;
  t7121 = -1.*t99*t6803;
  t7124 = t7119 + t7121;
  t7098 = t99*t6794;
  t7099 = t1894*t6803;
  t7116 = t7098 + t7099;
  t7180 = t99*t6991;
  t7182 = t1894*t7018;
  t7185 = t7180 + t7182;
  t7117 = t5027*t7116;
  t7175 = t7158*t5060;
  t7136 = -1.*t99*t6840;
  t7140 = t1894*t6852;
  t7152 = t7136 + t7140;
  t7195 = t1894*t6991;
  t7198 = -1.*t99*t7018;
  t7201 = t7195 + t7198;
  t7279 = t2563*t6468;
  t7280 = t2275*t7152;
  t7283 = t7279 + t7280;
  t7191 = -1.*t7116*t5139;
  t7192 = -1.*t5060*t7185;
  t7221 = t2275*t7124;
  t7225 = t2563*t6333;
  t7226 = t7221 + t7225;
  t7208 = -1.*t2563*t7124;
  t7210 = t2275*t6333;
  t7216 = t7208 + t7210;
  t7319 = t2563*t6245;
  t7320 = t2275*t7201;
  t7321 = t7319 + t7320;
  t6225 = t3877*t4344;
  t6233 = t3758*t4399;
  t6234 = t6225 + t5451 + t6233;
  t7484 = -4.05159380016e-7*t191;
  t7493 = -0.2999999999968*t1461;
  t7495 = t7484 + t7493;
  t7508 = -1.199999999968e-6*t191;
  t7510 = 1.620637520064e-12*t1461;
  t7523 = -1.284e-8 + t7508 + t7510;
  t7528 = -0.299999999992*t191;
  t7530 = 4.05159380016e-7*t1461;
  t7533 = 5.136e-14 + t7528 + t7530;
  t7570 = t1769*t7495;
  t7574 = 4.e-6*t485*t7523;
  t7575 = t485*t7533;
  t7578 = t7570 + t7574 + t7575;
  t7448 = 1.000000000016*t191*t485;
  t7449 = 1.6000000000256e-11*t1101*t1461;
  t7450 = t7448 + t7449 + t6241;
  t7506 = -4.e-6*t485*t7495;
  t7526 = t1459*t7523;
  t7537 = 4.e-6*t1101*t7533;
  t7539 = t7506 + t7526 + t7537;
  t7543 = -1.*t485*t7495;
  t7545 = 4.e-6*t1101*t7523;
  t7552 = t1079*t7533;
  t7556 = t7543 + t7545 + t7552;
  t7662 = t3511*t7523;
  t7663 = t3625*t7533;
  t7664 = t7662 + t7663;
  t7672 = t3625*t4278;
  t7674 = t3511*t4304;
  t7675 = t7672 + t7674;
  t7685 = 1.000000000016*t191*t4338;
  t7688 = -1.*t4723*t7523;
  t7690 = -1.*t4734*t7533;
  t7694 = 1.000000000016*t7495*t1461;
  t7713 = -1.000000000016*t4278*t1461;
  t7715 = -4.000000000064e-6*t4304*t1461;
  t7717 = t7685 + t7688 + t7690 + t7694 + t7713 + t7715;
  t7440 = -1.000000000016*t191*t485;
  t7442 = t7440 + t4795;
  t7453 = -4.e-6*t1459*t191;
  t7455 = -4.e-6*t1101*t191;
  t7473 = t7453 + t7455 + t4869;
  t6765 = t4091*t4413;
  t6766 = t4018*t4427;
  t6776 = t6765 + t6766 + t5451;
  t7569 = t3697*t7556;
  t7615 = -1.*t4465*t7450;
  t7640 = -1.*t7556*t4755;
  t7945 = t1694*t7539;
  t7946 = t139*t7578;
  t7948 = t7945 + t7946;
  t7939 = -1.*t139*t7539;
  t7940 = t1694*t7578;
  t7942 = t7939 + t7940;
  t7602 = 4.000000000064e-6*t191*t485;
  t7604 = 4.000000000064e-6*t1459*t1461;
  t7608 = 4.000000000064e-6*t1101*t1461;
  t7611 = t7602 + t7604 + t7608;
  t7646 = -1.000000000016*t1769*t191;
  t7649 = t7646 + t6601;
  t7800 = t139*t7442;
  t7812 = t1694*t7473;
  t7814 = t7800 + t7812;
  t7871 = t1694*t7442;
  t7876 = -1.*t139*t7473;
  t7909 = t7871 + t7876;
  t7784 = -1.6e-11*t1101*t191;
  t7785 = -1.*t1079*t191;
  t7786 = t7784 + t7785 + t4751;
  t7831 = -1.*t99*t7814;
  t7912 = t1894*t7909;
  t7916 = t7831 + t7912;
  t8070 = t1894*t7814;
  t8071 = t99*t7909;
  t8075 = t8070 + t8071;
  t8082 = t2275*t7786;
  t8083 = -1.*t2563*t7916;
  t8085 = t8082 + t8083;
  t7978 = -1.*t139*t7611;
  t7979 = t1694*t7649;
  t7996 = t7978 + t7979;
  t8009 = t1694*t7611;
  t8011 = t139*t7649;
  t8026 = t8009 + t8011;
  t8152 = t1894*t7942;
  t8161 = -1.*t99*t7948;
  t8171 = t8152 + t8161;
  t8104 = t99*t7942;
  t8124 = t1894*t7948;
  t8129 = t8104 + t8124;
  t8190 = t99*t7996;
  t8192 = t1894*t8026;
  t8199 = t8190 + t8192;
  t8141 = t5027*t8129;
  t8221 = t1894*t7996;
  t8229 = -1.*t99*t8026;
  t8230 = t8221 + t8229;
  t8216 = -1.*t8129*t5139;
  t8217 = -1.*t5060*t8199;
  t8315 = t2275*t8171;
  t8332 = t2563*t7556;
  t8371 = t8315 + t8332;
  t8252 = -1.*t2563*t8171;
  t8253 = t2275*t7556;
  t8255 = t8252 + t8253;
  t8390 = t2563*t7450;
  t8393 = t2275*t8230;
  t8394 = t8390 + t8393;
  t3097 = t2185*t2096;
  t3127 = -1.*t34*t2754;
  t3133 = t3097 + t3127;
  t6874 = -1.*t4413*t4945;
  t6882 = -1.*t4427*t4970;
  t6903 = t5585 + t6874 + t6882;
  t6530 = -1.*t4344*t4823;
  t6539 = -1.*t4399*t4897;
  t6540 = t6530 + t6539 + t5585;
  t8544 = -1.*t4734*t4278;
  t8551 = -1.*t4723*t4304;
  t8554 = 1.000000000016*t4338*t1461;
  t8558 = t8544 + t8551 + t8554;
  t5175 = -1.*t2563*t4755;
  t5176 = -1.*t2275*t4990;
  t5193 = t5175 + t5176;
  t3699 = -1.*t3697*t2563;
  t4102 = -1.*t2275*t4096;
  t4110 = t3699 + t4102;
  t8433 = t2563*t2494;
  t8437 = t2275*t2656;
  t8438 = t8433 + t8437;
  t8657 = -1.*t5027*t5060;
  t8667 = t5060*t2096;
  t8658 = -1.*t4543*t4484;
  t8659 = -1.*t4513*t4613;
  t8663 = t8657 + t8658 + t8659;
  t8726 = -1.*t5027*t4433;
  t8732 = -1.*t4096*t5060;
  t8767 = t4433*t2096;
  t8774 = t5060*t2656;
  t8668 = t4613*t8438;
  t8673 = t4484*t2754;
  t8674 = t8667 + t8668 + t8673;
  t8742 = -1.*t4096*t4433;
  t8743 = -1.*t3697*t4465;
  t8747 = t8742 + t8657 + t8743;
  t8751 = t4465*t2494;
  t8752 = t4433*t2656;
  t8755 = t8751 + t8667 + t8752;
  t8885 = -1.*t6011*t5060;
  t8888 = -1.*t5027*t6035;
  t8904 = t5060*t5852;
  t8906 = t6035*t2096;
  t8960 = -1.*t3697*t6333;
  t8973 = -1.*t6468*t4465;
  t9014 = t6333*t2494;
  t9022 = t4465*t6656;
  t7329 = t2275*t6245;
  t7330 = -1.*t2563*t7201;
  t7333 = t7329 + t7330;
  t9108 = -1.*t5027*t7116;
  t9116 = -1.*t7158*t5060;
  t7239 = t2275*t6468;
  t7241 = -1.*t2563*t7152;
  t7268 = t7239 + t7241;
  t6660 = t2563*t6656;
  t6750 = t2275*t6741;
  t6752 = t6660 + t6750;
  t9127 = t7116*t2096;
  t9132 = t5060*t7062;
  t8986 = -1.*t3877*t4344;
  t8987 = -1.*t3758*t4399;
  t8988 = t8986 + t8743 + t8987;
  t9333 = -1.*t3625*t4278;
  t9334 = -1.*t3511*t4304;
  t9339 = t9333 + t9334;
  t9345 = -1.*t3511*t7523;
  t9348 = -1.*t3625*t7533;
  t9349 = t9345 + t9348;
  t9355 = t401*t7495;
  t9357 = -1.*t191*t4278;
  t9359 = -4.e-6*t191*t4304;
  t9367 = -1.000000000016*t4338*t1461;
  t9372 = -4.e-6*t7523*t1461;
  t9377 = -1.*t7533*t1461;
  t9380 = t9355 + t9357 + t9359 + t9367 + t9372 + t9377;
  t9265 = -1.*t3697*t7556;
  t9071 = -1.*t4091*t4413;
  t9076 = -1.*t4018*t4427;
  t9077 = t9071 + t9076 + t8743;
  t9305 = t7556*t2494;
  t9312 = t4465*t7786;
  t8408 = t2275*t7450;
  t8409 = -1.*t2563*t8230;
  t8417 = t8408 + t8409;
  t9430 = -1.*t5027*t8129;
  t7792 = t2563*t7786;
  t7924 = t2275*t7916;
  t7930 = t7792 + t7924;
  t9442 = t8129*t2096;
  t9445 = t5060*t8075;
  t8603 = t2185*t5139;
  t8606 = -1.*t34*t5111;
  t8610 = t8603 + t8606;
  t9082 = t4427*t1870;
  t9083 = t4413*t2044;
  t9084 = t8751 + t9082 + t9083;
  t8996 = t4399*t1639;
  t8997 = t4344*t1848;
  t8998 = t8996 + t8751 + t8997;
  t7668 = -0.03874900000062*t1461;
  t9543 = t401*t4338;
  t9545 = -1.*t4278*t1461;
  t9546 = -4.e-6*t4304*t1461;
  t9547 = t9543 + t9545 + t9546;
  t9592 = -1.*t5060*t2096;
  t9610 = t5060*t5139;
  t9653 = -1.*t4433*t2096;
  t9655 = -1.*t5060*t2656;
  t9593 = -1.*t4613*t8438;
  t9597 = -1.*t4484*t2754;
  t9598 = t9592 + t9593 + t9597;
  t9662 = t5060*t4990;
  t9666 = t4433*t5139;
  t9611 = t4613*t4994;
  t9614 = t4484*t5111;
  t9615 = t9610 + t9611 + t9614;
  t9648 = -1.*t4465*t2494;
  t9649 = -1.*t4433*t2656;
  t9650 = t9648 + t9592 + t9649;
  t9672 = t4465*t4755;
  t9675 = t4433*t4990;
  t9679 = t9672 + t9675 + t9610;
  t9801 = -1.*t5060*t5852;
  t9803 = -1.*t6035*t2096;
  t9827 = t5060*t5981;
  t9830 = t6035*t5139;
  t9950 = -1.*t6333*t2494;
  t9955 = -1.*t4465*t6656;
  t9972 = t4465*t6245;
  t9980 = t6333*t4755;
  t10030 = -1.*t7116*t2096;
  t10044 = -1.*t5060*t7062;
  t10049 = t7116*t5139;
  t10054 = t5060*t7185;
  t9934 = -1.*t4399*t1639;
  t9935 = -1.*t4344*t1848;
  t9936 = t9934 + t9648 + t9935;
  t9960 = t4344*t4823;
  t9961 = t4399*t4897;
  t9962 = t9960 + t9961 + t9672;
  t10138 = -1.*t401*t4338;
  t10140 = t4278*t1461;
  t10141 = 4.e-6*t4304*t1461;
  t10142 = t10138 + t10140 + t10141;
  t10145 = -1.000000000016*t191*t4338;
  t10147 = t4723*t7523;
  t10149 = t4734*t7533;
  t10151 = -1.000000000016*t7495*t1461;
  t10152 = 1.000000000016*t4278*t1461;
  t10153 = 4.000000000064e-6*t4304*t1461;
  t10157 = t10145 + t10147 + t10149 + t10151 + t10152 + t10153;
  t10160 = t4734*t4278;
  t10162 = t4723*t4304;
  t10163 = t10160 + t10162 + t9367;
  t10166 = -1.*t401*t7495;
  t10170 = t191*t4278;
  t10172 = 4.e-6*t191*t4304;
  t10182 = 4.e-6*t7523*t1461;
  t10183 = t7533*t1461;
  t10186 = t10166 + t10170 + t10172 + t8554 + t10182 + t10183;
  t9991 = -1.*t4427*t1870;
  t9992 = -1.*t4413*t2044;
  t9995 = t9648 + t9991 + t9992;
  t10008 = t4413*t4945;
  t10009 = t4427*t4970;
  t10010 = t9672 + t10008 + t10009;
  t10106 = -1.*t7556*t2494;
  t10111 = -1.*t4465*t7786;
  t10118 = t4465*t7450;
  t10123 = t7556*t4755;
  t10237 = -1.*t8129*t2096;
  t10248 = -1.*t5060*t8075;
  t10254 = t8129*t5139;
  t10255 = t5060*t8199;
  t9574 = t2185*t5027;
  t9575 = -1.*t34*t4543;
  t9577 = t9574 + t9575;
  p_output1[0]=(-1.*t2185*t2754 - 1.*t2096*t34)*var2[1] + t3133*var2[2];
  p_output1[1]=t2754*var2[0] - 1.*t3336*t34*var2[1] + t2185*t3336*var2[2] + ((t4110*t4484 + t4484*t4513 + t4543*t4562 + t4543*t4613)*t4994 + t5092*t5111 + t4543*t5158 + t4513*(-1.*t4484*t4994 - 1.*t4562*t5111 - 1.*t4613*t5111 - 1.*t4484*t5193))*var2[3];
  p_output1[2]=t2275*t5321*var2[0] + (t2185*t2656 + t2563*t34*t5321)*var2[1] + (t2656*t34 - 1.*t2185*t2563*t5321)*var2[2] + (t2275*t5158*t5502 + t4994*(-1.*t2563*t4484*t5502 + t2275*t4613*t5502 + t5513 + t2275*t4513*t5536 - 1.*t2563*t4543*t5536 + t5545) + t2275*t5092*t5575 + t4513*(-1.*t2275*t4994*t5536 + t2563*t5111*t5536 + t5555 + t2563*t4484*t5575 - 1.*t2275*t4613*t5575 + t5582))*var2[3] + (t4990*t5465 + t5139*(t4433*t5502 + t5513 + t4096*t5536 + t5545) + t5027*(-1.*t4990*t5536 + t5555 - 1.*t4433*t5575 + t5582) + t4096*t5592)*var2[4];
  p_output1[3]=t2275*t5816*var2[0] + (t2563*t34*t5816 + t2185*t5852)*var2[1] + (-1.*t2185*t2563*t5816 + t34*t5852)*var2[2] + (t2275*t5158*t5993 + t4994*(-1.*t2563*t4484*t5993 + t2275*t4613*t5993 + t6012 + t6037 + t2275*t4513*t6046 - 1.*t2563*t4543*t6046) + t2275*t5092*t6076 + t4513*(-1.*t2275*t4994*t6046 + t2563*t5111*t6046 + t6063 + t2563*t4484*t6076 - 1.*t2275*t4613*t6076 + t6099))*var2[3] + (t5465*t5981 + t5592*t6011 + t5139*(t4433*t5993 + t6012 + t6037 + t4096*t6046) + t5027*(-1.*t4990*t6046 + t6063 - 1.*t4433*t6076 + t6099))*var2[4] + (t4755*(t4018*t4413 + t4018*t5886 + t4427*t5905 + t4091*t5913) + t3697*(-1.*t4413*t4970 - 1.*t4970*t5886 - 1.*t4945*t5913 - 1.*t4427*t5929))*var2[5];
  p_output1[4]=t6752*var2[0] + (t2185*t7062 - 1.*t34*t7077)*var2[1] + (t34*t7062 + t2185*t7077)*var2[2] + (t5158*t7283 + t4994*(t7117 + t7175 + t4543*t7216 + t4513*t7226 + t4484*t7268 + t4613*t7283) + t5092*t7321 + t4513*(t7191 + t7192 - 1.*t5111*t7216 - 1.*t4994*t7226 - 1.*t4613*t7321 - 1.*t4484*t7333))*var2[3] + (t5592*t7158 + t5139*(t6334 + t6481 + t7117 + t4096*t7124 + t4433*t7152 + t7175) + t5465*t7185 + t5027*(t6562 + t6584 - 1.*t4990*t7124 + t7191 + t7192 - 1.*t4433*t7201))*var2[4] + (t6245*t6776 + t4755*(t6334 + t6481 + t4018*t6794 + t4091*t6803 + t4413*t6840 + t4427*t6852) + t6468*t6903 + t3697*(t6562 + t6584 - 1.*t4970*t6794 - 1.*t4945*t6803 - 1.*t4427*t6991 - 1.*t4413*t7018))*var2[5] + (0.15121*t6220 + t6234*t6245 - 0.15121*t6269 + t4755*(t4344*t6295 + t6334 + t3758*t6354 + t3877*t6441 + t6481 + t4399*t6501) + t6468*t6540 + t3697*(-1.*t4897*t6354 - 1.*t4823*t6441 - 1.*t4399*t6553 + t6562 + t6584 - 1.*t4344*t6603))*var2[6];
  p_output1[5]=t7930*var2[0] + (t2185*t8075 - 1.*t34*t8085)*var2[1] + (t34*t8075 + t2185*t8085)*var2[2] + (t4994*(t8141 + t4543*t8255 + t4513*t8371) + t5092*t8394 + t4513*(t8216 + t8217 - 1.*t5111*t8255 - 1.*t4994*t8371 - 1.*t4613*t8394 - 1.*t4484*t8417))*var2[3] + (t5139*(t7569 + t8141 + t4096*t8171) + t5465*t8199 + t5027*(t7615 + t7640 - 1.*t4990*t8171 + t8216 + t8217 - 1.*t4433*t8230))*var2[4] + (t6776*t7450 + t4755*(t7569 + t4018*t7942 + t4091*t7948) + t3697*(t7615 + t7640 - 1.*t4970*t7942 - 1.*t4945*t7948 - 1.*t4427*t7996 - 1.*t4413*t8026))*var2[5] + (0.15121*t7442 + t6234*t7450 - 0.15121*t7473 + t4755*(t3758*t7539 + t7569 + t3877*t7578) + t3697*(-1.*t4897*t7539 - 1.*t4823*t7578 - 1.*t4399*t7611 + t7615 + t7640 - 1.*t4344*t7649))*var2[6] + (-0.281210000004*t191 + t4723*t7664 + t7668 + 4.000000000064e-6*t1461*t7675 + t3511*t7717 + 4.e-6*(-1.*t4734*t7664 - 1.000000000016*t1461*t7675 - 1.*t3625*t7717))*var2[7];
  p_output1[6]=t8438;
  p_output1[7]=t3133;
  p_output1[8]=t2185*t2754 + t2096*t34;
  p_output1[9]=t4994*t5092 + t4513*t5158;
  p_output1[10]=t5139*t5465 + t5027*t5592;
  p_output1[11]=t4755*t6776 + t3697*t6903;
  p_output1[12]=-0.15121*t1639 + 0.15121*t1848 + t4755*t6234 + t3697*t6540;
  p_output1[13]=-0.281210000004*t1461 + 0.038749*t401 + t4723*t7675 + t3511*t8558 + 4.e-6*(-1.*t4734*t7675 - 1.*t3625*t8558);
  p_output1[14]=-4.05160619990483e-7;
  p_output1[15]=(-1.*t2185*t5111 - 1.*t34*t5139)*var2[1] + t8610*var2[2];
  p_output1[16]=t5111*var2[0] - 1.*t34*t5193*var2[1] + t2185*t5193*var2[2] + ((-1.*t4110*t4484 - 1.*t4484*t4513 - 1.*t4543*t4562 - 1.*t4543*t4613)*t8438 + t4513*(t3336*t4484 + t2754*t4562 + t2754*t4613 + t4484*t8438) + t2754*t8663 + t4543*t8674)*var2[3];
  p_output1[17]=t2275*t5575*var2[0] + (t2185*t4990 + t2563*t34*t5575)*var2[1] + (t34*t4990 - 1.*t2185*t2563*t5575)*var2[2] + (t2275*t5321*t8663 + t2275*t5502*t8674 + t8438*(t2563*t4484*t5502 - 1.*t2275*t4613*t5502 - 1.*t2275*t4513*t5536 + t2563*t4543*t5536 + t8726 + t8732) + t4513*(-1.*t2563*t4484*t5321 + t2275*t4613*t5321 - 1.*t2563*t2754*t5536 + t2275*t5536*t8438 + t8767 + t8774))*var2[3] + (t2096*(-1.*t4433*t5502 - 1.*t4096*t5536 + t8726 + t8732) + t2656*t8747 + t4096*t8755 + t5027*(t4433*t5321 + t2656*t5536 + t8767 + t8774))*var2[4];
  p_output1[18]=t2275*t6076*var2[0] + (t2185*t5981 + t2563*t34*t6076)*var2[1] + (t34*t5981 - 1.*t2185*t2563*t6076)*var2[2] + (t2275*t5816*t8663 + t2275*t5993*t8674 + t8438*(t2563*t4484*t5993 - 1.*t2275*t4613*t5993 - 1.*t2275*t4513*t6046 + t2563*t4543*t6046 + t8885 + t8888) + t4513*(-1.*t2563*t4484*t5816 + t2275*t4613*t5816 - 1.*t2563*t2754*t6046 + t2275*t6046*t8438 + t8904 + t8906))*var2[3] + (t5852*t8747 + t6011*t8755 + t2096*(-1.*t4433*t5993 - 1.*t4096*t6046 + t8885 + t8888) + t5027*(t4433*t5816 + t2656*t6046 + t8904 + t8906))*var2[4] + (t3697*(t1870*t4413 + t4427*t5814 + t1870*t5886 + t2044*t5913) + t2494*(-1.*t4018*t4413 - 1.*t4018*t5886 - 1.*t4427*t5905 - 1.*t4091*t5913))*var2[5];
  p_output1[19]=t7321*var2[0] + (t2185*t7185 - 1.*t34*t7333)*var2[1] + (t34*t7185 + t2185*t7333)*var2[2] + (t6752*t8663 + t7283*t8674 + t8438*(-1.*t4543*t7216 - 1.*t4513*t7226 - 1.*t4484*t7268 - 1.*t4613*t7283 + t9108 + t9116) + t4513*(t4613*t6752 + t4484*t7077 + t2754*t7216 + t7226*t8438 + t9127 + t9132))*var2[3] + (t7062*t8747 + t7158*t8755 + t2096*(-1.*t4096*t7124 - 1.*t4433*t7152 + t8960 + t8973 + t9108 + t9116) + t5027*(t4433*t6741 + t2656*t7124 + t9014 + t9022 + t9127 + t9132))*var2[4] + (t2494*(-1.*t4018*t6794 - 1.*t4091*t6803 - 1.*t4413*t6840 - 1.*t4427*t6852 + t8960 + t8973) + t3697*(t4413*t6694 + t4427*t6737 + t1870*t6794 + t2044*t6803 + t9014 + t9022) + t6656*t9077 + t6468*t9084)*var2[5] + (-0.15121*t6553 + 0.15121*t6603 + t2494*(-1.*t4344*t6295 - 1.*t3758*t6354 - 1.*t3877*t6441 - 1.*t4399*t6501 + t8960 + t8973) + t6656*t8988 + t6468*t8998 + t3697*(t4344*t6220 + t4399*t6269 + t1639*t6354 + t1848*t6441 + t9014 + t9022))*var2[6];
  p_output1[20]=t8394*var2[0] + (t2185*t8199 - 1.*t34*t8417)*var2[1] + (t34*t8199 + t2185*t8417)*var2[2] + (t7930*t8663 + t8438*(-1.*t4543*t8255 - 1.*t4513*t8371 + t9430) + t4513*(t4613*t7930 + t4484*t8085 + t2754*t8255 + t8371*t8438 + t9442 + t9445))*var2[3] + (t8075*t8747 + t2096*(-1.*t4096*t8171 + t9265 + t9430) + t5027*(t4433*t7916 + t2656*t8171 + t9305 + t9312 + t9442 + t9445))*var2[4] + (t7786*t9077 + t2494*(-1.*t4018*t7942 - 1.*t4091*t7948 + t9265) + t3697*(t4413*t7814 + t4427*t7909 + t1870*t7942 + t2044*t7948 + t9305 + t9312))*var2[5] + (-0.15121*t7611 + 0.15121*t7649 + t7786*t8988 + t2494*(-1.*t3758*t7539 - 1.*t3877*t7578 + t9265) + t3697*(t4344*t7442 + t4399*t7473 + t1639*t7539 + t1848*t7578 + t9305 + t9312))*var2[6] + (0.281210000008499*t1461 - 0.03874900000062*t191 - 4.e-6*t191*t9339 - 4.e-6*t1461*t9349 + t3511*t9380 + 4.e-6*(t191*t9339 + t1461*t9349 - 1.*t3625*t9380))*var2[7];
  p_output1[21]=t4994;
  p_output1[22]=t8610;
  p_output1[23]=t2185*t5111 + t34*t5139;
  p_output1[24]=t8438*t8663 + t4513*t8674;
  p_output1[25]=t2096*t8747 + t5027*t8755;
  p_output1[26]=t2494*t9077 + t3697*t9084;
  p_output1[27]=0.15121*t4823 - 0.15121*t4897 + t2494*t8988 + t3697*t8998;
  p_output1[28]=1.e-6*t4723 + 0.28121*t4734 + t7668 - 4.e-6*t1461*t9339 + t3511*t9547 + 4.e-6*(t1461*t9339 - 1.*t3625*t9547);
  p_output1[29]=0.300000000004851;
  p_output1[30]=(-1.*t2185*t4543 - 1.*t34*t5027)*var2[1] + t9577*var2[2];
  p_output1[31]=t4543*var2[0] - 1.*t34*t4110*var2[1] + t2185*t4110*var2[2] + ((t4484*t4994 + t4562*t5111 + t4613*t5111 + t4484*t5193)*t8438 + t4994*(-1.*t3336*t4484 - 1.*t2754*t4562 - 1.*t2754*t4613 - 1.*t4484*t8438) + t5111*t9598 + t2754*t9615)*var2[3];
  p_output1[32]=t2275*t5502*var2[0] + (t2185*t4096 + t2563*t34*t5502)*var2[1] + (t34*t4096 - 1.*t2185*t2563*t5502)*var2[2] + (t2275*t5575*t9598 + t2275*t5321*t9615 + t4994*(t2563*t4484*t5321 - 1.*t2275*t4613*t5321 + t2563*t2754*t5536 - 1.*t2275*t5536*t8438 + t9653 + t9655) + t8438*(t2275*t4994*t5536 - 1.*t2563*t5111*t5536 - 1.*t2563*t4484*t5575 + t2275*t4613*t5575 + t9662 + t9666))*var2[3] + (t4990*t9650 + t5139*(-1.*t4433*t5321 - 1.*t2656*t5536 + t9653 + t9655) + t2096*(t4990*t5536 + t4433*t5575 + t9662 + t9666) + t2656*t9679)*var2[4];
  p_output1[33]=t2275*t5993*var2[0] + (t2563*t34*t5993 + t2185*t6011)*var2[1] + (-1.*t2185*t2563*t5993 + t34*t6011)*var2[2] + (t2275*t6076*t9598 + t2275*t5816*t9615 + t4994*(t2563*t4484*t5816 - 1.*t2275*t4613*t5816 + t2563*t2754*t6046 - 1.*t2275*t6046*t8438 + t9801 + t9803) + t8438*(t2275*t4994*t6046 - 1.*t2563*t5111*t6046 - 1.*t2563*t4484*t6076 + t2275*t4613*t6076 + t9827 + t9830))*var2[3] + (t5981*t9650 + t5852*t9679 + t5139*(-1.*t4433*t5816 - 1.*t2656*t6046 + t9801 + t9803) + t2096*(t4990*t6046 + t4433*t6076 + t9827 + t9830))*var2[4] + (t4755*(-1.*t1870*t4413 - 1.*t4427*t5814 - 1.*t1870*t5886 - 1.*t2044*t5913) + t2494*(t4413*t4970 + t4970*t5886 + t4945*t5913 + t4427*t5929))*var2[5];
  p_output1[34]=t7283*var2[0] + (t2185*t7158 - 1.*t34*t7268)*var2[1] + (t34*t7158 + t2185*t7268)*var2[2] + ((t10049 + t10054 + t5111*t7216 + t4994*t7226 + t4613*t7321 + t4484*t7333)*t8438 + t4994*(t10030 + t10044 - 1.*t4613*t6752 - 1.*t4484*t7077 - 1.*t2754*t7216 - 1.*t7226*t8438) + t7321*t9598 + t6752*t9615)*var2[3] + (t7185*t9650 + t7062*t9679 + t5139*(t10030 + t10044 - 1.*t4433*t6741 - 1.*t2656*t7124 + t9950 + t9955) + t2096*(t10049 + t10054 + t4990*t7124 + t4433*t7201 + t9972 + t9980))*var2[4] + (t10010*t6656 + t4755*(-1.*t4413*t6694 - 1.*t4427*t6737 - 1.*t1870*t6794 - 1.*t2044*t6803 + t9950 + t9955) + t2494*(t4970*t6794 + t4945*t6803 + t4427*t6991 + t4413*t7018 + t9972 + t9980) + t6245*t9995)*var2[5] + (0.15121*t6295 - 0.15121*t6501 + t6245*t9936 + t4755*(-1.*t4344*t6220 - 1.*t4399*t6269 - 1.*t1639*t6354 - 1.*t1848*t6441 + t9950 + t9955) + t6656*t9962 + t2494*(t4897*t6354 + t4823*t6441 + t4399*t6553 + t4344*t6603 + t9972 + t9980))*var2[6];
  p_output1[35]=((t10254 + t10255 + t5111*t8255 + t4994*t8371 + t4613*t8394 + t4484*t8417)*t8438 + t4994*(t10237 + t10248 - 1.*t4613*t7930 - 1.*t4484*t8085 - 1.*t2754*t8255 - 1.*t8371*t8438) + t8394*t9598 + t7930*t9615)*var2[3] + (t5139*(t10106 + t10111 + t10237 + t10248 - 1.*t4433*t7916 - 1.*t2656*t8171) + t2096*(t10118 + t10123 + t10254 + t10255 + t4990*t8171 + t4433*t8230) + t8199*t9650 + t8075*t9679)*var2[4] + (t10010*t7786 + t4755*(t10106 + t10111 - 1.*t4413*t7814 - 1.*t4427*t7909 - 1.*t1870*t7942 - 1.*t2044*t7948) + t2494*(t10118 + t10123 + t4970*t7942 + t4945*t7948 + t4427*t7996 + t4413*t8026) + t7450*t9995)*var2[5] + (t4755*(t10106 + t10111 - 1.*t4344*t7442 - 1.*t4399*t7473 - 1.*t1639*t7539 - 1.*t1848*t7578) + t2494*(t10118 + t10123 + t4897*t7539 + t4823*t7578 + t4399*t7611 + t4344*t7649) + t7450*t9936 + t7786*t9962)*var2[6] + (4.000000000064e-6*t10142*t1461 - 4.e-6*t10157*t1461 - 4.e-6*t10163*t191 + t10186*t4723 + 4.e-6*(-1.000000000016*t10142*t1461 + t10157*t1461 + t10163*t191 - 1.*t10186*t4734))*var2[7];
  p_output1[36]=t4513;
  p_output1[37]=t9577;
  p_output1[38]=t2185*t4543 + t34*t5027;
  p_output1[39]=t4994*t9598 + t8438*t9615;
  p_output1[40]=t5139*t9650 + t2096*t9679;
  p_output1[41]=t10010*t2494 + t4755*t9995;
  p_output1[42]=-0.15121*t3758 + 0.15121*t3877 + t4755*t9936 + t2494*t9962;
  p_output1[43]=-4.e-6*t10163*t1461 + 1.e-6*t3511 + 0.28121*t3625 + t10142*t4723 + 4.e-6*(t10163*t1461 - 1.*t10142*t4734);
  p_output1[44]=-1.284e-8;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 45, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_dh_FlFoot_QuadrupleStance.hh"

namespace QuadrupleStance
{

void J_dh_FlFoot_QuadrupleStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
