/*
 * Automatically Generated from Mathematica.
 * Wed 8 Dec 2021 23:10:07 GMT+01:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t101;
  double t170;
  double t174;
  double t207;
  double t219;
  double t244;
  double t125;
  double t315;
  double t427;
  double t428;
  double t430;
  double t448;
  double t503;
  double t530;
  double t389;
  double t421;
  double t423;
  double t472;
  double t477;
  double t478;
  double t577;
  double t579;
  double t587;
  double t590;
  double t536;
  double t537;
  double t546;
  double t556;
  double t557;
  double t559;
  double t651;
  double t621;
  double t622;
  double t627;
  double t629;
  double t599;
  double t600;
  double t605;
  double t606;
  double t609;
  double t610;
  double t256;
  double t274;
  double t344;
  double t345;
  double t425;
  double t435;
  double t449;
  double t453;
  double t481;
  double t483;
  double t486;
  double t767;
  double t771;
  double t811;
  double t822;
  double t849;
  double t858;
  double t565;
  double t589;
  double t594;
  double t595;
  double t613;
  double t615;
  double t616;
  double t637;
  double t638;
  double t646;
  double t648;
  double t737;
  double t740;
  double t901;
  double t906;
  double t909;
  double t878;
  double t883;
  double t895;
  double t917;
  double t929;
  double t932;
  double t654;
  double t657;
  double t813;
  double t874;
  double t896;
  double t914;
  double t934;
  double t940;
  double t943;
  double t945;
  double t947;
  double t961;
  double t965;
  double t972;
  double t978;
  double t991;
  double t992;
  double t1005;
  double t1013;
  double t1028;
  double t1035;
  double t1040;
  double t1140;
  double t1141;
  double t1144;
  double t1207;
  double t1208;
  double t1217;
  double t1221;
  double t1226;
  double t1227;
  double t1238;
  double t1243;
  double t1170;
  double t1182;
  double t1186;
  double t1193;
  double t1378;
  double t1388;
  double t1390;
  double t1391;
  double t1350;
  double t1352;
  double t1356;
  double t1366;
  double t1416;
  double t1418;
  double t1508;
  double t1504;
  double t1505;
  double t1514;
  double t1516;
  double t1519;
  double t1521;
  double t1523;
  double t510;
  double t518;
  double t519;
  double t525;
  double t1528;
  double t1529;
  double t1541;
  double t1547;
  double t1551;
  double t1554;
  double t1559;
  double t1560;
  double t1569;
  double t1572;
  double t1598;
  double t1607;
  double t1608;
  double t1609;
  double t1575;
  double t1583;
  double t1585;
  double t1587;
  double t1656;
  double t1658;
  double t1661;
  double t1667;
  double t1672;
  double t1678;
  double t1685;
  double t1688;
  double t1689;
  double t1697;
  double t1724;
  double t1725;
  double t1729;
  double t1730;
  double t1704;
  double t1710;
  double t1712;
  double t1713;
  double t1783;
  double t1787;
  double t1789;
  double t1794;
  double t1798;
  double t1804;
  double t1823;
  double t1824;
  double t1827;
  double t1835;
  double t1837;
  double t1840;
  double t1857;
  double t1861;
  double t1863;
  double t1843;
  double t1850;
  double t1852;
  double t1868;
  double t1869;
  double t1870;
  double t1056;
  double t1058;
  double t1079;
  double t1080;
  double t1908;
  double t1910;
  double t1912;
  double t1916;
  double t1917;
  double t1919;
  double t1920;
  double t1936;
  double t1937;
  double t1938;
  double t1925;
  double t1926;
  double t1934;
  double t1941;
  double t1942;
  double t1945;
  double t1106;
  double t1109;
  double t1113;
  double t1120;
  double t1128;
  double t1129;
  double t1148;
  double t1156;
  double t1163;
  double t2019;
  double t2024;
  double t2027;
  double t2042;
  double t2043;
  double t2046;
  double t2048;
  double t2052;
  double t2056;
  double t2057;
  double t2059;
  double t2030;
  double t2031;
  double t2034;
  double t2036;
  double t1367;
  double t1369;
  double t1370;
  double t1394;
  double t1404;
  double t1411;
  double t1421;
  double t1424;
  double t1425;
  double t2122;
  double t2124;
  double t2126;
  double t2128;
  double t2111;
  double t2113;
  double t2114;
  double t2116;
  double t2135;
  double t2137;
  double t2161;
  double t2162;
  double t2249;
  double t2255;
  double t2260;
  double t2266;
  double t2272;
  double t2275;
  double t2290;
  double t2293;
  double t2294;
  double t2295;
  double t2309;
  double t2311;
  double t2312;
  double t2313;
  double t2297;
  double t2300;
  double t2305;
  double t2306;
  double t2376;
  double t2377;
  double t2379;
  double t2381;
  double t2389;
  double t2392;
  double t2396;
  double t2400;
  double t2412;
  double t2414;
  double t2415;
  double t2405;
  double t2407;
  double t2409;
  double t2419;
  double t2420;
  double t2421;
  double t2468;
  double t2478;
  double t2480;
  double t2483;
  double t2485;
  double t2492;
  double t2506;
  double t2528;
  double t2530;
  double t2531;
  double t2515;
  double t2517;
  double t2518;
  double t2536;
  double t2549;
  double t2551;
  double t2610;
  double t2613;
  double t2618;
  double t2657;
  double t2662;
  double t2663;
  double t2666;
  double t2667;
  double t2671;
  double t2674;
  double t2632;
  double t2633;
  double t2639;
  double t2650;
  double t2746;
  double t2747;
  double t2748;
  double t2749;
  double t2736;
  double t2738;
  double t2741;
  double t2743;
  double t2755;
  double t2756;
  double t2802;
  double t2812;
  double t2814;
  double t2835;
  double t2856;
  double t2857;
  double t2858;
  double t2859;
  double t2860;
  double t2845;
  double t2846;
  double t2891;
  double t2832;
  double t2949;
  double t2953;
  double t2956;
  double t2961;
  double t2918;
  double t2909;
  double t2911;
  double t2912;
  double t2936;
  double t2939;
  double t2945;
  double t2968;
  double t2848;
  double t2987;
  double t2840;
  double t2960;
  double t3061;
  double t3062;
  double t3092;
  double t2904;
  double t3009;
  double t2892;
  double t3114;
  double t3000;
  double t3007;
  double t3013;
  double t3014;
  double t3019;
  double t3022;
  double t3023;
  double t3027;
  double t3120;
  double t3080;
  double t3090;
  double t3091;
  double t3097;
  double t3099;
  double t3100;
  double t3101;
  double t3107;
  double t3133;
  double t3145;
  double t3147;
  double t3148;
  double t3151;
  double t3159;
  double t3160;
  double t3161;
  double t3049;
  double t3188;
  double t3063;
  double t3216;
  double t3182;
  double t2962;
  double t2869;
  double t2873;
  double t2861;
  double t2863;
  double t2916;
  double t2917;
  double t2920;
  double t2921;
  double t2926;
  double t2927;
  double t2934;
  double t2883;
  double t2884;
  double t2893;
  double t2901;
  double t2905;
  double t2906;
  double t2908;
  double t3111;
  double t3112;
  double t3115;
  double t3118;
  double t3123;
  double t3127;
  double t3129;
  double t3287;
  double t3288;
  double t3292;
  double t3300;
  double t3304;
  double t3309;
  double t3034;
  double t3040;
  double t3058;
  double t3059;
  double t3066;
  double t3071;
  double t3078;
  double t2948;
  double t2957;
  double t2963;
  double t2965;
  double t2970;
  double t2972;
  double t2982;
  double t3268;
  double t3315;
  double t3316;
  double t3318;
  double t3261;
  double t3324;
  double t3327;
  double t3332;
  double t3257;
  double t3259;
  double t3337;
  double t3340;
  double t3341;
  double t3244;
  double t3220;
  double t3235;
  double t3218;
  double t3197;
  double t3202;
  double t3190;
  double t3186;
  double t3295;
  double t3312;
  double t3320;
  double t3335;
  double t3342;
  double t3343;
  double t3346;
  double t3348;
  double t3352;
  double t3353;
  double t3354;
  double t3355;
  double t3357;
  double t3363;
  double t3368;
  double t3370;
  double t3372;
  double t3374;
  double t3375;
  double t3377;
  double t3415;
  double t3427;
  double t3436;
  double t3484;
  double t3485;
  double t3486;
  double t3404;
  double t3537;
  double t3460;
  double t3495;
  double t3497;
  double t3499;
  double t3501;
  double t3504;
  double t3505;
  double t3520;
  double t3521;
  double t3523;
  double t3539;
  double t3545;
  double t3546;
  double t3556;
  double t3557;
  double t3565;
  double t3572;
  double t3573;
  double t3574;
  double t3652;
  double t3679;
  double t3685;
  double t3689;
  double t3696;
  double t3723;
  double t3725;
  double t3739;
  double t3750;
  double t3668;
  double t3800;
  double t3803;
  double t3805;
  double t3806;
  double t3820;
  double t3711;
  double t3779;
  double t3758;
  double t2799;
  double t2826;
  double t2843;
  double t2844;
  double t2849;
  double t2851;
  double t2852;
  double t3892;
  double t3896;
  double t3897;
  double t3899;
  double t3901;
  double t3905;
  double t3907;
  double t3908;
  double t3909;
  double t3911;
  double t3918;
  double t3920;
  double t3922;
  double t3924;
  double t3931;
  double t3933;
  double t3934;
  double t3938;
  double t4000;
  double t4001;
  double t4017;
  double t4025;
  double t4026;
  double t4027;
  double t4035;
  double t4037;
  double t4038;
  double t4039;
  double t4042;
  double t4044;
  double t4045;
  double t4049;
  double t4053;
  double t4062;
  double t4078;
  double t4080;
  double t4144;
  double t4148;
  double t4151;
  double t4159;
  double t4176;
  double t4186;
  double t4193;
  double t4194;
  double t4196;
  double t4198;
  double t4206;
  double t4208;
  double t4222;
  double t4224;
  double t4232;
  double t3380;
  double t3381;
  double t3391;
  double t3395;
  double t4283;
  double t4284;
  double t4293;
  double t4294;
  double t4297;
  double t4302;
  double t4307;
  double t4311;
  double t4317;
  double t4318;
  double t4328;
  double t4330;
  double t4333;
  double t3405;
  double t3409;
  double t3418;
  double t3420;
  double t3421;
  double t3422;
  double t3428;
  double t3432;
  double t3439;
  double t3441;
  double t3442;
  double t3445;
  double t3455;
  double t3457;
  double t3461;
  double t3462;
  double t3463;
  double t3470;
  double t4384;
  double t4385;
  double t4393;
  double t4397;
  double t4398;
  double t4400;
  double t4405;
  double t4410;
  double t4411;
  double t4412;
  double t4414;
  double t4427;
  double t4429;
  double t4432;
  double t4439;
  double t3654;
  double t3665;
  double t3670;
  double t3671;
  double t3672;
  double t3675;
  double t3713;
  double t3714;
  double t3716;
  double t3718;
  double t3719;
  double t3722;
  double t3765;
  double t3768;
  double t3783;
  double t3787;
  double t3794;
  double t3799;
  double t4489;
  double t4491;
  double t4494;
  double t4504;
  double t3822;
  double t4507;
  double t4508;
  double t4510;
  double t4514;
  double t3827;
  double t4518;
  double t4519;
  double t4522;
  double t4523;
  double t3837;
  double t3843;
  double t3859;
  double t3862;
  double t4658;
  double t4659;
  double t4664;
  double t4669;
  double t4671;
  double t4678;
  double t4682;
  double t4689;
  double t4693;
  double t4696;
  double t4706;
  double t4708;
  double t4710;
  double t4711;
  double t4718;
  double t4719;
  double t4723;
  double t4726;
  double t4776;
  double t4779;
  double t4780;
  double t4797;
  double t4799;
  double t4810;
  double t4812;
  double t4814;
  double t4831;
  double t4835;
  double t4837;
  double t4845;
  double t4850;
  double t4851;
  double t4905;
  double t4906;
  double t4910;
  double t4911;
  double t4915;
  double t4919;
  double t4920;
  double t4924;
  double t4935;
  double t4937;
  double t4948;
  double t4951;
  double t4953;
  double t5034;
  double t5038;
  double t5039;
  double t5059;
  double t5062;
  double t5066;
  double t5067;
  double t5074;
  double t5075;
  double t5076;
  double t5081;
  double t5087;
  double t5096;
  double t5099;
  double t5101;
  double t5165;
  double t5169;
  double t5170;
  double t5174;
  double t5182;
  double t5184;
  double t5186;
  double t5191;
  double t5196;
  double t5200;
  double t5201;
  double t5203;
  t101 = Sin(var1[4]);
  t170 = Cos(var1[6]);
  t174 = -1.*t170;
  t207 = 1. + t174;
  t219 = 0.15121*t207;
  t244 = Sin(var1[6]);
  t125 = Sin(var1[5]);
  t315 = Cos(var1[5]);
  t427 = Cos(var1[7]);
  t428 = -1.*t427;
  t430 = 1. + t428;
  t448 = Sin(var1[7]);
  t503 = Cos(var1[4]);
  t530 = -1. + t427;
  t389 = t170*t101*t125;
  t421 = t315*t101*t244;
  t423 = t389 + t421;
  t472 = -1.*t315*t170*t101;
  t477 = t101*t125*t244;
  t478 = t472 + t477;
  t577 = Cos(var1[8]);
  t579 = -1.*t577;
  t587 = 1. + t579;
  t590 = Sin(var1[8]);
  t536 = 4.e-6*t503*t530;
  t537 = 1.6e-11*t530;
  t546 = 1. + t537;
  t556 = t546*t423;
  t557 = 4.e-6*t478*t448;
  t559 = t536 + t556 + t557;
  t651 = -1. + t577;
  t621 = t503*t427;
  t622 = 4.e-6*t530*t423;
  t627 = t478*t448;
  t629 = t621 + t622 + t627;
  t599 = -1.000000000016*t430;
  t600 = 1. + t599;
  t605 = t600*t478;
  t606 = -1.*t503*t448;
  t609 = -4.e-6*t423*t448;
  t610 = t605 + t606 + t609;
  t256 = -0.15121*t244;
  t274 = t219 + t256;
  t344 = 0.15121*t244;
  t345 = t219 + t344;
  t425 = -1.2484e-7*var1[7];
  t435 = -1.5499600000248e-7*t430;
  t449 = 1.124840000016e-6*t448;
  t453 = t425 + t435 + t449;
  t481 = 0.281210000008499*t430;
  t483 = 0.03874900000062*t448;
  t486 = t481 + t483;
  t767 = -1.*t503*t315*t170;
  t771 = t503*t125*t244;
  t811 = t767 + t771;
  t822 = -1.*t503*t170*t125;
  t849 = -1.*t503*t315*t244;
  t858 = t822 + t849;
  t565 = -1.284e-8*var1[8];
  t589 = -1.5499600000248e-7*t587;
  t594 = 2.012840000032e-6*t590;
  t595 = t565 + t589 + t594;
  t613 = 0.503210000016051*t587;
  t615 = 0.03874900000062*t590;
  t616 = t613 + t615;
  t637 = 5.136e-14*var1[8];
  t638 = -0.03874900000062*t587;
  t646 = 0.503210000008*t590;
  t648 = t637 + t638 + t646;
  t737 = -1.000000000016*t587;
  t740 = 1. + t737;
  t901 = t600*t858;
  t906 = -4.e-6*t811*t448;
  t909 = t901 + t906;
  t878 = t546*t811;
  t883 = 4.e-6*t858*t448;
  t895 = t878 + t883;
  t917 = 4.e-6*t530*t811;
  t929 = t858*t448;
  t932 = t917 + t929;
  t654 = 1.6e-11*t651;
  t657 = 1. + t654;
  t813 = t811*t453;
  t874 = t858*t486;
  t896 = t895*t595;
  t914 = t909*t616;
  t934 = t932*t648;
  t940 = t740*t909;
  t943 = -4.e-6*t895*t590;
  t945 = -1.*t932*t590;
  t947 = t940 + t943 + t945;
  t961 = 0.80321*t947;
  t965 = t657*t895;
  t972 = 4.e-6*t651*t932;
  t978 = 4.e-6*t909*t590;
  t991 = t965 + t972 + t978;
  t992 = 0.14871*t991;
  t1005 = 4.e-6*t651*t895;
  t1013 = t577*t932;
  t1028 = t909*t590;
  t1035 = t1005 + t1013 + t1028;
  t1040 = -0.03875*t1035;
  t1140 = t503*t315*t170;
  t1141 = -1.*t503*t125*t244;
  t1144 = t1140 + t1141;
  t1207 = -1.*t427*t101;
  t1208 = -4.e-6*t427*t858;
  t1217 = -1.000000000016*t1144*t448;
  t1221 = t1207 + t1208 + t1217;
  t1226 = t427*t1144;
  t1227 = -1.*t101*t448;
  t1238 = -4.e-6*t858*t448;
  t1243 = t1226 + t1227 + t1238;
  t1170 = 4.e-6*t427*t1144;
  t1182 = -4.e-6*t101*t448;
  t1186 = -1.6e-11*t858*t448;
  t1193 = t1170 + t1182 + t1186;
  t1378 = 4.e-6*t530*t101;
  t1388 = t546*t858;
  t1390 = 4.e-6*t1144*t448;
  t1391 = t1378 + t1388 + t1390;
  t1350 = t427*t101;
  t1352 = 4.e-6*t530*t858;
  t1356 = t1144*t448;
  t1366 = t1350 + t1352 + t1356;
  t1416 = t600*t1144;
  t1418 = t1416 + t1227 + t1238;
  t1508 = Cos(var1[3]);
  t1504 = Sin(var1[3]);
  t1505 = -1.*t315*t1504;
  t1514 = -1.*t1508*t101*t125;
  t1516 = t1505 + t1514;
  t1519 = t1508*t315*t101;
  t1521 = -1.*t1504*t125;
  t1523 = t1519 + t1521;
  t510 = 4.9936e-13*var1[7];
  t518 = -0.03874900000062*t430;
  t519 = 0.281210000004*t448;
  t525 = t510 + t518 + t519;
  t1528 = t170*t1516;
  t1529 = -1.*t1523*t244;
  t1541 = t1528 + t1529;
  t1547 = t170*t1523;
  t1551 = t1516*t244;
  t1554 = t1547 + t1551;
  t1559 = -4.e-6*t1508*t503*t530;
  t1560 = t546*t1541;
  t1569 = 4.e-6*t1554*t448;
  t1572 = t1559 + t1560 + t1569;
  t1598 = -1.*t1508*t503*t427;
  t1607 = 4.e-6*t530*t1541;
  t1608 = t1554*t448;
  t1609 = t1598 + t1607 + t1608;
  t1575 = t600*t1554;
  t1583 = t1508*t503*t448;
  t1585 = -4.e-6*t1541*t448;
  t1587 = t1575 + t1583 + t1585;
  t1656 = -1.*t503*t170*t1504*t125;
  t1658 = -1.*t503*t315*t1504*t244;
  t1661 = t1656 + t1658;
  t1667 = t503*t315*t170*t1504;
  t1672 = -1.*t503*t1504*t125*t244;
  t1678 = t1667 + t1672;
  t1685 = 4.e-6*t530*t1504*t101;
  t1688 = t546*t1661;
  t1689 = 4.e-6*t1678*t448;
  t1697 = t1685 + t1688 + t1689;
  t1724 = t427*t1504*t101;
  t1725 = 4.e-6*t530*t1661;
  t1729 = t1678*t448;
  t1730 = t1724 + t1725 + t1729;
  t1704 = t600*t1678;
  t1710 = -1.*t1504*t101*t448;
  t1712 = -4.e-6*t1661*t448;
  t1713 = t1704 + t1710 + t1712;
  t1783 = -1.*t315*t1504*t101;
  t1787 = -1.*t1508*t125;
  t1789 = t1783 + t1787;
  t1794 = t1508*t315;
  t1798 = -1.*t1504*t101*t125;
  t1804 = t1794 + t1798;
  t1823 = t170*t1789;
  t1824 = -1.*t1804*t244;
  t1827 = t1823 + t1824;
  t1835 = t170*t1804;
  t1837 = t1789*t244;
  t1840 = t1835 + t1837;
  t1857 = t600*t1840;
  t1861 = -4.e-6*t1827*t448;
  t1863 = t1857 + t1861;
  t1843 = t546*t1827;
  t1850 = 4.e-6*t1840*t448;
  t1852 = t1843 + t1850;
  t1868 = 4.e-6*t530*t1827;
  t1869 = t1840*t448;
  t1870 = t1868 + t1869;
  t1056 = -0.15121*t170;
  t1058 = t1056 + t344;
  t1079 = 0.15121*t170;
  t1080 = t1079 + t344;
  t1908 = t315*t1504*t101;
  t1910 = t1508*t125;
  t1912 = t1908 + t1910;
  t1916 = -1.*t170*t1912;
  t1917 = t1916 + t1824;
  t1919 = -1.*t1912*t244;
  t1920 = t1835 + t1919;
  t1936 = t600*t1920;
  t1937 = -4.e-6*t1917*t448;
  t1938 = t1936 + t1937;
  t1925 = t546*t1917;
  t1926 = 4.e-6*t1920*t448;
  t1934 = t1925 + t1926;
  t1941 = 4.e-6*t530*t1917;
  t1942 = t1920*t448;
  t1945 = t1941 + t1942;
  t1106 = 0.281210000004*t427;
  t1109 = -0.03874900000062*t448;
  t1113 = 4.9936e-13 + t1106 + t1109;
  t1120 = 1.124840000016e-6*t427;
  t1128 = -1.5499600000248e-7*t448;
  t1129 = -1.2484e-7 + t1120 + t1128;
  t1148 = 0.03874900000062*t427;
  t1156 = 0.281210000008499*t448;
  t1163 = t1148 + t1156;
  t2019 = t170*t1912;
  t2024 = t1804*t244;
  t2027 = t2019 + t2024;
  t2042 = t503*t427*t1504;
  t2043 = -4.e-6*t427*t1920;
  t2046 = -1.000000000016*t2027*t448;
  t2048 = t2042 + t2043 + t2046;
  t2052 = t427*t2027;
  t2056 = t503*t1504*t448;
  t2057 = -4.e-6*t1920*t448;
  t2059 = t2052 + t2056 + t2057;
  t2030 = 4.e-6*t427*t2027;
  t2031 = 4.e-6*t503*t1504*t448;
  t2034 = -1.6e-11*t1920*t448;
  t2036 = t2030 + t2031 + t2034;
  t1367 = 0.503210000008*t577;
  t1369 = -0.03874900000062*t590;
  t1370 = 5.136e-14 + t1367 + t1369;
  t1394 = 2.012840000032e-6*t577;
  t1404 = -1.5499600000248e-7*t590;
  t1411 = -1.284e-8 + t1394 + t1404;
  t1421 = 0.03874900000062*t577;
  t1424 = 0.503210000016051*t590;
  t1425 = t1421 + t1424;
  t2122 = -4.e-6*t503*t530*t1504;
  t2124 = t546*t1920;
  t2126 = 4.e-6*t2027*t448;
  t2128 = t2122 + t2124 + t2126;
  t2111 = -1.*t503*t427*t1504;
  t2113 = 4.e-6*t530*t1920;
  t2114 = t2027*t448;
  t2116 = t2111 + t2113 + t2114;
  t2135 = t600*t2027;
  t2137 = t2135 + t2056 + t2057;
  t2161 = -4.e-6*t2128*t590;
  t2162 = -1.*t2116*t590;
  t2249 = t1508*t503*t170*t125;
  t2255 = t1508*t503*t315*t244;
  t2260 = t2249 + t2255;
  t2266 = -1.*t1508*t503*t315*t170;
  t2272 = t1508*t503*t125*t244;
  t2275 = t2266 + t2272;
  t2290 = -4.e-6*t1508*t530*t101;
  t2293 = t546*t2260;
  t2294 = 4.e-6*t2275*t448;
  t2295 = t2290 + t2293 + t2294;
  t2309 = -1.*t1508*t427*t101;
  t2311 = 4.e-6*t530*t2260;
  t2312 = t2275*t448;
  t2313 = t2309 + t2311 + t2312;
  t2297 = t600*t2275;
  t2300 = t1508*t101*t448;
  t2305 = -4.e-6*t2260*t448;
  t2306 = t2297 + t2300 + t2305;
  t2376 = t315*t1504;
  t2377 = t1508*t101*t125;
  t2379 = t2376 + t2377;
  t2381 = -1.*t2379*t244;
  t2389 = t1547 + t2381;
  t2392 = t170*t2379;
  t2396 = t1523*t244;
  t2400 = t2392 + t2396;
  t2412 = t600*t2400;
  t2414 = -4.e-6*t2389*t448;
  t2415 = t2412 + t2414;
  t2405 = t546*t2389;
  t2407 = 4.e-6*t2400*t448;
  t2409 = t2405 + t2407;
  t2419 = 4.e-6*t530*t2389;
  t2420 = t2400*t448;
  t2421 = t2419 + t2420;
  t2468 = -1.*t1508*t315*t101;
  t2478 = t1504*t125;
  t2480 = t2468 + t2478;
  t2483 = -1.*t170*t2480;
  t2485 = t2483 + t2381;
  t2492 = -1.*t2480*t244;
  t2506 = t2392 + t2492;
  t2528 = t600*t2506;
  t2530 = -4.e-6*t2485*t448;
  t2531 = t2528 + t2530;
  t2515 = t546*t2485;
  t2517 = 4.e-6*t2506*t448;
  t2518 = t2515 + t2517;
  t2536 = 4.e-6*t530*t2485;
  t2549 = t2506*t448;
  t2551 = t2536 + t2549;
  t2610 = t170*t2480;
  t2613 = t2379*t244;
  t2618 = t2610 + t2613;
  t2657 = -4.e-6*t427*t2506;
  t2662 = -1.000000000016*t2618*t448;
  t2663 = t1598 + t2657 + t2662;
  t2666 = t427*t2618;
  t2667 = -1.*t1508*t503*t448;
  t2671 = -4.e-6*t2506*t448;
  t2674 = t2666 + t2667 + t2671;
  t2632 = 4.e-6*t427*t2618;
  t2633 = -4.e-6*t1508*t503*t448;
  t2639 = -1.6e-11*t2506*t448;
  t2650 = t2632 + t2633 + t2639;
  t2746 = 4.e-6*t1508*t503*t530;
  t2747 = t546*t2506;
  t2748 = 4.e-6*t2618*t448;
  t2749 = t2746 + t2747 + t2748;
  t2736 = t1508*t503*t427;
  t2738 = 4.e-6*t530*t2506;
  t2741 = t2618*t448;
  t2743 = t2736 + t2738 + t2741;
  t2755 = t600*t2618;
  t2756 = t2755 + t2667 + t2671;
  t2802 = Cos(var1[16]);
  t2812 = -1.*t2802;
  t2814 = 1. + t2812;
  t2835 = Sin(var1[16]);
  t2856 = Cos(var1[15]);
  t2857 = -1.*t2856;
  t2858 = 1. + t2857;
  t2859 = -0.15121*t2858;
  t2860 = Sin(var1[15]);
  t2845 = -1. + t2802;
  t2846 = 4.e-6*t2845;
  t2891 = 7.e-6*t2814;
  t2832 = 2.8e-11*t2814;
  t2949 = Cos(var1[17]);
  t2953 = -1.*t2949;
  t2956 = 1. + t2953;
  t2961 = Sin(var1[17]);
  t2918 = -4.e-6*t2835;
  t2909 = t315*t2860*t101;
  t2911 = t2856*t101*t125;
  t2912 = t2909 + t2911;
  t2936 = -1.*t2856*t315*t101;
  t2939 = t2860*t101*t125;
  t2945 = t2936 + t2939;
  t2968 = 2.8e-11*t2956;
  t2848 = -7.e-6*t2835;
  t2987 = -2.8e-11*t2814;
  t2840 = -1.*t2835;
  t2960 = 7.e-6*t2956;
  t3061 = -1. + t2949;
  t3062 = 4.e-6*t3061;
  t3092 = 4.e-6*t2814;
  t2904 = 7.e-6*t2835;
  t3009 = -7.e-6*t2814;
  t2892 = 4.e-6*t2835;
  t3114 = 4.e-6*t2961;
  t3000 = t2987 + t2835;
  t3007 = t503*t3000;
  t3013 = t3009 + t2918;
  t3014 = t3013*t2912;
  t3019 = -1.000000000016*t2814;
  t3022 = 1. + t3019;
  t3023 = t3022*t2945;
  t3027 = t3007 + t3014 + t3023;
  t3120 = 7.e-6*t2961;
  t3080 = -1.000000000049*t2814;
  t3090 = 1. + t3080;
  t3091 = t3090*t503;
  t3097 = t3092 + t2848;
  t3099 = t3097*t2912;
  t3100 = t2987 + t2840;
  t3101 = t3100*t2945;
  t3107 = t3091 + t3099 + t3101;
  t3133 = t3092 + t2904;
  t3145 = t503*t3133;
  t3147 = -6.5e-11*t2814;
  t3148 = 1. + t3147;
  t3151 = t3148*t2912;
  t3159 = t3009 + t2892;
  t3160 = t3159*t2945;
  t3161 = t3145 + t3151 + t3160;
  t3049 = -1.*t2961;
  t3188 = 4.e-6*t2956;
  t3063 = -7.e-6*t2961;
  t3216 = -2.8e-11*t2956;
  t3182 = -7.e-6*t2956;
  t2962 = -4.e-6*t2961;
  t2869 = 0.15121*t2860;
  t2873 = t2859 + t2869;
  t2861 = -0.15121*t2860;
  t2863 = t2859 + t2861;
  t2916 = -2.7726089999999997e-12*var1[16];
  t2917 = -0.2812110000084994*t2814;
  t2920 = t2891 + t2918;
  t2921 = -1.8134809999999998e-6*t2920;
  t2926 = t2832 + t2835;
  t2927 = -0.038749000006999997*t2926;
  t2934 = t2916 + t2917 + t2921 + t2927;
  t2883 = 3.9608699999999997e-7*var1[16];
  t2884 = -1.1787626499999999e-16*t2814;
  t2893 = t2891 + t2892;
  t2901 = -0.281211000004*t2893;
  t2905 = t2846 + t2904;
  t2906 = -0.038749000006999997*t2905;
  t2908 = t2883 + t2884 + t2901 + t2906;
  t3111 = 2.826290000000002e-7*var1[17];
  t3112 = -2.18904205e-16*t2956;
  t3115 = t2960 + t3114;
  t3118 = -0.5031510000080001*t3115;
  t3123 = t3062 + t3120;
  t3127 = -0.038575000014*t3123;
  t3129 = t3111 + t3112 + t3118 + t3127;
  t3287 = -1.*t503*t315*t2860;
  t3288 = -1.*t2856*t503*t125;
  t3292 = t3287 + t3288;
  t3300 = -1.*t2856*t503*t315;
  t3304 = t503*t2860*t125;
  t3309 = t3300 + t3304;
  t3034 = 1.1305160000000008e-12*var1[17];
  t3040 = -0.03857500001589017*t2956;
  t3058 = t2968 + t3049;
  t3059 = -0.5031510000080001*t3058;
  t3066 = t3062 + t3063;
  t3071 = -3.367757e-6*t3066;
  t3078 = t3034 + t3040 + t3059 + t3071;
  t2948 = -1.9784030000000015e-12*var1[17];
  t2957 = -0.5031510000160505*t2956;
  t2963 = t2960 + t2962;
  t2965 = -3.367757e-6*t2963;
  t2970 = t2968 + t2961;
  t2972 = -0.038575000014*t2970;
  t2982 = t2948 + t2957 + t2965 + t2972;
  t3268 = t3182 + t2962;
  t3315 = t3159*t3292;
  t3316 = t3148*t3309;
  t3318 = t3315 + t3316;
  t3261 = t3216 + t2961;
  t3324 = t3100*t3292;
  t3327 = t3097*t3309;
  t3332 = t3324 + t3327;
  t3257 = -1.000000000016*t2956;
  t3259 = 1. + t3257;
  t3337 = t3022*t3292;
  t3340 = t3013*t3309;
  t3341 = t3337 + t3340;
  t3244 = t3188 + t3063;
  t3220 = -1.000000000049*t2956;
  t3235 = 1. + t3220;
  t3218 = t3216 + t3049;
  t3197 = -6.5e-11*t2956;
  t3202 = 1. + t3197;
  t3190 = t3188 + t3120;
  t3186 = t3182 + t3114;
  t3295 = t2934*t3292;
  t3312 = t2908*t3309;
  t3320 = t3129*t3318;
  t3335 = t3078*t3332;
  t3342 = t2982*t3341;
  t3343 = t3268*t3318;
  t3346 = t3261*t3332;
  t3348 = t3259*t3341;
  t3352 = t3343 + t3346 + t3348;
  t3353 = -0.80315*t3352;
  t3354 = t3244*t3318;
  t3355 = t3235*t3332;
  t3357 = t3218*t3341;
  t3363 = t3354 + t3355 + t3357;
  t3368 = -0.038576*t3363;
  t3370 = t3202*t3318;
  t3372 = t3190*t3332;
  t3374 = t3186*t3341;
  t3375 = t3370 + t3372 + t3374;
  t3377 = -0.148715*t3375;
  t3415 = 2.8e-11*t2835;
  t3427 = 7.e-6*t2802;
  t3436 = 4.e-6*t2802;
  t3484 = t2856*t503*t315;
  t3485 = -1.*t503*t2860*t125;
  t3486 = t3484 + t3485;
  t3404 = -7.e-6*t2802;
  t3537 = -2.8e-11*t2835;
  t3460 = -4.e-6*t2802;
  t3495 = t3427 + t2892;
  t3497 = t3495*t101;
  t3499 = -6.5e-11*t2835*t3292;
  t3501 = t3436 + t2848;
  t3504 = t3501*t3486;
  t3505 = t3497 + t3499 + t3504;
  t3520 = -1.000000000049*t2835*t101;
  t3521 = t3404 + t2892;
  t3523 = t3521*t3292;
  t3539 = t2812 + t3537;
  t3545 = t3539*t3486;
  t3546 = t3520 + t3523 + t3545;
  t3556 = t2802 + t3537;
  t3557 = t3556*t101;
  t3565 = t3460 + t2848;
  t3572 = t3565*t3292;
  t3573 = -1.000000000016*t2835*t3486;
  t3574 = t3557 + t3572 + t3573;
  t3652 = 2.8e-11*t2961;
  t3679 = t3000*t101;
  t3685 = t3013*t3292;
  t3689 = t3022*t3486;
  t3696 = t3679 + t3685 + t3689;
  t3723 = t3090*t101;
  t3725 = t3097*t3292;
  t3739 = t3100*t3486;
  t3750 = t3723 + t3725 + t3739;
  t3668 = -4.e-6*t2949;
  t3800 = t3133*t101;
  t3803 = t3148*t3292;
  t3805 = t3159*t3486;
  t3806 = t3800 + t3803 + t3805;
  t3820 = -2.8e-11*t2961;
  t3711 = -7.e-6*t2949;
  t3779 = 4.e-6*t2949;
  t3758 = 7.e-6*t2949;
  t2799 = 1.5843479999999999e-12*var1[16];
  t2826 = -0.03874900000889869*t2814;
  t2843 = t2832 + t2840;
  t2844 = -0.281211000004*t2843;
  t2849 = t2846 + t2848;
  t2851 = -1.8134809999999998e-6*t2849;
  t2852 = t2799 + t2826 + t2844 + t2851;
  t3892 = -1.*t2860*t1523;
  t3896 = t2856*t1516;
  t3897 = t3892 + t3896;
  t3899 = t2856*t1523;
  t3901 = t2860*t1516;
  t3905 = t3899 + t3901;
  t3907 = -1.*t1508*t503*t3000;
  t3908 = t3013*t3897;
  t3909 = t3022*t3905;
  t3911 = t3907 + t3908 + t3909;
  t3918 = -1.*t3090*t1508*t503;
  t3920 = t3097*t3897;
  t3922 = t3100*t3905;
  t3924 = t3918 + t3920 + t3922;
  t3931 = -1.*t1508*t503*t3133;
  t3933 = t3148*t3897;
  t3934 = t3159*t3905;
  t3938 = t3931 + t3933 + t3934;
  t4000 = -1.*t503*t315*t2860*t1504;
  t4001 = -1.*t2856*t503*t1504*t125;
  t4017 = t4000 + t4001;
  t4025 = t2856*t503*t315*t1504;
  t4026 = -1.*t503*t2860*t1504*t125;
  t4027 = t4025 + t4026;
  t4035 = t3000*t1504*t101;
  t4037 = t3013*t4017;
  t4038 = t3022*t4027;
  t4039 = t4035 + t4037 + t4038;
  t4042 = t3090*t1504*t101;
  t4044 = t3097*t4017;
  t4045 = t3100*t4027;
  t4049 = t4042 + t4044 + t4045;
  t4053 = t3133*t1504*t101;
  t4062 = t3148*t4017;
  t4078 = t3159*t4027;
  t4080 = t4053 + t4062 + t4078;
  t4144 = t2860*t1789;
  t4148 = t2856*t1804;
  t4151 = t4144 + t4148;
  t4159 = t2856*t1789;
  t4176 = -1.*t2860*t1804;
  t4186 = t4159 + t4176;
  t4193 = t3159*t4151;
  t4194 = t3148*t4186;
  t4196 = t4193 + t4194;
  t4198 = t3100*t4151;
  t4206 = t3097*t4186;
  t4208 = t4198 + t4206;
  t4222 = t3022*t4151;
  t4224 = t3013*t4186;
  t4232 = t4222 + t4224;
  t3380 = -0.15121*t2856;
  t3381 = t3380 + t2861;
  t3391 = 0.15121*t2856;
  t3395 = t3391 + t2861;
  t4283 = -1.*t2860*t1912;
  t4284 = t4283 + t4148;
  t4293 = -1.*t2856*t1912;
  t4294 = t4293 + t4176;
  t4297 = t3159*t4284;
  t4302 = t3148*t4294;
  t4307 = t4297 + t4302;
  t4311 = t3100*t4284;
  t4317 = t3097*t4294;
  t4318 = t4311 + t4317;
  t4328 = t3022*t4284;
  t4330 = t3013*t4294;
  t4333 = t4328 + t4330;
  t3405 = t3404 + t2918;
  t3409 = -1.8134809999999998e-6*t3405;
  t3418 = t2812 + t3415;
  t3420 = -0.281211000004*t3418;
  t3421 = -0.03874900000889869*t2835;
  t3422 = 1.5843479999999999e-12 + t3409 + t3420 + t3421;
  t3428 = t3427 + t2918;
  t3432 = -0.038749000006999997*t3428;
  t3439 = t3436 + t2904;
  t3441 = -0.281211000004*t3439;
  t3442 = -1.1787626499999999e-16*t2835;
  t3445 = 3.9608699999999997e-7 + t3432 + t3441 + t3442;
  t3455 = t2802 + t3415;
  t3457 = -0.038749000006999997*t3455;
  t3461 = t3460 + t2904;
  t3462 = -1.8134809999999998e-6*t3461;
  t3463 = -0.2812110000084994*t2835;
  t3470 = -2.7726089999999997e-12 + t3457 + t3462 + t3463;
  t4384 = t2856*t1912;
  t4385 = t2860*t1804;
  t4393 = t4384 + t4385;
  t4397 = -1.*t503*t3495*t1504;
  t4398 = -6.5e-11*t2835*t4284;
  t4400 = t3501*t4393;
  t4405 = t4397 + t4398 + t4400;
  t4410 = 1.000000000049*t503*t2835*t1504;
  t4411 = t3521*t4284;
  t4412 = t3539*t4393;
  t4414 = t4410 + t4411 + t4412;
  t4427 = -1.*t503*t3556*t1504;
  t4429 = t3565*t4284;
  t4432 = -1.000000000016*t2835*t4393;
  t4439 = t4427 + t4429 + t4432;
  t3654 = t2949 + t3652;
  t3665 = -0.038575000014*t3654;
  t3670 = t3668 + t3120;
  t3671 = -3.367757e-6*t3670;
  t3672 = -0.5031510000160505*t2961;
  t3675 = -1.9784030000000015e-12 + t3665 + t3671 + t3672;
  t3713 = t3711 + t2962;
  t3714 = -3.367757e-6*t3713;
  t3716 = t2953 + t3652;
  t3718 = -0.5031510000080001*t3716;
  t3719 = -0.03857500001589017*t2961;
  t3722 = 1.1305160000000008e-12 + t3714 + t3718 + t3719;
  t3765 = t3758 + t2962;
  t3768 = -0.038575000014*t3765;
  t3783 = t3779 + t3120;
  t3787 = -0.5031510000080001*t3783;
  t3794 = -2.18904205e-16*t2961;
  t3799 = 2.826290000000002e-7 + t3768 + t3787 + t3794;
  t4489 = -1.*t503*t3000*t1504;
  t4491 = t3013*t4284;
  t4494 = t3022*t4393;
  t4504 = t4489 + t4491 + t4494;
  t3822 = t2949 + t3820;
  t4507 = -1.*t3090*t503*t1504;
  t4508 = t3097*t4284;
  t4510 = t3100*t4393;
  t4514 = t4507 + t4508 + t4510;
  t3827 = t3668 + t3063;
  t4518 = -1.*t503*t3133*t1504;
  t4519 = t3148*t4284;
  t4522 = t3159*t4393;
  t4523 = t4518 + t4519 + t4522;
  t3837 = t2953 + t3820;
  t3843 = t3711 + t3114;
  t3859 = t3779 + t3063;
  t3862 = t3758 + t3114;
  t4658 = t1508*t503*t315*t2860;
  t4659 = t2856*t1508*t503*t125;
  t4664 = t4658 + t4659;
  t4669 = -1.*t2856*t1508*t503*t315;
  t4671 = t1508*t503*t2860*t125;
  t4678 = t4669 + t4671;
  t4682 = -1.*t1508*t3000*t101;
  t4689 = t3013*t4664;
  t4693 = t3022*t4678;
  t4696 = t4682 + t4689 + t4693;
  t4706 = -1.*t3090*t1508*t101;
  t4708 = t3097*t4664;
  t4710 = t3100*t4678;
  t4711 = t4706 + t4708 + t4710;
  t4718 = -1.*t1508*t3133*t101;
  t4719 = t3148*t4664;
  t4723 = t3159*t4678;
  t4726 = t4718 + t4719 + t4723;
  t4776 = t2860*t1523;
  t4779 = t2856*t2379;
  t4780 = t4776 + t4779;
  t4797 = -1.*t2860*t2379;
  t4799 = t3899 + t4797;
  t4810 = t3159*t4780;
  t4812 = t3148*t4799;
  t4814 = t4810 + t4812;
  t4831 = t3100*t4780;
  t4835 = t3097*t4799;
  t4837 = t4831 + t4835;
  t4845 = t3022*t4780;
  t4850 = t3013*t4799;
  t4851 = t4845 + t4850;
  t4905 = -1.*t2860*t2480;
  t4906 = t4905 + t4779;
  t4910 = -1.*t2856*t2480;
  t4911 = t4910 + t4797;
  t4915 = t3159*t4906;
  t4919 = t3148*t4911;
  t4920 = t4915 + t4919;
  t4924 = t3100*t4906;
  t4935 = t3097*t4911;
  t4937 = t4924 + t4935;
  t4948 = t3022*t4906;
  t4951 = t3013*t4911;
  t4953 = t4948 + t4951;
  t5034 = t2856*t2480;
  t5038 = t2860*t2379;
  t5039 = t5034 + t5038;
  t5059 = t1508*t503*t3495;
  t5062 = -6.5e-11*t2835*t4906;
  t5066 = t3501*t5039;
  t5067 = t5059 + t5062 + t5066;
  t5074 = -1.000000000049*t1508*t503*t2835;
  t5075 = t3521*t4906;
  t5076 = t3539*t5039;
  t5081 = t5074 + t5075 + t5076;
  t5087 = t1508*t503*t3556;
  t5096 = t3565*t4906;
  t5099 = -1.000000000016*t2835*t5039;
  t5101 = t5087 + t5096 + t5099;
  t5165 = t1508*t503*t3000;
  t5169 = t3013*t4906;
  t5170 = t3022*t5039;
  t5174 = t5165 + t5169 + t5170;
  t5182 = t3090*t1508*t503;
  t5184 = t3097*t4906;
  t5186 = t3100*t5039;
  t5191 = t5182 + t5184 + t5186;
  t5196 = t1508*t503*t3133;
  t5200 = t3148*t4906;
  t5201 = t3159*t5039;
  t5203 = t5196 + t5200 + t5201;
  p_output1[0]=1.;
  p_output1[1]=t101*t125*t274 - 1.*t101*t315*t345 + t423*t453 + t478*t486 + t503*t525 + t559*t595 + t610*t616 + t629*t648 - 0.03875*(t590*t610 + t577*t629 + 4.e-6*t559*t651) + 0.14871*(4.e-6*t590*t610 + 4.e-6*t629*t651 + t559*t657) + 0.80321*(-4.e-6*t559*t590 - 1.*t590*t629 + t610*t740);
  p_output1[2]=t1040 - 1.*t274*t315*t503 - 1.*t125*t345*t503 + t813 + t874 + t896 + t914 + t934 + t961 + t992;
  p_output1[3]=t1040 - 1.*t1058*t125*t503 + t1080*t315*t503 + t813 + t874 + t896 + t914 + t934 + t961 + t992;
  p_output1[4]=t101*t1113 + t1144*t1163 + t1193*t595 + t1221*t616 + t1243*t648 - 0.03875*(t1243*t577 + t1221*t590 + 4.e-6*t1193*t651) + 0.14871*(4.e-6*t1221*t590 + 4.e-6*t1243*t651 + t1193*t657) + 0.80321*(-4.e-6*t1193*t590 - 1.*t1243*t590 + t1221*t740) + t1129*t858;
  p_output1[5]=t1366*t1370 + t1391*t1411 + t1418*t1425 - 0.03875*(t1418*t577 - 1.*t1366*t590 - 4.e-6*t1391*t590) + 0.14871*(4.e-6*t1418*t577 - 4.e-6*t1366*t590 - 1.6e-11*t1391*t590) + 0.80321*(-1.*t1366*t577 - 4.e-6*t1391*t577 - 1.000000000016*t1418*t590);
  p_output1[6]=1.;
  p_output1[7]=t1516*t274 + t1523*t345 + t1541*t453 + t1554*t486 - 1.*t1508*t503*t525 + t1572*t595 + t1587*t616 + t1609*t648 - 0.03875*(t1609*t577 + t1587*t590 + 4.e-6*t1572*t651) + 0.14871*(4.e-6*t1587*t590 + 4.e-6*t1609*t651 + t1572*t657) + 0.80321*(-4.e-6*t1572*t590 - 1.*t1609*t590 + t1587*t740);
  p_output1[8]=t1661*t453 + t1678*t486 - 1.*t125*t1504*t274*t503 + t1504*t315*t345*t503 + t101*t1504*t525 + t1697*t595 + t1713*t616 + t1730*t648 - 0.03875*(t1730*t577 + t1713*t590 + 4.e-6*t1697*t651) + 0.14871*(4.e-6*t1713*t590 + 4.e-6*t1730*t651 + t1697*t657) + 0.80321*(-4.e-6*t1697*t590 - 1.*t1730*t590 + t1713*t740);
  p_output1[9]=t1789*t274 + t1804*t345 + t1827*t453 + t1840*t486 + t1852*t595 + t1863*t616 + t1870*t648 - 0.03875*(t1870*t577 + t1863*t590 + 4.e-6*t1852*t651) + 0.14871*(4.e-6*t1863*t590 + 4.e-6*t1870*t651 + t1852*t657) + 0.80321*(-4.e-6*t1852*t590 - 1.*t1870*t590 + t1863*t740);
  p_output1[10]=t1058*t1804 + t1080*t1912 + t1917*t453 + t1920*t486 + t1934*t595 + t1938*t616 + t1945*t648 - 0.03875*(t1945*t577 + t1938*t590 + 4.e-6*t1934*t651) + 0.14871*(4.e-6*t1938*t590 + 4.e-6*t1945*t651 + t1934*t657) + 0.80321*(-4.e-6*t1934*t590 - 1.*t1945*t590 + t1938*t740);
  p_output1[11]=t1129*t1920 + t1163*t2027 - 1.*t1113*t1504*t503 + t2036*t595 + t2048*t616 + t2059*t648 - 0.03875*(t2059*t577 + t2048*t590 + 4.e-6*t2036*t651) + 0.14871*(4.e-6*t2048*t590 + 4.e-6*t2059*t651 + t2036*t657) + 0.80321*(-4.e-6*t2036*t590 - 1.*t2059*t590 + t2048*t740);
  p_output1[12]=t1370*t2116 + t1411*t2128 + t1425*t2137 - 0.03875*(t2161 + t2162 + t2137*t577) + 0.14871*(4.e-6*t2137*t577 - 4.e-6*t2116*t590 - 1.6e-11*t2128*t590) + 0.80321*(-1.*t2116*t577 - 4.e-6*t2128*t577 - 1.000000000016*t2137*t590);
  p_output1[13]=1.;
  p_output1[14]=t1804*t274 + t1912*t345 + t1920*t453 + t2027*t486 - 1.*t1504*t503*t525 + t2128*t595 + t2137*t616 + t2116*t648 - 0.03875*(t2116*t577 + t2137*t590 + 4.e-6*t2128*t651) + 0.14871*(4.e-6*t2137*t590 + 4.e-6*t2116*t651 + t2128*t657) + 0.80321*(t2161 + t2162 + t2137*t740);
  p_output1[15]=t2260*t453 + t2275*t486 + t125*t1508*t274*t503 - 1.*t1508*t315*t345*t503 - 1.*t101*t1508*t525 + t2295*t595 + t2306*t616 + t2313*t648 - 0.03875*(t2313*t577 + t2306*t590 + 4.e-6*t2295*t651) + 0.14871*(4.e-6*t2306*t590 + 4.e-6*t2313*t651 + t2295*t657) + 0.80321*(-4.e-6*t2295*t590 - 1.*t2313*t590 + t2306*t740);
  p_output1[16]=t1523*t274 + t2379*t345 + t2389*t453 + t2400*t486 + t2409*t595 + t2415*t616 + t2421*t648 - 0.03875*(t2421*t577 + t2415*t590 + 4.e-6*t2409*t651) + 0.14871*(4.e-6*t2415*t590 + 4.e-6*t2421*t651 + t2409*t657) + 0.80321*(-4.e-6*t2409*t590 - 1.*t2421*t590 + t2415*t740);
  p_output1[17]=t1058*t2379 + t1080*t2480 + t2485*t453 + t2506*t486 + t2518*t595 + t2531*t616 + t2551*t648 - 0.03875*(t2551*t577 + t2531*t590 + 4.e-6*t2518*t651) + 0.14871*(4.e-6*t2531*t590 + 4.e-6*t2551*t651 + t2518*t657) + 0.80321*(-4.e-6*t2518*t590 - 1.*t2551*t590 + t2531*t740);
  p_output1[18]=t1129*t2506 + t1163*t2618 + t1113*t1508*t503 + t2650*t595 + t2663*t616 + t2674*t648 - 0.03875*(t2674*t577 + t2663*t590 + 4.e-6*t2650*t651) + 0.14871*(4.e-6*t2663*t590 + 4.e-6*t2674*t651 + t2650*t657) + 0.80321*(-4.e-6*t2650*t590 - 1.*t2674*t590 + t2663*t740);
  p_output1[19]=t1370*t2743 + t1411*t2749 + t1425*t2756 - 0.03875*(t2756*t577 - 1.*t2743*t590 - 4.e-6*t2749*t590) + 0.14871*(4.e-6*t2756*t577 - 4.e-6*t2743*t590 - 1.6e-11*t2749*t590) + 0.80321*(-1.*t2743*t577 - 4.e-6*t2749*t577 - 1.000000000016*t2756*t590);
  p_output1[20]=1.;
  p_output1[21]=t101*t125*t2873 + t2908*t2912 + t2934*t2945 + t2982*t3027 + t3078*t3107 - 1.*t101*t2863*t315 + t3129*t3161 - 0.148715*(t3027*t3186 + t3107*t3190 + t3161*t3202) - 0.038576*(t3027*t3218 + t3107*t3235 + t3161*t3244) - 0.80315*(t3027*t3259 + t3107*t3261 + t3161*t3268) + t2852*t503;
  p_output1[22]=t3295 + t3312 + t3320 + t3335 + t3342 + t3353 + t3368 + t3377 - 1.*t125*t2863*t503 - 1.*t2873*t315*t503;
  p_output1[23]=t3295 + t3312 + t3320 + t3335 + t3342 + t3353 + t3368 + t3377 + t315*t3381*t503 - 1.*t125*t3395*t503;
  p_output1[24]=t101*t3422 + t3292*t3445 + t3470*t3486 + t3129*t3505 + t3078*t3546 + t2982*t3574 - 0.148715*(t3202*t3505 + t3190*t3546 + t3186*t3574) - 0.038576*(t3244*t3505 + t3235*t3546 + t3218*t3574) - 0.80315*(t3268*t3505 + t3261*t3546 + t3259*t3574);
  p_output1[25]=t3675*t3696 + t3722*t3750 + t3799*t3806 - 0.80315*(-1.000000000016*t2961*t3696 + t3750*t3822 + t3806*t3827) - 0.038576*(-1.000000000049*t2961*t3750 + t3696*t3837 + t3806*t3843) - 0.148715*(-6.5e-11*t2961*t3806 + t3696*t3859 + t3750*t3862);
  p_output1[26]=1.;
  p_output1[27]=t1523*t2863 + t1516*t2873 + t2908*t3897 + t2934*t3905 + t2982*t3911 + t3078*t3924 + t3129*t3938 - 0.148715*(t3186*t3911 + t3190*t3924 + t3202*t3938) - 0.038576*(t3218*t3911 + t3235*t3924 + t3244*t3938) - 0.80315*(t3259*t3911 + t3261*t3924 + t3268*t3938) - 1.*t1508*t2852*t503;
  p_output1[28]=t101*t1504*t2852 + t2908*t4017 + t2934*t4027 + t2982*t4039 + t3078*t4049 + t3129*t4080 - 0.148715*(t3186*t4039 + t3190*t4049 + t3202*t4080) - 0.038576*(t3218*t4039 + t3235*t4049 + t3244*t4080) - 0.80315*(t3259*t4039 + t3261*t4049 + t3268*t4080) - 1.*t125*t1504*t2873*t503 + t1504*t2863*t315*t503;
  p_output1[29]=t1804*t2863 + t1789*t2873 + t2934*t4151 + t2908*t4186 + t3129*t4196 + t3078*t4208 + t2982*t4232 - 0.148715*(t3202*t4196 + t3190*t4208 + t3186*t4232) - 0.038576*(t3244*t4196 + t3235*t4208 + t3218*t4232) - 0.80315*(t3268*t4196 + t3261*t4208 + t3259*t4232);
  p_output1[30]=t1912*t3381 + t1804*t3395 + t2934*t4284 + t2908*t4294 + t3129*t4307 + t3078*t4318 + t2982*t4333 - 0.148715*(t3202*t4307 + t3190*t4318 + t3186*t4333) - 0.038576*(t3244*t4307 + t3235*t4318 + t3218*t4333) - 0.80315*(t3268*t4307 + t3261*t4318 + t3259*t4333);
  p_output1[31]=t3445*t4284 + t3470*t4393 + t3129*t4405 + t3078*t4414 + t2982*t4439 - 0.148715*(t3202*t4405 + t3190*t4414 + t3186*t4439) - 0.038576*(t3244*t4405 + t3235*t4414 + t3218*t4439) - 0.80315*(t3268*t4405 + t3261*t4414 + t3259*t4439) - 1.*t1504*t3422*t503;
  p_output1[32]=t3675*t4504 + t3722*t4514 + t3799*t4523 - 0.148715*(t3859*t4504 + t3862*t4514 - 6.5e-11*t2961*t4523) - 0.80315*(-1.000000000016*t2961*t4504 + t3822*t4514 + t3827*t4523) - 0.038576*(t3837*t4504 - 1.000000000049*t2961*t4514 + t3843*t4523);
  p_output1[33]=1.;
  p_output1[34]=t1912*t2863 + t1804*t2873 + t2908*t4284 + t2934*t4393 + t2982*t4504 + t3078*t4514 + t3129*t4523 - 0.148715*(t3186*t4504 + t3190*t4514 + t3202*t4523) - 0.038576*(t3218*t4504 + t3235*t4514 + t3244*t4523) - 0.80315*(t3259*t4504 + t3261*t4514 + t3268*t4523) - 1.*t1504*t2852*t503;
  p_output1[35]=-1.*t101*t1508*t2852 + t2908*t4664 + t2934*t4678 + t2982*t4696 + t3078*t4711 + t3129*t4726 - 0.148715*(t3186*t4696 + t3190*t4711 + t3202*t4726) - 0.038576*(t3218*t4696 + t3235*t4711 + t3244*t4726) - 0.80315*(t3259*t4696 + t3261*t4711 + t3268*t4726) + t125*t1508*t2873*t503 - 1.*t1508*t2863*t315*t503;
  p_output1[36]=t2379*t2863 + t1523*t2873 + t2934*t4780 + t2908*t4799 + t3129*t4814 + t3078*t4837 + t2982*t4851 - 0.148715*(t3202*t4814 + t3190*t4837 + t3186*t4851) - 0.038576*(t3244*t4814 + t3235*t4837 + t3218*t4851) - 0.80315*(t3268*t4814 + t3261*t4837 + t3259*t4851);
  p_output1[37]=t2480*t3381 + t2379*t3395 + t2934*t4906 + t2908*t4911 + t3129*t4920 + t3078*t4937 + t2982*t4953 - 0.148715*(t3202*t4920 + t3190*t4937 + t3186*t4953) - 0.038576*(t3244*t4920 + t3235*t4937 + t3218*t4953) - 0.80315*(t3268*t4920 + t3261*t4937 + t3259*t4953);
  p_output1[38]=t3445*t4906 + t1508*t3422*t503 + t3470*t5039 + t3129*t5067 + t3078*t5081 + t2982*t5101 - 0.148715*(t3202*t5067 + t3190*t5081 + t3186*t5101) - 0.038576*(t3244*t5067 + t3235*t5081 + t3218*t5101) - 0.80315*(t3268*t5067 + t3261*t5081 + t3259*t5101);
  p_output1[39]=t3675*t5174 + t3722*t5191 + t3799*t5203 - 0.148715*(t3859*t5174 + t3862*t5191 - 6.5e-11*t2961*t5203) - 0.80315*(-1.000000000016*t2961*t5174 + t3822*t5191 + t3827*t5203) - 0.038576*(t3837*t5174 - 1.000000000049*t2961*t5191 + t3843*t5203);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 40, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "J_output_boundary_DiagonalStance1.hh"

namespace DiagonalStance1
{

void J_output_boundary_DiagonalStance1_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
