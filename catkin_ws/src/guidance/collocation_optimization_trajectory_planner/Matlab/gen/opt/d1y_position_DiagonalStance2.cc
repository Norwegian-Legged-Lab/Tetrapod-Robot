/*
 * Automatically Generated from Mathematica.
 * Sun 14 Nov 2021 17:30:54 GMT+01:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4,const double *var5,const double *var6,const double *var7)
{
  double t82;
  double t85;
  double t103;
  double t125;
  double t136;
  double t142;
  double t153;
  double t156;
  double t191;
  double t192;
  double t258;
  double t268;
  double t269;
  double t271;
  double t305;
  double t310;
  double t356;
  double t370;
  double t376;
  double t384;
  double t387;
  double t397;
  double t402;
  double t421;
  double t498;
  double t619;
  double t513;
  double t529;
  double t652;
  double t824;
  double t431;
  double t576;
  double t708;
  double t711;
  double t757;
  double t759;
  double t771;
  double t828;
  double t844;
  double t892;
  double t907;
  double t986;
  double t997;
  double t1017;
  double t1059;
  double t1119;
  double t1121;
  double t1130;
  double t1174;
  double t1192;
  double t1194;
  double t1198;
  double t1209;
  double t1188;
  double t1464;
  double t1476;
  double t1446;
  double t1449;
  double t1485;
  double t1494;
  double t1495;
  double t1499;
  double t1541;
  double t1554;
  double t1583;
  double t1615;
  double t1622;
  double t1631;
  double t1632;
  double t1633;
  double t1634;
  double t1639;
  double t1790;
  double t1796;
  double t1822;
  double t422;
  double t1099;
  double t1101;
  double t1107;
  double t1110;
  double t1118;
  double t1871;
  double t1873;
  double t1876;
  double t815;
  double t871;
  double t899;
  double t948;
  double t984;
  double t1183;
  double t1190;
  double t1881;
  double t1894;
  double t1910;
  double t1914;
  double t1918;
  double t1234;
  double t1235;
  double t1945;
  double t1947;
  double t1977;
  double t1288;
  double t1289;
  double t2045;
  double t1843;
  double t1845;
  double t1847;
  double t1848;
  double t1855;
  double t1856;
  double t1859;
  double t1865;
  double t1879;
  double t1907;
  double t1925;
  double t1983;
  double t1986;
  double t1991;
  double t1992;
  double t1997;
  double t2001;
  double t2018;
  double t2019;
  double t2020;
  double t2021;
  double t2022;
  double t2024;
  double t2027;
  double t2028;
  double t2029;
  double t2033;
  double t1832;
  double t1833;
  double t1804;
  double t1827;
  double t2170;
  double t2173;
  double t2178;
  double t2185;
  double t2187;
  double t2188;
  double t2190;
  double t2191;
  double t2192;
  double t2197;
  double t2206;
  double t2207;
  double t2210;
  double t2212;
  double t2217;
  double t2222;
  double t2225;
  double t2229;
  double t2126;
  double t2127;
  double t2129;
  double t2130;
  double t2134;
  double t2342;
  double t2360;
  double t2362;
  double t2370;
  double t2383;
  double t2385;
  double t2390;
  double t2405;
  double t2407;
  double t2413;
  double t2424;
  double t2429;
  double t2430;
  double t2433;
  double t2434;
  double t2446;
  double t2447;
  double t2448;
  double t2449;
  double t2501;
  double t2516;
  double t2526;
  double t2531;
  double t2541;
  double t2543;
  double t2551;
  double t2553;
  double t2554;
  double t2555;
  double t2557;
  double t2558;
  double t2560;
  double t2563;
  double t2566;
  double t2567;
  double t2569;
  double t2574;
  double t2575;
  double t2576;
  double t2577;
  double t2584;
  double t2594;
  double t2596;
  double t2599;
  double t2682;
  double t2683;
  double t2685;
  double t2691;
  double t2697;
  double t2698;
  double t2700;
  double t2702;
  double t2708;
  double t2714;
  double t2719;
  double t2724;
  double t2730;
  double t2735;
  double t2738;
  double t2745;
  double t2747;
  double t2752;
  double t2759;
  double t2765;
  double t2766;
  double t2066;
  double t2068;
  double t2087;
  double t2833;
  double t2834;
  double t2837;
  double t2841;
  double t2846;
  double t2852;
  double t2853;
  double t2860;
  double t2862;
  double t2866;
  double t2889;
  double t2892;
  double t2894;
  double t2900;
  double t2901;
  double t2902;
  double t416;
  double t423;
  double t456;
  double t459;
  double t479;
  double t731;
  double t739;
  double t751;
  double t2975;
  double t2980;
  double t2981;
  double t2998;
  double t3000;
  double t3002;
  double t3010;
  double t3012;
  double t3017;
  double t3018;
  double t3022;
  double t3023;
  double t3034;
  double t3037;
  double t1420;
  double t1428;
  double t1431;
  double t1507;
  double t1540;
  double t1589;
  double t1601;
  double t1606;
  double t3107;
  double t3109;
  double t3110;
  double t3113;
  double t3117;
  double t3126;
  double t3133;
  double t3140;
  double t3141;
  double t3142;
  double t3153;
  double t3246;
  double t3247;
  double t3248;
  double t3255;
  double t3258;
  double t3262;
  double t3271;
  double t3276;
  double t3277;
  double t3278;
  double t3283;
  double t3284;
  double t3285;
  double t3286;
  double t3304;
  double t3308;
  double t3309;
  double t3315;
  double t3377;
  double t3379;
  double t3380;
  double t3383;
  double t3387;
  double t3391;
  double t3400;
  double t3403;
  double t3411;
  double t3412;
  double t3413;
  double t3418;
  double t3420;
  double t3426;
  double t3438;
  double t3446;
  double t3448;
  double t3485;
  double t3489;
  double t3491;
  double t3504;
  double t3507;
  double t3521;
  double t3523;
  double t3529;
  double t3531;
  double t3532;
  double t3539;
  double t3542;
  double t3550;
  double t3555;
  double t3559;
  double t3561;
  double t3631;
  double t3636;
  double t3637;
  double t3641;
  double t3646;
  double t3652;
  double t3653;
  double t3656;
  double t3657;
  double t3667;
  double t3678;
  double t3682;
  double t3690;
  double t3748;
  double t3749;
  double t3750;
  double t3752;
  double t3754;
  double t3755;
  double t3756;
  double t3762;
  double t3763;
  double t3766;
  double t3767;
  double t3161;
  double t3889;
  double t3896;
  double t3918;
  double t3897;
  double t3977;
  double t4008;
  double t3998;
  double t4090;
  double t4091;
  double t4092;
  double t4106;
  double t3945;
  double t4002;
  double t4012;
  double t4013;
  double t3974;
  double t4045;
  double t4048;
  double t4049;
  double t4100;
  double t3911;
  double t4150;
  double t4206;
  double t4122;
  double t4018;
  double t4258;
  double t4027;
  double t4161;
  double t4302;
  double t4155;
  double t4157;
  double t4159;
  double t4162;
  double t4166;
  double t4171;
  double t4295;
  double t4221;
  double t4223;
  double t4248;
  double t4261;
  double t4270;
  double t4276;
  double t4321;
  double t4328;
  double t4330;
  double t4331;
  double t4332;
  double t4343;
  double t4111;
  double t4351;
  double t4129;
  double t4439;
  double t4445;
  double t4188;
  double t4378;
  double t4539;
  double t4566;
  double t4501;
  double t4620;
  double t4625;
  double t4551;
  double t4601;
  double t4557;
  double t4559;
  double t4561;
  double t4568;
  double t4572;
  double t4576;
  double t4577;
  double t4578;
  double t4585;
  double t4630;
  double t4640;
  double t4641;
  double t4652;
  double t4660;
  double t4676;
  double t4680;
  double t4688;
  double t4592;
  double t4718;
  double t4724;
  double t4726;
  double t4730;
  double t4734;
  double t4739;
  double t4740;
  double t4744;
  double t4507;
  double t4777;
  double t4701;
  double t4842;
  double t4853;
  double t4858;
  double t4917;
  double t4063;
  double t4099;
  double t4119;
  double t4121;
  double t4131;
  double t4144;
  double t4147;
  double t4968;
  double t4972;
  double t4988;
  double t4278;
  double t4293;
  double t4296;
  double t4300;
  double t4304;
  double t4309;
  double t4315;
  double t4181;
  double t4185;
  double t4189;
  double t4191;
  double t4209;
  double t4214;
  double t4215;
  double t4468;
  double t4992;
  double t5006;
  double t5010;
  double t4483;
  double t5018;
  double t5028;
  double t5035;
  double t4476;
  double t4478;
  double t5050;
  double t5051;
  double t5054;
  double t4361;
  double t4410;
  double t4412;
  double t4388;
  double t4425;
  double t4432;
  double t4460;
  double t4446;
  double t5163;
  double t4904;
  double t4906;
  double t4910;
  double t4914;
  double t4915;
  double t4921;
  double t4922;
  double t4924;
  double t4926;
  double t4929;
  double t4932;
  double t4938;
  double t4940;
  double t4943;
  double t4946;
  double t4947;
  double t4951;
  double t4990;
  double t5015;
  double t5037;
  double t5059;
  double t5062;
  double t5067;
  double t5069;
  double t5071;
  double t5074;
  double t5076;
  double t5083;
  double t5084;
  double t5092;
  double t5098;
  double t5100;
  double t5114;
  double t5121;
  double t5132;
  double t5138;
  double t4877;
  double t4883;
  double t4857;
  double t4871;
  double t5353;
  double t5355;
  double t5357;
  double t5373;
  double t5378;
  double t5384;
  double t5393;
  double t5399;
  double t5400;
  double t5401;
  double t5408;
  double t5414;
  double t5417;
  double t5419;
  double t5425;
  double t5431;
  double t5433;
  double t5448;
  double t5285;
  double t5294;
  double t5304;
  double t5305;
  double t5308;
  double t5315;
  double t5319;
  double t5685;
  double t5688;
  double t5697;
  double t5723;
  double t5735;
  double t5736;
  double t5772;
  double t5777;
  double t5781;
  double t5785;
  double t5821;
  double t5830;
  double t5859;
  double t5864;
  double t5891;
  double t5892;
  double t5898;
  double t5903;
  double t6022;
  double t6028;
  double t6034;
  double t6045;
  double t6076;
  double t6107;
  double t6112;
  double t6126;
  double t6165;
  double t6198;
  double t6212;
  double t6225;
  double t6235;
  double t6242;
  double t6306;
  double t6325;
  double t6334;
  double t6338;
  double t6426;
  double t6429;
  double t6437;
  double t6456;
  double t6462;
  double t6489;
  double t6501;
  double t6506;
  double t6526;
  double t6531;
  double t6532;
  double t6536;
  double t6547;
  double t6549;
  double t6550;
  double t5182;
  double t5185;
  double t5225;
  double t6637;
  double t6652;
  double t6675;
  double t6679;
  double t6701;
  double t6704;
  double t6706;
  double t6748;
  double t6750;
  double t6751;
  double t6759;
  double t6761;
  double t6762;
  double t3898;
  double t3902;
  double t3920;
  double t3925;
  double t3926;
  double t3929;
  double t3956;
  double t3970;
  double t3978;
  double t3983;
  double t3985;
  double t3986;
  double t4020;
  double t4024;
  double t4033;
  double t4035;
  double t4040;
  double t4043;
  double t6883;
  double t6899;
  double t6924;
  double t6949;
  double t6960;
  double t6992;
  double t7008;
  double t7046;
  double t7049;
  double t7050;
  double t7054;
  double t7064;
  double t7082;
  double t7083;
  double t7092;
  double t4502;
  double t4503;
  double t4512;
  double t4526;
  double t4527;
  double t4531;
  double t4595;
  double t4599;
  double t4604;
  double t4608;
  double t4612;
  double t4613;
  double t4692;
  double t4694;
  double t4709;
  double t4711;
  double t4715;
  double t4716;
  double t4753;
  double t7245;
  double t7248;
  double t7262;
  double t7265;
  double t7268;
  double t7271;
  double t7278;
  double t7283;
  double t4758;
  double t7296;
  double t7297;
  double t7300;
  double t7301;
  double t4766;
  double t4781;
  double t4810;
  double t4818;
  double t7654;
  double t7665;
  double t7673;
  double t7680;
  double t7681;
  double t7693;
  double t7711;
  double t7718;
  double t7727;
  double t7731;
  double t7749;
  double t7783;
  double t7815;
  double t7824;
  double t7836;
  double t7837;
  double t7840;
  double t7844;
  double t8032;
  double t8034;
  double t8036;
  double t8050;
  double t8062;
  double t8064;
  double t8082;
  double t8095;
  double t8120;
  double t8135;
  double t8142;
  double t8173;
  double t8177;
  double t8187;
  double t8355;
  double t8356;
  double t8393;
  double t8397;
  double t8402;
  double t8435;
  double t8436;
  double t8495;
  double t8505;
  double t8514;
  double t8524;
  double t8631;
  double t8665;
  double t8949;
  double t8951;
  double t8952;
  double t8958;
  double t8960;
  double t8963;
  double t8964;
  double t8974;
  double t8977;
  double t8978;
  double t8981;
  double t8990;
  double t8992;
  double t8993;
  double t9001;
  double t9314;
  double t9316;
  double t9345;
  double t9356;
  double t9364;
  double t9371;
  double t9374;
  double t9383;
  double t9385;
  double t9386;
  double t9387;
  double t9389;
  double t10109;
  double t10117;
  double t10127;
  double t10129;
  double t10130;
  double t10133;
  double t3243;
  double t3245;
  double t3494;
  double t3503;
  double t3375;
  double t3381;
  double t3807;
  double t3808;
  t82 = -1.*var5[0];
  t85 = t82 + var5[1];
  t103 = Power(t85,-5);
  t125 = -1. + var6[0];
  t136 = -1. + var7[0];
  t142 = 1/t136;
  t153 = -1.*var1[0];
  t156 = t153 + var1[1];
  t191 = t125*t142*t156;
  t192 = t82 + var1[0] + t191;
  t258 = Power(t192,4);
  t268 = Power(t85,-4);
  t269 = Power(t192,3);
  t271 = 1/t85;
  t305 = -1.*t271*t192;
  t310 = 1. + t305;
  t356 = Power(t85,-3);
  t370 = Power(t192,2);
  t376 = Power(t310,2);
  t384 = Power(t85,-2);
  t387 = Power(t310,3);
  t397 = Power(t310,4);
  t402 = Cos(var2[10]);
  t421 = Sin(var2[10]);
  t498 = Cos(var2[4]);
  t619 = Cos(var2[9]);
  t513 = Cos(var2[5]);
  t529 = Sin(var2[9]);
  t652 = Sin(var2[5]);
  t824 = Cos(var2[11]);
  t431 = Sin(var2[4]);
  t576 = -1.*t498*t513*t529;
  t708 = -1.*t619*t498*t652;
  t711 = t576 + t708;
  t757 = t619*t498*t513;
  t759 = -1.*t498*t529*t652;
  t771 = t757 + t759;
  t828 = -1.*t824;
  t844 = 1. + t828;
  t892 = -1. + t824;
  t907 = Sin(var2[11]);
  t986 = -1.*t421*t431;
  t997 = 4.e-6*t421*t711;
  t1017 = -1.*t402*t771;
  t1059 = t986 + t997 + t1017;
  t1119 = 4.e-6*t421*t431;
  t1121 = -1.6e-11*t421*t711;
  t1130 = 4.e-6*t402*t771;
  t1174 = t1119 + t1121 + t1130;
  t1192 = t402*t431;
  t1194 = -4.e-6*t402*t711;
  t1198 = -1.000000000016*t421*t771;
  t1209 = t1192 + t1194 + t1198;
  t1188 = -0.0398890000006382*t907;
  t1464 = -1.*t402;
  t1476 = 1. + t1464;
  t1446 = t421*t431;
  t1449 = -4.e-6*t421*t711;
  t1485 = -1.000000000016*t1476;
  t1494 = 1. + t1485;
  t1495 = t1494*t771;
  t1499 = t1446 + t1449 + t1495;
  t1541 = 4.e-6*t1476*t711;
  t1554 = -1.*t421*t771;
  t1583 = t1192 + t1541 + t1554;
  t1615 = 4.e-6*t1476*t431;
  t1622 = -1. + t402;
  t1631 = 1.6e-11*t1622;
  t1632 = 1. + t1631;
  t1633 = t1632*t711;
  t1634 = 4.e-6*t421*t771;
  t1639 = t1615 + t1633 + t1634;
  t1790 = -1.*t619;
  t1796 = 1. + t1790;
  t1822 = -0.15121*t529;
  t422 = -0.03874900000062*t421;
  t1099 = -1.26e-8*var2[11];
  t1101 = 2.552896e-18*t844;
  t1107 = -1.59556e-7*t892;
  t1110 = 2.012600000032e-6*t907;
  t1118 = t1099 + t1101 + t1107 + t1110;
  t1871 = -1.*t619*t498*t513;
  t1873 = t498*t529*t652;
  t1876 = t1871 + t1873;
  t815 = -5.04e-14*var2[11];
  t871 = -0.039889*t844;
  t899 = 6.38224e-13*t892;
  t948 = -0.503150000008*t907;
  t984 = t815 + t871 + t899 + t948;
  t1183 = 0.50315000001605*t844;
  t1190 = t1183 + t1188;
  t1881 = t1632*t1876;
  t1894 = t997 + t1881;
  t1910 = -1.*t421*t711;
  t1914 = 4.e-6*t1476*t1876;
  t1918 = t1910 + t1914;
  t1234 = -1.000000000016*t844;
  t1235 = 1. + t1234;
  t1945 = t1494*t711;
  t1947 = -4.e-6*t421*t1876;
  t1977 = t1945 + t1947;
  t1288 = 1.6e-11*t892;
  t1289 = 1. + t1288;
  t2045 = -0.15121*t619;
  t1843 = 0.281210000008499*t1476;
  t1845 = t1843 + t422;
  t1847 = t1845*t711;
  t1848 = -1.2484e-7*var2[10];
  t1855 = 2.479936e-18*t1476;
  t1856 = -1.54996e-7*t1622;
  t1859 = 1.124840000016e-6*t421;
  t1865 = t1848 + t1855 + t1856 + t1859;
  t1879 = t1865*t1876;
  t1907 = t1118*t1894;
  t1925 = t984*t1918;
  t1983 = t1190*t1977;
  t1986 = -4.e-6*t907*t1894;
  t1991 = t907*t1918;
  t1992 = t1235*t1977;
  t1997 = t1986 + t1991 + t1992;
  t2001 = 0.803147*t1997;
  t2018 = 4.e-6*t844*t1894;
  t2019 = t824*t1918;
  t2020 = -1.*t907*t1977;
  t2021 = t2018 + t2019 + t2020;
  t2022 = -0.041195*t2021;
  t2024 = t1289*t1894;
  t2027 = 4.e-6*t844*t1918;
  t2028 = 4.e-6*t907*t1977;
  t2029 = t2024 + t2027 + t2028;
  t2033 = -0.14871*t2029;
  t1832 = 0.15121*t1796;
  t1833 = t1832 + t1822;
  t1804 = -0.15121*t1796;
  t1827 = t1804 + t1822;
  t2170 = t513*t529*t431;
  t2173 = t619*t431*t652;
  t2178 = t2170 + t2173;
  t2185 = -1.*t619*t513*t431;
  t2187 = t529*t431*t652;
  t2188 = t2185 + t2187;
  t2190 = t498*t421;
  t2191 = -4.e-6*t421*t2178;
  t2192 = t1494*t2188;
  t2197 = t2190 + t2191 + t2192;
  t2206 = t402*t498;
  t2207 = 4.e-6*t1476*t2178;
  t2210 = -1.*t421*t2188;
  t2212 = t2206 + t2207 + t2210;
  t2217 = 4.e-6*t1476*t498;
  t2222 = t1632*t2178;
  t2225 = 4.e-6*t421*t2188;
  t2229 = t2217 + t2222 + t2225;
  t2126 = -4.9936e-13*var2[10];
  t2127 = -0.038749*t1476;
  t2129 = 6.19984e-13*t1622;
  t2130 = -0.281210000004*t421;
  t2134 = t2126 + t2127 + t2129 + t2130;
  t2342 = Sin(var2[3]);
  t2360 = -1.*t498*t513*t529*t2342;
  t2362 = -1.*t619*t498*t2342*t652;
  t2370 = t2360 + t2362;
  t2383 = t619*t498*t513*t2342;
  t2385 = -1.*t498*t529*t2342*t652;
  t2390 = t2383 + t2385;
  t2405 = t421*t2342*t431;
  t2407 = -4.e-6*t421*t2370;
  t2413 = t1494*t2390;
  t2424 = t2405 + t2407 + t2413;
  t2429 = t402*t2342*t431;
  t2430 = 4.e-6*t1476*t2370;
  t2433 = -1.*t421*t2390;
  t2434 = t2429 + t2430 + t2433;
  t2446 = 4.e-6*t1476*t2342*t431;
  t2447 = t1632*t2370;
  t2448 = 4.e-6*t421*t2390;
  t2449 = t2446 + t2447 + t2448;
  t2501 = Cos(var2[3]);
  t2516 = t2501*t513*t431;
  t2526 = -1.*t2342*t652;
  t2531 = t2516 + t2526;
  t2541 = -1.*t513*t2342;
  t2543 = -1.*t2501*t431*t652;
  t2551 = t2541 + t2543;
  t2553 = -1.*t529*t2531;
  t2554 = t619*t2551;
  t2555 = t2553 + t2554;
  t2557 = t619*t2531;
  t2558 = t529*t2551;
  t2560 = t2557 + t2558;
  t2563 = -1.*t2501*t498*t421;
  t2566 = -4.e-6*t421*t2555;
  t2567 = t1494*t2560;
  t2569 = t2563 + t2566 + t2567;
  t2574 = -1.*t402*t2501*t498;
  t2575 = 4.e-6*t1476*t2555;
  t2576 = -1.*t421*t2560;
  t2577 = t2574 + t2575 + t2576;
  t2584 = -4.e-6*t1476*t2501*t498;
  t2594 = t1632*t2555;
  t2596 = 4.e-6*t421*t2560;
  t2599 = t2584 + t2594 + t2596;
  t2682 = -1.*t513*t2342*t431;
  t2683 = -1.*t2501*t652;
  t2685 = t2682 + t2683;
  t2691 = t2501*t513;
  t2697 = -1.*t2342*t431*t652;
  t2698 = t2691 + t2697;
  t2700 = t529*t2685;
  t2702 = t619*t2698;
  t2708 = t2700 + t2702;
  t2714 = t619*t2685;
  t2719 = -1.*t529*t2698;
  t2724 = t2714 + t2719;
  t2730 = 4.e-6*t421*t2708;
  t2735 = t1632*t2724;
  t2738 = t2730 + t2735;
  t2745 = -1.*t421*t2708;
  t2747 = 4.e-6*t1476*t2724;
  t2752 = t2745 + t2747;
  t2759 = t1494*t2708;
  t2765 = -4.e-6*t421*t2724;
  t2766 = t2759 + t2765;
  t2066 = 0.15121*t529;
  t2068 = t2045 + t2066;
  t2087 = t2045 + t1822;
  t2833 = t513*t2342*t431;
  t2834 = t2501*t652;
  t2837 = t2833 + t2834;
  t2841 = -1.*t529*t2837;
  t2846 = t2841 + t2702;
  t2852 = -1.*t619*t2837;
  t2853 = t2852 + t2719;
  t2860 = 4.e-6*t421*t2846;
  t2862 = t1632*t2853;
  t2866 = t2860 + t2862;
  t2889 = -1.*t421*t2846;
  t2892 = 4.e-6*t1476*t2853;
  t2894 = t2889 + t2892;
  t2900 = t1494*t2846;
  t2901 = -4.e-6*t421*t2853;
  t2902 = t2900 + t2901;
  t416 = -0.281210000004*t402;
  t423 = -4.9936e-13 + t416 + t422;
  t456 = 1.124840000016e-6*t402;
  t459 = 1.5499600000248e-7*t421;
  t479 = -1.2484e-7 + t456 + t459;
  t731 = -0.03874900000062*t402;
  t739 = 0.281210000008499*t421;
  t751 = t731 + t739;
  t2975 = t619*t2837;
  t2980 = t529*t2698;
  t2981 = t2975 + t2980;
  t2998 = t498*t421*t2342;
  t3000 = -1.*t402*t2981;
  t3002 = t2998 + t2860 + t3000;
  t3010 = -4.e-6*t498*t421*t2342;
  t3012 = -1.6e-11*t421*t2846;
  t3017 = 4.e-6*t402*t2981;
  t3018 = t3010 + t3012 + t3017;
  t3022 = -1.*t402*t498*t2342;
  t3023 = -4.e-6*t402*t2846;
  t3034 = -1.000000000016*t421*t2981;
  t3037 = t3022 + t3023 + t3034;
  t1420 = -0.0398890000006382*t824;
  t1428 = 0.50315000001605*t907;
  t1431 = t1420 + t1428;
  t1507 = -0.503150000008*t824;
  t1540 = -5.04e-14 + t1507 + t1188;
  t1589 = 2.012600000032e-6*t824;
  t1601 = 1.59556000002553e-7*t907;
  t1606 = -1.26e-8 + t1589 + t1601;
  t3107 = -1.*t498*t421*t2342;
  t3109 = -4.e-6*t421*t2846;
  t3110 = t1494*t2981;
  t3113 = t3107 + t3109 + t3110;
  t3117 = 4.e-6*t1476*t2846;
  t3126 = -1.*t421*t2981;
  t3133 = t3022 + t3117 + t3126;
  t3140 = -4.e-6*t1476*t498*t2342;
  t3141 = t1632*t2846;
  t3142 = 4.e-6*t421*t2981;
  t3153 = t3140 + t3141 + t3142;
  t3246 = t2501*t498*t513*t529;
  t3247 = t619*t2501*t498*t652;
  t3248 = t3246 + t3247;
  t3255 = -1.*t619*t2501*t498*t513;
  t3258 = t2501*t498*t529*t652;
  t3262 = t3255 + t3258;
  t3271 = -1.*t2501*t421*t431;
  t3276 = -4.e-6*t421*t3248;
  t3277 = t1494*t3262;
  t3278 = t3271 + t3276 + t3277;
  t3283 = -1.*t402*t2501*t431;
  t3284 = 4.e-6*t1476*t3248;
  t3285 = -1.*t421*t3262;
  t3286 = t3283 + t3284 + t3285;
  t3304 = -4.e-6*t1476*t2501*t431;
  t3308 = t1632*t3248;
  t3309 = 4.e-6*t421*t3262;
  t3315 = t3304 + t3308 + t3309;
  t3377 = t513*t2342;
  t3379 = t2501*t431*t652;
  t3380 = t3377 + t3379;
  t3383 = t529*t2531;
  t3387 = t619*t3380;
  t3391 = t3383 + t3387;
  t3400 = -1.*t529*t3380;
  t3403 = t2557 + t3400;
  t3411 = 4.e-6*t421*t3391;
  t3412 = t1632*t3403;
  t3413 = t3411 + t3412;
  t3418 = -1.*t421*t3391;
  t3420 = 4.e-6*t1476*t3403;
  t3426 = t3418 + t3420;
  t3438 = t1494*t3391;
  t3446 = -4.e-6*t421*t3403;
  t3448 = t3438 + t3446;
  t3485 = -1.*t2501*t513*t431;
  t3489 = t2342*t652;
  t3491 = t3485 + t3489;
  t3504 = -1.*t529*t3491;
  t3507 = t3504 + t3387;
  t3521 = -1.*t619*t3491;
  t3523 = t3521 + t3400;
  t3529 = 4.e-6*t421*t3507;
  t3531 = t1632*t3523;
  t3532 = t3529 + t3531;
  t3539 = -1.*t421*t3507;
  t3542 = 4.e-6*t1476*t3523;
  t3550 = t3539 + t3542;
  t3555 = t1494*t3507;
  t3559 = -4.e-6*t421*t3523;
  t3561 = t3555 + t3559;
  t3631 = t619*t3491;
  t3636 = t529*t3380;
  t3637 = t3631 + t3636;
  t3641 = -1.*t402*t3637;
  t3646 = t2563 + t3529 + t3641;
  t3652 = 4.e-6*t2501*t498*t421;
  t3653 = -1.6e-11*t421*t3507;
  t3656 = 4.e-6*t402*t3637;
  t3657 = t3652 + t3653 + t3656;
  t3667 = t402*t2501*t498;
  t3678 = -4.e-6*t402*t3507;
  t3682 = -1.000000000016*t421*t3637;
  t3690 = t3667 + t3678 + t3682;
  t3748 = t2501*t498*t421;
  t3749 = -4.e-6*t421*t3507;
  t3750 = t1494*t3637;
  t3752 = t3748 + t3749 + t3750;
  t3754 = 4.e-6*t1476*t3507;
  t3755 = -1.*t421*t3637;
  t3756 = t3667 + t3754 + t3755;
  t3762 = 4.e-6*t1476*t2501*t498;
  t3763 = t1632*t3507;
  t3766 = 4.e-6*t421*t3637;
  t3767 = t3762 + t3763 + t3766;
  t3161 = t824*t3133;
  t3889 = Cos(var2[13]);
  t3896 = Sin(var2[13]);
  t3918 = 4.e-6*t3896;
  t3897 = -2.8e-11*t3896;
  t3977 = 7.e-6*t3896;
  t4008 = Cos(var2[12]);
  t3998 = Sin(var2[12]);
  t4090 = Cos(var2[14]);
  t4091 = -1.*t4090;
  t4092 = 1. + t4091;
  t4106 = Sin(var2[14]);
  t3945 = -7.e-6*t3889;
  t4002 = -1.*t498*t513*t3998;
  t4012 = -1.*t4008*t498*t652;
  t4013 = t4002 + t4012;
  t3974 = 4.e-6*t3889;
  t4045 = t4008*t498*t513;
  t4048 = -1.*t498*t3998*t652;
  t4049 = t4045 + t4048;
  t4100 = 4.e-6*t4092;
  t3911 = 7.e-6*t3889;
  t4150 = -4.e-6*t3896;
  t4206 = -2.8e-11*t4092;
  t4122 = 7.e-6*t4092;
  t4018 = -1.*t3889;
  t4258 = 2.8e-11*t3896;
  t4027 = -4.e-6*t3889;
  t4161 = -7.e-6*t3896;
  t4302 = -4.e-6*t4106;
  t4155 = t3945 + t4150;
  t4157 = t4155*t431;
  t4159 = -6.5e-11*t3896*t4013;
  t4162 = t3974 + t4161;
  t4166 = t4162*t4049;
  t4171 = t4157 + t4159 + t4166;
  t4295 = -1.*t4106;
  t4221 = -1.000000000049*t3896*t431;
  t4223 = t3911 + t4150;
  t4248 = t4223*t4013;
  t4261 = t3889 + t4258;
  t4270 = t4261*t4049;
  t4276 = t4221 + t4248 + t4270;
  t4321 = t4018 + t4258;
  t4328 = t4321*t431;
  t4330 = t4027 + t4161;
  t4331 = t4330*t4013;
  t4332 = -1.000000000016*t3896*t4049;
  t4343 = t4328 + t4331 + t4332;
  t4111 = -7.e-6*t4106;
  t4351 = -7.e-6*t4092;
  t4129 = 4.e-6*t4106;
  t4439 = -1. + t4090;
  t4445 = 4.e-6*t4439;
  t4188 = 7.e-6*t4106;
  t4378 = 2.8e-11*t4092;
  t4539 = 1. + t4018;
  t4566 = -7.e-6*t4539;
  t4501 = -2.8e-11*t4106;
  t4620 = -1. + t3889;
  t4625 = 4.e-6*t4620;
  t4551 = 2.8e-11*t4539;
  t4601 = 4.e-6*t4090;
  t4557 = -1.*t3896;
  t4559 = t4551 + t4557;
  t4561 = t4559*t431;
  t4568 = t4566 + t4150;
  t4572 = t4568*t4013;
  t4576 = -1.000000000016*t4539;
  t4577 = 1. + t4576;
  t4578 = t4577*t4049;
  t4585 = t4561 + t4572 + t4578;
  t4630 = t4625 + t4161;
  t4640 = t4630*t431;
  t4641 = -6.5e-11*t4539;
  t4652 = 1. + t4641;
  t4660 = t4652*t4013;
  t4676 = t4566 + t3918;
  t4680 = t4676*t4049;
  t4688 = t4640 + t4660 + t4680;
  t4592 = -7.e-6*t4090;
  t4718 = -1.000000000049*t4539;
  t4724 = 1. + t4718;
  t4726 = t4724*t431;
  t4730 = t4625 + t3977;
  t4734 = t4730*t4013;
  t4739 = t4551 + t3896;
  t4740 = t4739*t4049;
  t4744 = t4726 + t4734 + t4740;
  t4507 = -4.e-6*t4090;
  t4777 = 2.8e-11*t4106;
  t4701 = 7.e-6*t4090;
  t4842 = -1.*t4008;
  t4853 = 1. + t4842;
  t4858 = 0.15121*t3998;
  t4917 = 7.e-6*t4539;
  t4063 = -2.598649999999999e-7*var2[14];
  t4099 = -2.3905277499999995e-16*t4092;
  t4119 = t4100 + t4111;
  t4121 = -0.038922999986*t4119;
  t4131 = t4122 + t4129;
  t4144 = -0.503149000008*t4131;
  t4147 = t4063 + t4099 + t4121 + t4144;
  t4968 = -1.*t4008*t498*t513;
  t4972 = t498*t3998*t652;
  t4988 = t4968 + t4972;
  t4278 = 1.8190549999999993e-12*var2[14];
  t4293 = -0.5031490000160505*t4092;
  t4296 = t4206 + t4295;
  t4300 = -0.038922999986*t4296;
  t4304 = t4122 + t4302;
  t4309 = -3.6777349999999994e-6*t4304;
  t4315 = t4278 + t4293 + t4300 + t4309;
  t4181 = 1.0394599999999997e-12*var2[14];
  t4185 = -0.03892299998790722*t4092;
  t4189 = t4100 + t4188;
  t4191 = -3.6777349999999994e-6*t4189;
  t4209 = t4206 + t4106;
  t4214 = -0.503149000008*t4209;
  t4215 = t4181 + t4185 + t4191 + t4214;
  t4468 = t4445 + t4188;
  t4992 = t4676*t4013;
  t5006 = t4652*t4988;
  t5010 = t4992 + t5006;
  t4483 = t4378 + t4106;
  t5018 = t4577*t4013;
  t5028 = t4568*t4988;
  t5035 = t5018 + t5028;
  t4476 = -1.000000000049*t4092;
  t4478 = 1. + t4476;
  t5050 = t4739*t4013;
  t5051 = t4730*t4988;
  t5054 = t5050 + t5051;
  t4361 = t4351 + t4302;
  t4410 = -1.000000000016*t4092;
  t4412 = 1. + t4410;
  t4388 = t4378 + t4295;
  t4425 = -6.5e-11*t4092;
  t4432 = 1. + t4425;
  t4460 = t4351 + t4129;
  t4446 = t4445 + t4111;
  t5163 = 0.15121*t4008;
  t4904 = 1.0248489999999998e-12*var2[13];
  t4906 = -0.28120900000849935*t4539;
  t4910 = -2.8e-11*t4539;
  t4914 = t4910 + t4557;
  t4915 = -0.038748999993*t4914;
  t4921 = t4917 + t4150;
  t4922 = -2.123459e-6*t4921;
  t4924 = t4904 + t4906 + t4915 + t4922;
  t4926 = t4924*t4013;
  t4929 = -1.4640699999999997e-7*var2[13];
  t4932 = -1.38024835e-16*t4539;
  t4938 = 4.e-6*t4539;
  t4940 = t4938 + t4161;
  t4943 = -0.038748999993*t4940;
  t4946 = t4917 + t3918;
  t4947 = -0.281209000004*t4946;
  t4951 = t4929 + t4932 + t4943 + t4947;
  t4990 = t4951*t4988;
  t5015 = t4147*t5010;
  t5037 = t4315*t5035;
  t5059 = t4215*t5054;
  t5062 = t4468*t5010;
  t5067 = t4483*t5035;
  t5069 = t4478*t5054;
  t5071 = t5062 + t5067 + t5069;
  t5074 = -0.038924*t5071;
  t5076 = t4361*t5010;
  t5083 = t4412*t5035;
  t5084 = t4388*t5054;
  t5092 = t5076 + t5083 + t5084;
  t5098 = -0.80315*t5092;
  t5100 = t4432*t5010;
  t5114 = t4460*t5035;
  t5121 = t4446*t5054;
  t5132 = t5100 + t5114 + t5121;
  t5138 = 0.148705*t5132;
  t4877 = -0.15121*t4853;
  t4883 = t4877 + t4858;
  t4857 = 0.15121*t4853;
  t4871 = t4857 + t4858;
  t5353 = t513*t3998*t431;
  t5355 = t4008*t431*t652;
  t5357 = t5353 + t5355;
  t5373 = -1.*t4008*t513*t431;
  t5378 = t3998*t431*t652;
  t5384 = t5373 + t5378;
  t5393 = t498*t4559;
  t5399 = t4568*t5357;
  t5400 = t4577*t5384;
  t5401 = t5393 + t5399 + t5400;
  t5408 = t498*t4630;
  t5414 = t4652*t5357;
  t5417 = t4676*t5384;
  t5419 = t5408 + t5414 + t5417;
  t5425 = t4724*t498;
  t5431 = t4730*t5357;
  t5433 = t4739*t5384;
  t5448 = t5425 + t5431 + t5433;
  t5285 = 5.856279999999999e-13*var2[13];
  t5294 = -0.0387489999948987*t4539;
  t5304 = t4938 + t3977;
  t5305 = -2.123459e-6*t5304;
  t5308 = t4910 + t3896;
  t5315 = -0.281209000004*t5308;
  t5319 = t5285 + t5294 + t5305 + t5315;
  t5685 = -1.*t498*t513*t3998*t2342;
  t5688 = -1.*t4008*t498*t2342*t652;
  t5697 = t5685 + t5688;
  t5723 = t4008*t498*t513*t2342;
  t5735 = -1.*t498*t3998*t2342*t652;
  t5736 = t5723 + t5735;
  t5772 = t4559*t2342*t431;
  t5777 = t4568*t5697;
  t5781 = t4577*t5736;
  t5785 = t5772 + t5777 + t5781;
  t5821 = t4630*t2342*t431;
  t5830 = t4652*t5697;
  t5859 = t4676*t5736;
  t5864 = t5821 + t5830 + t5859;
  t5891 = t4724*t2342*t431;
  t5892 = t4730*t5697;
  t5898 = t4739*t5736;
  t5903 = t5891 + t5892 + t5898;
  t6022 = -1.*t3998*t2531;
  t6028 = t4008*t2551;
  t6034 = t6022 + t6028;
  t6045 = t4008*t2531;
  t6076 = t3998*t2551;
  t6107 = t6045 + t6076;
  t6112 = -1.*t2501*t498*t4559;
  t6126 = t4568*t6034;
  t6165 = t4577*t6107;
  t6198 = t6112 + t6126 + t6165;
  t6212 = -1.*t2501*t498*t4630;
  t6225 = t4652*t6034;
  t6235 = t4676*t6107;
  t6242 = t6212 + t6225 + t6235;
  t6306 = -1.*t4724*t2501*t498;
  t6325 = t4730*t6034;
  t6334 = t4739*t6107;
  t6338 = t6306 + t6325 + t6334;
  t6426 = t3998*t2685;
  t6429 = t4008*t2698;
  t6437 = t6426 + t6429;
  t6456 = t4008*t2685;
  t6462 = -1.*t3998*t2698;
  t6489 = t6456 + t6462;
  t6501 = t4676*t6437;
  t6506 = t4652*t6489;
  t6526 = t6501 + t6506;
  t6531 = t4577*t6437;
  t6532 = t4568*t6489;
  t6536 = t6531 + t6532;
  t6547 = t4739*t6437;
  t6549 = t4730*t6489;
  t6550 = t6547 + t6549;
  t5182 = -0.15121*t3998;
  t5185 = t5163 + t5182;
  t5225 = t5163 + t4858;
  t6637 = -1.*t3998*t2837;
  t6652 = t6637 + t6429;
  t6675 = -1.*t4008*t2837;
  t6679 = t6675 + t6462;
  t6701 = t4676*t6652;
  t6704 = t4652*t6679;
  t6706 = t6701 + t6704;
  t6748 = t4577*t6652;
  t6750 = t4568*t6679;
  t6751 = t6748 + t6750;
  t6759 = t4739*t6652;
  t6761 = t4730*t6679;
  t6762 = t6759 + t6761;
  t3898 = t3889 + t3897;
  t3902 = -0.281209000004*t3898;
  t3920 = t3911 + t3918;
  t3925 = -2.123459e-6*t3920;
  t3926 = -0.0387489999948987*t3896;
  t3929 = 5.856279999999999e-13 + t3902 + t3925 + t3926;
  t3956 = t3945 + t3918;
  t3970 = -0.038748999993*t3956;
  t3978 = t3974 + t3977;
  t3983 = -0.281209000004*t3978;
  t3985 = -1.38024835e-16*t3896;
  t3986 = -1.4640699999999997e-7 + t3970 + t3983 + t3985;
  t4020 = t4018 + t3897;
  t4024 = -0.038748999993*t4020;
  t4033 = t4027 + t3977;
  t4035 = -2.123459e-6*t4033;
  t4040 = -0.28120900000849935*t3896;
  t4043 = 1.0248489999999998e-12 + t4024 + t4035 + t4040;
  t6883 = t4008*t2837;
  t6899 = t3998*t2698;
  t6924 = t6883 + t6899;
  t6949 = -1.*t498*t4155*t2342;
  t6960 = -6.5e-11*t3896*t6652;
  t6992 = t4162*t6924;
  t7008 = t6949 + t6960 + t6992;
  t7046 = 1.000000000049*t498*t3896*t2342;
  t7049 = t4223*t6652;
  t7050 = t4261*t6924;
  t7054 = t7046 + t7049 + t7050;
  t7064 = -1.*t498*t4321*t2342;
  t7082 = t4330*t6652;
  t7083 = -1.000000000016*t3896*t6924;
  t7092 = t7064 + t7082 + t7083;
  t4502 = t4091 + t4501;
  t4503 = -0.038922999986*t4502;
  t4512 = t4507 + t4188;
  t4526 = -3.6777349999999994e-6*t4512;
  t4527 = -0.5031490000160505*t4106;
  t4531 = 1.8190549999999993e-12 + t4503 + t4526 + t4527;
  t4595 = t4592 + t4129;
  t4599 = -0.038922999986*t4595;
  t4604 = t4601 + t4188;
  t4608 = -0.503149000008*t4604;
  t4612 = -2.3905277499999995e-16*t4106;
  t4613 = -2.598649999999999e-7 + t4599 + t4608 + t4612;
  t4692 = t4090 + t4501;
  t4694 = -0.503149000008*t4692;
  t4709 = t4701 + t4129;
  t4711 = -3.6777349999999994e-6*t4709;
  t4715 = -0.03892299998790722*t4106;
  t4716 = 1.0394599999999997e-12 + t4694 + t4711 + t4715;
  t4753 = t4601 + t4111;
  t7245 = -1.*t498*t4559*t2342;
  t7248 = t4568*t6652;
  t7262 = t4577*t6924;
  t7265 = t7245 + t7248 + t7262;
  t7268 = -1.*t498*t4630*t2342;
  t7271 = t4652*t6652;
  t7278 = t4676*t6924;
  t7283 = t7268 + t7271 + t7278;
  t4758 = t4592 + t4302;
  t7296 = -1.*t4724*t498*t2342;
  t7297 = t4730*t6652;
  t7300 = t4739*t6924;
  t7301 = t7296 + t7297 + t7300;
  t4766 = t4507 + t4111;
  t4781 = t4091 + t4777;
  t4810 = t4090 + t4777;
  t4818 = t4701 + t4302;
  t7654 = t2501*t498*t513*t3998;
  t7665 = t4008*t2501*t498*t652;
  t7673 = t7654 + t7665;
  t7680 = -1.*t4008*t2501*t498*t513;
  t7681 = t2501*t498*t3998*t652;
  t7693 = t7680 + t7681;
  t7711 = -1.*t2501*t4559*t431;
  t7718 = t4568*t7673;
  t7727 = t4577*t7693;
  t7731 = t7711 + t7718 + t7727;
  t7749 = -1.*t2501*t4630*t431;
  t7783 = t4652*t7673;
  t7815 = t4676*t7693;
  t7824 = t7749 + t7783 + t7815;
  t7836 = -1.*t4724*t2501*t431;
  t7837 = t4730*t7673;
  t7840 = t4739*t7693;
  t7844 = t7836 + t7837 + t7840;
  t8032 = t3998*t2531;
  t8034 = t4008*t3380;
  t8036 = t8032 + t8034;
  t8050 = -1.*t3998*t3380;
  t8062 = t6045 + t8050;
  t8064 = t4676*t8036;
  t8082 = t4652*t8062;
  t8095 = t8064 + t8082;
  t8120 = t4577*t8036;
  t8135 = t4568*t8062;
  t8142 = t8120 + t8135;
  t8173 = t4739*t8036;
  t8177 = t4730*t8062;
  t8187 = t8173 + t8177;
  t8355 = -1.*t3998*t3491;
  t8356 = t8355 + t8034;
  t8393 = -1.*t4008*t3491;
  t8397 = t8393 + t8050;
  t8402 = t4676*t8356;
  t8435 = t4652*t8397;
  t8436 = t8402 + t8435;
  t8495 = t4577*t8356;
  t8505 = t4568*t8397;
  t8514 = t8495 + t8505;
  t8524 = t4739*t8356;
  t8631 = t4730*t8397;
  t8665 = t8524 + t8631;
  t8949 = t4008*t3491;
  t8951 = t3998*t3380;
  t8952 = t8949 + t8951;
  t8958 = t2501*t498*t4155;
  t8960 = -6.5e-11*t3896*t8356;
  t8963 = t4162*t8952;
  t8964 = t8958 + t8960 + t8963;
  t8974 = -1.000000000049*t2501*t498*t3896;
  t8977 = t4223*t8356;
  t8978 = t4261*t8952;
  t8981 = t8974 + t8977 + t8978;
  t8990 = t2501*t498*t4321;
  t8992 = t4330*t8356;
  t8993 = -1.000000000016*t3896*t8952;
  t9001 = t8990 + t8992 + t8993;
  t9314 = t2501*t498*t4559;
  t9316 = t4568*t8356;
  t9345 = t4577*t8952;
  t9356 = t9314 + t9316 + t9345;
  t9364 = t2501*t498*t4630;
  t9371 = t4652*t8356;
  t9374 = t4676*t8952;
  t9383 = t9364 + t9371 + t9374;
  t9385 = t4724*t2501*t498;
  t9386 = t4730*t8356;
  t9387 = t4739*t8952;
  t9389 = t9385 + t9386 + t9387;
  t10109 = Power(t498,2);
  t10117 = Power(t513,2);
  t10127 = t10109*t10117;
  t10129 = Power(t2837,2);
  t10130 = t10127 + t10129;
  t10133 = 1/t10130;
  t3243 = -1.*t2501*t498*t513*t1833;
  t3245 = t2501*t498*t1827*t652;
  t3494 = t2068*t3491;
  t3503 = t2087*t3380;
  t3375 = t1827*t2531;
  t3381 = t1833*t3380;
  t3807 = t1833*t2837;
  t3808 = t1827*t2698;
  p_output1[0]=var3[0] + (t1865*t2178 + t1845*t2188 + t1190*t2197 + t1118*t2229 + t2134*t498 - 1.*t1833*t431*t513 + t1827*t431*t652 - 0.041195*(t2212*t824 + 4.e-6*t2229*t844 - 1.*t2197*t907) - 0.14871*(t1289*t2229 + 4.e-6*t2212*t844 + 4.e-6*t2197*t907) + 0.803147*(t1235*t2197 + t2212*t907 - 4.e-6*t2229*t907) + t2212*t984)*var3[4] + (t1847 + t1879 + t1907 + t1925 + t1983 + t2001 + t2022 + t2033 - 1.*t1827*t498*t513 - 1.*t1833*t498*t652)*var3[5] + (t1847 + t1879 + t1907 + t1925 + t1983 + t2001 + t2022 + t2033 + t2068*t498*t513 - 1.*t2087*t498*t652)*var3[9] + (t1118*t1174 + t1190*t1209 + t423*t431 + t479*t711 + t751*t771 + 0.803147*(t1209*t1235 + t1059*t907 - 4.e-6*t1174*t907) - 0.041195*(t1059*t824 + 4.e-6*t1174*t844 - 1.*t1209*t907) - 0.14871*(t1174*t1289 + 4.e-6*t1059*t844 + 4.e-6*t1209*t907) + t1059*t984)*var3[10] + (t1431*t1499 + t1540*t1583 + t1606*t1639 + 0.803147*(t1583*t824 - 4.e-6*t1639*t824 - 1.000000000016*t1499*t907) - 0.14871*(4.e-6*t1499*t824 + 4.e-6*t1583*t907 - 1.6e-11*t1639*t907) - 0.041195*(-1.*t1499*t824 - 1.*t1583*t907 + 4.e-6*t1639*t907))*var3[11] + 5.*t271*t397*var4[0] + 20.*t192*t384*t387*var4[10] - 5.*t271*t397*var4[10] + 30.*t356*t370*t376*var4[20] - 20.*t192*t384*t387*var4[20] + 20.*t268*t269*t310*var4[30] - 30.*t356*t370*t376*var4[30] + 5.*t103*t258*var4[40] - 20.*t268*t269*t310*var4[40] - 5.*t103*t258*var4[50];
  p_output1[1]=var3[1] + (t1833*t2531 + t1827*t2551 + t1865*t2555 + t1845*t2560 + t1190*t2569 + t1118*t2599 - 1.*t2134*t2501*t498 - 0.041195*(t2577*t824 + 4.e-6*t2599*t844 - 1.*t2569*t907) - 0.14871*(t1289*t2599 + 4.e-6*t2577*t844 + 4.e-6*t2569*t907) + 0.803147*(t1235*t2569 + t2577*t907 - 4.e-6*t2599*t907) + t2577*t984)*var3[3] + (t1865*t2370 + t1845*t2390 + t1190*t2424 + t1118*t2449 + t2134*t2342*t431 + t1833*t2342*t498*t513 - 1.*t1827*t2342*t498*t652 - 0.041195*(t2434*t824 + 4.e-6*t2449*t844 - 1.*t2424*t907) - 0.14871*(t1289*t2449 + 4.e-6*t2434*t844 + 4.e-6*t2424*t907) + 0.803147*(t1235*t2424 + t2434*t907 - 4.e-6*t2449*t907) + t2434*t984)*var3[4] + (t1827*t2685 + t1833*t2698 + t1845*t2708 + t1865*t2724 + t1118*t2738 + t1190*t2766 + 0.803147*(t1235*t2766 - 4.e-6*t2738*t907 + t2752*t907) - 0.041195*(t2752*t824 + 4.e-6*t2738*t844 - 1.*t2766*t907) - 0.14871*(t1289*t2738 + 4.e-6*t2752*t844 + 4.e-6*t2766*t907) + t2752*t984)*var3[5] + (t2087*t2698 + t2068*t2837 + t1845*t2846 + t1865*t2853 + t1118*t2866 + t1190*t2902 + 0.803147*(t1235*t2902 - 4.e-6*t2866*t907 + t2894*t907) - 0.041195*(t2894*t824 + 4.e-6*t2866*t844 - 1.*t2902*t907) - 0.14871*(t1289*t2866 + 4.e-6*t2894*t844 + 4.e-6*t2902*t907) + t2894*t984)*var3[9] + (t1118*t3018 + t1190*t3037 + t2846*t479 - 1.*t2342*t423*t498 + t2981*t751 + 0.803147*(t1235*t3037 + t3002*t907 - 4.e-6*t3018*t907) - 0.041195*(t3002*t824 + 4.e-6*t3018*t844 - 1.*t3037*t907) - 0.14871*(t1289*t3018 + 4.e-6*t3002*t844 + 4.e-6*t3037*t907) + t3002*t984)*var3[10] + (t1431*t3113 + t1540*t3133 + t1606*t3153 + 0.803147*(t3161 - 4.e-6*t3153*t824 - 1.000000000016*t3113*t907) - 0.14871*(4.e-6*t3113*t824 + 4.e-6*t3133*t907 - 1.6e-11*t3153*t907) - 0.041195*(-1.*t3113*t824 - 1.*t3133*t907 + 4.e-6*t3153*t907))*var3[11] + 5.*t271*t397*var4[1] + 20.*t192*t384*t387*var4[11] - 5.*t271*t397*var4[11] + 30.*t356*t370*t376*var4[21] - 20.*t192*t384*t387*var4[21] + 20.*t268*t269*t310*var4[31] - 30.*t356*t370*t376*var4[31] + 5.*t103*t258*var4[41] - 20.*t268*t269*t310*var4[41] - 5.*t103*t258*var4[51];
  p_output1[2]=var3[2] + (t1865*t2846 + t1845*t2981 + t1190*t3113 + t1118*t3153 + t3807 + t3808 - 1.*t2134*t2342*t498 - 0.041195*(t3161 + 4.e-6*t3153*t844 - 1.*t3113*t907) - 0.14871*(t1289*t3153 + 4.e-6*t3133*t844 + 4.e-6*t3113*t907) + 0.803147*(t1235*t3113 + t3133*t907 - 4.e-6*t3153*t907) + t3133*t984)*var3[3] + (t3243 + t3245 + t1865*t3248 + t1845*t3262 + t1190*t3278 + t1118*t3315 - 1.*t2134*t2501*t431 - 0.041195*(t3286*t824 + 4.e-6*t3315*t844 - 1.*t3278*t907) - 0.14871*(t1289*t3315 + 4.e-6*t3286*t844 + 4.e-6*t3278*t907) + 0.803147*(t1235*t3278 + t3286*t907 - 4.e-6*t3315*t907) + t3286*t984)*var3[4] + (t3375 + t3381 + t1845*t3391 + t1865*t3403 + t1118*t3413 + t1190*t3448 + 0.803147*(t1235*t3448 - 4.e-6*t3413*t907 + t3426*t907) - 0.041195*(t3426*t824 + 4.e-6*t3413*t844 - 1.*t3448*t907) - 0.14871*(t1289*t3413 + 4.e-6*t3426*t844 + 4.e-6*t3448*t907) + t3426*t984)*var3[5] + (t3494 + t3503 + t1845*t3507 + t1865*t3523 + t1118*t3532 + t1190*t3561 + 0.803147*(t1235*t3561 - 4.e-6*t3532*t907 + t3550*t907) - 0.041195*(t3550*t824 + 4.e-6*t3532*t844 - 1.*t3561*t907) - 0.14871*(t1289*t3532 + 4.e-6*t3550*t844 + 4.e-6*t3561*t907) + t3550*t984)*var3[9] + (t1118*t3657 + t1190*t3690 + t3507*t479 + t2501*t423*t498 + t3637*t751 + 0.803147*(t1235*t3690 + t3646*t907 - 4.e-6*t3657*t907) - 0.041195*(t3646*t824 + 4.e-6*t3657*t844 - 1.*t3690*t907) - 0.14871*(t1289*t3657 + 4.e-6*t3646*t844 + 4.e-6*t3690*t907) + t3646*t984)*var3[10] + (t1431*t3752 + t1540*t3756 + t1606*t3767 + 0.803147*(t3756*t824 - 4.e-6*t3767*t824 - 1.000000000016*t3752*t907) - 0.14871*(4.e-6*t3752*t824 + 4.e-6*t3756*t907 - 1.6e-11*t3767*t907) - 0.041195*(-1.*t3752*t824 - 1.*t3756*t907 + 4.e-6*t3767*t907))*var3[11] + 5.*t271*t397*var4[2] + 20.*t192*t384*t387*var4[12] - 5.*t271*t397*var4[12] + 30.*t356*t370*t376*var4[22] - 20.*t192*t384*t387*var4[22] + 20.*t268*t269*t310*var4[32] - 30.*t356*t370*t376*var4[32] + 5.*t103*t258*var4[42] - 20.*t268*t269*t310*var4[42] - 5.*t103*t258*var4[52];
  p_output1[3]=var3[0] + (-1.*t431*t4883*t513 + t498*t5319 + t4951*t5357 + t4924*t5384 + t4315*t5401 + t4147*t5419 + t4215*t5448 - 0.80315*(t4412*t5401 + t4361*t5419 + t4388*t5448) + 0.148705*(t4460*t5401 + t4432*t5419 + t4446*t5448) - 0.038924*(t4483*t5401 + t4468*t5419 + t4478*t5448) + t431*t4871*t652)*var3[4] + (t4926 + t4990 + t5015 + t5037 + t5059 + t5074 + t5098 - 1.*t4871*t498*t513 + t5138 - 1.*t4883*t498*t652)*var3[5] + (t4926 + t4990 + t5015 + t5037 + t5059 + t5074 + t5098 + t5138 + t498*t513*t5185 - 1.*t498*t5225*t652)*var3[12] + (t3986*t4013 + t4043*t4049 + t4147*t4171 + t4215*t4276 + t3929*t431 + t4315*t4343 - 0.80315*(t4171*t4361 + t4276*t4388 + t4343*t4412) + 0.148705*(t4171*t4432 + t4276*t4446 + t4343*t4460) - 0.038924*(t4171*t4468 + t4276*t4478 + t4343*t4483))*var3[13] + (t4531*t4585 + t4613*t4688 + t4716*t4744 + 0.148705*(-6.5e-11*t4106*t4688 + t4585*t4753 + t4744*t4758) - 0.80315*(-1.000000000016*t4106*t4585 + t4688*t4766 + t4744*t4781) - 0.038924*(-1.000000000049*t4106*t4744 + t4585*t4810 + t4688*t4818))*var3[14] + 5.*t271*t397*var4[3] + 20.*t192*t384*t387*var4[13] - 5.*t271*t397*var4[13] + 30.*t356*t370*t376*var4[23] - 20.*t192*t384*t387*var4[23] + 20.*t268*t269*t310*var4[33] - 30.*t356*t370*t376*var4[33] + 5.*t103*t258*var4[43] - 20.*t268*t269*t310*var4[43] - 5.*t103*t258*var4[53];
  p_output1[4]=var3[1] + (t2551*t4871 + t2531*t4883 - 1.*t2501*t498*t5319 + t4951*t6034 + t4924*t6107 + t4315*t6198 + t4147*t6242 + t4215*t6338 - 0.80315*(t4412*t6198 + t4361*t6242 + t4388*t6338) + 0.148705*(t4460*t6198 + t4432*t6242 + t4446*t6338) - 0.038924*(t4483*t6198 + t4468*t6242 + t4478*t6338))*var3[3] + (t2342*t4883*t498*t513 + t2342*t431*t5319 + t4951*t5697 + t4924*t5736 + t4315*t5785 + t4147*t5864 + t4215*t5903 - 0.80315*(t4412*t5785 + t4361*t5864 + t4388*t5903) + 0.148705*(t4460*t5785 + t4432*t5864 + t4446*t5903) - 0.038924*(t4483*t5785 + t4468*t5864 + t4478*t5903) - 1.*t2342*t4871*t498*t652)*var3[4] + (t2685*t4871 + t2698*t4883 + t4924*t6437 + t4951*t6489 + t4147*t6526 + t4315*t6536 + t4215*t6550 - 0.80315*(t4361*t6526 + t4412*t6536 + t4388*t6550) + 0.148705*(t4432*t6526 + t4460*t6536 + t4446*t6550) - 0.038924*(t4468*t6526 + t4483*t6536 + t4478*t6550))*var3[5] + (t2837*t5185 + t2698*t5225 + t4924*t6652 + t4951*t6679 + t4147*t6706 + t4315*t6751 + t4215*t6762 - 0.80315*(t4361*t6706 + t4412*t6751 + t4388*t6762) + 0.148705*(t4432*t6706 + t4460*t6751 + t4446*t6762) - 0.038924*(t4468*t6706 + t4483*t6751 + t4478*t6762))*var3[12] + (-1.*t2342*t3929*t498 + t3986*t6652 + t4043*t6924 + t4147*t7008 + t4215*t7054 + t4315*t7092 - 0.80315*(t4361*t7008 + t4388*t7054 + t4412*t7092) + 0.148705*(t4432*t7008 + t4446*t7054 + t4460*t7092) - 0.038924*(t4468*t7008 + t4478*t7054 + t4483*t7092))*var3[13] + (t4531*t7265 + t4613*t7283 + t4716*t7301 - 0.038924*(t4810*t7265 + t4818*t7283 - 1.000000000049*t4106*t7301) + 0.148705*(t4753*t7265 - 6.5e-11*t4106*t7283 + t4758*t7301) - 0.80315*(-1.000000000016*t4106*t7265 + t4766*t7283 + t4781*t7301))*var3[14] + 5.*t271*t397*var4[4] + 20.*t192*t384*t387*var4[14] - 5.*t271*t397*var4[14] + 30.*t356*t370*t376*var4[24] - 20.*t192*t384*t387*var4[24] + 20.*t268*t269*t310*var4[34] - 30.*t356*t370*t376*var4[34] + 5.*t103*t258*var4[44] - 20.*t268*t269*t310*var4[44] - 5.*t103*t258*var4[54];
  p_output1[5]=var3[2] + (t2698*t4871 + t2837*t4883 - 1.*t2342*t498*t5319 + t4951*t6652 + t4924*t6924 + t4315*t7265 + t4147*t7283 + t4215*t7301 - 0.80315*(t4412*t7265 + t4361*t7283 + t4388*t7301) + 0.148705*(t4460*t7265 + t4432*t7283 + t4446*t7301) - 0.038924*(t4483*t7265 + t4468*t7283 + t4478*t7301))*var3[3] + (-1.*t2501*t4883*t498*t513 - 1.*t2501*t431*t5319 + t2501*t4871*t498*t652 + t4951*t7673 + t4924*t7693 + t4315*t7731 + t4147*t7824 + t4215*t7844 - 0.80315*(t4412*t7731 + t4361*t7824 + t4388*t7844) + 0.148705*(t4460*t7731 + t4432*t7824 + t4446*t7844) - 0.038924*(t4483*t7731 + t4468*t7824 + t4478*t7844))*var3[4] + (t2531*t4871 + t3380*t4883 + t4924*t8036 + t4951*t8062 + t4147*t8095 + t4315*t8142 + t4215*t8187 - 0.80315*(t4361*t8095 + t4412*t8142 + t4388*t8187) + 0.148705*(t4432*t8095 + t4460*t8142 + t4446*t8187) - 0.038924*(t4468*t8095 + t4483*t8142 + t4478*t8187))*var3[5] + (t3491*t5185 + t3380*t5225 + t4924*t8356 + t4951*t8397 + t4147*t8436 + t4315*t8514 + t4215*t8665 - 0.80315*(t4361*t8436 + t4412*t8514 + t4388*t8665) + 0.148705*(t4432*t8436 + t4460*t8514 + t4446*t8665) - 0.038924*(t4468*t8436 + t4483*t8514 + t4478*t8665))*var3[12] + (t2501*t3929*t498 + t3986*t8356 + t4043*t8952 + t4147*t8964 + t4215*t8981 + t4315*t9001 - 0.80315*(t4361*t8964 + t4388*t8981 + t4412*t9001) + 0.148705*(t4432*t8964 + t4446*t8981 + t4460*t9001) - 0.038924*(t4468*t8964 + t4478*t8981 + t4483*t9001))*var3[13] + (t4531*t9356 + t4613*t9383 + t4716*t9389 - 0.038924*(t4810*t9356 + t4818*t9383 - 1.000000000049*t4106*t9389) + 0.148705*(t4753*t9356 - 6.5e-11*t4106*t9383 + t4758*t9389) - 0.80315*(-1.000000000016*t4106*t9356 + t4766*t9383 + t4781*t9389))*var3[14] + 5.*t271*t397*var4[5] + 20.*t192*t384*t387*var4[15] - 5.*t271*t397*var4[15] + 30.*t356*t370*t376*var4[25] - 20.*t192*t384*t387*var4[25] + 20.*t268*t269*t310*var4[35] - 30.*t356*t370*t376*var4[35] + 5.*t103*t258*var4[45] - 20.*t268*t269*t310*var4[45] - 5.*t103*t258*var4[55];
  p_output1[6]=var3[1] + (0.00183*t2531 - 0.002264*t2551 + 0.024028*t2501*t498)*var3[3] + (-0.024028*t2342*t431 + 0.00183*t2342*t498*t513 + 0.002264*t2342*t498*t652)*var3[4] + (-0.002264*t2685 + 0.00183*t2698)*var3[5] + 5.*t271*t397*var4[6] + 20.*t192*t384*t387*var4[16] - 5.*t271*t397*var4[16] + 30.*t356*t370*t376*var4[26] - 20.*t192*t384*t387*var4[26] + 20.*t268*t269*t310*var4[36] - 30.*t356*t370*t376*var4[36] + 5.*t103*t258*var4[46] - 20.*t268*t269*t310*var4[46] - 5.*t103*t258*var4[56];
  p_output1[7]=var3[2] + (-0.002264*t2698 + 0.00183*t2837 + 0.024028*t2342*t498)*var3[3] + (0.024028*t2501*t431 - 0.00183*t2501*t498*t513 - 0.002264*t2501*t498*t652)*var3[4] + (-0.002264*t2531 + 0.00183*t3380)*var3[5] + 5.*t271*t397*var4[7] + 20.*t192*t384*t387*var4[17] - 5.*t271*t397*var4[17] + 30.*t356*t370*t376*var4[27] - 20.*t192*t384*t387*var4[27] + 20.*t268*t269*t310*var4[37] - 30.*t356*t370*t376*var4[37] + 5.*t103*t258*var4[47] - 20.*t268*t269*t310*var4[47] - 5.*t103*t258*var4[57];
  p_output1[8]=t10133*t2531*t498*t513*var3[3] + (t10109*t10117*t10133*t2342 - 1.*t10133*t2685*t431*t513)*var3[4] + (t10133*t2698*t498*t513 - 1.*t10133*t2685*t498*t652)*var3[5] + 5.*t271*t397*var4[8] + 20.*t192*t384*t387*var4[18] - 5.*t271*t397*var4[18] + 30.*t356*t370*t376*var4[28] - 20.*t192*t384*t387*var4[28] + 20.*t268*t269*t310*var4[38] - 30.*t356*t370*t376*var4[38] + 5.*t103*t258*var4[48] - 20.*t268*t269*t310*var4[48] - 5.*t103*t258*var4[58];
  p_output1[9]=(-0.15121*t2846 + 0.15121*t2981 + t3807 + t3808 - 1.*t2698*t4871 - 1.*t2837*t4883 - 0.15121*t6652 + 0.15121*t6924)*var3[3] + (t3243 + t3245 - 0.15121*t3248 + 0.15121*t3262 + t2501*t4883*t498*t513 - 1.*t2501*t4871*t498*t652 - 0.15121*t7673 + 0.15121*t7693)*var3[4] + (t3375 + t3381 + 0.15121*t3391 - 0.15121*t3403 - 1.*t2531*t4871 - 1.*t3380*t4883 + 0.15121*t8036 - 0.15121*t8062)*var3[5] + (t3494 + t3503 + 0.15121*t3507 - 0.15121*t3523)*var3[9] + (-1.*t3491*t5185 - 1.*t3380*t5225 + 0.15121*t8356 - 0.15121*t8397)*var3[12] + 5.*t271*t397*var4[9] + 20.*t192*t384*t387*var4[19] - 5.*t271*t397*var4[19] + 30.*t356*t370*t376*var4[29] - 20.*t192*t384*t387*var4[29] + 20.*t268*t269*t310*var4[39] - 30.*t356*t370*t376*var4[39] + 5.*t103*t258*var4[49] - 20.*t268*t269*t310*var4[49] - 5.*t103*t258*var4[59];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4,*var5,*var6,*var7;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 7)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Seven input(s) required (var1,var2,var3,var4,var5,var6,var7).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 2 && ncols == 1) && 
      !(mrows == 1 && ncols == 2))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 60 && ncols == 1) && 
      !(mrows == 1 && ncols == 60))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }
  mrows = mxGetM(prhs[4]);
  ncols = mxGetN(prhs[4]);
  if( !mxIsDouble(prhs[4]) || mxIsComplex(prhs[4]) ||
    ( !(mrows == 2 && ncols == 1) && 
      !(mrows == 1 && ncols == 2))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var5 is wrong.");
    }
  mrows = mxGetM(prhs[5]);
  ncols = mxGetN(prhs[5]);
  if( !mxIsDouble(prhs[5]) || mxIsComplex(prhs[5]) ||
    ( !(mrows == 1 && ncols == 1) && 
      !(mrows == 1 && ncols == 1))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var6 is wrong.");
    }
  mrows = mxGetM(prhs[6]);
  ncols = mxGetN(prhs[6]);
  if( !mxIsDouble(prhs[6]) || mxIsComplex(prhs[6]) ||
    ( !(mrows == 1 && ncols == 1) && 
      !(mrows == 1 && ncols == 1))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var7 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
  var5 = mxGetPr(prhs[4]);
  var6 = mxGetPr(prhs[5]);
  var7 = mxGetPr(prhs[6]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 10, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4,var5,var6,var7);


}

#else // MATLAB_MEX_FILE

#include "d1y_position_DiagonalStance2.hh"

namespace DiagonalStance2
{

void d1y_position_DiagonalStance2_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4,const double *var5,const double *var6,const double *var7)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4, var5, var6, var7);

}

}

#endif // MATLAB_MEX_FILE
