/*
 * Automatically Generated from Mathematica.
 * Fri 10 Dec 2021 20:18:32 GMT+01:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4,const double *var5,const double *var6,const double *var7)
{
  double t46;
  double t72;
  double t79;
  double t97;
  double t99;
  double t118;
  double t135;
  double t139;
  double t168;
  double t184;
  double t185;
  double t203;
  double t206;
  double t214;
  double t220;
  double t221;
  double t315;
  double t324;
  double t326;
  double t363;
  double t369;
  double t387;
  double t426;
  double t432;
  double t485;
  double t524;
  double t492;
  double t515;
  double t530;
  double t735;
  double t461;
  double t523;
  double t572;
  double t592;
  double t689;
  double t691;
  double t692;
  double t749;
  double t755;
  double t761;
  double t802;
  double t825;
  double t843;
  double t863;
  double t879;
  double t986;
  double t1001;
  double t1011;
  double t1018;
  double t1069;
  double t1079;
  double t1092;
  double t1120;
  double t1056;
  double t1418;
  double t1426;
  double t1396;
  double t1398;
  double t1438;
  double t1448;
  double t1450;
  double t1460;
  double t1482;
  double t1502;
  double t1507;
  double t1524;
  double t1526;
  double t1549;
  double t1556;
  double t1588;
  double t1594;
  double t1603;
  double t1811;
  double t1818;
  double t1864;
  double t443;
  double t900;
  double t908;
  double t935;
  double t970;
  double t983;
  double t1975;
  double t1993;
  double t2010;
  double t728;
  double t760;
  double t798;
  double t809;
  double t821;
  double t1033;
  double t1065;
  double t2047;
  double t2055;
  double t2070;
  double t2093;
  double t2127;
  double t1160;
  double t1163;
  double t2139;
  double t2149;
  double t2155;
  double t1256;
  double t1267;
  double t2312;
  double t1883;
  double t1895;
  double t1897;
  double t1909;
  double t1921;
  double t1922;
  double t1948;
  double t1950;
  double t2014;
  double t2056;
  double t2138;
  double t2160;
  double t2181;
  double t2194;
  double t2209;
  double t2224;
  double t2230;
  double t2251;
  double t2259;
  double t2274;
  double t2276;
  double t2277;
  double t2283;
  double t2288;
  double t2291;
  double t2293;
  double t2296;
  double t1871;
  double t1874;
  double t1859;
  double t1865;
  double t2531;
  double t2559;
  double t2587;
  double t2610;
  double t2686;
  double t2710;
  double t2734;
  double t2741;
  double t2746;
  double t2752;
  double t2758;
  double t2770;
  double t2772;
  double t2774;
  double t2791;
  double t2809;
  double t2813;
  double t2816;
  double t2400;
  double t2411;
  double t2419;
  double t2426;
  double t2436;
  double t2984;
  double t2994;
  double t2997;
  double t2998;
  double t3001;
  double t3006;
  double t3014;
  double t3024;
  double t3025;
  double t3027;
  double t3032;
  double t3035;
  double t3038;
  double t3042;
  double t3044;
  double t3056;
  double t3073;
  double t3074;
  double t3082;
  double t3163;
  double t3174;
  double t3192;
  double t3205;
  double t3224;
  double t3233;
  double t3243;
  double t3247;
  double t3249;
  double t3255;
  double t3262;
  double t3267;
  double t3269;
  double t3284;
  double t3290;
  double t3299;
  double t3308;
  double t3317;
  double t3319;
  double t3320;
  double t3322;
  double t3324;
  double t3325;
  double t3330;
  double t3339;
  double t3461;
  double t3473;
  double t3477;
  double t3497;
  double t3500;
  double t3513;
  double t3526;
  double t3534;
  double t3544;
  double t3565;
  double t3573;
  double t3575;
  double t3577;
  double t3579;
  double t3584;
  double t3590;
  double t3593;
  double t3597;
  double t3605;
  double t3608;
  double t3620;
  double t2338;
  double t2341;
  double t2358;
  double t3739;
  double t3741;
  double t3747;
  double t3761;
  double t3762;
  double t3779;
  double t3782;
  double t3793;
  double t3795;
  double t3796;
  double t3807;
  double t3810;
  double t3811;
  double t3817;
  double t3825;
  double t3826;
  double t430;
  double t452;
  double t476;
  double t480;
  double t482;
  double t674;
  double t681;
  double t685;
  double t3937;
  double t3945;
  double t3946;
  double t3956;
  double t3957;
  double t3960;
  double t3964;
  double t3965;
  double t3966;
  double t3967;
  double t3969;
  double t3976;
  double t3978;
  double t3985;
  double t1357;
  double t1375;
  double t1393;
  double t1465;
  double t1475;
  double t1515;
  double t1518;
  double t1522;
  double t4057;
  double t4067;
  double t4070;
  double t4078;
  double t4092;
  double t4099;
  double t4104;
  double t4113;
  double t4120;
  double t4122;
  double t4124;
  double t4204;
  double t4207;
  double t4210;
  double t4213;
  double t4214;
  double t4218;
  double t4222;
  double t4223;
  double t4227;
  double t4230;
  double t4237;
  double t4239;
  double t4240;
  double t4244;
  double t4249;
  double t4251;
  double t4253;
  double t4254;
  double t4359;
  double t4361;
  double t4362;
  double t4364;
  double t4366;
  double t4374;
  double t4378;
  double t4380;
  double t4383;
  double t4388;
  double t4389;
  double t4394;
  double t4395;
  double t4398;
  double t4403;
  double t4410;
  double t4415;
  double t4519;
  double t4521;
  double t4522;
  double t4531;
  double t4537;
  double t4545;
  double t4549;
  double t4553;
  double t4556;
  double t4560;
  double t4569;
  double t4571;
  double t4575;
  double t4599;
  double t4604;
  double t4605;
  double t4739;
  double t4746;
  double t4756;
  double t4760;
  double t4771;
  double t4797;
  double t4798;
  double t4803;
  double t4804;
  double t4813;
  double t4814;
  double t4815;
  double t4816;
  double t4898;
  double t4907;
  double t4909;
  double t4915;
  double t4920;
  double t4922;
  double t4929;
  double t4933;
  double t4935;
  double t4936;
  double t4943;
  double t4133;
  double t5166;
  double t5170;
  double t5176;
  double t5171;
  double t5204;
  double t5226;
  double t5222;
  double t5274;
  double t5277;
  double t5278;
  double t5291;
  double t5192;
  double t5224;
  double t5230;
  double t5231;
  double t5203;
  double t5244;
  double t5249;
  double t5251;
  double t5283;
  double t5174;
  double t5395;
  double t5471;
  double t5361;
  double t5233;
  double t5515;
  double t5237;
  double t5419;
  double t5595;
  double t5398;
  double t5407;
  double t5410;
  double t5421;
  double t5423;
  double t5438;
  double t5560;
  double t5499;
  double t5500;
  double t5501;
  double t5516;
  double t5532;
  double t5533;
  double t5617;
  double t5618;
  double t5633;
  double t5635;
  double t5640;
  double t5648;
  double t5339;
  double t5676;
  double t5369;
  double t5780;
  double t5782;
  double t5454;
  double t5701;
  double t6046;
  double t6079;
  double t5953;
  double t6164;
  double t6177;
  double t6047;
  double t6133;
  double t6049;
  double t6069;
  double t6070;
  double t6082;
  double t6084;
  double t6089;
  double t6092;
  double t6094;
  double t6098;
  double t6210;
  double t6212;
  double t6225;
  double t6234;
  double t6247;
  double t6258;
  double t6272;
  double t6274;
  double t6123;
  double t6333;
  double t6335;
  double t6337;
  double t6343;
  double t6346;
  double t6349;
  double t6351;
  double t6352;
  double t5979;
  double t6427;
  double t6313;
  double t6555;
  double t6564;
  double t6573;
  double t6611;
  double t5270;
  double t5282;
  double t5355;
  double t5359;
  double t5373;
  double t5389;
  double t5390;
  double t6730;
  double t6764;
  double t6770;
  double t5549;
  double t5551;
  double t5584;
  double t5591;
  double t5597;
  double t5609;
  double t5615;
  double t5441;
  double t5449;
  double t5462;
  double t5466;
  double t5472;
  double t5474;
  double t5479;
  double t5802;
  double t6774;
  double t6775;
  double t6780;
  double t5889;
  double t6783;
  double t6784;
  double t6786;
  double t5831;
  double t5847;
  double t6795;
  double t6817;
  double t6830;
  double t5677;
  double t5718;
  double t5726;
  double t5703;
  double t5767;
  double t5768;
  double t5787;
  double t5783;
  double t6946;
  double t6602;
  double t6603;
  double t6604;
  double t6605;
  double t6607;
  double t6616;
  double t6620;
  double t6621;
  double t6623;
  double t6624;
  double t6630;
  double t6634;
  double t6638;
  double t6643;
  double t6666;
  double t6680;
  double t6709;
  double t6771;
  double t6781;
  double t6787;
  double t6833;
  double t6845;
  double t6848;
  double t6849;
  double t6863;
  double t6865;
  double t6866;
  double t6878;
  double t6887;
  double t6890;
  double t6891;
  double t6896;
  double t6907;
  double t6909;
  double t6914;
  double t6918;
  double t6588;
  double t6589;
  double t6570;
  double t6577;
  double t7090;
  double t7098;
  double t7100;
  double t7120;
  double t7125;
  double t7145;
  double t7157;
  double t7162;
  double t7164;
  double t7171;
  double t7181;
  double t7197;
  double t7202;
  double t7205;
  double t7207;
  double t7209;
  double t7212;
  double t7220;
  double t6987;
  double t6993;
  double t7033;
  double t7035;
  double t7047;
  double t7051;
  double t7059;
  double t7433;
  double t7440;
  double t7447;
  double t7454;
  double t7458;
  double t7463;
  double t7472;
  double t7478;
  double t7488;
  double t7489;
  double t7499;
  double t7501;
  double t7505;
  double t7506;
  double t7512;
  double t7513;
  double t7515;
  double t7518;
  double t7585;
  double t7589;
  double t7607;
  double t7629;
  double t7632;
  double t7639;
  double t7662;
  double t7672;
  double t7680;
  double t7687;
  double t7699;
  double t7700;
  double t7707;
  double t7713;
  double t7732;
  double t7741;
  double t7766;
  double t7767;
  double t7886;
  double t7891;
  double t7901;
  double t7924;
  double t7929;
  double t7934;
  double t7946;
  double t7949;
  double t7950;
  double t7955;
  double t7956;
  double t7957;
  double t7966;
  double t7967;
  double t7968;
  double t6948;
  double t6969;
  double t6972;
  double t8109;
  double t8112;
  double t8116;
  double t8119;
  double t8128;
  double t8129;
  double t8132;
  double t8140;
  double t8145;
  double t8154;
  double t8162;
  double t8164;
  double t8166;
  double t5172;
  double t5173;
  double t5178;
  double t5179;
  double t5180;
  double t5182;
  double t5197;
  double t5200;
  double t5205;
  double t5207;
  double t5208;
  double t5217;
  double t5234;
  double t5235;
  double t5240;
  double t5241;
  double t5242;
  double t5243;
  double t8239;
  double t8240;
  double t8247;
  double t8252;
  double t8253;
  double t8254;
  double t8256;
  double t8259;
  double t8260;
  double t8261;
  double t8262;
  double t8266;
  double t8273;
  double t8275;
  double t8278;
  double t5966;
  double t5967;
  double t6014;
  double t6028;
  double t6040;
  double t6045;
  double t6124;
  double t6126;
  double t6141;
  double t6148;
  double t6149;
  double t6150;
  double t6288;
  double t6299;
  double t6322;
  double t6327;
  double t6328;
  double t6329;
  double t6358;
  double t8320;
  double t8321;
  double t8323;
  double t8324;
  double t8335;
  double t8337;
  double t8343;
  double t8345;
  double t6384;
  double t8349;
  double t8352;
  double t8353;
  double t8356;
  double t6409;
  double t6430;
  double t6496;
  double t6505;
  double t8433;
  double t8434;
  double t8435;
  double t8439;
  double t8440;
  double t8441;
  double t8443;
  double t8445;
  double t8451;
  double t8452;
  double t8454;
  double t8455;
  double t8456;
  double t8460;
  double t8465;
  double t8466;
  double t8468;
  double t8471;
  double t8583;
  double t8584;
  double t8585;
  double t8599;
  double t8600;
  double t8603;
  double t8607;
  double t8608;
  double t8614;
  double t8615;
  double t8617;
  double t8627;
  double t8628;
  double t8632;
  double t8723;
  double t8726;
  double t8735;
  double t8737;
  double t8739;
  double t8740;
  double t8744;
  double t8747;
  double t8757;
  double t8760;
  double t8766;
  double t8767;
  double t8769;
  double t8865;
  double t8869;
  double t8870;
  double t8880;
  double t8884;
  double t8886;
  double t8887;
  double t8894;
  double t8896;
  double t8897;
  double t8900;
  double t8905;
  double t8908;
  double t8909;
  double t8911;
  double t8982;
  double t8983;
  double t8988;
  double t8990;
  double t8997;
  double t9000;
  double t9010;
  double t9011;
  double t9019;
  double t9022;
  double t9023;
  double t9030;
  double t9420;
  double t9424;
  double t9427;
  double t9428;
  double t9430;
  double t9445;
  double t4197;
  double t4202;
  double t4523;
  double t4527;
  double t4355;
  double t4363;
  double t5035;
  double t5037;
  t46 = -1.*var5[0];
  t72 = t46 + var5[1];
  t79 = Power(t72,-5);
  t97 = -1. + var6[0];
  t99 = -1. + var7[0];
  t118 = 1/t99;
  t135 = -1.*var1[0];
  t139 = t135 + var1[1];
  t168 = t97*t118*t139;
  t184 = t46 + var1[0] + t168;
  t185 = Power(t184,4);
  t203 = Power(t72,-4);
  t206 = Power(t184,3);
  t214 = 1/t72;
  t220 = -1.*t214*t184;
  t221 = 1. + t220;
  t315 = Power(t72,-3);
  t324 = Power(t184,2);
  t326 = Power(t221,2);
  t363 = Power(t72,-2);
  t369 = Power(t221,3);
  t387 = Power(t221,4);
  t426 = Cos(var2[10]);
  t432 = Sin(var2[10]);
  t485 = Cos(var2[4]);
  t524 = Cos(var2[9]);
  t492 = Cos(var2[5]);
  t515 = Sin(var2[9]);
  t530 = Sin(var2[5]);
  t735 = Cos(var2[11]);
  t461 = Sin(var2[4]);
  t523 = -1.*t485*t492*t515;
  t572 = -1.*t524*t485*t530;
  t592 = t523 + t572;
  t689 = t524*t485*t492;
  t691 = -1.*t485*t515*t530;
  t692 = t689 + t691;
  t749 = -1.*t735;
  t755 = 1. + t749;
  t761 = -1. + t735;
  t802 = Sin(var2[11]);
  t825 = -1.*t432*t461;
  t843 = 4.e-6*t432*t592;
  t863 = -1.*t426*t692;
  t879 = t825 + t843 + t863;
  t986 = 4.e-6*t432*t461;
  t1001 = -1.6e-11*t432*t592;
  t1011 = 4.e-6*t426*t692;
  t1018 = t986 + t1001 + t1011;
  t1069 = t426*t461;
  t1079 = -4.e-6*t426*t592;
  t1092 = -1.000000000016*t432*t692;
  t1120 = t1069 + t1079 + t1092;
  t1056 = -0.0398890000006382*t802;
  t1418 = -1.*t426;
  t1426 = 1. + t1418;
  t1396 = t432*t461;
  t1398 = -4.e-6*t432*t592;
  t1438 = -1.000000000016*t1426;
  t1448 = 1. + t1438;
  t1450 = t1448*t692;
  t1460 = t1396 + t1398 + t1450;
  t1482 = 4.e-6*t1426*t592;
  t1502 = -1.*t432*t692;
  t1507 = t1069 + t1482 + t1502;
  t1524 = 4.e-6*t1426*t461;
  t1526 = -1. + t426;
  t1549 = 1.6e-11*t1526;
  t1556 = 1. + t1549;
  t1588 = t1556*t592;
  t1594 = 4.e-6*t432*t692;
  t1603 = t1524 + t1588 + t1594;
  t1811 = -1.*t524;
  t1818 = 1. + t1811;
  t1864 = -0.15121*t515;
  t443 = -0.03874900000062*t432;
  t900 = -1.26e-8*var2[11];
  t908 = 2.552896e-18*t755;
  t935 = -1.59556e-7*t761;
  t970 = 2.012600000032e-6*t802;
  t983 = t900 + t908 + t935 + t970;
  t1975 = -1.*t524*t485*t492;
  t1993 = t485*t515*t530;
  t2010 = t1975 + t1993;
  t728 = -5.04e-14*var2[11];
  t760 = -0.039889*t755;
  t798 = 6.38224e-13*t761;
  t809 = -0.503150000008*t802;
  t821 = t728 + t760 + t798 + t809;
  t1033 = 0.50315000001605*t755;
  t1065 = t1033 + t1056;
  t2047 = t1556*t2010;
  t2055 = t843 + t2047;
  t2070 = -1.*t432*t592;
  t2093 = 4.e-6*t1426*t2010;
  t2127 = t2070 + t2093;
  t1160 = -1.000000000016*t755;
  t1163 = 1. + t1160;
  t2139 = t1448*t592;
  t2149 = -4.e-6*t432*t2010;
  t2155 = t2139 + t2149;
  t1256 = 1.6e-11*t761;
  t1267 = 1. + t1256;
  t2312 = -0.15121*t524;
  t1883 = 0.281210000008499*t1426;
  t1895 = t1883 + t443;
  t1897 = t1895*t592;
  t1909 = -1.2484e-7*var2[10];
  t1921 = 2.479936e-18*t1426;
  t1922 = -1.54996e-7*t1526;
  t1948 = 1.124840000016e-6*t432;
  t1950 = t1909 + t1921 + t1922 + t1948;
  t2014 = t1950*t2010;
  t2056 = t983*t2055;
  t2138 = t821*t2127;
  t2160 = t1065*t2155;
  t2181 = -4.e-6*t802*t2055;
  t2194 = t802*t2127;
  t2209 = t1163*t2155;
  t2224 = t2181 + t2194 + t2209;
  t2230 = 0.803147*t2224;
  t2251 = 4.e-6*t755*t2055;
  t2259 = t735*t2127;
  t2274 = -1.*t802*t2155;
  t2276 = t2251 + t2259 + t2274;
  t2277 = -0.041195*t2276;
  t2283 = t1267*t2055;
  t2288 = 4.e-6*t755*t2127;
  t2291 = 4.e-6*t802*t2155;
  t2293 = t2283 + t2288 + t2291;
  t2296 = -0.14871*t2293;
  t1871 = 0.15121*t1818;
  t1874 = t1871 + t1864;
  t1859 = -0.15121*t1818;
  t1865 = t1859 + t1864;
  t2531 = t492*t515*t461;
  t2559 = t524*t461*t530;
  t2587 = t2531 + t2559;
  t2610 = -1.*t524*t492*t461;
  t2686 = t515*t461*t530;
  t2710 = t2610 + t2686;
  t2734 = t485*t432;
  t2741 = -4.e-6*t432*t2587;
  t2746 = t1448*t2710;
  t2752 = t2734 + t2741 + t2746;
  t2758 = t426*t485;
  t2770 = 4.e-6*t1426*t2587;
  t2772 = -1.*t432*t2710;
  t2774 = t2758 + t2770 + t2772;
  t2791 = 4.e-6*t1426*t485;
  t2809 = t1556*t2587;
  t2813 = 4.e-6*t432*t2710;
  t2816 = t2791 + t2809 + t2813;
  t2400 = -4.9936e-13*var2[10];
  t2411 = -0.038749*t1426;
  t2419 = 6.19984e-13*t1526;
  t2426 = -0.281210000004*t432;
  t2436 = t2400 + t2411 + t2419 + t2426;
  t2984 = Sin(var2[3]);
  t2994 = -1.*t485*t492*t515*t2984;
  t2997 = -1.*t524*t485*t2984*t530;
  t2998 = t2994 + t2997;
  t3001 = t524*t485*t492*t2984;
  t3006 = -1.*t485*t515*t2984*t530;
  t3014 = t3001 + t3006;
  t3024 = t432*t2984*t461;
  t3025 = -4.e-6*t432*t2998;
  t3027 = t1448*t3014;
  t3032 = t3024 + t3025 + t3027;
  t3035 = t426*t2984*t461;
  t3038 = 4.e-6*t1426*t2998;
  t3042 = -1.*t432*t3014;
  t3044 = t3035 + t3038 + t3042;
  t3056 = 4.e-6*t1426*t2984*t461;
  t3073 = t1556*t2998;
  t3074 = 4.e-6*t432*t3014;
  t3082 = t3056 + t3073 + t3074;
  t3163 = Cos(var2[3]);
  t3174 = t3163*t492*t461;
  t3192 = -1.*t2984*t530;
  t3205 = t3174 + t3192;
  t3224 = -1.*t492*t2984;
  t3233 = -1.*t3163*t461*t530;
  t3243 = t3224 + t3233;
  t3247 = -1.*t515*t3205;
  t3249 = t524*t3243;
  t3255 = t3247 + t3249;
  t3262 = t524*t3205;
  t3267 = t515*t3243;
  t3269 = t3262 + t3267;
  t3284 = -1.*t3163*t485*t432;
  t3290 = -4.e-6*t432*t3255;
  t3299 = t1448*t3269;
  t3308 = t3284 + t3290 + t3299;
  t3317 = -1.*t426*t3163*t485;
  t3319 = 4.e-6*t1426*t3255;
  t3320 = -1.*t432*t3269;
  t3322 = t3317 + t3319 + t3320;
  t3324 = -4.e-6*t1426*t3163*t485;
  t3325 = t1556*t3255;
  t3330 = 4.e-6*t432*t3269;
  t3339 = t3324 + t3325 + t3330;
  t3461 = -1.*t492*t2984*t461;
  t3473 = -1.*t3163*t530;
  t3477 = t3461 + t3473;
  t3497 = t3163*t492;
  t3500 = -1.*t2984*t461*t530;
  t3513 = t3497 + t3500;
  t3526 = t515*t3477;
  t3534 = t524*t3513;
  t3544 = t3526 + t3534;
  t3565 = t524*t3477;
  t3573 = -1.*t515*t3513;
  t3575 = t3565 + t3573;
  t3577 = 4.e-6*t432*t3544;
  t3579 = t1556*t3575;
  t3584 = t3577 + t3579;
  t3590 = -1.*t432*t3544;
  t3593 = 4.e-6*t1426*t3575;
  t3597 = t3590 + t3593;
  t3605 = t1448*t3544;
  t3608 = -4.e-6*t432*t3575;
  t3620 = t3605 + t3608;
  t2338 = 0.15121*t515;
  t2341 = t2312 + t2338;
  t2358 = t2312 + t1864;
  t3739 = t492*t2984*t461;
  t3741 = t3163*t530;
  t3747 = t3739 + t3741;
  t3761 = -1.*t515*t3747;
  t3762 = t3761 + t3534;
  t3779 = -1.*t524*t3747;
  t3782 = t3779 + t3573;
  t3793 = 4.e-6*t432*t3762;
  t3795 = t1556*t3782;
  t3796 = t3793 + t3795;
  t3807 = -1.*t432*t3762;
  t3810 = 4.e-6*t1426*t3782;
  t3811 = t3807 + t3810;
  t3817 = t1448*t3762;
  t3825 = -4.e-6*t432*t3782;
  t3826 = t3817 + t3825;
  t430 = -0.281210000004*t426;
  t452 = -4.9936e-13 + t430 + t443;
  t476 = 1.124840000016e-6*t426;
  t480 = 1.5499600000248e-7*t432;
  t482 = -1.2484e-7 + t476 + t480;
  t674 = -0.03874900000062*t426;
  t681 = 0.281210000008499*t432;
  t685 = t674 + t681;
  t3937 = t524*t3747;
  t3945 = t515*t3513;
  t3946 = t3937 + t3945;
  t3956 = t485*t432*t2984;
  t3957 = -1.*t426*t3946;
  t3960 = t3956 + t3793 + t3957;
  t3964 = -4.e-6*t485*t432*t2984;
  t3965 = -1.6e-11*t432*t3762;
  t3966 = 4.e-6*t426*t3946;
  t3967 = t3964 + t3965 + t3966;
  t3969 = -1.*t426*t485*t2984;
  t3976 = -4.e-6*t426*t3762;
  t3978 = -1.000000000016*t432*t3946;
  t3985 = t3969 + t3976 + t3978;
  t1357 = -0.0398890000006382*t735;
  t1375 = 0.50315000001605*t802;
  t1393 = t1357 + t1375;
  t1465 = -0.503150000008*t735;
  t1475 = -5.04e-14 + t1465 + t1056;
  t1515 = 2.012600000032e-6*t735;
  t1518 = 1.59556000002553e-7*t802;
  t1522 = -1.26e-8 + t1515 + t1518;
  t4057 = -1.*t485*t432*t2984;
  t4067 = -4.e-6*t432*t3762;
  t4070 = t1448*t3946;
  t4078 = t4057 + t4067 + t4070;
  t4092 = 4.e-6*t1426*t3762;
  t4099 = -1.*t432*t3946;
  t4104 = t3969 + t4092 + t4099;
  t4113 = -4.e-6*t1426*t485*t2984;
  t4120 = t1556*t3762;
  t4122 = 4.e-6*t432*t3946;
  t4124 = t4113 + t4120 + t4122;
  t4204 = t3163*t485*t492*t515;
  t4207 = t524*t3163*t485*t530;
  t4210 = t4204 + t4207;
  t4213 = -1.*t524*t3163*t485*t492;
  t4214 = t3163*t485*t515*t530;
  t4218 = t4213 + t4214;
  t4222 = -1.*t3163*t432*t461;
  t4223 = -4.e-6*t432*t4210;
  t4227 = t1448*t4218;
  t4230 = t4222 + t4223 + t4227;
  t4237 = -1.*t426*t3163*t461;
  t4239 = 4.e-6*t1426*t4210;
  t4240 = -1.*t432*t4218;
  t4244 = t4237 + t4239 + t4240;
  t4249 = -4.e-6*t1426*t3163*t461;
  t4251 = t1556*t4210;
  t4253 = 4.e-6*t432*t4218;
  t4254 = t4249 + t4251 + t4253;
  t4359 = t492*t2984;
  t4361 = t3163*t461*t530;
  t4362 = t4359 + t4361;
  t4364 = t515*t3205;
  t4366 = t524*t4362;
  t4374 = t4364 + t4366;
  t4378 = -1.*t515*t4362;
  t4380 = t3262 + t4378;
  t4383 = 4.e-6*t432*t4374;
  t4388 = t1556*t4380;
  t4389 = t4383 + t4388;
  t4394 = -1.*t432*t4374;
  t4395 = 4.e-6*t1426*t4380;
  t4398 = t4394 + t4395;
  t4403 = t1448*t4374;
  t4410 = -4.e-6*t432*t4380;
  t4415 = t4403 + t4410;
  t4519 = -1.*t3163*t492*t461;
  t4521 = t2984*t530;
  t4522 = t4519 + t4521;
  t4531 = -1.*t515*t4522;
  t4537 = t4531 + t4366;
  t4545 = -1.*t524*t4522;
  t4549 = t4545 + t4378;
  t4553 = 4.e-6*t432*t4537;
  t4556 = t1556*t4549;
  t4560 = t4553 + t4556;
  t4569 = -1.*t432*t4537;
  t4571 = 4.e-6*t1426*t4549;
  t4575 = t4569 + t4571;
  t4599 = t1448*t4537;
  t4604 = -4.e-6*t432*t4549;
  t4605 = t4599 + t4604;
  t4739 = t524*t4522;
  t4746 = t515*t4362;
  t4756 = t4739 + t4746;
  t4760 = -1.*t426*t4756;
  t4771 = t3284 + t4553 + t4760;
  t4797 = 4.e-6*t3163*t485*t432;
  t4798 = -1.6e-11*t432*t4537;
  t4803 = 4.e-6*t426*t4756;
  t4804 = t4797 + t4798 + t4803;
  t4813 = t426*t3163*t485;
  t4814 = -4.e-6*t426*t4537;
  t4815 = -1.000000000016*t432*t4756;
  t4816 = t4813 + t4814 + t4815;
  t4898 = t3163*t485*t432;
  t4907 = -4.e-6*t432*t4537;
  t4909 = t1448*t4756;
  t4915 = t4898 + t4907 + t4909;
  t4920 = 4.e-6*t1426*t4537;
  t4922 = -1.*t432*t4756;
  t4929 = t4813 + t4920 + t4922;
  t4933 = 4.e-6*t1426*t3163*t485;
  t4935 = t1556*t4537;
  t4936 = 4.e-6*t432*t4756;
  t4943 = t4933 + t4935 + t4936;
  t4133 = t735*t4104;
  t5166 = Cos(var2[13]);
  t5170 = Sin(var2[13]);
  t5176 = 4.e-6*t5170;
  t5171 = -2.8e-11*t5170;
  t5204 = 7.e-6*t5170;
  t5226 = Cos(var2[12]);
  t5222 = Sin(var2[12]);
  t5274 = Cos(var2[14]);
  t5277 = -1.*t5274;
  t5278 = 1. + t5277;
  t5291 = Sin(var2[14]);
  t5192 = -7.e-6*t5166;
  t5224 = -1.*t485*t492*t5222;
  t5230 = -1.*t5226*t485*t530;
  t5231 = t5224 + t5230;
  t5203 = 4.e-6*t5166;
  t5244 = t5226*t485*t492;
  t5249 = -1.*t485*t5222*t530;
  t5251 = t5244 + t5249;
  t5283 = 4.e-6*t5278;
  t5174 = 7.e-6*t5166;
  t5395 = -4.e-6*t5170;
  t5471 = -2.8e-11*t5278;
  t5361 = 7.e-6*t5278;
  t5233 = -1.*t5166;
  t5515 = 2.8e-11*t5170;
  t5237 = -4.e-6*t5166;
  t5419 = -7.e-6*t5170;
  t5595 = -4.e-6*t5291;
  t5398 = t5192 + t5395;
  t5407 = t5398*t461;
  t5410 = -6.5e-11*t5170*t5231;
  t5421 = t5203 + t5419;
  t5423 = t5421*t5251;
  t5438 = t5407 + t5410 + t5423;
  t5560 = -1.*t5291;
  t5499 = -1.000000000049*t5170*t461;
  t5500 = t5174 + t5395;
  t5501 = t5500*t5231;
  t5516 = t5166 + t5515;
  t5532 = t5516*t5251;
  t5533 = t5499 + t5501 + t5532;
  t5617 = t5233 + t5515;
  t5618 = t5617*t461;
  t5633 = t5237 + t5419;
  t5635 = t5633*t5231;
  t5640 = -1.000000000016*t5170*t5251;
  t5648 = t5618 + t5635 + t5640;
  t5339 = -7.e-6*t5291;
  t5676 = -7.e-6*t5278;
  t5369 = 4.e-6*t5291;
  t5780 = -1. + t5274;
  t5782 = 4.e-6*t5780;
  t5454 = 7.e-6*t5291;
  t5701 = 2.8e-11*t5278;
  t6046 = 1. + t5233;
  t6079 = -7.e-6*t6046;
  t5953 = -2.8e-11*t5291;
  t6164 = -1. + t5166;
  t6177 = 4.e-6*t6164;
  t6047 = 2.8e-11*t6046;
  t6133 = 4.e-6*t5274;
  t6049 = -1.*t5170;
  t6069 = t6047 + t6049;
  t6070 = t6069*t461;
  t6082 = t6079 + t5395;
  t6084 = t6082*t5231;
  t6089 = -1.000000000016*t6046;
  t6092 = 1. + t6089;
  t6094 = t6092*t5251;
  t6098 = t6070 + t6084 + t6094;
  t6210 = t6177 + t5419;
  t6212 = t6210*t461;
  t6225 = -6.5e-11*t6046;
  t6234 = 1. + t6225;
  t6247 = t6234*t5231;
  t6258 = t6079 + t5176;
  t6272 = t6258*t5251;
  t6274 = t6212 + t6247 + t6272;
  t6123 = -7.e-6*t5274;
  t6333 = -1.000000000049*t6046;
  t6335 = 1. + t6333;
  t6337 = t6335*t461;
  t6343 = t6177 + t5204;
  t6346 = t6343*t5231;
  t6349 = t6047 + t5170;
  t6351 = t6349*t5251;
  t6352 = t6337 + t6346 + t6351;
  t5979 = -4.e-6*t5274;
  t6427 = 2.8e-11*t5291;
  t6313 = 7.e-6*t5274;
  t6555 = -1.*t5226;
  t6564 = 1. + t6555;
  t6573 = 0.15121*t5222;
  t6611 = 7.e-6*t6046;
  t5270 = -2.598649999999999e-7*var2[14];
  t5282 = -2.3905277499999995e-16*t5278;
  t5355 = t5283 + t5339;
  t5359 = -0.038922999986*t5355;
  t5373 = t5361 + t5369;
  t5389 = -0.503149000008*t5373;
  t5390 = t5270 + t5282 + t5359 + t5389;
  t6730 = -1.*t5226*t485*t492;
  t6764 = t485*t5222*t530;
  t6770 = t6730 + t6764;
  t5549 = 1.8190549999999993e-12*var2[14];
  t5551 = -0.5031490000160505*t5278;
  t5584 = t5471 + t5560;
  t5591 = -0.038922999986*t5584;
  t5597 = t5361 + t5595;
  t5609 = -3.6777349999999994e-6*t5597;
  t5615 = t5549 + t5551 + t5591 + t5609;
  t5441 = 1.0394599999999997e-12*var2[14];
  t5449 = -0.03892299998790722*t5278;
  t5462 = t5283 + t5454;
  t5466 = -3.6777349999999994e-6*t5462;
  t5472 = t5471 + t5291;
  t5474 = -0.503149000008*t5472;
  t5479 = t5441 + t5449 + t5466 + t5474;
  t5802 = t5782 + t5454;
  t6774 = t6258*t5231;
  t6775 = t6234*t6770;
  t6780 = t6774 + t6775;
  t5889 = t5701 + t5291;
  t6783 = t6092*t5231;
  t6784 = t6082*t6770;
  t6786 = t6783 + t6784;
  t5831 = -1.000000000049*t5278;
  t5847 = 1. + t5831;
  t6795 = t6349*t5231;
  t6817 = t6343*t6770;
  t6830 = t6795 + t6817;
  t5677 = t5676 + t5595;
  t5718 = -1.000000000016*t5278;
  t5726 = 1. + t5718;
  t5703 = t5701 + t5560;
  t5767 = -6.5e-11*t5278;
  t5768 = 1. + t5767;
  t5787 = t5676 + t5369;
  t5783 = t5782 + t5339;
  t6946 = 0.15121*t5226;
  t6602 = 1.0248489999999998e-12*var2[13];
  t6603 = -0.28120900000849935*t6046;
  t6604 = -2.8e-11*t6046;
  t6605 = t6604 + t6049;
  t6607 = -0.038748999993*t6605;
  t6616 = t6611 + t5395;
  t6620 = -2.123459e-6*t6616;
  t6621 = t6602 + t6603 + t6607 + t6620;
  t6623 = t6621*t5231;
  t6624 = -1.4640699999999997e-7*var2[13];
  t6630 = -1.38024835e-16*t6046;
  t6634 = 4.e-6*t6046;
  t6638 = t6634 + t5419;
  t6643 = -0.038748999993*t6638;
  t6666 = t6611 + t5176;
  t6680 = -0.281209000004*t6666;
  t6709 = t6624 + t6630 + t6643 + t6680;
  t6771 = t6709*t6770;
  t6781 = t5390*t6780;
  t6787 = t5615*t6786;
  t6833 = t5479*t6830;
  t6845 = t5802*t6780;
  t6848 = t5889*t6786;
  t6849 = t5847*t6830;
  t6863 = t6845 + t6848 + t6849;
  t6865 = -0.038924*t6863;
  t6866 = t5677*t6780;
  t6878 = t5726*t6786;
  t6887 = t5703*t6830;
  t6890 = t6866 + t6878 + t6887;
  t6891 = -0.80315*t6890;
  t6896 = t5768*t6780;
  t6907 = t5787*t6786;
  t6909 = t5783*t6830;
  t6914 = t6896 + t6907 + t6909;
  t6918 = 0.148705*t6914;
  t6588 = -0.15121*t6564;
  t6589 = t6588 + t6573;
  t6570 = 0.15121*t6564;
  t6577 = t6570 + t6573;
  t7090 = t492*t5222*t461;
  t7098 = t5226*t461*t530;
  t7100 = t7090 + t7098;
  t7120 = -1.*t5226*t492*t461;
  t7125 = t5222*t461*t530;
  t7145 = t7120 + t7125;
  t7157 = t485*t6069;
  t7162 = t6082*t7100;
  t7164 = t6092*t7145;
  t7171 = t7157 + t7162 + t7164;
  t7181 = t485*t6210;
  t7197 = t6234*t7100;
  t7202 = t6258*t7145;
  t7205 = t7181 + t7197 + t7202;
  t7207 = t6335*t485;
  t7209 = t6343*t7100;
  t7212 = t6349*t7145;
  t7220 = t7207 + t7209 + t7212;
  t6987 = 5.856279999999999e-13*var2[13];
  t6993 = -0.0387489999948987*t6046;
  t7033 = t6634 + t5204;
  t7035 = -2.123459e-6*t7033;
  t7047 = t6604 + t5170;
  t7051 = -0.281209000004*t7047;
  t7059 = t6987 + t6993 + t7035 + t7051;
  t7433 = -1.*t485*t492*t5222*t2984;
  t7440 = -1.*t5226*t485*t2984*t530;
  t7447 = t7433 + t7440;
  t7454 = t5226*t485*t492*t2984;
  t7458 = -1.*t485*t5222*t2984*t530;
  t7463 = t7454 + t7458;
  t7472 = t6069*t2984*t461;
  t7478 = t6082*t7447;
  t7488 = t6092*t7463;
  t7489 = t7472 + t7478 + t7488;
  t7499 = t6210*t2984*t461;
  t7501 = t6234*t7447;
  t7505 = t6258*t7463;
  t7506 = t7499 + t7501 + t7505;
  t7512 = t6335*t2984*t461;
  t7513 = t6343*t7447;
  t7515 = t6349*t7463;
  t7518 = t7512 + t7513 + t7515;
  t7585 = -1.*t5222*t3205;
  t7589 = t5226*t3243;
  t7607 = t7585 + t7589;
  t7629 = t5226*t3205;
  t7632 = t5222*t3243;
  t7639 = t7629 + t7632;
  t7662 = -1.*t3163*t485*t6069;
  t7672 = t6082*t7607;
  t7680 = t6092*t7639;
  t7687 = t7662 + t7672 + t7680;
  t7699 = -1.*t3163*t485*t6210;
  t7700 = t6234*t7607;
  t7707 = t6258*t7639;
  t7713 = t7699 + t7700 + t7707;
  t7732 = -1.*t6335*t3163*t485;
  t7741 = t6343*t7607;
  t7766 = t6349*t7639;
  t7767 = t7732 + t7741 + t7766;
  t7886 = t5222*t3477;
  t7891 = t5226*t3513;
  t7901 = t7886 + t7891;
  t7924 = t5226*t3477;
  t7929 = -1.*t5222*t3513;
  t7934 = t7924 + t7929;
  t7946 = t6258*t7901;
  t7949 = t6234*t7934;
  t7950 = t7946 + t7949;
  t7955 = t6092*t7901;
  t7956 = t6082*t7934;
  t7957 = t7955 + t7956;
  t7966 = t6349*t7901;
  t7967 = t6343*t7934;
  t7968 = t7966 + t7967;
  t6948 = -0.15121*t5222;
  t6969 = t6946 + t6948;
  t6972 = t6946 + t6573;
  t8109 = -1.*t5222*t3747;
  t8112 = t8109 + t7891;
  t8116 = -1.*t5226*t3747;
  t8119 = t8116 + t7929;
  t8128 = t6258*t8112;
  t8129 = t6234*t8119;
  t8132 = t8128 + t8129;
  t8140 = t6092*t8112;
  t8145 = t6082*t8119;
  t8154 = t8140 + t8145;
  t8162 = t6349*t8112;
  t8164 = t6343*t8119;
  t8166 = t8162 + t8164;
  t5172 = t5166 + t5171;
  t5173 = -0.281209000004*t5172;
  t5178 = t5174 + t5176;
  t5179 = -2.123459e-6*t5178;
  t5180 = -0.0387489999948987*t5170;
  t5182 = 5.856279999999999e-13 + t5173 + t5179 + t5180;
  t5197 = t5192 + t5176;
  t5200 = -0.038748999993*t5197;
  t5205 = t5203 + t5204;
  t5207 = -0.281209000004*t5205;
  t5208 = -1.38024835e-16*t5170;
  t5217 = -1.4640699999999997e-7 + t5200 + t5207 + t5208;
  t5234 = t5233 + t5171;
  t5235 = -0.038748999993*t5234;
  t5240 = t5237 + t5204;
  t5241 = -2.123459e-6*t5240;
  t5242 = -0.28120900000849935*t5170;
  t5243 = 1.0248489999999998e-12 + t5235 + t5241 + t5242;
  t8239 = t5226*t3747;
  t8240 = t5222*t3513;
  t8247 = t8239 + t8240;
  t8252 = -1.*t485*t5398*t2984;
  t8253 = -6.5e-11*t5170*t8112;
  t8254 = t5421*t8247;
  t8256 = t8252 + t8253 + t8254;
  t8259 = 1.000000000049*t485*t5170*t2984;
  t8260 = t5500*t8112;
  t8261 = t5516*t8247;
  t8262 = t8259 + t8260 + t8261;
  t8266 = -1.*t485*t5617*t2984;
  t8273 = t5633*t8112;
  t8275 = -1.000000000016*t5170*t8247;
  t8278 = t8266 + t8273 + t8275;
  t5966 = t5277 + t5953;
  t5967 = -0.038922999986*t5966;
  t6014 = t5979 + t5454;
  t6028 = -3.6777349999999994e-6*t6014;
  t6040 = -0.5031490000160505*t5291;
  t6045 = 1.8190549999999993e-12 + t5967 + t6028 + t6040;
  t6124 = t6123 + t5369;
  t6126 = -0.038922999986*t6124;
  t6141 = t6133 + t5454;
  t6148 = -0.503149000008*t6141;
  t6149 = -2.3905277499999995e-16*t5291;
  t6150 = -2.598649999999999e-7 + t6126 + t6148 + t6149;
  t6288 = t5274 + t5953;
  t6299 = -0.503149000008*t6288;
  t6322 = t6313 + t5369;
  t6327 = -3.6777349999999994e-6*t6322;
  t6328 = -0.03892299998790722*t5291;
  t6329 = 1.0394599999999997e-12 + t6299 + t6327 + t6328;
  t6358 = t6133 + t5339;
  t8320 = -1.*t485*t6069*t2984;
  t8321 = t6082*t8112;
  t8323 = t6092*t8247;
  t8324 = t8320 + t8321 + t8323;
  t8335 = -1.*t485*t6210*t2984;
  t8337 = t6234*t8112;
  t8343 = t6258*t8247;
  t8345 = t8335 + t8337 + t8343;
  t6384 = t6123 + t5595;
  t8349 = -1.*t6335*t485*t2984;
  t8352 = t6343*t8112;
  t8353 = t6349*t8247;
  t8356 = t8349 + t8352 + t8353;
  t6409 = t5979 + t5339;
  t6430 = t5277 + t6427;
  t6496 = t5274 + t6427;
  t6505 = t6313 + t5595;
  t8433 = t3163*t485*t492*t5222;
  t8434 = t5226*t3163*t485*t530;
  t8435 = t8433 + t8434;
  t8439 = -1.*t5226*t3163*t485*t492;
  t8440 = t3163*t485*t5222*t530;
  t8441 = t8439 + t8440;
  t8443 = -1.*t3163*t6069*t461;
  t8445 = t6082*t8435;
  t8451 = t6092*t8441;
  t8452 = t8443 + t8445 + t8451;
  t8454 = -1.*t3163*t6210*t461;
  t8455 = t6234*t8435;
  t8456 = t6258*t8441;
  t8460 = t8454 + t8455 + t8456;
  t8465 = -1.*t6335*t3163*t461;
  t8466 = t6343*t8435;
  t8468 = t6349*t8441;
  t8471 = t8465 + t8466 + t8468;
  t8583 = t5222*t3205;
  t8584 = t5226*t4362;
  t8585 = t8583 + t8584;
  t8599 = -1.*t5222*t4362;
  t8600 = t7629 + t8599;
  t8603 = t6258*t8585;
  t8607 = t6234*t8600;
  t8608 = t8603 + t8607;
  t8614 = t6092*t8585;
  t8615 = t6082*t8600;
  t8617 = t8614 + t8615;
  t8627 = t6349*t8585;
  t8628 = t6343*t8600;
  t8632 = t8627 + t8628;
  t8723 = -1.*t5222*t4522;
  t8726 = t8723 + t8584;
  t8735 = -1.*t5226*t4522;
  t8737 = t8735 + t8599;
  t8739 = t6258*t8726;
  t8740 = t6234*t8737;
  t8744 = t8739 + t8740;
  t8747 = t6092*t8726;
  t8757 = t6082*t8737;
  t8760 = t8747 + t8757;
  t8766 = t6349*t8726;
  t8767 = t6343*t8737;
  t8769 = t8766 + t8767;
  t8865 = t5226*t4522;
  t8869 = t5222*t4362;
  t8870 = t8865 + t8869;
  t8880 = t3163*t485*t5398;
  t8884 = -6.5e-11*t5170*t8726;
  t8886 = t5421*t8870;
  t8887 = t8880 + t8884 + t8886;
  t8894 = -1.000000000049*t3163*t485*t5170;
  t8896 = t5500*t8726;
  t8897 = t5516*t8870;
  t8900 = t8894 + t8896 + t8897;
  t8905 = t3163*t485*t5617;
  t8908 = t5633*t8726;
  t8909 = -1.000000000016*t5170*t8870;
  t8911 = t8905 + t8908 + t8909;
  t8982 = t3163*t485*t6069;
  t8983 = t6082*t8726;
  t8988 = t6092*t8870;
  t8990 = t8982 + t8983 + t8988;
  t8997 = t3163*t485*t6210;
  t9000 = t6234*t8726;
  t9010 = t6258*t8870;
  t9011 = t8997 + t9000 + t9010;
  t9019 = t6335*t3163*t485;
  t9022 = t6343*t8726;
  t9023 = t6349*t8870;
  t9030 = t9019 + t9022 + t9023;
  t9420 = Power(t485,2);
  t9424 = Power(t492,2);
  t9427 = t9420*t9424;
  t9428 = Power(t3747,2);
  t9430 = t9427 + t9428;
  t9445 = 1/t9430;
  t4197 = -1.*t3163*t485*t492*t1874;
  t4202 = t3163*t485*t1865*t530;
  t4523 = t2341*t4522;
  t4527 = t2358*t4362;
  t4355 = t1865*t3205;
  t4363 = t1874*t4362;
  t5035 = t1874*t3747;
  t5037 = t1865*t3513;
  p_output1[0]=var3[0] + (t1950*t2587 + t1895*t2710 + t1065*t2752 + t2436*t485 - 1.*t1874*t461*t492 + t1865*t461*t530 - 0.041195*(t2774*t735 + 4.e-6*t2816*t755 - 1.*t2752*t802) - 0.14871*(t1267*t2816 + 4.e-6*t2774*t755 + 4.e-6*t2752*t802) + 0.803147*(t1163*t2752 + t2774*t802 - 4.e-6*t2816*t802) + t2774*t821 + t2816*t983)*var3[4] + (t1897 + t2014 + t2056 + t2138 + t2160 + t2230 + t2277 + t2296 - 1.*t1865*t485*t492 - 1.*t1874*t485*t530)*var3[5] + (t1897 + t2014 + t2056 + t2138 + t2160 + t2230 + t2277 + t2296 + t2341*t485*t492 - 1.*t2358*t485*t530)*var3[9] + (t1065*t1120 + t452*t461 + t482*t592 + t685*t692 + t821*t879 - 0.041195*(4.e-6*t1018*t755 - 1.*t1120*t802 + t735*t879) - 0.14871*(t1018*t1267 + 4.e-6*t1120*t802 + 4.e-6*t755*t879) + 0.803147*(t1120*t1163 - 4.e-6*t1018*t802 + t802*t879) + t1018*t983)*var3[10] + (t1393*t1460 + t1475*t1507 + t1522*t1603 + 0.803147*(t1507*t735 - 4.e-6*t1603*t735 - 1.000000000016*t1460*t802) - 0.14871*(4.e-6*t1460*t735 + 4.e-6*t1507*t802 - 1.6e-11*t1603*t802) - 0.041195*(-1.*t1460*t735 - 1.*t1507*t802 + 4.e-6*t1603*t802))*var3[11] + 5.*t214*t387*var4[0] + 20.*t184*t363*t369*var4[10] - 5.*t214*t387*var4[10] + 30.*t315*t324*t326*var4[20] - 20.*t184*t363*t369*var4[20] + 20.*t203*t206*t221*var4[30] - 30.*t315*t324*t326*var4[30] - 20.*t203*t206*t221*var4[40] + 5.*t185*t79*var4[40] - 5.*t185*t79*var4[50];
  p_output1[1]=var3[1] + (t1874*t3205 + t1865*t3243 + t1950*t3255 + t1895*t3269 + t1065*t3308 - 1.*t2436*t3163*t485 - 0.041195*(t3322*t735 + 4.e-6*t3339*t755 - 1.*t3308*t802) - 0.14871*(t1267*t3339 + 4.e-6*t3322*t755 + 4.e-6*t3308*t802) + 0.803147*(t1163*t3308 + t3322*t802 - 4.e-6*t3339*t802) + t3322*t821 + t3339*t983)*var3[3] + (t1950*t2998 + t1895*t3014 + t1065*t3032 + t2436*t2984*t461 + t1874*t2984*t485*t492 - 1.*t1865*t2984*t485*t530 - 0.041195*(t3044*t735 + 4.e-6*t3082*t755 - 1.*t3032*t802) - 0.14871*(t1267*t3082 + 4.e-6*t3044*t755 + 4.e-6*t3032*t802) + 0.803147*(t1163*t3032 + t3044*t802 - 4.e-6*t3082*t802) + t3044*t821 + t3082*t983)*var3[4] + (t1865*t3477 + t1874*t3513 + t1895*t3544 + t1950*t3575 + t1065*t3620 + 0.803147*(t1163*t3620 - 4.e-6*t3584*t802 + t3597*t802) - 0.041195*(t3597*t735 + 4.e-6*t3584*t755 - 1.*t3620*t802) - 0.14871*(t1267*t3584 + 4.e-6*t3597*t755 + 4.e-6*t3620*t802) + t3597*t821 + t3584*t983)*var3[5] + (t2358*t3513 + t2341*t3747 + t1895*t3762 + t1950*t3782 + t1065*t3826 + 0.803147*(t1163*t3826 - 4.e-6*t3796*t802 + t3811*t802) - 0.041195*(t3811*t735 + 4.e-6*t3796*t755 - 1.*t3826*t802) - 0.14871*(t1267*t3796 + 4.e-6*t3811*t755 + 4.e-6*t3826*t802) + t3811*t821 + t3796*t983)*var3[9] + (t1065*t3985 + t3762*t482 - 1.*t2984*t452*t485 + t3946*t685 + 0.803147*(t1163*t3985 + t3960*t802 - 4.e-6*t3967*t802) - 0.041195*(t3960*t735 + 4.e-6*t3967*t755 - 1.*t3985*t802) - 0.14871*(t1267*t3967 + 4.e-6*t3960*t755 + 4.e-6*t3985*t802) + t3960*t821 + t3967*t983)*var3[10] + (t1393*t4078 + t1475*t4104 + t1522*t4124 + 0.803147*(t4133 - 4.e-6*t4124*t735 - 1.000000000016*t4078*t802) - 0.14871*(4.e-6*t4078*t735 + 4.e-6*t4104*t802 - 1.6e-11*t4124*t802) - 0.041195*(-1.*t4078*t735 - 1.*t4104*t802 + 4.e-6*t4124*t802))*var3[11] + 5.*t214*t387*var4[1] + 20.*t184*t363*t369*var4[11] - 5.*t214*t387*var4[11] + 30.*t315*t324*t326*var4[21] - 20.*t184*t363*t369*var4[21] + 20.*t203*t206*t221*var4[31] - 30.*t315*t324*t326*var4[31] - 20.*t203*t206*t221*var4[41] + 5.*t185*t79*var4[41] - 5.*t185*t79*var4[51];
  p_output1[2]=var3[2] + (t1950*t3762 + t1895*t3946 + t1065*t4078 - 1.*t2436*t2984*t485 + t5035 + t5037 - 0.041195*(t4133 + 4.e-6*t4124*t755 - 1.*t4078*t802) - 0.14871*(t1267*t4124 + 4.e-6*t4104*t755 + 4.e-6*t4078*t802) + 0.803147*(t1163*t4078 + t4104*t802 - 4.e-6*t4124*t802) + t4104*t821 + t4124*t983)*var3[3] + (t4197 + t4202 + t1950*t4210 + t1895*t4218 + t1065*t4230 - 1.*t2436*t3163*t461 - 0.041195*(t4244*t735 + 4.e-6*t4254*t755 - 1.*t4230*t802) - 0.14871*(t1267*t4254 + 4.e-6*t4244*t755 + 4.e-6*t4230*t802) + 0.803147*(t1163*t4230 + t4244*t802 - 4.e-6*t4254*t802) + t4244*t821 + t4254*t983)*var3[4] + (t4355 + t4363 + t1895*t4374 + t1950*t4380 + t1065*t4415 + 0.803147*(t1163*t4415 - 4.e-6*t4389*t802 + t4398*t802) - 0.041195*(t4398*t735 + 4.e-6*t4389*t755 - 1.*t4415*t802) - 0.14871*(t1267*t4389 + 4.e-6*t4398*t755 + 4.e-6*t4415*t802) + t4398*t821 + t4389*t983)*var3[5] + (t4523 + t4527 + t1895*t4537 + t1950*t4549 + t1065*t4605 + 0.803147*(t1163*t4605 - 4.e-6*t4560*t802 + t4575*t802) - 0.041195*(t4575*t735 + 4.e-6*t4560*t755 - 1.*t4605*t802) - 0.14871*(t1267*t4560 + 4.e-6*t4575*t755 + 4.e-6*t4605*t802) + t4575*t821 + t4560*t983)*var3[9] + (t1065*t4816 + t4537*t482 + t3163*t452*t485 + t4756*t685 + 0.803147*(t1163*t4816 + t4771*t802 - 4.e-6*t4804*t802) - 0.041195*(t4771*t735 + 4.e-6*t4804*t755 - 1.*t4816*t802) - 0.14871*(t1267*t4804 + 4.e-6*t4771*t755 + 4.e-6*t4816*t802) + t4771*t821 + t4804*t983)*var3[10] + (t1393*t4915 + t1475*t4929 + t1522*t4943 + 0.803147*(t4929*t735 - 4.e-6*t4943*t735 - 1.000000000016*t4915*t802) - 0.14871*(4.e-6*t4915*t735 + 4.e-6*t4929*t802 - 1.6e-11*t4943*t802) - 0.041195*(-1.*t4915*t735 - 1.*t4929*t802 + 4.e-6*t4943*t802))*var3[11] + 5.*t214*t387*var4[2] + 20.*t184*t363*t369*var4[12] - 5.*t214*t387*var4[12] + 30.*t315*t324*t326*var4[22] - 20.*t184*t363*t369*var4[22] + 20.*t203*t206*t221*var4[32] - 30.*t315*t324*t326*var4[32] - 20.*t203*t206*t221*var4[42] + 5.*t185*t79*var4[42] - 5.*t185*t79*var4[52];
  p_output1[3]=var3[0] + (t461*t530*t6577 - 1.*t461*t492*t6589 + t485*t7059 + t6709*t7100 + t6621*t7145 + t5615*t7171 + t5390*t7205 + t5479*t7220 - 0.80315*(t5726*t7171 + t5677*t7205 + t5703*t7220) + 0.148705*(t5787*t7171 + t5768*t7205 + t5783*t7220) - 0.038924*(t5889*t7171 + t5802*t7205 + t5847*t7220))*var3[4] + (-1.*t485*t492*t6577 - 1.*t485*t530*t6589 + t6623 + t6771 + t6781 + t6787 + t6833 + t6865 + t6891 + t6918)*var3[5] + (t6623 + t6771 + t6781 + t6787 + t6833 + t6865 + t6891 + t6918 + t485*t492*t6969 - 1.*t485*t530*t6972)*var3[12] + (t461*t5182 + t5217*t5231 + t5243*t5251 + t5390*t5438 + t5479*t5533 + t5615*t5648 - 0.80315*(t5438*t5677 + t5533*t5703 + t5648*t5726) + 0.148705*(t5438*t5768 + t5533*t5783 + t5648*t5787) - 0.038924*(t5438*t5802 + t5533*t5847 + t5648*t5889))*var3[13] + (t6045*t6098 + t6150*t6274 + t6329*t6352 + 0.148705*(-6.5e-11*t5291*t6274 + t6098*t6358 + t6352*t6384) - 0.80315*(-1.000000000016*t5291*t6098 + t6274*t6409 + t6352*t6430) - 0.038924*(-1.000000000049*t5291*t6352 + t6098*t6496 + t6274*t6505))*var3[14] + 5.*t214*t387*var4[3] + 20.*t184*t363*t369*var4[13] - 5.*t214*t387*var4[13] + 30.*t315*t324*t326*var4[23] - 20.*t184*t363*t369*var4[23] + 20.*t203*t206*t221*var4[33] - 30.*t315*t324*t326*var4[33] - 20.*t203*t206*t221*var4[43] + 5.*t185*t79*var4[43] - 5.*t185*t79*var4[53];
  p_output1[4]=var3[1] + (t3243*t6577 + t3205*t6589 - 1.*t3163*t485*t7059 + t6709*t7607 + t6621*t7639 + t5615*t7687 + t5390*t7713 + t5479*t7767 - 0.80315*(t5726*t7687 + t5677*t7713 + t5703*t7767) + 0.148705*(t5787*t7687 + t5768*t7713 + t5783*t7767) - 0.038924*(t5889*t7687 + t5802*t7713 + t5847*t7767))*var3[3] + (-1.*t2984*t485*t530*t6577 + t2984*t485*t492*t6589 + t2984*t461*t7059 + t6709*t7447 + t6621*t7463 + t5615*t7489 + t5390*t7506 + t5479*t7518 - 0.80315*(t5726*t7489 + t5677*t7506 + t5703*t7518) + 0.148705*(t5787*t7489 + t5768*t7506 + t5783*t7518) - 0.038924*(t5889*t7489 + t5802*t7506 + t5847*t7518))*var3[4] + (t3477*t6577 + t3513*t6589 + t6621*t7901 + t6709*t7934 + t5390*t7950 + t5615*t7957 + t5479*t7968 - 0.80315*(t5677*t7950 + t5726*t7957 + t5703*t7968) + 0.148705*(t5768*t7950 + t5787*t7957 + t5783*t7968) - 0.038924*(t5802*t7950 + t5889*t7957 + t5847*t7968))*var3[5] + (t3747*t6969 + t3513*t6972 + t6621*t8112 + t6709*t8119 + t5390*t8132 + t5615*t8154 + t5479*t8166 - 0.80315*(t5677*t8132 + t5726*t8154 + t5703*t8166) + 0.148705*(t5768*t8132 + t5787*t8154 + t5783*t8166) - 0.038924*(t5802*t8132 + t5889*t8154 + t5847*t8166))*var3[12] + (-1.*t2984*t485*t5182 + t5217*t8112 + t5243*t8247 + t5390*t8256 + t5479*t8262 + t5615*t8278 - 0.80315*(t5677*t8256 + t5703*t8262 + t5726*t8278) + 0.148705*(t5768*t8256 + t5783*t8262 + t5787*t8278) - 0.038924*(t5802*t8256 + t5847*t8262 + t5889*t8278))*var3[13] + (t6045*t8324 + t6150*t8345 + t6329*t8356 - 0.038924*(t6496*t8324 + t6505*t8345 - 1.000000000049*t5291*t8356) + 0.148705*(t6358*t8324 - 6.5e-11*t5291*t8345 + t6384*t8356) - 0.80315*(-1.000000000016*t5291*t8324 + t6409*t8345 + t6430*t8356))*var3[14] + 5.*t214*t387*var4[4] + 20.*t184*t363*t369*var4[14] - 5.*t214*t387*var4[14] + 30.*t315*t324*t326*var4[24] - 20.*t184*t363*t369*var4[24] + 20.*t203*t206*t221*var4[34] - 30.*t315*t324*t326*var4[34] - 20.*t203*t206*t221*var4[44] + 5.*t185*t79*var4[44] - 5.*t185*t79*var4[54];
  p_output1[5]=var3[2] + (t3513*t6577 + t3747*t6589 - 1.*t2984*t485*t7059 + t6709*t8112 + t6621*t8247 + t5615*t8324 + t5390*t8345 + t5479*t8356 - 0.80315*(t5726*t8324 + t5677*t8345 + t5703*t8356) + 0.148705*(t5787*t8324 + t5768*t8345 + t5783*t8356) - 0.038924*(t5889*t8324 + t5802*t8345 + t5847*t8356))*var3[3] + (t3163*t485*t530*t6577 - 1.*t3163*t485*t492*t6589 - 1.*t3163*t461*t7059 + t6709*t8435 + t6621*t8441 + t5615*t8452 + t5390*t8460 + t5479*t8471 - 0.80315*(t5726*t8452 + t5677*t8460 + t5703*t8471) + 0.148705*(t5787*t8452 + t5768*t8460 + t5783*t8471) - 0.038924*(t5889*t8452 + t5802*t8460 + t5847*t8471))*var3[4] + (t3205*t6577 + t4362*t6589 + t6621*t8585 + t6709*t8600 + t5390*t8608 + t5615*t8617 + t5479*t8632 - 0.80315*(t5677*t8608 + t5726*t8617 + t5703*t8632) + 0.148705*(t5768*t8608 + t5787*t8617 + t5783*t8632) - 0.038924*(t5802*t8608 + t5889*t8617 + t5847*t8632))*var3[5] + (t4522*t6969 + t4362*t6972 + t6621*t8726 + t6709*t8737 + t5390*t8744 + t5615*t8760 + t5479*t8769 - 0.80315*(t5677*t8744 + t5726*t8760 + t5703*t8769) + 0.148705*(t5768*t8744 + t5787*t8760 + t5783*t8769) - 0.038924*(t5802*t8744 + t5889*t8760 + t5847*t8769))*var3[12] + (t3163*t485*t5182 + t5217*t8726 + t5243*t8870 + t5390*t8887 + t5479*t8900 + t5615*t8911 - 0.80315*(t5677*t8887 + t5703*t8900 + t5726*t8911) + 0.148705*(t5768*t8887 + t5783*t8900 + t5787*t8911) - 0.038924*(t5802*t8887 + t5847*t8900 + t5889*t8911))*var3[13] + (t6045*t8990 + t6150*t9011 + t6329*t9030 - 0.038924*(t6496*t8990 + t6505*t9011 - 1.000000000049*t5291*t9030) + 0.148705*(t6358*t8990 - 6.5e-11*t5291*t9011 + t6384*t9030) - 0.80315*(-1.000000000016*t5291*t8990 + t6409*t9011 + t6430*t9030))*var3[14] + 5.*t214*t387*var4[5] + 20.*t184*t363*t369*var4[15] - 5.*t214*t387*var4[15] + 30.*t315*t324*t326*var4[25] - 20.*t184*t363*t369*var4[25] + 20.*t203*t206*t221*var4[35] - 30.*t315*t324*t326*var4[35] - 20.*t203*t206*t221*var4[45] + 5.*t185*t79*var4[45] - 5.*t185*t79*var4[55];
  p_output1[6]=var3[1] + (0.00183*t3205 - 0.002264*t3243 + 0.024028*t3163*t485)*var3[3] + (-0.024028*t2984*t461 + 0.00183*t2984*t485*t492 + 0.002264*t2984*t485*t530)*var3[4] + (-0.002264*t3477 + 0.00183*t3513)*var3[5] + 5.*t214*t387*var4[6] + 20.*t184*t363*t369*var4[16] - 5.*t214*t387*var4[16] + 30.*t315*t324*t326*var4[26] - 20.*t184*t363*t369*var4[26] + 20.*t203*t206*t221*var4[36] - 30.*t315*t324*t326*var4[36] - 20.*t203*t206*t221*var4[46] + 5.*t185*t79*var4[46] - 5.*t185*t79*var4[56];
  p_output1[7]=var3[2] + (-0.002264*t3513 + 0.00183*t3747 + 0.024028*t2984*t485)*var3[3] + (0.024028*t3163*t461 - 0.00183*t3163*t485*t492 - 0.002264*t3163*t485*t530)*var3[4] + (-0.002264*t3205 + 0.00183*t4362)*var3[5] + 5.*t214*t387*var4[7] + 20.*t184*t363*t369*var4[17] - 5.*t214*t387*var4[17] + 30.*t315*t324*t326*var4[27] - 20.*t184*t363*t369*var4[27] + 20.*t203*t206*t221*var4[37] - 30.*t315*t324*t326*var4[37] - 20.*t203*t206*t221*var4[47] + 5.*t185*t79*var4[47] - 5.*t185*t79*var4[57];
  p_output1[8]=t3205*t485*t492*t9445*var3[3] + (-1.*t3477*t461*t492*t9445 + t2984*t9420*t9424*t9445)*var3[4] + (t3513*t485*t492*t9445 - 1.*t3477*t485*t530*t9445)*var3[5] + 5.*t214*t387*var4[8] + 20.*t184*t363*t369*var4[18] - 5.*t214*t387*var4[18] + 30.*t315*t324*t326*var4[28] - 20.*t184*t363*t369*var4[28] + 20.*t203*t206*t221*var4[38] - 30.*t315*t324*t326*var4[38] - 20.*t203*t206*t221*var4[48] + 5.*t185*t79*var4[48] - 5.*t185*t79*var4[58];
  p_output1[9]=(-0.15121*t3762 + 0.15121*t3946 + t5035 + t5037 - 1.*t3513*t6577 - 1.*t3747*t6589 - 0.15121*t8112 + 0.15121*t8247)*var3[3] + (t4197 + t4202 - 0.15121*t4210 + 0.15121*t4218 - 1.*t3163*t485*t530*t6577 + t3163*t485*t492*t6589 - 0.15121*t8435 + 0.15121*t8441)*var3[4] + (t4355 + t4363 + 0.15121*t4374 - 0.15121*t4380 - 1.*t3205*t6577 - 1.*t4362*t6589 + 0.15121*t8585 - 0.15121*t8600)*var3[5] + (t4523 + t4527 + 0.15121*t4537 - 0.15121*t4549)*var3[9] + (-1.*t4522*t6969 - 1.*t4362*t6972 + 0.15121*t8726 - 0.15121*t8737)*var3[12] + 5.*t214*t387*var4[9] + 20.*t184*t363*t369*var4[19] - 5.*t214*t387*var4[19] + 30.*t315*t324*t326*var4[29] - 20.*t184*t363*t369*var4[29] + 20.*t203*t206*t221*var4[39] - 30.*t315*t324*t326*var4[39] - 20.*t203*t206*t221*var4[49] + 5.*t185*t79*var4[49] - 5.*t185*t79*var4[59];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4,*var5,*var6,*var7;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 7)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Seven input(s) required (var1,var2,var3,var4,var5,var6,var7).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 2 && ncols == 1) && 
      !(mrows == 1 && ncols == 2))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 60 && ncols == 1) && 
      !(mrows == 1 && ncols == 60))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }
  mrows = mxGetM(prhs[4]);
  ncols = mxGetN(prhs[4]);
  if( !mxIsDouble(prhs[4]) || mxIsComplex(prhs[4]) ||
    ( !(mrows == 2 && ncols == 1) && 
      !(mrows == 1 && ncols == 2))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var5 is wrong.");
    }
  mrows = mxGetM(prhs[5]);
  ncols = mxGetN(prhs[5]);
  if( !mxIsDouble(prhs[5]) || mxIsComplex(prhs[5]) ||
    ( !(mrows == 1 && ncols == 1) && 
      !(mrows == 1 && ncols == 1))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var6 is wrong.");
    }
  mrows = mxGetM(prhs[6]);
  ncols = mxGetN(prhs[6]);
  if( !mxIsDouble(prhs[6]) || mxIsComplex(prhs[6]) ||
    ( !(mrows == 1 && ncols == 1) && 
      !(mrows == 1 && ncols == 1))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var7 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
  var5 = mxGetPr(prhs[4]);
  var6 = mxGetPr(prhs[5]);
  var7 = mxGetPr(prhs[6]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 10, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4,var5,var6,var7);


}

#else // MATLAB_MEX_FILE

#include "d1y_position_DiagonalStance2.hh"

namespace TrotStance2
{

void d1y_position_DiagonalStance2_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4,const double *var5,const double *var6,const double *var7)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4, var5, var6, var7);

}

}

#endif // MATLAB_MEX_FILE
