/*
 * Automatically Generated from Mathematica.
 * Sun 14 Nov 2021 17:27:42 GMT+01:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t200;
  double t1586;
  double t1588;
  double t1597;
  double t1707;
  double t1716;
  double t1763;
  double t489;
  double t537;
  double t595;
  double t1270;
  double t1549;
  double t1980;
  double t80;
  double t2120;
  double t2150;
  double t2197;
  double t2285;
  double t2289;
  double t2297;
  double t2301;
  double t2303;
  double t2305;
  double t2319;
  double t2604;
  double t2328;
  double t2329;
  double t2381;
  double t2395;
  double t2434;
  double t2441;
  double t2672;
  double t2730;
  double t2745;
  double t2747;
  double t2788;
  double t2789;
  double t2794;
  double t2801;
  double t2803;
  double t2812;
  double t2978;
  double t2982;
  double t2984;
  double t2988;
  double t2990;
  double t3030;
  double t3032;
  double t3033;
  double t3045;
  double t3122;
  double t3016;
  double t3019;
  double t3024;
  double t3068;
  double t3076;
  double t3077;
  double t3149;
  double t3151;
  double t3154;
  double t3156;
  double t3125;
  double t3126;
  double t3127;
  double t3131;
  double t3134;
  double t3138;
  double t3227;
  double t3199;
  double t3201;
  double t3202;
  double t3207;
  double t3168;
  double t3169;
  double t3170;
  double t3173;
  double t3181;
  double t3182;
  double t1819;
  double t1876;
  double t1682;
  double t1722;
  double t2246;
  double t2257;
  double t2259;
  double t1990;
  double t2016;
  double t2046;
  double t2057;
  double t2113;
  double t2770;
  double t2778;
  double t2784;
  double t2785;
  double t2786;
  double t3311;
  double t3316;
  double t3317;
  double t3320;
  double t3327;
  double t3332;
  double t2482;
  double t2516;
  double t2627;
  double t2653;
  double t2660;
  double t2309;
  double t2321;
  double t2325;
  double t3339;
  double t3341;
  double t3342;
  double t3351;
  double t3352;
  double t3354;
  double t2902;
  double t2925;
  double t3357;
  double t3358;
  double t3362;
  double t2822;
  double t2834;
  double t2993;
  double t2996;
  double t3005;
  double t3009;
  double t3025;
  double t3043;
  double t3046;
  double t3059;
  double t3080;
  double t3093;
  double t3097;
  double t3408;
  double t3410;
  double t3415;
  double t3417;
  double t3419;
  double t3425;
  double t3139;
  double t3155;
  double t3159;
  double t3161;
  double t3184;
  double t3187;
  double t3190;
  double t3209;
  double t3211;
  double t3215;
  double t3218;
  double t3288;
  double t3289;
  double t3446;
  double t3447;
  double t3449;
  double t3428;
  double t3437;
  double t3439;
  double t3455;
  double t3459;
  double t3461;
  double t3247;
  double t3254;
  double t3416;
  double t3427;
  double t3443;
  double t3450;
  double t3462;
  double t3464;
  double t3466;
  double t3468;
  double t3474;
  double t3476;
  double t3477;
  double t3479;
  double t3480;
  double t3481;
  double t3484;
  double t3485;
  double t3486;
  double t3487;
  double t3489;
  double t3490;
  double t3527;
  double t3530;
  double t3531;
  double t3563;
  double t3564;
  double t3571;
  double t3572;
  double t3574;
  double t3577;
  double t3578;
  double t3582;
  double t3541;
  double t3546;
  double t3548;
  double t3560;
  double t3656;
  double t3663;
  double t3664;
  double t3665;
  double t3633;
  double t3635;
  double t3636;
  double t3639;
  double t3676;
  double t3678;
  double t3729;
  double t3318;
  double t3333;
  double t3350;
  double t3355;
  double t3364;
  double t3370;
  double t3373;
  double t3374;
  double t3375;
  double t3377;
  double t3380;
  double t3381;
  double t3382;
  double t3384;
  double t3385;
  double t3388;
  double t3391;
  double t3393;
  double t3394;
  double t3400;
  double t3777;
  double t3779;
  double t3781;
  double t3789;
  double t3792;
  double t3793;
  double t3796;
  double t3799;
  double t3801;
  double t3815;
  double t3828;
  double t3829;
  double t3837;
  double t3838;
  double t3887;
  double t3891;
  double t3893;
  double t3895;
  double t3904;
  double t3905;
  double t3908;
  double t3917;
  double t3919;
  double t3921;
  double t3922;
  double t118;
  double t590;
  double t614;
  double t1275;
  double t1345;
  double t3966;
  double t3969;
  double t3968;
  double t3971;
  double t3972;
  double t3974;
  double t3975;
  double t3979;
  double t3982;
  double t3985;
  double t3986;
  double t3989;
  double t3991;
  double t3993;
  double t4013;
  double t4017;
  double t4018;
  double t4020;
  double t4036;
  double t4037;
  double t4039;
  double t4046;
  double t4050;
  double t4054;
  double t4055;
  double t4056;
  double t3102;
  double t3103;
  double t3115;
  double t3117;
  double t4110;
  double t4113;
  double t4117;
  double t4124;
  double t4125;
  double t4126;
  double t4142;
  double t4144;
  double t4146;
  double t4169;
  double t4196;
  double t4199;
  double t4200;
  double t4203;
  double t4176;
  double t4179;
  double t4190;
  double t4191;
  double t4255;
  double t4259;
  double t4263;
  double t4267;
  double t4272;
  double t4273;
  double t4281;
  double t4289;
  double t4300;
  double t4301;
  double t4309;
  double t4311;
  double t4312;
  double t4313;
  double t4317;
  double t4318;
  double t4321;
  double t4322;
  double t4363;
  double t4365;
  double t4367;
  double t4369;
  double t4370;
  double t4371;
  double t4376;
  double t4377;
  double t4381;
  double t4382;
  double t4403;
  double t4404;
  double t4405;
  double t4408;
  double t4390;
  double t4392;
  double t4395;
  double t4400;
  double t4486;
  double t4487;
  double t4489;
  double t4494;
  double t4495;
  double t4498;
  double t4500;
  double t4506;
  double t4510;
  double t4516;
  double t4517;
  double t4519;
  double t4525;
  double t4526;
  double t4527;
  double t4533;
  double t4534;
  double t4535;
  double t4538;
  double t4541;
  double t4542;
  double t4595;
  double t4600;
  double t4601;
  double t4611;
  double t4613;
  double t4615;
  double t4639;
  double t4641;
  double t4642;
  double t4618;
  double t4625;
  double t4629;
  double t4645;
  double t4660;
  double t4661;
  double t3492;
  double t3497;
  double t3501;
  double t3502;
  double t4730;
  double t4732;
  double t4733;
  double t4737;
  double t4740;
  double t4747;
  double t4753;
  double t4769;
  double t4770;
  double t4772;
  double t4760;
  double t4761;
  double t4764;
  double t4774;
  double t4775;
  double t4780;
  double t3513;
  double t3515;
  double t3517;
  double t3520;
  double t3521;
  double t3524;
  double t3532;
  double t3536;
  double t3538;
  double t4828;
  double t4829;
  double t4831;
  double t4844;
  double t4845;
  double t4848;
  double t4849;
  double t4852;
  double t4854;
  double t4855;
  double t4858;
  double t4839;
  double t4840;
  double t4841;
  double t4842;
  double t3648;
  double t3650;
  double t3651;
  double t3666;
  double t3667;
  double t3672;
  double t3679;
  double t3681;
  double t3687;
  double t4903;
  double t4907;
  double t4908;
  double t4910;
  double t4893;
  double t4894;
  double t4897;
  double t4899;
  double t4921;
  double t4924;
  double t3733;
  double t3735;
  double t3738;
  double t4965;
  double t4967;
  double t4969;
  double t4972;
  double t4974;
  double t4975;
  double t4976;
  double t4978;
  double t4979;
  double t4980;
  double t4982;
  double t4984;
  double t4988;
  double t3748;
  double t3749;
  double t3751;
  double t3753;
  double t3754;
  double t3759;
  double t3771;
  double t3772;
  double t5021;
  double t5022;
  double t5023;
  double t5030;
  double t5034;
  double t5035;
  double t5038;
  double t5040;
  double t5050;
  double t5051;
  double t5059;
  double t5061;
  double t5065;
  double t5066;
  double t3883;
  double t3884;
  double t3886;
  double t3900;
  double t3903;
  double t3913;
  double t3914;
  double t3916;
  double t5130;
  double t5138;
  double t5140;
  double t5151;
  double t5158;
  double t5162;
  double t5164;
  double t5167;
  double t5169;
  double t5171;
  double t5172;
  t200 = Cos(var1[10]);
  t1586 = Cos(var1[9]);
  t1588 = -1.*t1586;
  t1597 = 1. + t1588;
  t1707 = Sin(var1[9]);
  t1716 = -0.15121*t1707;
  t1763 = Sin(var1[4]);
  t489 = -1.*t200;
  t537 = 1. + t489;
  t595 = -1. + t200;
  t1270 = Sin(var1[10]);
  t1549 = Cos(var1[5]);
  t1980 = Sin(var1[5]);
  t80 = Cos(var1[4]);
  t2120 = t1549*t1707*t1763;
  t2150 = t1586*t1763*t1980;
  t2197 = t2120 + t2150;
  t2285 = -1.*t1586*t1549*t1763;
  t2289 = t1707*t1763*t1980;
  t2297 = t2285 + t2289;
  t2301 = Cos(var1[11]);
  t2303 = -1.*t2301;
  t2305 = 1. + t2303;
  t2319 = Sin(var1[11]);
  t2604 = -1. + t2301;
  t2328 = t80*t1270;
  t2329 = -4.e-6*t1270*t2197;
  t2381 = -1.000000000016*t537;
  t2395 = 1. + t2381;
  t2434 = t2395*t2297;
  t2441 = t2328 + t2329 + t2434;
  t2672 = t200*t80;
  t2730 = 4.e-6*t537*t2197;
  t2745 = -1.*t1270*t2297;
  t2747 = t2672 + t2730 + t2745;
  t2788 = 4.e-6*t537*t80;
  t2789 = 1.6e-11*t595;
  t2794 = 1. + t2789;
  t2801 = t2794*t2197;
  t2803 = 4.e-6*t1270*t2297;
  t2812 = t2788 + t2801 + t2803;
  t2978 = Cos(var1[6]);
  t2982 = -1.*t2978;
  t2984 = 1. + t2982;
  t2988 = 0.15121*t2984;
  t2990 = Sin(var1[6]);
  t3030 = Cos(var1[7]);
  t3032 = -1.*t3030;
  t3033 = 1. + t3032;
  t3045 = Sin(var1[7]);
  t3122 = -1. + t3030;
  t3016 = t2978*t1763*t1980;
  t3019 = t1549*t1763*t2990;
  t3024 = t3016 + t3019;
  t3068 = -1.*t1549*t2978*t1763;
  t3076 = t1763*t1980*t2990;
  t3077 = t3068 + t3076;
  t3149 = Cos(var1[8]);
  t3151 = -1.*t3149;
  t3154 = 1. + t3151;
  t3156 = Sin(var1[8]);
  t3125 = 4.e-6*t80*t3122;
  t3126 = 1.6e-11*t3122;
  t3127 = 1. + t3126;
  t3131 = t3127*t3024;
  t3134 = 4.e-6*t3077*t3045;
  t3138 = t3125 + t3131 + t3134;
  t3227 = -1. + t3149;
  t3199 = t80*t3030;
  t3201 = 4.e-6*t3122*t3024;
  t3202 = t3077*t3045;
  t3207 = t3199 + t3201 + t3202;
  t3168 = -1.000000000016*t3033;
  t3169 = 1. + t3168;
  t3170 = t3169*t3077;
  t3173 = -1.*t80*t3045;
  t3181 = -4.e-6*t3024*t3045;
  t3182 = t3170 + t3173 + t3181;
  t1819 = -0.15121*t1597;
  t1876 = t1819 + t1716;
  t1682 = 0.15121*t1597;
  t1722 = t1682 + t1716;
  t2246 = 0.281210000008499*t537;
  t2257 = -0.03874900000062*t1270;
  t2259 = t2246 + t2257;
  t1990 = -1.2484e-7*var1[10];
  t2016 = 2.479936e-18*t537;
  t2046 = -1.54996e-7*t595;
  t2057 = 1.124840000016e-6*t1270;
  t2113 = t1990 + t2016 + t2046 + t2057;
  t2770 = -1.26e-8*var1[11];
  t2778 = 2.552896e-18*t2305;
  t2784 = -1.59556e-7*t2604;
  t2785 = 2.012600000032e-6*t2319;
  t2786 = t2770 + t2778 + t2784 + t2785;
  t3311 = -1.*t80*t1549*t1707;
  t3316 = -1.*t1586*t80*t1980;
  t3317 = t3311 + t3316;
  t3320 = -1.*t1586*t80*t1549;
  t3327 = t80*t1707*t1980;
  t3332 = t3320 + t3327;
  t2482 = -5.04e-14*var1[11];
  t2516 = -0.039889*t2305;
  t2627 = 6.38224e-13*t2604;
  t2653 = -0.503150000008*t2319;
  t2660 = t2482 + t2516 + t2627 + t2653;
  t2309 = 0.50315000001605*t2305;
  t2321 = -0.0398890000006382*t2319;
  t2325 = t2309 + t2321;
  t3339 = 4.e-6*t1270*t3317;
  t3341 = t2794*t3332;
  t3342 = t3339 + t3341;
  t3351 = -1.*t1270*t3317;
  t3352 = 4.e-6*t537*t3332;
  t3354 = t3351 + t3352;
  t2902 = -1.000000000016*t2305;
  t2925 = 1. + t2902;
  t3357 = t2395*t3317;
  t3358 = -4.e-6*t1270*t3332;
  t3362 = t3357 + t3358;
  t2822 = 1.6e-11*t2604;
  t2834 = 1. + t2822;
  t2993 = -0.15121*t2990;
  t2996 = t2988 + t2993;
  t3005 = 0.15121*t2990;
  t3009 = t2988 + t3005;
  t3025 = -1.2484e-7*var1[7];
  t3043 = -1.5499600000248e-7*t3033;
  t3046 = 1.124840000016e-6*t3045;
  t3059 = t3025 + t3043 + t3046;
  t3080 = 0.281210000008499*t3033;
  t3093 = 0.03874900000062*t3045;
  t3097 = t3080 + t3093;
  t3408 = -1.*t80*t1549*t2978;
  t3410 = t80*t1980*t2990;
  t3415 = t3408 + t3410;
  t3417 = -1.*t80*t2978*t1980;
  t3419 = -1.*t80*t1549*t2990;
  t3425 = t3417 + t3419;
  t3139 = -1.284e-8*var1[8];
  t3155 = -1.5499600000248e-7*t3154;
  t3159 = 2.012840000032e-6*t3156;
  t3161 = t3139 + t3155 + t3159;
  t3184 = 0.503210000016051*t3154;
  t3187 = 0.03874900000062*t3156;
  t3190 = t3184 + t3187;
  t3209 = 5.136e-14*var1[8];
  t3211 = -0.03874900000062*t3154;
  t3215 = 0.503210000008*t3156;
  t3218 = t3209 + t3211 + t3215;
  t3288 = -1.000000000016*t3154;
  t3289 = 1. + t3288;
  t3446 = t3169*t3425;
  t3447 = -4.e-6*t3415*t3045;
  t3449 = t3446 + t3447;
  t3428 = t3127*t3415;
  t3437 = 4.e-6*t3425*t3045;
  t3439 = t3428 + t3437;
  t3455 = 4.e-6*t3122*t3415;
  t3459 = t3425*t3045;
  t3461 = t3455 + t3459;
  t3247 = 1.6e-11*t3227;
  t3254 = 1. + t3247;
  t3416 = -1.*t3415*t3059;
  t3427 = -1.*t3425*t3097;
  t3443 = -1.*t3439*t3161;
  t3450 = -1.*t3449*t3190;
  t3462 = -1.*t3461*t3218;
  t3464 = t3289*t3449;
  t3466 = -4.e-6*t3439*t3156;
  t3468 = -1.*t3461*t3156;
  t3474 = t3464 + t3466 + t3468;
  t3476 = -0.80321*t3474;
  t3477 = t3254*t3439;
  t3479 = 4.e-6*t3227*t3461;
  t3480 = 4.e-6*t3449*t3156;
  t3481 = t3477 + t3479 + t3480;
  t3484 = -0.14871*t3481;
  t3485 = 4.e-6*t3227*t3439;
  t3486 = t3149*t3461;
  t3487 = t3449*t3156;
  t3489 = t3485 + t3486 + t3487;
  t3490 = 0.03875*t3489;
  t3527 = t80*t1549*t2978;
  t3530 = -1.*t80*t1980*t2990;
  t3531 = t3527 + t3530;
  t3563 = -1.*t3030*t1763;
  t3564 = -4.e-6*t3030*t3425;
  t3571 = -1.000000000016*t3531*t3045;
  t3572 = t3563 + t3564 + t3571;
  t3574 = t3030*t3531;
  t3577 = -1.*t1763*t3045;
  t3578 = -4.e-6*t3425*t3045;
  t3582 = t3574 + t3577 + t3578;
  t3541 = 4.e-6*t3030*t3531;
  t3546 = -4.e-6*t1763*t3045;
  t3548 = -1.6e-11*t3425*t3045;
  t3560 = t3541 + t3546 + t3548;
  t3656 = 4.e-6*t3122*t1763;
  t3663 = t3127*t3425;
  t3664 = 4.e-6*t3531*t3045;
  t3665 = t3656 + t3663 + t3664;
  t3633 = t3030*t1763;
  t3635 = 4.e-6*t3122*t3425;
  t3636 = t3531*t3045;
  t3639 = t3633 + t3635 + t3636;
  t3676 = t3169*t3531;
  t3678 = t3676 + t3577 + t3578;
  t3729 = -0.15121*t1586;
  t3318 = t2259*t3317;
  t3333 = t2113*t3332;
  t3350 = t2786*t3342;
  t3355 = t2660*t3354;
  t3364 = t2325*t3362;
  t3370 = -4.e-6*t2319*t3342;
  t3373 = t2319*t3354;
  t3374 = t2925*t3362;
  t3375 = t3370 + t3373 + t3374;
  t3377 = 0.803147*t3375;
  t3380 = 4.e-6*t2305*t3342;
  t3381 = t2301*t3354;
  t3382 = -1.*t2319*t3362;
  t3384 = t3380 + t3381 + t3382;
  t3385 = -0.041195*t3384;
  t3388 = t2834*t3342;
  t3391 = 4.e-6*t2305*t3354;
  t3393 = 4.e-6*t2319*t3362;
  t3394 = t3388 + t3391 + t3393;
  t3400 = -0.14871*t3394;
  t3777 = t1586*t80*t1549;
  t3779 = -1.*t80*t1707*t1980;
  t3781 = t3777 + t3779;
  t3789 = -1.*t1270*t1763;
  t3792 = -1.*t200*t3781;
  t3793 = t3789 + t3339 + t3792;
  t3796 = 4.e-6*t1270*t1763;
  t3799 = -1.6e-11*t1270*t3317;
  t3801 = 4.e-6*t200*t3781;
  t3815 = t3796 + t3799 + t3801;
  t3828 = t200*t1763;
  t3829 = -4.e-6*t200*t3317;
  t3837 = -1.000000000016*t1270*t3781;
  t3838 = t3828 + t3829 + t3837;
  t3887 = t1270*t1763;
  t3891 = -4.e-6*t1270*t3317;
  t3893 = t2395*t3781;
  t3895 = t3887 + t3891 + t3893;
  t3904 = 4.e-6*t537*t3317;
  t3905 = -1.*t1270*t3781;
  t3908 = t3828 + t3904 + t3905;
  t3917 = 4.e-6*t537*t1763;
  t3919 = t2794*t3317;
  t3921 = 4.e-6*t1270*t3781;
  t3922 = t3917 + t3919 + t3921;
  t118 = -4.9936e-13*var1[10];
  t590 = -0.038749*t537;
  t614 = 6.19984e-13*t595;
  t1275 = -0.281210000004*t1270;
  t1345 = t118 + t590 + t614 + t1275;
  t3966 = Cos(var1[3]);
  t3969 = Sin(var1[3]);
  t3968 = t3966*t1549*t1763;
  t3971 = -1.*t3969*t1980;
  t3972 = t3968 + t3971;
  t3974 = -1.*t1549*t3969;
  t3975 = -1.*t3966*t1763*t1980;
  t3979 = t3974 + t3975;
  t3982 = -1.*t1707*t3972;
  t3985 = t1586*t3979;
  t3986 = t3982 + t3985;
  t3989 = t1586*t3972;
  t3991 = t1707*t3979;
  t3993 = t3989 + t3991;
  t4013 = -1.*t3966*t80*t1270;
  t4017 = -4.e-6*t1270*t3986;
  t4018 = t2395*t3993;
  t4020 = t4013 + t4017 + t4018;
  t4036 = -1.*t200*t3966*t80;
  t4037 = 4.e-6*t537*t3986;
  t4039 = -1.*t1270*t3993;
  t4046 = t4036 + t4037 + t4039;
  t4050 = -4.e-6*t537*t3966*t80;
  t4054 = t2794*t3986;
  t4055 = 4.e-6*t1270*t3993;
  t4056 = t4050 + t4054 + t4055;
  t3102 = 4.9936e-13*var1[7];
  t3103 = -0.03874900000062*t3033;
  t3115 = 0.281210000004*t3045;
  t3117 = t3102 + t3103 + t3115;
  t4110 = t2978*t3979;
  t4113 = -1.*t3972*t2990;
  t4117 = t4110 + t4113;
  t4124 = t2978*t3972;
  t4125 = t3979*t2990;
  t4126 = t4124 + t4125;
  t4142 = -4.e-6*t3966*t80*t3122;
  t4144 = t3127*t4117;
  t4146 = 4.e-6*t4126*t3045;
  t4169 = t4142 + t4144 + t4146;
  t4196 = -1.*t3966*t80*t3030;
  t4199 = 4.e-6*t3122*t4117;
  t4200 = t4126*t3045;
  t4203 = t4196 + t4199 + t4200;
  t4176 = t3169*t4126;
  t4179 = t3966*t80*t3045;
  t4190 = -4.e-6*t4117*t3045;
  t4191 = t4176 + t4179 + t4190;
  t4255 = -1.*t80*t1549*t1707*t3969;
  t4259 = -1.*t1586*t80*t3969*t1980;
  t4263 = t4255 + t4259;
  t4267 = t1586*t80*t1549*t3969;
  t4272 = -1.*t80*t1707*t3969*t1980;
  t4273 = t4267 + t4272;
  t4281 = t1270*t3969*t1763;
  t4289 = -4.e-6*t1270*t4263;
  t4300 = t2395*t4273;
  t4301 = t4281 + t4289 + t4300;
  t4309 = t200*t3969*t1763;
  t4311 = 4.e-6*t537*t4263;
  t4312 = -1.*t1270*t4273;
  t4313 = t4309 + t4311 + t4312;
  t4317 = 4.e-6*t537*t3969*t1763;
  t4318 = t2794*t4263;
  t4321 = 4.e-6*t1270*t4273;
  t4322 = t4317 + t4318 + t4321;
  t4363 = -1.*t80*t2978*t3969*t1980;
  t4365 = -1.*t80*t1549*t3969*t2990;
  t4367 = t4363 + t4365;
  t4369 = t80*t1549*t2978*t3969;
  t4370 = -1.*t80*t3969*t1980*t2990;
  t4371 = t4369 + t4370;
  t4376 = 4.e-6*t3122*t3969*t1763;
  t4377 = t3127*t4367;
  t4381 = 4.e-6*t4371*t3045;
  t4382 = t4376 + t4377 + t4381;
  t4403 = t3030*t3969*t1763;
  t4404 = 4.e-6*t3122*t4367;
  t4405 = t4371*t3045;
  t4408 = t4403 + t4404 + t4405;
  t4390 = t3169*t4371;
  t4392 = -1.*t3969*t1763*t3045;
  t4395 = -4.e-6*t4367*t3045;
  t4400 = t4390 + t4392 + t4395;
  t4486 = -1.*t1549*t3969*t1763;
  t4487 = -1.*t3966*t1980;
  t4489 = t4486 + t4487;
  t4494 = t3966*t1549;
  t4495 = -1.*t3969*t1763*t1980;
  t4498 = t4494 + t4495;
  t4500 = t1707*t4489;
  t4506 = t1586*t4498;
  t4510 = t4500 + t4506;
  t4516 = t1586*t4489;
  t4517 = -1.*t1707*t4498;
  t4519 = t4516 + t4517;
  t4525 = 4.e-6*t1270*t4510;
  t4526 = t2794*t4519;
  t4527 = t4525 + t4526;
  t4533 = -1.*t1270*t4510;
  t4534 = 4.e-6*t537*t4519;
  t4535 = t4533 + t4534;
  t4538 = t2395*t4510;
  t4541 = -4.e-6*t1270*t4519;
  t4542 = t4538 + t4541;
  t4595 = t2978*t4489;
  t4600 = -1.*t4498*t2990;
  t4601 = t4595 + t4600;
  t4611 = t2978*t4498;
  t4613 = t4489*t2990;
  t4615 = t4611 + t4613;
  t4639 = t3169*t4615;
  t4641 = -4.e-6*t4601*t3045;
  t4642 = t4639 + t4641;
  t4618 = t3127*t4601;
  t4625 = 4.e-6*t4615*t3045;
  t4629 = t4618 + t4625;
  t4645 = 4.e-6*t3122*t4601;
  t4660 = t4615*t3045;
  t4661 = t4645 + t4660;
  t3492 = -0.15121*t2978;
  t3497 = t3492 + t3005;
  t3501 = 0.15121*t2978;
  t3502 = t3501 + t3005;
  t4730 = t1549*t3969*t1763;
  t4732 = t3966*t1980;
  t4733 = t4730 + t4732;
  t4737 = -1.*t2978*t4733;
  t4740 = t4737 + t4600;
  t4747 = -1.*t4733*t2990;
  t4753 = t4611 + t4747;
  t4769 = t3169*t4753;
  t4770 = -4.e-6*t4740*t3045;
  t4772 = t4769 + t4770;
  t4760 = t3127*t4740;
  t4761 = 4.e-6*t4753*t3045;
  t4764 = t4760 + t4761;
  t4774 = 4.e-6*t3122*t4740;
  t4775 = t4753*t3045;
  t4780 = t4774 + t4775;
  t3513 = 0.281210000004*t3030;
  t3515 = -0.03874900000062*t3045;
  t3517 = 4.9936e-13 + t3513 + t3515;
  t3520 = 1.124840000016e-6*t3030;
  t3521 = -1.5499600000248e-7*t3045;
  t3524 = -1.2484e-7 + t3520 + t3521;
  t3532 = 0.03874900000062*t3030;
  t3536 = 0.281210000008499*t3045;
  t3538 = t3532 + t3536;
  t4828 = t2978*t4733;
  t4829 = t4498*t2990;
  t4831 = t4828 + t4829;
  t4844 = t80*t3030*t3969;
  t4845 = -4.e-6*t3030*t4753;
  t4848 = -1.000000000016*t4831*t3045;
  t4849 = t4844 + t4845 + t4848;
  t4852 = t3030*t4831;
  t4854 = t80*t3969*t3045;
  t4855 = -4.e-6*t4753*t3045;
  t4858 = t4852 + t4854 + t4855;
  t4839 = 4.e-6*t3030*t4831;
  t4840 = 4.e-6*t80*t3969*t3045;
  t4841 = -1.6e-11*t4753*t3045;
  t4842 = t4839 + t4840 + t4841;
  t3648 = 0.503210000008*t3149;
  t3650 = -0.03874900000062*t3156;
  t3651 = 5.136e-14 + t3648 + t3650;
  t3666 = 2.012840000032e-6*t3149;
  t3667 = -1.5499600000248e-7*t3156;
  t3672 = -1.284e-8 + t3666 + t3667;
  t3679 = 0.03874900000062*t3149;
  t3681 = 0.503210000016051*t3156;
  t3687 = t3679 + t3681;
  t4903 = -4.e-6*t80*t3122*t3969;
  t4907 = t3127*t4753;
  t4908 = 4.e-6*t4831*t3045;
  t4910 = t4903 + t4907 + t4908;
  t4893 = -1.*t80*t3030*t3969;
  t4894 = 4.e-6*t3122*t4753;
  t4897 = t4831*t3045;
  t4899 = t4893 + t4894 + t4897;
  t4921 = t3169*t4831;
  t4924 = t4921 + t4854 + t4855;
  t3733 = 0.15121*t1707;
  t3735 = t3729 + t3733;
  t3738 = t3729 + t1716;
  t4965 = -1.*t1707*t4733;
  t4967 = t4965 + t4506;
  t4969 = -1.*t1586*t4733;
  t4972 = t4969 + t4517;
  t4974 = 4.e-6*t1270*t4967;
  t4975 = t2794*t4972;
  t4976 = t4974 + t4975;
  t4978 = -1.*t1270*t4967;
  t4979 = 4.e-6*t537*t4972;
  t4980 = t4978 + t4979;
  t4982 = t2395*t4967;
  t4984 = -4.e-6*t1270*t4972;
  t4988 = t4982 + t4984;
  t3748 = -0.281210000004*t200;
  t3749 = -4.9936e-13 + t3748 + t2257;
  t3751 = 1.124840000016e-6*t200;
  t3753 = 1.5499600000248e-7*t1270;
  t3754 = -1.2484e-7 + t3751 + t3753;
  t3759 = -0.03874900000062*t200;
  t3771 = 0.281210000008499*t1270;
  t3772 = t3759 + t3771;
  t5021 = t1586*t4733;
  t5022 = t1707*t4498;
  t5023 = t5021 + t5022;
  t5030 = t80*t1270*t3969;
  t5034 = -1.*t200*t5023;
  t5035 = t5030 + t4974 + t5034;
  t5038 = -4.e-6*t80*t1270*t3969;
  t5040 = -1.6e-11*t1270*t4967;
  t5050 = 4.e-6*t200*t5023;
  t5051 = t5038 + t5040 + t5050;
  t5059 = -1.*t200*t80*t3969;
  t5061 = -4.e-6*t200*t4967;
  t5065 = -1.000000000016*t1270*t5023;
  t5066 = t5059 + t5061 + t5065;
  t3883 = -0.0398890000006382*t2301;
  t3884 = 0.50315000001605*t2319;
  t3886 = t3883 + t3884;
  t3900 = -0.503150000008*t2301;
  t3903 = -5.04e-14 + t3900 + t2321;
  t3913 = 2.012600000032e-6*t2301;
  t3914 = 1.59556000002553e-7*t2319;
  t3916 = -1.26e-8 + t3913 + t3914;
  t5130 = -1.*t80*t1270*t3969;
  t5138 = -4.e-6*t1270*t4967;
  t5140 = t2395*t5023;
  t5151 = t5130 + t5138 + t5140;
  t5158 = 4.e-6*t537*t4967;
  t5162 = -1.*t1270*t5023;
  t5164 = t5059 + t5158 + t5162;
  t5167 = -4.e-6*t537*t80*t3969;
  t5169 = t2794*t4967;
  t5171 = 4.e-6*t1270*t5023;
  t5172 = t5167 + t5169 + t5171;
  p_output1[0]=-1.*t1549*t1722*t1763 + t1763*t1876*t1980 + t2113*t2197 + t2259*t2297 + t2325*t2441 + t2660*t2747 + t2786*t2812 - 0.041195*(-1.*t2319*t2441 + t2301*t2747 + 4.e-6*t2305*t2812) - 0.14871*(4.e-6*t2319*t2441 + 4.e-6*t2305*t2747 + t2812*t2834) + 0.803147*(t2319*t2747 - 4.e-6*t2319*t2812 + t2441*t2925) - 1.*t1763*t1980*t2996 + t1549*t1763*t3009 - 1.*t3024*t3059 - 1.*t3077*t3097 - 1.*t3138*t3161 - 1.*t3182*t3190 - 1.*t3207*t3218 + 0.03875*(t3156*t3182 + t3149*t3207 + 4.e-6*t3138*t3227) - 0.14871*(4.e-6*t3156*t3182 + 4.e-6*t3207*t3227 + t3138*t3254) - 0.80321*(-4.e-6*t3138*t3156 - 1.*t3156*t3207 + t3182*t3289) + t1345*t80 - 1.*t3117*t80;
  p_output1[1]=t3318 + t3333 + t3350 + t3355 + t3364 + t3377 + t3385 + t3400 + t3416 + t3427 + t3443 + t3450 + t3462 + t3476 + t3484 + t3490 - 1.*t1549*t1876*t80 - 1.*t1722*t1980*t80 + t1549*t2996*t80 + t1980*t3009*t80;
  p_output1[2]=t3416 + t3427 + t3443 + t3450 + t3462 + t3476 + t3484 + t3490 + t1980*t3497*t80 - 1.*t1549*t3502*t80;
  p_output1[3]=-1.*t1763*t3517 - 1.*t3425*t3524 - 1.*t3531*t3538 - 1.*t3161*t3560 - 1.*t3190*t3572 - 1.*t3218*t3582 + 0.03875*(4.e-6*t3227*t3560 + t3156*t3572 + t3149*t3582) - 0.80321*(-4.e-6*t3156*t3560 + t3289*t3572 - 1.*t3156*t3582) - 0.14871*(t3254*t3560 + 4.e-6*t3156*t3572 + 4.e-6*t3227*t3582);
  p_output1[4]=-1.*t3639*t3651 - 1.*t3665*t3672 - 0.14871*(-4.e-6*t3156*t3639 - 1.6e-11*t3156*t3665 + 4.e-6*t3149*t3678) + 0.03875*(-1.*t3156*t3639 - 4.e-6*t3156*t3665 + t3149*t3678) - 0.80321*(-1.*t3149*t3639 - 4.e-6*t3149*t3665 - 1.000000000016*t3156*t3678) - 1.*t3678*t3687;
  p_output1[5]=t3318 + t3333 + t3350 + t3355 + t3364 + t3377 + t3385 + t3400 + t1549*t3735*t80 - 1.*t1980*t3738*t80;
  p_output1[6]=t1763*t3749 + t3317*t3754 + t3772*t3781 + t2660*t3793 + t2786*t3815 + t2325*t3838 - 0.041195*(t2301*t3793 + 4.e-6*t2305*t3815 - 1.*t2319*t3838) - 0.14871*(4.e-6*t2305*t3793 + t2834*t3815 + 4.e-6*t2319*t3838) + 0.803147*(t2319*t3793 - 4.e-6*t2319*t3815 + t2925*t3838);
  p_output1[7]=t3886*t3895 + t3903*t3908 + t3916*t3922 + 0.803147*(-1.000000000016*t2319*t3895 + t2301*t3908 - 4.e-6*t2301*t3922) - 0.14871*(4.e-6*t2301*t3895 + 4.e-6*t2319*t3908 - 1.6e-11*t2319*t3922) - 0.041195*(-1.*t2301*t3895 - 1.*t2319*t3908 + 4.e-6*t2319*t3922);
  p_output1[8]=t1722*t3972 - 1.*t3009*t3972 + t1876*t3979 - 1.*t2996*t3979 + t2113*t3986 + t2259*t3993 + t2325*t4020 + t2660*t4046 + t2786*t4056 - 0.041195*(-1.*t2319*t4020 + t2301*t4046 + 4.e-6*t2305*t4056) + 0.803147*(t2925*t4020 + t2319*t4046 - 4.e-6*t2319*t4056) - 0.14871*(4.e-6*t2319*t4020 + 4.e-6*t2305*t4046 + t2834*t4056) - 1.*t3059*t4117 - 1.*t3097*t4126 - 1.*t3161*t4169 - 1.*t3190*t4191 - 1.*t3218*t4203 + 0.03875*(4.e-6*t3227*t4169 + t3156*t4191 + t3149*t4203) - 0.80321*(-4.e-6*t3156*t4169 + t3289*t4191 - 1.*t3156*t4203) - 0.14871*(t3254*t4169 + 4.e-6*t3156*t4191 + 4.e-6*t3227*t4203) - 1.*t1345*t3966*t80 + t3117*t3966*t80;
  p_output1[9]=t1345*t1763*t3969 - 1.*t1763*t3117*t3969 + t2113*t4263 + t2259*t4273 + t2325*t4301 + t2660*t4313 + t2786*t4322 - 0.041195*(-1.*t2319*t4301 + t2301*t4313 + 4.e-6*t2305*t4322) + 0.803147*(t2925*t4301 + t2319*t4313 - 4.e-6*t2319*t4322) - 0.14871*(4.e-6*t2319*t4301 + 4.e-6*t2305*t4313 + t2834*t4322) - 1.*t3059*t4367 - 1.*t3097*t4371 - 1.*t3161*t4382 - 1.*t3190*t4400 - 1.*t3218*t4408 + 0.03875*(4.e-6*t3227*t4382 + t3156*t4400 + t3149*t4408) - 0.80321*(-4.e-6*t3156*t4382 + t3289*t4400 - 1.*t3156*t4408) - 0.14871*(t3254*t4382 + 4.e-6*t3156*t4400 + 4.e-6*t3227*t4408) + t1549*t1722*t3969*t80 - 1.*t1876*t1980*t3969*t80 + t1980*t2996*t3969*t80 - 1.*t1549*t3009*t3969*t80;
  p_output1[10]=t1876*t4489 - 1.*t2996*t4489 + t1722*t4498 - 1.*t3009*t4498 + t2259*t4510 + t2113*t4519 + t2786*t4527 + t2660*t4535 + t2325*t4542 - 0.041195*(4.e-6*t2305*t4527 + t2301*t4535 - 1.*t2319*t4542) - 0.14871*(t2834*t4527 + 4.e-6*t2305*t4535 + 4.e-6*t2319*t4542) + 0.803147*(-4.e-6*t2319*t4527 + t2319*t4535 + t2925*t4542) - 1.*t3059*t4601 - 1.*t3097*t4615 - 1.*t3161*t4629 - 1.*t3190*t4642 - 1.*t3218*t4661 + 0.03875*(4.e-6*t3227*t4629 + t3156*t4642 + t3149*t4661) - 0.80321*(-4.e-6*t3156*t4629 + t3289*t4642 - 1.*t3156*t4661) - 0.14871*(t3254*t4629 + 4.e-6*t3156*t4642 + 4.e-6*t3227*t4661);
  p_output1[11]=-1.*t3497*t4498 - 1.*t3502*t4733 - 1.*t3059*t4740 - 1.*t3097*t4753 - 1.*t3161*t4764 - 1.*t3190*t4772 - 1.*t3218*t4780 + 0.03875*(4.e-6*t3227*t4764 + t3156*t4772 + t3149*t4780) - 0.80321*(-4.e-6*t3156*t4764 + t3289*t4772 - 1.*t3156*t4780) - 0.14871*(t3254*t4764 + 4.e-6*t3156*t4772 + 4.e-6*t3227*t4780);
  p_output1[12]=-1.*t3524*t4753 - 1.*t3538*t4831 - 1.*t3161*t4842 - 1.*t3190*t4849 - 1.*t3218*t4858 + 0.03875*(4.e-6*t3227*t4842 + t3156*t4849 + t3149*t4858) - 0.80321*(-4.e-6*t3156*t4842 + t3289*t4849 - 1.*t3156*t4858) - 0.14871*(t3254*t4842 + 4.e-6*t3156*t4849 + 4.e-6*t3227*t4858) + t3517*t3969*t80;
  p_output1[13]=-1.*t3651*t4899 - 1.*t3672*t4910 - 1.*t3687*t4924 - 0.14871*(-4.e-6*t3156*t4899 - 1.6e-11*t3156*t4910 + 4.e-6*t3149*t4924) + 0.03875*(-1.*t3156*t4899 - 4.e-6*t3156*t4910 + t3149*t4924) - 0.80321*(-1.*t3149*t4899 - 4.e-6*t3149*t4910 - 1.000000000016*t3156*t4924);
  p_output1[14]=t3738*t4498 + t3735*t4733 + t2259*t4967 + t2113*t4972 + t2786*t4976 + t2660*t4980 + t2325*t4988 - 0.041195*(4.e-6*t2305*t4976 + t2301*t4980 - 1.*t2319*t4988) - 0.14871*(t2834*t4976 + 4.e-6*t2305*t4980 + 4.e-6*t2319*t4988) + 0.803147*(-4.e-6*t2319*t4976 + t2319*t4980 + t2925*t4988);
  p_output1[15]=t3754*t4967 + t3772*t5023 + t2660*t5035 + t2786*t5051 + t2325*t5066 - 0.041195*(t2301*t5035 + 4.e-6*t2305*t5051 - 1.*t2319*t5066) - 0.14871*(4.e-6*t2305*t5035 + t2834*t5051 + 4.e-6*t2319*t5066) + 0.803147*(t2319*t5035 - 4.e-6*t2319*t5051 + t2925*t5066) - 1.*t3749*t3969*t80;
  p_output1[16]=t3886*t5151 + t3903*t5164 + t3916*t5172 + 0.803147*(-1.000000000016*t2319*t5151 + t2301*t5164 - 4.e-6*t2301*t5172) - 0.14871*(4.e-6*t2301*t5151 + 4.e-6*t2319*t5164 - 1.6e-11*t2319*t5172) - 0.041195*(-1.*t2301*t5151 - 1.*t2319*t5164 + 4.e-6*t2319*t5172);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 17, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "J_step_distance_DiagonalStance1.hh"

namespace DiagonalStance1
{

void J_step_distance_DiagonalStance1_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
