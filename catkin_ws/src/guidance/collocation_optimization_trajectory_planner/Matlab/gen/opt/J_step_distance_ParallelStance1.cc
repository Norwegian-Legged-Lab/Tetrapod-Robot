/*
 * Automatically Generated from Mathematica.
 * Wed 8 Dec 2021 23:12:08 GMT+01:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t424;
  double t667;
  double t677;
  double t893;
  double t204;
  double t2096;
  double t2106;
  double t2113;
  double t2146;
  double t2322;
  double t2471;
  double t2324;
  double t2345;
  double t2377;
  double t2441;
  double t2450;
  double t2492;
  double t2493;
  double t2495;
  double t2496;
  double t2518;
  double t2620;
  double t722;
  double t2216;
  double t2267;
  double t1448;
  double t2673;
  double t2830;
  double t2138;
  double t3081;
  double t3083;
  double t3085;
  double t3097;
  double t2946;
  double t2967;
  double t2748;
  double t2757;
  double t2803;
  double t2990;
  double t2994;
  double t2998;
  double t3128;
  double t2656;
  double t3160;
  double t2682;
  double t3215;
  double t3091;
  double t3272;
  double t3280;
  double t900;
  double t3147;
  double t3426;
  double t3428;
  double t3434;
  double t3451;
  double t3021;
  double t2872;
  double t2915;
  double t2931;
  double t3050;
  double t3059;
  double t3067;
  double t3471;
  double t2268;
  double t3499;
  double t2149;
  double t3447;
  double t3593;
  double t3596;
  double t3614;
  double t2843;
  double t3516;
  double t2833;
  double t3154;
  double t3155;
  double t3163;
  double t3178;
  double t3183;
  double t3184;
  double t3185;
  double t3191;
  double t3346;
  double t3282;
  double t3286;
  double t3295;
  double t3307;
  double t3311;
  double t3315;
  double t3321;
  double t3323;
  double t3373;
  double t3377;
  double t3388;
  double t3389;
  double t3392;
  double t3400;
  double t3406;
  double t3410;
  double t3131;
  double t3724;
  double t3103;
  double t3777;
  double t3253;
  double t3743;
  double t3747;
  double t3221;
  double t3655;
  double t3507;
  double t3511;
  double t3526;
  double t3530;
  double t3538;
  double t3548;
  double t3561;
  double t3565;
  double t3670;
  double t3607;
  double t3608;
  double t3613;
  double t3623;
  double t3624;
  double t3632;
  double t3636;
  double t3638;
  double t3689;
  double t3692;
  double t3693;
  double t3705;
  double t3707;
  double t3708;
  double t3717;
  double t3719;
  double t3583;
  double t3857;
  double t3598;
  double t3869;
  double t3850;
  double t3459;
  double t2580;
  double t2594;
  double t2644;
  double t2645;
  double t2384;
  double t2469;
  double t2528;
  double t2557;
  double t2936;
  double t2942;
  double t2949;
  double t2965;
  double t2970;
  double t2971;
  double t2978;
  double t3009;
  double t3016;
  double t3029;
  double t3037;
  double t3040;
  double t3042;
  double t3045;
  double t2653;
  double t2654;
  double t2658;
  double t2666;
  double t2696;
  double t2733;
  double t2734;
  double t2816;
  double t2828;
  double t2837;
  double t2840;
  double t2854;
  double t2856;
  double t2870;
  double t3209;
  double t3214;
  double t3237;
  double t3245;
  double t3258;
  double t3259;
  double t3264;
  double t3951;
  double t3959;
  double t3962;
  double t3975;
  double t3976;
  double t3978;
  double t3079;
  double t3088;
  double t3120;
  double t3126;
  double t3132;
  double t3136;
  double t3142;
  double t3339;
  double t3345;
  double t3352;
  double t3359;
  double t3367;
  double t3370;
  double t3372;
  double t3652;
  double t3654;
  double t3657;
  double t3663;
  double t3683;
  double t3684;
  double t3685;
  double t3967;
  double t3968;
  double t3970;
  double t3984;
  double t3990;
  double t3994;
  double t3571;
  double t3579;
  double t3586;
  double t3591;
  double t3600;
  double t3604;
  double t3606;
  double t3417;
  double t3440;
  double t3461;
  double t3467;
  double t3472;
  double t3479;
  double t3497;
  double t3749;
  double t4000;
  double t4008;
  double t4012;
  double t3727;
  double t4021;
  double t4027;
  double t4029;
  double t3752;
  double t3760;
  double t4034;
  double t4040;
  double t4046;
  double t3781;
  double t3773;
  double t3774;
  double t3789;
  double t3823;
  double t3825;
  double t3813;
  double t3831;
  double t3915;
  double t4069;
  double t4071;
  double t4084;
  double t3900;
  double t4091;
  double t4093;
  double t4103;
  double t3893;
  double t3895;
  double t4113;
  double t4120;
  double t4124;
  double t3880;
  double t3873;
  double t3876;
  double t3870;
  double t3861;
  double t3862;
  double t3858;
  double t3854;
  double t4207;
  double t3965;
  double t3983;
  double t4015;
  double t4031;
  double t4064;
  double t4126;
  double t4127;
  double t4128;
  double t4131;
  double t4133;
  double t4138;
  double t4141;
  double t4145;
  double t4146;
  double t4147;
  double t4150;
  double t4151;
  double t4153;
  double t4162;
  double t4163;
  double t4223;
  double t4260;
  double t4268;
  double t4302;
  double t4304;
  double t4308;
  double t4239;
  double t4343;
  double t4287;
  double t4318;
  double t4319;
  double t4321;
  double t4322;
  double t4323;
  double t4324;
  double t4338;
  double t4339;
  double t4341;
  double t4346;
  double t4349;
  double t4353;
  double t4358;
  double t4360;
  double t4362;
  double t4367;
  double t4369;
  double t4371;
  double t4454;
  double t4498;
  double t4479;
  double t4480;
  double t4483;
  double t4484;
  double t4510;
  double t4512;
  double t4513;
  double t4520;
  double t4492;
  double t4544;
  double t4549;
  double t4551;
  double t4553;
  double t4459;
  double t4598;
  double t4530;
  double t3971;
  double t3998;
  double t4085;
  double t4110;
  double t4125;
  double t4164;
  double t4166;
  double t4168;
  double t4172;
  double t4173;
  double t4176;
  double t4177;
  double t4179;
  double t4180;
  double t4185;
  double t4189;
  double t4194;
  double t4196;
  double t4198;
  double t4205;
  double t4664;
  double t4682;
  double t4688;
  double t4709;
  double t4715;
  double t4716;
  double t4655;
  double t4734;
  double t4698;
  double t4719;
  double t4721;
  double t4723;
  double t4724;
  double t4725;
  double t4726;
  double t4729;
  double t4732;
  double t4733;
  double t4736;
  double t4738;
  double t4740;
  double t4750;
  double t4753;
  double t4756;
  double t4757;
  double t4758;
  double t4759;
  double t4793;
  double t4806;
  double t4810;
  double t4811;
  double t4812;
  double t4838;
  double t4843;
  double t4849;
  double t4851;
  double t4800;
  double t4870;
  double t4872;
  double t4875;
  double t4879;
  double t4888;
  double t4823;
  double t4859;
  double t4855;
  double t387;
  double t706;
  double t988;
  double t1269;
  double t1519;
  double t1822;
  double t1860;
  double t4937;
  double t2020;
  double t2134;
  double t2154;
  double t2165;
  double t2278;
  double t2279;
  double t2291;
  double t4954;
  double t4957;
  double t4958;
  double t4960;
  double t4967;
  double t4970;
  double t4971;
  double t4979;
  double t4980;
  double t4981;
  double t4991;
  double t4992;
  double t4994;
  double t4984;
  double t4985;
  double t4989;
  double t4996;
  double t4998;
  double t5000;
  double t5005;
  double t5007;
  double t5008;
  double t5010;
  double t5012;
  double t5016;
  double t5017;
  double t5018;
  double t5023;
  double t5024;
  double t5028;
  double t5030;
  double t5033;
  double t5034;
  double t5035;
  double t5037;
  double t5039;
  double t5040;
  double t5041;
  double t5042;
  double t5045;
  double t5047;
  double t5048;
  double t5049;
  double t5168;
  double t5170;
  double t5174;
  double t5184;
  double t5195;
  double t5200;
  double t5177;
  double t5179;
  double t5180;
  double t5208;
  double t5209;
  double t5211;
  double t5217;
  double t5218;
  double t5219;
  double t5220;
  double t5224;
  double t5228;
  double t5232;
  double t5233;
  double t5235;
  double t5237;
  double t5238;
  double t5239;
  double t5241;
  double t5243;
  double t5244;
  double t5248;
  double t5250;
  double t5253;
  double t5254;
  double t5257;
  double t5260;
  double t5261;
  double t5262;
  double t5264;
  double t5329;
  double t5330;
  double t5331;
  double t5335;
  double t5336;
  double t5337;
  double t5341;
  double t5343;
  double t5344;
  double t5353;
  double t5356;
  double t5357;
  double t5347;
  double t5348;
  double t5349;
  double t5366;
  double t5370;
  double t5372;
  double t5376;
  double t5377;
  double t5378;
  double t5383;
  double t5384;
  double t5386;
  double t5394;
  double t5395;
  double t5396;
  double t5404;
  double t5406;
  double t5407;
  double t5409;
  double t5415;
  double t5417;
  double t5420;
  double t5426;
  double t5428;
  double t4208;
  double t4214;
  double t4216;
  double t5496;
  double t5497;
  double t5502;
  double t5509;
  double t5510;
  double t5513;
  double t5516;
  double t5518;
  double t5521;
  double t5524;
  double t5532;
  double t5534;
  double t5537;
  double t5541;
  double t5542;
  double t5543;
  double t4231;
  double t4234;
  double t4245;
  double t4249;
  double t4253;
  double t4255;
  double t4264;
  double t4267;
  double t4273;
  double t4276;
  double t4278;
  double t4279;
  double t4284;
  double t4285;
  double t4290;
  double t4291;
  double t4296;
  double t4297;
  double t5588;
  double t5589;
  double t5591;
  double t5593;
  double t5594;
  double t5597;
  double t5598;
  double t5602;
  double t5603;
  double t5605;
  double t5608;
  double t5612;
  double t5613;
  double t5614;
  double t5615;
  double t4455;
  double t4457;
  double t4464;
  double t4469;
  double t4473;
  double t4477;
  double t4495;
  double t4497;
  double t4499;
  double t4504;
  double t4508;
  double t4509;
  double t4525;
  double t4526;
  double t4533;
  double t4534;
  double t4542;
  double t4543;
  double t4560;
  double t5647;
  double t5648;
  double t5649;
  double t5650;
  double t5654;
  double t5655;
  double t5658;
  double t5665;
  double t4573;
  double t5668;
  double t5672;
  double t5678;
  double t5680;
  double t4593;
  double t4601;
  double t4609;
  double t4623;
  double t4635;
  double t4636;
  double t4642;
  double t4646;
  double t5718;
  double t5720;
  double t5723;
  double t5725;
  double t5729;
  double t5731;
  double t5732;
  double t5734;
  double t5735;
  double t5736;
  double t5738;
  double t5739;
  double t5740;
  double t4660;
  double t4663;
  double t4666;
  double t4667;
  double t4673;
  double t4675;
  double t4684;
  double t4687;
  double t4690;
  double t4691;
  double t4693;
  double t4694;
  double t4696;
  double t4697;
  double t4700;
  double t4701;
  double t4702;
  double t4703;
  double t5775;
  double t5776;
  double t5777;
  double t5779;
  double t5780;
  double t5781;
  double t5783;
  double t5785;
  double t5786;
  double t5788;
  double t5789;
  double t5794;
  double t5798;
  double t5800;
  double t5801;
  double t4798;
  double t4799;
  double t4801;
  double t4802;
  double t4803;
  double t4805;
  double t4825;
  double t4828;
  double t4831;
  double t4832;
  double t4833;
  double t4834;
  double t4856;
  double t4858;
  double t4860;
  double t4866;
  double t4867;
  double t4869;
  double t5840;
  double t5843;
  double t5844;
  double t5845;
  double t4889;
  double t5850;
  double t5851;
  double t5852;
  double t5853;
  double t4891;
  double t5857;
  double t5858;
  double t5862;
  double t5863;
  double t4899;
  double t4907;
  double t4922;
  double t4924;
  t424 = Cos(var1[13]);
  t667 = -1.*t424;
  t677 = 1. + t667;
  t893 = Sin(var1[13]);
  t204 = Cos(var1[4]);
  t2096 = Cos(var1[16]);
  t2106 = -1.*t2096;
  t2113 = 1. + t2106;
  t2146 = Sin(var1[16]);
  t2322 = Cos(var1[5]);
  t2471 = Sin(var1[4]);
  t2324 = Cos(var1[12]);
  t2345 = -1.*t2324;
  t2377 = 1. + t2345;
  t2441 = Sin(var1[12]);
  t2450 = 0.15121*t2441;
  t2492 = Cos(var1[15]);
  t2493 = -1.*t2492;
  t2495 = 1. + t2493;
  t2496 = -0.15121*t2495;
  t2518 = Sin(var1[15]);
  t2620 = Sin(var1[5]);
  t722 = 4.e-6*t677;
  t2216 = -1. + t2096;
  t2267 = 4.e-6*t2216;
  t1448 = -2.8e-11*t677;
  t2673 = 7.e-6*t677;
  t2830 = 7.e-6*t2113;
  t2138 = 2.8e-11*t2113;
  t3081 = Cos(var1[14]);
  t3083 = -1.*t3081;
  t3085 = 1. + t3083;
  t3097 = Sin(var1[14]);
  t2946 = -1.*t893;
  t2967 = -4.e-6*t893;
  t2748 = t2322*t2441*t2471;
  t2757 = t2324*t2471*t2620;
  t2803 = t2748 + t2757;
  t2990 = -1.*t2324*t2322*t2471;
  t2994 = t2441*t2471*t2620;
  t2998 = t2990 + t2994;
  t3128 = 7.e-6*t3085;
  t2656 = -7.e-6*t893;
  t3160 = -7.e-6*t677;
  t2682 = 4.e-6*t893;
  t3215 = 4.e-6*t3085;
  t3091 = -2.8e-11*t3085;
  t3272 = -1. + t424;
  t3280 = 4.e-6*t3272;
  t900 = 7.e-6*t893;
  t3147 = 2.8e-11*t677;
  t3426 = Cos(var1[17]);
  t3428 = -1.*t3426;
  t3434 = 1. + t3428;
  t3451 = Sin(var1[17]);
  t3021 = -4.e-6*t2146;
  t2872 = t2322*t2518*t2471;
  t2915 = t2492*t2471*t2620;
  t2931 = t2872 + t2915;
  t3050 = -1.*t2492*t2322*t2471;
  t3059 = t2518*t2471*t2620;
  t3067 = t3050 + t3059;
  t3471 = 2.8e-11*t3434;
  t2268 = -7.e-6*t2146;
  t3499 = -2.8e-11*t2113;
  t2149 = -1.*t2146;
  t3447 = 7.e-6*t3434;
  t3593 = -1. + t3426;
  t3596 = 4.e-6*t3593;
  t3614 = 4.e-6*t2113;
  t2843 = 7.e-6*t2146;
  t3516 = -7.e-6*t2113;
  t2833 = 4.e-6*t2146;
  t3154 = t3147 + t2946;
  t3155 = t204*t3154;
  t3163 = t3160 + t2967;
  t3178 = t3163*t2803;
  t3183 = -1.000000000016*t677;
  t3184 = 1. + t3183;
  t3185 = t3184*t2998;
  t3191 = t3155 + t3178 + t3185;
  t3346 = 7.e-6*t3097;
  t3282 = t3280 + t2656;
  t3286 = t204*t3282;
  t3295 = -6.5e-11*t677;
  t3307 = 1. + t3295;
  t3311 = t3307*t2803;
  t3315 = t3160 + t2682;
  t3321 = t3315*t2998;
  t3323 = t3286 + t3311 + t3321;
  t3373 = -1.000000000049*t677;
  t3377 = 1. + t3373;
  t3388 = t3377*t204;
  t3389 = t3280 + t900;
  t3392 = t3389*t2803;
  t3400 = t3147 + t893;
  t3406 = t3400*t2998;
  t3410 = t3388 + t3392 + t3406;
  t3131 = -4.e-6*t3097;
  t3724 = 2.8e-11*t3085;
  t3103 = -1.*t3097;
  t3777 = -7.e-6*t3085;
  t3253 = 4.e-6*t3097;
  t3743 = -1. + t3081;
  t3747 = 4.e-6*t3743;
  t3221 = -7.e-6*t3097;
  t3655 = 4.e-6*t3451;
  t3507 = t3499 + t2146;
  t3511 = t204*t3507;
  t3526 = t3516 + t3021;
  t3530 = t3526*t2931;
  t3538 = -1.000000000016*t2113;
  t3548 = 1. + t3538;
  t3561 = t3548*t3067;
  t3565 = t3511 + t3530 + t3561;
  t3670 = 7.e-6*t3451;
  t3607 = -1.000000000049*t2113;
  t3608 = 1. + t3607;
  t3613 = t3608*t204;
  t3623 = t3614 + t2268;
  t3624 = t3623*t2931;
  t3632 = t3499 + t2149;
  t3636 = t3632*t3067;
  t3638 = t3613 + t3624 + t3636;
  t3689 = t3614 + t2843;
  t3692 = t204*t3689;
  t3693 = -6.5e-11*t2113;
  t3705 = 1. + t3693;
  t3707 = t3705*t2931;
  t3708 = t3516 + t2833;
  t3717 = t3708*t3067;
  t3719 = t3692 + t3707 + t3717;
  t3583 = -1.*t3451;
  t3857 = 4.e-6*t3434;
  t3598 = -7.e-6*t3451;
  t3869 = -2.8e-11*t3434;
  t3850 = -7.e-6*t3434;
  t3459 = -4.e-6*t3451;
  t2580 = 0.15121*t2377;
  t2594 = t2580 + t2450;
  t2644 = 0.15121*t2518;
  t2645 = t2496 + t2644;
  t2384 = -0.15121*t2377;
  t2469 = t2384 + t2450;
  t2528 = -0.15121*t2518;
  t2557 = t2496 + t2528;
  t2936 = 1.0248489999999998e-12*var1[13];
  t2942 = -0.28120900000849935*t677;
  t2949 = t1448 + t2946;
  t2965 = -0.038748999993*t2949;
  t2970 = t2673 + t2967;
  t2971 = -2.123459e-6*t2970;
  t2978 = t2936 + t2942 + t2965 + t2971;
  t3009 = -2.7726089999999997e-12*var1[16];
  t3016 = -0.2812110000084994*t2113;
  t3029 = t2830 + t3021;
  t3037 = -1.8134809999999998e-6*t3029;
  t3040 = t2138 + t2146;
  t3042 = -0.038749000006999997*t3040;
  t3045 = t3009 + t3016 + t3037 + t3042;
  t2653 = -1.4640699999999997e-7*var1[13];
  t2654 = -1.38024835e-16*t677;
  t2658 = t722 + t2656;
  t2666 = -0.038748999993*t2658;
  t2696 = t2673 + t2682;
  t2733 = -0.281209000004*t2696;
  t2734 = t2653 + t2654 + t2666 + t2733;
  t2816 = 3.9608699999999997e-7*var1[16];
  t2828 = -1.1787626499999999e-16*t2113;
  t2837 = t2830 + t2833;
  t2840 = -0.281211000004*t2837;
  t2854 = t2267 + t2843;
  t2856 = -0.038749000006999997*t2854;
  t2870 = t2816 + t2828 + t2840 + t2856;
  t3209 = -2.598649999999999e-7*var1[14];
  t3214 = -2.3905277499999995e-16*t3085;
  t3237 = t3215 + t3221;
  t3245 = -0.038922999986*t3237;
  t3258 = t3128 + t3253;
  t3259 = -0.503149000008*t3258;
  t3264 = t3209 + t3214 + t3245 + t3259;
  t3951 = -1.*t204*t2322*t2441;
  t3959 = -1.*t2324*t204*t2620;
  t3962 = t3951 + t3959;
  t3975 = -1.*t2324*t204*t2322;
  t3976 = t204*t2441*t2620;
  t3978 = t3975 + t3976;
  t3079 = 1.8190549999999993e-12*var1[14];
  t3088 = -0.5031490000160505*t3085;
  t3120 = t3091 + t3103;
  t3126 = -0.038922999986*t3120;
  t3132 = t3128 + t3131;
  t3136 = -3.6777349999999994e-6*t3132;
  t3142 = t3079 + t3088 + t3126 + t3136;
  t3339 = 1.0394599999999997e-12*var1[14];
  t3345 = -0.03892299998790722*t3085;
  t3352 = t3215 + t3346;
  t3359 = -3.6777349999999994e-6*t3352;
  t3367 = t3091 + t3097;
  t3370 = -0.503149000008*t3367;
  t3372 = t3339 + t3345 + t3359 + t3370;
  t3652 = 2.826290000000002e-7*var1[17];
  t3654 = -2.18904205e-16*t3434;
  t3657 = t3447 + t3655;
  t3663 = -0.5031510000080001*t3657;
  t3683 = t3596 + t3670;
  t3684 = -0.038575000014*t3683;
  t3685 = t3652 + t3654 + t3663 + t3684;
  t3967 = -1.*t204*t2322*t2518;
  t3968 = -1.*t2492*t204*t2620;
  t3970 = t3967 + t3968;
  t3984 = -1.*t2492*t204*t2322;
  t3990 = t204*t2518*t2620;
  t3994 = t3984 + t3990;
  t3571 = 1.1305160000000008e-12*var1[17];
  t3579 = -0.03857500001589017*t3434;
  t3586 = t3471 + t3583;
  t3591 = -0.5031510000080001*t3586;
  t3600 = t3596 + t3598;
  t3604 = -3.367757e-6*t3600;
  t3606 = t3571 + t3579 + t3591 + t3604;
  t3417 = -1.9784030000000015e-12*var1[17];
  t3440 = -0.5031510000160505*t3434;
  t3461 = t3447 + t3459;
  t3467 = -3.367757e-6*t3461;
  t3472 = t3471 + t3451;
  t3479 = -0.038575000014*t3472;
  t3497 = t3417 + t3440 + t3467 + t3479;
  t3749 = t3747 + t3346;
  t4000 = t3315*t3962;
  t4008 = t3307*t3978;
  t4012 = t4000 + t4008;
  t3727 = t3724 + t3097;
  t4021 = t3184*t3962;
  t4027 = t3163*t3978;
  t4029 = t4021 + t4027;
  t3752 = -1.000000000049*t3085;
  t3760 = 1. + t3752;
  t4034 = t3400*t3962;
  t4040 = t3389*t3978;
  t4046 = t4034 + t4040;
  t3781 = t3777 + t3131;
  t3773 = -1.000000000016*t3085;
  t3774 = 1. + t3773;
  t3789 = t3724 + t3103;
  t3823 = -6.5e-11*t3085;
  t3825 = 1. + t3823;
  t3813 = t3777 + t3253;
  t3831 = t3747 + t3221;
  t3915 = t3850 + t3459;
  t4069 = t3708*t3970;
  t4071 = t3705*t3994;
  t4084 = t4069 + t4071;
  t3900 = t3869 + t3451;
  t4091 = t3632*t3970;
  t4093 = t3623*t3994;
  t4103 = t4091 + t4093;
  t3893 = -1.000000000016*t3434;
  t3895 = 1. + t3893;
  t4113 = t3548*t3970;
  t4120 = t3526*t3994;
  t4124 = t4113 + t4120;
  t3880 = t3857 + t3598;
  t3873 = -1.000000000049*t3434;
  t3876 = 1. + t3873;
  t3870 = t3869 + t3583;
  t3861 = -6.5e-11*t3434;
  t3862 = 1. + t3861;
  t3858 = t3857 + t3670;
  t3854 = t3850 + t3655;
  t4207 = 0.15121*t2324;
  t3965 = -1.*t2978*t3962;
  t3983 = -1.*t2734*t3978;
  t4015 = -1.*t3264*t4012;
  t4031 = -1.*t3142*t4029;
  t4064 = -1.*t3372*t4046;
  t4126 = t3749*t4012;
  t4127 = t3727*t4029;
  t4128 = t3760*t4046;
  t4131 = t4126 + t4127 + t4128;
  t4133 = 0.038924*t4131;
  t4138 = t3781*t4012;
  t4141 = t3774*t4029;
  t4145 = t3789*t4046;
  t4146 = t4138 + t4141 + t4145;
  t4147 = 0.80315*t4146;
  t4150 = t3825*t4012;
  t4151 = t3813*t4029;
  t4153 = t3831*t4046;
  t4162 = t4150 + t4151 + t4153;
  t4163 = -0.148705*t4162;
  t4223 = -2.8e-11*t893;
  t4260 = -7.e-6*t424;
  t4268 = 4.e-6*t424;
  t4302 = t2324*t204*t2322;
  t4304 = -1.*t204*t2441*t2620;
  t4308 = t4302 + t4304;
  t4239 = 7.e-6*t424;
  t4343 = 2.8e-11*t893;
  t4287 = -4.e-6*t424;
  t4318 = t4260 + t2967;
  t4319 = t4318*t2471;
  t4321 = -6.5e-11*t893*t3962;
  t4322 = t4268 + t2656;
  t4323 = t4322*t4308;
  t4324 = t4319 + t4321 + t4323;
  t4338 = -1.000000000049*t893*t2471;
  t4339 = t4239 + t2967;
  t4341 = t4339*t3962;
  t4346 = t424 + t4343;
  t4349 = t4346*t4308;
  t4353 = t4338 + t4341 + t4349;
  t4358 = t667 + t4343;
  t4360 = t4358*t2471;
  t4362 = t4287 + t2656;
  t4367 = t4362*t3962;
  t4369 = -1.000000000016*t893*t4308;
  t4371 = t4360 + t4367 + t4369;
  t4454 = -2.8e-11*t3097;
  t4498 = 4.e-6*t3081;
  t4479 = t3154*t2471;
  t4480 = t3163*t3962;
  t4483 = t3184*t4308;
  t4484 = t4479 + t4480 + t4483;
  t4510 = t3282*t2471;
  t4512 = t3307*t3962;
  t4513 = t3315*t4308;
  t4520 = t4510 + t4512 + t4513;
  t4492 = -7.e-6*t3081;
  t4544 = t3377*t2471;
  t4549 = t3389*t3962;
  t4551 = t3400*t4308;
  t4553 = t4544 + t4549 + t4551;
  t4459 = -4.e-6*t3081;
  t4598 = 2.8e-11*t3097;
  t4530 = 7.e-6*t3081;
  t3971 = t3045*t3970;
  t3998 = t2870*t3994;
  t4085 = t3685*t4084;
  t4110 = t3606*t4103;
  t4125 = t3497*t4124;
  t4164 = t3915*t4084;
  t4166 = t3900*t4103;
  t4168 = t3895*t4124;
  t4172 = t4164 + t4166 + t4168;
  t4173 = -0.80315*t4172;
  t4176 = t3880*t4084;
  t4177 = t3876*t4103;
  t4179 = t3870*t4124;
  t4180 = t4176 + t4177 + t4179;
  t4185 = -0.038576*t4180;
  t4189 = t3862*t4084;
  t4194 = t3858*t4103;
  t4196 = t3854*t4124;
  t4198 = t4189 + t4194 + t4196;
  t4205 = -0.148715*t4198;
  t4664 = 2.8e-11*t2146;
  t4682 = 7.e-6*t2096;
  t4688 = 4.e-6*t2096;
  t4709 = t2492*t204*t2322;
  t4715 = -1.*t204*t2518*t2620;
  t4716 = t4709 + t4715;
  t4655 = -7.e-6*t2096;
  t4734 = -2.8e-11*t2146;
  t4698 = -4.e-6*t2096;
  t4719 = t4682 + t2833;
  t4721 = t4719*t2471;
  t4723 = -6.5e-11*t2146*t3970;
  t4724 = t4688 + t2268;
  t4725 = t4724*t4716;
  t4726 = t4721 + t4723 + t4725;
  t4729 = -1.000000000049*t2146*t2471;
  t4732 = t4655 + t2833;
  t4733 = t4732*t3970;
  t4736 = t2106 + t4734;
  t4738 = t4736*t4716;
  t4740 = t4729 + t4733 + t4738;
  t4750 = t2096 + t4734;
  t4753 = t4750*t2471;
  t4756 = t4698 + t2268;
  t4757 = t4756*t3970;
  t4758 = -1.000000000016*t2146*t4716;
  t4759 = t4753 + t4757 + t4758;
  t4793 = 2.8e-11*t3451;
  t4806 = t3507*t2471;
  t4810 = t3526*t3970;
  t4811 = t3548*t4716;
  t4812 = t4806 + t4810 + t4811;
  t4838 = t3608*t2471;
  t4843 = t3623*t3970;
  t4849 = t3632*t4716;
  t4851 = t4838 + t4843 + t4849;
  t4800 = -4.e-6*t3426;
  t4870 = t3689*t2471;
  t4872 = t3705*t3970;
  t4875 = t3708*t4716;
  t4879 = t4870 + t4872 + t4875;
  t4888 = -2.8e-11*t3451;
  t4823 = -7.e-6*t3426;
  t4859 = 4.e-6*t3426;
  t4855 = 7.e-6*t3426;
  t387 = 5.856279999999999e-13*var1[13];
  t706 = -0.0387489999948987*t677;
  t988 = t722 + t900;
  t1269 = -2.123459e-6*t988;
  t1519 = t1448 + t893;
  t1822 = -0.281209000004*t1519;
  t1860 = t387 + t706 + t1269 + t1822;
  t4937 = Cos(var1[3]);
  t2020 = 1.5843479999999999e-12*var1[16];
  t2134 = -0.03874900000889869*t2113;
  t2154 = t2138 + t2149;
  t2165 = -0.281211000004*t2154;
  t2278 = t2267 + t2268;
  t2279 = -1.8134809999999998e-6*t2278;
  t2291 = t2020 + t2134 + t2165 + t2279;
  t4954 = t4937*t2322*t2471;
  t4957 = Sin(var1[3]);
  t4958 = -1.*t4957*t2620;
  t4960 = t4954 + t4958;
  t4967 = -1.*t2322*t4957;
  t4970 = -1.*t4937*t2471*t2620;
  t4971 = t4967 + t4970;
  t4979 = -1.*t2441*t4960;
  t4980 = t2324*t4971;
  t4981 = t4979 + t4980;
  t4991 = t2324*t4960;
  t4992 = t2441*t4971;
  t4994 = t4991 + t4992;
  t4984 = -1.*t2518*t4960;
  t4985 = t2492*t4971;
  t4989 = t4984 + t4985;
  t4996 = t2492*t4960;
  t4998 = t2518*t4971;
  t5000 = t4996 + t4998;
  t5005 = -1.*t4937*t204*t3154;
  t5007 = t3163*t4981;
  t5008 = t3184*t4994;
  t5010 = t5005 + t5007 + t5008;
  t5012 = -1.*t4937*t204*t3282;
  t5016 = t3307*t4981;
  t5017 = t3315*t4994;
  t5018 = t5012 + t5016 + t5017;
  t5023 = -1.*t3377*t4937*t204;
  t5024 = t3389*t4981;
  t5028 = t3400*t4994;
  t5030 = t5023 + t5024 + t5028;
  t5033 = -1.*t4937*t204*t3507;
  t5034 = t3526*t4989;
  t5035 = t3548*t5000;
  t5037 = t5033 + t5034 + t5035;
  t5039 = -1.*t3608*t4937*t204;
  t5040 = t3623*t4989;
  t5041 = t3632*t5000;
  t5042 = t5039 + t5040 + t5041;
  t5045 = -1.*t4937*t204*t3689;
  t5047 = t3705*t4989;
  t5048 = t3708*t5000;
  t5049 = t5045 + t5047 + t5048;
  t5168 = -1.*t204*t2322*t2441*t4957;
  t5170 = -1.*t2324*t204*t4957*t2620;
  t5174 = t5168 + t5170;
  t5184 = t2324*t204*t2322*t4957;
  t5195 = -1.*t204*t2441*t4957*t2620;
  t5200 = t5184 + t5195;
  t5177 = -1.*t204*t2322*t2518*t4957;
  t5179 = -1.*t2492*t204*t4957*t2620;
  t5180 = t5177 + t5179;
  t5208 = t2492*t204*t2322*t4957;
  t5209 = -1.*t204*t2518*t4957*t2620;
  t5211 = t5208 + t5209;
  t5217 = t3154*t4957*t2471;
  t5218 = t3163*t5174;
  t5219 = t3184*t5200;
  t5220 = t5217 + t5218 + t5219;
  t5224 = t3282*t4957*t2471;
  t5228 = t3307*t5174;
  t5232 = t3315*t5200;
  t5233 = t5224 + t5228 + t5232;
  t5235 = t3377*t4957*t2471;
  t5237 = t3389*t5174;
  t5238 = t3400*t5200;
  t5239 = t5235 + t5237 + t5238;
  t5241 = t3507*t4957*t2471;
  t5243 = t3526*t5180;
  t5244 = t3548*t5211;
  t5248 = t5241 + t5243 + t5244;
  t5250 = t3608*t4957*t2471;
  t5253 = t3623*t5180;
  t5254 = t3632*t5211;
  t5257 = t5250 + t5253 + t5254;
  t5260 = t3689*t4957*t2471;
  t5261 = t3705*t5180;
  t5262 = t3708*t5211;
  t5264 = t5260 + t5261 + t5262;
  t5329 = -1.*t2322*t4957*t2471;
  t5330 = -1.*t4937*t2620;
  t5331 = t5329 + t5330;
  t5335 = t4937*t2322;
  t5336 = -1.*t4957*t2471*t2620;
  t5337 = t5335 + t5336;
  t5341 = t2441*t5331;
  t5343 = t2324*t5337;
  t5344 = t5341 + t5343;
  t5353 = t2324*t5331;
  t5356 = -1.*t2441*t5337;
  t5357 = t5353 + t5356;
  t5347 = t2518*t5331;
  t5348 = t2492*t5337;
  t5349 = t5347 + t5348;
  t5366 = t2492*t5331;
  t5370 = -1.*t2518*t5337;
  t5372 = t5366 + t5370;
  t5376 = t3315*t5344;
  t5377 = t3307*t5357;
  t5378 = t5376 + t5377;
  t5383 = t3184*t5344;
  t5384 = t3163*t5357;
  t5386 = t5383 + t5384;
  t5394 = t3400*t5344;
  t5395 = t3389*t5357;
  t5396 = t5394 + t5395;
  t5404 = t3708*t5349;
  t5406 = t3705*t5372;
  t5407 = t5404 + t5406;
  t5409 = t3632*t5349;
  t5415 = t3623*t5372;
  t5417 = t5409 + t5415;
  t5420 = t3548*t5349;
  t5426 = t3526*t5372;
  t5428 = t5420 + t5426;
  t4208 = -0.15121*t2441;
  t4214 = t4207 + t4208;
  t4216 = t4207 + t2450;
  t5496 = t2322*t4957*t2471;
  t5497 = t4937*t2620;
  t5502 = t5496 + t5497;
  t5509 = -1.*t2441*t5502;
  t5510 = t5509 + t5343;
  t5513 = -1.*t2324*t5502;
  t5516 = t5513 + t5356;
  t5518 = t3315*t5510;
  t5521 = t3307*t5516;
  t5524 = t5518 + t5521;
  t5532 = t3184*t5510;
  t5534 = t3163*t5516;
  t5537 = t5532 + t5534;
  t5541 = t3400*t5510;
  t5542 = t3389*t5516;
  t5543 = t5541 + t5542;
  t4231 = t424 + t4223;
  t4234 = -0.281209000004*t4231;
  t4245 = t4239 + t2682;
  t4249 = -2.123459e-6*t4245;
  t4253 = -0.0387489999948987*t893;
  t4255 = 5.856279999999999e-13 + t4234 + t4249 + t4253;
  t4264 = t4260 + t2682;
  t4267 = -0.038748999993*t4264;
  t4273 = t4268 + t900;
  t4276 = -0.281209000004*t4273;
  t4278 = -1.38024835e-16*t893;
  t4279 = -1.4640699999999997e-7 + t4267 + t4276 + t4278;
  t4284 = t667 + t4223;
  t4285 = -0.038748999993*t4284;
  t4290 = t4287 + t900;
  t4291 = -2.123459e-6*t4290;
  t4296 = -0.28120900000849935*t893;
  t4297 = 1.0248489999999998e-12 + t4285 + t4291 + t4296;
  t5588 = t2324*t5502;
  t5589 = t2441*t5337;
  t5591 = t5588 + t5589;
  t5593 = -1.*t204*t4318*t4957;
  t5594 = -6.5e-11*t893*t5510;
  t5597 = t4322*t5591;
  t5598 = t5593 + t5594 + t5597;
  t5602 = 1.000000000049*t204*t893*t4957;
  t5603 = t4339*t5510;
  t5605 = t4346*t5591;
  t5608 = t5602 + t5603 + t5605;
  t5612 = -1.*t204*t4358*t4957;
  t5613 = t4362*t5510;
  t5614 = -1.000000000016*t893*t5591;
  t5615 = t5612 + t5613 + t5614;
  t4455 = t3083 + t4454;
  t4457 = -0.038922999986*t4455;
  t4464 = t4459 + t3346;
  t4469 = -3.6777349999999994e-6*t4464;
  t4473 = -0.5031490000160505*t3097;
  t4477 = 1.8190549999999993e-12 + t4457 + t4469 + t4473;
  t4495 = t4492 + t3253;
  t4497 = -0.038922999986*t4495;
  t4499 = t4498 + t3346;
  t4504 = -0.503149000008*t4499;
  t4508 = -2.3905277499999995e-16*t3097;
  t4509 = -2.598649999999999e-7 + t4497 + t4504 + t4508;
  t4525 = t3081 + t4454;
  t4526 = -0.503149000008*t4525;
  t4533 = t4530 + t3253;
  t4534 = -3.6777349999999994e-6*t4533;
  t4542 = -0.03892299998790722*t3097;
  t4543 = 1.0394599999999997e-12 + t4526 + t4534 + t4542;
  t4560 = t4498 + t3221;
  t5647 = -1.*t204*t3154*t4957;
  t5648 = t3163*t5510;
  t5649 = t3184*t5591;
  t5650 = t5647 + t5648 + t5649;
  t5654 = -1.*t204*t3282*t4957;
  t5655 = t3307*t5510;
  t5658 = t3315*t5591;
  t5665 = t5654 + t5655 + t5658;
  t4573 = t4492 + t3131;
  t5668 = -1.*t3377*t204*t4957;
  t5672 = t3389*t5510;
  t5678 = t3400*t5591;
  t5680 = t5668 + t5672 + t5678;
  t4593 = t4459 + t3221;
  t4601 = t3083 + t4598;
  t4609 = t3081 + t4598;
  t4623 = t4530 + t3131;
  t4635 = -0.15121*t2492;
  t4636 = t4635 + t2528;
  t4642 = 0.15121*t2492;
  t4646 = t4642 + t2528;
  t5718 = -1.*t2518*t5502;
  t5720 = t5718 + t5348;
  t5723 = -1.*t2492*t5502;
  t5725 = t5723 + t5370;
  t5729 = t3708*t5720;
  t5731 = t3705*t5725;
  t5732 = t5729 + t5731;
  t5734 = t3632*t5720;
  t5735 = t3623*t5725;
  t5736 = t5734 + t5735;
  t5738 = t3548*t5720;
  t5739 = t3526*t5725;
  t5740 = t5738 + t5739;
  t4660 = t4655 + t3021;
  t4663 = -1.8134809999999998e-6*t4660;
  t4666 = t2106 + t4664;
  t4667 = -0.281211000004*t4666;
  t4673 = -0.03874900000889869*t2146;
  t4675 = 1.5843479999999999e-12 + t4663 + t4667 + t4673;
  t4684 = t4682 + t3021;
  t4687 = -0.038749000006999997*t4684;
  t4690 = t4688 + t2843;
  t4691 = -0.281211000004*t4690;
  t4693 = -1.1787626499999999e-16*t2146;
  t4694 = 3.9608699999999997e-7 + t4687 + t4691 + t4693;
  t4696 = t2096 + t4664;
  t4697 = -0.038749000006999997*t4696;
  t4700 = t4698 + t2843;
  t4701 = -1.8134809999999998e-6*t4700;
  t4702 = -0.2812110000084994*t2146;
  t4703 = -2.7726089999999997e-12 + t4697 + t4701 + t4702;
  t5775 = t2492*t5502;
  t5776 = t2518*t5337;
  t5777 = t5775 + t5776;
  t5779 = -1.*t204*t4719*t4957;
  t5780 = -6.5e-11*t2146*t5720;
  t5781 = t4724*t5777;
  t5783 = t5779 + t5780 + t5781;
  t5785 = 1.000000000049*t204*t2146*t4957;
  t5786 = t4732*t5720;
  t5788 = t4736*t5777;
  t5789 = t5785 + t5786 + t5788;
  t5794 = -1.*t204*t4750*t4957;
  t5798 = t4756*t5720;
  t5800 = -1.000000000016*t2146*t5777;
  t5801 = t5794 + t5798 + t5800;
  t4798 = t3426 + t4793;
  t4799 = -0.038575000014*t4798;
  t4801 = t4800 + t3670;
  t4802 = -3.367757e-6*t4801;
  t4803 = -0.5031510000160505*t3451;
  t4805 = -1.9784030000000015e-12 + t4799 + t4802 + t4803;
  t4825 = t4823 + t3459;
  t4828 = -3.367757e-6*t4825;
  t4831 = t3428 + t4793;
  t4832 = -0.5031510000080001*t4831;
  t4833 = -0.03857500001589017*t3451;
  t4834 = 1.1305160000000008e-12 + t4828 + t4832 + t4833;
  t4856 = t4855 + t3459;
  t4858 = -0.038575000014*t4856;
  t4860 = t4859 + t3670;
  t4866 = -0.5031510000080001*t4860;
  t4867 = -2.18904205e-16*t3451;
  t4869 = 2.826290000000002e-7 + t4858 + t4866 + t4867;
  t5840 = -1.*t204*t3507*t4957;
  t5843 = t3526*t5720;
  t5844 = t3548*t5777;
  t5845 = t5840 + t5843 + t5844;
  t4889 = t3426 + t4888;
  t5850 = -1.*t3608*t204*t4957;
  t5851 = t3623*t5720;
  t5852 = t3632*t5777;
  t5853 = t5850 + t5851 + t5852;
  t4891 = t4800 + t3598;
  t5857 = -1.*t204*t3689*t4957;
  t5858 = t3705*t5720;
  t5862 = t3708*t5777;
  t5863 = t5857 + t5858 + t5862;
  t4899 = t3428 + t4888;
  t4907 = t4823 + t3655;
  t4922 = t4859 + t3598;
  t4924 = t4855 + t3655;
  p_output1[0]=-1.*t1860*t204 + t204*t2291 + t2322*t2469*t2471 - 1.*t2322*t2471*t2557 - 1.*t2471*t2594*t2620 + t2471*t2620*t2645 - 1.*t2734*t2803 + t2870*t2931 - 1.*t2978*t2998 + t3045*t3067 - 1.*t3142*t3191 - 1.*t3264*t3323 - 1.*t3372*t3410 + t3497*t3565 + t3606*t3638 + t3685*t3719 + 0.038924*(t3191*t3727 + t3323*t3749 + t3410*t3760) + 0.80315*(t3191*t3774 + t3323*t3781 + t3410*t3789) - 0.148705*(t3191*t3813 + t3323*t3825 + t3410*t3831) - 0.148715*(t3565*t3854 + t3638*t3858 + t3719*t3862) - 0.038576*(t3565*t3870 + t3638*t3876 + t3719*t3880) - 0.80315*(t3565*t3895 + t3638*t3900 + t3719*t3915);
  p_output1[1]=t204*t2322*t2594 + t204*t2469*t2620 - 1.*t204*t2557*t2620 - 1.*t204*t2322*t2645 + t3965 + t3971 + t3983 + t3998 + t4015 + t4031 + t4064 + t4085 + t4110 + t4125 + t4133 + t4147 + t4163 + t4173 + t4185 + t4205;
  p_output1[2]=t3965 + t3983 + t4015 + t4031 + t4064 + t4133 + t4147 + t4163 - 1.*t204*t2322*t4214 + t204*t2620*t4216;
  p_output1[3]=-1.*t2471*t4255 - 1.*t3962*t4279 - 1.*t4297*t4308 - 1.*t3264*t4324 - 1.*t3372*t4353 - 1.*t3142*t4371 + 0.038924*(t3749*t4324 + t3760*t4353 + t3727*t4371) + 0.80315*(t3781*t4324 + t3789*t4353 + t3774*t4371) - 0.148705*(t3825*t4324 + t3831*t4353 + t3813*t4371);
  p_output1[4]=-1.*t4477*t4484 - 1.*t4509*t4520 - 1.*t4543*t4553 - 0.148705*(-6.5e-11*t3097*t4520 + t4484*t4560 + t4553*t4573) + 0.80315*(-1.000000000016*t3097*t4484 + t4520*t4593 + t4553*t4601) + 0.038924*(-1.000000000049*t3097*t4553 + t4484*t4609 + t4520*t4623);
  p_output1[5]=t3971 + t3998 + t4085 + t4110 + t4125 + t4173 + t4185 + t4205 + t204*t2322*t4636 - 1.*t204*t2620*t4646;
  p_output1[6]=t2471*t4675 + t3970*t4694 + t4703*t4716 + t3685*t4726 + t3606*t4740 + t3497*t4759 - 0.148715*(t3862*t4726 + t3858*t4740 + t3854*t4759) - 0.038576*(t3880*t4726 + t3876*t4740 + t3870*t4759) - 0.80315*(t3915*t4726 + t3900*t4740 + t3895*t4759);
  p_output1[7]=t4805*t4812 + t4834*t4851 + t4869*t4879 - 0.80315*(-1.000000000016*t3451*t4812 + t4851*t4889 + t4879*t4891) - 0.038576*(-1.000000000049*t3451*t4851 + t4812*t4899 + t4879*t4907) - 0.148715*(-6.5e-11*t3451*t4879 + t4812*t4922 + t4851*t4924);
  p_output1[8]=t1860*t204*t4937 - 1.*t204*t2291*t4937 - 1.*t2469*t4960 + t2557*t4960 - 1.*t2594*t4971 + t2645*t4971 - 1.*t2734*t4981 + t2870*t4989 - 1.*t2978*t4994 + t3045*t5000 - 1.*t3142*t5010 - 1.*t3264*t5018 - 1.*t3372*t5030 + 0.038924*(t3727*t5010 + t3749*t5018 + t3760*t5030) + 0.80315*(t3774*t5010 + t3781*t5018 + t3789*t5030) - 0.148705*(t3813*t5010 + t3825*t5018 + t3831*t5030) + t3497*t5037 + t3606*t5042 + t3685*t5049 - 0.148715*(t3854*t5037 + t3858*t5042 + t3862*t5049) - 0.038576*(t3870*t5037 + t3876*t5042 + t3880*t5049) - 0.80315*(t3895*t5037 + t3900*t5042 + t3915*t5049);
  p_output1[9]=-1.*t204*t2322*t2469*t4957 - 1.*t1860*t2471*t4957 + t2291*t2471*t4957 + t204*t2322*t2557*t4957 + t204*t2594*t2620*t4957 - 1.*t204*t2620*t2645*t4957 - 1.*t2734*t5174 + t2870*t5180 - 1.*t2978*t5200 + t3045*t5211 - 1.*t3142*t5220 - 1.*t3264*t5233 - 1.*t3372*t5239 + 0.038924*(t3727*t5220 + t3749*t5233 + t3760*t5239) + 0.80315*(t3774*t5220 + t3781*t5233 + t3789*t5239) - 0.148705*(t3813*t5220 + t3825*t5233 + t3831*t5239) + t3497*t5248 + t3606*t5257 + t3685*t5264 - 0.148715*(t3854*t5248 + t3858*t5257 + t3862*t5264) - 0.038576*(t3870*t5248 + t3876*t5257 + t3880*t5264) - 0.80315*(t3895*t5248 + t3900*t5257 + t3915*t5264);
  p_output1[10]=-1.*t2594*t5331 + t2645*t5331 - 1.*t2469*t5337 + t2557*t5337 - 1.*t2978*t5344 + t3045*t5349 - 1.*t2734*t5357 + t2870*t5372 - 1.*t3264*t5378 - 1.*t3142*t5386 - 1.*t3372*t5396 + 0.038924*(t3749*t5378 + t3727*t5386 + t3760*t5396) + 0.80315*(t3781*t5378 + t3774*t5386 + t3789*t5396) - 0.148705*(t3825*t5378 + t3813*t5386 + t3831*t5396) + t3685*t5407 + t3606*t5417 + t3497*t5428 - 0.148715*(t3862*t5407 + t3858*t5417 + t3854*t5428) - 0.038576*(t3880*t5407 + t3876*t5417 + t3870*t5428) - 0.80315*(t3915*t5407 + t3900*t5417 + t3895*t5428);
  p_output1[11]=-1.*t4216*t5337 - 1.*t4214*t5502 - 1.*t2978*t5510 - 1.*t2734*t5516 - 1.*t3264*t5524 - 1.*t3142*t5537 - 1.*t3372*t5543 + 0.038924*(t3749*t5524 + t3727*t5537 + t3760*t5543) + 0.80315*(t3781*t5524 + t3774*t5537 + t3789*t5543) - 0.148705*(t3825*t5524 + t3813*t5537 + t3831*t5543);
  p_output1[12]=t204*t4255*t4957 - 1.*t4279*t5510 - 1.*t4297*t5591 - 1.*t3264*t5598 - 1.*t3372*t5608 - 1.*t3142*t5615 + 0.038924*(t3749*t5598 + t3760*t5608 + t3727*t5615) + 0.80315*(t3781*t5598 + t3789*t5608 + t3774*t5615) - 0.148705*(t3825*t5598 + t3831*t5608 + t3813*t5615);
  p_output1[13]=-1.*t4477*t5650 - 1.*t4509*t5665 - 1.*t4543*t5680 + 0.038924*(t4609*t5650 + t4623*t5665 - 1.000000000049*t3097*t5680) - 0.148705*(t4560*t5650 - 6.5e-11*t3097*t5665 + t4573*t5680) + 0.80315*(-1.000000000016*t3097*t5650 + t4593*t5665 + t4601*t5680);
  p_output1[14]=t4646*t5337 + t4636*t5502 + t3045*t5720 + t2870*t5725 + t3685*t5732 + t3606*t5736 + t3497*t5740 - 0.148715*(t3862*t5732 + t3858*t5736 + t3854*t5740) - 0.038576*(t3880*t5732 + t3876*t5736 + t3870*t5740) - 0.80315*(t3915*t5732 + t3900*t5736 + t3895*t5740);
  p_output1[15]=-1.*t204*t4675*t4957 + t4694*t5720 + t4703*t5777 + t3685*t5783 + t3606*t5789 + t3497*t5801 - 0.148715*(t3862*t5783 + t3858*t5789 + t3854*t5801) - 0.038576*(t3880*t5783 + t3876*t5789 + t3870*t5801) - 0.80315*(t3915*t5783 + t3900*t5789 + t3895*t5801);
  p_output1[16]=t4805*t5845 + t4834*t5853 + t4869*t5863 - 0.148715*(t4922*t5845 + t4924*t5853 - 6.5e-11*t3451*t5863) - 0.80315*(-1.000000000016*t3451*t5845 + t4889*t5853 + t4891*t5863) - 0.038576*(t4899*t5845 - 1.000000000049*t3451*t5853 + t4907*t5863);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 17, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "J_step_distance_ParallelStance1.hh"

namespace ParallelStance1
{

void J_step_distance_ParallelStance1_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
