/*
 * Automatically Generated from Mathematica.
 * Sun 14 Nov 2021 17:29:32 GMT+01:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t604;
  double t1058;
  double t1101;
  double t1580;
  double t44;
  double t2249;
  double t2289;
  double t2297;
  double t2323;
  double t2492;
  double t2638;
  double t2499;
  double t2538;
  double t2544;
  double t2571;
  double t2591;
  double t2718;
  double t2719;
  double t2725;
  double t2726;
  double t2731;
  double t2770;
  double t1486;
  double t2357;
  double t2369;
  double t1807;
  double t2874;
  double t2970;
  double t2312;
  double t3304;
  double t3307;
  double t3313;
  double t3328;
  double t3118;
  double t3144;
  double t2898;
  double t2902;
  double t2909;
  double t3193;
  double t3194;
  double t3197;
  double t3347;
  double t2858;
  double t3399;
  double t2877;
  double t3470;
  double t3325;
  double t3521;
  double t3533;
  double t1733;
  double t3378;
  double t3694;
  double t3698;
  double t3700;
  double t3725;
  double t3221;
  double t3054;
  double t3063;
  double t3065;
  double t3270;
  double t3271;
  double t3287;
  double t3759;
  double t2390;
  double t3778;
  double t2327;
  double t3717;
  double t3857;
  double t3863;
  double t3890;
  double t3036;
  double t3795;
  double t2984;
  double t3385;
  double t3391;
  double t3414;
  double t3415;
  double t3416;
  double t3428;
  double t3435;
  double t3442;
  double t3588;
  double t3538;
  double t3546;
  double t3547;
  double t3549;
  double t3562;
  double t3566;
  double t3574;
  double t3576;
  double t3614;
  double t3627;
  double t3628;
  double t3633;
  double t3643;
  double t3649;
  double t3659;
  double t3668;
  double t3352;
  double t3955;
  double t3329;
  double t4002;
  double t3490;
  double t3962;
  double t3978;
  double t3473;
  double t3906;
  double t3784;
  double t3790;
  double t3798;
  double t3816;
  double t3820;
  double t3826;
  double t3830;
  double t3838;
  double t3914;
  double t3879;
  double t3881;
  double t3888;
  double t3891;
  double t3893;
  double t3896;
  double t3898;
  double t3901;
  double t3923;
  double t3926;
  double t3927;
  double t3933;
  double t3935;
  double t3936;
  double t3940;
  double t3950;
  double t3848;
  double t4043;
  double t3868;
  double t4067;
  double t4037;
  double t3732;
  double t2756;
  double t2761;
  double t2788;
  double t2789;
  double t2548;
  double t2624;
  double t2734;
  double t2737;
  double t3088;
  double t3114;
  double t3128;
  double t3135;
  double t3152;
  double t3153;
  double t3177;
  double t3201;
  double t3216;
  double t3230;
  double t3246;
  double t3255;
  double t3258;
  double t3259;
  double t2833;
  double t2837;
  double t2866;
  double t2867;
  double t2884;
  double t2892;
  double t2893;
  double t2940;
  double t2945;
  double t3002;
  double t3033;
  double t3037;
  double t3049;
  double t3052;
  double t3445;
  double t3454;
  double t3474;
  double t3481;
  double t3499;
  double t3513;
  double t3517;
  double t4119;
  double t4121;
  double t4123;
  double t4143;
  double t4146;
  double t4150;
  double t3299;
  double t3316;
  double t3337;
  double t3344;
  double t3368;
  double t3375;
  double t3376;
  double t3582;
  double t3585;
  double t3589;
  double t3597;
  double t3598;
  double t3609;
  double t3610;
  double t3903;
  double t3904;
  double t3908;
  double t3913;
  double t3915;
  double t3917;
  double t3921;
  double t4125;
  double t4127;
  double t4130;
  double t4153;
  double t4161;
  double t4167;
  double t3841;
  double t3845;
  double t3849;
  double t3856;
  double t3871;
  double t3873;
  double t3878;
  double t3687;
  double t3716;
  double t3735;
  double t3753;
  double t3767;
  double t3769;
  double t3773;
  double t3979;
  double t4171;
  double t4178;
  double t4179;
  double t3959;
  double t4192;
  double t4195;
  double t4196;
  double t3983;
  double t3984;
  double t4198;
  double t4201;
  double t4203;
  double t4005;
  double t3997;
  double t3999;
  double t4010;
  double t4026;
  double t4028;
  double t4023;
  double t4032;
  double t4104;
  double t4206;
  double t4208;
  double t4212;
  double t4102;
  double t4214;
  double t4216;
  double t4217;
  double t4097;
  double t4098;
  double t4220;
  double t4225;
  double t4227;
  double t4082;
  double t4073;
  double t4075;
  double t4068;
  double t4050;
  double t4054;
  double t4047;
  double t4038;
  double t4321;
  double t4124;
  double t4152;
  double t4182;
  double t4197;
  double t4204;
  double t4235;
  double t4236;
  double t4237;
  double t4240;
  double t4241;
  double t4243;
  double t4244;
  double t4251;
  double t4254;
  double t4259;
  double t4260;
  double t4264;
  double t4272;
  double t4280;
  double t4281;
  double t4345;
  double t4370;
  double t4375;
  double t4403;
  double t4410;
  double t4416;
  double t4355;
  double t4441;
  double t4396;
  double t4419;
  double t4420;
  double t4424;
  double t4425;
  double t4426;
  double t4428;
  double t4435;
  double t4436;
  double t4440;
  double t4444;
  double t4452;
  double t4454;
  double t4456;
  double t4457;
  double t4458;
  double t4466;
  double t4468;
  double t4470;
  double t4538;
  double t4578;
  double t4560;
  double t4561;
  double t4569;
  double t4570;
  double t4588;
  double t4591;
  double t4594;
  double t4597;
  double t4575;
  double t4636;
  double t4637;
  double t4638;
  double t4643;
  double t4551;
  double t4686;
  double t4612;
  double t4139;
  double t4170;
  double t4213;
  double t4219;
  double t4233;
  double t4284;
  double t4285;
  double t4287;
  double t4288;
  double t4289;
  double t4290;
  double t4291;
  double t4295;
  double t4296;
  double t4299;
  double t4303;
  double t4311;
  double t4312;
  double t4315;
  double t4317;
  double t4758;
  double t4767;
  double t4777;
  double t4820;
  double t4823;
  double t4826;
  double t4748;
  double t4867;
  double t4798;
  double t4835;
  double t4838;
  double t4839;
  double t4842;
  double t4848;
  double t4849;
  double t4853;
  double t4855;
  double t4864;
  double t4873;
  double t4879;
  double t4880;
  double t4885;
  double t4889;
  double t4891;
  double t4892;
  double t4895;
  double t4896;
  double t4940;
  double t4960;
  double t4962;
  double t4964;
  double t4965;
  double t4987;
  double t4992;
  double t4995;
  double t5004;
  double t4947;
  double t5024;
  double t5025;
  double t5027;
  double t5029;
  double t5044;
  double t4968;
  double t5017;
  double t5011;
  double t138;
  double t1381;
  double t1743;
  double t1803;
  double t1878;
  double t2049;
  double t2124;
  double t5116;
  double t2185;
  double t2299;
  double t2342;
  double t2347;
  double t2409;
  double t2443;
  double t2475;
  double t5125;
  double t5128;
  double t5129;
  double t5131;
  double t5140;
  double t5142;
  double t5144;
  double t5153;
  double t5164;
  double t5166;
  double t5182;
  double t5185;
  double t5187;
  double t5170;
  double t5172;
  double t5177;
  double t5191;
  double t5195;
  double t5198;
  double t5200;
  double t5201;
  double t5202;
  double t5204;
  double t5215;
  double t5216;
  double t5222;
  double t5223;
  double t5228;
  double t5230;
  double t5235;
  double t5236;
  double t5241;
  double t5242;
  double t5243;
  double t5244;
  double t5247;
  double t5248;
  double t5252;
  double t5253;
  double t5261;
  double t5263;
  double t5266;
  double t5268;
  double t5345;
  double t5349;
  double t5350;
  double t5361;
  double t5369;
  double t5372;
  double t5352;
  double t5353;
  double t5354;
  double t5377;
  double t5378;
  double t5381;
  double t5387;
  double t5388;
  double t5391;
  double t5392;
  double t5399;
  double t5402;
  double t5405;
  double t5406;
  double t5411;
  double t5412;
  double t5416;
  double t5418;
  double t5425;
  double t5426;
  double t5427;
  double t5428;
  double t5431;
  double t5432;
  double t5433;
  double t5434;
  double t5438;
  double t5446;
  double t5449;
  double t5450;
  double t5553;
  double t5555;
  double t5556;
  double t5561;
  double t5564;
  double t5565;
  double t5568;
  double t5571;
  double t5573;
  double t5582;
  double t5584;
  double t5586;
  double t5575;
  double t5577;
  double t5579;
  double t5590;
  double t5592;
  double t5594;
  double t5600;
  double t5601;
  double t5604;
  double t5607;
  double t5608;
  double t5611;
  double t5623;
  double t5624;
  double t5629;
  double t5633;
  double t5634;
  double t5635;
  double t5648;
  double t5649;
  double t5651;
  double t5653;
  double t5654;
  double t5655;
  double t4322;
  double t4326;
  double t4333;
  double t5726;
  double t5729;
  double t5730;
  double t5737;
  double t5739;
  double t5742;
  double t5743;
  double t5748;
  double t5749;
  double t5754;
  double t5757;
  double t5758;
  double t5759;
  double t5767;
  double t5768;
  double t5769;
  double t4346;
  double t4351;
  double t4359;
  double t4363;
  double t4366;
  double t4367;
  double t4371;
  double t4373;
  double t4376;
  double t4377;
  double t4382;
  double t4386;
  double t4389;
  double t4393;
  double t4397;
  double t4398;
  double t4400;
  double t4402;
  double t5796;
  double t5797;
  double t5798;
  double t5801;
  double t5802;
  double t5803;
  double t5805;
  double t5809;
  double t5810;
  double t5817;
  double t5822;
  double t5827;
  double t5828;
  double t5831;
  double t5832;
  double t4545;
  double t4548;
  double t4552;
  double t4555;
  double t4556;
  double t4558;
  double t4576;
  double t4577;
  double t4579;
  double t4584;
  double t4585;
  double t4586;
  double t4602;
  double t4611;
  double t4613;
  double t4617;
  double t4618;
  double t4634;
  double t4649;
  double t5874;
  double t5875;
  double t5879;
  double t5880;
  double t5884;
  double t5888;
  double t5894;
  double t5895;
  double t4664;
  double t5897;
  double t5899;
  double t5902;
  double t5905;
  double t4681;
  double t4687;
  double t4700;
  double t4707;
  double t4719;
  double t4723;
  double t4732;
  double t4733;
  double t5952;
  double t5956;
  double t5963;
  double t5964;
  double t5968;
  double t5969;
  double t5973;
  double t5978;
  double t5980;
  double t5982;
  double t5984;
  double t5985;
  double t5986;
  double t4750;
  double t4755;
  double t4760;
  double t4762;
  double t4763;
  double t4764;
  double t4773;
  double t4775;
  double t4779;
  double t4782;
  double t4783;
  double t4788;
  double t4794;
  double t4795;
  double t4801;
  double t4804;
  double t4807;
  double t4809;
  double t6024;
  double t6025;
  double t6026;
  double t6028;
  double t6029;
  double t6031;
  double t6033;
  double t6039;
  double t6041;
  double t6042;
  double t6043;
  double t6049;
  double t6051;
  double t6052;
  double t6053;
  double t4943;
  double t4945;
  double t4952;
  double t4953;
  double t4955;
  double t4958;
  double t4973;
  double t4974;
  double t4978;
  double t4983;
  double t4984;
  double t4986;
  double t5015;
  double t5016;
  double t5018;
  double t5019;
  double t5021;
  double t5022;
  double t6089;
  double t6094;
  double t6095;
  double t6097;
  double t5046;
  double t6099;
  double t6100;
  double t6101;
  double t6102;
  double t5049;
  double t6110;
  double t6113;
  double t6114;
  double t6115;
  double t5064;
  double t5068;
  double t5077;
  double t5087;
  t604 = Cos(var1[13]);
  t1058 = -1.*t604;
  t1101 = 1. + t1058;
  t1580 = Sin(var1[13]);
  t44 = Cos(var1[4]);
  t2249 = Cos(var1[16]);
  t2289 = -1.*t2249;
  t2297 = 1. + t2289;
  t2323 = Sin(var1[16]);
  t2492 = Cos(var1[5]);
  t2638 = Sin(var1[4]);
  t2499 = Cos(var1[12]);
  t2538 = -1.*t2499;
  t2544 = 1. + t2538;
  t2571 = Sin(var1[12]);
  t2591 = 0.15121*t2571;
  t2718 = Cos(var1[15]);
  t2719 = -1.*t2718;
  t2725 = 1. + t2719;
  t2726 = -0.15121*t2725;
  t2731 = Sin(var1[15]);
  t2770 = Sin(var1[5]);
  t1486 = 4.e-6*t1101;
  t2357 = -1. + t2249;
  t2369 = 4.e-6*t2357;
  t1807 = -2.8e-11*t1101;
  t2874 = 7.e-6*t1101;
  t2970 = 7.e-6*t2297;
  t2312 = 2.8e-11*t2297;
  t3304 = Cos(var1[14]);
  t3307 = -1.*t3304;
  t3313 = 1. + t3307;
  t3328 = Sin(var1[14]);
  t3118 = -1.*t1580;
  t3144 = -4.e-6*t1580;
  t2898 = t2492*t2571*t2638;
  t2902 = t2499*t2638*t2770;
  t2909 = t2898 + t2902;
  t3193 = -1.*t2499*t2492*t2638;
  t3194 = t2571*t2638*t2770;
  t3197 = t3193 + t3194;
  t3347 = 7.e-6*t3313;
  t2858 = -7.e-6*t1580;
  t3399 = -7.e-6*t1101;
  t2877 = 4.e-6*t1580;
  t3470 = 4.e-6*t3313;
  t3325 = -2.8e-11*t3313;
  t3521 = -1. + t604;
  t3533 = 4.e-6*t3521;
  t1733 = 7.e-6*t1580;
  t3378 = 2.8e-11*t1101;
  t3694 = Cos(var1[17]);
  t3698 = -1.*t3694;
  t3700 = 1. + t3698;
  t3725 = Sin(var1[17]);
  t3221 = -4.e-6*t2323;
  t3054 = t2492*t2731*t2638;
  t3063 = t2718*t2638*t2770;
  t3065 = t3054 + t3063;
  t3270 = -1.*t2718*t2492*t2638;
  t3271 = t2731*t2638*t2770;
  t3287 = t3270 + t3271;
  t3759 = 2.8e-11*t3700;
  t2390 = -7.e-6*t2323;
  t3778 = -2.8e-11*t2297;
  t2327 = -1.*t2323;
  t3717 = 7.e-6*t3700;
  t3857 = -1. + t3694;
  t3863 = 4.e-6*t3857;
  t3890 = 4.e-6*t2297;
  t3036 = 7.e-6*t2323;
  t3795 = -7.e-6*t2297;
  t2984 = 4.e-6*t2323;
  t3385 = t3378 + t3118;
  t3391 = t44*t3385;
  t3414 = t3399 + t3144;
  t3415 = t3414*t2909;
  t3416 = -1.000000000016*t1101;
  t3428 = 1. + t3416;
  t3435 = t3428*t3197;
  t3442 = t3391 + t3415 + t3435;
  t3588 = 7.e-6*t3328;
  t3538 = t3533 + t2858;
  t3546 = t44*t3538;
  t3547 = -6.5e-11*t1101;
  t3549 = 1. + t3547;
  t3562 = t3549*t2909;
  t3566 = t3399 + t2877;
  t3574 = t3566*t3197;
  t3576 = t3546 + t3562 + t3574;
  t3614 = -1.000000000049*t1101;
  t3627 = 1. + t3614;
  t3628 = t3627*t44;
  t3633 = t3533 + t1733;
  t3643 = t3633*t2909;
  t3649 = t3378 + t1580;
  t3659 = t3649*t3197;
  t3668 = t3628 + t3643 + t3659;
  t3352 = -4.e-6*t3328;
  t3955 = 2.8e-11*t3313;
  t3329 = -1.*t3328;
  t4002 = -7.e-6*t3313;
  t3490 = 4.e-6*t3328;
  t3962 = -1. + t3304;
  t3978 = 4.e-6*t3962;
  t3473 = -7.e-6*t3328;
  t3906 = 4.e-6*t3725;
  t3784 = t3778 + t2323;
  t3790 = t44*t3784;
  t3798 = t3795 + t3221;
  t3816 = t3798*t3065;
  t3820 = -1.000000000016*t2297;
  t3826 = 1. + t3820;
  t3830 = t3826*t3287;
  t3838 = t3790 + t3816 + t3830;
  t3914 = 7.e-6*t3725;
  t3879 = -1.000000000049*t2297;
  t3881 = 1. + t3879;
  t3888 = t3881*t44;
  t3891 = t3890 + t2390;
  t3893 = t3891*t3065;
  t3896 = t3778 + t2327;
  t3898 = t3896*t3287;
  t3901 = t3888 + t3893 + t3898;
  t3923 = t3890 + t3036;
  t3926 = t44*t3923;
  t3927 = -6.5e-11*t2297;
  t3933 = 1. + t3927;
  t3935 = t3933*t3065;
  t3936 = t3795 + t2984;
  t3940 = t3936*t3287;
  t3950 = t3926 + t3935 + t3940;
  t3848 = -1.*t3725;
  t4043 = 4.e-6*t3700;
  t3868 = -7.e-6*t3725;
  t4067 = -2.8e-11*t3700;
  t4037 = -7.e-6*t3700;
  t3732 = -4.e-6*t3725;
  t2756 = 0.15121*t2544;
  t2761 = t2756 + t2591;
  t2788 = 0.15121*t2731;
  t2789 = t2726 + t2788;
  t2548 = -0.15121*t2544;
  t2624 = t2548 + t2591;
  t2734 = -0.15121*t2731;
  t2737 = t2726 + t2734;
  t3088 = 1.0248489999999998e-12*var1[13];
  t3114 = -0.28120900000849935*t1101;
  t3128 = t1807 + t3118;
  t3135 = -0.038748999993*t3128;
  t3152 = t2874 + t3144;
  t3153 = -2.123459e-6*t3152;
  t3177 = t3088 + t3114 + t3135 + t3153;
  t3201 = -2.7726089999999997e-12*var1[16];
  t3216 = -0.2812110000084994*t2297;
  t3230 = t2970 + t3221;
  t3246 = -1.8134809999999998e-6*t3230;
  t3255 = t2312 + t2323;
  t3258 = -0.038749000006999997*t3255;
  t3259 = t3201 + t3216 + t3246 + t3258;
  t2833 = -1.4640699999999997e-7*var1[13];
  t2837 = -1.38024835e-16*t1101;
  t2866 = t1486 + t2858;
  t2867 = -0.038748999993*t2866;
  t2884 = t2874 + t2877;
  t2892 = -0.281209000004*t2884;
  t2893 = t2833 + t2837 + t2867 + t2892;
  t2940 = 3.9608699999999997e-7*var1[16];
  t2945 = -1.1787626499999999e-16*t2297;
  t3002 = t2970 + t2984;
  t3033 = -0.281211000004*t3002;
  t3037 = t2369 + t3036;
  t3049 = -0.038749000006999997*t3037;
  t3052 = t2940 + t2945 + t3033 + t3049;
  t3445 = -2.598649999999999e-7*var1[14];
  t3454 = -2.3905277499999995e-16*t3313;
  t3474 = t3470 + t3473;
  t3481 = -0.038922999986*t3474;
  t3499 = t3347 + t3490;
  t3513 = -0.503149000008*t3499;
  t3517 = t3445 + t3454 + t3481 + t3513;
  t4119 = -1.*t44*t2492*t2571;
  t4121 = -1.*t2499*t44*t2770;
  t4123 = t4119 + t4121;
  t4143 = -1.*t2499*t44*t2492;
  t4146 = t44*t2571*t2770;
  t4150 = t4143 + t4146;
  t3299 = 1.8190549999999993e-12*var1[14];
  t3316 = -0.5031490000160505*t3313;
  t3337 = t3325 + t3329;
  t3344 = -0.038922999986*t3337;
  t3368 = t3347 + t3352;
  t3375 = -3.6777349999999994e-6*t3368;
  t3376 = t3299 + t3316 + t3344 + t3375;
  t3582 = 1.0394599999999997e-12*var1[14];
  t3585 = -0.03892299998790722*t3313;
  t3589 = t3470 + t3588;
  t3597 = -3.6777349999999994e-6*t3589;
  t3598 = t3325 + t3328;
  t3609 = -0.503149000008*t3598;
  t3610 = t3582 + t3585 + t3597 + t3609;
  t3903 = 2.826290000000002e-7*var1[17];
  t3904 = -2.18904205e-16*t3700;
  t3908 = t3717 + t3906;
  t3913 = -0.5031510000080001*t3908;
  t3915 = t3863 + t3914;
  t3917 = -0.038575000014*t3915;
  t3921 = t3903 + t3904 + t3913 + t3917;
  t4125 = -1.*t44*t2492*t2731;
  t4127 = -1.*t2718*t44*t2770;
  t4130 = t4125 + t4127;
  t4153 = -1.*t2718*t44*t2492;
  t4161 = t44*t2731*t2770;
  t4167 = t4153 + t4161;
  t3841 = 1.1305160000000008e-12*var1[17];
  t3845 = -0.03857500001589017*t3700;
  t3849 = t3759 + t3848;
  t3856 = -0.5031510000080001*t3849;
  t3871 = t3863 + t3868;
  t3873 = -3.367757e-6*t3871;
  t3878 = t3841 + t3845 + t3856 + t3873;
  t3687 = -1.9784030000000015e-12*var1[17];
  t3716 = -0.5031510000160505*t3700;
  t3735 = t3717 + t3732;
  t3753 = -3.367757e-6*t3735;
  t3767 = t3759 + t3725;
  t3769 = -0.038575000014*t3767;
  t3773 = t3687 + t3716 + t3753 + t3769;
  t3979 = t3978 + t3588;
  t4171 = t3566*t4123;
  t4178 = t3549*t4150;
  t4179 = t4171 + t4178;
  t3959 = t3955 + t3328;
  t4192 = t3428*t4123;
  t4195 = t3414*t4150;
  t4196 = t4192 + t4195;
  t3983 = -1.000000000049*t3313;
  t3984 = 1. + t3983;
  t4198 = t3649*t4123;
  t4201 = t3633*t4150;
  t4203 = t4198 + t4201;
  t4005 = t4002 + t3352;
  t3997 = -1.000000000016*t3313;
  t3999 = 1. + t3997;
  t4010 = t3955 + t3329;
  t4026 = -6.5e-11*t3313;
  t4028 = 1. + t4026;
  t4023 = t4002 + t3490;
  t4032 = t3978 + t3473;
  t4104 = t4037 + t3732;
  t4206 = t3936*t4130;
  t4208 = t3933*t4167;
  t4212 = t4206 + t4208;
  t4102 = t4067 + t3725;
  t4214 = t3896*t4130;
  t4216 = t3891*t4167;
  t4217 = t4214 + t4216;
  t4097 = -1.000000000016*t3700;
  t4098 = 1. + t4097;
  t4220 = t3826*t4130;
  t4225 = t3798*t4167;
  t4227 = t4220 + t4225;
  t4082 = t4043 + t3868;
  t4073 = -1.000000000049*t3700;
  t4075 = 1. + t4073;
  t4068 = t4067 + t3848;
  t4050 = -6.5e-11*t3700;
  t4054 = 1. + t4050;
  t4047 = t4043 + t3914;
  t4038 = t4037 + t3906;
  t4321 = 0.15121*t2499;
  t4124 = -1.*t3177*t4123;
  t4152 = -1.*t2893*t4150;
  t4182 = -1.*t3517*t4179;
  t4197 = -1.*t3376*t4196;
  t4204 = -1.*t3610*t4203;
  t4235 = t3979*t4179;
  t4236 = t3959*t4196;
  t4237 = t3984*t4203;
  t4240 = t4235 + t4236 + t4237;
  t4241 = 0.038924*t4240;
  t4243 = t4005*t4179;
  t4244 = t3999*t4196;
  t4251 = t4010*t4203;
  t4254 = t4243 + t4244 + t4251;
  t4259 = 0.80315*t4254;
  t4260 = t4028*t4179;
  t4264 = t4023*t4196;
  t4272 = t4032*t4203;
  t4280 = t4260 + t4264 + t4272;
  t4281 = -0.148705*t4280;
  t4345 = -2.8e-11*t1580;
  t4370 = -7.e-6*t604;
  t4375 = 4.e-6*t604;
  t4403 = t2499*t44*t2492;
  t4410 = -1.*t44*t2571*t2770;
  t4416 = t4403 + t4410;
  t4355 = 7.e-6*t604;
  t4441 = 2.8e-11*t1580;
  t4396 = -4.e-6*t604;
  t4419 = t4370 + t3144;
  t4420 = t4419*t2638;
  t4424 = -6.5e-11*t1580*t4123;
  t4425 = t4375 + t2858;
  t4426 = t4425*t4416;
  t4428 = t4420 + t4424 + t4426;
  t4435 = -1.000000000049*t1580*t2638;
  t4436 = t4355 + t3144;
  t4440 = t4436*t4123;
  t4444 = t604 + t4441;
  t4452 = t4444*t4416;
  t4454 = t4435 + t4440 + t4452;
  t4456 = t1058 + t4441;
  t4457 = t4456*t2638;
  t4458 = t4396 + t2858;
  t4466 = t4458*t4123;
  t4468 = -1.000000000016*t1580*t4416;
  t4470 = t4457 + t4466 + t4468;
  t4538 = -2.8e-11*t3328;
  t4578 = 4.e-6*t3304;
  t4560 = t3385*t2638;
  t4561 = t3414*t4123;
  t4569 = t3428*t4416;
  t4570 = t4560 + t4561 + t4569;
  t4588 = t3538*t2638;
  t4591 = t3549*t4123;
  t4594 = t3566*t4416;
  t4597 = t4588 + t4591 + t4594;
  t4575 = -7.e-6*t3304;
  t4636 = t3627*t2638;
  t4637 = t3633*t4123;
  t4638 = t3649*t4416;
  t4643 = t4636 + t4637 + t4638;
  t4551 = -4.e-6*t3304;
  t4686 = 2.8e-11*t3328;
  t4612 = 7.e-6*t3304;
  t4139 = t3259*t4130;
  t4170 = t3052*t4167;
  t4213 = t3921*t4212;
  t4219 = t3878*t4217;
  t4233 = t3773*t4227;
  t4284 = t4104*t4212;
  t4285 = t4102*t4217;
  t4287 = t4098*t4227;
  t4288 = t4284 + t4285 + t4287;
  t4289 = -0.80315*t4288;
  t4290 = t4082*t4212;
  t4291 = t4075*t4217;
  t4295 = t4068*t4227;
  t4296 = t4290 + t4291 + t4295;
  t4299 = -0.038576*t4296;
  t4303 = t4054*t4212;
  t4311 = t4047*t4217;
  t4312 = t4038*t4227;
  t4315 = t4303 + t4311 + t4312;
  t4317 = -0.148715*t4315;
  t4758 = 2.8e-11*t2323;
  t4767 = 7.e-6*t2249;
  t4777 = 4.e-6*t2249;
  t4820 = t2718*t44*t2492;
  t4823 = -1.*t44*t2731*t2770;
  t4826 = t4820 + t4823;
  t4748 = -7.e-6*t2249;
  t4867 = -2.8e-11*t2323;
  t4798 = -4.e-6*t2249;
  t4835 = t4767 + t2984;
  t4838 = t4835*t2638;
  t4839 = -6.5e-11*t2323*t4130;
  t4842 = t4777 + t2390;
  t4848 = t4842*t4826;
  t4849 = t4838 + t4839 + t4848;
  t4853 = -1.000000000049*t2323*t2638;
  t4855 = t4748 + t2984;
  t4864 = t4855*t4130;
  t4873 = t2289 + t4867;
  t4879 = t4873*t4826;
  t4880 = t4853 + t4864 + t4879;
  t4885 = t2249 + t4867;
  t4889 = t4885*t2638;
  t4891 = t4798 + t2390;
  t4892 = t4891*t4130;
  t4895 = -1.000000000016*t2323*t4826;
  t4896 = t4889 + t4892 + t4895;
  t4940 = 2.8e-11*t3725;
  t4960 = t3784*t2638;
  t4962 = t3798*t4130;
  t4964 = t3826*t4826;
  t4965 = t4960 + t4962 + t4964;
  t4987 = t3881*t2638;
  t4992 = t3891*t4130;
  t4995 = t3896*t4826;
  t5004 = t4987 + t4992 + t4995;
  t4947 = -4.e-6*t3694;
  t5024 = t3923*t2638;
  t5025 = t3933*t4130;
  t5027 = t3936*t4826;
  t5029 = t5024 + t5025 + t5027;
  t5044 = -2.8e-11*t3725;
  t4968 = -7.e-6*t3694;
  t5017 = 4.e-6*t3694;
  t5011 = 7.e-6*t3694;
  t138 = 5.856279999999999e-13*var1[13];
  t1381 = -0.0387489999948987*t1101;
  t1743 = t1486 + t1733;
  t1803 = -2.123459e-6*t1743;
  t1878 = t1807 + t1580;
  t2049 = -0.281209000004*t1878;
  t2124 = t138 + t1381 + t1803 + t2049;
  t5116 = Cos(var1[3]);
  t2185 = 1.5843479999999999e-12*var1[16];
  t2299 = -0.03874900000889869*t2297;
  t2342 = t2312 + t2327;
  t2347 = -0.281211000004*t2342;
  t2409 = t2369 + t2390;
  t2443 = -1.8134809999999998e-6*t2409;
  t2475 = t2185 + t2299 + t2347 + t2443;
  t5125 = t5116*t2492*t2638;
  t5128 = Sin(var1[3]);
  t5129 = -1.*t5128*t2770;
  t5131 = t5125 + t5129;
  t5140 = -1.*t2492*t5128;
  t5142 = -1.*t5116*t2638*t2770;
  t5144 = t5140 + t5142;
  t5153 = -1.*t2571*t5131;
  t5164 = t2499*t5144;
  t5166 = t5153 + t5164;
  t5182 = t2499*t5131;
  t5185 = t2571*t5144;
  t5187 = t5182 + t5185;
  t5170 = -1.*t2731*t5131;
  t5172 = t2718*t5144;
  t5177 = t5170 + t5172;
  t5191 = t2718*t5131;
  t5195 = t2731*t5144;
  t5198 = t5191 + t5195;
  t5200 = -1.*t5116*t44*t3385;
  t5201 = t3414*t5166;
  t5202 = t3428*t5187;
  t5204 = t5200 + t5201 + t5202;
  t5215 = -1.*t5116*t44*t3538;
  t5216 = t3549*t5166;
  t5222 = t3566*t5187;
  t5223 = t5215 + t5216 + t5222;
  t5228 = -1.*t3627*t5116*t44;
  t5230 = t3633*t5166;
  t5235 = t3649*t5187;
  t5236 = t5228 + t5230 + t5235;
  t5241 = -1.*t5116*t44*t3784;
  t5242 = t3798*t5177;
  t5243 = t3826*t5198;
  t5244 = t5241 + t5242 + t5243;
  t5247 = -1.*t3881*t5116*t44;
  t5248 = t3891*t5177;
  t5252 = t3896*t5198;
  t5253 = t5247 + t5248 + t5252;
  t5261 = -1.*t5116*t44*t3923;
  t5263 = t3933*t5177;
  t5266 = t3936*t5198;
  t5268 = t5261 + t5263 + t5266;
  t5345 = -1.*t44*t2492*t2571*t5128;
  t5349 = -1.*t2499*t44*t5128*t2770;
  t5350 = t5345 + t5349;
  t5361 = t2499*t44*t2492*t5128;
  t5369 = -1.*t44*t2571*t5128*t2770;
  t5372 = t5361 + t5369;
  t5352 = -1.*t44*t2492*t2731*t5128;
  t5353 = -1.*t2718*t44*t5128*t2770;
  t5354 = t5352 + t5353;
  t5377 = t2718*t44*t2492*t5128;
  t5378 = -1.*t44*t2731*t5128*t2770;
  t5381 = t5377 + t5378;
  t5387 = t3385*t5128*t2638;
  t5388 = t3414*t5350;
  t5391 = t3428*t5372;
  t5392 = t5387 + t5388 + t5391;
  t5399 = t3538*t5128*t2638;
  t5402 = t3549*t5350;
  t5405 = t3566*t5372;
  t5406 = t5399 + t5402 + t5405;
  t5411 = t3627*t5128*t2638;
  t5412 = t3633*t5350;
  t5416 = t3649*t5372;
  t5418 = t5411 + t5412 + t5416;
  t5425 = t3784*t5128*t2638;
  t5426 = t3798*t5354;
  t5427 = t3826*t5381;
  t5428 = t5425 + t5426 + t5427;
  t5431 = t3881*t5128*t2638;
  t5432 = t3891*t5354;
  t5433 = t3896*t5381;
  t5434 = t5431 + t5432 + t5433;
  t5438 = t3923*t5128*t2638;
  t5446 = t3933*t5354;
  t5449 = t3936*t5381;
  t5450 = t5438 + t5446 + t5449;
  t5553 = -1.*t2492*t5128*t2638;
  t5555 = -1.*t5116*t2770;
  t5556 = t5553 + t5555;
  t5561 = t5116*t2492;
  t5564 = -1.*t5128*t2638*t2770;
  t5565 = t5561 + t5564;
  t5568 = t2571*t5556;
  t5571 = t2499*t5565;
  t5573 = t5568 + t5571;
  t5582 = t2499*t5556;
  t5584 = -1.*t2571*t5565;
  t5586 = t5582 + t5584;
  t5575 = t2731*t5556;
  t5577 = t2718*t5565;
  t5579 = t5575 + t5577;
  t5590 = t2718*t5556;
  t5592 = -1.*t2731*t5565;
  t5594 = t5590 + t5592;
  t5600 = t3566*t5573;
  t5601 = t3549*t5586;
  t5604 = t5600 + t5601;
  t5607 = t3428*t5573;
  t5608 = t3414*t5586;
  t5611 = t5607 + t5608;
  t5623 = t3649*t5573;
  t5624 = t3633*t5586;
  t5629 = t5623 + t5624;
  t5633 = t3936*t5579;
  t5634 = t3933*t5594;
  t5635 = t5633 + t5634;
  t5648 = t3896*t5579;
  t5649 = t3891*t5594;
  t5651 = t5648 + t5649;
  t5653 = t3826*t5579;
  t5654 = t3798*t5594;
  t5655 = t5653 + t5654;
  t4322 = -0.15121*t2571;
  t4326 = t4321 + t4322;
  t4333 = t4321 + t2591;
  t5726 = t2492*t5128*t2638;
  t5729 = t5116*t2770;
  t5730 = t5726 + t5729;
  t5737 = -1.*t2571*t5730;
  t5739 = t5737 + t5571;
  t5742 = -1.*t2499*t5730;
  t5743 = t5742 + t5584;
  t5748 = t3566*t5739;
  t5749 = t3549*t5743;
  t5754 = t5748 + t5749;
  t5757 = t3428*t5739;
  t5758 = t3414*t5743;
  t5759 = t5757 + t5758;
  t5767 = t3649*t5739;
  t5768 = t3633*t5743;
  t5769 = t5767 + t5768;
  t4346 = t604 + t4345;
  t4351 = -0.281209000004*t4346;
  t4359 = t4355 + t2877;
  t4363 = -2.123459e-6*t4359;
  t4366 = -0.0387489999948987*t1580;
  t4367 = 5.856279999999999e-13 + t4351 + t4363 + t4366;
  t4371 = t4370 + t2877;
  t4373 = -0.038748999993*t4371;
  t4376 = t4375 + t1733;
  t4377 = -0.281209000004*t4376;
  t4382 = -1.38024835e-16*t1580;
  t4386 = -1.4640699999999997e-7 + t4373 + t4377 + t4382;
  t4389 = t1058 + t4345;
  t4393 = -0.038748999993*t4389;
  t4397 = t4396 + t1733;
  t4398 = -2.123459e-6*t4397;
  t4400 = -0.28120900000849935*t1580;
  t4402 = 1.0248489999999998e-12 + t4393 + t4398 + t4400;
  t5796 = t2499*t5730;
  t5797 = t2571*t5565;
  t5798 = t5796 + t5797;
  t5801 = -1.*t44*t4419*t5128;
  t5802 = -6.5e-11*t1580*t5739;
  t5803 = t4425*t5798;
  t5805 = t5801 + t5802 + t5803;
  t5809 = 1.000000000049*t44*t1580*t5128;
  t5810 = t4436*t5739;
  t5817 = t4444*t5798;
  t5822 = t5809 + t5810 + t5817;
  t5827 = -1.*t44*t4456*t5128;
  t5828 = t4458*t5739;
  t5831 = -1.000000000016*t1580*t5798;
  t5832 = t5827 + t5828 + t5831;
  t4545 = t3307 + t4538;
  t4548 = -0.038922999986*t4545;
  t4552 = t4551 + t3588;
  t4555 = -3.6777349999999994e-6*t4552;
  t4556 = -0.5031490000160505*t3328;
  t4558 = 1.8190549999999993e-12 + t4548 + t4555 + t4556;
  t4576 = t4575 + t3490;
  t4577 = -0.038922999986*t4576;
  t4579 = t4578 + t3588;
  t4584 = -0.503149000008*t4579;
  t4585 = -2.3905277499999995e-16*t3328;
  t4586 = -2.598649999999999e-7 + t4577 + t4584 + t4585;
  t4602 = t3304 + t4538;
  t4611 = -0.503149000008*t4602;
  t4613 = t4612 + t3490;
  t4617 = -3.6777349999999994e-6*t4613;
  t4618 = -0.03892299998790722*t3328;
  t4634 = 1.0394599999999997e-12 + t4611 + t4617 + t4618;
  t4649 = t4578 + t3473;
  t5874 = -1.*t44*t3385*t5128;
  t5875 = t3414*t5739;
  t5879 = t3428*t5798;
  t5880 = t5874 + t5875 + t5879;
  t5884 = -1.*t44*t3538*t5128;
  t5888 = t3549*t5739;
  t5894 = t3566*t5798;
  t5895 = t5884 + t5888 + t5894;
  t4664 = t4575 + t3352;
  t5897 = -1.*t3627*t44*t5128;
  t5899 = t3633*t5739;
  t5902 = t3649*t5798;
  t5905 = t5897 + t5899 + t5902;
  t4681 = t4551 + t3473;
  t4687 = t3307 + t4686;
  t4700 = t3304 + t4686;
  t4707 = t4612 + t3352;
  t4719 = -0.15121*t2718;
  t4723 = t4719 + t2734;
  t4732 = 0.15121*t2718;
  t4733 = t4732 + t2734;
  t5952 = -1.*t2731*t5730;
  t5956 = t5952 + t5577;
  t5963 = -1.*t2718*t5730;
  t5964 = t5963 + t5592;
  t5968 = t3936*t5956;
  t5969 = t3933*t5964;
  t5973 = t5968 + t5969;
  t5978 = t3896*t5956;
  t5980 = t3891*t5964;
  t5982 = t5978 + t5980;
  t5984 = t3826*t5956;
  t5985 = t3798*t5964;
  t5986 = t5984 + t5985;
  t4750 = t4748 + t3221;
  t4755 = -1.8134809999999998e-6*t4750;
  t4760 = t2289 + t4758;
  t4762 = -0.281211000004*t4760;
  t4763 = -0.03874900000889869*t2323;
  t4764 = 1.5843479999999999e-12 + t4755 + t4762 + t4763;
  t4773 = t4767 + t3221;
  t4775 = -0.038749000006999997*t4773;
  t4779 = t4777 + t3036;
  t4782 = -0.281211000004*t4779;
  t4783 = -1.1787626499999999e-16*t2323;
  t4788 = 3.9608699999999997e-7 + t4775 + t4782 + t4783;
  t4794 = t2249 + t4758;
  t4795 = -0.038749000006999997*t4794;
  t4801 = t4798 + t3036;
  t4804 = -1.8134809999999998e-6*t4801;
  t4807 = -0.2812110000084994*t2323;
  t4809 = -2.7726089999999997e-12 + t4795 + t4804 + t4807;
  t6024 = t2718*t5730;
  t6025 = t2731*t5565;
  t6026 = t6024 + t6025;
  t6028 = -1.*t44*t4835*t5128;
  t6029 = -6.5e-11*t2323*t5956;
  t6031 = t4842*t6026;
  t6033 = t6028 + t6029 + t6031;
  t6039 = 1.000000000049*t44*t2323*t5128;
  t6041 = t4855*t5956;
  t6042 = t4873*t6026;
  t6043 = t6039 + t6041 + t6042;
  t6049 = -1.*t44*t4885*t5128;
  t6051 = t4891*t5956;
  t6052 = -1.000000000016*t2323*t6026;
  t6053 = t6049 + t6051 + t6052;
  t4943 = t3694 + t4940;
  t4945 = -0.038575000014*t4943;
  t4952 = t4947 + t3914;
  t4953 = -3.367757e-6*t4952;
  t4955 = -0.5031510000160505*t3725;
  t4958 = -1.9784030000000015e-12 + t4945 + t4953 + t4955;
  t4973 = t4968 + t3732;
  t4974 = -3.367757e-6*t4973;
  t4978 = t3698 + t4940;
  t4983 = -0.5031510000080001*t4978;
  t4984 = -0.03857500001589017*t3725;
  t4986 = 1.1305160000000008e-12 + t4974 + t4983 + t4984;
  t5015 = t5011 + t3732;
  t5016 = -0.038575000014*t5015;
  t5018 = t5017 + t3914;
  t5019 = -0.5031510000080001*t5018;
  t5021 = -2.18904205e-16*t3725;
  t5022 = 2.826290000000002e-7 + t5016 + t5019 + t5021;
  t6089 = -1.*t44*t3784*t5128;
  t6094 = t3798*t5956;
  t6095 = t3826*t6026;
  t6097 = t6089 + t6094 + t6095;
  t5046 = t3694 + t5044;
  t6099 = -1.*t3881*t44*t5128;
  t6100 = t3891*t5956;
  t6101 = t3896*t6026;
  t6102 = t6099 + t6100 + t6101;
  t5049 = t4947 + t3868;
  t6110 = -1.*t44*t3923*t5128;
  t6113 = t3933*t5956;
  t6114 = t3936*t6026;
  t6115 = t6110 + t6113 + t6114;
  t5064 = t3698 + t5044;
  t5068 = t4968 + t3906;
  t5077 = t5017 + t3868;
  t5087 = t5011 + t3906;
  p_output1[0]=t2492*t2624*t2638 - 1.*t2492*t2638*t2737 - 1.*t2638*t2761*t2770 + t2638*t2770*t2789 - 1.*t2893*t2909 + t3052*t3065 - 1.*t3177*t3197 + t3259*t3287 - 1.*t3376*t3442 - 1.*t3517*t3576 - 1.*t3610*t3668 + t3773*t3838 + t3878*t3901 + t3921*t3950 + 0.038924*(t3442*t3959 + t3576*t3979 + t3668*t3984) + 0.80315*(t3442*t3999 + t3576*t4005 + t3668*t4010) - 0.148705*(t3442*t4023 + t3576*t4028 + t3668*t4032) - 0.148715*(t3838*t4038 + t3901*t4047 + t3950*t4054) - 0.038576*(t3838*t4068 + t3901*t4075 + t3950*t4082) - 0.80315*(t3838*t4098 + t3901*t4102 + t3950*t4104) - 1.*t2124*t44 + t2475*t44;
  p_output1[1]=t4124 + t4139 + t4152 + t4170 + t4182 + t4197 + t4204 + t4213 + t4219 + t4233 + t4241 + t4259 + t4281 + t4289 + t4299 + t4317 + t2492*t2761*t44 + t2624*t2770*t44 - 1.*t2737*t2770*t44 - 1.*t2492*t2789*t44;
  p_output1[2]=t4124 + t4152 + t4182 + t4197 + t4204 + t4241 + t4259 + t4281 - 1.*t2492*t4326*t44 + t2770*t4333*t44;
  p_output1[3]=-1.*t2638*t4367 - 1.*t4123*t4386 - 1.*t4402*t4416 - 1.*t3517*t4428 - 1.*t3610*t4454 - 1.*t3376*t4470 + 0.038924*(t3979*t4428 + t3984*t4454 + t3959*t4470) + 0.80315*(t4005*t4428 + t4010*t4454 + t3999*t4470) - 0.148705*(t4028*t4428 + t4032*t4454 + t4023*t4470);
  p_output1[4]=-1.*t4558*t4570 - 1.*t4586*t4597 - 1.*t4634*t4643 - 0.148705*(-6.5e-11*t3328*t4597 + t4570*t4649 + t4643*t4664) + 0.80315*(-1.000000000016*t3328*t4570 + t4597*t4681 + t4643*t4687) + 0.038924*(-1.000000000049*t3328*t4643 + t4570*t4700 + t4597*t4707);
  p_output1[5]=t4139 + t4170 + t4213 + t4219 + t4233 + t4289 + t4299 + t4317 + t2492*t44*t4723 - 1.*t2770*t44*t4733;
  p_output1[6]=t2638*t4764 + t4130*t4788 + t4809*t4826 + t3921*t4849 + t3878*t4880 + t3773*t4896 - 0.148715*(t4054*t4849 + t4047*t4880 + t4038*t4896) - 0.038576*(t4082*t4849 + t4075*t4880 + t4068*t4896) - 0.80315*(t4104*t4849 + t4102*t4880 + t4098*t4896);
  p_output1[7]=t4958*t4965 + t4986*t5004 + t5022*t5029 - 0.80315*(-1.000000000016*t3725*t4965 + t5004*t5046 + t5029*t5049) - 0.038576*(-1.000000000049*t3725*t5004 + t4965*t5064 + t5029*t5068) - 0.148715*(-6.5e-11*t3725*t5029 + t4965*t5077 + t5004*t5087);
  p_output1[8]=t2124*t44*t5116 - 1.*t2475*t44*t5116 - 1.*t2624*t5131 + t2737*t5131 - 1.*t2761*t5144 + t2789*t5144 - 1.*t2893*t5166 + t3052*t5177 - 1.*t3177*t5187 + t3259*t5198 - 1.*t3376*t5204 - 1.*t3517*t5223 - 1.*t3610*t5236 + 0.038924*(t3959*t5204 + t3979*t5223 + t3984*t5236) + 0.80315*(t3999*t5204 + t4005*t5223 + t4010*t5236) - 0.148705*(t4023*t5204 + t4028*t5223 + t4032*t5236) + t3773*t5244 + t3878*t5253 + t3921*t5268 - 0.148715*(t4038*t5244 + t4047*t5253 + t4054*t5268) - 0.038576*(t4068*t5244 + t4075*t5253 + t4082*t5268) - 0.80315*(t4098*t5244 + t4102*t5253 + t4104*t5268);
  p_output1[9]=-1.*t2124*t2638*t5128 + t2475*t2638*t5128 - 1.*t2492*t2624*t44*t5128 + t2492*t2737*t44*t5128 + t2761*t2770*t44*t5128 - 1.*t2770*t2789*t44*t5128 - 1.*t2893*t5350 + t3052*t5354 - 1.*t3177*t5372 + t3259*t5381 - 1.*t3376*t5392 - 1.*t3517*t5406 - 1.*t3610*t5418 + 0.038924*(t3959*t5392 + t3979*t5406 + t3984*t5418) + 0.80315*(t3999*t5392 + t4005*t5406 + t4010*t5418) - 0.148705*(t4023*t5392 + t4028*t5406 + t4032*t5418) + t3773*t5428 + t3878*t5434 + t3921*t5450 - 0.148715*(t4038*t5428 + t4047*t5434 + t4054*t5450) - 0.038576*(t4068*t5428 + t4075*t5434 + t4082*t5450) - 0.80315*(t4098*t5428 + t4102*t5434 + t4104*t5450);
  p_output1[10]=-1.*t2761*t5556 + t2789*t5556 - 1.*t2624*t5565 + t2737*t5565 - 1.*t3177*t5573 + t3259*t5579 - 1.*t2893*t5586 + t3052*t5594 - 1.*t3517*t5604 - 1.*t3376*t5611 - 1.*t3610*t5629 + 0.038924*(t3979*t5604 + t3959*t5611 + t3984*t5629) + 0.80315*(t4005*t5604 + t3999*t5611 + t4010*t5629) - 0.148705*(t4028*t5604 + t4023*t5611 + t4032*t5629) + t3921*t5635 + t3878*t5651 + t3773*t5655 - 0.148715*(t4054*t5635 + t4047*t5651 + t4038*t5655) - 0.038576*(t4082*t5635 + t4075*t5651 + t4068*t5655) - 0.80315*(t4104*t5635 + t4102*t5651 + t4098*t5655);
  p_output1[11]=-1.*t4333*t5565 - 1.*t4326*t5730 - 1.*t3177*t5739 - 1.*t2893*t5743 - 1.*t3517*t5754 - 1.*t3376*t5759 - 1.*t3610*t5769 + 0.038924*(t3979*t5754 + t3959*t5759 + t3984*t5769) + 0.80315*(t4005*t5754 + t3999*t5759 + t4010*t5769) - 0.148705*(t4028*t5754 + t4023*t5759 + t4032*t5769);
  p_output1[12]=t4367*t44*t5128 - 1.*t4386*t5739 - 1.*t4402*t5798 - 1.*t3517*t5805 - 1.*t3610*t5822 - 1.*t3376*t5832 + 0.038924*(t3979*t5805 + t3984*t5822 + t3959*t5832) + 0.80315*(t4005*t5805 + t4010*t5822 + t3999*t5832) - 0.148705*(t4028*t5805 + t4032*t5822 + t4023*t5832);
  p_output1[13]=-1.*t4558*t5880 - 1.*t4586*t5895 - 1.*t4634*t5905 + 0.038924*(t4700*t5880 + t4707*t5895 - 1.000000000049*t3328*t5905) - 0.148705*(t4649*t5880 - 6.5e-11*t3328*t5895 + t4664*t5905) + 0.80315*(-1.000000000016*t3328*t5880 + t4681*t5895 + t4687*t5905);
  p_output1[14]=t4733*t5565 + t4723*t5730 + t3259*t5956 + t3052*t5964 + t3921*t5973 + t3878*t5982 + t3773*t5986 - 0.148715*(t4054*t5973 + t4047*t5982 + t4038*t5986) - 0.038576*(t4082*t5973 + t4075*t5982 + t4068*t5986) - 0.80315*(t4104*t5973 + t4102*t5982 + t4098*t5986);
  p_output1[15]=-1.*t44*t4764*t5128 + t4788*t5956 + t4809*t6026 + t3921*t6033 + t3878*t6043 + t3773*t6053 - 0.148715*(t4054*t6033 + t4047*t6043 + t4038*t6053) - 0.038576*(t4082*t6033 + t4075*t6043 + t4068*t6053) - 0.80315*(t4104*t6033 + t4102*t6043 + t4098*t6053);
  p_output1[16]=t4958*t6097 + t4986*t6102 + t5022*t6115 - 0.148715*(t5077*t6097 + t5087*t6102 - 6.5e-11*t3725*t6115) - 0.80315*(-1.000000000016*t3725*t6097 + t5046*t6102 + t5049*t6115) - 0.038576*(t5064*t6097 - 1.000000000049*t3725*t6102 + t5068*t6115);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 17, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "J_step_distance_ParallelStance1.hh"

namespace ParallelStance1
{

void J_step_distance_ParallelStance1_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
