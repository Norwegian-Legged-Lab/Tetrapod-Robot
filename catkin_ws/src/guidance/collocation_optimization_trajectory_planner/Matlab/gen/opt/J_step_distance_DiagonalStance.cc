/*
 * Automatically Generated from Mathematica.
 * Fri 12 Nov 2021 16:29:04 GMT+01:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t206;
  double t1309;
  double t1472;
  double t1473;
  double t1559;
  double t1574;
  double t1673;
  double t329;
  double t334;
  double t750;
  double t853;
  double t1293;
  double t1814;
  double t163;
  double t2040;
  double t2043;
  double t2160;
  double t2203;
  double t2250;
  double t2251;
  double t2315;
  double t2345;
  double t2365;
  double t2367;
  double t2419;
  double t2390;
  double t2395;
  double t2396;
  double t2398;
  double t2399;
  double t2401;
  double t2533;
  double t2534;
  double t2541;
  double t2551;
  double t2725;
  double t2733;
  double t2746;
  double t2771;
  double t2773;
  double t2781;
  double t2920;
  double t2928;
  double t2944;
  double t2948;
  double t2959;
  double t3072;
  double t3074;
  double t3080;
  double t3085;
  double t3150;
  double t3016;
  double t3048;
  double t3053;
  double t3110;
  double t3111;
  double t3116;
  double t3192;
  double t3200;
  double t3204;
  double t3212;
  double t3151;
  double t3161;
  double t3168;
  double t3175;
  double t3180;
  double t3181;
  double t3287;
  double t3266;
  double t3267;
  double t3269;
  double t3271;
  double t3226;
  double t3228;
  double t3231;
  double t3232;
  double t3237;
  double t3240;
  double t1720;
  double t1759;
  double t1521;
  double t1583;
  double t2167;
  double t2186;
  double t2193;
  double t1951;
  double t1967;
  double t1976;
  double t2001;
  double t2010;
  double t2612;
  double t2633;
  double t2662;
  double t2665;
  double t2671;
  double t3340;
  double t3343;
  double t3346;
  double t3357;
  double t3359;
  double t3361;
  double t2415;
  double t2418;
  double t2426;
  double t2485;
  double t2490;
  double t2366;
  double t2381;
  double t2389;
  double t3364;
  double t3367;
  double t3368;
  double t3370;
  double t3372;
  double t3376;
  double t2889;
  double t2898;
  double t3381;
  double t3384;
  double t3385;
  double t2856;
  double t2861;
  double t2965;
  double t2974;
  double t2976;
  double t2986;
  double t3057;
  double t3083;
  double t3090;
  double t3091;
  double t3122;
  double t3124;
  double t3127;
  double t3457;
  double t3459;
  double t3462;
  double t3466;
  double t3468;
  double t3471;
  double t3184;
  double t3206;
  double t3215;
  double t3218;
  double t3247;
  double t3248;
  double t3256;
  double t3274;
  double t3276;
  double t3279;
  double t3280;
  double t3313;
  double t3318;
  double t3489;
  double t3492;
  double t3493;
  double t3477;
  double t3478;
  double t3479;
  double t3495;
  double t3497;
  double t3498;
  double t3288;
  double t3291;
  double t3463;
  double t3472;
  double t3485;
  double t3494;
  double t3499;
  double t3500;
  double t3506;
  double t3508;
  double t3509;
  double t3510;
  double t3511;
  double t3513;
  double t3514;
  double t3516;
  double t3519;
  double t3522;
  double t3525;
  double t3533;
  double t3538;
  double t3546;
  double t3613;
  double t3615;
  double t3617;
  double t3638;
  double t3639;
  double t3642;
  double t3647;
  double t3653;
  double t3656;
  double t3657;
  double t3658;
  double t3630;
  double t3631;
  double t3632;
  double t3636;
  double t3710;
  double t3711;
  double t3713;
  double t3714;
  double t3690;
  double t3693;
  double t3698;
  double t3700;
  double t3752;
  double t3754;
  double t3838;
  double t3348;
  double t3363;
  double t3369;
  double t3378;
  double t3387;
  double t3389;
  double t3392;
  double t3393;
  double t3397;
  double t3398;
  double t3404;
  double t3407;
  double t3410;
  double t3425;
  double t3428;
  double t3438;
  double t3440;
  double t3441;
  double t3442;
  double t3450;
  double t3897;
  double t3899;
  double t3908;
  double t3916;
  double t3921;
  double t3922;
  double t3926;
  double t3936;
  double t3937;
  double t3952;
  double t3955;
  double t3956;
  double t3961;
  double t3966;
  double t4040;
  double t4046;
  double t4047;
  double t4048;
  double t4067;
  double t4071;
  double t4074;
  double t4092;
  double t4099;
  double t4101;
  double t4104;
  double t165;
  double t416;
  double t815;
  double t858;
  double t872;
  double t4160;
  double t4167;
  double t4164;
  double t4173;
  double t4181;
  double t4185;
  double t4189;
  double t4196;
  double t4199;
  double t4203;
  double t4205;
  double t4210;
  double t4215;
  double t4216;
  double t4227;
  double t4229;
  double t4231;
  double t4232;
  double t4239;
  double t4240;
  double t4249;
  double t4250;
  double t4253;
  double t4254;
  double t4265;
  double t4267;
  double t3130;
  double t3133;
  double t3135;
  double t3136;
  double t4327;
  double t4329;
  double t4331;
  double t4335;
  double t4336;
  double t4338;
  double t4345;
  double t4346;
  double t4347;
  double t4352;
  double t4365;
  double t4367;
  double t4369;
  double t4370;
  double t4354;
  double t4356;
  double t4357;
  double t4359;
  double t4443;
  double t4444;
  double t4445;
  double t4449;
  double t4450;
  double t4452;
  double t4461;
  double t4462;
  double t4463;
  double t4464;
  double t4470;
  double t4476;
  double t4478;
  double t4481;
  double t4486;
  double t4488;
  double t4490;
  double t4492;
  double t4549;
  double t4552;
  double t4553;
  double t4555;
  double t4558;
  double t4561;
  double t4567;
  double t4579;
  double t4581;
  double t4582;
  double t4598;
  double t4599;
  double t4600;
  double t4601;
  double t4591;
  double t4592;
  double t4593;
  double t4594;
  double t4671;
  double t4675;
  double t4676;
  double t4678;
  double t4682;
  double t4684;
  double t4687;
  double t4689;
  double t4694;
  double t4703;
  double t4705;
  double t4706;
  double t4709;
  double t4710;
  double t4712;
  double t4714;
  double t4715;
  double t4716;
  double t4719;
  double t4722;
  double t4723;
  double t4776;
  double t4785;
  double t4790;
  double t4793;
  double t4795;
  double t4796;
  double t4812;
  double t4816;
  double t4818;
  double t4803;
  double t4809;
  double t4810;
  double t4829;
  double t4831;
  double t4833;
  double t3561;
  double t3562;
  double t3570;
  double t3571;
  double t4879;
  double t4884;
  double t4885;
  double t4887;
  double t4896;
  double t4906;
  double t4908;
  double t4919;
  double t4920;
  double t4923;
  double t4912;
  double t4915;
  double t4916;
  double t4929;
  double t4936;
  double t4940;
  double t3585;
  double t3589;
  double t3590;
  double t3602;
  double t3604;
  double t3610;
  double t3619;
  double t3622;
  double t3623;
  double t5002;
  double t5004;
  double t5005;
  double t5025;
  double t5026;
  double t5029;
  double t5031;
  double t5033;
  double t5036;
  double t5037;
  double t5041;
  double t5009;
  double t5011;
  double t5013;
  double t5016;
  double t3701;
  double t3702;
  double t3707;
  double t3717;
  double t3724;
  double t3740;
  double t3759;
  double t3760;
  double t3766;
  double t5084;
  double t5086;
  double t5087;
  double t5089;
  double t5075;
  double t5076;
  double t5079;
  double t5080;
  double t5091;
  double t5093;
  double t3844;
  double t3845;
  double t3856;
  double t5132;
  double t5138;
  double t5141;
  double t5147;
  double t5150;
  double t5152;
  double t5156;
  double t5163;
  double t5164;
  double t5167;
  double t5174;
  double t5175;
  double t5184;
  double t3867;
  double t3870;
  double t3874;
  double t3876;
  double t3878;
  double t3882;
  double t3888;
  double t3891;
  double t5241;
  double t5246;
  double t5247;
  double t5252;
  double t5253;
  double t5256;
  double t5258;
  double t5259;
  double t5263;
  double t5264;
  double t5267;
  double t5268;
  double t5275;
  double t5276;
  double t4027;
  double t4028;
  double t4037;
  double t4050;
  double t4059;
  double t4083;
  double t4084;
  double t4089;
  double t5316;
  double t5323;
  double t5324;
  double t5330;
  double t5332;
  double t5335;
  double t5337;
  double t5342;
  double t5343;
  double t5347;
  double t5348;
  t206 = Cos(var1[10]);
  t1309 = Cos(var1[9]);
  t1472 = -1.*t1309;
  t1473 = 1. + t1472;
  t1559 = Sin(var1[9]);
  t1574 = -0.15121*t1559;
  t1673 = Sin(var1[4]);
  t329 = -1.*t206;
  t334 = 1. + t329;
  t750 = -1. + t206;
  t853 = Sin(var1[10]);
  t1293 = Cos(var1[5]);
  t1814 = Sin(var1[5]);
  t163 = Cos(var1[4]);
  t2040 = t1293*t1559*t1673;
  t2043 = t1309*t1673*t1814;
  t2160 = t2040 + t2043;
  t2203 = -1.*t1309*t1293*t1673;
  t2250 = t1559*t1673*t1814;
  t2251 = t2203 + t2250;
  t2315 = Cos(var1[11]);
  t2345 = -1.*t2315;
  t2365 = 1. + t2345;
  t2367 = Sin(var1[11]);
  t2419 = -1. + t2315;
  t2390 = t163*t853;
  t2395 = -4.e-6*t853*t2160;
  t2396 = -1.000000000016*t334;
  t2398 = 1. + t2396;
  t2399 = t2398*t2251;
  t2401 = t2390 + t2395 + t2399;
  t2533 = t206*t163;
  t2534 = 4.e-6*t334*t2160;
  t2541 = -1.*t853*t2251;
  t2551 = t2533 + t2534 + t2541;
  t2725 = 4.e-6*t334*t163;
  t2733 = 1.6e-11*t750;
  t2746 = 1. + t2733;
  t2771 = t2746*t2160;
  t2773 = 4.e-6*t853*t2251;
  t2781 = t2725 + t2771 + t2773;
  t2920 = Cos(var1[6]);
  t2928 = -1.*t2920;
  t2944 = 1. + t2928;
  t2948 = 0.15121*t2944;
  t2959 = Sin(var1[6]);
  t3072 = Cos(var1[7]);
  t3074 = -1.*t3072;
  t3080 = 1. + t3074;
  t3085 = Sin(var1[7]);
  t3150 = -1. + t3072;
  t3016 = t2920*t1673*t1814;
  t3048 = t1293*t1673*t2959;
  t3053 = t3016 + t3048;
  t3110 = -1.*t1293*t2920*t1673;
  t3111 = t1673*t1814*t2959;
  t3116 = t3110 + t3111;
  t3192 = Cos(var1[8]);
  t3200 = -1.*t3192;
  t3204 = 1. + t3200;
  t3212 = Sin(var1[8]);
  t3151 = 4.e-6*t163*t3150;
  t3161 = 1.6e-11*t3150;
  t3168 = 1. + t3161;
  t3175 = t3168*t3053;
  t3180 = 4.e-6*t3116*t3085;
  t3181 = t3151 + t3175 + t3180;
  t3287 = -1. + t3192;
  t3266 = t163*t3072;
  t3267 = 4.e-6*t3150*t3053;
  t3269 = t3116*t3085;
  t3271 = t3266 + t3267 + t3269;
  t3226 = -1.000000000016*t3080;
  t3228 = 1. + t3226;
  t3231 = t3228*t3116;
  t3232 = -1.*t163*t3085;
  t3237 = -4.e-6*t3053*t3085;
  t3240 = t3231 + t3232 + t3237;
  t1720 = -0.15121*t1473;
  t1759 = t1720 + t1574;
  t1521 = 0.15121*t1473;
  t1583 = t1521 + t1574;
  t2167 = 0.281210000008499*t334;
  t2186 = -0.03874900000062*t853;
  t2193 = t2167 + t2186;
  t1951 = -1.2484e-7*var1[10];
  t1967 = 2.479936e-18*t334;
  t1976 = -1.54996e-7*t750;
  t2001 = 1.124840000016e-6*t853;
  t2010 = t1951 + t1967 + t1976 + t2001;
  t2612 = -1.26e-8*var1[11];
  t2633 = 2.552896e-18*t2365;
  t2662 = -1.59556e-7*t2419;
  t2665 = 2.012600000032e-6*t2367;
  t2671 = t2612 + t2633 + t2662 + t2665;
  t3340 = -1.*t163*t1293*t1559;
  t3343 = -1.*t1309*t163*t1814;
  t3346 = t3340 + t3343;
  t3357 = -1.*t1309*t163*t1293;
  t3359 = t163*t1559*t1814;
  t3361 = t3357 + t3359;
  t2415 = -5.04e-14*var1[11];
  t2418 = -0.039889*t2365;
  t2426 = 6.38224e-13*t2419;
  t2485 = -0.503150000008*t2367;
  t2490 = t2415 + t2418 + t2426 + t2485;
  t2366 = 0.50315000001605*t2365;
  t2381 = -0.0398890000006382*t2367;
  t2389 = t2366 + t2381;
  t3364 = 4.e-6*t853*t3346;
  t3367 = t2746*t3361;
  t3368 = t3364 + t3367;
  t3370 = -1.*t853*t3346;
  t3372 = 4.e-6*t334*t3361;
  t3376 = t3370 + t3372;
  t2889 = -1.000000000016*t2365;
  t2898 = 1. + t2889;
  t3381 = t2398*t3346;
  t3384 = -4.e-6*t853*t3361;
  t3385 = t3381 + t3384;
  t2856 = 1.6e-11*t2419;
  t2861 = 1. + t2856;
  t2965 = -0.15121*t2959;
  t2974 = t2948 + t2965;
  t2976 = 0.15121*t2959;
  t2986 = t2948 + t2976;
  t3057 = -1.2484e-7*var1[7];
  t3083 = -1.5499600000248e-7*t3080;
  t3090 = 1.124840000016e-6*t3085;
  t3091 = t3057 + t3083 + t3090;
  t3122 = 0.281210000008499*t3080;
  t3124 = 0.03874900000062*t3085;
  t3127 = t3122 + t3124;
  t3457 = -1.*t163*t1293*t2920;
  t3459 = t163*t1814*t2959;
  t3462 = t3457 + t3459;
  t3466 = -1.*t163*t2920*t1814;
  t3468 = -1.*t163*t1293*t2959;
  t3471 = t3466 + t3468;
  t3184 = -1.284e-8*var1[8];
  t3206 = -1.5499600000248e-7*t3204;
  t3215 = 2.012840000032e-6*t3212;
  t3218 = t3184 + t3206 + t3215;
  t3247 = 0.503210000016051*t3204;
  t3248 = 0.03874900000062*t3212;
  t3256 = t3247 + t3248;
  t3274 = 5.136e-14*var1[8];
  t3276 = -0.03874900000062*t3204;
  t3279 = 0.503210000008*t3212;
  t3280 = t3274 + t3276 + t3279;
  t3313 = -1.000000000016*t3204;
  t3318 = 1. + t3313;
  t3489 = t3228*t3471;
  t3492 = -4.e-6*t3462*t3085;
  t3493 = t3489 + t3492;
  t3477 = t3168*t3462;
  t3478 = 4.e-6*t3471*t3085;
  t3479 = t3477 + t3478;
  t3495 = 4.e-6*t3150*t3462;
  t3497 = t3471*t3085;
  t3498 = t3495 + t3497;
  t3288 = 1.6e-11*t3287;
  t3291 = 1. + t3288;
  t3463 = -1.*t3462*t3091;
  t3472 = -1.*t3471*t3127;
  t3485 = -1.*t3479*t3218;
  t3494 = -1.*t3493*t3256;
  t3499 = -1.*t3498*t3280;
  t3500 = t3318*t3493;
  t3506 = -4.e-6*t3479*t3212;
  t3508 = -1.*t3498*t3212;
  t3509 = t3500 + t3506 + t3508;
  t3510 = -0.80321*t3509;
  t3511 = t3291*t3479;
  t3513 = 4.e-6*t3287*t3498;
  t3514 = 4.e-6*t3493*t3212;
  t3516 = t3511 + t3513 + t3514;
  t3519 = -0.14871*t3516;
  t3522 = 4.e-6*t3287*t3479;
  t3525 = t3192*t3498;
  t3533 = t3493*t3212;
  t3538 = t3522 + t3525 + t3533;
  t3546 = 0.03875*t3538;
  t3613 = t163*t1293*t2920;
  t3615 = -1.*t163*t1814*t2959;
  t3617 = t3613 + t3615;
  t3638 = -1.*t3072*t1673;
  t3639 = -4.e-6*t3072*t3471;
  t3642 = -1.000000000016*t3617*t3085;
  t3647 = t3638 + t3639 + t3642;
  t3653 = t3072*t3617;
  t3656 = -1.*t1673*t3085;
  t3657 = -4.e-6*t3471*t3085;
  t3658 = t3653 + t3656 + t3657;
  t3630 = 4.e-6*t3072*t3617;
  t3631 = -4.e-6*t1673*t3085;
  t3632 = -1.6e-11*t3471*t3085;
  t3636 = t3630 + t3631 + t3632;
  t3710 = 4.e-6*t3150*t1673;
  t3711 = t3168*t3471;
  t3713 = 4.e-6*t3617*t3085;
  t3714 = t3710 + t3711 + t3713;
  t3690 = t3072*t1673;
  t3693 = 4.e-6*t3150*t3471;
  t3698 = t3617*t3085;
  t3700 = t3690 + t3693 + t3698;
  t3752 = t3228*t3617;
  t3754 = t3752 + t3656 + t3657;
  t3838 = -0.15121*t1309;
  t3348 = t2193*t3346;
  t3363 = t2010*t3361;
  t3369 = t2671*t3368;
  t3378 = t2490*t3376;
  t3387 = t2389*t3385;
  t3389 = -4.e-6*t2367*t3368;
  t3392 = t2367*t3376;
  t3393 = t2898*t3385;
  t3397 = t3389 + t3392 + t3393;
  t3398 = 0.803147*t3397;
  t3404 = 4.e-6*t2365*t3368;
  t3407 = t2315*t3376;
  t3410 = -1.*t2367*t3385;
  t3425 = t3404 + t3407 + t3410;
  t3428 = -0.041195*t3425;
  t3438 = t2861*t3368;
  t3440 = 4.e-6*t2365*t3376;
  t3441 = 4.e-6*t2367*t3385;
  t3442 = t3438 + t3440 + t3441;
  t3450 = -0.14871*t3442;
  t3897 = t1309*t163*t1293;
  t3899 = -1.*t163*t1559*t1814;
  t3908 = t3897 + t3899;
  t3916 = -1.*t853*t1673;
  t3921 = -1.*t206*t3908;
  t3922 = t3916 + t3364 + t3921;
  t3926 = 4.e-6*t853*t1673;
  t3936 = -1.6e-11*t853*t3346;
  t3937 = 4.e-6*t206*t3908;
  t3952 = t3926 + t3936 + t3937;
  t3955 = t206*t1673;
  t3956 = -4.e-6*t206*t3346;
  t3961 = -1.000000000016*t853*t3908;
  t3966 = t3955 + t3956 + t3961;
  t4040 = t853*t1673;
  t4046 = -4.e-6*t853*t3346;
  t4047 = t2398*t3908;
  t4048 = t4040 + t4046 + t4047;
  t4067 = 4.e-6*t334*t3346;
  t4071 = -1.*t853*t3908;
  t4074 = t3955 + t4067 + t4071;
  t4092 = 4.e-6*t334*t1673;
  t4099 = t2746*t3346;
  t4101 = 4.e-6*t853*t3908;
  t4104 = t4092 + t4099 + t4101;
  t165 = -4.9936e-13*var1[10];
  t416 = -0.038749*t334;
  t815 = 6.19984e-13*t750;
  t858 = -0.281210000004*t853;
  t872 = t165 + t416 + t815 + t858;
  t4160 = Cos(var1[3]);
  t4167 = Sin(var1[3]);
  t4164 = t4160*t1293*t1673;
  t4173 = -1.*t4167*t1814;
  t4181 = t4164 + t4173;
  t4185 = -1.*t1293*t4167;
  t4189 = -1.*t4160*t1673*t1814;
  t4196 = t4185 + t4189;
  t4199 = -1.*t1559*t4181;
  t4203 = t1309*t4196;
  t4205 = t4199 + t4203;
  t4210 = t1309*t4181;
  t4215 = t1559*t4196;
  t4216 = t4210 + t4215;
  t4227 = -1.*t4160*t163*t853;
  t4229 = -4.e-6*t853*t4205;
  t4231 = t2398*t4216;
  t4232 = t4227 + t4229 + t4231;
  t4239 = -1.*t206*t4160*t163;
  t4240 = 4.e-6*t334*t4205;
  t4249 = -1.*t853*t4216;
  t4250 = t4239 + t4240 + t4249;
  t4253 = -4.e-6*t334*t4160*t163;
  t4254 = t2746*t4205;
  t4265 = 4.e-6*t853*t4216;
  t4267 = t4253 + t4254 + t4265;
  t3130 = 4.9936e-13*var1[7];
  t3133 = -0.03874900000062*t3080;
  t3135 = 0.281210000004*t3085;
  t3136 = t3130 + t3133 + t3135;
  t4327 = t2920*t4196;
  t4329 = -1.*t4181*t2959;
  t4331 = t4327 + t4329;
  t4335 = t2920*t4181;
  t4336 = t4196*t2959;
  t4338 = t4335 + t4336;
  t4345 = -4.e-6*t4160*t163*t3150;
  t4346 = t3168*t4331;
  t4347 = 4.e-6*t4338*t3085;
  t4352 = t4345 + t4346 + t4347;
  t4365 = -1.*t4160*t163*t3072;
  t4367 = 4.e-6*t3150*t4331;
  t4369 = t4338*t3085;
  t4370 = t4365 + t4367 + t4369;
  t4354 = t3228*t4338;
  t4356 = t4160*t163*t3085;
  t4357 = -4.e-6*t4331*t3085;
  t4359 = t4354 + t4356 + t4357;
  t4443 = -1.*t163*t1293*t1559*t4167;
  t4444 = -1.*t1309*t163*t4167*t1814;
  t4445 = t4443 + t4444;
  t4449 = t1309*t163*t1293*t4167;
  t4450 = -1.*t163*t1559*t4167*t1814;
  t4452 = t4449 + t4450;
  t4461 = t853*t4167*t1673;
  t4462 = -4.e-6*t853*t4445;
  t4463 = t2398*t4452;
  t4464 = t4461 + t4462 + t4463;
  t4470 = t206*t4167*t1673;
  t4476 = 4.e-6*t334*t4445;
  t4478 = -1.*t853*t4452;
  t4481 = t4470 + t4476 + t4478;
  t4486 = 4.e-6*t334*t4167*t1673;
  t4488 = t2746*t4445;
  t4490 = 4.e-6*t853*t4452;
  t4492 = t4486 + t4488 + t4490;
  t4549 = -1.*t163*t2920*t4167*t1814;
  t4552 = -1.*t163*t1293*t4167*t2959;
  t4553 = t4549 + t4552;
  t4555 = t163*t1293*t2920*t4167;
  t4558 = -1.*t163*t4167*t1814*t2959;
  t4561 = t4555 + t4558;
  t4567 = 4.e-6*t3150*t4167*t1673;
  t4579 = t3168*t4553;
  t4581 = 4.e-6*t4561*t3085;
  t4582 = t4567 + t4579 + t4581;
  t4598 = t3072*t4167*t1673;
  t4599 = 4.e-6*t3150*t4553;
  t4600 = t4561*t3085;
  t4601 = t4598 + t4599 + t4600;
  t4591 = t3228*t4561;
  t4592 = -1.*t4167*t1673*t3085;
  t4593 = -4.e-6*t4553*t3085;
  t4594 = t4591 + t4592 + t4593;
  t4671 = -1.*t1293*t4167*t1673;
  t4675 = -1.*t4160*t1814;
  t4676 = t4671 + t4675;
  t4678 = t4160*t1293;
  t4682 = -1.*t4167*t1673*t1814;
  t4684 = t4678 + t4682;
  t4687 = t1559*t4676;
  t4689 = t1309*t4684;
  t4694 = t4687 + t4689;
  t4703 = t1309*t4676;
  t4705 = -1.*t1559*t4684;
  t4706 = t4703 + t4705;
  t4709 = 4.e-6*t853*t4694;
  t4710 = t2746*t4706;
  t4712 = t4709 + t4710;
  t4714 = -1.*t853*t4694;
  t4715 = 4.e-6*t334*t4706;
  t4716 = t4714 + t4715;
  t4719 = t2398*t4694;
  t4722 = -4.e-6*t853*t4706;
  t4723 = t4719 + t4722;
  t4776 = t2920*t4676;
  t4785 = -1.*t4684*t2959;
  t4790 = t4776 + t4785;
  t4793 = t2920*t4684;
  t4795 = t4676*t2959;
  t4796 = t4793 + t4795;
  t4812 = t3228*t4796;
  t4816 = -4.e-6*t4790*t3085;
  t4818 = t4812 + t4816;
  t4803 = t3168*t4790;
  t4809 = 4.e-6*t4796*t3085;
  t4810 = t4803 + t4809;
  t4829 = 4.e-6*t3150*t4790;
  t4831 = t4796*t3085;
  t4833 = t4829 + t4831;
  t3561 = -0.15121*t2920;
  t3562 = t3561 + t2976;
  t3570 = 0.15121*t2920;
  t3571 = t3570 + t2976;
  t4879 = t1293*t4167*t1673;
  t4884 = t4160*t1814;
  t4885 = t4879 + t4884;
  t4887 = -1.*t2920*t4885;
  t4896 = t4887 + t4785;
  t4906 = -1.*t4885*t2959;
  t4908 = t4793 + t4906;
  t4919 = t3228*t4908;
  t4920 = -4.e-6*t4896*t3085;
  t4923 = t4919 + t4920;
  t4912 = t3168*t4896;
  t4915 = 4.e-6*t4908*t3085;
  t4916 = t4912 + t4915;
  t4929 = 4.e-6*t3150*t4896;
  t4936 = t4908*t3085;
  t4940 = t4929 + t4936;
  t3585 = 0.281210000004*t3072;
  t3589 = -0.03874900000062*t3085;
  t3590 = 4.9936e-13 + t3585 + t3589;
  t3602 = 1.124840000016e-6*t3072;
  t3604 = -1.5499600000248e-7*t3085;
  t3610 = -1.2484e-7 + t3602 + t3604;
  t3619 = 0.03874900000062*t3072;
  t3622 = 0.281210000008499*t3085;
  t3623 = t3619 + t3622;
  t5002 = t2920*t4885;
  t5004 = t4684*t2959;
  t5005 = t5002 + t5004;
  t5025 = t163*t3072*t4167;
  t5026 = -4.e-6*t3072*t4908;
  t5029 = -1.000000000016*t5005*t3085;
  t5031 = t5025 + t5026 + t5029;
  t5033 = t3072*t5005;
  t5036 = t163*t4167*t3085;
  t5037 = -4.e-6*t4908*t3085;
  t5041 = t5033 + t5036 + t5037;
  t5009 = 4.e-6*t3072*t5005;
  t5011 = 4.e-6*t163*t4167*t3085;
  t5013 = -1.6e-11*t4908*t3085;
  t5016 = t5009 + t5011 + t5013;
  t3701 = 0.503210000008*t3192;
  t3702 = -0.03874900000062*t3212;
  t3707 = 5.136e-14 + t3701 + t3702;
  t3717 = 2.012840000032e-6*t3192;
  t3724 = -1.5499600000248e-7*t3212;
  t3740 = -1.284e-8 + t3717 + t3724;
  t3759 = 0.03874900000062*t3192;
  t3760 = 0.503210000016051*t3212;
  t3766 = t3759 + t3760;
  t5084 = -4.e-6*t163*t3150*t4167;
  t5086 = t3168*t4908;
  t5087 = 4.e-6*t5005*t3085;
  t5089 = t5084 + t5086 + t5087;
  t5075 = -1.*t163*t3072*t4167;
  t5076 = 4.e-6*t3150*t4908;
  t5079 = t5005*t3085;
  t5080 = t5075 + t5076 + t5079;
  t5091 = t3228*t5005;
  t5093 = t5091 + t5036 + t5037;
  t3844 = 0.15121*t1559;
  t3845 = t3838 + t3844;
  t3856 = t3838 + t1574;
  t5132 = -1.*t1559*t4885;
  t5138 = t5132 + t4689;
  t5141 = -1.*t1309*t4885;
  t5147 = t5141 + t4705;
  t5150 = 4.e-6*t853*t5138;
  t5152 = t2746*t5147;
  t5156 = t5150 + t5152;
  t5163 = -1.*t853*t5138;
  t5164 = 4.e-6*t334*t5147;
  t5167 = t5163 + t5164;
  t5174 = t2398*t5138;
  t5175 = -4.e-6*t853*t5147;
  t5184 = t5174 + t5175;
  t3867 = -0.281210000004*t206;
  t3870 = -4.9936e-13 + t3867 + t2186;
  t3874 = 1.124840000016e-6*t206;
  t3876 = 1.5499600000248e-7*t853;
  t3878 = -1.2484e-7 + t3874 + t3876;
  t3882 = -0.03874900000062*t206;
  t3888 = 0.281210000008499*t853;
  t3891 = t3882 + t3888;
  t5241 = t1309*t4885;
  t5246 = t1559*t4684;
  t5247 = t5241 + t5246;
  t5252 = t163*t853*t4167;
  t5253 = -1.*t206*t5247;
  t5256 = t5252 + t5150 + t5253;
  t5258 = -4.e-6*t163*t853*t4167;
  t5259 = -1.6e-11*t853*t5138;
  t5263 = 4.e-6*t206*t5247;
  t5264 = t5258 + t5259 + t5263;
  t5267 = -1.*t206*t163*t4167;
  t5268 = -4.e-6*t206*t5138;
  t5275 = -1.000000000016*t853*t5247;
  t5276 = t5267 + t5268 + t5275;
  t4027 = -0.0398890000006382*t2315;
  t4028 = 0.50315000001605*t2367;
  t4037 = t4027 + t4028;
  t4050 = -0.503150000008*t2315;
  t4059 = -5.04e-14 + t4050 + t2381;
  t4083 = 2.012600000032e-6*t2315;
  t4084 = 1.59556000002553e-7*t2367;
  t4089 = -1.26e-8 + t4083 + t4084;
  t5316 = -1.*t163*t853*t4167;
  t5323 = -4.e-6*t853*t5138;
  t5324 = t2398*t5247;
  t5330 = t5316 + t5323 + t5324;
  t5332 = 4.e-6*t334*t5138;
  t5335 = -1.*t853*t5247;
  t5337 = t5267 + t5332 + t5335;
  t5342 = -4.e-6*t334*t163*t4167;
  t5343 = t2746*t5138;
  t5347 = 4.e-6*t853*t5247;
  t5348 = t5342 + t5343 + t5347;
  p_output1[0]=-1.*t1293*t1583*t1673 + t1673*t1759*t1814 + t2010*t2160 + t2193*t2251 + t2389*t2401 + t2490*t2551 + t2671*t2781 - 0.041195*(-1.*t2367*t2401 + t2315*t2551 + 4.e-6*t2365*t2781) - 0.14871*(4.e-6*t2367*t2401 + 4.e-6*t2365*t2551 + t2781*t2861) + 0.803147*(t2367*t2551 - 4.e-6*t2367*t2781 + t2401*t2898) - 1.*t1673*t1814*t2974 + t1293*t1673*t2986 - 1.*t3053*t3091 - 1.*t3116*t3127 - 1.*t163*t3136 - 1.*t3181*t3218 - 1.*t3240*t3256 - 1.*t3271*t3280 + 0.03875*(t3212*t3240 + t3192*t3271 + 4.e-6*t3181*t3287) - 0.14871*(4.e-6*t3212*t3240 + 4.e-6*t3271*t3287 + t3181*t3291) - 0.80321*(-4.e-6*t3181*t3212 - 1.*t3212*t3271 + t3240*t3318) + t163*t872;
  p_output1[1]=-1.*t1293*t163*t1759 - 1.*t1583*t163*t1814 + t1293*t163*t2974 + t163*t1814*t2986 + t3348 + t3363 + t3369 + t3378 + t3387 + t3398 + t3428 + t3450 + t3463 + t3472 + t3485 + t3494 + t3499 + t3510 + t3519 + t3546;
  p_output1[2]=t3463 + t3472 + t3485 + t3494 + t3499 + t3510 + t3519 + t3546 + t163*t1814*t3562 - 1.*t1293*t163*t3571;
  p_output1[3]=-1.*t1673*t3590 - 1.*t3471*t3610 - 1.*t3617*t3623 - 1.*t3218*t3636 - 1.*t3256*t3647 - 1.*t3280*t3658 + 0.03875*(4.e-6*t3287*t3636 + t3212*t3647 + t3192*t3658) - 0.80321*(-4.e-6*t3212*t3636 + t3318*t3647 - 1.*t3212*t3658) - 0.14871*(t3291*t3636 + 4.e-6*t3212*t3647 + 4.e-6*t3287*t3658);
  p_output1[4]=-1.*t3700*t3707 - 1.*t3714*t3740 - 0.14871*(-4.e-6*t3212*t3700 - 1.6e-11*t3212*t3714 + 4.e-6*t3192*t3754) + 0.03875*(-1.*t3212*t3700 - 4.e-6*t3212*t3714 + t3192*t3754) - 0.80321*(-1.*t3192*t3700 - 4.e-6*t3192*t3714 - 1.000000000016*t3212*t3754) - 1.*t3754*t3766;
  p_output1[5]=t3348 + t3363 + t3369 + t3378 + t3387 + t3398 + t3428 + t3450 + t1293*t163*t3845 - 1.*t163*t1814*t3856;
  p_output1[6]=t1673*t3870 + t3346*t3878 + t3891*t3908 + t2490*t3922 + t2671*t3952 + t2389*t3966 - 0.041195*(t2315*t3922 + 4.e-6*t2365*t3952 - 1.*t2367*t3966) - 0.14871*(4.e-6*t2365*t3922 + t2861*t3952 + 4.e-6*t2367*t3966) + 0.803147*(t2367*t3922 - 4.e-6*t2367*t3952 + t2898*t3966);
  p_output1[7]=t4037*t4048 + t4059*t4074 + t4089*t4104 + 0.803147*(-1.000000000016*t2367*t4048 + t2315*t4074 - 4.e-6*t2315*t4104) - 0.14871*(4.e-6*t2315*t4048 + 4.e-6*t2367*t4074 - 1.6e-11*t2367*t4104) - 0.041195*(-1.*t2315*t4048 - 1.*t2367*t4074 + 4.e-6*t2367*t4104);
  p_output1[8]=t163*t3136*t4160 + t1583*t4181 - 1.*t2986*t4181 + t1759*t4196 - 1.*t2974*t4196 + t2010*t4205 + t2193*t4216 + t2389*t4232 + t2490*t4250 + t2671*t4267 - 0.041195*(-1.*t2367*t4232 + t2315*t4250 + 4.e-6*t2365*t4267) + 0.803147*(t2898*t4232 + t2367*t4250 - 4.e-6*t2367*t4267) - 0.14871*(4.e-6*t2367*t4232 + 4.e-6*t2365*t4250 + t2861*t4267) - 1.*t3091*t4331 - 1.*t3127*t4338 - 1.*t3218*t4352 - 1.*t3256*t4359 - 1.*t3280*t4370 + 0.03875*(4.e-6*t3287*t4352 + t3212*t4359 + t3192*t4370) - 0.80321*(-4.e-6*t3212*t4352 + t3318*t4359 - 1.*t3212*t4370) - 0.14871*(t3291*t4352 + 4.e-6*t3212*t4359 + 4.e-6*t3287*t4370) - 1.*t163*t4160*t872;
  p_output1[9]=t1293*t1583*t163*t4167 - 1.*t163*t1759*t1814*t4167 + t163*t1814*t2974*t4167 - 1.*t1293*t163*t2986*t4167 - 1.*t1673*t3136*t4167 + t2010*t4445 + t2193*t4452 + t2389*t4464 + t2490*t4481 + t2671*t4492 - 0.041195*(-1.*t2367*t4464 + t2315*t4481 + 4.e-6*t2365*t4492) + 0.803147*(t2898*t4464 + t2367*t4481 - 4.e-6*t2367*t4492) - 0.14871*(4.e-6*t2367*t4464 + 4.e-6*t2365*t4481 + t2861*t4492) - 1.*t3091*t4553 - 1.*t3127*t4561 - 1.*t3218*t4582 - 1.*t3256*t4594 - 1.*t3280*t4601 + 0.03875*(4.e-6*t3287*t4582 + t3212*t4594 + t3192*t4601) - 0.80321*(-4.e-6*t3212*t4582 + t3318*t4594 - 1.*t3212*t4601) - 0.14871*(t3291*t4582 + 4.e-6*t3212*t4594 + 4.e-6*t3287*t4601) + t1673*t4167*t872;
  p_output1[10]=t1759*t4676 - 1.*t2974*t4676 + t1583*t4684 - 1.*t2986*t4684 + t2193*t4694 + t2010*t4706 + t2671*t4712 + t2490*t4716 + t2389*t4723 - 0.041195*(4.e-6*t2365*t4712 + t2315*t4716 - 1.*t2367*t4723) - 0.14871*(t2861*t4712 + 4.e-6*t2365*t4716 + 4.e-6*t2367*t4723) + 0.803147*(-4.e-6*t2367*t4712 + t2367*t4716 + t2898*t4723) - 1.*t3091*t4790 - 1.*t3127*t4796 - 1.*t3218*t4810 - 1.*t3256*t4818 - 1.*t3280*t4833 + 0.03875*(4.e-6*t3287*t4810 + t3212*t4818 + t3192*t4833) - 0.80321*(-4.e-6*t3212*t4810 + t3318*t4818 - 1.*t3212*t4833) - 0.14871*(t3291*t4810 + 4.e-6*t3212*t4818 + 4.e-6*t3287*t4833);
  p_output1[11]=-1.*t3562*t4684 - 1.*t3571*t4885 - 1.*t3091*t4896 - 1.*t3127*t4908 - 1.*t3218*t4916 - 1.*t3256*t4923 - 1.*t3280*t4940 + 0.03875*(4.e-6*t3287*t4916 + t3212*t4923 + t3192*t4940) - 0.80321*(-4.e-6*t3212*t4916 + t3318*t4923 - 1.*t3212*t4940) - 0.14871*(t3291*t4916 + 4.e-6*t3212*t4923 + 4.e-6*t3287*t4940);
  p_output1[12]=t163*t3590*t4167 - 1.*t3610*t4908 - 1.*t3623*t5005 - 1.*t3218*t5016 - 1.*t3256*t5031 - 1.*t3280*t5041 + 0.03875*(4.e-6*t3287*t5016 + t3212*t5031 + t3192*t5041) - 0.80321*(-4.e-6*t3212*t5016 + t3318*t5031 - 1.*t3212*t5041) - 0.14871*(t3291*t5016 + 4.e-6*t3212*t5031 + 4.e-6*t3287*t5041);
  p_output1[13]=-1.*t3707*t5080 - 1.*t3740*t5089 - 1.*t3766*t5093 - 0.14871*(-4.e-6*t3212*t5080 - 1.6e-11*t3212*t5089 + 4.e-6*t3192*t5093) + 0.03875*(-1.*t3212*t5080 - 4.e-6*t3212*t5089 + t3192*t5093) - 0.80321*(-1.*t3192*t5080 - 4.e-6*t3192*t5089 - 1.000000000016*t3212*t5093);
  p_output1[14]=t3856*t4684 + t3845*t4885 + t2193*t5138 + t2010*t5147 + t2671*t5156 + t2490*t5167 + t2389*t5184 - 0.041195*(4.e-6*t2365*t5156 + t2315*t5167 - 1.*t2367*t5184) - 0.14871*(t2861*t5156 + 4.e-6*t2365*t5167 + 4.e-6*t2367*t5184) + 0.803147*(-4.e-6*t2367*t5156 + t2367*t5167 + t2898*t5184);
  p_output1[15]=-1.*t163*t3870*t4167 + t3878*t5138 + t3891*t5247 + t2490*t5256 + t2671*t5264 + t2389*t5276 - 0.041195*(t2315*t5256 + 4.e-6*t2365*t5264 - 1.*t2367*t5276) - 0.14871*(4.e-6*t2365*t5256 + t2861*t5264 + 4.e-6*t2367*t5276) + 0.803147*(t2367*t5256 - 4.e-6*t2367*t5264 + t2898*t5276);
  p_output1[16]=t4037*t5330 + t4059*t5337 + t4089*t5348 + 0.803147*(-1.000000000016*t2367*t5330 + t2315*t5337 - 4.e-6*t2315*t5348) - 0.14871*(4.e-6*t2315*t5330 + 4.e-6*t2367*t5337 - 1.6e-11*t2367*t5348) - 0.041195*(-1.*t2315*t5330 - 1.*t2367*t5337 + 4.e-6*t2367*t5348);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 17, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "J_step_distance_DiagonalStance.hh"

namespace DiagonalStance
{

void J_step_distance_DiagonalStance_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
