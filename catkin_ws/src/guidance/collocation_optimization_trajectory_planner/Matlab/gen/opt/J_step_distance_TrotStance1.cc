/*
 * Automatically Generated from Mathematica.
 * Fri 10 Dec 2021 20:16:48 GMT+01:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t369;
  double t370;
  double t380;
  double t1445;
  double t330;
  double t1870;
  double t1949;
  double t2001;
  double t2090;
  double t2215;
  double t2350;
  double t2252;
  double t2283;
  double t2304;
  double t2319;
  double t2328;
  double t2382;
  double t2383;
  double t2390;
  double t2391;
  double t2395;
  double t2431;
  double t717;
  double t2141;
  double t2157;
  double t1722;
  double t2506;
  double t2601;
  double t2029;
  double t3038;
  double t3048;
  double t3049;
  double t3058;
  double t2723;
  double t2783;
  double t2551;
  double t2560;
  double t2565;
  double t2825;
  double t2844;
  double t2851;
  double t3078;
  double t2478;
  double t3139;
  double t2508;
  double t3239;
  double t3055;
  double t3306;
  double t3307;
  double t1678;
  double t3122;
  double t3433;
  double t3435;
  double t3436;
  double t3446;
  double t2908;
  double t2654;
  double t2663;
  double t2666;
  double t2978;
  double t2990;
  double t2993;
  double t3456;
  double t2170;
  double t3488;
  double t2100;
  double t3444;
  double t3567;
  double t3571;
  double t3591;
  double t2635;
  double t3508;
  double t2609;
  double t3123;
  double t3125;
  double t3146;
  double t3163;
  double t3172;
  double t3175;
  double t3176;
  double t3198;
  double t3368;
  double t3311;
  double t3312;
  double t3313;
  double t3323;
  double t3333;
  double t3341;
  double t3342;
  double t3343;
  double t3396;
  double t3399;
  double t3402;
  double t3403;
  double t3404;
  double t3415;
  double t3416;
  double t3420;
  double t3088;
  double t3668;
  double t3062;
  double t3730;
  double t3284;
  double t3684;
  double t3686;
  double t3247;
  double t3628;
  double t3497;
  double t3501;
  double t3510;
  double t3522;
  double t3528;
  double t3531;
  double t3541;
  double t3549;
  double t3637;
  double t3581;
  double t3583;
  double t3586;
  double t3597;
  double t3608;
  double t3610;
  double t3614;
  double t3615;
  double t3645;
  double t3648;
  double t3649;
  double t3651;
  double t3655;
  double t3656;
  double t3657;
  double t3662;
  double t3559;
  double t3807;
  double t3575;
  double t3828;
  double t3800;
  double t3448;
  double t2418;
  double t2422;
  double t2453;
  double t2454;
  double t2307;
  double t2333;
  double t2400;
  double t2404;
  double t2717;
  double t2718;
  double t2764;
  double t2774;
  double t2795;
  double t2811;
  double t2818;
  double t2866;
  double t2876;
  double t2932;
  double t2936;
  double t2961;
  double t2968;
  double t2974;
  double t2469;
  double t2471;
  double t2486;
  double t2491;
  double t2535;
  double t2538;
  double t2540;
  double t2590;
  double t2597;
  double t2623;
  double t2629;
  double t2636;
  double t2641;
  double t2653;
  double t3231;
  double t3233;
  double t3272;
  double t3283;
  double t3287;
  double t3292;
  double t3304;
  double t3905;
  double t3908;
  double t3909;
  double t3918;
  double t3920;
  double t3921;
  double t3014;
  double t3051;
  double t3065;
  double t3072;
  double t3090;
  double t3094;
  double t3103;
  double t3354;
  double t3362;
  double t3372;
  double t3374;
  double t3386;
  double t3392;
  double t3395;
  double t3621;
  double t3626;
  double t3629;
  double t3633;
  double t3638;
  double t3639;
  double t3640;
  double t3912;
  double t3915;
  double t3916;
  double t3929;
  double t3931;
  double t3932;
  double t3555;
  double t3558;
  double t3561;
  double t3562;
  double t3577;
  double t3579;
  double t3580;
  double t3428;
  double t3440;
  double t3452;
  double t3454;
  double t3462;
  double t3465;
  double t3468;
  double t3693;
  double t3936;
  double t3938;
  double t3942;
  double t3671;
  double t3956;
  double t3960;
  double t3962;
  double t3698;
  double t3706;
  double t3969;
  double t3973;
  double t3980;
  double t3737;
  double t3719;
  double t3722;
  double t3742;
  double t3771;
  double t3778;
  double t3767;
  double t3783;
  double t3881;
  double t3989;
  double t3992;
  double t3993;
  double t3874;
  double t3995;
  double t3998;
  double t3999;
  double t3866;
  double t3867;
  double t4002;
  double t4005;
  double t4007;
  double t3843;
  double t3836;
  double t3838;
  double t3829;
  double t3815;
  double t3816;
  double t3808;
  double t3803;
  double t4097;
  double t3911;
  double t3924;
  double t3952;
  double t3967;
  double t3986;
  double t4009;
  double t4010;
  double t4012;
  double t4015;
  double t4016;
  double t4022;
  double t4024;
  double t4027;
  double t4029;
  double t4030;
  double t4032;
  double t4038;
  double t4041;
  double t4044;
  double t4045;
  double t4130;
  double t4165;
  double t4171;
  double t4197;
  double t4206;
  double t4209;
  double t4139;
  double t4253;
  double t4183;
  double t4218;
  double t4220;
  double t4223;
  double t4225;
  double t4228;
  double t4233;
  double t4245;
  double t4248;
  double t4252;
  double t4258;
  double t4268;
  double t4273;
  double t4276;
  double t4278;
  double t4283;
  double t4288;
  double t4295;
  double t4300;
  double t4336;
  double t4376;
  double t4358;
  double t4363;
  double t4364;
  double t4366;
  double t4382;
  double t4388;
  double t4389;
  double t4393;
  double t4370;
  double t4418;
  double t4422;
  double t4423;
  double t4425;
  double t4342;
  double t4468;
  double t4405;
  double t3917;
  double t3934;
  double t3994;
  double t4001;
  double t4008;
  double t4053;
  double t4055;
  double t4058;
  double t4060;
  double t4061;
  double t4062;
  double t4064;
  double t4075;
  double t4080;
  double t4081;
  double t4083;
  double t4085;
  double t4091;
  double t4094;
  double t4095;
  double t4521;
  double t4547;
  double t4566;
  double t4601;
  double t4602;
  double t4605;
  double t4515;
  double t4632;
  double t4591;
  double t4610;
  double t4612;
  double t4614;
  double t4616;
  double t4617;
  double t4620;
  double t4623;
  double t4628;
  double t4630;
  double t4641;
  double t4642;
  double t4645;
  double t4649;
  double t4652;
  double t4658;
  double t4659;
  double t4660;
  double t4663;
  double t4698;
  double t4712;
  double t4714;
  double t4716;
  double t4719;
  double t4738;
  double t4740;
  double t4742;
  double t4746;
  double t4702;
  double t4780;
  double t4783;
  double t4784;
  double t4786;
  double t4791;
  double t4723;
  double t4770;
  double t4760;
  double t363;
  double t431;
  double t1693;
  double t1694;
  double t1766;
  double t1827;
  double t1847;
  double t4847;
  double t1867;
  double t2028;
  double t2105;
  double t2119;
  double t2171;
  double t2178;
  double t2188;
  double t4857;
  double t4859;
  double t4860;
  double t4862;
  double t4866;
  double t4869;
  double t4870;
  double t4877;
  double t4878;
  double t4884;
  double t4895;
  double t4898;
  double t4899;
  double t4888;
  double t4891;
  double t4892;
  double t4903;
  double t4906;
  double t4907;
  double t4909;
  double t4910;
  double t4912;
  double t4914;
  double t4924;
  double t4929;
  double t4930;
  double t4933;
  double t4935;
  double t4936;
  double t4943;
  double t4950;
  double t4955;
  double t4957;
  double t4958;
  double t4959;
  double t4962;
  double t4964;
  double t4969;
  double t4972;
  double t4976;
  double t4977;
  double t4980;
  double t4982;
  double t5058;
  double t5061;
  double t5062;
  double t5071;
  double t5073;
  double t5074;
  double t5065;
  double t5066;
  double t5067;
  double t5077;
  double t5082;
  double t5086;
  double t5091;
  double t5092;
  double t5093;
  double t5094;
  double t5096;
  double t5099;
  double t5101;
  double t5104;
  double t5108;
  double t5110;
  double t5112;
  double t5119;
  double t5122;
  double t5127;
  double t5128;
  double t5129;
  double t5137;
  double t5138;
  double t5142;
  double t5144;
  double t5146;
  double t5150;
  double t5152;
  double t5157;
  double t5242;
  double t5243;
  double t5244;
  double t5249;
  double t5251;
  double t5252;
  double t5256;
  double t5257;
  double t5259;
  double t5274;
  double t5275;
  double t5279;
  double t5263;
  double t5268;
  double t5271;
  double t5283;
  double t5284;
  double t5287;
  double t5289;
  double t5290;
  double t5291;
  double t5293;
  double t5301;
  double t5302;
  double t5310;
  double t5313;
  double t5316;
  double t5318;
  double t5322;
  double t5324;
  double t5327;
  double t5332;
  double t5333;
  double t5337;
  double t5338;
  double t5346;
  double t4099;
  double t4103;
  double t4118;
  double t5428;
  double t5434;
  double t5436;
  double t5443;
  double t5448;
  double t5455;
  double t5456;
  double t5461;
  double t5462;
  double t5464;
  double t5467;
  double t5469;
  double t5471;
  double t5476;
  double t5477;
  double t5478;
  double t4133;
  double t4135;
  double t4143;
  double t4144;
  double t4152;
  double t4155;
  double t4166;
  double t4168;
  double t4173;
  double t4174;
  double t4175;
  double t4176;
  double t4181;
  double t4182;
  double t4188;
  double t4192;
  double t4193;
  double t4194;
  double t5522;
  double t5525;
  double t5526;
  double t5530;
  double t5534;
  double t5537;
  double t5538;
  double t5540;
  double t5541;
  double t5542;
  double t5544;
  double t5556;
  double t5558;
  double t5561;
  double t5563;
  double t4339;
  double t4340;
  double t4346;
  double t4352;
  double t4354;
  double t4356;
  double t4372;
  double t4375;
  double t4377;
  double t4378;
  double t4380;
  double t4381;
  double t4398;
  double t4404;
  double t4407;
  double t4408;
  double t4412;
  double t4414;
  double t4437;
  double t5597;
  double t5598;
  double t5601;
  double t5604;
  double t5609;
  double t5610;
  double t5611;
  double t5613;
  double t4450;
  double t5617;
  double t5619;
  double t5621;
  double t5623;
  double t4464;
  double t4469;
  double t4477;
  double t4482;
  double t4500;
  double t4503;
  double t4506;
  double t4507;
  double t5666;
  double t5670;
  double t5672;
  double t5673;
  double t5680;
  double t5685;
  double t5688;
  double t5697;
  double t5698;
  double t5701;
  double t5711;
  double t5713;
  double t5715;
  double t4516;
  double t4518;
  double t4523;
  double t4524;
  double t4531;
  double t4538;
  double t4551;
  double t4560;
  double t4568;
  double t4575;
  double t4579;
  double t4581;
  double t4587;
  double t4590;
  double t4592;
  double t4594;
  double t4595;
  double t4597;
  double t5764;
  double t5765;
  double t5767;
  double t5771;
  double t5772;
  double t5775;
  double t5777;
  double t5782;
  double t5790;
  double t5793;
  double t5794;
  double t5799;
  double t5801;
  double t5804;
  double t5805;
  double t4699;
  double t4701;
  double t4704;
  double t4706;
  double t4707;
  double t4711;
  double t4724;
  double t4726;
  double t4730;
  double t4733;
  double t4734;
  double t4737;
  double t4767;
  double t4768;
  double t4772;
  double t4774;
  double t4776;
  double t4777;
  double t5847;
  double t5849;
  double t5853;
  double t5854;
  double t4792;
  double t5856;
  double t5859;
  double t5860;
  double t5861;
  double t4794;
  double t5865;
  double t5871;
  double t5872;
  double t5877;
  double t4805;
  double t4817;
  double t4829;
  double t4832;
  t369 = Cos(var1[13]);
  t370 = -1.*t369;
  t380 = 1. + t370;
  t1445 = Sin(var1[13]);
  t330 = Cos(var1[4]);
  t1870 = Cos(var1[16]);
  t1949 = -1.*t1870;
  t2001 = 1. + t1949;
  t2090 = Sin(var1[16]);
  t2215 = Cos(var1[5]);
  t2350 = Sin(var1[4]);
  t2252 = Cos(var1[12]);
  t2283 = -1.*t2252;
  t2304 = 1. + t2283;
  t2319 = Sin(var1[12]);
  t2328 = 0.15121*t2319;
  t2382 = Cos(var1[15]);
  t2383 = -1.*t2382;
  t2390 = 1. + t2383;
  t2391 = -0.15121*t2390;
  t2395 = Sin(var1[15]);
  t2431 = Sin(var1[5]);
  t717 = 4.e-6*t380;
  t2141 = -1. + t1870;
  t2157 = 4.e-6*t2141;
  t1722 = -2.8e-11*t380;
  t2506 = 7.e-6*t380;
  t2601 = 7.e-6*t2001;
  t2029 = 2.8e-11*t2001;
  t3038 = Cos(var1[14]);
  t3048 = -1.*t3038;
  t3049 = 1. + t3048;
  t3058 = Sin(var1[14]);
  t2723 = -1.*t1445;
  t2783 = -4.e-6*t1445;
  t2551 = t2215*t2319*t2350;
  t2560 = t2252*t2350*t2431;
  t2565 = t2551 + t2560;
  t2825 = -1.*t2252*t2215*t2350;
  t2844 = t2319*t2350*t2431;
  t2851 = t2825 + t2844;
  t3078 = 7.e-6*t3049;
  t2478 = -7.e-6*t1445;
  t3139 = -7.e-6*t380;
  t2508 = 4.e-6*t1445;
  t3239 = 4.e-6*t3049;
  t3055 = -2.8e-11*t3049;
  t3306 = -1. + t369;
  t3307 = 4.e-6*t3306;
  t1678 = 7.e-6*t1445;
  t3122 = 2.8e-11*t380;
  t3433 = Cos(var1[17]);
  t3435 = -1.*t3433;
  t3436 = 1. + t3435;
  t3446 = Sin(var1[17]);
  t2908 = -4.e-6*t2090;
  t2654 = t2215*t2395*t2350;
  t2663 = t2382*t2350*t2431;
  t2666 = t2654 + t2663;
  t2978 = -1.*t2382*t2215*t2350;
  t2990 = t2395*t2350*t2431;
  t2993 = t2978 + t2990;
  t3456 = 2.8e-11*t3436;
  t2170 = -7.e-6*t2090;
  t3488 = -2.8e-11*t2001;
  t2100 = -1.*t2090;
  t3444 = 7.e-6*t3436;
  t3567 = -1. + t3433;
  t3571 = 4.e-6*t3567;
  t3591 = 4.e-6*t2001;
  t2635 = 7.e-6*t2090;
  t3508 = -7.e-6*t2001;
  t2609 = 4.e-6*t2090;
  t3123 = t3122 + t2723;
  t3125 = t330*t3123;
  t3146 = t3139 + t2783;
  t3163 = t3146*t2565;
  t3172 = -1.000000000016*t380;
  t3175 = 1. + t3172;
  t3176 = t3175*t2851;
  t3198 = t3125 + t3163 + t3176;
  t3368 = 7.e-6*t3058;
  t3311 = t3307 + t2478;
  t3312 = t330*t3311;
  t3313 = -6.5e-11*t380;
  t3323 = 1. + t3313;
  t3333 = t3323*t2565;
  t3341 = t3139 + t2508;
  t3342 = t3341*t2851;
  t3343 = t3312 + t3333 + t3342;
  t3396 = -1.000000000049*t380;
  t3399 = 1. + t3396;
  t3402 = t3399*t330;
  t3403 = t3307 + t1678;
  t3404 = t3403*t2565;
  t3415 = t3122 + t1445;
  t3416 = t3415*t2851;
  t3420 = t3402 + t3404 + t3416;
  t3088 = -4.e-6*t3058;
  t3668 = 2.8e-11*t3049;
  t3062 = -1.*t3058;
  t3730 = -7.e-6*t3049;
  t3284 = 4.e-6*t3058;
  t3684 = -1. + t3038;
  t3686 = 4.e-6*t3684;
  t3247 = -7.e-6*t3058;
  t3628 = 4.e-6*t3446;
  t3497 = t3488 + t2090;
  t3501 = t330*t3497;
  t3510 = t3508 + t2908;
  t3522 = t3510*t2666;
  t3528 = -1.000000000016*t2001;
  t3531 = 1. + t3528;
  t3541 = t3531*t2993;
  t3549 = t3501 + t3522 + t3541;
  t3637 = 7.e-6*t3446;
  t3581 = -1.000000000049*t2001;
  t3583 = 1. + t3581;
  t3586 = t3583*t330;
  t3597 = t3591 + t2170;
  t3608 = t3597*t2666;
  t3610 = t3488 + t2100;
  t3614 = t3610*t2993;
  t3615 = t3586 + t3608 + t3614;
  t3645 = t3591 + t2635;
  t3648 = t330*t3645;
  t3649 = -6.5e-11*t2001;
  t3651 = 1. + t3649;
  t3655 = t3651*t2666;
  t3656 = t3508 + t2609;
  t3657 = t3656*t2993;
  t3662 = t3648 + t3655 + t3657;
  t3559 = -1.*t3446;
  t3807 = 4.e-6*t3436;
  t3575 = -7.e-6*t3446;
  t3828 = -2.8e-11*t3436;
  t3800 = -7.e-6*t3436;
  t3448 = -4.e-6*t3446;
  t2418 = 0.15121*t2304;
  t2422 = t2418 + t2328;
  t2453 = 0.15121*t2395;
  t2454 = t2391 + t2453;
  t2307 = -0.15121*t2304;
  t2333 = t2307 + t2328;
  t2400 = -0.15121*t2395;
  t2404 = t2391 + t2400;
  t2717 = 1.0248489999999998e-12*var1[13];
  t2718 = -0.28120900000849935*t380;
  t2764 = t1722 + t2723;
  t2774 = -0.038748999993*t2764;
  t2795 = t2506 + t2783;
  t2811 = -2.123459e-6*t2795;
  t2818 = t2717 + t2718 + t2774 + t2811;
  t2866 = -2.7726089999999997e-12*var1[16];
  t2876 = -0.2812110000084994*t2001;
  t2932 = t2601 + t2908;
  t2936 = -1.8134809999999998e-6*t2932;
  t2961 = t2029 + t2090;
  t2968 = -0.038749000006999997*t2961;
  t2974 = t2866 + t2876 + t2936 + t2968;
  t2469 = -1.4640699999999997e-7*var1[13];
  t2471 = -1.38024835e-16*t380;
  t2486 = t717 + t2478;
  t2491 = -0.038748999993*t2486;
  t2535 = t2506 + t2508;
  t2538 = -0.281209000004*t2535;
  t2540 = t2469 + t2471 + t2491 + t2538;
  t2590 = 3.9608699999999997e-7*var1[16];
  t2597 = -1.1787626499999999e-16*t2001;
  t2623 = t2601 + t2609;
  t2629 = -0.281211000004*t2623;
  t2636 = t2157 + t2635;
  t2641 = -0.038749000006999997*t2636;
  t2653 = t2590 + t2597 + t2629 + t2641;
  t3231 = -2.598649999999999e-7*var1[14];
  t3233 = -2.3905277499999995e-16*t3049;
  t3272 = t3239 + t3247;
  t3283 = -0.038922999986*t3272;
  t3287 = t3078 + t3284;
  t3292 = -0.503149000008*t3287;
  t3304 = t3231 + t3233 + t3283 + t3292;
  t3905 = -1.*t330*t2215*t2319;
  t3908 = -1.*t2252*t330*t2431;
  t3909 = t3905 + t3908;
  t3918 = -1.*t2252*t330*t2215;
  t3920 = t330*t2319*t2431;
  t3921 = t3918 + t3920;
  t3014 = 1.8190549999999993e-12*var1[14];
  t3051 = -0.5031490000160505*t3049;
  t3065 = t3055 + t3062;
  t3072 = -0.038922999986*t3065;
  t3090 = t3078 + t3088;
  t3094 = -3.6777349999999994e-6*t3090;
  t3103 = t3014 + t3051 + t3072 + t3094;
  t3354 = 1.0394599999999997e-12*var1[14];
  t3362 = -0.03892299998790722*t3049;
  t3372 = t3239 + t3368;
  t3374 = -3.6777349999999994e-6*t3372;
  t3386 = t3055 + t3058;
  t3392 = -0.503149000008*t3386;
  t3395 = t3354 + t3362 + t3374 + t3392;
  t3621 = 2.826290000000002e-7*var1[17];
  t3626 = -2.18904205e-16*t3436;
  t3629 = t3444 + t3628;
  t3633 = -0.5031510000080001*t3629;
  t3638 = t3571 + t3637;
  t3639 = -0.038575000014*t3638;
  t3640 = t3621 + t3626 + t3633 + t3639;
  t3912 = -1.*t330*t2215*t2395;
  t3915 = -1.*t2382*t330*t2431;
  t3916 = t3912 + t3915;
  t3929 = -1.*t2382*t330*t2215;
  t3931 = t330*t2395*t2431;
  t3932 = t3929 + t3931;
  t3555 = 1.1305160000000008e-12*var1[17];
  t3558 = -0.03857500001589017*t3436;
  t3561 = t3456 + t3559;
  t3562 = -0.5031510000080001*t3561;
  t3577 = t3571 + t3575;
  t3579 = -3.367757e-6*t3577;
  t3580 = t3555 + t3558 + t3562 + t3579;
  t3428 = -1.9784030000000015e-12*var1[17];
  t3440 = -0.5031510000160505*t3436;
  t3452 = t3444 + t3448;
  t3454 = -3.367757e-6*t3452;
  t3462 = t3456 + t3446;
  t3465 = -0.038575000014*t3462;
  t3468 = t3428 + t3440 + t3454 + t3465;
  t3693 = t3686 + t3368;
  t3936 = t3341*t3909;
  t3938 = t3323*t3921;
  t3942 = t3936 + t3938;
  t3671 = t3668 + t3058;
  t3956 = t3175*t3909;
  t3960 = t3146*t3921;
  t3962 = t3956 + t3960;
  t3698 = -1.000000000049*t3049;
  t3706 = 1. + t3698;
  t3969 = t3415*t3909;
  t3973 = t3403*t3921;
  t3980 = t3969 + t3973;
  t3737 = t3730 + t3088;
  t3719 = -1.000000000016*t3049;
  t3722 = 1. + t3719;
  t3742 = t3668 + t3062;
  t3771 = -6.5e-11*t3049;
  t3778 = 1. + t3771;
  t3767 = t3730 + t3284;
  t3783 = t3686 + t3247;
  t3881 = t3800 + t3448;
  t3989 = t3656*t3916;
  t3992 = t3651*t3932;
  t3993 = t3989 + t3992;
  t3874 = t3828 + t3446;
  t3995 = t3610*t3916;
  t3998 = t3597*t3932;
  t3999 = t3995 + t3998;
  t3866 = -1.000000000016*t3436;
  t3867 = 1. + t3866;
  t4002 = t3531*t3916;
  t4005 = t3510*t3932;
  t4007 = t4002 + t4005;
  t3843 = t3807 + t3575;
  t3836 = -1.000000000049*t3436;
  t3838 = 1. + t3836;
  t3829 = t3828 + t3559;
  t3815 = -6.5e-11*t3436;
  t3816 = 1. + t3815;
  t3808 = t3807 + t3637;
  t3803 = t3800 + t3628;
  t4097 = 0.15121*t2252;
  t3911 = t2818*t3909;
  t3924 = t2540*t3921;
  t3952 = t3304*t3942;
  t3967 = t3103*t3962;
  t3986 = t3395*t3980;
  t4009 = t3693*t3942;
  t4010 = t3671*t3962;
  t4012 = t3706*t3980;
  t4015 = t4009 + t4010 + t4012;
  t4016 = -0.038924*t4015;
  t4022 = t3737*t3942;
  t4024 = t3722*t3962;
  t4027 = t3742*t3980;
  t4029 = t4022 + t4024 + t4027;
  t4030 = -0.80315*t4029;
  t4032 = t3778*t3942;
  t4038 = t3767*t3962;
  t4041 = t3783*t3980;
  t4044 = t4032 + t4038 + t4041;
  t4045 = 0.148705*t4044;
  t4130 = -2.8e-11*t1445;
  t4165 = -7.e-6*t369;
  t4171 = 4.e-6*t369;
  t4197 = t2252*t330*t2215;
  t4206 = -1.*t330*t2319*t2431;
  t4209 = t4197 + t4206;
  t4139 = 7.e-6*t369;
  t4253 = 2.8e-11*t1445;
  t4183 = -4.e-6*t369;
  t4218 = t4165 + t2783;
  t4220 = t4218*t2350;
  t4223 = -6.5e-11*t1445*t3909;
  t4225 = t4171 + t2478;
  t4228 = t4225*t4209;
  t4233 = t4220 + t4223 + t4228;
  t4245 = -1.000000000049*t1445*t2350;
  t4248 = t4139 + t2783;
  t4252 = t4248*t3909;
  t4258 = t369 + t4253;
  t4268 = t4258*t4209;
  t4273 = t4245 + t4252 + t4268;
  t4276 = t370 + t4253;
  t4278 = t4276*t2350;
  t4283 = t4183 + t2478;
  t4288 = t4283*t3909;
  t4295 = -1.000000000016*t1445*t4209;
  t4300 = t4278 + t4288 + t4295;
  t4336 = -2.8e-11*t3058;
  t4376 = 4.e-6*t3038;
  t4358 = t3123*t2350;
  t4363 = t3146*t3909;
  t4364 = t3175*t4209;
  t4366 = t4358 + t4363 + t4364;
  t4382 = t3311*t2350;
  t4388 = t3323*t3909;
  t4389 = t3341*t4209;
  t4393 = t4382 + t4388 + t4389;
  t4370 = -7.e-6*t3038;
  t4418 = t3399*t2350;
  t4422 = t3403*t3909;
  t4423 = t3415*t4209;
  t4425 = t4418 + t4422 + t4423;
  t4342 = -4.e-6*t3038;
  t4468 = 2.8e-11*t3058;
  t4405 = 7.e-6*t3038;
  t3917 = -1.*t2974*t3916;
  t3934 = -1.*t2653*t3932;
  t3994 = -1.*t3640*t3993;
  t4001 = -1.*t3580*t3999;
  t4008 = -1.*t3468*t4007;
  t4053 = t3881*t3993;
  t4055 = t3874*t3999;
  t4058 = t3867*t4007;
  t4060 = t4053 + t4055 + t4058;
  t4061 = 0.80315*t4060;
  t4062 = t3843*t3993;
  t4064 = t3838*t3999;
  t4075 = t3829*t4007;
  t4080 = t4062 + t4064 + t4075;
  t4081 = 0.038576*t4080;
  t4083 = t3816*t3993;
  t4085 = t3808*t3999;
  t4091 = t3803*t4007;
  t4094 = t4083 + t4085 + t4091;
  t4095 = 0.148715*t4094;
  t4521 = 2.8e-11*t2090;
  t4547 = 7.e-6*t1870;
  t4566 = 4.e-6*t1870;
  t4601 = t2382*t330*t2215;
  t4602 = -1.*t330*t2395*t2431;
  t4605 = t4601 + t4602;
  t4515 = -7.e-6*t1870;
  t4632 = -2.8e-11*t2090;
  t4591 = -4.e-6*t1870;
  t4610 = t4547 + t2609;
  t4612 = t4610*t2350;
  t4614 = -6.5e-11*t2090*t3916;
  t4616 = t4566 + t2170;
  t4617 = t4616*t4605;
  t4620 = t4612 + t4614 + t4617;
  t4623 = -1.000000000049*t2090*t2350;
  t4628 = t4515 + t2609;
  t4630 = t4628*t3916;
  t4641 = t1949 + t4632;
  t4642 = t4641*t4605;
  t4645 = t4623 + t4630 + t4642;
  t4649 = t1870 + t4632;
  t4652 = t4649*t2350;
  t4658 = t4591 + t2170;
  t4659 = t4658*t3916;
  t4660 = -1.000000000016*t2090*t4605;
  t4663 = t4652 + t4659 + t4660;
  t4698 = 2.8e-11*t3446;
  t4712 = t3497*t2350;
  t4714 = t3510*t3916;
  t4716 = t3531*t4605;
  t4719 = t4712 + t4714 + t4716;
  t4738 = t3583*t2350;
  t4740 = t3597*t3916;
  t4742 = t3610*t4605;
  t4746 = t4738 + t4740 + t4742;
  t4702 = -4.e-6*t3433;
  t4780 = t3645*t2350;
  t4783 = t3651*t3916;
  t4784 = t3656*t4605;
  t4786 = t4780 + t4783 + t4784;
  t4791 = -2.8e-11*t3446;
  t4723 = -7.e-6*t3433;
  t4770 = 4.e-6*t3433;
  t4760 = 7.e-6*t3433;
  t363 = 5.856279999999999e-13*var1[13];
  t431 = -0.0387489999948987*t380;
  t1693 = t717 + t1678;
  t1694 = -2.123459e-6*t1693;
  t1766 = t1722 + t1445;
  t1827 = -0.281209000004*t1766;
  t1847 = t363 + t431 + t1694 + t1827;
  t4847 = Cos(var1[3]);
  t1867 = 1.5843479999999999e-12*var1[16];
  t2028 = -0.03874900000889869*t2001;
  t2105 = t2029 + t2100;
  t2119 = -0.281211000004*t2105;
  t2171 = t2157 + t2170;
  t2178 = -1.8134809999999998e-6*t2171;
  t2188 = t1867 + t2028 + t2119 + t2178;
  t4857 = t4847*t2215*t2350;
  t4859 = Sin(var1[3]);
  t4860 = -1.*t4859*t2431;
  t4862 = t4857 + t4860;
  t4866 = -1.*t2215*t4859;
  t4869 = -1.*t4847*t2350*t2431;
  t4870 = t4866 + t4869;
  t4877 = -1.*t2319*t4862;
  t4878 = t2252*t4870;
  t4884 = t4877 + t4878;
  t4895 = t2252*t4862;
  t4898 = t2319*t4870;
  t4899 = t4895 + t4898;
  t4888 = -1.*t2395*t4862;
  t4891 = t2382*t4870;
  t4892 = t4888 + t4891;
  t4903 = t2382*t4862;
  t4906 = t2395*t4870;
  t4907 = t4903 + t4906;
  t4909 = -1.*t4847*t330*t3123;
  t4910 = t3146*t4884;
  t4912 = t3175*t4899;
  t4914 = t4909 + t4910 + t4912;
  t4924 = -1.*t4847*t330*t3311;
  t4929 = t3323*t4884;
  t4930 = t3341*t4899;
  t4933 = t4924 + t4929 + t4930;
  t4935 = -1.*t3399*t4847*t330;
  t4936 = t3403*t4884;
  t4943 = t3415*t4899;
  t4950 = t4935 + t4936 + t4943;
  t4955 = -1.*t4847*t330*t3497;
  t4957 = t3510*t4892;
  t4958 = t3531*t4907;
  t4959 = t4955 + t4957 + t4958;
  t4962 = -1.*t3583*t4847*t330;
  t4964 = t3597*t4892;
  t4969 = t3610*t4907;
  t4972 = t4962 + t4964 + t4969;
  t4976 = -1.*t4847*t330*t3645;
  t4977 = t3651*t4892;
  t4980 = t3656*t4907;
  t4982 = t4976 + t4977 + t4980;
  t5058 = -1.*t330*t2215*t2319*t4859;
  t5061 = -1.*t2252*t330*t4859*t2431;
  t5062 = t5058 + t5061;
  t5071 = t2252*t330*t2215*t4859;
  t5073 = -1.*t330*t2319*t4859*t2431;
  t5074 = t5071 + t5073;
  t5065 = -1.*t330*t2215*t2395*t4859;
  t5066 = -1.*t2382*t330*t4859*t2431;
  t5067 = t5065 + t5066;
  t5077 = t2382*t330*t2215*t4859;
  t5082 = -1.*t330*t2395*t4859*t2431;
  t5086 = t5077 + t5082;
  t5091 = t3123*t4859*t2350;
  t5092 = t3146*t5062;
  t5093 = t3175*t5074;
  t5094 = t5091 + t5092 + t5093;
  t5096 = t3311*t4859*t2350;
  t5099 = t3323*t5062;
  t5101 = t3341*t5074;
  t5104 = t5096 + t5099 + t5101;
  t5108 = t3399*t4859*t2350;
  t5110 = t3403*t5062;
  t5112 = t3415*t5074;
  t5119 = t5108 + t5110 + t5112;
  t5122 = t3497*t4859*t2350;
  t5127 = t3510*t5067;
  t5128 = t3531*t5086;
  t5129 = t5122 + t5127 + t5128;
  t5137 = t3583*t4859*t2350;
  t5138 = t3597*t5067;
  t5142 = t3610*t5086;
  t5144 = t5137 + t5138 + t5142;
  t5146 = t3645*t4859*t2350;
  t5150 = t3651*t5067;
  t5152 = t3656*t5086;
  t5157 = t5146 + t5150 + t5152;
  t5242 = -1.*t2215*t4859*t2350;
  t5243 = -1.*t4847*t2431;
  t5244 = t5242 + t5243;
  t5249 = t4847*t2215;
  t5251 = -1.*t4859*t2350*t2431;
  t5252 = t5249 + t5251;
  t5256 = t2319*t5244;
  t5257 = t2252*t5252;
  t5259 = t5256 + t5257;
  t5274 = t2252*t5244;
  t5275 = -1.*t2319*t5252;
  t5279 = t5274 + t5275;
  t5263 = t2395*t5244;
  t5268 = t2382*t5252;
  t5271 = t5263 + t5268;
  t5283 = t2382*t5244;
  t5284 = -1.*t2395*t5252;
  t5287 = t5283 + t5284;
  t5289 = t3341*t5259;
  t5290 = t3323*t5279;
  t5291 = t5289 + t5290;
  t5293 = t3175*t5259;
  t5301 = t3146*t5279;
  t5302 = t5293 + t5301;
  t5310 = t3415*t5259;
  t5313 = t3403*t5279;
  t5316 = t5310 + t5313;
  t5318 = t3656*t5271;
  t5322 = t3651*t5287;
  t5324 = t5318 + t5322;
  t5327 = t3610*t5271;
  t5332 = t3597*t5287;
  t5333 = t5327 + t5332;
  t5337 = t3531*t5271;
  t5338 = t3510*t5287;
  t5346 = t5337 + t5338;
  t4099 = -0.15121*t2319;
  t4103 = t4097 + t4099;
  t4118 = t4097 + t2328;
  t5428 = t2215*t4859*t2350;
  t5434 = t4847*t2431;
  t5436 = t5428 + t5434;
  t5443 = -1.*t2319*t5436;
  t5448 = t5443 + t5257;
  t5455 = -1.*t2252*t5436;
  t5456 = t5455 + t5275;
  t5461 = t3341*t5448;
  t5462 = t3323*t5456;
  t5464 = t5461 + t5462;
  t5467 = t3175*t5448;
  t5469 = t3146*t5456;
  t5471 = t5467 + t5469;
  t5476 = t3415*t5448;
  t5477 = t3403*t5456;
  t5478 = t5476 + t5477;
  t4133 = t369 + t4130;
  t4135 = -0.281209000004*t4133;
  t4143 = t4139 + t2508;
  t4144 = -2.123459e-6*t4143;
  t4152 = -0.0387489999948987*t1445;
  t4155 = 5.856279999999999e-13 + t4135 + t4144 + t4152;
  t4166 = t4165 + t2508;
  t4168 = -0.038748999993*t4166;
  t4173 = t4171 + t1678;
  t4174 = -0.281209000004*t4173;
  t4175 = -1.38024835e-16*t1445;
  t4176 = -1.4640699999999997e-7 + t4168 + t4174 + t4175;
  t4181 = t370 + t4130;
  t4182 = -0.038748999993*t4181;
  t4188 = t4183 + t1678;
  t4192 = -2.123459e-6*t4188;
  t4193 = -0.28120900000849935*t1445;
  t4194 = 1.0248489999999998e-12 + t4182 + t4192 + t4193;
  t5522 = t2252*t5436;
  t5525 = t2319*t5252;
  t5526 = t5522 + t5525;
  t5530 = -1.*t330*t4218*t4859;
  t5534 = -6.5e-11*t1445*t5448;
  t5537 = t4225*t5526;
  t5538 = t5530 + t5534 + t5537;
  t5540 = 1.000000000049*t330*t1445*t4859;
  t5541 = t4248*t5448;
  t5542 = t4258*t5526;
  t5544 = t5540 + t5541 + t5542;
  t5556 = -1.*t330*t4276*t4859;
  t5558 = t4283*t5448;
  t5561 = -1.000000000016*t1445*t5526;
  t5563 = t5556 + t5558 + t5561;
  t4339 = t3048 + t4336;
  t4340 = -0.038922999986*t4339;
  t4346 = t4342 + t3368;
  t4352 = -3.6777349999999994e-6*t4346;
  t4354 = -0.5031490000160505*t3058;
  t4356 = 1.8190549999999993e-12 + t4340 + t4352 + t4354;
  t4372 = t4370 + t3284;
  t4375 = -0.038922999986*t4372;
  t4377 = t4376 + t3368;
  t4378 = -0.503149000008*t4377;
  t4380 = -2.3905277499999995e-16*t3058;
  t4381 = -2.598649999999999e-7 + t4375 + t4378 + t4380;
  t4398 = t3038 + t4336;
  t4404 = -0.503149000008*t4398;
  t4407 = t4405 + t3284;
  t4408 = -3.6777349999999994e-6*t4407;
  t4412 = -0.03892299998790722*t3058;
  t4414 = 1.0394599999999997e-12 + t4404 + t4408 + t4412;
  t4437 = t4376 + t3247;
  t5597 = -1.*t330*t3123*t4859;
  t5598 = t3146*t5448;
  t5601 = t3175*t5526;
  t5604 = t5597 + t5598 + t5601;
  t5609 = -1.*t330*t3311*t4859;
  t5610 = t3323*t5448;
  t5611 = t3341*t5526;
  t5613 = t5609 + t5610 + t5611;
  t4450 = t4370 + t3088;
  t5617 = -1.*t3399*t330*t4859;
  t5619 = t3403*t5448;
  t5621 = t3415*t5526;
  t5623 = t5617 + t5619 + t5621;
  t4464 = t4342 + t3247;
  t4469 = t3048 + t4468;
  t4477 = t3038 + t4468;
  t4482 = t4405 + t3088;
  t4500 = -0.15121*t2382;
  t4503 = t4500 + t2400;
  t4506 = 0.15121*t2382;
  t4507 = t4506 + t2400;
  t5666 = -1.*t2395*t5436;
  t5670 = t5666 + t5268;
  t5672 = -1.*t2382*t5436;
  t5673 = t5672 + t5284;
  t5680 = t3656*t5670;
  t5685 = t3651*t5673;
  t5688 = t5680 + t5685;
  t5697 = t3610*t5670;
  t5698 = t3597*t5673;
  t5701 = t5697 + t5698;
  t5711 = t3531*t5670;
  t5713 = t3510*t5673;
  t5715 = t5711 + t5713;
  t4516 = t4515 + t2908;
  t4518 = -1.8134809999999998e-6*t4516;
  t4523 = t1949 + t4521;
  t4524 = -0.281211000004*t4523;
  t4531 = -0.03874900000889869*t2090;
  t4538 = 1.5843479999999999e-12 + t4518 + t4524 + t4531;
  t4551 = t4547 + t2908;
  t4560 = -0.038749000006999997*t4551;
  t4568 = t4566 + t2635;
  t4575 = -0.281211000004*t4568;
  t4579 = -1.1787626499999999e-16*t2090;
  t4581 = 3.9608699999999997e-7 + t4560 + t4575 + t4579;
  t4587 = t1870 + t4521;
  t4590 = -0.038749000006999997*t4587;
  t4592 = t4591 + t2635;
  t4594 = -1.8134809999999998e-6*t4592;
  t4595 = -0.2812110000084994*t2090;
  t4597 = -2.7726089999999997e-12 + t4590 + t4594 + t4595;
  t5764 = t2382*t5436;
  t5765 = t2395*t5252;
  t5767 = t5764 + t5765;
  t5771 = -1.*t330*t4610*t4859;
  t5772 = -6.5e-11*t2090*t5670;
  t5775 = t4616*t5767;
  t5777 = t5771 + t5772 + t5775;
  t5782 = 1.000000000049*t330*t2090*t4859;
  t5790 = t4628*t5670;
  t5793 = t4641*t5767;
  t5794 = t5782 + t5790 + t5793;
  t5799 = -1.*t330*t4649*t4859;
  t5801 = t4658*t5670;
  t5804 = -1.000000000016*t2090*t5767;
  t5805 = t5799 + t5801 + t5804;
  t4699 = t3433 + t4698;
  t4701 = -0.038575000014*t4699;
  t4704 = t4702 + t3637;
  t4706 = -3.367757e-6*t4704;
  t4707 = -0.5031510000160505*t3446;
  t4711 = -1.9784030000000015e-12 + t4701 + t4706 + t4707;
  t4724 = t4723 + t3448;
  t4726 = -3.367757e-6*t4724;
  t4730 = t3435 + t4698;
  t4733 = -0.5031510000080001*t4730;
  t4734 = -0.03857500001589017*t3446;
  t4737 = 1.1305160000000008e-12 + t4726 + t4733 + t4734;
  t4767 = t4760 + t3448;
  t4768 = -0.038575000014*t4767;
  t4772 = t4770 + t3637;
  t4774 = -0.5031510000080001*t4772;
  t4776 = -2.18904205e-16*t3446;
  t4777 = 2.826290000000002e-7 + t4768 + t4774 + t4776;
  t5847 = -1.*t330*t3497*t4859;
  t5849 = t3510*t5670;
  t5853 = t3531*t5767;
  t5854 = t5847 + t5849 + t5853;
  t4792 = t3433 + t4791;
  t5856 = -1.*t3583*t330*t4859;
  t5859 = t3597*t5670;
  t5860 = t3610*t5767;
  t5861 = t5856 + t5859 + t5860;
  t4794 = t4702 + t3575;
  t5865 = -1.*t330*t3645*t4859;
  t5871 = t3651*t5670;
  t5872 = t3656*t5767;
  t5877 = t5865 + t5871 + t5872;
  t4805 = t3435 + t4791;
  t4817 = t4723 + t3628;
  t4829 = t4770 + t3575;
  t4832 = t4760 + t3628;
  p_output1[0]=-1.*t2215*t2333*t2350 + t2215*t2350*t2404 + t2350*t2422*t2431 - 1.*t2350*t2431*t2454 + t2540*t2565 - 1.*t2653*t2666 + t2818*t2851 - 1.*t2974*t2993 + t3103*t3198 + t1847*t330 - 1.*t2188*t330 + t3304*t3343 + t3395*t3420 - 1.*t3468*t3549 - 1.*t3580*t3615 - 1.*t3640*t3662 - 0.038924*(t3198*t3671 + t3343*t3693 + t3420*t3706) - 0.80315*(t3198*t3722 + t3343*t3737 + t3420*t3742) + 0.148705*(t3198*t3767 + t3343*t3778 + t3420*t3783) + 0.148715*(t3549*t3803 + t3615*t3808 + t3662*t3816) + 0.038576*(t3549*t3829 + t3615*t3838 + t3662*t3843) + 0.80315*(t3549*t3867 + t3615*t3874 + t3662*t3881);
  p_output1[1]=-1.*t2215*t2422*t330 - 1.*t2333*t2431*t330 + t2404*t2431*t330 + t2215*t2454*t330 + t3911 + t3917 + t3924 + t3934 + t3952 + t3967 + t3986 + t3994 + t4001 + t4008 + t4016 + t4030 + t4045 + t4061 + t4081 + t4095;
  p_output1[2]=t3911 + t3924 + t3952 + t3967 + t3986 + t4016 + t4030 + t4045 + t2215*t330*t4103 - 1.*t2431*t330*t4118;
  p_output1[3]=t2350*t4155 + t3909*t4176 + t4194*t4209 + t3304*t4233 + t3395*t4273 + t3103*t4300 - 0.038924*(t3693*t4233 + t3706*t4273 + t3671*t4300) - 0.80315*(t3737*t4233 + t3742*t4273 + t3722*t4300) + 0.148705*(t3778*t4233 + t3783*t4273 + t3767*t4300);
  p_output1[4]=t4356*t4366 + t4381*t4393 + t4414*t4425 + 0.148705*(-6.5e-11*t3058*t4393 + t4366*t4437 + t4425*t4450) - 0.80315*(-1.000000000016*t3058*t4366 + t4393*t4464 + t4425*t4469) - 0.038924*(-1.000000000049*t3058*t4425 + t4366*t4477 + t4393*t4482);
  p_output1[5]=t3917 + t3934 + t3994 + t4001 + t4008 + t4061 + t4081 + t4095 - 1.*t2215*t330*t4503 + t2431*t330*t4507;
  p_output1[6]=-1.*t2350*t4538 - 1.*t3916*t4581 - 1.*t4597*t4605 - 1.*t3640*t4620 - 1.*t3580*t4645 - 1.*t3468*t4663 + 0.148715*(t3816*t4620 + t3808*t4645 + t3803*t4663) + 0.038576*(t3843*t4620 + t3838*t4645 + t3829*t4663) + 0.80315*(t3881*t4620 + t3874*t4645 + t3867*t4663);
  p_output1[7]=-1.*t4711*t4719 - 1.*t4737*t4746 - 1.*t4777*t4786 + 0.80315*(-1.000000000016*t3446*t4719 + t4746*t4792 + t4786*t4794) + 0.038576*(-1.000000000049*t3446*t4746 + t4719*t4805 + t4786*t4817) + 0.148715*(-6.5e-11*t3446*t4786 + t4719*t4829 + t4746*t4832);
  p_output1[8]=-1.*t1847*t330*t4847 + t2188*t330*t4847 + t2333*t4862 - 1.*t2404*t4862 + t2422*t4870 - 1.*t2454*t4870 + t2540*t4884 - 1.*t2653*t4892 + t2818*t4899 - 1.*t2974*t4907 + t3103*t4914 + t3304*t4933 + t3395*t4950 - 0.038924*(t3671*t4914 + t3693*t4933 + t3706*t4950) - 0.80315*(t3722*t4914 + t3737*t4933 + t3742*t4950) + 0.148705*(t3767*t4914 + t3778*t4933 + t3783*t4950) - 1.*t3468*t4959 - 1.*t3580*t4972 - 1.*t3640*t4982 + 0.148715*(t3803*t4959 + t3808*t4972 + t3816*t4982) + 0.038576*(t3829*t4959 + t3838*t4972 + t3843*t4982) + 0.80315*(t3867*t4959 + t3874*t4972 + t3881*t4982);
  p_output1[9]=t1847*t2350*t4859 - 1.*t2188*t2350*t4859 + t2215*t2333*t330*t4859 - 1.*t2215*t2404*t330*t4859 - 1.*t2422*t2431*t330*t4859 + t2431*t2454*t330*t4859 + t2540*t5062 - 1.*t2653*t5067 + t2818*t5074 - 1.*t2974*t5086 + t3103*t5094 + t3304*t5104 + t3395*t5119 - 0.038924*(t3671*t5094 + t3693*t5104 + t3706*t5119) - 0.80315*(t3722*t5094 + t3737*t5104 + t3742*t5119) + 0.148705*(t3767*t5094 + t3778*t5104 + t3783*t5119) - 1.*t3468*t5129 - 1.*t3580*t5144 - 1.*t3640*t5157 + 0.148715*(t3803*t5129 + t3808*t5144 + t3816*t5157) + 0.038576*(t3829*t5129 + t3838*t5144 + t3843*t5157) + 0.80315*(t3867*t5129 + t3874*t5144 + t3881*t5157);
  p_output1[10]=t2422*t5244 - 1.*t2454*t5244 + t2333*t5252 - 1.*t2404*t5252 + t2818*t5259 - 1.*t2974*t5271 + t2540*t5279 - 1.*t2653*t5287 + t3304*t5291 + t3103*t5302 + t3395*t5316 - 0.038924*(t3693*t5291 + t3671*t5302 + t3706*t5316) - 0.80315*(t3737*t5291 + t3722*t5302 + t3742*t5316) + 0.148705*(t3778*t5291 + t3767*t5302 + t3783*t5316) - 1.*t3640*t5324 - 1.*t3580*t5333 - 1.*t3468*t5346 + 0.148715*(t3816*t5324 + t3808*t5333 + t3803*t5346) + 0.038576*(t3843*t5324 + t3838*t5333 + t3829*t5346) + 0.80315*(t3881*t5324 + t3874*t5333 + t3867*t5346);
  p_output1[11]=t4118*t5252 + t4103*t5436 + t2818*t5448 + t2540*t5456 + t3304*t5464 + t3103*t5471 + t3395*t5478 - 0.038924*(t3693*t5464 + t3671*t5471 + t3706*t5478) - 0.80315*(t3737*t5464 + t3722*t5471 + t3742*t5478) + 0.148705*(t3778*t5464 + t3767*t5471 + t3783*t5478);
  p_output1[12]=-1.*t330*t4155*t4859 + t4176*t5448 + t4194*t5526 + t3304*t5538 + t3395*t5544 + t3103*t5563 - 0.038924*(t3693*t5538 + t3706*t5544 + t3671*t5563) - 0.80315*(t3737*t5538 + t3742*t5544 + t3722*t5563) + 0.148705*(t3778*t5538 + t3783*t5544 + t3767*t5563);
  p_output1[13]=t4356*t5604 + t4381*t5613 + t4414*t5623 - 0.038924*(t4477*t5604 + t4482*t5613 - 1.000000000049*t3058*t5623) + 0.148705*(t4437*t5604 - 6.5e-11*t3058*t5613 + t4450*t5623) - 0.80315*(-1.000000000016*t3058*t5604 + t4464*t5613 + t4469*t5623);
  p_output1[14]=-1.*t4507*t5252 - 1.*t4503*t5436 - 1.*t2974*t5670 - 1.*t2653*t5673 - 1.*t3640*t5688 - 1.*t3580*t5701 - 1.*t3468*t5715 + 0.148715*(t3816*t5688 + t3808*t5701 + t3803*t5715) + 0.038576*(t3843*t5688 + t3838*t5701 + t3829*t5715) + 0.80315*(t3881*t5688 + t3874*t5701 + t3867*t5715);
  p_output1[15]=t330*t4538*t4859 - 1.*t4581*t5670 - 1.*t4597*t5767 - 1.*t3640*t5777 - 1.*t3580*t5794 - 1.*t3468*t5805 + 0.148715*(t3816*t5777 + t3808*t5794 + t3803*t5805) + 0.038576*(t3843*t5777 + t3838*t5794 + t3829*t5805) + 0.80315*(t3881*t5777 + t3874*t5794 + t3867*t5805);
  p_output1[16]=-1.*t4711*t5854 - 1.*t4737*t5861 - 1.*t4777*t5877 + 0.148715*(t4829*t5854 + t4832*t5861 - 6.5e-11*t3446*t5877) + 0.80315*(-1.000000000016*t3446*t5854 + t4792*t5861 + t4794*t5877) + 0.038576*(t4805*t5854 - 1.000000000049*t3446*t5861 + t4817*t5877);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 17, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "J_step_distance_TrotStance1.hh"

namespace TrotStance1
{

void J_step_distance_TrotStance1_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
