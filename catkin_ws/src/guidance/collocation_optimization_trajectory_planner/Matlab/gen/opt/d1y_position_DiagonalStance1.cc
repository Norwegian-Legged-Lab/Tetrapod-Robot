/*
 * Automatically Generated from Mathematica.
 * Wed 8 Dec 2021 23:09:54 GMT+01:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4,const double *var5,const double *var6,const double *var7)
{
  double t51;
  double t71;
  double t104;
  double t125;
  double t134;
  double t144;
  double t149;
  double t151;
  double t158;
  double t165;
  double t183;
  double t197;
  double t208;
  double t211;
  double t212;
  double t224;
  double t251;
  double t270;
  double t278;
  double t298;
  double t327;
  double t338;
  double t403;
  double t364;
  double t376;
  double t426;
  double t404;
  double t422;
  double t432;
  double t470;
  double t476;
  double t480;
  double t351;
  double t425;
  double t437;
  double t444;
  double t526;
  double t529;
  double t533;
  double t538;
  double t559;
  double t574;
  double t576;
  double t580;
  double t602;
  double t609;
  double t610;
  double t612;
  double t501;
  double t505;
  double t506;
  double t508;
  double t660;
  double t724;
  double t744;
  double t746;
  double t747;
  double t748;
  double t750;
  double t754;
  double t720;
  double t728;
  double t733;
  double t736;
  double t784;
  double t786;
  double t790;
  double t792;
  double t796;
  double t801;
  double t916;
  double t927;
  double t940;
  double t991;
  double t1014;
  double t1040;
  double t518;
  double t537;
  double t540;
  double t541;
  double t584;
  double t585;
  double t592;
  double t613;
  double t620;
  double t622;
  double t624;
  double t633;
  double t636;
  double t1225;
  double t1243;
  double t1259;
  double t1202;
  double t1213;
  double t1220;
  double t1270;
  double t1274;
  double t1275;
  double t668;
  double t673;
  double t978;
  double t1046;
  double t1082;
  double t1108;
  double t1115;
  double t1139;
  double t1158;
  double t1169;
  double t1178;
  double t1194;
  double t1222;
  double t1264;
  double t1281;
  double t1286;
  double t1291;
  double t1300;
  double t1308;
  double t1315;
  double t1317;
  double t1328;
  double t1336;
  double t1343;
  double t1346;
  double t1349;
  double t1350;
  double t1357;
  double t1358;
  double t1375;
  double t955;
  double t960;
  double t982;
  double t1438;
  double t1440;
  double t1447;
  double t1456;
  double t1457;
  double t1458;
  double t1534;
  double t1541;
  double t1544;
  double t1549;
  double t1583;
  double t1585;
  double t1587;
  double t1590;
  double t1555;
  double t1569;
  double t1572;
  double t1580;
  double t1894;
  double t1474;
  double t1479;
  double t1483;
  double t1509;
  double t1923;
  double t1931;
  double t1932;
  double t1942;
  double t1946;
  double t1950;
  double t1978;
  double t1982;
  double t1992;
  double t1993;
  double t2026;
  double t2027;
  double t2033;
  double t2037;
  double t2000;
  double t2009;
  double t2010;
  double t2015;
  double t2183;
  double t2182;
  double t2186;
  double t2190;
  double t2194;
  double t2197;
  double t2201;
  double t2213;
  double t2214;
  double t2215;
  double t2223;
  double t2226;
  double t2227;
  double t2233;
  double t2235;
  double t2239;
  double t2262;
  double t2300;
  double t2307;
  double t2308;
  double t2310;
  double t2274;
  double t2289;
  double t2291;
  double t2298;
  double t2387;
  double t2393;
  double t2403;
  double t2411;
  double t2420;
  double t2422;
  double t2428;
  double t2431;
  double t2436;
  double t2443;
  double t2449;
  double t2450;
  double t2468;
  double t2469;
  double t2470;
  double t2456;
  double t2464;
  double t2465;
  double t2474;
  double t2486;
  double t2487;
  double t1388;
  double t1393;
  double t1397;
  double t1398;
  double t2597;
  double t2598;
  double t2601;
  double t2604;
  double t2606;
  double t2609;
  double t2611;
  double t2627;
  double t2628;
  double t2629;
  double t2614;
  double t2616;
  double t2619;
  double t2633;
  double t2635;
  double t2644;
  double t366;
  double t382;
  double t386;
  double t451;
  double t453;
  double t454;
  double t491;
  double t493;
  double t496;
  double t2772;
  double t2787;
  double t2794;
  double t2809;
  double t2812;
  double t2817;
  double t2820;
  double t2825;
  double t2830;
  double t2831;
  double t2838;
  double t2798;
  double t2800;
  double t2802;
  double t2806;
  double t737;
  double t740;
  double t741;
  double t758;
  double t763;
  double t764;
  double t821;
  double t822;
  double t832;
  double t2956;
  double t2960;
  double t2961;
  double t2967;
  double t2943;
  double t2946;
  double t2948;
  double t2952;
  double t2969;
  double t2974;
  double t3100;
  double t3101;
  double t3104;
  double t3114;
  double t3120;
  double t3125;
  double t3144;
  double t3145;
  double t3151;
  double t3154;
  double t3183;
  double t3186;
  double t3193;
  double t3195;
  double t3160;
  double t3168;
  double t3169;
  double t3172;
  double t3286;
  double t3287;
  double t3289;
  double t3297;
  double t3299;
  double t3302;
  double t3304;
  double t3305;
  double t3354;
  double t3357;
  double t3369;
  double t3318;
  double t3327;
  double t3338;
  double t3374;
  double t3375;
  double t3385;
  double t3485;
  double t3489;
  double t3493;
  double t3497;
  double t3500;
  double t3505;
  double t3507;
  double t3517;
  double t3518;
  double t3532;
  double t3510;
  double t3511;
  double t3512;
  double t3537;
  double t3539;
  double t3541;
  double t3622;
  double t3625;
  double t3626;
  double t3648;
  double t3657;
  double t3661;
  double t3665;
  double t3669;
  double t3672;
  double t3680;
  double t3629;
  double t3638;
  double t3642;
  double t3645;
  double t3752;
  double t3757;
  double t3758;
  double t3759;
  double t3738;
  double t3739;
  double t3740;
  double t3749;
  double t3772;
  double t3778;
  double t2998;
  double t3001;
  double t4021;
  double t4022;
  double t4059;
  double t4063;
  double t4065;
  double t4072;
  double t4119;
  double t4109;
  double t4026;
  double t4111;
  double t4137;
  double t4140;
  double t4067;
  double t4156;
  double t4167;
  double t4169;
  double t4195;
  double t4038;
  double t4236;
  double t4093;
  double t4074;
  double t4078;
  double t4104;
  double t4107;
  double t4142;
  double t4148;
  double t4153;
  double t4188;
  double t4192;
  double t4232;
  double t4233;
  double t4234;
  double t4243;
  double t4245;
  double t4246;
  double t4248;
  double t4249;
  double t4250;
  double t4252;
  double t4037;
  double t4317;
  double t4326;
  double t4328;
  double t4331;
  double t4337;
  double t4340;
  double t4355;
  double t4359;
  double t4361;
  double t4367;
  double t4200;
  double t4373;
  double t4194;
  double t4266;
  double t4380;
  double t4256;
  double t4398;
  double t4463;
  double t4513;
  double t4477;
  double t4484;
  double t4520;
  double t4521;
  double t4446;
  double t4516;
  double t4556;
  double t4582;
  double t4497;
  double t4533;
  double t4539;
  double t4544;
  double t4545;
  double t4546;
  double t4548;
  double t4578;
  double t4580;
  double t4581;
  double t4583;
  double t4584;
  double t4589;
  double t4619;
  double t4620;
  double t4621;
  double t4625;
  double t4626;
  double t4629;
  double t4645;
  double t4562;
  double t4681;
  double t4637;
  double t4792;
  double t4802;
  double t4803;
  double t4855;
  double t4510;
  double t4515;
  double t4517;
  double t4518;
  double t4523;
  double t4529;
  double t4531;
  double t4927;
  double t4937;
  double t4944;
  double t4551;
  double t4555;
  double t4564;
  double t4569;
  double t4570;
  double t4572;
  double t4575;
  double t4601;
  double t4603;
  double t4609;
  double t4610;
  double t4611;
  double t4617;
  double t4618;
  double t4638;
  double t4951;
  double t4952;
  double t4959;
  double t4647;
  double t4963;
  double t4973;
  double t4974;
  double t4653;
  double t4667;
  double t4982;
  double t4985;
  double t4993;
  double t4684;
  double t4696;
  double t4699;
  double t4729;
  double t4748;
  double t4751;
  double t4756;
  double t4763;
  double t4821;
  double t4843;
  double t4854;
  double t4857;
  double t4859;
  double t4863;
  double t4868;
  double t4873;
  double t4874;
  double t4875;
  double t4881;
  double t4889;
  double t4894;
  double t4896;
  double t4901;
  double t4908;
  double t4912;
  double t4920;
  double t4925;
  double t4946;
  double t4960;
  double t4976;
  double t4999;
  double t5006;
  double t5007;
  double t5010;
  double t5014;
  double t5018;
  double t5027;
  double t5038;
  double t5039;
  double t5042;
  double t5052;
  double t5063;
  double t5072;
  double t5074;
  double t5076;
  double t5094;
  double t4825;
  double t4804;
  double t4806;
  double t5159;
  double t5161;
  double t5178;
  double t5181;
  double t5184;
  double t5185;
  double t5188;
  double t5190;
  double t5191;
  double t5197;
  double t5203;
  double t5205;
  double t5211;
  double t5212;
  double t5218;
  double t5220;
  double t5221;
  double t5223;
  double t5133;
  double t5134;
  double t5137;
  double t5141;
  double t5144;
  double t5146;
  double t5147;
  double t5329;
  double t5333;
  double t5335;
  double t5342;
  double t5343;
  double t5345;
  double t5352;
  double t5354;
  double t5355;
  double t5357;
  double t5367;
  double t5368;
  double t5372;
  double t5373;
  double t5377;
  double t5381;
  double t5382;
  double t5383;
  double t5454;
  double t5458;
  double t5459;
  double t5471;
  double t5474;
  double t5475;
  double t5481;
  double t5484;
  double t5486;
  double t5492;
  double t5496;
  double t5497;
  double t5498;
  double t5504;
  double t5510;
  double t5511;
  double t5515;
  double t5516;
  double t5608;
  double t5614;
  double t5616;
  double t5622;
  double t5624;
  double t5625;
  double t5632;
  double t5633;
  double t5641;
  double t5652;
  double t5654;
  double t5664;
  double t5669;
  double t5672;
  double t5675;
  double t5105;
  double t5112;
  double t5116;
  double t5117;
  double t5742;
  double t5745;
  double t5748;
  double t5754;
  double t5756;
  double t5761;
  double t5762;
  double t5767;
  double t5775;
  double t5776;
  double t5779;
  double t5781;
  double t5787;
  double t4030;
  double t4036;
  double t4043;
  double t4045;
  double t4052;
  double t4057;
  double t4196;
  double t4197;
  double t4207;
  double t4208;
  double t4225;
  double t4228;
  double t5845;
  double t5858;
  double t5860;
  double t4259;
  double t4264;
  double t4278;
  double t4284;
  double t4295;
  double t4305;
  double t5841;
  double t5842;
  double t5861;
  double t5862;
  double t4374;
  double t5865;
  double t5867;
  double t5870;
  double t5871;
  double t4382;
  double t5877;
  double t5878;
  double t5881;
  double t5885;
  double t4389;
  double t4404;
  double t4421;
  double t4428;
  double t4449;
  double t4461;
  double t4464;
  double t4468;
  double t4469;
  double t4475;
  double t4482;
  double t4483;
  double t4486;
  double t4487;
  double t4489;
  double t4490;
  double t4494;
  double t4495;
  double t4498;
  double t4501;
  double t4504;
  double t4505;
  double t5951;
  double t5956;
  double t5963;
  double t5965;
  double t5972;
  double t5979;
  double t5980;
  double t5982;
  double t5986;
  double t5987;
  double t5988;
  double t5993;
  double t6103;
  double t6107;
  double t6109;
  double t6111;
  double t6115;
  double t6117;
  double t6119;
  double t6120;
  double t6121;
  double t6124;
  double t6129;
  double t6130;
  double t6134;
  double t6135;
  double t6138;
  double t6139;
  double t6142;
  double t6143;
  double t6207;
  double t6209;
  double t6211;
  double t6216;
  double t6217;
  double t6224;
  double t6227;
  double t6229;
  double t6231;
  double t6236;
  double t6241;
  double t6249;
  double t6251;
  double t6253;
  double t6306;
  double t6307;
  double t6309;
  double t6311;
  double t6316;
  double t6317;
  double t6319;
  double t6326;
  double t6327;
  double t6329;
  double t6332;
  double t6333;
  double t6335;
  double t6413;
  double t6416;
  double t6417;
  double t6406;
  double t6410;
  double t6420;
  double t6422;
  double t6428;
  double t6429;
  double t6431;
  double t6432;
  double t6435;
  double t6438;
  double t6440;
  double t6441;
  double t6513;
  double t6516;
  double t6517;
  double t6519;
  double t6521;
  double t6522;
  double t6523;
  double t6524;
  double t6530;
  double t6532;
  double t6533;
  double t6534;
  double t6799;
  double t6801;
  double t6805;
  double t6806;
  double t6808;
  double t6809;
  double t6858;
  double t6860;
  double t6866;
  double t6868;
  double t6869;
  double t6875;
  double t6877;
  double t6878;
  double t6881;
  double t6882;
  double t6949;
  double t6887;
  double t6895;
  double t6898;
  double t6899;
  double t6867;
  double t6873;
  double t6879;
  double t6883;
  double t6965;
  double t6974;
  double t7060;
  double t7014;
  double t7049;
  t51 = -1.*var5[0];
  t71 = t51 + var5[1];
  t104 = Power(t71,-5);
  t125 = -1. + var6[0];
  t134 = -1. + var7[0];
  t144 = 1/t134;
  t149 = -1.*var1[0];
  t151 = t149 + var1[1];
  t158 = t125*t144*t151;
  t165 = t51 + var1[0] + t158;
  t183 = Power(t165,4);
  t197 = Power(t71,-4);
  t208 = Power(t165,3);
  t211 = 1/t71;
  t212 = -1.*t211*t165;
  t224 = 1. + t212;
  t251 = Power(t71,-3);
  t270 = Power(t165,2);
  t278 = Power(t224,2);
  t298 = Power(t71,-2);
  t327 = Power(t224,3);
  t338 = Power(t224,4);
  t403 = Cos(var2[4]);
  t364 = Cos(var2[7]);
  t376 = Sin(var2[7]);
  t426 = Cos(var2[5]);
  t404 = Cos(var2[6]);
  t422 = Sin(var2[5]);
  t432 = Sin(var2[6]);
  t470 = t403*t426*t404;
  t476 = -1.*t403*t422*t432;
  t480 = t470 + t476;
  t351 = Sin(var2[4]);
  t425 = -1.*t403*t404*t422;
  t437 = -1.*t403*t426*t432;
  t444 = t425 + t437;
  t526 = Cos(var2[8]);
  t529 = -1.*t526;
  t533 = 1. + t529;
  t538 = Sin(var2[8]);
  t559 = -1.*t364*t351;
  t574 = -4.e-6*t364*t444;
  t576 = -1.000000000016*t480*t376;
  t580 = t559 + t574 + t576;
  t602 = t364*t480;
  t609 = -1.*t351*t376;
  t610 = -4.e-6*t444*t376;
  t612 = t602 + t609 + t610;
  t501 = 4.e-6*t364*t480;
  t505 = -4.e-6*t351*t376;
  t506 = -1.6e-11*t444*t376;
  t508 = t501 + t505 + t506;
  t660 = -1. + t526;
  t724 = -1. + t364;
  t744 = 4.e-6*t724*t351;
  t746 = 1.6e-11*t724;
  t747 = 1. + t746;
  t748 = t747*t444;
  t750 = 4.e-6*t480*t376;
  t754 = t744 + t748 + t750;
  t720 = t364*t351;
  t728 = 4.e-6*t724*t444;
  t733 = t480*t376;
  t736 = t720 + t728 + t733;
  t784 = -1.*t364;
  t786 = 1. + t784;
  t790 = -1.000000000016*t786;
  t792 = 1. + t790;
  t796 = t792*t480;
  t801 = t796 + t609 + t610;
  t916 = -1.*t404;
  t927 = 1. + t916;
  t940 = 0.15121*t927;
  t991 = -1.*t403*t426*t404;
  t1014 = t403*t422*t432;
  t1040 = t991 + t1014;
  t518 = -1.284e-8*var2[8];
  t537 = -1.5499600000248e-7*t533;
  t540 = 2.012840000032e-6*t538;
  t541 = t518 + t537 + t540;
  t584 = 0.503210000016051*t533;
  t585 = 0.03874900000062*t538;
  t592 = t584 + t585;
  t613 = 5.136e-14*var2[8];
  t620 = -0.03874900000062*t533;
  t622 = 0.503210000008*t538;
  t624 = t613 + t620 + t622;
  t633 = -1.000000000016*t533;
  t636 = 1. + t633;
  t1225 = t792*t444;
  t1243 = -4.e-6*t1040*t376;
  t1259 = t1225 + t1243;
  t1202 = t747*t1040;
  t1213 = 4.e-6*t444*t376;
  t1220 = t1202 + t1213;
  t1270 = 4.e-6*t724*t1040;
  t1274 = t444*t376;
  t1275 = t1270 + t1274;
  t668 = 1.6e-11*t660;
  t673 = 1. + t668;
  t978 = 0.15121*t432;
  t1046 = -1.2484e-7*var2[7];
  t1082 = -1.5499600000248e-7*t786;
  t1108 = 1.124840000016e-6*t376;
  t1115 = t1046 + t1082 + t1108;
  t1139 = t1040*t1115;
  t1158 = 0.281210000008499*t786;
  t1169 = 0.03874900000062*t376;
  t1178 = t1158 + t1169;
  t1194 = t444*t1178;
  t1222 = t1220*t541;
  t1264 = t1259*t592;
  t1281 = t1275*t624;
  t1286 = t636*t1259;
  t1291 = -4.e-6*t1220*t538;
  t1300 = -1.*t1275*t538;
  t1308 = t1286 + t1291 + t1300;
  t1315 = 0.80321*t1308;
  t1317 = t673*t1220;
  t1328 = 4.e-6*t660*t1275;
  t1336 = 4.e-6*t1259*t538;
  t1343 = t1317 + t1328 + t1336;
  t1346 = 0.14871*t1343;
  t1349 = 4.e-6*t660*t1220;
  t1350 = t526*t1275;
  t1357 = t1259*t538;
  t1358 = t1349 + t1350 + t1357;
  t1375 = -0.03875*t1358;
  t955 = -0.15121*t432;
  t960 = t940 + t955;
  t982 = t940 + t978;
  t1438 = t404*t351*t422;
  t1440 = t426*t351*t432;
  t1447 = t1438 + t1440;
  t1456 = -1.*t426*t404*t351;
  t1457 = t351*t422*t432;
  t1458 = t1456 + t1457;
  t1534 = 4.e-6*t403*t724;
  t1541 = t747*t1447;
  t1544 = 4.e-6*t1458*t376;
  t1549 = t1534 + t1541 + t1544;
  t1583 = t403*t364;
  t1585 = 4.e-6*t724*t1447;
  t1587 = t1458*t376;
  t1590 = t1583 + t1585 + t1587;
  t1555 = t792*t1458;
  t1569 = -1.*t403*t376;
  t1572 = -4.e-6*t1447*t376;
  t1580 = t1555 + t1569 + t1572;
  t1894 = Sin(var2[3]);
  t1474 = 4.9936e-13*var2[7];
  t1479 = -0.03874900000062*t786;
  t1483 = 0.281210000004*t376;
  t1509 = t1474 + t1479 + t1483;
  t1923 = -1.*t403*t404*t1894*t422;
  t1931 = -1.*t403*t426*t1894*t432;
  t1932 = t1923 + t1931;
  t1942 = t403*t426*t404*t1894;
  t1946 = -1.*t403*t1894*t422*t432;
  t1950 = t1942 + t1946;
  t1978 = 4.e-6*t724*t1894*t351;
  t1982 = t747*t1932;
  t1992 = 4.e-6*t1950*t376;
  t1993 = t1978 + t1982 + t1992;
  t2026 = t364*t1894*t351;
  t2027 = 4.e-6*t724*t1932;
  t2033 = t1950*t376;
  t2037 = t2026 + t2027 + t2033;
  t2000 = t792*t1950;
  t2009 = -1.*t1894*t351*t376;
  t2010 = -4.e-6*t1932*t376;
  t2015 = t2000 + t2009 + t2010;
  t2183 = Cos(var2[3]);
  t2182 = -1.*t426*t1894;
  t2186 = -1.*t2183*t351*t422;
  t2190 = t2182 + t2186;
  t2194 = t2183*t426*t351;
  t2197 = -1.*t1894*t422;
  t2201 = t2194 + t2197;
  t2213 = t404*t2190;
  t2214 = -1.*t2201*t432;
  t2215 = t2213 + t2214;
  t2223 = t404*t2201;
  t2226 = t2190*t432;
  t2227 = t2223 + t2226;
  t2233 = -4.e-6*t2183*t403*t724;
  t2235 = t747*t2215;
  t2239 = 4.e-6*t2227*t376;
  t2262 = t2233 + t2235 + t2239;
  t2300 = -1.*t2183*t403*t364;
  t2307 = 4.e-6*t724*t2215;
  t2308 = t2227*t376;
  t2310 = t2300 + t2307 + t2308;
  t2274 = t792*t2227;
  t2289 = t2183*t403*t376;
  t2291 = -4.e-6*t2215*t376;
  t2298 = t2274 + t2289 + t2291;
  t2387 = -1.*t426*t1894*t351;
  t2393 = -1.*t2183*t422;
  t2403 = t2387 + t2393;
  t2411 = t2183*t426;
  t2420 = -1.*t1894*t351*t422;
  t2422 = t2411 + t2420;
  t2428 = t404*t2403;
  t2431 = -1.*t2422*t432;
  t2436 = t2428 + t2431;
  t2443 = t404*t2422;
  t2449 = t2403*t432;
  t2450 = t2443 + t2449;
  t2468 = t792*t2450;
  t2469 = -4.e-6*t2436*t376;
  t2470 = t2468 + t2469;
  t2456 = t747*t2436;
  t2464 = 4.e-6*t2450*t376;
  t2465 = t2456 + t2464;
  t2474 = 4.e-6*t724*t2436;
  t2486 = t2450*t376;
  t2487 = t2474 + t2486;
  t1388 = -0.15121*t404;
  t1393 = t1388 + t978;
  t1397 = 0.15121*t404;
  t1398 = t1397 + t978;
  t2597 = t426*t1894*t351;
  t2598 = t2183*t422;
  t2601 = t2597 + t2598;
  t2604 = -1.*t404*t2601;
  t2606 = t2604 + t2431;
  t2609 = -1.*t2601*t432;
  t2611 = t2443 + t2609;
  t2627 = t792*t2611;
  t2628 = -4.e-6*t2606*t376;
  t2629 = t2627 + t2628;
  t2614 = t747*t2606;
  t2616 = 4.e-6*t2611*t376;
  t2619 = t2614 + t2616;
  t2633 = 4.e-6*t724*t2606;
  t2635 = t2611*t376;
  t2644 = t2633 + t2635;
  t366 = 0.281210000004*t364;
  t382 = -0.03874900000062*t376;
  t386 = 4.9936e-13 + t366 + t382;
  t451 = 1.124840000016e-6*t364;
  t453 = -1.5499600000248e-7*t376;
  t454 = -1.2484e-7 + t451 + t453;
  t491 = 0.03874900000062*t364;
  t493 = 0.281210000008499*t376;
  t496 = t491 + t493;
  t2772 = t404*t2601;
  t2787 = t2422*t432;
  t2794 = t2772 + t2787;
  t2809 = t403*t364*t1894;
  t2812 = -4.e-6*t364*t2611;
  t2817 = -1.000000000016*t2794*t376;
  t2820 = t2809 + t2812 + t2817;
  t2825 = t364*t2794;
  t2830 = t403*t1894*t376;
  t2831 = -4.e-6*t2611*t376;
  t2838 = t2825 + t2830 + t2831;
  t2798 = 4.e-6*t364*t2794;
  t2800 = 4.e-6*t403*t1894*t376;
  t2802 = -1.6e-11*t2611*t376;
  t2806 = t2798 + t2800 + t2802;
  t737 = 0.503210000008*t526;
  t740 = -0.03874900000062*t538;
  t741 = 5.136e-14 + t737 + t740;
  t758 = 2.012840000032e-6*t526;
  t763 = -1.5499600000248e-7*t538;
  t764 = -1.284e-8 + t758 + t763;
  t821 = 0.03874900000062*t526;
  t822 = 0.503210000016051*t538;
  t832 = t821 + t822;
  t2956 = -4.e-6*t403*t724*t1894;
  t2960 = t747*t2611;
  t2961 = 4.e-6*t2794*t376;
  t2967 = t2956 + t2960 + t2961;
  t2943 = -1.*t403*t364*t1894;
  t2946 = 4.e-6*t724*t2611;
  t2948 = t2794*t376;
  t2952 = t2943 + t2946 + t2948;
  t2969 = t792*t2794;
  t2974 = t2969 + t2830 + t2831;
  t3100 = t2183*t403*t404*t422;
  t3101 = t2183*t403*t426*t432;
  t3104 = t3100 + t3101;
  t3114 = -1.*t2183*t403*t426*t404;
  t3120 = t2183*t403*t422*t432;
  t3125 = t3114 + t3120;
  t3144 = -4.e-6*t2183*t724*t351;
  t3145 = t747*t3104;
  t3151 = 4.e-6*t3125*t376;
  t3154 = t3144 + t3145 + t3151;
  t3183 = -1.*t2183*t364*t351;
  t3186 = 4.e-6*t724*t3104;
  t3193 = t3125*t376;
  t3195 = t3183 + t3186 + t3193;
  t3160 = t792*t3125;
  t3168 = t2183*t351*t376;
  t3169 = -4.e-6*t3104*t376;
  t3172 = t3160 + t3168 + t3169;
  t3286 = t426*t1894;
  t3287 = t2183*t351*t422;
  t3289 = t3286 + t3287;
  t3297 = -1.*t3289*t432;
  t3299 = t2223 + t3297;
  t3302 = t404*t3289;
  t3304 = t2201*t432;
  t3305 = t3302 + t3304;
  t3354 = t792*t3305;
  t3357 = -4.e-6*t3299*t376;
  t3369 = t3354 + t3357;
  t3318 = t747*t3299;
  t3327 = 4.e-6*t3305*t376;
  t3338 = t3318 + t3327;
  t3374 = 4.e-6*t724*t3299;
  t3375 = t3305*t376;
  t3385 = t3374 + t3375;
  t3485 = -1.*t2183*t426*t351;
  t3489 = t1894*t422;
  t3493 = t3485 + t3489;
  t3497 = -1.*t404*t3493;
  t3500 = t3497 + t3297;
  t3505 = -1.*t3493*t432;
  t3507 = t3302 + t3505;
  t3517 = t792*t3507;
  t3518 = -4.e-6*t3500*t376;
  t3532 = t3517 + t3518;
  t3510 = t747*t3500;
  t3511 = 4.e-6*t3507*t376;
  t3512 = t3510 + t3511;
  t3537 = 4.e-6*t724*t3500;
  t3539 = t3507*t376;
  t3541 = t3537 + t3539;
  t3622 = t404*t3493;
  t3625 = t3289*t432;
  t3626 = t3622 + t3625;
  t3648 = -4.e-6*t364*t3507;
  t3657 = -1.000000000016*t3626*t376;
  t3661 = t2300 + t3648 + t3657;
  t3665 = t364*t3626;
  t3669 = -1.*t2183*t403*t376;
  t3672 = -4.e-6*t3507*t376;
  t3680 = t3665 + t3669 + t3672;
  t3629 = 4.e-6*t364*t3626;
  t3638 = -4.e-6*t2183*t403*t376;
  t3642 = -1.6e-11*t3507*t376;
  t3645 = t3629 + t3638 + t3642;
  t3752 = 4.e-6*t2183*t403*t724;
  t3757 = t747*t3507;
  t3758 = 4.e-6*t3626*t376;
  t3759 = t3752 + t3757 + t3758;
  t3738 = t2183*t403*t364;
  t3739 = 4.e-6*t724*t3507;
  t3740 = t3626*t376;
  t3749 = t3738 + t3739 + t3740;
  t3772 = t792*t3626;
  t3778 = t3772 + t3669 + t3672;
  t2998 = -4.e-6*t2967*t538;
  t3001 = -1.*t2952*t538;
  t4021 = Cos(var2[17]);
  t4022 = Sin(var2[17]);
  t4059 = Cos(var2[16]);
  t4063 = -1.*t4059;
  t4065 = 1. + t4063;
  t4072 = Sin(var2[16]);
  t4119 = Cos(var2[15]);
  t4109 = Sin(var2[15]);
  t4026 = 2.8e-11*t4022;
  t4111 = -1.*t403*t426*t4109;
  t4137 = -1.*t4119*t403*t422;
  t4140 = t4111 + t4137;
  t4067 = -2.8e-11*t4065;
  t4156 = t4119*t403*t426;
  t4167 = -1.*t403*t4109*t422;
  t4169 = t4156 + t4167;
  t4195 = -4.e-6*t4022;
  t4038 = 7.e-6*t4022;
  t4236 = 4.e-6*t4065;
  t4093 = -7.e-6*t4065;
  t4074 = t4067 + t4072;
  t4078 = t4074*t351;
  t4104 = -4.e-6*t4072;
  t4107 = t4093 + t4104;
  t4142 = t4107*t4140;
  t4148 = -1.000000000016*t4065;
  t4153 = 1. + t4148;
  t4188 = t4153*t4169;
  t4192 = t4078 + t4142 + t4188;
  t4232 = -1.000000000049*t4065;
  t4233 = 1. + t4232;
  t4234 = t4233*t351;
  t4243 = -7.e-6*t4072;
  t4245 = t4236 + t4243;
  t4246 = t4245*t4140;
  t4248 = -1.*t4072;
  t4249 = t4067 + t4248;
  t4250 = t4249*t4169;
  t4252 = t4234 + t4246 + t4250;
  t4037 = -4.e-6*t4021;
  t4317 = 7.e-6*t4072;
  t4326 = t4236 + t4317;
  t4328 = t4326*t351;
  t4331 = -6.5e-11*t4065;
  t4337 = 1. + t4331;
  t4340 = t4337*t4140;
  t4355 = 4.e-6*t4072;
  t4359 = t4093 + t4355;
  t4361 = t4359*t4169;
  t4367 = t4328 + t4340 + t4361;
  t4200 = -1.*t4021;
  t4373 = -2.8e-11*t4022;
  t4194 = -7.e-6*t4021;
  t4266 = 4.e-6*t4021;
  t4380 = -7.e-6*t4022;
  t4256 = 7.e-6*t4021;
  t4398 = 4.e-6*t4022;
  t4463 = 2.8e-11*t4072;
  t4513 = 1. + t4200;
  t4477 = 7.e-6*t4059;
  t4484 = 4.e-6*t4059;
  t4520 = -1. + t4021;
  t4521 = 4.e-6*t4520;
  t4446 = -7.e-6*t4059;
  t4516 = 7.e-6*t4513;
  t4556 = 2.8e-11*t4513;
  t4582 = -2.8e-11*t4072;
  t4497 = -4.e-6*t4059;
  t4533 = t4477 + t4355;
  t4539 = t4533*t351;
  t4544 = -6.5e-11*t4072*t4140;
  t4545 = t4484 + t4243;
  t4546 = t4545*t4169;
  t4548 = t4539 + t4544 + t4546;
  t4578 = -1.000000000049*t4072*t351;
  t4580 = t4446 + t4355;
  t4581 = t4580*t4140;
  t4583 = t4063 + t4582;
  t4584 = t4583*t4169;
  t4589 = t4578 + t4581 + t4584;
  t4619 = t4059 + t4582;
  t4620 = t4619*t351;
  t4621 = t4497 + t4243;
  t4625 = t4621*t4140;
  t4626 = -1.000000000016*t4072*t4169;
  t4629 = t4620 + t4625 + t4626;
  t4645 = -2.8e-11*t4513;
  t4562 = -1.*t4022;
  t4681 = 4.e-6*t4513;
  t4637 = -7.e-6*t4513;
  t4792 = -1.*t4119;
  t4802 = 1. + t4792;
  t4803 = -0.15121*t4802;
  t4855 = 7.e-6*t4065;
  t4510 = 2.826290000000002e-7*var2[17];
  t4515 = -2.18904205e-16*t4513;
  t4517 = t4516 + t4398;
  t4518 = -0.5031510000080001*t4517;
  t4523 = t4521 + t4038;
  t4529 = -0.038575000014*t4523;
  t4531 = t4510 + t4515 + t4518 + t4529;
  t4927 = -1.*t4119*t403*t426;
  t4937 = t403*t4109*t422;
  t4944 = t4927 + t4937;
  t4551 = 1.1305160000000008e-12*var2[17];
  t4555 = -0.03857500001589017*t4513;
  t4564 = t4556 + t4562;
  t4569 = -0.5031510000080001*t4564;
  t4570 = t4521 + t4380;
  t4572 = -3.367757e-6*t4570;
  t4575 = t4551 + t4555 + t4569 + t4572;
  t4601 = -1.9784030000000015e-12*var2[17];
  t4603 = -0.5031510000160505*t4513;
  t4609 = t4516 + t4195;
  t4610 = -3.367757e-6*t4609;
  t4611 = t4556 + t4022;
  t4617 = -0.038575000014*t4611;
  t4618 = t4601 + t4603 + t4610 + t4617;
  t4638 = t4637 + t4195;
  t4951 = t4359*t4140;
  t4952 = t4337*t4944;
  t4959 = t4951 + t4952;
  t4647 = t4645 + t4022;
  t4963 = t4249*t4140;
  t4973 = t4245*t4944;
  t4974 = t4963 + t4973;
  t4653 = -1.000000000016*t4513;
  t4667 = 1. + t4653;
  t4982 = t4153*t4140;
  t4985 = t4107*t4944;
  t4993 = t4982 + t4985;
  t4684 = t4681 + t4380;
  t4696 = -1.000000000049*t4513;
  t4699 = 1. + t4696;
  t4729 = t4645 + t4562;
  t4748 = -6.5e-11*t4513;
  t4751 = 1. + t4748;
  t4756 = t4681 + t4038;
  t4763 = t4637 + t4398;
  t4821 = -0.15121*t4109;
  t4843 = -2.7726089999999997e-12*var2[16];
  t4854 = -0.2812110000084994*t4065;
  t4857 = t4855 + t4104;
  t4859 = -1.8134809999999998e-6*t4857;
  t4863 = 2.8e-11*t4065;
  t4868 = t4863 + t4072;
  t4873 = -0.038749000006999997*t4868;
  t4874 = t4843 + t4854 + t4859 + t4873;
  t4875 = t4874*t4140;
  t4881 = 3.9608699999999997e-7*var2[16];
  t4889 = -1.1787626499999999e-16*t4065;
  t4894 = t4855 + t4355;
  t4896 = -0.281211000004*t4894;
  t4901 = -1. + t4059;
  t4908 = 4.e-6*t4901;
  t4912 = t4908 + t4317;
  t4920 = -0.038749000006999997*t4912;
  t4925 = t4881 + t4889 + t4896 + t4920;
  t4946 = t4925*t4944;
  t4960 = t4531*t4959;
  t4976 = t4575*t4974;
  t4999 = t4618*t4993;
  t5006 = t4638*t4959;
  t5007 = t4647*t4974;
  t5010 = t4667*t4993;
  t5014 = t5006 + t5007 + t5010;
  t5018 = -0.80315*t5014;
  t5027 = t4684*t4959;
  t5038 = t4699*t4974;
  t5039 = t4729*t4993;
  t5042 = t5027 + t5038 + t5039;
  t5052 = -0.038576*t5042;
  t5063 = t4751*t4959;
  t5072 = t4756*t4974;
  t5074 = t4763*t4993;
  t5076 = t5063 + t5072 + t5074;
  t5094 = -0.148715*t5076;
  t4825 = t4803 + t4821;
  t4804 = 0.15121*t4109;
  t4806 = t4803 + t4804;
  t5159 = t426*t4109*t351;
  t5161 = t4119*t351*t422;
  t5178 = t5159 + t5161;
  t5181 = -1.*t4119*t426*t351;
  t5184 = t4109*t351*t422;
  t5185 = t5181 + t5184;
  t5188 = t403*t4074;
  t5190 = t4107*t5178;
  t5191 = t4153*t5185;
  t5197 = t5188 + t5190 + t5191;
  t5203 = t4233*t403;
  t5205 = t4245*t5178;
  t5211 = t4249*t5185;
  t5212 = t5203 + t5205 + t5211;
  t5218 = t403*t4326;
  t5220 = t4337*t5178;
  t5221 = t4359*t5185;
  t5223 = t5218 + t5220 + t5221;
  t5133 = 1.5843479999999999e-12*var2[16];
  t5134 = -0.03874900000889869*t4065;
  t5137 = t4863 + t4248;
  t5141 = -0.281211000004*t5137;
  t5144 = t4908 + t4243;
  t5146 = -1.8134809999999998e-6*t5144;
  t5147 = t5133 + t5134 + t5141 + t5146;
  t5329 = -1.*t403*t426*t4109*t1894;
  t5333 = -1.*t4119*t403*t1894*t422;
  t5335 = t5329 + t5333;
  t5342 = t4119*t403*t426*t1894;
  t5343 = -1.*t403*t4109*t1894*t422;
  t5345 = t5342 + t5343;
  t5352 = t4074*t1894*t351;
  t5354 = t4107*t5335;
  t5355 = t4153*t5345;
  t5357 = t5352 + t5354 + t5355;
  t5367 = t4233*t1894*t351;
  t5368 = t4245*t5335;
  t5372 = t4249*t5345;
  t5373 = t5367 + t5368 + t5372;
  t5377 = t4326*t1894*t351;
  t5381 = t4337*t5335;
  t5382 = t4359*t5345;
  t5383 = t5377 + t5381 + t5382;
  t5454 = -1.*t4109*t2201;
  t5458 = t4119*t2190;
  t5459 = t5454 + t5458;
  t5471 = t4119*t2201;
  t5474 = t4109*t2190;
  t5475 = t5471 + t5474;
  t5481 = -1.*t2183*t403*t4074;
  t5484 = t4107*t5459;
  t5486 = t4153*t5475;
  t5492 = t5481 + t5484 + t5486;
  t5496 = -1.*t4233*t2183*t403;
  t5497 = t4245*t5459;
  t5498 = t4249*t5475;
  t5504 = t5496 + t5497 + t5498;
  t5510 = -1.*t2183*t403*t4326;
  t5511 = t4337*t5459;
  t5515 = t4359*t5475;
  t5516 = t5510 + t5511 + t5515;
  t5608 = t4109*t2403;
  t5614 = t4119*t2422;
  t5616 = t5608 + t5614;
  t5622 = t4119*t2403;
  t5624 = -1.*t4109*t2422;
  t5625 = t5622 + t5624;
  t5632 = t4359*t5616;
  t5633 = t4337*t5625;
  t5641 = t5632 + t5633;
  t5652 = t4249*t5616;
  t5654 = t4245*t5625;
  t5664 = t5652 + t5654;
  t5669 = t4153*t5616;
  t5672 = t4107*t5625;
  t5675 = t5669 + t5672;
  t5105 = -0.15121*t4119;
  t5112 = t5105 + t4821;
  t5116 = 0.15121*t4119;
  t5117 = t5116 + t4821;
  t5742 = -1.*t4109*t2601;
  t5745 = t5742 + t5614;
  t5748 = -1.*t4119*t2601;
  t5754 = t5748 + t5624;
  t5756 = t4359*t5745;
  t5761 = t4337*t5754;
  t5762 = t5756 + t5761;
  t5767 = t4249*t5745;
  t5775 = t4245*t5754;
  t5776 = t5767 + t5775;
  t5779 = t4153*t5745;
  t5781 = t4107*t5754;
  t5787 = t5779 + t5781;
  t4030 = t4021 + t4026;
  t4036 = -0.038575000014*t4030;
  t4043 = t4037 + t4038;
  t4045 = -3.367757e-6*t4043;
  t4052 = -0.5031510000160505*t4022;
  t4057 = -1.9784030000000015e-12 + t4036 + t4045 + t4052;
  t4196 = t4194 + t4195;
  t4197 = -3.367757e-6*t4196;
  t4207 = t4200 + t4026;
  t4208 = -0.5031510000080001*t4207;
  t4225 = -0.03857500001589017*t4022;
  t4228 = 1.1305160000000008e-12 + t4197 + t4208 + t4225;
  t5845 = t4119*t2601;
  t5858 = t4109*t2422;
  t5860 = t5845 + t5858;
  t4259 = t4256 + t4195;
  t4264 = -0.038575000014*t4259;
  t4278 = t4266 + t4038;
  t4284 = -0.5031510000080001*t4278;
  t4295 = -2.18904205e-16*t4022;
  t4305 = 2.826290000000002e-7 + t4264 + t4284 + t4295;
  t5841 = -1.*t403*t4074*t1894;
  t5842 = t4107*t5745;
  t5861 = t4153*t5860;
  t5862 = t5841 + t5842 + t5861;
  t4374 = t4021 + t4373;
  t5865 = -1.*t4233*t403*t1894;
  t5867 = t4245*t5745;
  t5870 = t4249*t5860;
  t5871 = t5865 + t5867 + t5870;
  t4382 = t4037 + t4380;
  t5877 = -1.*t403*t4326*t1894;
  t5878 = t4337*t5745;
  t5881 = t4359*t5860;
  t5885 = t5877 + t5878 + t5881;
  t4389 = t4200 + t4373;
  t4404 = t4194 + t4398;
  t4421 = t4266 + t4380;
  t4428 = t4256 + t4398;
  t4449 = t4446 + t4104;
  t4461 = -1.8134809999999998e-6*t4449;
  t4464 = t4063 + t4463;
  t4468 = -0.281211000004*t4464;
  t4469 = -0.03874900000889869*t4072;
  t4475 = 1.5843479999999999e-12 + t4461 + t4468 + t4469;
  t4482 = t4477 + t4104;
  t4483 = -0.038749000006999997*t4482;
  t4486 = t4484 + t4317;
  t4487 = -0.281211000004*t4486;
  t4489 = -1.1787626499999999e-16*t4072;
  t4490 = 3.9608699999999997e-7 + t4483 + t4487 + t4489;
  t4494 = t4059 + t4463;
  t4495 = -0.038749000006999997*t4494;
  t4498 = t4497 + t4317;
  t4501 = -1.8134809999999998e-6*t4498;
  t4504 = -0.2812110000084994*t4072;
  t4505 = -2.7726089999999997e-12 + t4495 + t4501 + t4504;
  t5951 = -1.*t403*t4533*t1894;
  t5956 = -6.5e-11*t4072*t5745;
  t5963 = t4545*t5860;
  t5965 = t5951 + t5956 + t5963;
  t5972 = 1.000000000049*t403*t4072*t1894;
  t5979 = t4580*t5745;
  t5980 = t4583*t5860;
  t5982 = t5972 + t5979 + t5980;
  t5986 = -1.*t403*t4619*t1894;
  t5987 = t4621*t5745;
  t5988 = -1.000000000016*t4072*t5860;
  t5993 = t5986 + t5987 + t5988;
  t6103 = t2183*t403*t426*t4109;
  t6107 = t4119*t2183*t403*t422;
  t6109 = t6103 + t6107;
  t6111 = -1.*t4119*t2183*t403*t426;
  t6115 = t2183*t403*t4109*t422;
  t6117 = t6111 + t6115;
  t6119 = -1.*t2183*t4074*t351;
  t6120 = t4107*t6109;
  t6121 = t4153*t6117;
  t6124 = t6119 + t6120 + t6121;
  t6129 = -1.*t4233*t2183*t351;
  t6130 = t4245*t6109;
  t6134 = t4249*t6117;
  t6135 = t6129 + t6130 + t6134;
  t6138 = -1.*t2183*t4326*t351;
  t6139 = t4337*t6109;
  t6142 = t4359*t6117;
  t6143 = t6138 + t6139 + t6142;
  t6207 = t4109*t2201;
  t6209 = t4119*t3289;
  t6211 = t6207 + t6209;
  t6216 = -1.*t4109*t3289;
  t6217 = t5471 + t6216;
  t6224 = t4359*t6211;
  t6227 = t4337*t6217;
  t6229 = t6224 + t6227;
  t6231 = t4249*t6211;
  t6236 = t4245*t6217;
  t6241 = t6231 + t6236;
  t6249 = t4153*t6211;
  t6251 = t4107*t6217;
  t6253 = t6249 + t6251;
  t6306 = -1.*t4109*t3493;
  t6307 = t6306 + t6209;
  t6309 = -1.*t4119*t3493;
  t6311 = t6309 + t6216;
  t6316 = t4359*t6307;
  t6317 = t4337*t6311;
  t6319 = t6316 + t6317;
  t6326 = t4249*t6307;
  t6327 = t4245*t6311;
  t6329 = t6326 + t6327;
  t6332 = t4153*t6307;
  t6333 = t4107*t6311;
  t6335 = t6332 + t6333;
  t6413 = t4119*t3493;
  t6416 = t4109*t3289;
  t6417 = t6413 + t6416;
  t6406 = t2183*t403*t4074;
  t6410 = t4107*t6307;
  t6420 = t4153*t6417;
  t6422 = t6406 + t6410 + t6420;
  t6428 = t4233*t2183*t403;
  t6429 = t4245*t6307;
  t6431 = t4249*t6417;
  t6432 = t6428 + t6429 + t6431;
  t6435 = t2183*t403*t4326;
  t6438 = t4337*t6307;
  t6440 = t4359*t6417;
  t6441 = t6435 + t6438 + t6440;
  t6513 = t2183*t403*t4533;
  t6516 = -6.5e-11*t4072*t6307;
  t6517 = t4545*t6417;
  t6519 = t6513 + t6516 + t6517;
  t6521 = -1.000000000049*t2183*t403*t4072;
  t6522 = t4580*t6307;
  t6523 = t4583*t6417;
  t6524 = t6521 + t6522 + t6523;
  t6530 = t2183*t403*t4619;
  t6532 = t4621*t6307;
  t6533 = -1.000000000016*t4072*t6417;
  t6534 = t6530 + t6532 + t6533;
  t6799 = Power(t403,2);
  t6801 = Power(t426,2);
  t6805 = t6799*t6801;
  t6806 = Power(t2601,2);
  t6808 = t6805 + t6806;
  t6809 = 1/t6808;
  t6858 = Cos(var2[9]);
  t6860 = -1.*t6858;
  t6866 = 1. + t6860;
  t6868 = Sin(var2[9]);
  t6869 = -0.15121*t6868;
  t6875 = Cos(var2[12]);
  t6877 = -1.*t6875;
  t6878 = 1. + t6877;
  t6881 = Sin(var2[12]);
  t6882 = 0.15121*t6881;
  t6949 = -0.15121*t6858;
  t6887 = -0.15121*t6866;
  t6895 = t6887 + t6869;
  t6898 = 0.15121*t6878;
  t6899 = t6898 + t6882;
  t6867 = 0.15121*t6866;
  t6873 = t6867 + t6869;
  t6879 = -0.15121*t6878;
  t6883 = t6879 + t6882;
  t6965 = t6858*t3289;
  t6974 = -1.*t6868*t3289;
  t7060 = 0.15121*t6875;
  t7014 = t6875*t3289;
  t7049 = -1.*t6881*t3289;
  p_output1[0]=var3[0] + (t1115*t1447 + t1178*t1458 + t1509*t403 + t1549*t541 + t1580*t592 + t1590*t624 + 0.80321*(-4.e-6*t1549*t538 - 1.*t1590*t538 + t1580*t636) - 0.03875*(t1590*t526 + t1580*t538 + 4.e-6*t1549*t660) + 0.14871*(4.e-6*t1580*t538 + 4.e-6*t1590*t660 + t1549*t673) + t351*t422*t960 - 1.*t351*t426*t982)*var3[4] + (t1139 + t1194 + t1222 + t1264 + t1281 + t1315 + t1346 + t1375 - 1.*t403*t426*t960 - 1.*t403*t422*t982)*var3[5] + (t1139 + t1194 + t1222 + t1264 + t1281 + t1315 + t1346 + t1375 - 1.*t1393*t403*t422 + t1398*t403*t426)*var3[6] + (t351*t386 + t444*t454 + t480*t496 + t508*t541 + t580*t592 + t612*t624 + 0.80321*(-4.e-6*t508*t538 - 1.*t538*t612 + t580*t636) - 0.03875*(t538*t580 + t526*t612 + 4.e-6*t508*t660) + 0.14871*(4.e-6*t538*t580 + 4.e-6*t612*t660 + t508*t673))*var3[7] + (t736*t741 + t754*t764 + 0.14871*(-4.e-6*t538*t736 - 1.6e-11*t538*t754 + 4.e-6*t526*t801) - 0.03875*(-1.*t538*t736 - 4.e-6*t538*t754 + t526*t801) + 0.80321*(-1.*t526*t736 - 4.e-6*t526*t754 - 1.000000000016*t538*t801) + t801*t832)*var3[8] + 5.*t211*t338*var4[0] + 20.*t165*t298*t327*var4[10] - 5.*t211*t338*var4[10] + 30.*t251*t270*t278*var4[20] - 20.*t165*t298*t327*var4[20] + 20.*t197*t208*t224*var4[30] - 30.*t251*t270*t278*var4[30] + 5.*t104*t183*var4[40] - 20.*t197*t208*t224*var4[40] - 5.*t104*t183*var4[50];
  p_output1[1]=var3[1] + (t1115*t2215 + t1178*t2227 - 1.*t1509*t2183*t403 + t2262*t541 + t2298*t592 + t2310*t624 + 0.80321*(-4.e-6*t2262*t538 - 1.*t2310*t538 + t2298*t636) - 0.03875*(t2310*t526 + t2298*t538 + 4.e-6*t2262*t660) + 0.14871*(4.e-6*t2298*t538 + 4.e-6*t2310*t660 + t2262*t673) + t2190*t960 + t2201*t982)*var3[3] + (t1115*t1932 + t1178*t1950 + t1509*t1894*t351 + t1993*t541 + t2015*t592 + t2037*t624 + 0.80321*(-4.e-6*t1993*t538 - 1.*t2037*t538 + t2015*t636) - 0.03875*(t2037*t526 + t2015*t538 + 4.e-6*t1993*t660) + 0.14871*(4.e-6*t2015*t538 + 4.e-6*t2037*t660 + t1993*t673) - 1.*t1894*t403*t422*t960 + t1894*t403*t426*t982)*var3[4] + (t1115*t2436 + t1178*t2450 + t2465*t541 + t2470*t592 + t2487*t624 + 0.80321*(-4.e-6*t2465*t538 - 1.*t2487*t538 + t2470*t636) - 0.03875*(t2487*t526 + t2470*t538 + 4.e-6*t2465*t660) + 0.14871*(4.e-6*t2470*t538 + 4.e-6*t2487*t660 + t2465*t673) + t2403*t960 + t2422*t982)*var3[5] + (t1393*t2422 + t1398*t2601 + t1115*t2606 + t1178*t2611 + t2619*t541 + t2629*t592 + t2644*t624 + 0.80321*(-4.e-6*t2619*t538 - 1.*t2644*t538 + t2629*t636) - 0.03875*(t2644*t526 + t2629*t538 + 4.e-6*t2619*t660) + 0.14871*(4.e-6*t2629*t538 + 4.e-6*t2644*t660 + t2619*t673))*var3[6] + (-1.*t1894*t386*t403 + t2611*t454 + t2794*t496 + t2806*t541 + t2820*t592 + t2838*t624 + 0.80321*(-4.e-6*t2806*t538 - 1.*t2838*t538 + t2820*t636) - 0.03875*(t2838*t526 + t2820*t538 + 4.e-6*t2806*t660) + 0.14871*(4.e-6*t2820*t538 + 4.e-6*t2838*t660 + t2806*t673))*var3[7] + (-0.03875*(t2998 + t3001 + t2974*t526) + 0.14871*(4.e-6*t2974*t526 - 4.e-6*t2952*t538 - 1.6e-11*t2967*t538) + 0.80321*(-1.*t2952*t526 - 4.e-6*t2967*t526 - 1.000000000016*t2974*t538) + t2952*t741 + t2967*t764 + t2974*t832)*var3[8] + 5.*t211*t338*var4[1] + 20.*t165*t298*t327*var4[11] - 5.*t211*t338*var4[11] + 30.*t251*t270*t278*var4[21] - 20.*t165*t298*t327*var4[21] + 20.*t197*t208*t224*var4[31] - 30.*t251*t270*t278*var4[31] + 5.*t104*t183*var4[41] - 20.*t197*t208*t224*var4[41] - 5.*t104*t183*var4[51];
  p_output1[2]=var3[2] + (t1115*t2611 + t1178*t2794 - 1.*t1509*t1894*t403 + t2967*t541 + t2974*t592 + t2952*t624 + 0.80321*(t2998 + t3001 + t2974*t636) - 0.03875*(t2952*t526 + t2974*t538 + 4.e-6*t2967*t660) + 0.14871*(4.e-6*t2974*t538 + 4.e-6*t2952*t660 + t2967*t673) + t2422*t960 + t2601*t982)*var3[3] + (t1115*t3104 + t1178*t3125 - 1.*t1509*t2183*t351 + t3154*t541 + t3172*t592 + t3195*t624 + 0.80321*(-4.e-6*t3154*t538 - 1.*t3195*t538 + t3172*t636) - 0.03875*(t3195*t526 + t3172*t538 + 4.e-6*t3154*t660) + 0.14871*(4.e-6*t3172*t538 + 4.e-6*t3195*t660 + t3154*t673) + t2183*t403*t422*t960 - 1.*t2183*t403*t426*t982)*var3[4] + (t1115*t3299 + t1178*t3305 + t3338*t541 + t3369*t592 + t3385*t624 + 0.80321*(-4.e-6*t3338*t538 - 1.*t3385*t538 + t3369*t636) - 0.03875*(t3385*t526 + t3369*t538 + 4.e-6*t3338*t660) + 0.14871*(4.e-6*t3369*t538 + 4.e-6*t3385*t660 + t3338*t673) + t2201*t960 + t3289*t982)*var3[5] + (t1393*t3289 + t1398*t3493 + t1115*t3500 + t1178*t3507 + t3512*t541 + t3532*t592 + t3541*t624 + 0.80321*(-4.e-6*t3512*t538 - 1.*t3541*t538 + t3532*t636) - 0.03875*(t3541*t526 + t3532*t538 + 4.e-6*t3512*t660) + 0.14871*(4.e-6*t3532*t538 + 4.e-6*t3541*t660 + t3512*t673))*var3[6] + (t2183*t386*t403 + t3507*t454 + t3626*t496 + t3645*t541 + t3661*t592 + t3680*t624 + 0.80321*(-4.e-6*t3645*t538 - 1.*t3680*t538 + t3661*t636) - 0.03875*(t3680*t526 + t3661*t538 + 4.e-6*t3645*t660) + 0.14871*(4.e-6*t3661*t538 + 4.e-6*t3680*t660 + t3645*t673))*var3[7] + (-0.03875*(t3778*t526 - 1.*t3749*t538 - 4.e-6*t3759*t538) + 0.14871*(4.e-6*t3778*t526 - 4.e-6*t3749*t538 - 1.6e-11*t3759*t538) + 0.80321*(-1.*t3749*t526 - 4.e-6*t3759*t526 - 1.000000000016*t3778*t538) + t3749*t741 + t3759*t764 + t3778*t832)*var3[8] + 5.*t211*t338*var4[2] + 20.*t165*t298*t327*var4[12] - 5.*t211*t338*var4[12] + 30.*t251*t270*t278*var4[22] - 20.*t165*t298*t327*var4[22] + 20.*t197*t208*t224*var4[32] - 30.*t251*t270*t278*var4[32] + 5.*t104*t183*var4[42] - 20.*t197*t208*t224*var4[42] - 5.*t104*t183*var4[52];
  p_output1[3]=var3[0] + (t351*t422*t4806 - 1.*t351*t426*t4825 + t403*t5147 + t4925*t5178 + t4874*t5185 + t4618*t5197 + t4575*t5212 + t4531*t5223 - 0.80315*(t4667*t5197 + t4647*t5212 + t4638*t5223) - 0.038576*(t4729*t5197 + t4699*t5212 + t4684*t5223) - 0.148715*(t4763*t5197 + t4756*t5212 + t4751*t5223))*var3[4] + (-1.*t403*t426*t4806 - 1.*t403*t422*t4825 + t4875 + t4946 + t4960 + t4976 + t4999 + t5018 + t5052 + t5094)*var3[5] + (t4875 + t4946 + t4960 + t4976 + t4999 + t5018 + t5052 + t5094 + t403*t426*t5112 - 1.*t403*t422*t5117)*var3[15] + (t351*t4475 + t4140*t4490 + t4169*t4505 + t4531*t4548 + t4575*t4589 + t4618*t4629 - 0.80315*(t4548*t4638 + t4589*t4647 + t4629*t4667) - 0.038576*(t4548*t4684 + t4589*t4699 + t4629*t4729) - 0.148715*(t4548*t4751 + t4589*t4756 + t4629*t4763))*var3[16] + (t4057*t4192 + t4228*t4252 + t4305*t4367 - 0.80315*(-1.000000000016*t4022*t4192 + t4252*t4374 + t4367*t4382) - 0.038576*(-1.000000000049*t4022*t4252 + t4192*t4389 + t4367*t4404) - 0.148715*(-6.5e-11*t4022*t4367 + t4192*t4421 + t4252*t4428))*var3[17] + 5.*t211*t338*var4[3] + 20.*t165*t298*t327*var4[13] - 5.*t211*t338*var4[13] + 30.*t251*t270*t278*var4[23] - 20.*t165*t298*t327*var4[23] + 20.*t197*t208*t224*var4[33] - 30.*t251*t270*t278*var4[33] + 5.*t104*t183*var4[43] - 20.*t197*t208*t224*var4[43] - 5.*t104*t183*var4[53];
  p_output1[4]=var3[1] + (t2190*t4806 + t2201*t4825 - 1.*t2183*t403*t5147 + t4925*t5459 + t4874*t5475 + t4618*t5492 + t4575*t5504 + t4531*t5516 - 0.80315*(t4667*t5492 + t4647*t5504 + t4638*t5516) - 0.038576*(t4729*t5492 + t4699*t5504 + t4684*t5516) - 0.148715*(t4763*t5492 + t4756*t5504 + t4751*t5516))*var3[3] + (-1.*t1894*t403*t422*t4806 + t1894*t403*t426*t4825 + t1894*t351*t5147 + t4925*t5335 + t4874*t5345 + t4618*t5357 + t4575*t5373 + t4531*t5383 - 0.80315*(t4667*t5357 + t4647*t5373 + t4638*t5383) - 0.038576*(t4729*t5357 + t4699*t5373 + t4684*t5383) - 0.148715*(t4763*t5357 + t4756*t5373 + t4751*t5383))*var3[4] + (t2403*t4806 + t2422*t4825 + t4874*t5616 + t4925*t5625 + t4531*t5641 + t4575*t5664 + t4618*t5675 - 0.80315*(t4638*t5641 + t4647*t5664 + t4667*t5675) - 0.038576*(t4684*t5641 + t4699*t5664 + t4729*t5675) - 0.148715*(t4751*t5641 + t4756*t5664 + t4763*t5675))*var3[5] + (t2601*t5112 + t2422*t5117 + t4874*t5745 + t4925*t5754 + t4531*t5762 + t4575*t5776 + t4618*t5787 - 0.80315*(t4638*t5762 + t4647*t5776 + t4667*t5787) - 0.038576*(t4684*t5762 + t4699*t5776 + t4729*t5787) - 0.148715*(t4751*t5762 + t4756*t5776 + t4763*t5787))*var3[15] + (-1.*t1894*t403*t4475 + t4490*t5745 + t4505*t5860 + t4531*t5965 + t4575*t5982 + t4618*t5993 - 0.80315*(t4638*t5965 + t4647*t5982 + t4667*t5993) - 0.038576*(t4684*t5965 + t4699*t5982 + t4729*t5993) - 0.148715*(t4751*t5965 + t4756*t5982 + t4763*t5993))*var3[16] + (t4057*t5862 + t4228*t5871 + t4305*t5885 - 0.148715*(t4421*t5862 + t4428*t5871 - 6.5e-11*t4022*t5885) - 0.80315*(-1.000000000016*t4022*t5862 + t4374*t5871 + t4382*t5885) - 0.038576*(t4389*t5862 - 1.000000000049*t4022*t5871 + t4404*t5885))*var3[17] + 5.*t211*t338*var4[4] + 20.*t165*t298*t327*var4[14] - 5.*t211*t338*var4[14] + 30.*t251*t270*t278*var4[24] - 20.*t165*t298*t327*var4[24] + 20.*t197*t208*t224*var4[34] - 30.*t251*t270*t278*var4[34] + 5.*t104*t183*var4[44] - 20.*t197*t208*t224*var4[44] - 5.*t104*t183*var4[54];
  p_output1[5]=var3[2] + (t2422*t4806 + t2601*t4825 - 1.*t1894*t403*t5147 + t4925*t5745 + t4874*t5860 + t4618*t5862 + t4575*t5871 + t4531*t5885 - 0.80315*(t4667*t5862 + t4647*t5871 + t4638*t5885) - 0.038576*(t4729*t5862 + t4699*t5871 + t4684*t5885) - 0.148715*(t4763*t5862 + t4756*t5871 + t4751*t5885))*var3[3] + (t2183*t403*t422*t4806 - 1.*t2183*t403*t426*t4825 - 1.*t2183*t351*t5147 + t4925*t6109 + t4874*t6117 + t4618*t6124 + t4575*t6135 + t4531*t6143 - 0.80315*(t4667*t6124 + t4647*t6135 + t4638*t6143) - 0.038576*(t4729*t6124 + t4699*t6135 + t4684*t6143) - 0.148715*(t4763*t6124 + t4756*t6135 + t4751*t6143))*var3[4] + (t2201*t4806 + t3289*t4825 + t4874*t6211 + t4925*t6217 + t4531*t6229 + t4575*t6241 + t4618*t6253 - 0.80315*(t4638*t6229 + t4647*t6241 + t4667*t6253) - 0.038576*(t4684*t6229 + t4699*t6241 + t4729*t6253) - 0.148715*(t4751*t6229 + t4756*t6241 + t4763*t6253))*var3[5] + (t3493*t5112 + t3289*t5117 + t4874*t6307 + t4925*t6311 + t4531*t6319 + t4575*t6329 + t4618*t6335 - 0.80315*(t4638*t6319 + t4647*t6329 + t4667*t6335) - 0.038576*(t4684*t6319 + t4699*t6329 + t4729*t6335) - 0.148715*(t4751*t6319 + t4756*t6329 + t4763*t6335))*var3[15] + (t2183*t403*t4475 + t4490*t6307 + t4505*t6417 + t4531*t6519 + t4575*t6524 + t4618*t6534 - 0.80315*(t4638*t6519 + t4647*t6524 + t4667*t6534) - 0.038576*(t4684*t6519 + t4699*t6524 + t4729*t6534) - 0.148715*(t4751*t6519 + t4756*t6524 + t4763*t6534))*var3[16] + (t4057*t6422 + t4228*t6432 + t4305*t6441 - 0.148715*(t4421*t6422 + t4428*t6432 - 6.5e-11*t4022*t6441) - 0.80315*(-1.000000000016*t4022*t6422 + t4374*t6432 + t4382*t6441) - 0.038576*(t4389*t6422 - 1.000000000049*t4022*t6432 + t4404*t6441))*var3[17] + 5.*t211*t338*var4[5] + 20.*t165*t298*t327*var4[15] - 5.*t211*t338*var4[15] + 30.*t251*t270*t278*var4[25] - 20.*t165*t298*t327*var4[25] + 20.*t197*t208*t224*var4[35] - 30.*t251*t270*t278*var4[35] + 5.*t104*t183*var4[45] - 20.*t197*t208*t224*var4[45] - 5.*t104*t183*var4[55];
  p_output1[6]=var3[1] + (-0.002264*t2190 + 0.00183*t2201 + 0.024028*t2183*t403)*var3[3] + (-0.024028*t1894*t351 + 0.002264*t1894*t403*t422 + 0.00183*t1894*t403*t426)*var3[4] + (-0.002264*t2403 + 0.00183*t2422)*var3[5] + 5.*t211*t338*var4[6] + 20.*t165*t298*t327*var4[16] - 5.*t211*t338*var4[16] + 30.*t251*t270*t278*var4[26] - 20.*t165*t298*t327*var4[26] + 20.*t197*t208*t224*var4[36] - 30.*t251*t270*t278*var4[36] + 5.*t104*t183*var4[46] - 20.*t197*t208*t224*var4[46] - 5.*t104*t183*var4[56];
  p_output1[7]=var3[2] + (-0.002264*t2422 + 0.00183*t2601 + 0.024028*t1894*t403)*var3[3] + (0.024028*t2183*t351 - 0.002264*t2183*t403*t422 - 0.00183*t2183*t403*t426)*var3[4] + (-0.002264*t2201 + 0.00183*t3289)*var3[5] + 5.*t211*t338*var4[7] + 20.*t165*t298*t327*var4[17] - 5.*t211*t338*var4[17] + 30.*t251*t270*t278*var4[27] - 20.*t165*t298*t327*var4[27] + 20.*t197*t208*t224*var4[37] - 30.*t251*t270*t278*var4[37] + 5.*t104*t183*var4[47] - 20.*t197*t208*t224*var4[47] - 5.*t104*t183*var4[57];
  p_output1[8]=t2201*t403*t426*t6809*var3[3] + (-1.*t2403*t351*t426*t6809 + t1894*t6799*t6801*t6809)*var3[4] + (-1.*t2403*t403*t422*t6809 + t2422*t403*t426*t6809)*var3[5] + 5.*t211*t338*var4[8] + 20.*t165*t298*t327*var4[18] - 5.*t211*t338*var4[18] + 30.*t251*t270*t278*var4[28] - 20.*t165*t298*t327*var4[28] + 20.*t197*t208*t224*var4[38] - 30.*t251*t270*t278*var4[38] + 5.*t104*t183*var4[48] - 20.*t197*t208*t224*var4[48] - 5.*t104*t183*var4[58];
  p_output1[9]=(0.15121*(t2601*t6858 + t2422*t6868) - 0.15121*(t2422*t6858 - 1.*t2601*t6868) + t2601*t6873 + 0.15121*(t2601*t6875 + t2422*t6881) - 0.15121*(t2422*t6875 - 1.*t2601*t6881) - 1.*t2601*t6883 + t2422*t6895 - 1.*t2422*t6899)*var3[3] + (0.15121*(-1.*t2183*t403*t426*t6858 + t2183*t403*t422*t6868) - 0.15121*(t2183*t403*t422*t6858 + t2183*t403*t426*t6868) - 1.*t2183*t403*t426*t6873 + 0.15121*(-1.*t2183*t403*t426*t6875 + t2183*t403*t422*t6881) - 0.15121*(t2183*t403*t422*t6875 + t2183*t403*t426*t6881) + t2183*t403*t426*t6883 + t2183*t403*t422*t6895 - 1.*t2183*t403*t422*t6899)*var3[4] + (t3289*t6873 - 1.*t3289*t6883 + t2201*t6895 - 1.*t2201*t6899 + 0.15121*(t2201*t6868 + t6965) - 0.15121*(t2201*t6858 + t6974) + 0.15121*(t2201*t6881 + t7014) - 0.15121*(t2201*t6875 + t7049))*var3[5] + (t3493*(0.15121*t6868 + t6949) + t3289*(t6869 + t6949) + 0.15121*(-1.*t3493*t6868 + t6965) - 0.15121*(-1.*t3493*t6858 + t6974))*var3[9] + (0.15121*(-1.*t3493*t6881 + t7014) - 0.15121*(-1.*t3493*t6875 + t7049) - 1.*t3493*(-0.15121*t6881 + t7060) - 1.*t3289*(t6882 + t7060))*var3[12] + 5.*t211*t338*var4[9] + 20.*t165*t298*t327*var4[19] - 5.*t211*t338*var4[19] + 30.*t251*t270*t278*var4[29] - 20.*t165*t298*t327*var4[29] + 20.*t197*t208*t224*var4[39] - 30.*t251*t270*t278*var4[39] + 5.*t104*t183*var4[49] - 20.*t197*t208*t224*var4[49] - 5.*t104*t183*var4[59];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4,*var5,*var6,*var7;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 7)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Seven input(s) required (var1,var2,var3,var4,var5,var6,var7).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 2 && ncols == 1) && 
      !(mrows == 1 && ncols == 2))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 60 && ncols == 1) && 
      !(mrows == 1 && ncols == 60))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }
  mrows = mxGetM(prhs[4]);
  ncols = mxGetN(prhs[4]);
  if( !mxIsDouble(prhs[4]) || mxIsComplex(prhs[4]) ||
    ( !(mrows == 2 && ncols == 1) && 
      !(mrows == 1 && ncols == 2))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var5 is wrong.");
    }
  mrows = mxGetM(prhs[5]);
  ncols = mxGetN(prhs[5]);
  if( !mxIsDouble(prhs[5]) || mxIsComplex(prhs[5]) ||
    ( !(mrows == 1 && ncols == 1) && 
      !(mrows == 1 && ncols == 1))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var6 is wrong.");
    }
  mrows = mxGetM(prhs[6]);
  ncols = mxGetN(prhs[6]);
  if( !mxIsDouble(prhs[6]) || mxIsComplex(prhs[6]) ||
    ( !(mrows == 1 && ncols == 1) && 
      !(mrows == 1 && ncols == 1))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var7 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
  var5 = mxGetPr(prhs[4]);
  var6 = mxGetPr(prhs[5]);
  var7 = mxGetPr(prhs[6]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 10, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4,var5,var6,var7);


}

#else // MATLAB_MEX_FILE

#include "d1y_position_DiagonalStance1.hh"

namespace DiagonalStance1
{

void d1y_position_DiagonalStance1_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4,const double *var5,const double *var6,const double *var7)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4, var5, var6, var7);

}

}

#endif // MATLAB_MEX_FILE
