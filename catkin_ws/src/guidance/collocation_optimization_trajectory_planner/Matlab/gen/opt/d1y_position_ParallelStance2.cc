/*
 * Automatically Generated from Mathematica.
 * Wed 8 Dec 2021 23:15:34 GMT+01:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4,const double *var5,const double *var6,const double *var7)
{
  double t24;
  double t44;
  double t62;
  double t76;
  double t82;
  double t91;
  double t94;
  double t106;
  double t122;
  double t126;
  double t132;
  double t169;
  double t196;
  double t201;
  double t204;
  double t206;
  double t243;
  double t262;
  double t266;
  double t289;
  double t295;
  double t318;
  double t355;
  double t384;
  double t426;
  double t452;
  double t435;
  double t440;
  double t456;
  double t709;
  double t402;
  double t449;
  double t500;
  double t551;
  double t630;
  double t656;
  double t698;
  double t714;
  double t721;
  double t738;
  double t749;
  double t782;
  double t787;
  double t789;
  double t795;
  double t856;
  double t872;
  double t877;
  double t878;
  double t904;
  double t912;
  double t918;
  double t919;
  double t887;
  double t1167;
  double t1170;
  double t1144;
  double t1158;
  double t1173;
  double t1174;
  double t1183;
  double t1186;
  double t1203;
  double t1206;
  double t1211;
  double t1235;
  double t1237;
  double t1244;
  double t1247;
  double t1248;
  double t1249;
  double t1251;
  double t1303;
  double t1320;
  double t1331;
  double t385;
  double t809;
  double t815;
  double t830;
  double t849;
  double t854;
  double t1363;
  double t1364;
  double t1366;
  double t708;
  double t727;
  double t748;
  double t776;
  double t780;
  double t886;
  double t893;
  double t1369;
  double t1385;
  double t1394;
  double t1396;
  double t1397;
  double t960;
  double t968;
  double t1404;
  double t1405;
  double t1406;
  double t1014;
  double t1028;
  double t1456;
  double t1351;
  double t1352;
  double t1355;
  double t1357;
  double t1359;
  double t1360;
  double t1361;
  double t1362;
  double t1368;
  double t1389;
  double t1402;
  double t1408;
  double t1409;
  double t1412;
  double t1418;
  double t1424;
  double t1428;
  double t1429;
  double t1431;
  double t1434;
  double t1435;
  double t1437;
  double t1443;
  double t1445;
  double t1447;
  double t1449;
  double t1450;
  double t1342;
  double t1347;
  double t1329;
  double t1339;
  double t1475;
  double t1476;
  double t1477;
  double t1479;
  double t1481;
  double t1482;
  double t1484;
  double t1486;
  double t1487;
  double t1490;
  double t1497;
  double t1504;
  double t1512;
  double t1514;
  double t1521;
  double t1524;
  double t1525;
  double t1530;
  double t1466;
  double t1467;
  double t1469;
  double t1470;
  double t1471;
  double t1634;
  double t1649;
  double t1652;
  double t1653;
  double t1664;
  double t1667;
  double t1670;
  double t1672;
  double t1673;
  double t1676;
  double t1682;
  double t1684;
  double t1685;
  double t1686;
  double t1687;
  double t1691;
  double t1695;
  double t1696;
  double t1697;
  double t1772;
  double t1776;
  double t1778;
  double t1779;
  double t1782;
  double t1783;
  double t1784;
  double t1788;
  double t1789;
  double t1791;
  double t1794;
  double t1798;
  double t1803;
  double t1811;
  double t1816;
  double t1826;
  double t1827;
  double t1833;
  double t1835;
  double t1838;
  double t1839;
  double t1846;
  double t1849;
  double t1850;
  double t1851;
  double t1914;
  double t1915;
  double t1916;
  double t1920;
  double t1921;
  double t1923;
  double t1928;
  double t1930;
  double t1932;
  double t1934;
  double t1942;
  double t1951;
  double t1964;
  double t1967;
  double t1969;
  double t1985;
  double t2012;
  double t2017;
  double t2027;
  double t2036;
  double t2037;
  double t1457;
  double t1459;
  double t1461;
  double t2088;
  double t2091;
  double t2093;
  double t2103;
  double t2105;
  double t2108;
  double t2114;
  double t2118;
  double t2119;
  double t2120;
  double t2123;
  double t2124;
  double t2125;
  double t2133;
  double t2135;
  double t2136;
  double t379;
  double t401;
  double t407;
  double t414;
  double t418;
  double t569;
  double t578;
  double t625;
  double t2229;
  double t2231;
  double t2235;
  double t2245;
  double t2246;
  double t2272;
  double t2274;
  double t2276;
  double t2279;
  double t2280;
  double t2284;
  double t2285;
  double t2287;
  double t2288;
  double t1096;
  double t1102;
  double t1129;
  double t1199;
  double t1201;
  double t1227;
  double t1232;
  double t1234;
  double t2318;
  double t2321;
  double t2325;
  double t2330;
  double t2340;
  double t2343;
  double t2351;
  double t2359;
  double t2360;
  double t2363;
  double t2364;
  double t2480;
  double t2481;
  double t2482;
  double t2486;
  double t2489;
  double t2490;
  double t2496;
  double t2498;
  double t2513;
  double t2515;
  double t2523;
  double t2525;
  double t2535;
  double t2541;
  double t2552;
  double t2557;
  double t2559;
  double t2560;
  double t2676;
  double t2678;
  double t2679;
  double t2684;
  double t2687;
  double t2691;
  double t2699;
  double t2702;
  double t2709;
  double t2711;
  double t2717;
  double t2725;
  double t2730;
  double t2736;
  double t2750;
  double t2753;
  double t2755;
  double t2806;
  double t2807;
  double t2818;
  double t2831;
  double t2832;
  double t2837;
  double t2839;
  double t2841;
  double t2842;
  double t2844;
  double t2847;
  double t2849;
  double t2851;
  double t2864;
  double t2866;
  double t2867;
  double t2911;
  double t2912;
  double t2916;
  double t2919;
  double t2920;
  double t2923;
  double t2924;
  double t2927;
  double t2928;
  double t2930;
  double t2931;
  double t2932;
  double t2933;
  double t2962;
  double t2969;
  double t2970;
  double t2972;
  double t2981;
  double t2984;
  double t2998;
  double t3032;
  double t3033;
  double t3039;
  double t3042;
  double t2368;
  double t3237;
  double t3251;
  double t3298;
  double t3301;
  double t3306;
  double t3319;
  double t3349;
  double t3342;
  double t3258;
  double t3344;
  double t3351;
  double t3354;
  double t3312;
  double t3376;
  double t3377;
  double t3379;
  double t3393;
  double t3275;
  double t3428;
  double t3336;
  double t3326;
  double t3330;
  double t3338;
  double t3341;
  double t3356;
  double t3369;
  double t3371;
  double t3382;
  double t3383;
  double t3416;
  double t3425;
  double t3426;
  double t3430;
  double t3433;
  double t3436;
  double t3440;
  double t3443;
  double t3449;
  double t3450;
  double t3268;
  double t3481;
  double t3482;
  double t3486;
  double t3491;
  double t3493;
  double t3497;
  double t3498;
  double t3499;
  double t3513;
  double t3516;
  double t3405;
  double t3527;
  double t3391;
  double t3464;
  double t3534;
  double t3453;
  double t3567;
  double t3621;
  double t3689;
  double t3638;
  double t3646;
  double t3703;
  double t3706;
  double t3611;
  double t3697;
  double t3740;
  double t3792;
  double t3670;
  double t3718;
  double t3720;
  double t3722;
  double t3723;
  double t3726;
  double t3727;
  double t3780;
  double t3784;
  double t3789;
  double t3795;
  double t3797;
  double t3799;
  double t3825;
  double t3826;
  double t3827;
  double t3828;
  double t3829;
  double t3831;
  double t3845;
  double t3743;
  double t3863;
  double t3833;
  double t3928;
  double t3929;
  double t3930;
  double t3950;
  double t3688;
  double t3692;
  double t3698;
  double t3700;
  double t3708;
  double t3709;
  double t3710;
  double t3980;
  double t3981;
  double t3986;
  double t3733;
  double t3737;
  double t3754;
  double t3755;
  double t3757;
  double t3760;
  double t3765;
  double t3807;
  double t3808;
  double t3813;
  double t3814;
  double t3816;
  double t3818;
  double t3822;
  double t3840;
  double t3990;
  double t3994;
  double t4000;
  double t3846;
  double t4004;
  double t4006;
  double t4014;
  double t3850;
  double t3855;
  double t4024;
  double t4025;
  double t4026;
  double t3866;
  double t3870;
  double t3872;
  double t3885;
  double t3907;
  double t3909;
  double t3912;
  double t3914;
  double t3938;
  double t3946;
  double t3949;
  double t3952;
  double t3954;
  double t3955;
  double t3956;
  double t3957;
  double t3958;
  double t3959;
  double t3961;
  double t3962;
  double t3967;
  double t3969;
  double t3970;
  double t3972;
  double t3973;
  double t3975;
  double t3976;
  double t3989;
  double t4002;
  double t4015;
  double t4028;
  double t4031;
  double t4033;
  double t4037;
  double t4041;
  double t4045;
  double t4046;
  double t4048;
  double t4049;
  double t4050;
  double t4052;
  double t4053;
  double t4054;
  double t4064;
  double t4067;
  double t4070;
  double t3939;
  double t3933;
  double t3935;
  double t4149;
  double t4150;
  double t4151;
  double t4157;
  double t4158;
  double t4160;
  double t4165;
  double t4167;
  double t4169;
  double t4171;
  double t4173;
  double t4177;
  double t4179;
  double t4180;
  double t4183;
  double t4190;
  double t4192;
  double t4194;
  double t4113;
  double t4117;
  double t4125;
  double t4129;
  double t4131;
  double t4132;
  double t4140;
  double t4279;
  double t4280;
  double t4283;
  double t4294;
  double t4295;
  double t4296;
  double t4301;
  double t4303;
  double t4306;
  double t4309;
  double t4312;
  double t4317;
  double t4318;
  double t4319;
  double t4322;
  double t4323;
  double t4324;
  double t4325;
  double t4376;
  double t4381;
  double t4382;
  double t4391;
  double t4395;
  double t4405;
  double t4417;
  double t4418;
  double t4419;
  double t4424;
  double t4427;
  double t4435;
  double t4439;
  double t4442;
  double t4452;
  double t4457;
  double t4458;
  double t4463;
  double t4513;
  double t4514;
  double t4515;
  double t4533;
  double t4534;
  double t4536;
  double t4539;
  double t4540;
  double t4541;
  double t4543;
  double t4544;
  double t4545;
  double t4547;
  double t4548;
  double t4550;
  double t4085;
  double t4093;
  double t4099;
  double t4101;
  double t4586;
  double t4587;
  double t4590;
  double t4592;
  double t4596;
  double t4597;
  double t4599;
  double t4601;
  double t4604;
  double t4605;
  double t4608;
  double t4609;
  double t4614;
  double t3259;
  double t3262;
  double t3278;
  double t3283;
  double t3293;
  double t3294;
  double t3396;
  double t3398;
  double t3408;
  double t3409;
  double t3414;
  double t3415;
  double t4642;
  double t4643;
  double t4645;
  double t3457;
  double t3459;
  double t3466;
  double t3471;
  double t3474;
  double t3478;
  double t4640;
  double t4641;
  double t4646;
  double t4648;
  double t3532;
  double t4650;
  double t4652;
  double t4654;
  double t4655;
  double t3542;
  double t4657;
  double t4658;
  double t4659;
  double t4661;
  double t3554;
  double t3570;
  double t3583;
  double t3588;
  double t3612;
  double t3615;
  double t3625;
  double t3627;
  double t3629;
  double t3630;
  double t3639;
  double t3642;
  double t3649;
  double t3656;
  double t3662;
  double t3663;
  double t3666;
  double t3667;
  double t3672;
  double t3675;
  double t3682;
  double t3683;
  double t4758;
  double t4763;
  double t4766;
  double t4778;
  double t4790;
  double t4791;
  double t4793;
  double t4796;
  double t4799;
  double t4801;
  double t4804;
  double t4805;
  double t4911;
  double t4913;
  double t4916;
  double t4919;
  double t4925;
  double t4929;
  double t4932;
  double t4934;
  double t4936;
  double t4938;
  double t4945;
  double t4947;
  double t4948;
  double t4952;
  double t4965;
  double t4969;
  double t4971;
  double t4972;
  double t5049;
  double t5065;
  double t5066;
  double t5072;
  double t5075;
  double t5086;
  double t5092;
  double t5093;
  double t5095;
  double t5098;
  double t5100;
  double t5126;
  double t5128;
  double t5140;
  double t5188;
  double t5189;
  double t5191;
  double t5192;
  double t5194;
  double t5195;
  double t5196;
  double t5198;
  double t5199;
  double t5201;
  double t5210;
  double t5213;
  double t5218;
  double t5278;
  double t5279;
  double t5281;
  double t5275;
  double t5276;
  double t5282;
  double t5283;
  double t5289;
  double t5290;
  double t5295;
  double t5296;
  double t5298;
  double t5299;
  double t5300;
  double t5301;
  double t5351;
  double t5352;
  double t5356;
  double t5357;
  double t5365;
  double t5367;
  double t5371;
  double t5372;
  double t5374;
  double t5388;
  double t5391;
  double t5392;
  double t5755;
  double t5756;
  double t5759;
  double t5761;
  double t5762;
  double t5763;
  double t2475;
  double t2478;
  double t2823;
  double t2827;
  double t2671;
  double t2681;
  double t3119;
  double t3127;
  t24 = -1.*var5[0];
  t44 = t24 + var5[1];
  t62 = Power(t44,-5);
  t76 = -1. + var6[0];
  t82 = -1. + var7[0];
  t91 = 1/t82;
  t94 = -1.*var1[0];
  t106 = t94 + var1[1];
  t122 = t76*t91*t106;
  t126 = t24 + var1[0] + t122;
  t132 = Power(t126,4);
  t169 = Power(t44,-4);
  t196 = Power(t126,3);
  t201 = 1/t44;
  t204 = -1.*t201*t126;
  t206 = 1. + t204;
  t243 = Power(t44,-3);
  t262 = Power(t126,2);
  t266 = Power(t206,2);
  t289 = Power(t44,-2);
  t295 = Power(t206,3);
  t318 = Power(t206,4);
  t355 = Cos(var2[10]);
  t384 = Sin(var2[10]);
  t426 = Cos(var2[4]);
  t452 = Cos(var2[9]);
  t435 = Cos(var2[5]);
  t440 = Sin(var2[9]);
  t456 = Sin(var2[5]);
  t709 = Cos(var2[11]);
  t402 = Sin(var2[4]);
  t449 = -1.*t426*t435*t440;
  t500 = -1.*t452*t426*t456;
  t551 = t449 + t500;
  t630 = t452*t426*t435;
  t656 = -1.*t426*t440*t456;
  t698 = t630 + t656;
  t714 = -1.*t709;
  t721 = 1. + t714;
  t738 = -1. + t709;
  t749 = Sin(var2[11]);
  t782 = -1.*t384*t402;
  t787 = 4.e-6*t384*t551;
  t789 = -1.*t355*t698;
  t795 = t782 + t787 + t789;
  t856 = 4.e-6*t384*t402;
  t872 = -1.6e-11*t384*t551;
  t877 = 4.e-6*t355*t698;
  t878 = t856 + t872 + t877;
  t904 = t355*t402;
  t912 = -4.e-6*t355*t551;
  t918 = -1.000000000016*t384*t698;
  t919 = t904 + t912 + t918;
  t887 = -0.0398890000006382*t749;
  t1167 = -1.*t355;
  t1170 = 1. + t1167;
  t1144 = t384*t402;
  t1158 = -4.e-6*t384*t551;
  t1173 = -1.000000000016*t1170;
  t1174 = 1. + t1173;
  t1183 = t1174*t698;
  t1186 = t1144 + t1158 + t1183;
  t1203 = 4.e-6*t1170*t551;
  t1206 = -1.*t384*t698;
  t1211 = t904 + t1203 + t1206;
  t1235 = 4.e-6*t1170*t402;
  t1237 = -1. + t355;
  t1244 = 1.6e-11*t1237;
  t1247 = 1. + t1244;
  t1248 = t1247*t551;
  t1249 = 4.e-6*t384*t698;
  t1251 = t1235 + t1248 + t1249;
  t1303 = -1.*t452;
  t1320 = 1. + t1303;
  t1331 = -0.15121*t440;
  t385 = -0.03874900000062*t384;
  t809 = -1.26e-8*var2[11];
  t815 = 2.552896e-18*t721;
  t830 = -1.59556e-7*t738;
  t849 = 2.012600000032e-6*t749;
  t854 = t809 + t815 + t830 + t849;
  t1363 = -1.*t452*t426*t435;
  t1364 = t426*t440*t456;
  t1366 = t1363 + t1364;
  t708 = -5.04e-14*var2[11];
  t727 = -0.039889*t721;
  t748 = 6.38224e-13*t738;
  t776 = -0.503150000008*t749;
  t780 = t708 + t727 + t748 + t776;
  t886 = 0.50315000001605*t721;
  t893 = t886 + t887;
  t1369 = t1247*t1366;
  t1385 = t787 + t1369;
  t1394 = -1.*t384*t551;
  t1396 = 4.e-6*t1170*t1366;
  t1397 = t1394 + t1396;
  t960 = -1.000000000016*t721;
  t968 = 1. + t960;
  t1404 = t1174*t551;
  t1405 = -4.e-6*t384*t1366;
  t1406 = t1404 + t1405;
  t1014 = 1.6e-11*t738;
  t1028 = 1. + t1014;
  t1456 = -0.15121*t452;
  t1351 = 0.281210000008499*t1170;
  t1352 = t1351 + t385;
  t1355 = t1352*t551;
  t1357 = -1.2484e-7*var2[10];
  t1359 = 2.479936e-18*t1170;
  t1360 = -1.54996e-7*t1237;
  t1361 = 1.124840000016e-6*t384;
  t1362 = t1357 + t1359 + t1360 + t1361;
  t1368 = t1362*t1366;
  t1389 = t854*t1385;
  t1402 = t780*t1397;
  t1408 = t893*t1406;
  t1409 = -4.e-6*t749*t1385;
  t1412 = t749*t1397;
  t1418 = t968*t1406;
  t1424 = t1409 + t1412 + t1418;
  t1428 = 0.803147*t1424;
  t1429 = 4.e-6*t721*t1385;
  t1431 = t709*t1397;
  t1434 = -1.*t749*t1406;
  t1435 = t1429 + t1431 + t1434;
  t1437 = -0.041195*t1435;
  t1443 = t1028*t1385;
  t1445 = 4.e-6*t721*t1397;
  t1447 = 4.e-6*t749*t1406;
  t1449 = t1443 + t1445 + t1447;
  t1450 = -0.14871*t1449;
  t1342 = 0.15121*t1320;
  t1347 = t1342 + t1331;
  t1329 = -0.15121*t1320;
  t1339 = t1329 + t1331;
  t1475 = t435*t440*t402;
  t1476 = t452*t402*t456;
  t1477 = t1475 + t1476;
  t1479 = -1.*t452*t435*t402;
  t1481 = t440*t402*t456;
  t1482 = t1479 + t1481;
  t1484 = t426*t384;
  t1486 = -4.e-6*t384*t1477;
  t1487 = t1174*t1482;
  t1490 = t1484 + t1486 + t1487;
  t1497 = t355*t426;
  t1504 = 4.e-6*t1170*t1477;
  t1512 = -1.*t384*t1482;
  t1514 = t1497 + t1504 + t1512;
  t1521 = 4.e-6*t1170*t426;
  t1524 = t1247*t1477;
  t1525 = 4.e-6*t384*t1482;
  t1530 = t1521 + t1524 + t1525;
  t1466 = -4.9936e-13*var2[10];
  t1467 = -0.038749*t1170;
  t1469 = 6.19984e-13*t1237;
  t1470 = -0.281210000004*t384;
  t1471 = t1466 + t1467 + t1469 + t1470;
  t1634 = Sin(var2[3]);
  t1649 = -1.*t426*t435*t440*t1634;
  t1652 = -1.*t452*t426*t1634*t456;
  t1653 = t1649 + t1652;
  t1664 = t452*t426*t435*t1634;
  t1667 = -1.*t426*t440*t1634*t456;
  t1670 = t1664 + t1667;
  t1672 = t384*t1634*t402;
  t1673 = -4.e-6*t384*t1653;
  t1676 = t1174*t1670;
  t1682 = t1672 + t1673 + t1676;
  t1684 = t355*t1634*t402;
  t1685 = 4.e-6*t1170*t1653;
  t1686 = -1.*t384*t1670;
  t1687 = t1684 + t1685 + t1686;
  t1691 = 4.e-6*t1170*t1634*t402;
  t1695 = t1247*t1653;
  t1696 = 4.e-6*t384*t1670;
  t1697 = t1691 + t1695 + t1696;
  t1772 = Cos(var2[3]);
  t1776 = t1772*t435*t402;
  t1778 = -1.*t1634*t456;
  t1779 = t1776 + t1778;
  t1782 = -1.*t435*t1634;
  t1783 = -1.*t1772*t402*t456;
  t1784 = t1782 + t1783;
  t1788 = -1.*t440*t1779;
  t1789 = t452*t1784;
  t1791 = t1788 + t1789;
  t1794 = t452*t1779;
  t1798 = t440*t1784;
  t1803 = t1794 + t1798;
  t1811 = -1.*t1772*t426*t384;
  t1816 = -4.e-6*t384*t1791;
  t1826 = t1174*t1803;
  t1827 = t1811 + t1816 + t1826;
  t1833 = -1.*t355*t1772*t426;
  t1835 = 4.e-6*t1170*t1791;
  t1838 = -1.*t384*t1803;
  t1839 = t1833 + t1835 + t1838;
  t1846 = -4.e-6*t1170*t1772*t426;
  t1849 = t1247*t1791;
  t1850 = 4.e-6*t384*t1803;
  t1851 = t1846 + t1849 + t1850;
  t1914 = -1.*t435*t1634*t402;
  t1915 = -1.*t1772*t456;
  t1916 = t1914 + t1915;
  t1920 = t1772*t435;
  t1921 = -1.*t1634*t402*t456;
  t1923 = t1920 + t1921;
  t1928 = t440*t1916;
  t1930 = t452*t1923;
  t1932 = t1928 + t1930;
  t1934 = t452*t1916;
  t1942 = -1.*t440*t1923;
  t1951 = t1934 + t1942;
  t1964 = 4.e-6*t384*t1932;
  t1967 = t1247*t1951;
  t1969 = t1964 + t1967;
  t1985 = -1.*t384*t1932;
  t2012 = 4.e-6*t1170*t1951;
  t2017 = t1985 + t2012;
  t2027 = t1174*t1932;
  t2036 = -4.e-6*t384*t1951;
  t2037 = t2027 + t2036;
  t1457 = 0.15121*t440;
  t1459 = t1456 + t1457;
  t1461 = t1456 + t1331;
  t2088 = t435*t1634*t402;
  t2091 = t1772*t456;
  t2093 = t2088 + t2091;
  t2103 = -1.*t440*t2093;
  t2105 = t2103 + t1930;
  t2108 = -1.*t452*t2093;
  t2114 = t2108 + t1942;
  t2118 = 4.e-6*t384*t2105;
  t2119 = t1247*t2114;
  t2120 = t2118 + t2119;
  t2123 = -1.*t384*t2105;
  t2124 = 4.e-6*t1170*t2114;
  t2125 = t2123 + t2124;
  t2133 = t1174*t2105;
  t2135 = -4.e-6*t384*t2114;
  t2136 = t2133 + t2135;
  t379 = -0.281210000004*t355;
  t401 = -4.9936e-13 + t379 + t385;
  t407 = 1.124840000016e-6*t355;
  t414 = 1.5499600000248e-7*t384;
  t418 = -1.2484e-7 + t407 + t414;
  t569 = -0.03874900000062*t355;
  t578 = 0.281210000008499*t384;
  t625 = t569 + t578;
  t2229 = t452*t2093;
  t2231 = t440*t1923;
  t2235 = t2229 + t2231;
  t2245 = t426*t384*t1634;
  t2246 = -1.*t355*t2235;
  t2272 = t2245 + t2118 + t2246;
  t2274 = -4.e-6*t426*t384*t1634;
  t2276 = -1.6e-11*t384*t2105;
  t2279 = 4.e-6*t355*t2235;
  t2280 = t2274 + t2276 + t2279;
  t2284 = -1.*t355*t426*t1634;
  t2285 = -4.e-6*t355*t2105;
  t2287 = -1.000000000016*t384*t2235;
  t2288 = t2284 + t2285 + t2287;
  t1096 = -0.0398890000006382*t709;
  t1102 = 0.50315000001605*t749;
  t1129 = t1096 + t1102;
  t1199 = -0.503150000008*t709;
  t1201 = -5.04e-14 + t1199 + t887;
  t1227 = 2.012600000032e-6*t709;
  t1232 = 1.59556000002553e-7*t749;
  t1234 = -1.26e-8 + t1227 + t1232;
  t2318 = -1.*t426*t384*t1634;
  t2321 = -4.e-6*t384*t2105;
  t2325 = t1174*t2235;
  t2330 = t2318 + t2321 + t2325;
  t2340 = 4.e-6*t1170*t2105;
  t2343 = -1.*t384*t2235;
  t2351 = t2284 + t2340 + t2343;
  t2359 = -4.e-6*t1170*t426*t1634;
  t2360 = t1247*t2105;
  t2363 = 4.e-6*t384*t2235;
  t2364 = t2359 + t2360 + t2363;
  t2480 = t1772*t426*t435*t440;
  t2481 = t452*t1772*t426*t456;
  t2482 = t2480 + t2481;
  t2486 = -1.*t452*t1772*t426*t435;
  t2489 = t1772*t426*t440*t456;
  t2490 = t2486 + t2489;
  t2496 = -1.*t1772*t384*t402;
  t2498 = -4.e-6*t384*t2482;
  t2513 = t1174*t2490;
  t2515 = t2496 + t2498 + t2513;
  t2523 = -1.*t355*t1772*t402;
  t2525 = 4.e-6*t1170*t2482;
  t2535 = -1.*t384*t2490;
  t2541 = t2523 + t2525 + t2535;
  t2552 = -4.e-6*t1170*t1772*t402;
  t2557 = t1247*t2482;
  t2559 = 4.e-6*t384*t2490;
  t2560 = t2552 + t2557 + t2559;
  t2676 = t435*t1634;
  t2678 = t1772*t402*t456;
  t2679 = t2676 + t2678;
  t2684 = t440*t1779;
  t2687 = t452*t2679;
  t2691 = t2684 + t2687;
  t2699 = -1.*t440*t2679;
  t2702 = t1794 + t2699;
  t2709 = 4.e-6*t384*t2691;
  t2711 = t1247*t2702;
  t2717 = t2709 + t2711;
  t2725 = -1.*t384*t2691;
  t2730 = 4.e-6*t1170*t2702;
  t2736 = t2725 + t2730;
  t2750 = t1174*t2691;
  t2753 = -4.e-6*t384*t2702;
  t2755 = t2750 + t2753;
  t2806 = -1.*t1772*t435*t402;
  t2807 = t1634*t456;
  t2818 = t2806 + t2807;
  t2831 = -1.*t440*t2818;
  t2832 = t2831 + t2687;
  t2837 = -1.*t452*t2818;
  t2839 = t2837 + t2699;
  t2841 = 4.e-6*t384*t2832;
  t2842 = t1247*t2839;
  t2844 = t2841 + t2842;
  t2847 = -1.*t384*t2832;
  t2849 = 4.e-6*t1170*t2839;
  t2851 = t2847 + t2849;
  t2864 = t1174*t2832;
  t2866 = -4.e-6*t384*t2839;
  t2867 = t2864 + t2866;
  t2911 = t452*t2818;
  t2912 = t440*t2679;
  t2916 = t2911 + t2912;
  t2919 = -1.*t355*t2916;
  t2920 = t1811 + t2841 + t2919;
  t2923 = 4.e-6*t1772*t426*t384;
  t2924 = -1.6e-11*t384*t2832;
  t2927 = 4.e-6*t355*t2916;
  t2928 = t2923 + t2924 + t2927;
  t2930 = t355*t1772*t426;
  t2931 = -4.e-6*t355*t2832;
  t2932 = -1.000000000016*t384*t2916;
  t2933 = t2930 + t2931 + t2932;
  t2962 = t1772*t426*t384;
  t2969 = -4.e-6*t384*t2832;
  t2970 = t1174*t2916;
  t2972 = t2962 + t2969 + t2970;
  t2981 = 4.e-6*t1170*t2832;
  t2984 = -1.*t384*t2916;
  t2998 = t2930 + t2981 + t2984;
  t3032 = 4.e-6*t1170*t1772*t426;
  t3033 = t1247*t2832;
  t3039 = 4.e-6*t384*t2916;
  t3042 = t3032 + t3033 + t3039;
  t2368 = t709*t2351;
  t3237 = Cos(var2[17]);
  t3251 = Sin(var2[17]);
  t3298 = Cos(var2[16]);
  t3301 = -1.*t3298;
  t3306 = 1. + t3301;
  t3319 = Sin(var2[16]);
  t3349 = Cos(var2[15]);
  t3342 = Sin(var2[15]);
  t3258 = 2.8e-11*t3251;
  t3344 = -1.*t426*t435*t3342;
  t3351 = -1.*t3349*t426*t456;
  t3354 = t3344 + t3351;
  t3312 = -2.8e-11*t3306;
  t3376 = t3349*t426*t435;
  t3377 = -1.*t426*t3342*t456;
  t3379 = t3376 + t3377;
  t3393 = -4.e-6*t3251;
  t3275 = 7.e-6*t3251;
  t3428 = 4.e-6*t3306;
  t3336 = -7.e-6*t3306;
  t3326 = t3312 + t3319;
  t3330 = t3326*t402;
  t3338 = -4.e-6*t3319;
  t3341 = t3336 + t3338;
  t3356 = t3341*t3354;
  t3369 = -1.000000000016*t3306;
  t3371 = 1. + t3369;
  t3382 = t3371*t3379;
  t3383 = t3330 + t3356 + t3382;
  t3416 = -1.000000000049*t3306;
  t3425 = 1. + t3416;
  t3426 = t3425*t402;
  t3430 = -7.e-6*t3319;
  t3433 = t3428 + t3430;
  t3436 = t3433*t3354;
  t3440 = -1.*t3319;
  t3443 = t3312 + t3440;
  t3449 = t3443*t3379;
  t3450 = t3426 + t3436 + t3449;
  t3268 = -4.e-6*t3237;
  t3481 = 7.e-6*t3319;
  t3482 = t3428 + t3481;
  t3486 = t3482*t402;
  t3491 = -6.5e-11*t3306;
  t3493 = 1. + t3491;
  t3497 = t3493*t3354;
  t3498 = 4.e-6*t3319;
  t3499 = t3336 + t3498;
  t3513 = t3499*t3379;
  t3516 = t3486 + t3497 + t3513;
  t3405 = -1.*t3237;
  t3527 = -2.8e-11*t3251;
  t3391 = -7.e-6*t3237;
  t3464 = 4.e-6*t3237;
  t3534 = -7.e-6*t3251;
  t3453 = 7.e-6*t3237;
  t3567 = 4.e-6*t3251;
  t3621 = 2.8e-11*t3319;
  t3689 = 1. + t3405;
  t3638 = 7.e-6*t3298;
  t3646 = 4.e-6*t3298;
  t3703 = -1. + t3237;
  t3706 = 4.e-6*t3703;
  t3611 = -7.e-6*t3298;
  t3697 = 7.e-6*t3689;
  t3740 = 2.8e-11*t3689;
  t3792 = -2.8e-11*t3319;
  t3670 = -4.e-6*t3298;
  t3718 = t3638 + t3498;
  t3720 = t3718*t402;
  t3722 = -6.5e-11*t3319*t3354;
  t3723 = t3646 + t3430;
  t3726 = t3723*t3379;
  t3727 = t3720 + t3722 + t3726;
  t3780 = -1.000000000049*t3319*t402;
  t3784 = t3611 + t3498;
  t3789 = t3784*t3354;
  t3795 = t3301 + t3792;
  t3797 = t3795*t3379;
  t3799 = t3780 + t3789 + t3797;
  t3825 = t3298 + t3792;
  t3826 = t3825*t402;
  t3827 = t3670 + t3430;
  t3828 = t3827*t3354;
  t3829 = -1.000000000016*t3319*t3379;
  t3831 = t3826 + t3828 + t3829;
  t3845 = -2.8e-11*t3689;
  t3743 = -1.*t3251;
  t3863 = 4.e-6*t3689;
  t3833 = -7.e-6*t3689;
  t3928 = -1.*t3349;
  t3929 = 1. + t3928;
  t3930 = -0.15121*t3929;
  t3950 = 7.e-6*t3306;
  t3688 = 2.826290000000002e-7*var2[17];
  t3692 = -2.18904205e-16*t3689;
  t3698 = t3697 + t3567;
  t3700 = -0.5031510000080001*t3698;
  t3708 = t3706 + t3275;
  t3709 = -0.038575000014*t3708;
  t3710 = t3688 + t3692 + t3700 + t3709;
  t3980 = -1.*t3349*t426*t435;
  t3981 = t426*t3342*t456;
  t3986 = t3980 + t3981;
  t3733 = 1.1305160000000008e-12*var2[17];
  t3737 = -0.03857500001589017*t3689;
  t3754 = t3740 + t3743;
  t3755 = -0.5031510000080001*t3754;
  t3757 = t3706 + t3534;
  t3760 = -3.367757e-6*t3757;
  t3765 = t3733 + t3737 + t3755 + t3760;
  t3807 = -1.9784030000000015e-12*var2[17];
  t3808 = -0.5031510000160505*t3689;
  t3813 = t3697 + t3393;
  t3814 = -3.367757e-6*t3813;
  t3816 = t3740 + t3251;
  t3818 = -0.038575000014*t3816;
  t3822 = t3807 + t3808 + t3814 + t3818;
  t3840 = t3833 + t3393;
  t3990 = t3499*t3354;
  t3994 = t3493*t3986;
  t4000 = t3990 + t3994;
  t3846 = t3845 + t3251;
  t4004 = t3443*t3354;
  t4006 = t3433*t3986;
  t4014 = t4004 + t4006;
  t3850 = -1.000000000016*t3689;
  t3855 = 1. + t3850;
  t4024 = t3371*t3354;
  t4025 = t3341*t3986;
  t4026 = t4024 + t4025;
  t3866 = t3863 + t3534;
  t3870 = -1.000000000049*t3689;
  t3872 = 1. + t3870;
  t3885 = t3845 + t3743;
  t3907 = -6.5e-11*t3689;
  t3909 = 1. + t3907;
  t3912 = t3863 + t3275;
  t3914 = t3833 + t3567;
  t3938 = -0.15121*t3342;
  t3946 = -2.7726089999999997e-12*var2[16];
  t3949 = -0.2812110000084994*t3306;
  t3952 = t3950 + t3338;
  t3954 = -1.8134809999999998e-6*t3952;
  t3955 = 2.8e-11*t3306;
  t3956 = t3955 + t3319;
  t3957 = -0.038749000006999997*t3956;
  t3958 = t3946 + t3949 + t3954 + t3957;
  t3959 = t3958*t3354;
  t3961 = 3.9608699999999997e-7*var2[16];
  t3962 = -1.1787626499999999e-16*t3306;
  t3967 = t3950 + t3498;
  t3969 = -0.281211000004*t3967;
  t3970 = -1. + t3298;
  t3972 = 4.e-6*t3970;
  t3973 = t3972 + t3481;
  t3975 = -0.038749000006999997*t3973;
  t3976 = t3961 + t3962 + t3969 + t3975;
  t3989 = t3976*t3986;
  t4002 = t3710*t4000;
  t4015 = t3765*t4014;
  t4028 = t3822*t4026;
  t4031 = t3840*t4000;
  t4033 = t3846*t4014;
  t4037 = t3855*t4026;
  t4041 = t4031 + t4033 + t4037;
  t4045 = -0.80315*t4041;
  t4046 = t3866*t4000;
  t4048 = t3872*t4014;
  t4049 = t3885*t4026;
  t4050 = t4046 + t4048 + t4049;
  t4052 = -0.038576*t4050;
  t4053 = t3909*t4000;
  t4054 = t3912*t4014;
  t4064 = t3914*t4026;
  t4067 = t4053 + t4054 + t4064;
  t4070 = -0.148715*t4067;
  t3939 = t3930 + t3938;
  t3933 = 0.15121*t3342;
  t3935 = t3930 + t3933;
  t4149 = t435*t3342*t402;
  t4150 = t3349*t402*t456;
  t4151 = t4149 + t4150;
  t4157 = -1.*t3349*t435*t402;
  t4158 = t3342*t402*t456;
  t4160 = t4157 + t4158;
  t4165 = t426*t3326;
  t4167 = t3341*t4151;
  t4169 = t3371*t4160;
  t4171 = t4165 + t4167 + t4169;
  t4173 = t3425*t426;
  t4177 = t3433*t4151;
  t4179 = t3443*t4160;
  t4180 = t4173 + t4177 + t4179;
  t4183 = t426*t3482;
  t4190 = t3493*t4151;
  t4192 = t3499*t4160;
  t4194 = t4183 + t4190 + t4192;
  t4113 = 1.5843479999999999e-12*var2[16];
  t4117 = -0.03874900000889869*t3306;
  t4125 = t3955 + t3440;
  t4129 = -0.281211000004*t4125;
  t4131 = t3972 + t3430;
  t4132 = -1.8134809999999998e-6*t4131;
  t4140 = t4113 + t4117 + t4129 + t4132;
  t4279 = -1.*t426*t435*t3342*t1634;
  t4280 = -1.*t3349*t426*t1634*t456;
  t4283 = t4279 + t4280;
  t4294 = t3349*t426*t435*t1634;
  t4295 = -1.*t426*t3342*t1634*t456;
  t4296 = t4294 + t4295;
  t4301 = t3326*t1634*t402;
  t4303 = t3341*t4283;
  t4306 = t3371*t4296;
  t4309 = t4301 + t4303 + t4306;
  t4312 = t3425*t1634*t402;
  t4317 = t3433*t4283;
  t4318 = t3443*t4296;
  t4319 = t4312 + t4317 + t4318;
  t4322 = t3482*t1634*t402;
  t4323 = t3493*t4283;
  t4324 = t3499*t4296;
  t4325 = t4322 + t4323 + t4324;
  t4376 = -1.*t3342*t1779;
  t4381 = t3349*t1784;
  t4382 = t4376 + t4381;
  t4391 = t3349*t1779;
  t4395 = t3342*t1784;
  t4405 = t4391 + t4395;
  t4417 = -1.*t1772*t426*t3326;
  t4418 = t3341*t4382;
  t4419 = t3371*t4405;
  t4424 = t4417 + t4418 + t4419;
  t4427 = -1.*t3425*t1772*t426;
  t4435 = t3433*t4382;
  t4439 = t3443*t4405;
  t4442 = t4427 + t4435 + t4439;
  t4452 = -1.*t1772*t426*t3482;
  t4457 = t3493*t4382;
  t4458 = t3499*t4405;
  t4463 = t4452 + t4457 + t4458;
  t4513 = t3342*t1916;
  t4514 = t3349*t1923;
  t4515 = t4513 + t4514;
  t4533 = t3349*t1916;
  t4534 = -1.*t3342*t1923;
  t4536 = t4533 + t4534;
  t4539 = t3499*t4515;
  t4540 = t3493*t4536;
  t4541 = t4539 + t4540;
  t4543 = t3443*t4515;
  t4544 = t3433*t4536;
  t4545 = t4543 + t4544;
  t4547 = t3371*t4515;
  t4548 = t3341*t4536;
  t4550 = t4547 + t4548;
  t4085 = -0.15121*t3349;
  t4093 = t4085 + t3938;
  t4099 = 0.15121*t3349;
  t4101 = t4099 + t3938;
  t4586 = -1.*t3342*t2093;
  t4587 = t4586 + t4514;
  t4590 = -1.*t3349*t2093;
  t4592 = t4590 + t4534;
  t4596 = t3499*t4587;
  t4597 = t3493*t4592;
  t4599 = t4596 + t4597;
  t4601 = t3443*t4587;
  t4604 = t3433*t4592;
  t4605 = t4601 + t4604;
  t4608 = t3371*t4587;
  t4609 = t3341*t4592;
  t4614 = t4608 + t4609;
  t3259 = t3237 + t3258;
  t3262 = -0.038575000014*t3259;
  t3278 = t3268 + t3275;
  t3283 = -3.367757e-6*t3278;
  t3293 = -0.5031510000160505*t3251;
  t3294 = -1.9784030000000015e-12 + t3262 + t3283 + t3293;
  t3396 = t3391 + t3393;
  t3398 = -3.367757e-6*t3396;
  t3408 = t3405 + t3258;
  t3409 = -0.5031510000080001*t3408;
  t3414 = -0.03857500001589017*t3251;
  t3415 = 1.1305160000000008e-12 + t3398 + t3409 + t3414;
  t4642 = t3349*t2093;
  t4643 = t3342*t1923;
  t4645 = t4642 + t4643;
  t3457 = t3453 + t3393;
  t3459 = -0.038575000014*t3457;
  t3466 = t3464 + t3275;
  t3471 = -0.5031510000080001*t3466;
  t3474 = -2.18904205e-16*t3251;
  t3478 = 2.826290000000002e-7 + t3459 + t3471 + t3474;
  t4640 = -1.*t426*t3326*t1634;
  t4641 = t3341*t4587;
  t4646 = t3371*t4645;
  t4648 = t4640 + t4641 + t4646;
  t3532 = t3237 + t3527;
  t4650 = -1.*t3425*t426*t1634;
  t4652 = t3433*t4587;
  t4654 = t3443*t4645;
  t4655 = t4650 + t4652 + t4654;
  t3542 = t3268 + t3534;
  t4657 = -1.*t426*t3482*t1634;
  t4658 = t3493*t4587;
  t4659 = t3499*t4645;
  t4661 = t4657 + t4658 + t4659;
  t3554 = t3405 + t3527;
  t3570 = t3391 + t3567;
  t3583 = t3464 + t3534;
  t3588 = t3453 + t3567;
  t3612 = t3611 + t3338;
  t3615 = -1.8134809999999998e-6*t3612;
  t3625 = t3301 + t3621;
  t3627 = -0.281211000004*t3625;
  t3629 = -0.03874900000889869*t3319;
  t3630 = 1.5843479999999999e-12 + t3615 + t3627 + t3629;
  t3639 = t3638 + t3338;
  t3642 = -0.038749000006999997*t3639;
  t3649 = t3646 + t3481;
  t3656 = -0.281211000004*t3649;
  t3662 = -1.1787626499999999e-16*t3319;
  t3663 = 3.9608699999999997e-7 + t3642 + t3656 + t3662;
  t3666 = t3298 + t3621;
  t3667 = -0.038749000006999997*t3666;
  t3672 = t3670 + t3481;
  t3675 = -1.8134809999999998e-6*t3672;
  t3682 = -0.2812110000084994*t3319;
  t3683 = -2.7726089999999997e-12 + t3667 + t3675 + t3682;
  t4758 = -1.*t426*t3718*t1634;
  t4763 = -6.5e-11*t3319*t4587;
  t4766 = t3723*t4645;
  t4778 = t4758 + t4763 + t4766;
  t4790 = 1.000000000049*t426*t3319*t1634;
  t4791 = t3784*t4587;
  t4793 = t3795*t4645;
  t4796 = t4790 + t4791 + t4793;
  t4799 = -1.*t426*t3825*t1634;
  t4801 = t3827*t4587;
  t4804 = -1.000000000016*t3319*t4645;
  t4805 = t4799 + t4801 + t4804;
  t4911 = t1772*t426*t435*t3342;
  t4913 = t3349*t1772*t426*t456;
  t4916 = t4911 + t4913;
  t4919 = -1.*t3349*t1772*t426*t435;
  t4925 = t1772*t426*t3342*t456;
  t4929 = t4919 + t4925;
  t4932 = -1.*t1772*t3326*t402;
  t4934 = t3341*t4916;
  t4936 = t3371*t4929;
  t4938 = t4932 + t4934 + t4936;
  t4945 = -1.*t3425*t1772*t402;
  t4947 = t3433*t4916;
  t4948 = t3443*t4929;
  t4952 = t4945 + t4947 + t4948;
  t4965 = -1.*t1772*t3482*t402;
  t4969 = t3493*t4916;
  t4971 = t3499*t4929;
  t4972 = t4965 + t4969 + t4971;
  t5049 = t3342*t1779;
  t5065 = t3349*t2679;
  t5066 = t5049 + t5065;
  t5072 = -1.*t3342*t2679;
  t5075 = t4391 + t5072;
  t5086 = t3499*t5066;
  t5092 = t3493*t5075;
  t5093 = t5086 + t5092;
  t5095 = t3443*t5066;
  t5098 = t3433*t5075;
  t5100 = t5095 + t5098;
  t5126 = t3371*t5066;
  t5128 = t3341*t5075;
  t5140 = t5126 + t5128;
  t5188 = -1.*t3342*t2818;
  t5189 = t5188 + t5065;
  t5191 = -1.*t3349*t2818;
  t5192 = t5191 + t5072;
  t5194 = t3499*t5189;
  t5195 = t3493*t5192;
  t5196 = t5194 + t5195;
  t5198 = t3443*t5189;
  t5199 = t3433*t5192;
  t5201 = t5198 + t5199;
  t5210 = t3371*t5189;
  t5213 = t3341*t5192;
  t5218 = t5210 + t5213;
  t5278 = t3349*t2818;
  t5279 = t3342*t2679;
  t5281 = t5278 + t5279;
  t5275 = t1772*t426*t3326;
  t5276 = t3341*t5189;
  t5282 = t3371*t5281;
  t5283 = t5275 + t5276 + t5282;
  t5289 = t3425*t1772*t426;
  t5290 = t3433*t5189;
  t5295 = t3443*t5281;
  t5296 = t5289 + t5290 + t5295;
  t5298 = t1772*t426*t3482;
  t5299 = t3493*t5189;
  t5300 = t3499*t5281;
  t5301 = t5298 + t5299 + t5300;
  t5351 = t1772*t426*t3718;
  t5352 = -6.5e-11*t3319*t5189;
  t5356 = t3723*t5281;
  t5357 = t5351 + t5352 + t5356;
  t5365 = -1.000000000049*t1772*t426*t3319;
  t5367 = t3784*t5189;
  t5371 = t3795*t5281;
  t5372 = t5365 + t5367 + t5371;
  t5374 = t1772*t426*t3825;
  t5388 = t3827*t5189;
  t5391 = -1.000000000016*t3319*t5281;
  t5392 = t5374 + t5388 + t5391;
  t5755 = Power(t426,2);
  t5756 = Power(t435,2);
  t5759 = t5755*t5756;
  t5761 = Power(t2093,2);
  t5762 = t5759 + t5761;
  t5763 = 1/t5762;
  t2475 = -1.*t1772*t426*t435*t1347;
  t2478 = t1772*t426*t1339*t456;
  t2823 = t1459*t2818;
  t2827 = t1461*t2679;
  t2671 = t1339*t1779;
  t2681 = t1347*t2679;
  t3119 = t1347*t2093;
  t3127 = t1339*t1923;
  p_output1[0]=var3[0] + (t1362*t1477 + t1352*t1482 + t1471*t426 - 1.*t1347*t402*t435 + t1339*t402*t456 - 0.041195*(t1514*t709 + 4.e-6*t1530*t721 - 1.*t1490*t749) - 0.14871*(t1028*t1530 + 4.e-6*t1514*t721 + 4.e-6*t1490*t749) + t1514*t780 + t1530*t854 + t1490*t893 + 0.803147*(t1514*t749 - 4.e-6*t1530*t749 + t1490*t968))*var3[4] + (t1355 + t1368 + t1389 + t1402 + t1408 + t1428 + t1437 + t1450 - 1.*t1339*t426*t435 - 1.*t1347*t426*t456)*var3[5] + (t1355 + t1368 + t1389 + t1402 + t1408 + t1428 + t1437 + t1450 + t1459*t426*t435 - 1.*t1461*t426*t456)*var3[9] + (t401*t402 + t418*t551 + t625*t698 + t780*t795 + t854*t878 + t893*t919 - 0.041195*(t709*t795 + 4.e-6*t721*t878 - 1.*t749*t919) - 0.14871*(4.e-6*t721*t795 + t1028*t878 + 4.e-6*t749*t919) + 0.803147*(t749*t795 - 4.e-6*t749*t878 + t919*t968))*var3[10] + (t1129*t1186 + t1201*t1211 + t1234*t1251 + 0.803147*(t1211*t709 - 4.e-6*t1251*t709 - 1.000000000016*t1186*t749) - 0.14871*(4.e-6*t1186*t709 + 4.e-6*t1211*t749 - 1.6e-11*t1251*t749) - 0.041195*(-1.*t1186*t709 - 1.*t1211*t749 + 4.e-6*t1251*t749))*var3[11] + 5.*t201*t318*var4[0] + 20.*t126*t289*t295*var4[10] - 5.*t201*t318*var4[10] + 30.*t243*t262*t266*var4[20] - 20.*t126*t289*t295*var4[20] + 20.*t169*t196*t206*var4[30] - 30.*t243*t262*t266*var4[30] - 20.*t169*t196*t206*var4[40] + 5.*t132*t62*var4[40] - 5.*t132*t62*var4[50];
  p_output1[1]=var3[1] + (t1347*t1779 + t1339*t1784 + t1362*t1791 + t1352*t1803 - 1.*t1471*t1772*t426 - 0.041195*(t1839*t709 + 4.e-6*t1851*t721 - 1.*t1827*t749) - 0.14871*(t1028*t1851 + 4.e-6*t1839*t721 + 4.e-6*t1827*t749) + t1839*t780 + t1851*t854 + t1827*t893 + 0.803147*(t1839*t749 - 4.e-6*t1851*t749 + t1827*t968))*var3[3] + (t1362*t1653 + t1352*t1670 + t1471*t1634*t402 + t1347*t1634*t426*t435 - 1.*t1339*t1634*t426*t456 - 0.041195*(t1687*t709 + 4.e-6*t1697*t721 - 1.*t1682*t749) - 0.14871*(t1028*t1697 + 4.e-6*t1687*t721 + 4.e-6*t1682*t749) + t1687*t780 + t1697*t854 + t1682*t893 + 0.803147*(t1687*t749 - 4.e-6*t1697*t749 + t1682*t968))*var3[4] + (t1339*t1916 + t1347*t1923 + t1352*t1932 + t1362*t1951 - 0.041195*(t2017*t709 + 4.e-6*t1969*t721 - 1.*t2037*t749) - 0.14871*(t1028*t1969 + 4.e-6*t2017*t721 + 4.e-6*t2037*t749) + t2017*t780 + t1969*t854 + t2037*t893 + 0.803147*(-4.e-6*t1969*t749 + t2017*t749 + t2037*t968))*var3[5] + (t1461*t1923 + t1459*t2093 + t1352*t2105 + t1362*t2114 - 0.041195*(t2125*t709 + 4.e-6*t2120*t721 - 1.*t2136*t749) - 0.14871*(t1028*t2120 + 4.e-6*t2125*t721 + 4.e-6*t2136*t749) + t2125*t780 + t2120*t854 + t2136*t893 + 0.803147*(-4.e-6*t2120*t749 + t2125*t749 + t2136*t968))*var3[9] + (t2105*t418 - 1.*t1634*t401*t426 + t2235*t625 - 0.041195*(t2272*t709 + 4.e-6*t2280*t721 - 1.*t2288*t749) - 0.14871*(t1028*t2280 + 4.e-6*t2272*t721 + 4.e-6*t2288*t749) + t2272*t780 + t2280*t854 + t2288*t893 + 0.803147*(t2272*t749 - 4.e-6*t2280*t749 + t2288*t968))*var3[10] + (t1129*t2330 + t1201*t2351 + t1234*t2364 + 0.803147*(t2368 - 4.e-6*t2364*t709 - 1.000000000016*t2330*t749) - 0.14871*(4.e-6*t2330*t709 + 4.e-6*t2351*t749 - 1.6e-11*t2364*t749) - 0.041195*(-1.*t2330*t709 - 1.*t2351*t749 + 4.e-6*t2364*t749))*var3[11] + 5.*t201*t318*var4[1] + 20.*t126*t289*t295*var4[11] - 5.*t201*t318*var4[11] + 30.*t243*t262*t266*var4[21] - 20.*t126*t289*t295*var4[21] + 20.*t169*t196*t206*var4[31] - 30.*t243*t262*t266*var4[31] - 20.*t169*t196*t206*var4[41] + 5.*t132*t62*var4[41] - 5.*t132*t62*var4[51];
  p_output1[2]=var3[2] + (t1362*t2105 + t1352*t2235 + t3119 + t3127 - 1.*t1471*t1634*t426 - 0.041195*(t2368 + 4.e-6*t2364*t721 - 1.*t2330*t749) - 0.14871*(t1028*t2364 + 4.e-6*t2351*t721 + 4.e-6*t2330*t749) + t2351*t780 + t2364*t854 + t2330*t893 + 0.803147*(t2351*t749 - 4.e-6*t2364*t749 + t2330*t968))*var3[3] + (t2475 + t2478 + t1362*t2482 + t1352*t2490 - 1.*t1471*t1772*t402 - 0.041195*(t2541*t709 + 4.e-6*t2560*t721 - 1.*t2515*t749) - 0.14871*(t1028*t2560 + 4.e-6*t2541*t721 + 4.e-6*t2515*t749) + t2541*t780 + t2560*t854 + t2515*t893 + 0.803147*(t2541*t749 - 4.e-6*t2560*t749 + t2515*t968))*var3[4] + (t2671 + t2681 + t1352*t2691 + t1362*t2702 - 0.041195*(t2736*t709 + 4.e-6*t2717*t721 - 1.*t2755*t749) - 0.14871*(t1028*t2717 + 4.e-6*t2736*t721 + 4.e-6*t2755*t749) + t2736*t780 + t2717*t854 + t2755*t893 + 0.803147*(-4.e-6*t2717*t749 + t2736*t749 + t2755*t968))*var3[5] + (t2823 + t2827 + t1352*t2832 + t1362*t2839 - 0.041195*(t2851*t709 + 4.e-6*t2844*t721 - 1.*t2867*t749) - 0.14871*(t1028*t2844 + 4.e-6*t2851*t721 + 4.e-6*t2867*t749) + t2851*t780 + t2844*t854 + t2867*t893 + 0.803147*(-4.e-6*t2844*t749 + t2851*t749 + t2867*t968))*var3[9] + (t2832*t418 + t1772*t401*t426 + t2916*t625 - 0.041195*(t2920*t709 + 4.e-6*t2928*t721 - 1.*t2933*t749) - 0.14871*(t1028*t2928 + 4.e-6*t2920*t721 + 4.e-6*t2933*t749) + t2920*t780 + t2928*t854 + t2933*t893 + 0.803147*(t2920*t749 - 4.e-6*t2928*t749 + t2933*t968))*var3[10] + (t1129*t2972 + t1201*t2998 + t1234*t3042 + 0.803147*(t2998*t709 - 4.e-6*t3042*t709 - 1.000000000016*t2972*t749) - 0.14871*(4.e-6*t2972*t709 + 4.e-6*t2998*t749 - 1.6e-11*t3042*t749) - 0.041195*(-1.*t2972*t709 - 1.*t2998*t749 + 4.e-6*t3042*t749))*var3[11] + 5.*t201*t318*var4[2] + 20.*t126*t289*t295*var4[12] - 5.*t201*t318*var4[12] + 30.*t243*t262*t266*var4[22] - 20.*t126*t289*t295*var4[22] + 20.*t169*t196*t206*var4[32] - 30.*t243*t262*t266*var4[32] - 20.*t169*t196*t206*var4[42] + 5.*t132*t62*var4[42] - 5.*t132*t62*var4[52];
  p_output1[3]=var3[0] + (t3976*t4151 + t3958*t4160 + t3822*t4171 + t3765*t4180 + t3710*t4194 - 0.80315*(t3855*t4171 + t3846*t4180 + t3840*t4194) - 0.038576*(t3885*t4171 + t3872*t4180 + t3866*t4194) - 0.148715*(t3914*t4171 + t3912*t4180 + t3909*t4194) + t4140*t426 - 1.*t3939*t402*t435 + t3935*t402*t456)*var3[4] + (t3959 + t3989 + t4002 + t4015 + t4028 + t4045 + t4052 + t4070 - 1.*t3935*t426*t435 - 1.*t3939*t426*t456)*var3[5] + (t3959 + t3989 + t4002 + t4015 + t4028 + t4045 + t4052 + t4070 + t4093*t426*t435 - 1.*t4101*t426*t456)*var3[15] + (t3354*t3663 + t3379*t3683 + t3710*t3727 + t3765*t3799 + t3822*t3831 - 0.80315*(t3727*t3840 + t3799*t3846 + t3831*t3855) - 0.038576*(t3727*t3866 + t3799*t3872 + t3831*t3885) - 0.148715*(t3727*t3909 + t3799*t3912 + t3831*t3914) + t3630*t402)*var3[16] + (t3294*t3383 + t3415*t3450 + t3478*t3516 - 0.80315*(-1.000000000016*t3251*t3383 + t3450*t3532 + t3516*t3542) - 0.038576*(-1.000000000049*t3251*t3450 + t3383*t3554 + t3516*t3570) - 0.148715*(-6.5e-11*t3251*t3516 + t3383*t3583 + t3450*t3588))*var3[17] + 5.*t201*t318*var4[3] + 20.*t126*t289*t295*var4[13] - 5.*t201*t318*var4[13] + 30.*t243*t262*t266*var4[23] - 20.*t126*t289*t295*var4[23] + 20.*t169*t196*t206*var4[33] - 30.*t243*t262*t266*var4[33] - 20.*t169*t196*t206*var4[43] + 5.*t132*t62*var4[43] - 5.*t132*t62*var4[53];
  p_output1[4]=var3[1] + (t1784*t3935 + t1779*t3939 - 1.*t1772*t4140*t426 + t3976*t4382 + t3958*t4405 + t3822*t4424 + t3765*t4442 + t3710*t4463 - 0.80315*(t3855*t4424 + t3846*t4442 + t3840*t4463) - 0.038576*(t3885*t4424 + t3872*t4442 + t3866*t4463) - 0.148715*(t3914*t4424 + t3912*t4442 + t3909*t4463))*var3[3] + (t1634*t402*t4140 + t3976*t4283 + t3958*t4296 + t3822*t4309 + t3765*t4319 + t3710*t4325 - 0.80315*(t3855*t4309 + t3846*t4319 + t3840*t4325) - 0.038576*(t3885*t4309 + t3872*t4319 + t3866*t4325) - 0.148715*(t3914*t4309 + t3912*t4319 + t3909*t4325) + t1634*t3939*t426*t435 - 1.*t1634*t3935*t426*t456)*var3[4] + (t1916*t3935 + t1923*t3939 + t3958*t4515 + t3976*t4536 + t3710*t4541 + t3765*t4545 + t3822*t4550 - 0.80315*(t3840*t4541 + t3846*t4545 + t3855*t4550) - 0.038576*(t3866*t4541 + t3872*t4545 + t3885*t4550) - 0.148715*(t3909*t4541 + t3912*t4545 + t3914*t4550))*var3[5] + (t2093*t4093 + t1923*t4101 + t3958*t4587 + t3976*t4592 + t3710*t4599 + t3765*t4605 + t3822*t4614 - 0.80315*(t3840*t4599 + t3846*t4605 + t3855*t4614) - 0.038576*(t3866*t4599 + t3872*t4605 + t3885*t4614) - 0.148715*(t3909*t4599 + t3912*t4605 + t3914*t4614))*var3[15] + (-1.*t1634*t3630*t426 + t3663*t4587 + t3683*t4645 + t3710*t4778 + t3765*t4796 + t3822*t4805 - 0.80315*(t3840*t4778 + t3846*t4796 + t3855*t4805) - 0.038576*(t3866*t4778 + t3872*t4796 + t3885*t4805) - 0.148715*(t3909*t4778 + t3912*t4796 + t3914*t4805))*var3[16] + (t3294*t4648 + t3415*t4655 + t3478*t4661 - 0.148715*(t3583*t4648 + t3588*t4655 - 6.5e-11*t3251*t4661) - 0.80315*(-1.000000000016*t3251*t4648 + t3532*t4655 + t3542*t4661) - 0.038576*(t3554*t4648 - 1.000000000049*t3251*t4655 + t3570*t4661))*var3[17] + 5.*t201*t318*var4[4] + 20.*t126*t289*t295*var4[14] - 5.*t201*t318*var4[14] + 30.*t243*t262*t266*var4[24] - 20.*t126*t289*t295*var4[24] + 20.*t169*t196*t206*var4[34] - 30.*t243*t262*t266*var4[34] - 20.*t169*t196*t206*var4[44] + 5.*t132*t62*var4[44] - 5.*t132*t62*var4[54];
  p_output1[5]=var3[2] + (t1923*t3935 + t2093*t3939 - 1.*t1634*t4140*t426 + t3976*t4587 + t3958*t4645 + t3822*t4648 + t3765*t4655 + t3710*t4661 - 0.80315*(t3855*t4648 + t3846*t4655 + t3840*t4661) - 0.038576*(t3885*t4648 + t3872*t4655 + t3866*t4661) - 0.148715*(t3914*t4648 + t3912*t4655 + t3909*t4661))*var3[3] + (-1.*t1772*t402*t4140 - 1.*t1772*t3939*t426*t435 + t1772*t3935*t426*t456 + t3976*t4916 + t3958*t4929 + t3822*t4938 + t3765*t4952 + t3710*t4972 - 0.80315*(t3855*t4938 + t3846*t4952 + t3840*t4972) - 0.038576*(t3885*t4938 + t3872*t4952 + t3866*t4972) - 0.148715*(t3914*t4938 + t3912*t4952 + t3909*t4972))*var3[4] + (t1779*t3935 + t2679*t3939 + t3958*t5066 + t3976*t5075 + t3710*t5093 + t3765*t5100 + t3822*t5140 - 0.80315*(t3840*t5093 + t3846*t5100 + t3855*t5140) - 0.038576*(t3866*t5093 + t3872*t5100 + t3885*t5140) - 0.148715*(t3909*t5093 + t3912*t5100 + t3914*t5140))*var3[5] + (t2818*t4093 + t2679*t4101 + t3958*t5189 + t3976*t5192 + t3710*t5196 + t3765*t5201 + t3822*t5218 - 0.80315*(t3840*t5196 + t3846*t5201 + t3855*t5218) - 0.038576*(t3866*t5196 + t3872*t5201 + t3885*t5218) - 0.148715*(t3909*t5196 + t3912*t5201 + t3914*t5218))*var3[15] + (t1772*t3630*t426 + t3663*t5189 + t3683*t5281 + t3710*t5357 + t3765*t5372 + t3822*t5392 - 0.80315*(t3840*t5357 + t3846*t5372 + t3855*t5392) - 0.038576*(t3866*t5357 + t3872*t5372 + t3885*t5392) - 0.148715*(t3909*t5357 + t3912*t5372 + t3914*t5392))*var3[16] + (t3294*t5283 + t3415*t5296 + t3478*t5301 - 0.148715*(t3583*t5283 + t3588*t5296 - 6.5e-11*t3251*t5301) - 0.80315*(-1.000000000016*t3251*t5283 + t3532*t5296 + t3542*t5301) - 0.038576*(t3554*t5283 - 1.000000000049*t3251*t5296 + t3570*t5301))*var3[17] + 5.*t201*t318*var4[5] + 20.*t126*t289*t295*var4[15] - 5.*t201*t318*var4[15] + 30.*t243*t262*t266*var4[25] - 20.*t126*t289*t295*var4[25] + 20.*t169*t196*t206*var4[35] - 30.*t243*t262*t266*var4[35] - 20.*t169*t196*t206*var4[45] + 5.*t132*t62*var4[45] - 5.*t132*t62*var4[55];
  p_output1[6]=var3[1] + (0.00183*t1779 - 0.002264*t1784 + 0.024028*t1772*t426)*var3[3] + (-0.024028*t1634*t402 + 0.00183*t1634*t426*t435 + 0.002264*t1634*t426*t456)*var3[4] + (-0.002264*t1916 + 0.00183*t1923)*var3[5] + 5.*t201*t318*var4[6] + 20.*t126*t289*t295*var4[16] - 5.*t201*t318*var4[16] + 30.*t243*t262*t266*var4[26] - 20.*t126*t289*t295*var4[26] + 20.*t169*t196*t206*var4[36] - 30.*t243*t262*t266*var4[36] - 20.*t169*t196*t206*var4[46] + 5.*t132*t62*var4[46] - 5.*t132*t62*var4[56];
  p_output1[7]=var3[2] + (-0.002264*t1923 + 0.00183*t2093 + 0.024028*t1634*t426)*var3[3] + (0.024028*t1772*t402 - 0.00183*t1772*t426*t435 - 0.002264*t1772*t426*t456)*var3[4] + (-0.002264*t1779 + 0.00183*t2679)*var3[5] + 5.*t201*t318*var4[7] + 20.*t126*t289*t295*var4[17] - 5.*t201*t318*var4[17] + 30.*t243*t262*t266*var4[27] - 20.*t126*t289*t295*var4[27] + 20.*t169*t196*t206*var4[37] - 30.*t243*t262*t266*var4[37] - 20.*t169*t196*t206*var4[47] + 5.*t132*t62*var4[47] - 5.*t132*t62*var4[57];
  p_output1[8]=t1779*t426*t435*t5763*var3[3] + (-1.*t1916*t402*t435*t5763 + t1634*t5755*t5756*t5763)*var3[4] + (t1923*t426*t435*t5763 - 1.*t1916*t426*t456*t5763)*var3[5] + 5.*t201*t318*var4[8] + 20.*t126*t289*t295*var4[18] - 5.*t201*t318*var4[18] + 30.*t243*t262*t266*var4[28] - 20.*t126*t289*t295*var4[28] + 20.*t169*t196*t206*var4[38] - 30.*t243*t262*t266*var4[38] - 20.*t169*t196*t206*var4[48] + 5.*t132*t62*var4[48] - 5.*t132*t62*var4[58];
  p_output1[9]=(-0.15121*t2105 + 0.15121*t2235 + t3119 + t3127 - 1.*t1923*t3935 - 1.*t2093*t3939 + 0.15121*t4587 + 0.15121*t4645)*var3[3] + (t2475 + t2478 - 0.15121*t2482 + 0.15121*t2490 + t1772*t3939*t426*t435 - 1.*t1772*t3935*t426*t456 + 0.15121*t4916 + 0.15121*t4929)*var3[4] + (t2671 + t2681 + 0.15121*t2691 - 0.15121*t2702 - 1.*t1779*t3935 - 1.*t2679*t3939 + 0.15121*t5066 + 0.15121*t5075)*var3[5] + (t2823 + t2827 + 0.15121*t2832 - 0.15121*t2839)*var3[9] + (-1.*t2818*t4093 - 1.*t2679*t4101 + 0.15121*t5189 + 0.15121*t5192)*var3[15] + 5.*t201*t318*var4[9] + 20.*t126*t289*t295*var4[19] - 5.*t201*t318*var4[19] + 30.*t243*t262*t266*var4[29] - 20.*t126*t289*t295*var4[29] + 20.*t169*t196*t206*var4[39] - 30.*t243*t262*t266*var4[39] - 20.*t169*t196*t206*var4[49] + 5.*t132*t62*var4[49] - 5.*t132*t62*var4[59];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4,*var5,*var6,*var7;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 7)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Seven input(s) required (var1,var2,var3,var4,var5,var6,var7).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 2 && ncols == 1) && 
      !(mrows == 1 && ncols == 2))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 60 && ncols == 1) && 
      !(mrows == 1 && ncols == 60))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }
  mrows = mxGetM(prhs[4]);
  ncols = mxGetN(prhs[4]);
  if( !mxIsDouble(prhs[4]) || mxIsComplex(prhs[4]) ||
    ( !(mrows == 2 && ncols == 1) && 
      !(mrows == 1 && ncols == 2))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var5 is wrong.");
    }
  mrows = mxGetM(prhs[5]);
  ncols = mxGetN(prhs[5]);
  if( !mxIsDouble(prhs[5]) || mxIsComplex(prhs[5]) ||
    ( !(mrows == 1 && ncols == 1) && 
      !(mrows == 1 && ncols == 1))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var6 is wrong.");
    }
  mrows = mxGetM(prhs[6]);
  ncols = mxGetN(prhs[6]);
  if( !mxIsDouble(prhs[6]) || mxIsComplex(prhs[6]) ||
    ( !(mrows == 1 && ncols == 1) && 
      !(mrows == 1 && ncols == 1))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var7 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
  var5 = mxGetPr(prhs[4]);
  var6 = mxGetPr(prhs[5]);
  var7 = mxGetPr(prhs[6]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 10, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4,var5,var6,var7);


}

#else // MATLAB_MEX_FILE

#include "d1y_position_ParallelStance2.hh"

namespace ParallelStance2
{

void d1y_position_ParallelStance2_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4,const double *var5,const double *var6,const double *var7)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4, var5, var6, var7);

}

}

#endif // MATLAB_MEX_FILE
