/*
 * Automatically Generated from Mathematica.
 * Sun 14 Nov 2021 17:32:34 GMT+01:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4,const double *var5,const double *var6,const double *var7)
{
  double t22;
  double t50;
  double t55;
  double t59;
  double t100;
  double t122;
  double t135;
  double t139;
  double t166;
  double t169;
  double t226;
  double t249;
  double t264;
  double t266;
  double t268;
  double t269;
  double t345;
  double t348;
  double t355;
  double t376;
  double t391;
  double t409;
  double t431;
  double t454;
  double t479;
  double t507;
  double t491;
  double t492;
  double t511;
  double t672;
  double t463;
  double t494;
  double t514;
  double t516;
  double t628;
  double t632;
  double t654;
  double t674;
  double t678;
  double t691;
  double t701;
  double t722;
  double t736;
  double t739;
  double t764;
  double t813;
  double t817;
  double t825;
  double t827;
  double t840;
  double t841;
  double t844;
  double t859;
  double t832;
  double t1003;
  double t1006;
  double t990;
  double t996;
  double t1010;
  double t1013;
  double t1017;
  double t1019;
  double t1042;
  double t1053;
  double t1065;
  double t1084;
  double t1085;
  double t1086;
  double t1087;
  double t1088;
  double t1089;
  double t1090;
  double t1224;
  double t1226;
  double t1238;
  double t456;
  double t783;
  double t786;
  double t787;
  double t790;
  double t800;
  double t1308;
  double t1319;
  double t1340;
  double t668;
  double t687;
  double t694;
  double t708;
  double t709;
  double t831;
  double t839;
  double t1364;
  double t1375;
  double t1422;
  double t1434;
  double t1446;
  double t870;
  double t871;
  double t1455;
  double t1458;
  double t1459;
  double t925;
  double t928;
  double t1504;
  double t1261;
  double t1277;
  double t1286;
  double t1289;
  double t1290;
  double t1294;
  double t1299;
  double t1301;
  double t1348;
  double t1395;
  double t1450;
  double t1464;
  double t1465;
  double t1468;
  double t1472;
  double t1474;
  double t1476;
  double t1481;
  double t1484;
  double t1489;
  double t1491;
  double t1493;
  double t1495;
  double t1496;
  double t1497;
  double t1499;
  double t1501;
  double t1250;
  double t1251;
  double t1235;
  double t1244;
  double t1595;
  double t1601;
  double t1607;
  double t1612;
  double t1618;
  double t1621;
  double t1629;
  double t1638;
  double t1645;
  double t1648;
  double t1659;
  double t1665;
  double t1677;
  double t1680;
  double t1694;
  double t1695;
  double t1705;
  double t1732;
  double t1540;
  double t1541;
  double t1543;
  double t1544;
  double t1545;
  double t2075;
  double t2099;
  double t2103;
  double t2131;
  double t2133;
  double t2150;
  double t2170;
  double t2191;
  double t2194;
  double t2197;
  double t2232;
  double t2235;
  double t2236;
  double t2238;
  double t2239;
  double t2252;
  double t2256;
  double t2264;
  double t2271;
  double t2375;
  double t2381;
  double t2395;
  double t2407;
  double t2424;
  double t2429;
  double t2432;
  double t2445;
  double t2449;
  double t2480;
  double t2501;
  double t2526;
  double t2540;
  double t2552;
  double t2585;
  double t2592;
  double t2605;
  double t2626;
  double t2641;
  double t2644;
  double t2649;
  double t2666;
  double t2684;
  double t2686;
  double t2708;
  double t2841;
  double t2843;
  double t2850;
  double t2860;
  double t2864;
  double t2868;
  double t2874;
  double t2876;
  double t2897;
  double t2912;
  double t2923;
  double t2944;
  double t2963;
  double t2981;
  double t2983;
  double t3001;
  double t3003;
  double t3012;
  double t3029;
  double t3034;
  double t3038;
  double t1505;
  double t1515;
  double t1521;
  double t3146;
  double t3155;
  double t3174;
  double t3202;
  double t3203;
  double t3227;
  double t3229;
  double t3251;
  double t3255;
  double t3257;
  double t3265;
  double t3271;
  double t3275;
  double t3277;
  double t3291;
  double t3295;
  double t443;
  double t459;
  double t468;
  double t473;
  double t474;
  double t531;
  double t544;
  double t572;
  double t3380;
  double t3388;
  double t3407;
  double t3419;
  double t3433;
  double t3452;
  double t3481;
  double t3482;
  double t3486;
  double t3487;
  double t3493;
  double t3502;
  double t3505;
  double t3506;
  double t983;
  double t985;
  double t987;
  double t1032;
  double t1037;
  double t1075;
  double t1081;
  double t1082;
  double t3612;
  double t3618;
  double t3624;
  double t3644;
  double t3666;
  double t3676;
  double t3689;
  double t3693;
  double t3696;
  double t3698;
  double t3699;
  double t3800;
  double t3802;
  double t3807;
  double t3811;
  double t3813;
  double t3814;
  double t3819;
  double t3820;
  double t3821;
  double t3822;
  double t3825;
  double t3826;
  double t3827;
  double t3829;
  double t3833;
  double t3836;
  double t3839;
  double t3840;
  double t3934;
  double t3935;
  double t3937;
  double t3942;
  double t3944;
  double t3946;
  double t3948;
  double t3949;
  double t3954;
  double t3957;
  double t3958;
  double t3964;
  double t3965;
  double t3969;
  double t3974;
  double t3977;
  double t3978;
  double t4104;
  double t4105;
  double t4106;
  double t4113;
  double t4114;
  double t4116;
  double t4117;
  double t4125;
  double t4127;
  double t4130;
  double t4132;
  double t4133;
  double t4135;
  double t4141;
  double t4142;
  double t4151;
  double t4290;
  double t4291;
  double t4292;
  double t4297;
  double t4301;
  double t4306;
  double t4312;
  double t4313;
  double t4316;
  double t4318;
  double t4320;
  double t4326;
  double t4327;
  double t4448;
  double t4451;
  double t4452;
  double t4453;
  double t4455;
  double t4458;
  double t4460;
  double t4465;
  double t4466;
  double t4469;
  double t4472;
  double t3718;
  double t4698;
  double t4700;
  double t4740;
  double t4761;
  double t4762;
  double t4773;
  double t4812;
  double t4807;
  double t4701;
  double t4811;
  double t4816;
  double t4817;
  double t4772;
  double t4821;
  double t4825;
  double t4830;
  double t4852;
  double t4714;
  double t4901;
  double t4786;
  double t4774;
  double t4780;
  double t4789;
  double t4799;
  double t4818;
  double t4819;
  double t4820;
  double t4837;
  double t4842;
  double t4892;
  double t4899;
  double t4900;
  double t4903;
  double t4909;
  double t4910;
  double t4913;
  double t4914;
  double t4915;
  double t4917;
  double t4712;
  double t4932;
  double t4933;
  double t4934;
  double t4935;
  double t4936;
  double t4937;
  double t4938;
  double t4943;
  double t4952;
  double t4953;
  double t4862;
  double t4957;
  double t4847;
  double t4922;
  double t4961;
  double t4919;
  double t4972;
  double t5024;
  double t5084;
  double t5040;
  double t5053;
  double t5095;
  double t5096;
  double t5014;
  double t5088;
  double t5167;
  double t5194;
  double t5068;
  double t5115;
  double t5122;
  double t5127;
  double t5137;
  double t5143;
  double t5155;
  double t5180;
  double t5187;
  double t5193;
  double t5202;
  double t5203;
  double t5204;
  double t5266;
  double t5270;
  double t5273;
  double t5274;
  double t5276;
  double t5279;
  double t5311;
  double t5168;
  double t5376;
  double t5295;
  double t5428;
  double t5437;
  double t5441;
  double t5471;
  double t5083;
  double t5085;
  double t5089;
  double t5092;
  double t5097;
  double t5101;
  double t5105;
  double t5507;
  double t5509;
  double t5513;
  double t5160;
  double t5164;
  double t5169;
  double t5171;
  double t5174;
  double t5175;
  double t5177;
  double t5214;
  double t5215;
  double t5216;
  double t5217;
  double t5225;
  double t5258;
  double t5259;
  double t5302;
  double t5516;
  double t5519;
  double t5523;
  double t5327;
  double t5533;
  double t5543;
  double t5545;
  double t5342;
  double t5344;
  double t5548;
  double t5553;
  double t5557;
  double t5377;
  double t5385;
  double t5388;
  double t5391;
  double t5402;
  double t5404;
  double t5406;
  double t5412;
  double t5447;
  double t5455;
  double t5456;
  double t5475;
  double t5477;
  double t5478;
  double t5480;
  double t5481;
  double t5482;
  double t5483;
  double t5484;
  double t5485;
  double t5488;
  double t5489;
  double t5493;
  double t5496;
  double t5498;
  double t5502;
  double t5506;
  double t5515;
  double t5525;
  double t5547;
  double t5565;
  double t5566;
  double t5567;
  double t5570;
  double t5572;
  double t5573;
  double t5577;
  double t5578;
  double t5579;
  double t5580;
  double t5583;
  double t5591;
  double t5592;
  double t5593;
  double t5594;
  double t5598;
  double t5449;
  double t5443;
  double t5444;
  double t5677;
  double t5684;
  double t5686;
  double t5693;
  double t5694;
  double t5708;
  double t5710;
  double t5711;
  double t5712;
  double t5715;
  double t5726;
  double t5728;
  double t5735;
  double t5736;
  double t5740;
  double t5742;
  double t5747;
  double t5749;
  double t5649;
  double t5652;
  double t5658;
  double t5659;
  double t5661;
  double t5662;
  double t5664;
  double t5838;
  double t5843;
  double t5846;
  double t5849;
  double t5851;
  double t5854;
  double t5862;
  double t5863;
  double t5864;
  double t5867;
  double t5872;
  double t5873;
  double t5876;
  double t5877;
  double t5879;
  double t5883;
  double t5884;
  double t5885;
  double t5932;
  double t5933;
  double t5935;
  double t5938;
  double t5939;
  double t5940;
  double t5943;
  double t5948;
  double t5949;
  double t5950;
  double t5952;
  double t5958;
  double t5961;
  double t5969;
  double t5972;
  double t5982;
  double t5985;
  double t5986;
  double t6024;
  double t6025;
  double t6028;
  double t6031;
  double t6034;
  double t6036;
  double t6039;
  double t6045;
  double t6046;
  double t6049;
  double t6050;
  double t6056;
  double t6058;
  double t6059;
  double t6060;
  double t5606;
  double t5607;
  double t5622;
  double t5623;
  double t6096;
  double t6098;
  double t6100;
  double t6102;
  double t6110;
  double t6111;
  double t6118;
  double t6121;
  double t6125;
  double t6130;
  double t6143;
  double t6146;
  double t6148;
  double t4705;
  double t4708;
  double t4718;
  double t4723;
  double t4726;
  double t4732;
  double t4857;
  double t4860;
  double t4870;
  double t4871;
  double t4879;
  double t4888;
  double t6213;
  double t6215;
  double t6217;
  double t4920;
  double t4921;
  double t4924;
  double t4925;
  double t4928;
  double t4931;
  double t6210;
  double t6212;
  double t6225;
  double t6227;
  double t4958;
  double t6230;
  double t6234;
  double t6236;
  double t6237;
  double t4962;
  double t6244;
  double t6245;
  double t6246;
  double t6251;
  double t4967;
  double t4973;
  double t4984;
  double t4994;
  double t5015;
  double t5017;
  double t5025;
  double t5026;
  double t5027;
  double t5032;
  double t5046;
  double t5051;
  double t5054;
  double t5055;
  double t5056;
  double t5059;
  double t5062;
  double t5064;
  double t5069;
  double t5071;
  double t5076;
  double t5077;
  double t6307;
  double t6310;
  double t6312;
  double t6315;
  double t6319;
  double t6324;
  double t6326;
  double t6327;
  double t6330;
  double t6332;
  double t6333;
  double t6334;
  double t6411;
  double t6415;
  double t6418;
  double t6427;
  double t6428;
  double t6429;
  double t6434;
  double t6435;
  double t6436;
  double t6438;
  double t6440;
  double t6442;
  double t6443;
  double t6444;
  double t6448;
  double t6449;
  double t6454;
  double t6457;
  double t6500;
  double t6502;
  double t6503;
  double t6507;
  double t6511;
  double t6515;
  double t6516;
  double t6524;
  double t6530;
  double t6548;
  double t6553;
  double t6556;
  double t6559;
  double t6560;
  double t6598;
  double t6599;
  double t6607;
  double t6608;
  double t6610;
  double t6611;
  double t6612;
  double t6614;
  double t6619;
  double t6620;
  double t6624;
  double t6625;
  double t6628;
  double t6700;
  double t6702;
  double t6705;
  double t6697;
  double t6699;
  double t6706;
  double t6709;
  double t6715;
  double t6719;
  double t6721;
  double t6724;
  double t6729;
  double t6737;
  double t6741;
  double t6743;
  double t6835;
  double t6838;
  double t6845;
  double t6846;
  double t6851;
  double t6852;
  double t6853;
  double t6855;
  double t6860;
  double t6867;
  double t6873;
  double t6875;
  double t7153;
  double t7160;
  double t7164;
  double t7166;
  double t7167;
  double t7169;
  double t3797;
  double t3799;
  double t4107;
  double t4108;
  double t3933;
  double t3939;
  double t4547;
  double t4553;
  t22 = -1.*var5[0];
  t50 = t22 + var5[1];
  t55 = Power(t50,-5);
  t59 = -1. + var6[0];
  t100 = -1. + var7[0];
  t122 = 1/t100;
  t135 = -1.*var1[0];
  t139 = t135 + var1[1];
  t166 = t59*t122*t139;
  t169 = t22 + var1[0] + t166;
  t226 = Power(t169,4);
  t249 = Power(t50,-4);
  t264 = Power(t169,3);
  t266 = 1/t50;
  t268 = -1.*t266*t169;
  t269 = 1. + t268;
  t345 = Power(t50,-3);
  t348 = Power(t169,2);
  t355 = Power(t269,2);
  t376 = Power(t50,-2);
  t391 = Power(t269,3);
  t409 = Power(t269,4);
  t431 = Cos(var2[10]);
  t454 = Sin(var2[10]);
  t479 = Cos(var2[4]);
  t507 = Cos(var2[9]);
  t491 = Cos(var2[5]);
  t492 = Sin(var2[9]);
  t511 = Sin(var2[5]);
  t672 = Cos(var2[11]);
  t463 = Sin(var2[4]);
  t494 = -1.*t479*t491*t492;
  t514 = -1.*t507*t479*t511;
  t516 = t494 + t514;
  t628 = t507*t479*t491;
  t632 = -1.*t479*t492*t511;
  t654 = t628 + t632;
  t674 = -1.*t672;
  t678 = 1. + t674;
  t691 = -1. + t672;
  t701 = Sin(var2[11]);
  t722 = -1.*t454*t463;
  t736 = 4.e-6*t454*t516;
  t739 = -1.*t431*t654;
  t764 = t722 + t736 + t739;
  t813 = 4.e-6*t454*t463;
  t817 = -1.6e-11*t454*t516;
  t825 = 4.e-6*t431*t654;
  t827 = t813 + t817 + t825;
  t840 = t431*t463;
  t841 = -4.e-6*t431*t516;
  t844 = -1.000000000016*t454*t654;
  t859 = t840 + t841 + t844;
  t832 = -0.0398890000006382*t701;
  t1003 = -1.*t431;
  t1006 = 1. + t1003;
  t990 = t454*t463;
  t996 = -4.e-6*t454*t516;
  t1010 = -1.000000000016*t1006;
  t1013 = 1. + t1010;
  t1017 = t1013*t654;
  t1019 = t990 + t996 + t1017;
  t1042 = 4.e-6*t1006*t516;
  t1053 = -1.*t454*t654;
  t1065 = t840 + t1042 + t1053;
  t1084 = 4.e-6*t1006*t463;
  t1085 = -1. + t431;
  t1086 = 1.6e-11*t1085;
  t1087 = 1. + t1086;
  t1088 = t1087*t516;
  t1089 = 4.e-6*t454*t654;
  t1090 = t1084 + t1088 + t1089;
  t1224 = -1.*t507;
  t1226 = 1. + t1224;
  t1238 = -0.15121*t492;
  t456 = -0.03874900000062*t454;
  t783 = -1.26e-8*var2[11];
  t786 = 2.552896e-18*t678;
  t787 = -1.59556e-7*t691;
  t790 = 2.012600000032e-6*t701;
  t800 = t783 + t786 + t787 + t790;
  t1308 = -1.*t507*t479*t491;
  t1319 = t479*t492*t511;
  t1340 = t1308 + t1319;
  t668 = -5.04e-14*var2[11];
  t687 = -0.039889*t678;
  t694 = 6.38224e-13*t691;
  t708 = -0.503150000008*t701;
  t709 = t668 + t687 + t694 + t708;
  t831 = 0.50315000001605*t678;
  t839 = t831 + t832;
  t1364 = t1087*t1340;
  t1375 = t736 + t1364;
  t1422 = -1.*t454*t516;
  t1434 = 4.e-6*t1006*t1340;
  t1446 = t1422 + t1434;
  t870 = -1.000000000016*t678;
  t871 = 1. + t870;
  t1455 = t1013*t516;
  t1458 = -4.e-6*t454*t1340;
  t1459 = t1455 + t1458;
  t925 = 1.6e-11*t691;
  t928 = 1. + t925;
  t1504 = -0.15121*t507;
  t1261 = 0.281210000008499*t1006;
  t1277 = t1261 + t456;
  t1286 = t1277*t516;
  t1289 = -1.2484e-7*var2[10];
  t1290 = 2.479936e-18*t1006;
  t1294 = -1.54996e-7*t1085;
  t1299 = 1.124840000016e-6*t454;
  t1301 = t1289 + t1290 + t1294 + t1299;
  t1348 = t1301*t1340;
  t1395 = t800*t1375;
  t1450 = t709*t1446;
  t1464 = t839*t1459;
  t1465 = -4.e-6*t701*t1375;
  t1468 = t701*t1446;
  t1472 = t871*t1459;
  t1474 = t1465 + t1468 + t1472;
  t1476 = 0.803147*t1474;
  t1481 = 4.e-6*t678*t1375;
  t1484 = t672*t1446;
  t1489 = -1.*t701*t1459;
  t1491 = t1481 + t1484 + t1489;
  t1493 = -0.041195*t1491;
  t1495 = t928*t1375;
  t1496 = 4.e-6*t678*t1446;
  t1497 = 4.e-6*t701*t1459;
  t1499 = t1495 + t1496 + t1497;
  t1501 = -0.14871*t1499;
  t1250 = 0.15121*t1226;
  t1251 = t1250 + t1238;
  t1235 = -0.15121*t1226;
  t1244 = t1235 + t1238;
  t1595 = t491*t492*t463;
  t1601 = t507*t463*t511;
  t1607 = t1595 + t1601;
  t1612 = -1.*t507*t491*t463;
  t1618 = t492*t463*t511;
  t1621 = t1612 + t1618;
  t1629 = t479*t454;
  t1638 = -4.e-6*t454*t1607;
  t1645 = t1013*t1621;
  t1648 = t1629 + t1638 + t1645;
  t1659 = t431*t479;
  t1665 = 4.e-6*t1006*t1607;
  t1677 = -1.*t454*t1621;
  t1680 = t1659 + t1665 + t1677;
  t1694 = 4.e-6*t1006*t479;
  t1695 = t1087*t1607;
  t1705 = 4.e-6*t454*t1621;
  t1732 = t1694 + t1695 + t1705;
  t1540 = -4.9936e-13*var2[10];
  t1541 = -0.038749*t1006;
  t1543 = 6.19984e-13*t1085;
  t1544 = -0.281210000004*t454;
  t1545 = t1540 + t1541 + t1543 + t1544;
  t2075 = Sin(var2[3]);
  t2099 = -1.*t479*t491*t492*t2075;
  t2103 = -1.*t507*t479*t2075*t511;
  t2131 = t2099 + t2103;
  t2133 = t507*t479*t491*t2075;
  t2150 = -1.*t479*t492*t2075*t511;
  t2170 = t2133 + t2150;
  t2191 = t454*t2075*t463;
  t2194 = -4.e-6*t454*t2131;
  t2197 = t1013*t2170;
  t2232 = t2191 + t2194 + t2197;
  t2235 = t431*t2075*t463;
  t2236 = 4.e-6*t1006*t2131;
  t2238 = -1.*t454*t2170;
  t2239 = t2235 + t2236 + t2238;
  t2252 = 4.e-6*t1006*t2075*t463;
  t2256 = t1087*t2131;
  t2264 = 4.e-6*t454*t2170;
  t2271 = t2252 + t2256 + t2264;
  t2375 = Cos(var2[3]);
  t2381 = t2375*t491*t463;
  t2395 = -1.*t2075*t511;
  t2407 = t2381 + t2395;
  t2424 = -1.*t491*t2075;
  t2429 = -1.*t2375*t463*t511;
  t2432 = t2424 + t2429;
  t2445 = -1.*t492*t2407;
  t2449 = t507*t2432;
  t2480 = t2445 + t2449;
  t2501 = t507*t2407;
  t2526 = t492*t2432;
  t2540 = t2501 + t2526;
  t2552 = -1.*t2375*t479*t454;
  t2585 = -4.e-6*t454*t2480;
  t2592 = t1013*t2540;
  t2605 = t2552 + t2585 + t2592;
  t2626 = -1.*t431*t2375*t479;
  t2641 = 4.e-6*t1006*t2480;
  t2644 = -1.*t454*t2540;
  t2649 = t2626 + t2641 + t2644;
  t2666 = -4.e-6*t1006*t2375*t479;
  t2684 = t1087*t2480;
  t2686 = 4.e-6*t454*t2540;
  t2708 = t2666 + t2684 + t2686;
  t2841 = -1.*t491*t2075*t463;
  t2843 = -1.*t2375*t511;
  t2850 = t2841 + t2843;
  t2860 = t2375*t491;
  t2864 = -1.*t2075*t463*t511;
  t2868 = t2860 + t2864;
  t2874 = t492*t2850;
  t2876 = t507*t2868;
  t2897 = t2874 + t2876;
  t2912 = t507*t2850;
  t2923 = -1.*t492*t2868;
  t2944 = t2912 + t2923;
  t2963 = 4.e-6*t454*t2897;
  t2981 = t1087*t2944;
  t2983 = t2963 + t2981;
  t3001 = -1.*t454*t2897;
  t3003 = 4.e-6*t1006*t2944;
  t3012 = t3001 + t3003;
  t3029 = t1013*t2897;
  t3034 = -4.e-6*t454*t2944;
  t3038 = t3029 + t3034;
  t1505 = 0.15121*t492;
  t1515 = t1504 + t1505;
  t1521 = t1504 + t1238;
  t3146 = t491*t2075*t463;
  t3155 = t2375*t511;
  t3174 = t3146 + t3155;
  t3202 = -1.*t492*t3174;
  t3203 = t3202 + t2876;
  t3227 = -1.*t507*t3174;
  t3229 = t3227 + t2923;
  t3251 = 4.e-6*t454*t3203;
  t3255 = t1087*t3229;
  t3257 = t3251 + t3255;
  t3265 = -1.*t454*t3203;
  t3271 = 4.e-6*t1006*t3229;
  t3275 = t3265 + t3271;
  t3277 = t1013*t3203;
  t3291 = -4.e-6*t454*t3229;
  t3295 = t3277 + t3291;
  t443 = -0.281210000004*t431;
  t459 = -4.9936e-13 + t443 + t456;
  t468 = 1.124840000016e-6*t431;
  t473 = 1.5499600000248e-7*t454;
  t474 = -1.2484e-7 + t468 + t473;
  t531 = -0.03874900000062*t431;
  t544 = 0.281210000008499*t454;
  t572 = t531 + t544;
  t3380 = t507*t3174;
  t3388 = t492*t2868;
  t3407 = t3380 + t3388;
  t3419 = t479*t454*t2075;
  t3433 = -1.*t431*t3407;
  t3452 = t3419 + t3251 + t3433;
  t3481 = -4.e-6*t479*t454*t2075;
  t3482 = -1.6e-11*t454*t3203;
  t3486 = 4.e-6*t431*t3407;
  t3487 = t3481 + t3482 + t3486;
  t3493 = -1.*t431*t479*t2075;
  t3502 = -4.e-6*t431*t3203;
  t3505 = -1.000000000016*t454*t3407;
  t3506 = t3493 + t3502 + t3505;
  t983 = -0.0398890000006382*t672;
  t985 = 0.50315000001605*t701;
  t987 = t983 + t985;
  t1032 = -0.503150000008*t672;
  t1037 = -5.04e-14 + t1032 + t832;
  t1075 = 2.012600000032e-6*t672;
  t1081 = 1.59556000002553e-7*t701;
  t1082 = -1.26e-8 + t1075 + t1081;
  t3612 = -1.*t479*t454*t2075;
  t3618 = -4.e-6*t454*t3203;
  t3624 = t1013*t3407;
  t3644 = t3612 + t3618 + t3624;
  t3666 = 4.e-6*t1006*t3203;
  t3676 = -1.*t454*t3407;
  t3689 = t3493 + t3666 + t3676;
  t3693 = -4.e-6*t1006*t479*t2075;
  t3696 = t1087*t3203;
  t3698 = 4.e-6*t454*t3407;
  t3699 = t3693 + t3696 + t3698;
  t3800 = t2375*t479*t491*t492;
  t3802 = t507*t2375*t479*t511;
  t3807 = t3800 + t3802;
  t3811 = -1.*t507*t2375*t479*t491;
  t3813 = t2375*t479*t492*t511;
  t3814 = t3811 + t3813;
  t3819 = -1.*t2375*t454*t463;
  t3820 = -4.e-6*t454*t3807;
  t3821 = t1013*t3814;
  t3822 = t3819 + t3820 + t3821;
  t3825 = -1.*t431*t2375*t463;
  t3826 = 4.e-6*t1006*t3807;
  t3827 = -1.*t454*t3814;
  t3829 = t3825 + t3826 + t3827;
  t3833 = -4.e-6*t1006*t2375*t463;
  t3836 = t1087*t3807;
  t3839 = 4.e-6*t454*t3814;
  t3840 = t3833 + t3836 + t3839;
  t3934 = t491*t2075;
  t3935 = t2375*t463*t511;
  t3937 = t3934 + t3935;
  t3942 = t492*t2407;
  t3944 = t507*t3937;
  t3946 = t3942 + t3944;
  t3948 = -1.*t492*t3937;
  t3949 = t2501 + t3948;
  t3954 = 4.e-6*t454*t3946;
  t3957 = t1087*t3949;
  t3958 = t3954 + t3957;
  t3964 = -1.*t454*t3946;
  t3965 = 4.e-6*t1006*t3949;
  t3969 = t3964 + t3965;
  t3974 = t1013*t3946;
  t3977 = -4.e-6*t454*t3949;
  t3978 = t3974 + t3977;
  t4104 = -1.*t2375*t491*t463;
  t4105 = t2075*t511;
  t4106 = t4104 + t4105;
  t4113 = -1.*t492*t4106;
  t4114 = t4113 + t3944;
  t4116 = -1.*t507*t4106;
  t4117 = t4116 + t3948;
  t4125 = 4.e-6*t454*t4114;
  t4127 = t1087*t4117;
  t4130 = t4125 + t4127;
  t4132 = -1.*t454*t4114;
  t4133 = 4.e-6*t1006*t4117;
  t4135 = t4132 + t4133;
  t4141 = t1013*t4114;
  t4142 = -4.e-6*t454*t4117;
  t4151 = t4141 + t4142;
  t4290 = t507*t4106;
  t4291 = t492*t3937;
  t4292 = t4290 + t4291;
  t4297 = -1.*t431*t4292;
  t4301 = t2552 + t4125 + t4297;
  t4306 = 4.e-6*t2375*t479*t454;
  t4312 = -1.6e-11*t454*t4114;
  t4313 = 4.e-6*t431*t4292;
  t4316 = t4306 + t4312 + t4313;
  t4318 = t431*t2375*t479;
  t4320 = -4.e-6*t431*t4114;
  t4326 = -1.000000000016*t454*t4292;
  t4327 = t4318 + t4320 + t4326;
  t4448 = t2375*t479*t454;
  t4451 = -4.e-6*t454*t4114;
  t4452 = t1013*t4292;
  t4453 = t4448 + t4451 + t4452;
  t4455 = 4.e-6*t1006*t4114;
  t4458 = -1.*t454*t4292;
  t4460 = t4318 + t4455 + t4458;
  t4465 = 4.e-6*t1006*t2375*t479;
  t4466 = t1087*t4114;
  t4469 = 4.e-6*t454*t4292;
  t4472 = t4465 + t4466 + t4469;
  t3718 = t672*t3689;
  t4698 = Cos(var2[17]);
  t4700 = Sin(var2[17]);
  t4740 = Cos(var2[16]);
  t4761 = -1.*t4740;
  t4762 = 1. + t4761;
  t4773 = Sin(var2[16]);
  t4812 = Cos(var2[15]);
  t4807 = Sin(var2[15]);
  t4701 = 2.8e-11*t4700;
  t4811 = -1.*t479*t491*t4807;
  t4816 = -1.*t4812*t479*t511;
  t4817 = t4811 + t4816;
  t4772 = -2.8e-11*t4762;
  t4821 = t4812*t479*t491;
  t4825 = -1.*t479*t4807*t511;
  t4830 = t4821 + t4825;
  t4852 = -4.e-6*t4700;
  t4714 = 7.e-6*t4700;
  t4901 = 4.e-6*t4762;
  t4786 = -7.e-6*t4762;
  t4774 = t4772 + t4773;
  t4780 = t4774*t463;
  t4789 = -4.e-6*t4773;
  t4799 = t4786 + t4789;
  t4818 = t4799*t4817;
  t4819 = -1.000000000016*t4762;
  t4820 = 1. + t4819;
  t4837 = t4820*t4830;
  t4842 = t4780 + t4818 + t4837;
  t4892 = -1.000000000049*t4762;
  t4899 = 1. + t4892;
  t4900 = t4899*t463;
  t4903 = -7.e-6*t4773;
  t4909 = t4901 + t4903;
  t4910 = t4909*t4817;
  t4913 = -1.*t4773;
  t4914 = t4772 + t4913;
  t4915 = t4914*t4830;
  t4917 = t4900 + t4910 + t4915;
  t4712 = -4.e-6*t4698;
  t4932 = 7.e-6*t4773;
  t4933 = t4901 + t4932;
  t4934 = t4933*t463;
  t4935 = -6.5e-11*t4762;
  t4936 = 1. + t4935;
  t4937 = t4936*t4817;
  t4938 = 4.e-6*t4773;
  t4943 = t4786 + t4938;
  t4952 = t4943*t4830;
  t4953 = t4934 + t4937 + t4952;
  t4862 = -1.*t4698;
  t4957 = -2.8e-11*t4700;
  t4847 = -7.e-6*t4698;
  t4922 = 4.e-6*t4698;
  t4961 = -7.e-6*t4700;
  t4919 = 7.e-6*t4698;
  t4972 = 4.e-6*t4700;
  t5024 = 2.8e-11*t4773;
  t5084 = 1. + t4862;
  t5040 = 7.e-6*t4740;
  t5053 = 4.e-6*t4740;
  t5095 = -1. + t4698;
  t5096 = 4.e-6*t5095;
  t5014 = -7.e-6*t4740;
  t5088 = 7.e-6*t5084;
  t5167 = 2.8e-11*t5084;
  t5194 = -2.8e-11*t4773;
  t5068 = -4.e-6*t4740;
  t5115 = t5040 + t4938;
  t5122 = t5115*t463;
  t5127 = -6.5e-11*t4773*t4817;
  t5137 = t5053 + t4903;
  t5143 = t5137*t4830;
  t5155 = t5122 + t5127 + t5143;
  t5180 = -1.000000000049*t4773*t463;
  t5187 = t5014 + t4938;
  t5193 = t5187*t4817;
  t5202 = t4761 + t5194;
  t5203 = t5202*t4830;
  t5204 = t5180 + t5193 + t5203;
  t5266 = t4740 + t5194;
  t5270 = t5266*t463;
  t5273 = t5068 + t4903;
  t5274 = t5273*t4817;
  t5276 = -1.000000000016*t4773*t4830;
  t5279 = t5270 + t5274 + t5276;
  t5311 = -2.8e-11*t5084;
  t5168 = -1.*t4700;
  t5376 = 4.e-6*t5084;
  t5295 = -7.e-6*t5084;
  t5428 = -1.*t4812;
  t5437 = 1. + t5428;
  t5441 = -0.15121*t5437;
  t5471 = 7.e-6*t4762;
  t5083 = 2.826290000000002e-7*var2[17];
  t5085 = -2.18904205e-16*t5084;
  t5089 = t5088 + t4972;
  t5092 = -0.5031510000080001*t5089;
  t5097 = t5096 + t4714;
  t5101 = -0.038575000014*t5097;
  t5105 = t5083 + t5085 + t5092 + t5101;
  t5507 = -1.*t4812*t479*t491;
  t5509 = t479*t4807*t511;
  t5513 = t5507 + t5509;
  t5160 = 1.1305160000000008e-12*var2[17];
  t5164 = -0.03857500001589017*t5084;
  t5169 = t5167 + t5168;
  t5171 = -0.5031510000080001*t5169;
  t5174 = t5096 + t4961;
  t5175 = -3.367757e-6*t5174;
  t5177 = t5160 + t5164 + t5171 + t5175;
  t5214 = -1.9784030000000015e-12*var2[17];
  t5215 = -0.5031510000160505*t5084;
  t5216 = t5088 + t4852;
  t5217 = -3.367757e-6*t5216;
  t5225 = t5167 + t4700;
  t5258 = -0.038575000014*t5225;
  t5259 = t5214 + t5215 + t5217 + t5258;
  t5302 = t5295 + t4852;
  t5516 = t4943*t4817;
  t5519 = t4936*t5513;
  t5523 = t5516 + t5519;
  t5327 = t5311 + t4700;
  t5533 = t4914*t4817;
  t5543 = t4909*t5513;
  t5545 = t5533 + t5543;
  t5342 = -1.000000000016*t5084;
  t5344 = 1. + t5342;
  t5548 = t4820*t4817;
  t5553 = t4799*t5513;
  t5557 = t5548 + t5553;
  t5377 = t5376 + t4961;
  t5385 = -1.000000000049*t5084;
  t5388 = 1. + t5385;
  t5391 = t5311 + t5168;
  t5402 = -6.5e-11*t5084;
  t5404 = 1. + t5402;
  t5406 = t5376 + t4714;
  t5412 = t5295 + t4972;
  t5447 = -0.15121*t4807;
  t5455 = -2.7726089999999997e-12*var2[16];
  t5456 = -0.2812110000084994*t4762;
  t5475 = t5471 + t4789;
  t5477 = -1.8134809999999998e-6*t5475;
  t5478 = 2.8e-11*t4762;
  t5480 = t5478 + t4773;
  t5481 = -0.038749000006999997*t5480;
  t5482 = t5455 + t5456 + t5477 + t5481;
  t5483 = t5482*t4817;
  t5484 = 3.9608699999999997e-7*var2[16];
  t5485 = -1.1787626499999999e-16*t4762;
  t5488 = t5471 + t4938;
  t5489 = -0.281211000004*t5488;
  t5493 = -1. + t4740;
  t5496 = 4.e-6*t5493;
  t5498 = t5496 + t4932;
  t5502 = -0.038749000006999997*t5498;
  t5506 = t5484 + t5485 + t5489 + t5502;
  t5515 = t5506*t5513;
  t5525 = t5105*t5523;
  t5547 = t5177*t5545;
  t5565 = t5259*t5557;
  t5566 = t5302*t5523;
  t5567 = t5327*t5545;
  t5570 = t5344*t5557;
  t5572 = t5566 + t5567 + t5570;
  t5573 = -0.80315*t5572;
  t5577 = t5377*t5523;
  t5578 = t5388*t5545;
  t5579 = t5391*t5557;
  t5580 = t5577 + t5578 + t5579;
  t5583 = -0.038576*t5580;
  t5591 = t5404*t5523;
  t5592 = t5406*t5545;
  t5593 = t5412*t5557;
  t5594 = t5591 + t5592 + t5593;
  t5598 = -0.148715*t5594;
  t5449 = t5441 + t5447;
  t5443 = 0.15121*t4807;
  t5444 = t5441 + t5443;
  t5677 = t491*t4807*t463;
  t5684 = t4812*t463*t511;
  t5686 = t5677 + t5684;
  t5693 = -1.*t4812*t491*t463;
  t5694 = t4807*t463*t511;
  t5708 = t5693 + t5694;
  t5710 = t479*t4774;
  t5711 = t4799*t5686;
  t5712 = t4820*t5708;
  t5715 = t5710 + t5711 + t5712;
  t5726 = t4899*t479;
  t5728 = t4909*t5686;
  t5735 = t4914*t5708;
  t5736 = t5726 + t5728 + t5735;
  t5740 = t479*t4933;
  t5742 = t4936*t5686;
  t5747 = t4943*t5708;
  t5749 = t5740 + t5742 + t5747;
  t5649 = 1.5843479999999999e-12*var2[16];
  t5652 = -0.03874900000889869*t4762;
  t5658 = t5478 + t4913;
  t5659 = -0.281211000004*t5658;
  t5661 = t5496 + t4903;
  t5662 = -1.8134809999999998e-6*t5661;
  t5664 = t5649 + t5652 + t5659 + t5662;
  t5838 = -1.*t479*t491*t4807*t2075;
  t5843 = -1.*t4812*t479*t2075*t511;
  t5846 = t5838 + t5843;
  t5849 = t4812*t479*t491*t2075;
  t5851 = -1.*t479*t4807*t2075*t511;
  t5854 = t5849 + t5851;
  t5862 = t4774*t2075*t463;
  t5863 = t4799*t5846;
  t5864 = t4820*t5854;
  t5867 = t5862 + t5863 + t5864;
  t5872 = t4899*t2075*t463;
  t5873 = t4909*t5846;
  t5876 = t4914*t5854;
  t5877 = t5872 + t5873 + t5876;
  t5879 = t4933*t2075*t463;
  t5883 = t4936*t5846;
  t5884 = t4943*t5854;
  t5885 = t5879 + t5883 + t5884;
  t5932 = -1.*t4807*t2407;
  t5933 = t4812*t2432;
  t5935 = t5932 + t5933;
  t5938 = t4812*t2407;
  t5939 = t4807*t2432;
  t5940 = t5938 + t5939;
  t5943 = -1.*t2375*t479*t4774;
  t5948 = t4799*t5935;
  t5949 = t4820*t5940;
  t5950 = t5943 + t5948 + t5949;
  t5952 = -1.*t4899*t2375*t479;
  t5958 = t4909*t5935;
  t5961 = t4914*t5940;
  t5969 = t5952 + t5958 + t5961;
  t5972 = -1.*t2375*t479*t4933;
  t5982 = t4936*t5935;
  t5985 = t4943*t5940;
  t5986 = t5972 + t5982 + t5985;
  t6024 = t4807*t2850;
  t6025 = t4812*t2868;
  t6028 = t6024 + t6025;
  t6031 = t4812*t2850;
  t6034 = -1.*t4807*t2868;
  t6036 = t6031 + t6034;
  t6039 = t4943*t6028;
  t6045 = t4936*t6036;
  t6046 = t6039 + t6045;
  t6049 = t4914*t6028;
  t6050 = t4909*t6036;
  t6056 = t6049 + t6050;
  t6058 = t4820*t6028;
  t6059 = t4799*t6036;
  t6060 = t6058 + t6059;
  t5606 = -0.15121*t4812;
  t5607 = t5606 + t5447;
  t5622 = 0.15121*t4812;
  t5623 = t5622 + t5447;
  t6096 = -1.*t4807*t3174;
  t6098 = t6096 + t6025;
  t6100 = -1.*t4812*t3174;
  t6102 = t6100 + t6034;
  t6110 = t4943*t6098;
  t6111 = t4936*t6102;
  t6118 = t6110 + t6111;
  t6121 = t4914*t6098;
  t6125 = t4909*t6102;
  t6130 = t6121 + t6125;
  t6143 = t4820*t6098;
  t6146 = t4799*t6102;
  t6148 = t6143 + t6146;
  t4705 = t4698 + t4701;
  t4708 = -0.038575000014*t4705;
  t4718 = t4712 + t4714;
  t4723 = -3.367757e-6*t4718;
  t4726 = -0.5031510000160505*t4700;
  t4732 = -1.9784030000000015e-12 + t4708 + t4723 + t4726;
  t4857 = t4847 + t4852;
  t4860 = -3.367757e-6*t4857;
  t4870 = t4862 + t4701;
  t4871 = -0.5031510000080001*t4870;
  t4879 = -0.03857500001589017*t4700;
  t4888 = 1.1305160000000008e-12 + t4860 + t4871 + t4879;
  t6213 = t4812*t3174;
  t6215 = t4807*t2868;
  t6217 = t6213 + t6215;
  t4920 = t4919 + t4852;
  t4921 = -0.038575000014*t4920;
  t4924 = t4922 + t4714;
  t4925 = -0.5031510000080001*t4924;
  t4928 = -2.18904205e-16*t4700;
  t4931 = 2.826290000000002e-7 + t4921 + t4925 + t4928;
  t6210 = -1.*t479*t4774*t2075;
  t6212 = t4799*t6098;
  t6225 = t4820*t6217;
  t6227 = t6210 + t6212 + t6225;
  t4958 = t4698 + t4957;
  t6230 = -1.*t4899*t479*t2075;
  t6234 = t4909*t6098;
  t6236 = t4914*t6217;
  t6237 = t6230 + t6234 + t6236;
  t4962 = t4712 + t4961;
  t6244 = -1.*t479*t4933*t2075;
  t6245 = t4936*t6098;
  t6246 = t4943*t6217;
  t6251 = t6244 + t6245 + t6246;
  t4967 = t4862 + t4957;
  t4973 = t4847 + t4972;
  t4984 = t4922 + t4961;
  t4994 = t4919 + t4972;
  t5015 = t5014 + t4789;
  t5017 = -1.8134809999999998e-6*t5015;
  t5025 = t4761 + t5024;
  t5026 = -0.281211000004*t5025;
  t5027 = -0.03874900000889869*t4773;
  t5032 = 1.5843479999999999e-12 + t5017 + t5026 + t5027;
  t5046 = t5040 + t4789;
  t5051 = -0.038749000006999997*t5046;
  t5054 = t5053 + t4932;
  t5055 = -0.281211000004*t5054;
  t5056 = -1.1787626499999999e-16*t4773;
  t5059 = 3.9608699999999997e-7 + t5051 + t5055 + t5056;
  t5062 = t4740 + t5024;
  t5064 = -0.038749000006999997*t5062;
  t5069 = t5068 + t4932;
  t5071 = -1.8134809999999998e-6*t5069;
  t5076 = -0.2812110000084994*t4773;
  t5077 = -2.7726089999999997e-12 + t5064 + t5071 + t5076;
  t6307 = -1.*t479*t5115*t2075;
  t6310 = -6.5e-11*t4773*t6098;
  t6312 = t5137*t6217;
  t6315 = t6307 + t6310 + t6312;
  t6319 = 1.000000000049*t479*t4773*t2075;
  t6324 = t5187*t6098;
  t6326 = t5202*t6217;
  t6327 = t6319 + t6324 + t6326;
  t6330 = -1.*t479*t5266*t2075;
  t6332 = t5273*t6098;
  t6333 = -1.000000000016*t4773*t6217;
  t6334 = t6330 + t6332 + t6333;
  t6411 = t2375*t479*t491*t4807;
  t6415 = t4812*t2375*t479*t511;
  t6418 = t6411 + t6415;
  t6427 = -1.*t4812*t2375*t479*t491;
  t6428 = t2375*t479*t4807*t511;
  t6429 = t6427 + t6428;
  t6434 = -1.*t2375*t4774*t463;
  t6435 = t4799*t6418;
  t6436 = t4820*t6429;
  t6438 = t6434 + t6435 + t6436;
  t6440 = -1.*t4899*t2375*t463;
  t6442 = t4909*t6418;
  t6443 = t4914*t6429;
  t6444 = t6440 + t6442 + t6443;
  t6448 = -1.*t2375*t4933*t463;
  t6449 = t4936*t6418;
  t6454 = t4943*t6429;
  t6457 = t6448 + t6449 + t6454;
  t6500 = t4807*t2407;
  t6502 = t4812*t3937;
  t6503 = t6500 + t6502;
  t6507 = -1.*t4807*t3937;
  t6511 = t5938 + t6507;
  t6515 = t4943*t6503;
  t6516 = t4936*t6511;
  t6524 = t6515 + t6516;
  t6530 = t4914*t6503;
  t6548 = t4909*t6511;
  t6553 = t6530 + t6548;
  t6556 = t4820*t6503;
  t6559 = t4799*t6511;
  t6560 = t6556 + t6559;
  t6598 = -1.*t4807*t4106;
  t6599 = t6598 + t6502;
  t6607 = -1.*t4812*t4106;
  t6608 = t6607 + t6507;
  t6610 = t4943*t6599;
  t6611 = t4936*t6608;
  t6612 = t6610 + t6611;
  t6614 = t4914*t6599;
  t6619 = t4909*t6608;
  t6620 = t6614 + t6619;
  t6624 = t4820*t6599;
  t6625 = t4799*t6608;
  t6628 = t6624 + t6625;
  t6700 = t4812*t4106;
  t6702 = t4807*t3937;
  t6705 = t6700 + t6702;
  t6697 = t2375*t479*t4774;
  t6699 = t4799*t6599;
  t6706 = t4820*t6705;
  t6709 = t6697 + t6699 + t6706;
  t6715 = t4899*t2375*t479;
  t6719 = t4909*t6599;
  t6721 = t4914*t6705;
  t6724 = t6715 + t6719 + t6721;
  t6729 = t2375*t479*t4933;
  t6737 = t4936*t6599;
  t6741 = t4943*t6705;
  t6743 = t6729 + t6737 + t6741;
  t6835 = t2375*t479*t5115;
  t6838 = -6.5e-11*t4773*t6599;
  t6845 = t5137*t6705;
  t6846 = t6835 + t6838 + t6845;
  t6851 = -1.000000000049*t2375*t479*t4773;
  t6852 = t5187*t6599;
  t6853 = t5202*t6705;
  t6855 = t6851 + t6852 + t6853;
  t6860 = t2375*t479*t5266;
  t6867 = t5273*t6599;
  t6873 = -1.000000000016*t4773*t6705;
  t6875 = t6860 + t6867 + t6873;
  t7153 = Power(t479,2);
  t7160 = Power(t491,2);
  t7164 = t7153*t7160;
  t7166 = Power(t3174,2);
  t7167 = t7164 + t7166;
  t7169 = 1/t7167;
  t3797 = -1.*t2375*t479*t491*t1251;
  t3799 = t2375*t479*t1244*t511;
  t4107 = t1515*t4106;
  t4108 = t1521*t3937;
  t3933 = t1244*t2407;
  t3939 = t1251*t3937;
  t4547 = t1251*t3174;
  t4553 = t1244*t2868;
  p_output1[0]=var3[0] + (t1301*t1607 + t1277*t1621 + t1545*t479 - 1.*t1251*t463*t491 + t1244*t463*t511 - 0.041195*(t1680*t672 + 4.e-6*t1732*t678 - 1.*t1648*t701) + t1680*t709 + t1732*t800 + t1648*t839 + 0.803147*(t1680*t701 - 4.e-6*t1732*t701 + t1648*t871) - 0.14871*(4.e-6*t1680*t678 + 4.e-6*t1648*t701 + t1732*t928))*var3[4] + (t1286 + t1348 + t1395 + t1450 + t1464 + t1476 + t1493 + t1501 - 1.*t1244*t479*t491 - 1.*t1251*t479*t511)*var3[5] + (t1286 + t1348 + t1395 + t1450 + t1464 + t1476 + t1493 + t1501 + t1515*t479*t491 - 1.*t1521*t479*t511)*var3[9] + (t459*t463 + t474*t516 + t572*t654 + t709*t764 + t800*t827 + t839*t859 - 0.041195*(t672*t764 + 4.e-6*t678*t827 - 1.*t701*t859) + 0.803147*(t701*t764 - 4.e-6*t701*t827 + t859*t871) - 0.14871*(4.e-6*t678*t764 + 4.e-6*t701*t859 + t827*t928))*var3[10] + (t1037*t1065 + t1082*t1090 + 0.803147*(t1065*t672 - 4.e-6*t1090*t672 - 1.000000000016*t1019*t701) - 0.14871*(4.e-6*t1019*t672 + 4.e-6*t1065*t701 - 1.6e-11*t1090*t701) - 0.041195*(-1.*t1019*t672 - 1.*t1065*t701 + 4.e-6*t1090*t701) + t1019*t987)*var3[11] + 5.*t266*t409*var4[0] + 20.*t169*t376*t391*var4[10] - 5.*t266*t409*var4[10] + 30.*t345*t348*t355*var4[20] - 20.*t169*t376*t391*var4[20] + 20.*t249*t264*t269*var4[30] - 30.*t345*t348*t355*var4[30] - 20.*t249*t264*t269*var4[40] + 5.*t226*t55*var4[40] - 5.*t226*t55*var4[50];
  p_output1[1]=var3[1] + (t1251*t2407 + t1244*t2432 + t1301*t2480 + t1277*t2540 - 1.*t1545*t2375*t479 - 0.041195*(t2649*t672 + 4.e-6*t2708*t678 - 1.*t2605*t701) + t2649*t709 + t2708*t800 + t2605*t839 + 0.803147*(t2649*t701 - 4.e-6*t2708*t701 + t2605*t871) - 0.14871*(4.e-6*t2649*t678 + 4.e-6*t2605*t701 + t2708*t928))*var3[3] + (t1301*t2131 + t1277*t2170 + t1545*t2075*t463 + t1251*t2075*t479*t491 - 1.*t1244*t2075*t479*t511 - 0.041195*(t2239*t672 + 4.e-6*t2271*t678 - 1.*t2232*t701) + t2239*t709 + t2271*t800 + t2232*t839 + 0.803147*(t2239*t701 - 4.e-6*t2271*t701 + t2232*t871) - 0.14871*(4.e-6*t2239*t678 + 4.e-6*t2232*t701 + t2271*t928))*var3[4] + (t1244*t2850 + t1251*t2868 + t1277*t2897 + t1301*t2944 - 0.041195*(t3012*t672 + 4.e-6*t2983*t678 - 1.*t3038*t701) + t3012*t709 + t2983*t800 + t3038*t839 + 0.803147*(-4.e-6*t2983*t701 + t3012*t701 + t3038*t871) - 0.14871*(4.e-6*t3012*t678 + 4.e-6*t3038*t701 + t2983*t928))*var3[5] + (t1521*t2868 + t1515*t3174 + t1277*t3203 + t1301*t3229 - 0.041195*(t3275*t672 + 4.e-6*t3257*t678 - 1.*t3295*t701) + t3275*t709 + t3257*t800 + t3295*t839 + 0.803147*(-4.e-6*t3257*t701 + t3275*t701 + t3295*t871) - 0.14871*(4.e-6*t3275*t678 + 4.e-6*t3295*t701 + t3257*t928))*var3[9] + (t3203*t474 - 1.*t2075*t459*t479 + t3407*t572 - 0.041195*(t3452*t672 + 4.e-6*t3487*t678 - 1.*t3506*t701) + t3452*t709 + t3487*t800 + t3506*t839 + 0.803147*(t3452*t701 - 4.e-6*t3487*t701 + t3506*t871) - 0.14871*(4.e-6*t3452*t678 + 4.e-6*t3506*t701 + t3487*t928))*var3[10] + (t1037*t3689 + t1082*t3699 + 0.803147*(t3718 - 4.e-6*t3699*t672 - 1.000000000016*t3644*t701) - 0.14871*(4.e-6*t3644*t672 + 4.e-6*t3689*t701 - 1.6e-11*t3699*t701) - 0.041195*(-1.*t3644*t672 - 1.*t3689*t701 + 4.e-6*t3699*t701) + t3644*t987)*var3[11] + 5.*t266*t409*var4[1] + 20.*t169*t376*t391*var4[11] - 5.*t266*t409*var4[11] + 30.*t345*t348*t355*var4[21] - 20.*t169*t376*t391*var4[21] + 20.*t249*t264*t269*var4[31] - 30.*t345*t348*t355*var4[31] - 20.*t249*t264*t269*var4[41] + 5.*t226*t55*var4[41] - 5.*t226*t55*var4[51];
  p_output1[2]=var3[2] + (t1301*t3203 + t1277*t3407 + t4547 + t4553 - 1.*t1545*t2075*t479 - 0.041195*(t3718 + 4.e-6*t3699*t678 - 1.*t3644*t701) + t3689*t709 + t3699*t800 + t3644*t839 + 0.803147*(t3689*t701 - 4.e-6*t3699*t701 + t3644*t871) - 0.14871*(4.e-6*t3689*t678 + 4.e-6*t3644*t701 + t3699*t928))*var3[3] + (t3797 + t3799 + t1301*t3807 + t1277*t3814 - 1.*t1545*t2375*t463 - 0.041195*(t3829*t672 + 4.e-6*t3840*t678 - 1.*t3822*t701) + t3829*t709 + t3840*t800 + t3822*t839 + 0.803147*(t3829*t701 - 4.e-6*t3840*t701 + t3822*t871) - 0.14871*(4.e-6*t3829*t678 + 4.e-6*t3822*t701 + t3840*t928))*var3[4] + (t3933 + t3939 + t1277*t3946 + t1301*t3949 - 0.041195*(t3969*t672 + 4.e-6*t3958*t678 - 1.*t3978*t701) + t3969*t709 + t3958*t800 + t3978*t839 + 0.803147*(-4.e-6*t3958*t701 + t3969*t701 + t3978*t871) - 0.14871*(4.e-6*t3969*t678 + 4.e-6*t3978*t701 + t3958*t928))*var3[5] + (t4107 + t4108 + t1277*t4114 + t1301*t4117 - 0.041195*(t4135*t672 + 4.e-6*t4130*t678 - 1.*t4151*t701) + t4135*t709 + t4130*t800 + t4151*t839 + 0.803147*(-4.e-6*t4130*t701 + t4135*t701 + t4151*t871) - 0.14871*(4.e-6*t4135*t678 + 4.e-6*t4151*t701 + t4130*t928))*var3[9] + (t4114*t474 + t2375*t459*t479 + t4292*t572 - 0.041195*(t4301*t672 + 4.e-6*t4316*t678 - 1.*t4327*t701) + t4301*t709 + t4316*t800 + t4327*t839 + 0.803147*(t4301*t701 - 4.e-6*t4316*t701 + t4327*t871) - 0.14871*(4.e-6*t4301*t678 + 4.e-6*t4327*t701 + t4316*t928))*var3[10] + (t1037*t4460 + t1082*t4472 + 0.803147*(t4460*t672 - 4.e-6*t4472*t672 - 1.000000000016*t4453*t701) - 0.14871*(4.e-6*t4453*t672 + 4.e-6*t4460*t701 - 1.6e-11*t4472*t701) - 0.041195*(-1.*t4453*t672 - 1.*t4460*t701 + 4.e-6*t4472*t701) + t4453*t987)*var3[11] + 5.*t266*t409*var4[2] + 20.*t169*t376*t391*var4[12] - 5.*t266*t409*var4[12] + 30.*t345*t348*t355*var4[22] - 20.*t169*t376*t391*var4[22] + 20.*t249*t264*t269*var4[32] - 30.*t345*t348*t355*var4[32] - 20.*t249*t264*t269*var4[42] + 5.*t226*t55*var4[42] - 5.*t226*t55*var4[52];
  p_output1[3]=var3[0] + (t463*t511*t5444 - 1.*t463*t491*t5449 + t479*t5664 + t5506*t5686 + t5482*t5708 + t5259*t5715 + t5177*t5736 + t5105*t5749 - 0.80315*(t5344*t5715 + t5327*t5736 + t5302*t5749) - 0.038576*(t5391*t5715 + t5388*t5736 + t5377*t5749) - 0.148715*(t5412*t5715 + t5406*t5736 + t5404*t5749))*var3[4] + (-1.*t479*t491*t5444 - 1.*t479*t511*t5449 + t5483 + t5515 + t5525 + t5547 + t5565 + t5573 + t5583 + t5598)*var3[5] + (t5483 + t5515 + t5525 + t5547 + t5565 + t5573 + t5583 + t5598 + t479*t491*t5607 - 1.*t479*t511*t5623)*var3[15] + (t463*t5032 + t4817*t5059 + t4830*t5077 + t5105*t5155 + t5177*t5204 + t5259*t5279 - 0.80315*(t5155*t5302 + t5204*t5327 + t5279*t5344) - 0.038576*(t5155*t5377 + t5204*t5388 + t5279*t5391) - 0.148715*(t5155*t5404 + t5204*t5406 + t5279*t5412))*var3[16] + (t4732*t4842 + t4888*t4917 + t4931*t4953 - 0.80315*(-1.000000000016*t4700*t4842 + t4917*t4958 + t4953*t4962) - 0.038576*(-1.000000000049*t4700*t4917 + t4842*t4967 + t4953*t4973) - 0.148715*(-6.5e-11*t4700*t4953 + t4842*t4984 + t4917*t4994))*var3[17] + 5.*t266*t409*var4[3] + 20.*t169*t376*t391*var4[13] - 5.*t266*t409*var4[13] + 30.*t345*t348*t355*var4[23] - 20.*t169*t376*t391*var4[23] + 20.*t249*t264*t269*var4[33] - 30.*t345*t348*t355*var4[33] - 20.*t249*t264*t269*var4[43] + 5.*t226*t55*var4[43] - 5.*t226*t55*var4[53];
  p_output1[4]=var3[1] + (t2432*t5444 + t2407*t5449 - 1.*t2375*t479*t5664 + t5506*t5935 + t5482*t5940 + t5259*t5950 + t5177*t5969 + t5105*t5986 - 0.80315*(t5344*t5950 + t5327*t5969 + t5302*t5986) - 0.038576*(t5391*t5950 + t5388*t5969 + t5377*t5986) - 0.148715*(t5412*t5950 + t5406*t5969 + t5404*t5986))*var3[3] + (-1.*t2075*t479*t511*t5444 + t2075*t479*t491*t5449 + t2075*t463*t5664 + t5506*t5846 + t5482*t5854 + t5259*t5867 + t5177*t5877 + t5105*t5885 - 0.80315*(t5344*t5867 + t5327*t5877 + t5302*t5885) - 0.038576*(t5391*t5867 + t5388*t5877 + t5377*t5885) - 0.148715*(t5412*t5867 + t5406*t5877 + t5404*t5885))*var3[4] + (t2850*t5444 + t2868*t5449 + t5482*t6028 + t5506*t6036 + t5105*t6046 + t5177*t6056 + t5259*t6060 - 0.80315*(t5302*t6046 + t5327*t6056 + t5344*t6060) - 0.038576*(t5377*t6046 + t5388*t6056 + t5391*t6060) - 0.148715*(t5404*t6046 + t5406*t6056 + t5412*t6060))*var3[5] + (t3174*t5607 + t2868*t5623 + t5482*t6098 + t5506*t6102 + t5105*t6118 + t5177*t6130 + t5259*t6148 - 0.80315*(t5302*t6118 + t5327*t6130 + t5344*t6148) - 0.038576*(t5377*t6118 + t5388*t6130 + t5391*t6148) - 0.148715*(t5404*t6118 + t5406*t6130 + t5412*t6148))*var3[15] + (-1.*t2075*t479*t5032 + t5059*t6098 + t5077*t6217 + t5105*t6315 + t5177*t6327 + t5259*t6334 - 0.80315*(t5302*t6315 + t5327*t6327 + t5344*t6334) - 0.038576*(t5377*t6315 + t5388*t6327 + t5391*t6334) - 0.148715*(t5404*t6315 + t5406*t6327 + t5412*t6334))*var3[16] + (t4732*t6227 + t4888*t6237 + t4931*t6251 - 0.148715*(t4984*t6227 + t4994*t6237 - 6.5e-11*t4700*t6251) - 0.80315*(-1.000000000016*t4700*t6227 + t4958*t6237 + t4962*t6251) - 0.038576*(t4967*t6227 - 1.000000000049*t4700*t6237 + t4973*t6251))*var3[17] + 5.*t266*t409*var4[4] + 20.*t169*t376*t391*var4[14] - 5.*t266*t409*var4[14] + 30.*t345*t348*t355*var4[24] - 20.*t169*t376*t391*var4[24] + 20.*t249*t264*t269*var4[34] - 30.*t345*t348*t355*var4[34] - 20.*t249*t264*t269*var4[44] + 5.*t226*t55*var4[44] - 5.*t226*t55*var4[54];
  p_output1[5]=var3[2] + (t2868*t5444 + t3174*t5449 - 1.*t2075*t479*t5664 + t5506*t6098 + t5482*t6217 + t5259*t6227 + t5177*t6237 + t5105*t6251 - 0.80315*(t5344*t6227 + t5327*t6237 + t5302*t6251) - 0.038576*(t5391*t6227 + t5388*t6237 + t5377*t6251) - 0.148715*(t5412*t6227 + t5406*t6237 + t5404*t6251))*var3[3] + (t2375*t479*t511*t5444 - 1.*t2375*t479*t491*t5449 - 1.*t2375*t463*t5664 + t5506*t6418 + t5482*t6429 + t5259*t6438 + t5177*t6444 + t5105*t6457 - 0.80315*(t5344*t6438 + t5327*t6444 + t5302*t6457) - 0.038576*(t5391*t6438 + t5388*t6444 + t5377*t6457) - 0.148715*(t5412*t6438 + t5406*t6444 + t5404*t6457))*var3[4] + (t2407*t5444 + t3937*t5449 + t5482*t6503 + t5506*t6511 + t5105*t6524 + t5177*t6553 + t5259*t6560 - 0.80315*(t5302*t6524 + t5327*t6553 + t5344*t6560) - 0.038576*(t5377*t6524 + t5388*t6553 + t5391*t6560) - 0.148715*(t5404*t6524 + t5406*t6553 + t5412*t6560))*var3[5] + (t4106*t5607 + t3937*t5623 + t5482*t6599 + t5506*t6608 + t5105*t6612 + t5177*t6620 + t5259*t6628 - 0.80315*(t5302*t6612 + t5327*t6620 + t5344*t6628) - 0.038576*(t5377*t6612 + t5388*t6620 + t5391*t6628) - 0.148715*(t5404*t6612 + t5406*t6620 + t5412*t6628))*var3[15] + (t2375*t479*t5032 + t5059*t6599 + t5077*t6705 + t5105*t6846 + t5177*t6855 + t5259*t6875 - 0.80315*(t5302*t6846 + t5327*t6855 + t5344*t6875) - 0.038576*(t5377*t6846 + t5388*t6855 + t5391*t6875) - 0.148715*(t5404*t6846 + t5406*t6855 + t5412*t6875))*var3[16] + (t4732*t6709 + t4888*t6724 + t4931*t6743 - 0.148715*(t4984*t6709 + t4994*t6724 - 6.5e-11*t4700*t6743) - 0.80315*(-1.000000000016*t4700*t6709 + t4958*t6724 + t4962*t6743) - 0.038576*(t4967*t6709 - 1.000000000049*t4700*t6724 + t4973*t6743))*var3[17] + 5.*t266*t409*var4[5] + 20.*t169*t376*t391*var4[15] - 5.*t266*t409*var4[15] + 30.*t345*t348*t355*var4[25] - 20.*t169*t376*t391*var4[25] + 20.*t249*t264*t269*var4[35] - 30.*t345*t348*t355*var4[35] - 20.*t249*t264*t269*var4[45] + 5.*t226*t55*var4[45] - 5.*t226*t55*var4[55];
  p_output1[6]=var3[1] + (0.00183*t2407 - 0.002264*t2432 + 0.024028*t2375*t479)*var3[3] + (-0.024028*t2075*t463 + 0.00183*t2075*t479*t491 + 0.002264*t2075*t479*t511)*var3[4] + (-0.002264*t2850 + 0.00183*t2868)*var3[5] + 5.*t266*t409*var4[6] + 20.*t169*t376*t391*var4[16] - 5.*t266*t409*var4[16] + 30.*t345*t348*t355*var4[26] - 20.*t169*t376*t391*var4[26] + 20.*t249*t264*t269*var4[36] - 30.*t345*t348*t355*var4[36] - 20.*t249*t264*t269*var4[46] + 5.*t226*t55*var4[46] - 5.*t226*t55*var4[56];
  p_output1[7]=var3[2] + (-0.002264*t2868 + 0.00183*t3174 + 0.024028*t2075*t479)*var3[3] + (0.024028*t2375*t463 - 0.00183*t2375*t479*t491 - 0.002264*t2375*t479*t511)*var3[4] + (-0.002264*t2407 + 0.00183*t3937)*var3[5] + 5.*t266*t409*var4[7] + 20.*t169*t376*t391*var4[17] - 5.*t266*t409*var4[17] + 30.*t345*t348*t355*var4[27] - 20.*t169*t376*t391*var4[27] + 20.*t249*t264*t269*var4[37] - 30.*t345*t348*t355*var4[37] - 20.*t249*t264*t269*var4[47] + 5.*t226*t55*var4[47] - 5.*t226*t55*var4[57];
  p_output1[8]=t2407*t479*t491*t7169*var3[3] + (-1.*t2850*t463*t491*t7169 + t2075*t7153*t7160*t7169)*var3[4] + (t2868*t479*t491*t7169 - 1.*t2850*t479*t511*t7169)*var3[5] + 5.*t266*t409*var4[8] + 20.*t169*t376*t391*var4[18] - 5.*t266*t409*var4[18] + 30.*t345*t348*t355*var4[28] - 20.*t169*t376*t391*var4[28] + 20.*t249*t264*t269*var4[38] - 30.*t345*t348*t355*var4[38] - 20.*t249*t264*t269*var4[48] + 5.*t226*t55*var4[48] - 5.*t226*t55*var4[58];
  p_output1[9]=(-0.15121*t3203 + 0.15121*t3407 + t4547 + t4553 - 1.*t2868*t5444 - 1.*t3174*t5449 + 0.15121*t6098 + 0.15121*t6217)*var3[3] + (t3797 + t3799 - 0.15121*t3807 + 0.15121*t3814 - 1.*t2375*t479*t511*t5444 + t2375*t479*t491*t5449 + 0.15121*t6418 + 0.15121*t6429)*var3[4] + (t3933 + t3939 + 0.15121*t3946 - 0.15121*t3949 - 1.*t2407*t5444 - 1.*t3937*t5449 + 0.15121*t6503 + 0.15121*t6511)*var3[5] + (t4107 + t4108 + 0.15121*t4114 - 0.15121*t4117)*var3[9] + (-1.*t4106*t5607 - 1.*t3937*t5623 + 0.15121*t6599 + 0.15121*t6608)*var3[15] + 5.*t266*t409*var4[9] + 20.*t169*t376*t391*var4[19] - 5.*t266*t409*var4[19] + 30.*t345*t348*t355*var4[29] - 20.*t169*t376*t391*var4[29] + 20.*t249*t264*t269*var4[39] - 30.*t345*t348*t355*var4[39] - 20.*t249*t264*t269*var4[49] + 5.*t226*t55*var4[49] - 5.*t226*t55*var4[59];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4,*var5,*var6,*var7;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 7)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Seven input(s) required (var1,var2,var3,var4,var5,var6,var7).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 2 && ncols == 1) && 
      !(mrows == 1 && ncols == 2))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 60 && ncols == 1) && 
      !(mrows == 1 && ncols == 60))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }
  mrows = mxGetM(prhs[4]);
  ncols = mxGetN(prhs[4]);
  if( !mxIsDouble(prhs[4]) || mxIsComplex(prhs[4]) ||
    ( !(mrows == 2 && ncols == 1) && 
      !(mrows == 1 && ncols == 2))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var5 is wrong.");
    }
  mrows = mxGetM(prhs[5]);
  ncols = mxGetN(prhs[5]);
  if( !mxIsDouble(prhs[5]) || mxIsComplex(prhs[5]) ||
    ( !(mrows == 1 && ncols == 1) && 
      !(mrows == 1 && ncols == 1))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var6 is wrong.");
    }
  mrows = mxGetM(prhs[6]);
  ncols = mxGetN(prhs[6]);
  if( !mxIsDouble(prhs[6]) || mxIsComplex(prhs[6]) ||
    ( !(mrows == 1 && ncols == 1) && 
      !(mrows == 1 && ncols == 1))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var7 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
  var5 = mxGetPr(prhs[4]);
  var6 = mxGetPr(prhs[5]);
  var7 = mxGetPr(prhs[6]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 10, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4,var5,var6,var7);


}

#else // MATLAB_MEX_FILE

#include "d1y_position_ParallelStance2.hh"

namespace ParallelStance2
{

void d1y_position_ParallelStance2_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4,const double *var5,const double *var6,const double *var7)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4, var5, var6, var7);

}

}

#endif // MATLAB_MEX_FILE
