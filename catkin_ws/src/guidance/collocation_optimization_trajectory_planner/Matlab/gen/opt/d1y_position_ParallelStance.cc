/*
 * Automatically Generated from Mathematica.
 * Fri 12 Nov 2021 16:30:31 GMT+01:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4,const double *var5,const double *var6,const double *var7)
{
  double t8;
  double t22;
  double t37;
  double t38;
  double t43;
  double t44;
  double t47;
  double t50;
  double t53;
  double t56;
  double t57;
  double t70;
  double t71;
  double t73;
  double t76;
  double t89;
  double t112;
  double t118;
  double t121;
  double t134;
  double t141;
  double t158;
  double t227;
  double t179;
  double t204;
  double t251;
  double t238;
  double t244;
  double t258;
  double t293;
  double t296;
  double t300;
  double t169;
  double t249;
  double t269;
  double t271;
  double t356;
  double t357;
  double t358;
  double t362;
  double t377;
  double t390;
  double t394;
  double t395;
  double t411;
  double t412;
  double t414;
  double t424;
  double t328;
  double t329;
  double t338;
  double t343;
  double t465;
  double t545;
  double t630;
  double t639;
  double t641;
  double t644;
  double t646;
  double t648;
  double t535;
  double t546;
  double t585;
  double t588;
  double t692;
  double t693;
  double t700;
  double t703;
  double t705;
  double t707;
  double t939;
  double t944;
  double t946;
  double t1023;
  double t1052;
  double t1069;
  double t354;
  double t361;
  double t367;
  double t369;
  double t398;
  double t402;
  double t404;
  double t426;
  double t429;
  double t431;
  double t432;
  double t443;
  double t444;
  double t1114;
  double t1117;
  double t1122;
  double t1108;
  double t1109;
  double t1110;
  double t1133;
  double t1135;
  double t1136;
  double t472;
  double t473;
  double t999;
  double t1074;
  double t1080;
  double t1082;
  double t1083;
  double t1090;
  double t1099;
  double t1102;
  double t1106;
  double t1107;
  double t1112;
  double t1124;
  double t1140;
  double t1142;
  double t1145;
  double t1148;
  double t1151;
  double t1155;
  double t1160;
  double t1164;
  double t1166;
  double t1180;
  double t1225;
  double t1233;
  double t1267;
  double t1268;
  double t1281;
  double t1282;
  double t963;
  double t966;
  double t1008;
  double t1377;
  double t1392;
  double t1404;
  double t1444;
  double t1468;
  double t1473;
  double t1528;
  double t1530;
  double t1532;
  double t1539;
  double t1591;
  double t1601;
  double t1607;
  double t1609;
  double t1547;
  double t1552;
  double t1560;
  double t1567;
  double t1816;
  double t1482;
  double t1488;
  double t1491;
  double t1492;
  double t1842;
  double t1848;
  double t1860;
  double t1894;
  double t1896;
  double t1906;
  double t1910;
  double t1913;
  double t1921;
  double t1926;
  double t1947;
  double t1950;
  double t1953;
  double t1958;
  double t1930;
  double t1933;
  double t1935;
  double t1936;
  double t2062;
  double t2054;
  double t2064;
  double t2067;
  double t2070;
  double t2075;
  double t2080;
  double t2084;
  double t2092;
  double t2097;
  double t2109;
  double t2116;
  double t2117;
  double t2126;
  double t2129;
  double t2134;
  double t2140;
  double t2161;
  double t2162;
  double t2163;
  double t2164;
  double t2147;
  double t2148;
  double t2150;
  double t2152;
  double t2219;
  double t2220;
  double t2222;
  double t2240;
  double t2244;
  double t2245;
  double t2262;
  double t2277;
  double t2284;
  double t2290;
  double t2293;
  double t2307;
  double t2356;
  double t2360;
  double t2368;
  double t2329;
  double t2341;
  double t2346;
  double t2375;
  double t2377;
  double t2380;
  double t1306;
  double t1314;
  double t1321;
  double t1329;
  double t2434;
  double t2440;
  double t2441;
  double t2447;
  double t2449;
  double t2453;
  double t2454;
  double t2465;
  double t2466;
  double t2467;
  double t2457;
  double t2461;
  double t2463;
  double t2474;
  double t2476;
  double t2478;
  double t189;
  double t217;
  double t221;
  double t273;
  double t280;
  double t285;
  double t305;
  double t315;
  double t318;
  double t2599;
  double t2605;
  double t2609;
  double t2627;
  double t2632;
  double t2633;
  double t2634;
  double t2638;
  double t2639;
  double t2644;
  double t2645;
  double t2617;
  double t2618;
  double t2620;
  double t2621;
  double t597;
  double t600;
  double t603;
  double t658;
  double t663;
  double t672;
  double t710;
  double t711;
  double t724;
  double t2767;
  double t2770;
  double t2771;
  double t2777;
  double t2734;
  double t2741;
  double t2750;
  double t2751;
  double t2791;
  double t2792;
  double t2909;
  double t2912;
  double t2914;
  double t2921;
  double t2922;
  double t2924;
  double t2927;
  double t2930;
  double t2933;
  double t2936;
  double t2967;
  double t2973;
  double t2974;
  double t2981;
  double t2944;
  double t2949;
  double t2952;
  double t2955;
  double t3039;
  double t3041;
  double t3045;
  double t3060;
  double t3061;
  double t3073;
  double t3075;
  double t3078;
  double t3093;
  double t3100;
  double t3102;
  double t3083;
  double t3088;
  double t3089;
  double t3109;
  double t3112;
  double t3120;
  double t3183;
  double t3185;
  double t3187;
  double t3192;
  double t3195;
  double t3201;
  double t3202;
  double t3236;
  double t3238;
  double t3239;
  double t3221;
  double t3224;
  double t3229;
  double t3248;
  double t3251;
  double t3254;
  double t3322;
  double t3335;
  double t3336;
  double t3352;
  double t3353;
  double t3354;
  double t3361;
  double t3365;
  double t3367;
  double t3372;
  double t3342;
  double t3343;
  double t3346;
  double t3347;
  double t3430;
  double t3434;
  double t3435;
  double t3436;
  double t3421;
  double t3422;
  double t3423;
  double t3424;
  double t3441;
  double t3442;
  double t2821;
  double t2822;
  double t3629;
  double t3632;
  double t3651;
  double t3635;
  double t3675;
  double t3684;
  double t3681;
  double t3751;
  double t3752;
  double t3756;
  double t3764;
  double t3667;
  double t3682;
  double t3685;
  double t3687;
  double t3674;
  double t3743;
  double t3744;
  double t3748;
  double t3760;
  double t3650;
  double t3785;
  double t3849;
  double t3775;
  double t3702;
  double t3866;
  double t3715;
  double t3801;
  double t3897;
  double t3788;
  double t3789;
  double t3793;
  double t3803;
  double t3806;
  double t3819;
  double t3889;
  double t3859;
  double t3861;
  double t3865;
  double t3868;
  double t3869;
  double t3870;
  double t3912;
  double t3924;
  double t3933;
  double t3934;
  double t3938;
  double t3942;
  double t3768;
  double t3947;
  double t3778;
  double t3975;
  double t3976;
  double t3844;
  double t3955;
  double t4025;
  double t4035;
  double t4002;
  double t4087;
  double t4092;
  double t4026;
  double t4067;
  double t4028;
  double t4031;
  double t4032;
  double t4039;
  double t4040;
  double t4043;
  double t4046;
  double t4049;
  double t4051;
  double t4094;
  double t4096;
  double t4097;
  double t4099;
  double t4102;
  double t4105;
  double t4106;
  double t4109;
  double t4058;
  double t4156;
  double t4158;
  double t4159;
  double t4164;
  double t4165;
  double t4166;
  double t4174;
  double t4179;
  double t4008;
  double t4221;
  double t4130;
  double t4287;
  double t4288;
  double t4306;
  double t4339;
  double t3750;
  double t3759;
  double t3770;
  double t3773;
  double t3779;
  double t3781;
  double t3782;
  double t4375;
  double t4381;
  double t4385;
  double t3876;
  double t3884;
  double t3891;
  double t3895;
  double t3906;
  double t3908;
  double t3910;
  double t3828;
  double t3843;
  double t3845;
  double t3848;
  double t3852;
  double t3855;
  double t3856;
  double t3984;
  double t4393;
  double t4395;
  double t4397;
  double t3993;
  double t4406;
  double t4415;
  double t4416;
  double t3987;
  double t3991;
  double t4419;
  double t4420;
  double t4421;
  double t3948;
  double t3965;
  double t3967;
  double t3956;
  double t3972;
  double t3973;
  double t3980;
  double t3977;
  double t4478;
  double t4319;
  double t4328;
  double t4332;
  double t4336;
  double t4337;
  double t4342;
  double t4343;
  double t4346;
  double t4350;
  double t4351;
  double t4353;
  double t4354;
  double t4362;
  double t4364;
  double t4369;
  double t4371;
  double t4372;
  double t4389;
  double t4405;
  double t4418;
  double t4425;
  double t4429;
  double t4435;
  double t4437;
  double t4439;
  double t4441;
  double t4443;
  double t4445;
  double t4448;
  double t4452;
  double t4453;
  double t4461;
  double t4462;
  double t4466;
  double t4467;
  double t4468;
  double t4315;
  double t4316;
  double t4299;
  double t4308;
  double t4517;
  double t4520;
  double t4522;
  double t4532;
  double t4544;
  double t4551;
  double t4554;
  double t4556;
  double t4557;
  double t4562;
  double t4577;
  double t4579;
  double t4588;
  double t4591;
  double t4595;
  double t4598;
  double t4601;
  double t4602;
  double t4496;
  double t4500;
  double t4502;
  double t4505;
  double t4506;
  double t4508;
  double t4511;
  double t4718;
  double t4719;
  double t4720;
  double t4724;
  double t4725;
  double t4731;
  double t4734;
  double t4739;
  double t4744;
  double t4745;
  double t4747;
  double t4750;
  double t4751;
  double t4752;
  double t4760;
  double t4763;
  double t4764;
  double t4765;
  double t4840;
  double t4842;
  double t4844;
  double t4848;
  double t4850;
  double t4852;
  double t4856;
  double t4857;
  double t4859;
  double t4860;
  double t4864;
  double t4869;
  double t4874;
  double t4876;
  double t4884;
  double t4894;
  double t4895;
  double t4900;
  double t4962;
  double t4965;
  double t4966;
  double t4974;
  double t4980;
  double t4982;
  double t4994;
  double t4998;
  double t5000;
  double t5002;
  double t5004;
  double t5006;
  double t5015;
  double t5018;
  double t5019;
  double t4482;
  double t4483;
  double t4488;
  double t5055;
  double t5056;
  double t5066;
  double t5069;
  double t5075;
  double t5079;
  double t5080;
  double t5083;
  double t5088;
  double t5098;
  double t5104;
  double t5107;
  double t5111;
  double t3640;
  double t3644;
  double t3652;
  double t3657;
  double t3661;
  double t3664;
  double t3670;
  double t3672;
  double t3676;
  double t3677;
  double t3678;
  double t3679;
  double t3710;
  double t3711;
  double t3720;
  double t3728;
  double t3734;
  double t3738;
  double t5163;
  double t5165;
  double t5168;
  double t5178;
  double t5181;
  double t5187;
  double t5188;
  double t5202;
  double t5203;
  double t5209;
  double t5213;
  double t5220;
  double t5223;
  double t5225;
  double t5227;
  double t4005;
  double t4007;
  double t4013;
  double t4014;
  double t4015;
  double t4023;
  double t4060;
  double t4061;
  double t4070;
  double t4075;
  double t4082;
  double t4085;
  double t4124;
  double t4125;
  double t4135;
  double t4138;
  double t4151;
  double t4152;
  double t4182;
  double t5267;
  double t5269;
  double t5274;
  double t5276;
  double t5280;
  double t5282;
  double t5283;
  double t5286;
  double t4192;
  double t5290;
  double t5291;
  double t5299;
  double t5300;
  double t4211;
  double t4229;
  double t4255;
  double t4258;
  double t5377;
  double t5378;
  double t5379;
  double t5382;
  double t5383;
  double t5384;
  double t5389;
  double t5395;
  double t5396;
  double t5399;
  double t5405;
  double t5408;
  double t5409;
  double t5410;
  double t5417;
  double t5419;
  double t5424;
  double t5425;
  double t5505;
  double t5506;
  double t5509;
  double t5517;
  double t5522;
  double t5527;
  double t5531;
  double t5537;
  double t5542;
  double t5543;
  double t5544;
  double t5548;
  double t5550;
  double t5551;
  double t5640;
  double t5643;
  double t5650;
  double t5651;
  double t5653;
  double t5655;
  double t5656;
  double t5658;
  double t5659;
  double t5660;
  double t5663;
  double t5670;
  double t5671;
  double t5707;
  double t5710;
  double t5711;
  double t5714;
  double t5716;
  double t5717;
  double t5719;
  double t5721;
  double t5723;
  double t5724;
  double t5726;
  double t5731;
  double t5732;
  double t5733;
  double t5734;
  double t5764;
  double t5765;
  double t5766;
  double t5769;
  double t5772;
  double t5774;
  double t5775;
  double t5776;
  double t5778;
  double t5779;
  double t5780;
  double t5783;
  double t5987;
  double t5988;
  double t5989;
  double t5990;
  double t5993;
  double t5994;
  double t6031;
  double t6032;
  double t6033;
  double t6036;
  double t6043;
  double t6051;
  double t6053;
  double t6054;
  double t6055;
  double t6058;
  double t6112;
  double t6063;
  double t6069;
  double t6072;
  double t6073;
  double t6034;
  double t6044;
  double t6060;
  double t6061;
  double t6131;
  double t6138;
  double t6156;
  double t6167;
  t8 = -1.*var5[0];
  t22 = t8 + var5[1];
  t37 = Power(t22,-5);
  t38 = -1. + var6[0];
  t43 = -1. + var7[0];
  t44 = 1/t43;
  t47 = -1.*var1[0];
  t50 = t47 + var1[1];
  t53 = t38*t44*t50;
  t56 = t8 + var1[0] + t53;
  t57 = Power(t56,4);
  t70 = Power(t22,-4);
  t71 = Power(t56,3);
  t73 = 1/t22;
  t76 = -1.*t73*t56;
  t89 = 1. + t76;
  t112 = Power(t22,-3);
  t118 = Power(t56,2);
  t121 = Power(t89,2);
  t134 = Power(t22,-2);
  t141 = Power(t89,3);
  t158 = Power(t89,4);
  t227 = Cos(var2[4]);
  t179 = Cos(var2[7]);
  t204 = Sin(var2[7]);
  t251 = Cos(var2[5]);
  t238 = Cos(var2[6]);
  t244 = Sin(var2[5]);
  t258 = Sin(var2[6]);
  t293 = t227*t251*t238;
  t296 = -1.*t227*t244*t258;
  t300 = t293 + t296;
  t169 = Sin(var2[4]);
  t249 = -1.*t227*t238*t244;
  t269 = -1.*t227*t251*t258;
  t271 = t249 + t269;
  t356 = Cos(var2[8]);
  t357 = -1.*t356;
  t358 = 1. + t357;
  t362 = Sin(var2[8]);
  t377 = -1.*t179*t169;
  t390 = -4.e-6*t179*t271;
  t394 = -1.000000000016*t300*t204;
  t395 = t377 + t390 + t394;
  t411 = t179*t300;
  t412 = -1.*t169*t204;
  t414 = -4.e-6*t271*t204;
  t424 = t411 + t412 + t414;
  t328 = 4.e-6*t179*t300;
  t329 = -4.e-6*t169*t204;
  t338 = -1.6e-11*t271*t204;
  t343 = t328 + t329 + t338;
  t465 = -1. + t356;
  t545 = -1. + t179;
  t630 = 4.e-6*t545*t169;
  t639 = 1.6e-11*t545;
  t641 = 1. + t639;
  t644 = t641*t271;
  t646 = 4.e-6*t300*t204;
  t648 = t630 + t644 + t646;
  t535 = t179*t169;
  t546 = 4.e-6*t545*t271;
  t585 = t300*t204;
  t588 = t535 + t546 + t585;
  t692 = -1.*t179;
  t693 = 1. + t692;
  t700 = -1.000000000016*t693;
  t703 = 1. + t700;
  t705 = t703*t300;
  t707 = t705 + t412 + t414;
  t939 = -1.*t238;
  t944 = 1. + t939;
  t946 = 0.15121*t944;
  t1023 = -1.*t227*t251*t238;
  t1052 = t227*t244*t258;
  t1069 = t1023 + t1052;
  t354 = -1.284e-8*var2[8];
  t361 = -1.5499600000248e-7*t358;
  t367 = 2.012840000032e-6*t362;
  t369 = t354 + t361 + t367;
  t398 = 0.503210000016051*t358;
  t402 = 0.03874900000062*t362;
  t404 = t398 + t402;
  t426 = 5.136e-14*var2[8];
  t429 = -0.03874900000062*t358;
  t431 = 0.503210000008*t362;
  t432 = t426 + t429 + t431;
  t443 = -1.000000000016*t358;
  t444 = 1. + t443;
  t1114 = t703*t271;
  t1117 = -4.e-6*t1069*t204;
  t1122 = t1114 + t1117;
  t1108 = t641*t1069;
  t1109 = 4.e-6*t271*t204;
  t1110 = t1108 + t1109;
  t1133 = 4.e-6*t545*t1069;
  t1135 = t271*t204;
  t1136 = t1133 + t1135;
  t472 = 1.6e-11*t465;
  t473 = 1. + t472;
  t999 = 0.15121*t258;
  t1074 = -1.2484e-7*var2[7];
  t1080 = -1.5499600000248e-7*t693;
  t1082 = 1.124840000016e-6*t204;
  t1083 = t1074 + t1080 + t1082;
  t1090 = t1069*t1083;
  t1099 = 0.281210000008499*t693;
  t1102 = 0.03874900000062*t204;
  t1106 = t1099 + t1102;
  t1107 = t271*t1106;
  t1112 = t1110*t369;
  t1124 = t1122*t404;
  t1140 = t1136*t432;
  t1142 = t444*t1122;
  t1145 = -4.e-6*t1110*t362;
  t1148 = -1.*t1136*t362;
  t1151 = t1142 + t1145 + t1148;
  t1155 = 0.80321*t1151;
  t1160 = t473*t1110;
  t1164 = 4.e-6*t465*t1136;
  t1166 = 4.e-6*t1122*t362;
  t1180 = t1160 + t1164 + t1166;
  t1225 = 0.14871*t1180;
  t1233 = 4.e-6*t465*t1110;
  t1267 = t356*t1136;
  t1268 = t1122*t362;
  t1281 = t1233 + t1267 + t1268;
  t1282 = -0.03875*t1281;
  t963 = -0.15121*t258;
  t966 = t946 + t963;
  t1008 = t946 + t999;
  t1377 = t238*t169*t244;
  t1392 = t251*t169*t258;
  t1404 = t1377 + t1392;
  t1444 = -1.*t251*t238*t169;
  t1468 = t169*t244*t258;
  t1473 = t1444 + t1468;
  t1528 = 4.e-6*t227*t545;
  t1530 = t641*t1404;
  t1532 = 4.e-6*t1473*t204;
  t1539 = t1528 + t1530 + t1532;
  t1591 = t227*t179;
  t1601 = 4.e-6*t545*t1404;
  t1607 = t1473*t204;
  t1609 = t1591 + t1601 + t1607;
  t1547 = t703*t1473;
  t1552 = -1.*t227*t204;
  t1560 = -4.e-6*t1404*t204;
  t1567 = t1547 + t1552 + t1560;
  t1816 = Sin(var2[3]);
  t1482 = 4.9936e-13*var2[7];
  t1488 = -0.03874900000062*t693;
  t1491 = 0.281210000004*t204;
  t1492 = t1482 + t1488 + t1491;
  t1842 = -1.*t227*t238*t1816*t244;
  t1848 = -1.*t227*t251*t1816*t258;
  t1860 = t1842 + t1848;
  t1894 = t227*t251*t238*t1816;
  t1896 = -1.*t227*t1816*t244*t258;
  t1906 = t1894 + t1896;
  t1910 = 4.e-6*t545*t1816*t169;
  t1913 = t641*t1860;
  t1921 = 4.e-6*t1906*t204;
  t1926 = t1910 + t1913 + t1921;
  t1947 = t179*t1816*t169;
  t1950 = 4.e-6*t545*t1860;
  t1953 = t1906*t204;
  t1958 = t1947 + t1950 + t1953;
  t1930 = t703*t1906;
  t1933 = -1.*t1816*t169*t204;
  t1935 = -4.e-6*t1860*t204;
  t1936 = t1930 + t1933 + t1935;
  t2062 = Cos(var2[3]);
  t2054 = -1.*t251*t1816;
  t2064 = -1.*t2062*t169*t244;
  t2067 = t2054 + t2064;
  t2070 = t2062*t251*t169;
  t2075 = -1.*t1816*t244;
  t2080 = t2070 + t2075;
  t2084 = t238*t2067;
  t2092 = -1.*t2080*t258;
  t2097 = t2084 + t2092;
  t2109 = t238*t2080;
  t2116 = t2067*t258;
  t2117 = t2109 + t2116;
  t2126 = -4.e-6*t2062*t227*t545;
  t2129 = t641*t2097;
  t2134 = 4.e-6*t2117*t204;
  t2140 = t2126 + t2129 + t2134;
  t2161 = -1.*t2062*t227*t179;
  t2162 = 4.e-6*t545*t2097;
  t2163 = t2117*t204;
  t2164 = t2161 + t2162 + t2163;
  t2147 = t703*t2117;
  t2148 = t2062*t227*t204;
  t2150 = -4.e-6*t2097*t204;
  t2152 = t2147 + t2148 + t2150;
  t2219 = -1.*t251*t1816*t169;
  t2220 = -1.*t2062*t244;
  t2222 = t2219 + t2220;
  t2240 = t2062*t251;
  t2244 = -1.*t1816*t169*t244;
  t2245 = t2240 + t2244;
  t2262 = t238*t2222;
  t2277 = -1.*t2245*t258;
  t2284 = t2262 + t2277;
  t2290 = t238*t2245;
  t2293 = t2222*t258;
  t2307 = t2290 + t2293;
  t2356 = t703*t2307;
  t2360 = -4.e-6*t2284*t204;
  t2368 = t2356 + t2360;
  t2329 = t641*t2284;
  t2341 = 4.e-6*t2307*t204;
  t2346 = t2329 + t2341;
  t2375 = 4.e-6*t545*t2284;
  t2377 = t2307*t204;
  t2380 = t2375 + t2377;
  t1306 = -0.15121*t238;
  t1314 = t1306 + t999;
  t1321 = 0.15121*t238;
  t1329 = t1321 + t999;
  t2434 = t251*t1816*t169;
  t2440 = t2062*t244;
  t2441 = t2434 + t2440;
  t2447 = -1.*t238*t2441;
  t2449 = t2447 + t2277;
  t2453 = -1.*t2441*t258;
  t2454 = t2290 + t2453;
  t2465 = t703*t2454;
  t2466 = -4.e-6*t2449*t204;
  t2467 = t2465 + t2466;
  t2457 = t641*t2449;
  t2461 = 4.e-6*t2454*t204;
  t2463 = t2457 + t2461;
  t2474 = 4.e-6*t545*t2449;
  t2476 = t2454*t204;
  t2478 = t2474 + t2476;
  t189 = 0.281210000004*t179;
  t217 = -0.03874900000062*t204;
  t221 = 4.9936e-13 + t189 + t217;
  t273 = 1.124840000016e-6*t179;
  t280 = -1.5499600000248e-7*t204;
  t285 = -1.2484e-7 + t273 + t280;
  t305 = 0.03874900000062*t179;
  t315 = 0.281210000008499*t204;
  t318 = t305 + t315;
  t2599 = t238*t2441;
  t2605 = t2245*t258;
  t2609 = t2599 + t2605;
  t2627 = t227*t179*t1816;
  t2632 = -4.e-6*t179*t2454;
  t2633 = -1.000000000016*t2609*t204;
  t2634 = t2627 + t2632 + t2633;
  t2638 = t179*t2609;
  t2639 = t227*t1816*t204;
  t2644 = -4.e-6*t2454*t204;
  t2645 = t2638 + t2639 + t2644;
  t2617 = 4.e-6*t179*t2609;
  t2618 = 4.e-6*t227*t1816*t204;
  t2620 = -1.6e-11*t2454*t204;
  t2621 = t2617 + t2618 + t2620;
  t597 = 0.503210000008*t356;
  t600 = -0.03874900000062*t362;
  t603 = 5.136e-14 + t597 + t600;
  t658 = 2.012840000032e-6*t356;
  t663 = -1.5499600000248e-7*t362;
  t672 = -1.284e-8 + t658 + t663;
  t710 = 0.03874900000062*t356;
  t711 = 0.503210000016051*t362;
  t724 = t710 + t711;
  t2767 = -4.e-6*t227*t545*t1816;
  t2770 = t641*t2454;
  t2771 = 4.e-6*t2609*t204;
  t2777 = t2767 + t2770 + t2771;
  t2734 = -1.*t227*t179*t1816;
  t2741 = 4.e-6*t545*t2454;
  t2750 = t2609*t204;
  t2751 = t2734 + t2741 + t2750;
  t2791 = t703*t2609;
  t2792 = t2791 + t2639 + t2644;
  t2909 = t2062*t227*t238*t244;
  t2912 = t2062*t227*t251*t258;
  t2914 = t2909 + t2912;
  t2921 = -1.*t2062*t227*t251*t238;
  t2922 = t2062*t227*t244*t258;
  t2924 = t2921 + t2922;
  t2927 = -4.e-6*t2062*t545*t169;
  t2930 = t641*t2914;
  t2933 = 4.e-6*t2924*t204;
  t2936 = t2927 + t2930 + t2933;
  t2967 = -1.*t2062*t179*t169;
  t2973 = 4.e-6*t545*t2914;
  t2974 = t2924*t204;
  t2981 = t2967 + t2973 + t2974;
  t2944 = t703*t2924;
  t2949 = t2062*t169*t204;
  t2952 = -4.e-6*t2914*t204;
  t2955 = t2944 + t2949 + t2952;
  t3039 = t251*t1816;
  t3041 = t2062*t169*t244;
  t3045 = t3039 + t3041;
  t3060 = -1.*t3045*t258;
  t3061 = t2109 + t3060;
  t3073 = t238*t3045;
  t3075 = t2080*t258;
  t3078 = t3073 + t3075;
  t3093 = t703*t3078;
  t3100 = -4.e-6*t3061*t204;
  t3102 = t3093 + t3100;
  t3083 = t641*t3061;
  t3088 = 4.e-6*t3078*t204;
  t3089 = t3083 + t3088;
  t3109 = 4.e-6*t545*t3061;
  t3112 = t3078*t204;
  t3120 = t3109 + t3112;
  t3183 = -1.*t2062*t251*t169;
  t3185 = t1816*t244;
  t3187 = t3183 + t3185;
  t3192 = -1.*t238*t3187;
  t3195 = t3192 + t3060;
  t3201 = -1.*t3187*t258;
  t3202 = t3073 + t3201;
  t3236 = t703*t3202;
  t3238 = -4.e-6*t3195*t204;
  t3239 = t3236 + t3238;
  t3221 = t641*t3195;
  t3224 = 4.e-6*t3202*t204;
  t3229 = t3221 + t3224;
  t3248 = 4.e-6*t545*t3195;
  t3251 = t3202*t204;
  t3254 = t3248 + t3251;
  t3322 = t238*t3187;
  t3335 = t3045*t258;
  t3336 = t3322 + t3335;
  t3352 = -4.e-6*t179*t3202;
  t3353 = -1.000000000016*t3336*t204;
  t3354 = t2161 + t3352 + t3353;
  t3361 = t179*t3336;
  t3365 = -1.*t2062*t227*t204;
  t3367 = -4.e-6*t3202*t204;
  t3372 = t3361 + t3365 + t3367;
  t3342 = 4.e-6*t179*t3336;
  t3343 = -4.e-6*t2062*t227*t204;
  t3346 = -1.6e-11*t3202*t204;
  t3347 = t3342 + t3343 + t3346;
  t3430 = 4.e-6*t2062*t227*t545;
  t3434 = t641*t3202;
  t3435 = 4.e-6*t3336*t204;
  t3436 = t3430 + t3434 + t3435;
  t3421 = t2062*t227*t179;
  t3422 = 4.e-6*t545*t3202;
  t3423 = t3336*t204;
  t3424 = t3421 + t3422 + t3423;
  t3441 = t703*t3336;
  t3442 = t3441 + t3365 + t3367;
  t2821 = -4.e-6*t2777*t362;
  t2822 = -1.*t2751*t362;
  t3629 = Cos(var2[13]);
  t3632 = Sin(var2[13]);
  t3651 = 4.e-6*t3632;
  t3635 = -2.8e-11*t3632;
  t3675 = 7.e-6*t3632;
  t3684 = Cos(var2[12]);
  t3681 = Sin(var2[12]);
  t3751 = Cos(var2[14]);
  t3752 = -1.*t3751;
  t3756 = 1. + t3752;
  t3764 = Sin(var2[14]);
  t3667 = -7.e-6*t3629;
  t3682 = -1.*t227*t251*t3681;
  t3685 = -1.*t3684*t227*t244;
  t3687 = t3682 + t3685;
  t3674 = 4.e-6*t3629;
  t3743 = t3684*t227*t251;
  t3744 = -1.*t227*t3681*t244;
  t3748 = t3743 + t3744;
  t3760 = 4.e-6*t3756;
  t3650 = 7.e-6*t3629;
  t3785 = -4.e-6*t3632;
  t3849 = -2.8e-11*t3756;
  t3775 = 7.e-6*t3756;
  t3702 = -1.*t3629;
  t3866 = 2.8e-11*t3632;
  t3715 = -4.e-6*t3629;
  t3801 = -7.e-6*t3632;
  t3897 = -4.e-6*t3764;
  t3788 = t3667 + t3785;
  t3789 = t3788*t169;
  t3793 = -6.5e-11*t3632*t3687;
  t3803 = t3674 + t3801;
  t3806 = t3803*t3748;
  t3819 = t3789 + t3793 + t3806;
  t3889 = -1.*t3764;
  t3859 = -1.000000000049*t3632*t169;
  t3861 = t3650 + t3785;
  t3865 = t3861*t3687;
  t3868 = t3629 + t3866;
  t3869 = t3868*t3748;
  t3870 = t3859 + t3865 + t3869;
  t3912 = t3702 + t3866;
  t3924 = t3912*t169;
  t3933 = t3715 + t3801;
  t3934 = t3933*t3687;
  t3938 = -1.000000000016*t3632*t3748;
  t3942 = t3924 + t3934 + t3938;
  t3768 = -7.e-6*t3764;
  t3947 = -7.e-6*t3756;
  t3778 = 4.e-6*t3764;
  t3975 = -1. + t3751;
  t3976 = 4.e-6*t3975;
  t3844 = 7.e-6*t3764;
  t3955 = 2.8e-11*t3756;
  t4025 = 1. + t3702;
  t4035 = -7.e-6*t4025;
  t4002 = -2.8e-11*t3764;
  t4087 = -1. + t3629;
  t4092 = 4.e-6*t4087;
  t4026 = 2.8e-11*t4025;
  t4067 = 4.e-6*t3751;
  t4028 = -1.*t3632;
  t4031 = t4026 + t4028;
  t4032 = t4031*t169;
  t4039 = t4035 + t3785;
  t4040 = t4039*t3687;
  t4043 = -1.000000000016*t4025;
  t4046 = 1. + t4043;
  t4049 = t4046*t3748;
  t4051 = t4032 + t4040 + t4049;
  t4094 = t4092 + t3801;
  t4096 = t4094*t169;
  t4097 = -6.5e-11*t4025;
  t4099 = 1. + t4097;
  t4102 = t4099*t3687;
  t4105 = t4035 + t3651;
  t4106 = t4105*t3748;
  t4109 = t4096 + t4102 + t4106;
  t4058 = -7.e-6*t3751;
  t4156 = -1.000000000049*t4025;
  t4158 = 1. + t4156;
  t4159 = t4158*t169;
  t4164 = t4092 + t3675;
  t4165 = t4164*t3687;
  t4166 = t4026 + t3632;
  t4174 = t4166*t3748;
  t4179 = t4159 + t4165 + t4174;
  t4008 = -4.e-6*t3751;
  t4221 = 2.8e-11*t3764;
  t4130 = 7.e-6*t3751;
  t4287 = -1.*t3684;
  t4288 = 1. + t4287;
  t4306 = 0.15121*t3681;
  t4339 = 7.e-6*t4025;
  t3750 = -2.598649999999999e-7*var2[14];
  t3759 = -2.3905277499999995e-16*t3756;
  t3770 = t3760 + t3768;
  t3773 = -0.038922999986*t3770;
  t3779 = t3775 + t3778;
  t3781 = -0.503149000008*t3779;
  t3782 = t3750 + t3759 + t3773 + t3781;
  t4375 = -1.*t3684*t227*t251;
  t4381 = t227*t3681*t244;
  t4385 = t4375 + t4381;
  t3876 = 1.8190549999999993e-12*var2[14];
  t3884 = -0.5031490000160505*t3756;
  t3891 = t3849 + t3889;
  t3895 = -0.038922999986*t3891;
  t3906 = t3775 + t3897;
  t3908 = -3.6777349999999994e-6*t3906;
  t3910 = t3876 + t3884 + t3895 + t3908;
  t3828 = 1.0394599999999997e-12*var2[14];
  t3843 = -0.03892299998790722*t3756;
  t3845 = t3760 + t3844;
  t3848 = -3.6777349999999994e-6*t3845;
  t3852 = t3849 + t3764;
  t3855 = -0.503149000008*t3852;
  t3856 = t3828 + t3843 + t3848 + t3855;
  t3984 = t3976 + t3844;
  t4393 = t4105*t3687;
  t4395 = t4099*t4385;
  t4397 = t4393 + t4395;
  t3993 = t3955 + t3764;
  t4406 = t4046*t3687;
  t4415 = t4039*t4385;
  t4416 = t4406 + t4415;
  t3987 = -1.000000000049*t3756;
  t3991 = 1. + t3987;
  t4419 = t4166*t3687;
  t4420 = t4164*t4385;
  t4421 = t4419 + t4420;
  t3948 = t3947 + t3897;
  t3965 = -1.000000000016*t3756;
  t3967 = 1. + t3965;
  t3956 = t3955 + t3889;
  t3972 = -6.5e-11*t3756;
  t3973 = 1. + t3972;
  t3980 = t3947 + t3778;
  t3977 = t3976 + t3768;
  t4478 = 0.15121*t3684;
  t4319 = 1.0248489999999998e-12*var2[13];
  t4328 = -0.28120900000849935*t4025;
  t4332 = -2.8e-11*t4025;
  t4336 = t4332 + t4028;
  t4337 = -0.038748999993*t4336;
  t4342 = t4339 + t3785;
  t4343 = -2.123459e-6*t4342;
  t4346 = t4319 + t4328 + t4337 + t4343;
  t4350 = t4346*t3687;
  t4351 = -1.4640699999999997e-7*var2[13];
  t4353 = -1.38024835e-16*t4025;
  t4354 = 4.e-6*t4025;
  t4362 = t4354 + t3801;
  t4364 = -0.038748999993*t4362;
  t4369 = t4339 + t3651;
  t4371 = -0.281209000004*t4369;
  t4372 = t4351 + t4353 + t4364 + t4371;
  t4389 = t4372*t4385;
  t4405 = t3782*t4397;
  t4418 = t3910*t4416;
  t4425 = t3856*t4421;
  t4429 = t3984*t4397;
  t4435 = t3993*t4416;
  t4437 = t3991*t4421;
  t4439 = t4429 + t4435 + t4437;
  t4441 = -0.038924*t4439;
  t4443 = t3948*t4397;
  t4445 = t3967*t4416;
  t4448 = t3956*t4421;
  t4452 = t4443 + t4445 + t4448;
  t4453 = -0.80315*t4452;
  t4461 = t3973*t4397;
  t4462 = t3980*t4416;
  t4466 = t3977*t4421;
  t4467 = t4461 + t4462 + t4466;
  t4468 = 0.148705*t4467;
  t4315 = -0.15121*t4288;
  t4316 = t4315 + t4306;
  t4299 = 0.15121*t4288;
  t4308 = t4299 + t4306;
  t4517 = t251*t3681*t169;
  t4520 = t3684*t169*t244;
  t4522 = t4517 + t4520;
  t4532 = -1.*t3684*t251*t169;
  t4544 = t3681*t169*t244;
  t4551 = t4532 + t4544;
  t4554 = t227*t4031;
  t4556 = t4039*t4522;
  t4557 = t4046*t4551;
  t4562 = t4554 + t4556 + t4557;
  t4577 = t227*t4094;
  t4579 = t4099*t4522;
  t4588 = t4105*t4551;
  t4591 = t4577 + t4579 + t4588;
  t4595 = t4158*t227;
  t4598 = t4164*t4522;
  t4601 = t4166*t4551;
  t4602 = t4595 + t4598 + t4601;
  t4496 = 5.856279999999999e-13*var2[13];
  t4500 = -0.0387489999948987*t4025;
  t4502 = t4354 + t3675;
  t4505 = -2.123459e-6*t4502;
  t4506 = t4332 + t3632;
  t4508 = -0.281209000004*t4506;
  t4511 = t4496 + t4500 + t4505 + t4508;
  t4718 = -1.*t227*t251*t3681*t1816;
  t4719 = -1.*t3684*t227*t1816*t244;
  t4720 = t4718 + t4719;
  t4724 = t3684*t227*t251*t1816;
  t4725 = -1.*t227*t3681*t1816*t244;
  t4731 = t4724 + t4725;
  t4734 = t4031*t1816*t169;
  t4739 = t4039*t4720;
  t4744 = t4046*t4731;
  t4745 = t4734 + t4739 + t4744;
  t4747 = t4094*t1816*t169;
  t4750 = t4099*t4720;
  t4751 = t4105*t4731;
  t4752 = t4747 + t4750 + t4751;
  t4760 = t4158*t1816*t169;
  t4763 = t4164*t4720;
  t4764 = t4166*t4731;
  t4765 = t4760 + t4763 + t4764;
  t4840 = -1.*t3681*t2080;
  t4842 = t3684*t2067;
  t4844 = t4840 + t4842;
  t4848 = t3684*t2080;
  t4850 = t3681*t2067;
  t4852 = t4848 + t4850;
  t4856 = -1.*t2062*t227*t4031;
  t4857 = t4039*t4844;
  t4859 = t4046*t4852;
  t4860 = t4856 + t4857 + t4859;
  t4864 = -1.*t2062*t227*t4094;
  t4869 = t4099*t4844;
  t4874 = t4105*t4852;
  t4876 = t4864 + t4869 + t4874;
  t4884 = -1.*t4158*t2062*t227;
  t4894 = t4164*t4844;
  t4895 = t4166*t4852;
  t4900 = t4884 + t4894 + t4895;
  t4962 = t3681*t2222;
  t4965 = t3684*t2245;
  t4966 = t4962 + t4965;
  t4974 = t3684*t2222;
  t4980 = -1.*t3681*t2245;
  t4982 = t4974 + t4980;
  t4994 = t4105*t4966;
  t4998 = t4099*t4982;
  t5000 = t4994 + t4998;
  t5002 = t4046*t4966;
  t5004 = t4039*t4982;
  t5006 = t5002 + t5004;
  t5015 = t4166*t4966;
  t5018 = t4164*t4982;
  t5019 = t5015 + t5018;
  t4482 = -0.15121*t3681;
  t4483 = t4478 + t4482;
  t4488 = t4478 + t4306;
  t5055 = -1.*t3681*t2441;
  t5056 = t5055 + t4965;
  t5066 = -1.*t3684*t2441;
  t5069 = t5066 + t4980;
  t5075 = t4105*t5056;
  t5079 = t4099*t5069;
  t5080 = t5075 + t5079;
  t5083 = t4046*t5056;
  t5088 = t4039*t5069;
  t5098 = t5083 + t5088;
  t5104 = t4166*t5056;
  t5107 = t4164*t5069;
  t5111 = t5104 + t5107;
  t3640 = t3629 + t3635;
  t3644 = -0.281209000004*t3640;
  t3652 = t3650 + t3651;
  t3657 = -2.123459e-6*t3652;
  t3661 = -0.0387489999948987*t3632;
  t3664 = 5.856279999999999e-13 + t3644 + t3657 + t3661;
  t3670 = t3667 + t3651;
  t3672 = -0.038748999993*t3670;
  t3676 = t3674 + t3675;
  t3677 = -0.281209000004*t3676;
  t3678 = -1.38024835e-16*t3632;
  t3679 = -1.4640699999999997e-7 + t3672 + t3677 + t3678;
  t3710 = t3702 + t3635;
  t3711 = -0.038748999993*t3710;
  t3720 = t3715 + t3675;
  t3728 = -2.123459e-6*t3720;
  t3734 = -0.28120900000849935*t3632;
  t3738 = 1.0248489999999998e-12 + t3711 + t3728 + t3734;
  t5163 = t3684*t2441;
  t5165 = t3681*t2245;
  t5168 = t5163 + t5165;
  t5178 = -1.*t227*t3788*t1816;
  t5181 = -6.5e-11*t3632*t5056;
  t5187 = t3803*t5168;
  t5188 = t5178 + t5181 + t5187;
  t5202 = 1.000000000049*t227*t3632*t1816;
  t5203 = t3861*t5056;
  t5209 = t3868*t5168;
  t5213 = t5202 + t5203 + t5209;
  t5220 = -1.*t227*t3912*t1816;
  t5223 = t3933*t5056;
  t5225 = -1.000000000016*t3632*t5168;
  t5227 = t5220 + t5223 + t5225;
  t4005 = t3752 + t4002;
  t4007 = -0.038922999986*t4005;
  t4013 = t4008 + t3844;
  t4014 = -3.6777349999999994e-6*t4013;
  t4015 = -0.5031490000160505*t3764;
  t4023 = 1.8190549999999993e-12 + t4007 + t4014 + t4015;
  t4060 = t4058 + t3778;
  t4061 = -0.038922999986*t4060;
  t4070 = t4067 + t3844;
  t4075 = -0.503149000008*t4070;
  t4082 = -2.3905277499999995e-16*t3764;
  t4085 = -2.598649999999999e-7 + t4061 + t4075 + t4082;
  t4124 = t3751 + t4002;
  t4125 = -0.503149000008*t4124;
  t4135 = t4130 + t3778;
  t4138 = -3.6777349999999994e-6*t4135;
  t4151 = -0.03892299998790722*t3764;
  t4152 = 1.0394599999999997e-12 + t4125 + t4138 + t4151;
  t4182 = t4067 + t3768;
  t5267 = -1.*t227*t4031*t1816;
  t5269 = t4039*t5056;
  t5274 = t4046*t5168;
  t5276 = t5267 + t5269 + t5274;
  t5280 = -1.*t227*t4094*t1816;
  t5282 = t4099*t5056;
  t5283 = t4105*t5168;
  t5286 = t5280 + t5282 + t5283;
  t4192 = t4058 + t3897;
  t5290 = -1.*t4158*t227*t1816;
  t5291 = t4164*t5056;
  t5299 = t4166*t5168;
  t5300 = t5290 + t5291 + t5299;
  t4211 = t4008 + t3768;
  t4229 = t3752 + t4221;
  t4255 = t3751 + t4221;
  t4258 = t4130 + t3897;
  t5377 = t2062*t227*t251*t3681;
  t5378 = t3684*t2062*t227*t244;
  t5379 = t5377 + t5378;
  t5382 = -1.*t3684*t2062*t227*t251;
  t5383 = t2062*t227*t3681*t244;
  t5384 = t5382 + t5383;
  t5389 = -1.*t2062*t4031*t169;
  t5395 = t4039*t5379;
  t5396 = t4046*t5384;
  t5399 = t5389 + t5395 + t5396;
  t5405 = -1.*t2062*t4094*t169;
  t5408 = t4099*t5379;
  t5409 = t4105*t5384;
  t5410 = t5405 + t5408 + t5409;
  t5417 = -1.*t4158*t2062*t169;
  t5419 = t4164*t5379;
  t5424 = t4166*t5384;
  t5425 = t5417 + t5419 + t5424;
  t5505 = t3681*t2080;
  t5506 = t3684*t3045;
  t5509 = t5505 + t5506;
  t5517 = -1.*t3681*t3045;
  t5522 = t4848 + t5517;
  t5527 = t4105*t5509;
  t5531 = t4099*t5522;
  t5537 = t5527 + t5531;
  t5542 = t4046*t5509;
  t5543 = t4039*t5522;
  t5544 = t5542 + t5543;
  t5548 = t4166*t5509;
  t5550 = t4164*t5522;
  t5551 = t5548 + t5550;
  t5640 = -1.*t3681*t3187;
  t5643 = t5640 + t5506;
  t5650 = -1.*t3684*t3187;
  t5651 = t5650 + t5517;
  t5653 = t4105*t5643;
  t5655 = t4099*t5651;
  t5656 = t5653 + t5655;
  t5658 = t4046*t5643;
  t5659 = t4039*t5651;
  t5660 = t5658 + t5659;
  t5663 = t4166*t5643;
  t5670 = t4164*t5651;
  t5671 = t5663 + t5670;
  t5707 = t3684*t3187;
  t5710 = t3681*t3045;
  t5711 = t5707 + t5710;
  t5714 = t2062*t227*t3788;
  t5716 = -6.5e-11*t3632*t5643;
  t5717 = t3803*t5711;
  t5719 = t5714 + t5716 + t5717;
  t5721 = -1.000000000049*t2062*t227*t3632;
  t5723 = t3861*t5643;
  t5724 = t3868*t5711;
  t5726 = t5721 + t5723 + t5724;
  t5731 = t2062*t227*t3912;
  t5732 = t3933*t5643;
  t5733 = -1.000000000016*t3632*t5711;
  t5734 = t5731 + t5732 + t5733;
  t5764 = t2062*t227*t4031;
  t5765 = t4039*t5643;
  t5766 = t4046*t5711;
  t5769 = t5764 + t5765 + t5766;
  t5772 = t2062*t227*t4094;
  t5774 = t4099*t5643;
  t5775 = t4105*t5711;
  t5776 = t5772 + t5774 + t5775;
  t5778 = t4158*t2062*t227;
  t5779 = t4164*t5643;
  t5780 = t4166*t5711;
  t5783 = t5778 + t5779 + t5780;
  t5987 = Power(t227,2);
  t5988 = Power(t251,2);
  t5989 = t5987*t5988;
  t5990 = Power(t2441,2);
  t5993 = t5989 + t5990;
  t5994 = 1/t5993;
  t6031 = Cos(var2[9]);
  t6032 = -1.*t6031;
  t6033 = 1. + t6032;
  t6036 = Sin(var2[9]);
  t6043 = -0.15121*t6036;
  t6051 = Cos(var2[15]);
  t6053 = -1.*t6051;
  t6054 = 1. + t6053;
  t6055 = -0.15121*t6054;
  t6058 = Sin(var2[15]);
  t6112 = -0.15121*t6031;
  t6063 = -0.15121*t6033;
  t6069 = t6063 + t6043;
  t6072 = 0.15121*t6058;
  t6073 = t6055 + t6072;
  t6034 = 0.15121*t6033;
  t6044 = t6034 + t6043;
  t6060 = -0.15121*t6058;
  t6061 = t6055 + t6060;
  t6131 = t6031*t3045;
  t6138 = -1.*t6036*t3045;
  t6156 = t6051*t3045;
  t6167 = -1.*t6058*t3045;
  p_output1[0]=var3[0] + (t1083*t1404 + t1106*t1473 + t1492*t227 - 1.*t1008*t169*t251 + t1539*t369 + t1567*t404 + t1609*t432 + 0.80321*(-4.e-6*t1539*t362 - 1.*t1609*t362 + t1567*t444) - 0.03875*(t1609*t356 + t1567*t362 + 4.e-6*t1539*t465) + 0.14871*(4.e-6*t1567*t362 + 4.e-6*t1609*t465 + t1539*t473) + t169*t244*t966)*var3[4] + (t1090 + t1107 + t1112 + t1124 + t1140 + t1155 + t1225 + t1282 - 1.*t1008*t227*t244 - 1.*t227*t251*t966)*var3[5] + (t1090 + t1107 + t1112 + t1124 + t1140 + t1155 + t1225 + t1282 - 1.*t1314*t227*t244 + t1329*t227*t251)*var3[6] + (t169*t221 + t271*t285 + t300*t318 + t343*t369 + t395*t404 + t424*t432 + 0.80321*(-4.e-6*t343*t362 - 1.*t362*t424 + t395*t444) - 0.03875*(t362*t395 + t356*t424 + 4.e-6*t343*t465) + 0.14871*(4.e-6*t362*t395 + 4.e-6*t424*t465 + t343*t473))*var3[7] + (t588*t603 + t648*t672 + 0.14871*(-4.e-6*t362*t588 - 1.6e-11*t362*t648 + 4.e-6*t356*t707) - 0.03875*(-1.*t362*t588 - 4.e-6*t362*t648 + t356*t707) + 0.80321*(-1.*t356*t588 - 4.e-6*t356*t648 - 1.000000000016*t362*t707) + t707*t724)*var3[8] + 5.*t158*t73*var4[0] + 20.*t134*t141*t56*var4[10] - 5.*t158*t73*var4[10] + 30.*t112*t118*t121*var4[20] - 20.*t134*t141*t56*var4[20] - 30.*t112*t118*t121*var4[30] + 20.*t70*t71*t89*var4[30] + 5.*t37*t57*var4[40] - 20.*t70*t71*t89*var4[40] - 5.*t37*t57*var4[50];
  p_output1[1]=var3[1] + (t1008*t2080 + t1083*t2097 + t1106*t2117 - 1.*t1492*t2062*t227 + t2140*t369 + t2152*t404 + t2164*t432 + 0.80321*(-4.e-6*t2140*t362 - 1.*t2164*t362 + t2152*t444) - 0.03875*(t2164*t356 + t2152*t362 + 4.e-6*t2140*t465) + 0.14871*(4.e-6*t2152*t362 + 4.e-6*t2164*t465 + t2140*t473) + t2067*t966)*var3[3] + (t1492*t169*t1816 + t1083*t1860 + t1106*t1906 + t1008*t1816*t227*t251 + t1926*t369 + t1936*t404 + t1958*t432 + 0.80321*(-4.e-6*t1926*t362 - 1.*t1958*t362 + t1936*t444) - 0.03875*(t1958*t356 + t1936*t362 + 4.e-6*t1926*t465) + 0.14871*(4.e-6*t1936*t362 + 4.e-6*t1958*t465 + t1926*t473) - 1.*t1816*t227*t244*t966)*var3[4] + (t1008*t2245 + t1083*t2284 + t1106*t2307 + t2346*t369 + t2368*t404 + t2380*t432 + 0.80321*(-4.e-6*t2346*t362 - 1.*t2380*t362 + t2368*t444) - 0.03875*(t2380*t356 + t2368*t362 + 4.e-6*t2346*t465) + 0.14871*(4.e-6*t2368*t362 + 4.e-6*t2380*t465 + t2346*t473) + t2222*t966)*var3[5] + (t1314*t2245 + t1329*t2441 + t1083*t2449 + t1106*t2454 + t2463*t369 + t2467*t404 + t2478*t432 + 0.80321*(-4.e-6*t2463*t362 - 1.*t2478*t362 + t2467*t444) - 0.03875*(t2478*t356 + t2467*t362 + 4.e-6*t2463*t465) + 0.14871*(4.e-6*t2467*t362 + 4.e-6*t2478*t465 + t2463*t473))*var3[6] + (-1.*t1816*t221*t227 + t2454*t285 + t2609*t318 + t2621*t369 + t2634*t404 + t2645*t432 + 0.80321*(-4.e-6*t2621*t362 - 1.*t2645*t362 + t2634*t444) - 0.03875*(t2645*t356 + t2634*t362 + 4.e-6*t2621*t465) + 0.14871*(4.e-6*t2634*t362 + 4.e-6*t2645*t465 + t2621*t473))*var3[7] + (-0.03875*(t2821 + t2822 + t2792*t356) + 0.14871*(4.e-6*t2792*t356 - 4.e-6*t2751*t362 - 1.6e-11*t2777*t362) + 0.80321*(-1.*t2751*t356 - 4.e-6*t2777*t356 - 1.000000000016*t2792*t362) + t2751*t603 + t2777*t672 + t2792*t724)*var3[8] + 5.*t158*t73*var4[1] + 20.*t134*t141*t56*var4[11] - 5.*t158*t73*var4[11] + 30.*t112*t118*t121*var4[21] - 20.*t134*t141*t56*var4[21] - 30.*t112*t118*t121*var4[31] + 20.*t70*t71*t89*var4[31] + 5.*t37*t57*var4[41] - 20.*t70*t71*t89*var4[41] - 5.*t37*t57*var4[51];
  p_output1[2]=var3[2] + (-1.*t1492*t1816*t227 + t1008*t2441 + t1083*t2454 + t1106*t2609 + t2777*t369 + t2792*t404 + t2751*t432 + 0.80321*(t2821 + t2822 + t2792*t444) - 0.03875*(t2751*t356 + t2792*t362 + 4.e-6*t2777*t465) + 0.14871*(4.e-6*t2792*t362 + 4.e-6*t2751*t465 + t2777*t473) + t2245*t966)*var3[3] + (-1.*t1492*t169*t2062 - 1.*t1008*t2062*t227*t251 + t1083*t2914 + t1106*t2924 + t2936*t369 + t2955*t404 + t2981*t432 + 0.80321*(-4.e-6*t2936*t362 - 1.*t2981*t362 + t2955*t444) - 0.03875*(t2981*t356 + t2955*t362 + 4.e-6*t2936*t465) + 0.14871*(4.e-6*t2955*t362 + 4.e-6*t2981*t465 + t2936*t473) + t2062*t227*t244*t966)*var3[4] + (t1008*t3045 + t1083*t3061 + t1106*t3078 + t3089*t369 + t3102*t404 + t3120*t432 + 0.80321*(-4.e-6*t3089*t362 - 1.*t3120*t362 + t3102*t444) - 0.03875*(t3120*t356 + t3102*t362 + 4.e-6*t3089*t465) + 0.14871*(4.e-6*t3102*t362 + 4.e-6*t3120*t465 + t3089*t473) + t2080*t966)*var3[5] + (t1314*t3045 + t1329*t3187 + t1083*t3195 + t1106*t3202 + t3229*t369 + t3239*t404 + t3254*t432 + 0.80321*(-4.e-6*t3229*t362 - 1.*t3254*t362 + t3239*t444) - 0.03875*(t3254*t356 + t3239*t362 + 4.e-6*t3229*t465) + 0.14871*(4.e-6*t3239*t362 + 4.e-6*t3254*t465 + t3229*t473))*var3[6] + (t2062*t221*t227 + t285*t3202 + t318*t3336 + t3347*t369 + t3354*t404 + t3372*t432 + 0.80321*(-4.e-6*t3347*t362 - 1.*t3372*t362 + t3354*t444) - 0.03875*(t3372*t356 + t3354*t362 + 4.e-6*t3347*t465) + 0.14871*(4.e-6*t3354*t362 + 4.e-6*t3372*t465 + t3347*t473))*var3[7] + (-0.03875*(t3442*t356 - 1.*t3424*t362 - 4.e-6*t3436*t362) + 0.14871*(4.e-6*t3442*t356 - 4.e-6*t3424*t362 - 1.6e-11*t3436*t362) + 0.80321*(-1.*t3424*t356 - 4.e-6*t3436*t356 - 1.000000000016*t3442*t362) + t3424*t603 + t3436*t672 + t3442*t724)*var3[8] + 5.*t158*t73*var4[2] + 20.*t134*t141*t56*var4[12] - 5.*t158*t73*var4[12] + 30.*t112*t118*t121*var4[22] - 20.*t134*t141*t56*var4[22] - 30.*t112*t118*t121*var4[32] + 20.*t70*t71*t89*var4[32] + 5.*t37*t57*var4[42] - 20.*t70*t71*t89*var4[42] - 5.*t37*t57*var4[52];
  p_output1[3]=var3[0] + (t169*t244*t4308 - 1.*t169*t251*t4316 + t227*t4511 + t4372*t4522 + t4346*t4551 + t3910*t4562 + t3782*t4591 + t3856*t4602 - 0.80315*(t3967*t4562 + t3948*t4591 + t3956*t4602) + 0.148705*(t3980*t4562 + t3973*t4591 + t3977*t4602) - 0.038924*(t3993*t4562 + t3984*t4591 + t3991*t4602))*var3[4] + (-1.*t227*t251*t4308 - 1.*t227*t244*t4316 + t4350 + t4389 + t4405 + t4418 + t4425 + t4441 + t4453 + t4468)*var3[5] + (t4350 + t4389 + t4405 + t4418 + t4425 + t4441 + t4453 + t4468 + t227*t251*t4483 - 1.*t227*t244*t4488)*var3[12] + (t169*t3664 + t3679*t3687 + t3738*t3748 + t3782*t3819 + t3856*t3870 + t3910*t3942 - 0.80315*(t3819*t3948 + t3870*t3956 + t3942*t3967) + 0.148705*(t3819*t3973 + t3870*t3977 + t3942*t3980) - 0.038924*(t3819*t3984 + t3870*t3991 + t3942*t3993))*var3[13] + (t4023*t4051 + t4085*t4109 + t4152*t4179 + 0.148705*(-6.5e-11*t3764*t4109 + t4051*t4182 + t4179*t4192) - 0.80315*(-1.000000000016*t3764*t4051 + t4109*t4211 + t4179*t4229) - 0.038924*(-1.000000000049*t3764*t4179 + t4051*t4255 + t4109*t4258))*var3[14] + 5.*t158*t73*var4[3] + 20.*t134*t141*t56*var4[13] - 5.*t158*t73*var4[13] + 30.*t112*t118*t121*var4[23] - 20.*t134*t141*t56*var4[23] - 30.*t112*t118*t121*var4[33] + 20.*t70*t71*t89*var4[33] + 5.*t37*t57*var4[43] - 20.*t70*t71*t89*var4[43] - 5.*t37*t57*var4[53];
  p_output1[4]=var3[1] + (t2067*t4308 + t2080*t4316 - 1.*t2062*t227*t4511 + t4372*t4844 + t4346*t4852 + t3910*t4860 + t3782*t4876 + t3856*t4900 - 0.80315*(t3967*t4860 + t3948*t4876 + t3956*t4900) + 0.148705*(t3980*t4860 + t3973*t4876 + t3977*t4900) - 0.038924*(t3993*t4860 + t3984*t4876 + t3991*t4900))*var3[3] + (-1.*t1816*t227*t244*t4308 + t1816*t227*t251*t4316 + t169*t1816*t4511 + t4372*t4720 + t4346*t4731 + t3910*t4745 + t3782*t4752 + t3856*t4765 - 0.80315*(t3967*t4745 + t3948*t4752 + t3956*t4765) + 0.148705*(t3980*t4745 + t3973*t4752 + t3977*t4765) - 0.038924*(t3993*t4745 + t3984*t4752 + t3991*t4765))*var3[4] + (t2222*t4308 + t2245*t4316 + t4346*t4966 + t4372*t4982 + t3782*t5000 + t3910*t5006 + t3856*t5019 - 0.80315*(t3948*t5000 + t3967*t5006 + t3956*t5019) + 0.148705*(t3973*t5000 + t3980*t5006 + t3977*t5019) - 0.038924*(t3984*t5000 + t3993*t5006 + t3991*t5019))*var3[5] + (t2441*t4483 + t2245*t4488 + t4346*t5056 + t4372*t5069 + t3782*t5080 + t3910*t5098 + t3856*t5111 - 0.80315*(t3948*t5080 + t3967*t5098 + t3956*t5111) + 0.148705*(t3973*t5080 + t3980*t5098 + t3977*t5111) - 0.038924*(t3984*t5080 + t3993*t5098 + t3991*t5111))*var3[12] + (-1.*t1816*t227*t3664 + t3679*t5056 + t3738*t5168 + t3782*t5188 + t3856*t5213 + t3910*t5227 - 0.80315*(t3948*t5188 + t3956*t5213 + t3967*t5227) + 0.148705*(t3973*t5188 + t3977*t5213 + t3980*t5227) - 0.038924*(t3984*t5188 + t3991*t5213 + t3993*t5227))*var3[13] + (t4023*t5276 + t4085*t5286 + t4152*t5300 - 0.038924*(t4255*t5276 + t4258*t5286 - 1.000000000049*t3764*t5300) + 0.148705*(t4182*t5276 - 6.5e-11*t3764*t5286 + t4192*t5300) - 0.80315*(-1.000000000016*t3764*t5276 + t4211*t5286 + t4229*t5300))*var3[14] + 5.*t158*t73*var4[4] + 20.*t134*t141*t56*var4[14] - 5.*t158*t73*var4[14] + 30.*t112*t118*t121*var4[24] - 20.*t134*t141*t56*var4[24] - 30.*t112*t118*t121*var4[34] + 20.*t70*t71*t89*var4[34] + 5.*t37*t57*var4[44] - 20.*t70*t71*t89*var4[44] - 5.*t37*t57*var4[54];
  p_output1[5]=var3[2] + (t2245*t4308 + t2441*t4316 - 1.*t1816*t227*t4511 + t4372*t5056 + t4346*t5168 + t3910*t5276 + t3782*t5286 + t3856*t5300 - 0.80315*(t3967*t5276 + t3948*t5286 + t3956*t5300) + 0.148705*(t3980*t5276 + t3973*t5286 + t3977*t5300) - 0.038924*(t3993*t5276 + t3984*t5286 + t3991*t5300))*var3[3] + (t2062*t227*t244*t4308 - 1.*t2062*t227*t251*t4316 - 1.*t169*t2062*t4511 + t4372*t5379 + t4346*t5384 + t3910*t5399 + t3782*t5410 + t3856*t5425 - 0.80315*(t3967*t5399 + t3948*t5410 + t3956*t5425) + 0.148705*(t3980*t5399 + t3973*t5410 + t3977*t5425) - 0.038924*(t3993*t5399 + t3984*t5410 + t3991*t5425))*var3[4] + (t2080*t4308 + t3045*t4316 + t4346*t5509 + t4372*t5522 + t3782*t5537 + t3910*t5544 + t3856*t5551 - 0.80315*(t3948*t5537 + t3967*t5544 + t3956*t5551) + 0.148705*(t3973*t5537 + t3980*t5544 + t3977*t5551) - 0.038924*(t3984*t5537 + t3993*t5544 + t3991*t5551))*var3[5] + (t3187*t4483 + t3045*t4488 + t4346*t5643 + t4372*t5651 + t3782*t5656 + t3910*t5660 + t3856*t5671 - 0.80315*(t3948*t5656 + t3967*t5660 + t3956*t5671) + 0.148705*(t3973*t5656 + t3980*t5660 + t3977*t5671) - 0.038924*(t3984*t5656 + t3993*t5660 + t3991*t5671))*var3[12] + (t2062*t227*t3664 + t3679*t5643 + t3738*t5711 + t3782*t5719 + t3856*t5726 + t3910*t5734 - 0.80315*(t3948*t5719 + t3956*t5726 + t3967*t5734) + 0.148705*(t3973*t5719 + t3977*t5726 + t3980*t5734) - 0.038924*(t3984*t5719 + t3991*t5726 + t3993*t5734))*var3[13] + (t4023*t5769 + t4085*t5776 + t4152*t5783 - 0.038924*(t4255*t5769 + t4258*t5776 - 1.000000000049*t3764*t5783) + 0.148705*(t4182*t5769 - 6.5e-11*t3764*t5776 + t4192*t5783) - 0.80315*(-1.000000000016*t3764*t5769 + t4211*t5776 + t4229*t5783))*var3[14] + 5.*t158*t73*var4[5] + 20.*t134*t141*t56*var4[15] - 5.*t158*t73*var4[15] + 30.*t112*t118*t121*var4[25] - 20.*t134*t141*t56*var4[25] - 30.*t112*t118*t121*var4[35] + 20.*t70*t71*t89*var4[35] + 5.*t37*t57*var4[45] - 20.*t70*t71*t89*var4[45] - 5.*t37*t57*var4[55];
  p_output1[6]=var3[1] + (-0.002264*t2067 + 0.00183*t2080 + 0.024028*t2062*t227)*var3[3] + (-0.024028*t169*t1816 + 0.002264*t1816*t227*t244 + 0.00183*t1816*t227*t251)*var3[4] + (-0.002264*t2222 + 0.00183*t2245)*var3[5] + 5.*t158*t73*var4[6] + 20.*t134*t141*t56*var4[16] - 5.*t158*t73*var4[16] + 30.*t112*t118*t121*var4[26] - 20.*t134*t141*t56*var4[26] - 30.*t112*t118*t121*var4[36] + 20.*t70*t71*t89*var4[36] + 5.*t37*t57*var4[46] - 20.*t70*t71*t89*var4[46] - 5.*t37*t57*var4[56];
  p_output1[7]=var3[2] + (-0.002264*t2245 + 0.024028*t1816*t227 + 0.00183*t2441)*var3[3] + (0.024028*t169*t2062 - 0.002264*t2062*t227*t244 - 0.00183*t2062*t227*t251)*var3[4] + (-0.002264*t2080 + 0.00183*t3045)*var3[5] + 5.*t158*t73*var4[7] + 20.*t134*t141*t56*var4[17] - 5.*t158*t73*var4[17] + 30.*t112*t118*t121*var4[27] - 20.*t134*t141*t56*var4[27] - 30.*t112*t118*t121*var4[37] + 20.*t70*t71*t89*var4[37] + 5.*t37*t57*var4[47] - 20.*t70*t71*t89*var4[47] - 5.*t37*t57*var4[57];
  p_output1[8]=t2080*t227*t251*t5994*var3[3] + (-1.*t169*t2222*t251*t5994 + t1816*t5987*t5988*t5994)*var3[4] + (-1.*t2222*t227*t244*t5994 + t2245*t227*t251*t5994)*var3[5] + 5.*t158*t73*var4[8] + 20.*t134*t141*t56*var4[18] - 5.*t158*t73*var4[18] + 30.*t112*t118*t121*var4[28] - 20.*t134*t141*t56*var4[28] - 30.*t112*t118*t121*var4[38] + 20.*t70*t71*t89*var4[38] + 5.*t37*t57*var4[48] - 20.*t70*t71*t89*var4[48] - 5.*t37*t57*var4[58];
  p_output1[9]=(0.15121*(t2441*t6031 + t2245*t6036) - 0.15121*(t2245*t6031 - 1.*t2441*t6036) + t2441*t6044 + 0.15121*(t2441*t6051 + t2245*t6058) + 0.15121*(t2245*t6051 - 1.*t2441*t6058) - 1.*t2441*t6061 + t2245*t6069 - 1.*t2245*t6073)*var3[3] + (0.15121*(-1.*t2062*t227*t251*t6031 + t2062*t227*t244*t6036) - 0.15121*(t2062*t227*t244*t6031 + t2062*t227*t251*t6036) - 1.*t2062*t227*t251*t6044 + 0.15121*(-1.*t2062*t227*t251*t6051 + t2062*t227*t244*t6058) + 0.15121*(t2062*t227*t244*t6051 + t2062*t227*t251*t6058) + t2062*t227*t251*t6061 + t2062*t227*t244*t6069 - 1.*t2062*t227*t244*t6073)*var3[4] + (t3045*t6044 - 1.*t3045*t6061 + t2080*t6069 - 1.*t2080*t6073 + 0.15121*(t2080*t6036 + t6131) - 0.15121*(t2080*t6031 + t6138) + 0.15121*(t2080*t6058 + t6156) + 0.15121*(t2080*t6051 + t6167))*var3[5] + (t3187*(0.15121*t6036 + t6112) + t3045*(t6043 + t6112) + 0.15121*(-1.*t3187*t6036 + t6131) - 0.15121*(-1.*t3187*t6031 + t6138))*var3[9] + (-1.*t3187*(-0.15121*t6051 + t6060) - 1.*t3045*(0.15121*t6051 + t6060) + 0.15121*(-1.*t3187*t6058 + t6156) + 0.15121*(-1.*t3187*t6051 + t6167))*var3[15] + 5.*t158*t73*var4[9] + 20.*t134*t141*t56*var4[19] - 5.*t158*t73*var4[19] + 30.*t112*t118*t121*var4[29] - 20.*t134*t141*t56*var4[29] - 30.*t112*t118*t121*var4[39] + 20.*t70*t71*t89*var4[39] + 5.*t37*t57*var4[49] - 20.*t70*t71*t89*var4[49] - 5.*t37*t57*var4[59];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4,*var5,*var6,*var7;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 7)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Seven input(s) required (var1,var2,var3,var4,var5,var6,var7).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 2 && ncols == 1) && 
      !(mrows == 1 && ncols == 2))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 60 && ncols == 1) && 
      !(mrows == 1 && ncols == 60))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }
  mrows = mxGetM(prhs[4]);
  ncols = mxGetN(prhs[4]);
  if( !mxIsDouble(prhs[4]) || mxIsComplex(prhs[4]) ||
    ( !(mrows == 2 && ncols == 1) && 
      !(mrows == 1 && ncols == 2))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var5 is wrong.");
    }
  mrows = mxGetM(prhs[5]);
  ncols = mxGetN(prhs[5]);
  if( !mxIsDouble(prhs[5]) || mxIsComplex(prhs[5]) ||
    ( !(mrows == 1 && ncols == 1) && 
      !(mrows == 1 && ncols == 1))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var6 is wrong.");
    }
  mrows = mxGetM(prhs[6]);
  ncols = mxGetN(prhs[6]);
  if( !mxIsDouble(prhs[6]) || mxIsComplex(prhs[6]) ||
    ( !(mrows == 1 && ncols == 1) && 
      !(mrows == 1 && ncols == 1))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var7 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
  var5 = mxGetPr(prhs[4]);
  var6 = mxGetPr(prhs[5]);
  var7 = mxGetPr(prhs[6]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 10, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4,var5,var6,var7);


}

#else // MATLAB_MEX_FILE

#include "d1y_position_ParallelStance.hh"

namespace ParallelStance
{

void d1y_position_ParallelStance_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4,const double *var5,const double *var6,const double *var7)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4, var5, var6, var7);

}

}

#endif // MATLAB_MEX_FILE
