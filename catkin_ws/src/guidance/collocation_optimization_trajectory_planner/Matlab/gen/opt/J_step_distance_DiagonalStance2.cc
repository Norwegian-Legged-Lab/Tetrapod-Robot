/*
 * Automatically Generated from Mathematica.
 * Sun 14 Nov 2021 17:31:13 GMT+01:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t304;
  double t1644;
  double t1658;
  double t1663;
  double t1690;
  double t1691;
  double t1823;
  double t674;
  double t805;
  double t1093;
  double t1490;
  double t1630;
  double t1985;
  double t54;
  double t2029;
  double t2035;
  double t2037;
  double t2066;
  double t2069;
  double t2072;
  double t2106;
  double t2107;
  double t2156;
  double t2160;
  double t2299;
  double t2192;
  double t2219;
  double t2222;
  double t2233;
  double t2238;
  double t2256;
  double t2341;
  double t2346;
  double t2368;
  double t2369;
  double t2406;
  double t2407;
  double t2411;
  double t2415;
  double t2428;
  double t2430;
  double t2561;
  double t2581;
  double t2587;
  double t2598;
  double t2608;
  double t2655;
  double t2657;
  double t2661;
  double t2665;
  double t2755;
  double t2647;
  double t2648;
  double t2650;
  double t2689;
  double t2690;
  double t2691;
  double t2789;
  double t2791;
  double t2794;
  double t2805;
  double t2756;
  double t2761;
  double t2772;
  double t2776;
  double t2781;
  double t2782;
  double t2877;
  double t2844;
  double t2848;
  double t2850;
  double t2854;
  double t2815;
  double t2817;
  double t2818;
  double t2819;
  double t2822;
  double t2825;
  double t1899;
  double t1910;
  double t1665;
  double t1799;
  double t2042;
  double t2057;
  double t2063;
  double t2009;
  double t2013;
  double t2020;
  double t2025;
  double t2028;
  double t2376;
  double t2381;
  double t2384;
  double t2394;
  double t2400;
  double t2926;
  double t2931;
  double t2932;
  double t2935;
  double t2937;
  double t2938;
  double t2264;
  double t2265;
  double t2305;
  double t2309;
  double t2322;
  double t2159;
  double t2170;
  double t2173;
  double t2941;
  double t2942;
  double t2944;
  double t2948;
  double t2949;
  double t2952;
  double t2513;
  double t2523;
  double t2955;
  double t2956;
  double t2957;
  double t2444;
  double t2448;
  double t2611;
  double t2616;
  double t2625;
  double t2631;
  double t2653;
  double t2663;
  double t2669;
  double t2672;
  double t2695;
  double t2706;
  double t2711;
  double t3007;
  double t3009;
  double t3012;
  double t3014;
  double t3017;
  double t3021;
  double t2788;
  double t2799;
  double t2806;
  double t2808;
  double t2826;
  double t2828;
  double t2840;
  double t2862;
  double t2863;
  double t2865;
  double t2869;
  double t2910;
  double t2911;
  double t3044;
  double t3045;
  double t3047;
  double t3036;
  double t3038;
  double t3041;
  double t3049;
  double t3050;
  double t3051;
  double t2883;
  double t2887;
  double t3013;
  double t3030;
  double t3042;
  double t3048;
  double t3052;
  double t3053;
  double t3058;
  double t3059;
  double t3061;
  double t3062;
  double t3065;
  double t3071;
  double t3072;
  double t3074;
  double t3075;
  double t3076;
  double t3079;
  double t3081;
  double t3084;
  double t3088;
  double t3129;
  double t3132;
  double t3137;
  double t3166;
  double t3167;
  double t3169;
  double t3180;
  double t3191;
  double t3192;
  double t3193;
  double t3196;
  double t3147;
  double t3150;
  double t3155;
  double t3157;
  double t3270;
  double t3273;
  double t3275;
  double t3280;
  double t3250;
  double t3252;
  double t3253;
  double t3255;
  double t3297;
  double t3305;
  double t3361;
  double t2933;
  double t2940;
  double t2946;
  double t2953;
  double t2960;
  double t2963;
  double t2964;
  double t2966;
  double t2967;
  double t2969;
  double t2970;
  double t2977;
  double t2979;
  double t2982;
  double t2983;
  double t2984;
  double t2988;
  double t2994;
  double t2995;
  double t2997;
  double t3406;
  double t3408;
  double t3414;
  double t3416;
  double t3418;
  double t3419;
  double t3427;
  double t3429;
  double t3430;
  double t3431;
  double t3434;
  double t3435;
  double t3436;
  double t3442;
  double t3502;
  double t3505;
  double t3508;
  double t3509;
  double t3515;
  double t3516;
  double t3517;
  double t3526;
  double t3527;
  double t3528;
  double t3530;
  double t80;
  double t955;
  double t1119;
  double t1539;
  double t1579;
  double t3574;
  double t3579;
  double t3578;
  double t3581;
  double t3583;
  double t3586;
  double t3587;
  double t3588;
  double t3591;
  double t3592;
  double t3594;
  double t3598;
  double t3599;
  double t3601;
  double t3604;
  double t3606;
  double t3608;
  double t3609;
  double t3612;
  double t3613;
  double t3615;
  double t3616;
  double t3618;
  double t3620;
  double t3621;
  double t3622;
  double t2721;
  double t2722;
  double t2732;
  double t2744;
  double t3669;
  double t3671;
  double t3675;
  double t3680;
  double t3683;
  double t3685;
  double t3695;
  double t3696;
  double t3698;
  double t3701;
  double t3712;
  double t3713;
  double t3718;
  double t3719;
  double t3705;
  double t3708;
  double t3709;
  double t3710;
  double t3755;
  double t3756;
  double t3757;
  double t3761;
  double t3762;
  double t3765;
  double t3768;
  double t3769;
  double t3770;
  double t3773;
  double t3776;
  double t3777;
  double t3778;
  double t3781;
  double t3783;
  double t3784;
  double t3785;
  double t3786;
  double t3830;
  double t3832;
  double t3836;
  double t3839;
  double t3841;
  double t3843;
  double t3850;
  double t3851;
  double t3852;
  double t3853;
  double t3864;
  double t3866;
  double t3867;
  double t3868;
  double t3856;
  double t3858;
  double t3859;
  double t3862;
  double t3912;
  double t3913;
  double t3914;
  double t3917;
  double t3918;
  double t3919;
  double t3921;
  double t3923;
  double t3924;
  double t3929;
  double t3930;
  double t3931;
  double t3934;
  double t3935;
  double t3936;
  double t3947;
  double t3950;
  double t3952;
  double t3955;
  double t3958;
  double t3959;
  double t3994;
  double t3996;
  double t3997;
  double t4002;
  double t4004;
  double t4010;
  double t4021;
  double t4022;
  double t4023;
  double t4013;
  double t4015;
  double t4016;
  double t4026;
  double t4028;
  double t4029;
  double t3092;
  double t3094;
  double t3102;
  double t3103;
  double t4072;
  double t4074;
  double t4075;
  double t4079;
  double t4081;
  double t4089;
  double t4092;
  double t4108;
  double t4109;
  double t4111;
  double t4099;
  double t4100;
  double t4101;
  double t4115;
  double t4117;
  double t4118;
  double t3110;
  double t3116;
  double t3117;
  double t3120;
  double t3121;
  double t3124;
  double t3140;
  double t3142;
  double t3144;
  double t4160;
  double t4162;
  double t4163;
  double t4172;
  double t4173;
  double t4174;
  double t4175;
  double t4179;
  double t4181;
  double t4182;
  double t4185;
  double t4167;
  double t4168;
  double t4169;
  double t4170;
  double t3256;
  double t3258;
  double t3260;
  double t3282;
  double t3283;
  double t3285;
  double t3308;
  double t3309;
  double t3312;
  double t4227;
  double t4228;
  double t4229;
  double t4231;
  double t4214;
  double t4215;
  double t4224;
  double t4225;
  double t4234;
  double t4235;
  double t3362;
  double t3363;
  double t3369;
  double t4263;
  double t4266;
  double t4268;
  double t4269;
  double t4271;
  double t4274;
  double t4275;
  double t4277;
  double t4278;
  double t4280;
  double t4282;
  double t4283;
  double t4284;
  double t3373;
  double t3375;
  double t3377;
  double t3381;
  double t3384;
  double t3394;
  double t3399;
  double t3400;
  double t4332;
  double t4333;
  double t4334;
  double t4340;
  double t4341;
  double t4343;
  double t4346;
  double t4350;
  double t4351;
  double t4352;
  double t4354;
  double t4355;
  double t4358;
  double t4359;
  double t3494;
  double t3497;
  double t3500;
  double t3512;
  double t3514;
  double t3519;
  double t3522;
  double t3525;
  double t4391;
  double t4396;
  double t4397;
  double t4398;
  double t4401;
  double t4402;
  double t4403;
  double t4407;
  double t4408;
  double t4409;
  double t4410;
  t304 = Cos(var1[10]);
  t1644 = Cos(var1[9]);
  t1658 = -1.*t1644;
  t1663 = 1. + t1658;
  t1690 = Sin(var1[9]);
  t1691 = -0.15121*t1690;
  t1823 = Sin(var1[4]);
  t674 = -1.*t304;
  t805 = 1. + t674;
  t1093 = -1. + t304;
  t1490 = Sin(var1[10]);
  t1630 = Cos(var1[5]);
  t1985 = Sin(var1[5]);
  t54 = Cos(var1[4]);
  t2029 = t1630*t1690*t1823;
  t2035 = t1644*t1823*t1985;
  t2037 = t2029 + t2035;
  t2066 = -1.*t1644*t1630*t1823;
  t2069 = t1690*t1823*t1985;
  t2072 = t2066 + t2069;
  t2106 = Cos(var1[11]);
  t2107 = -1.*t2106;
  t2156 = 1. + t2107;
  t2160 = Sin(var1[11]);
  t2299 = -1. + t2106;
  t2192 = t54*t1490;
  t2219 = -4.e-6*t1490*t2037;
  t2222 = -1.000000000016*t805;
  t2233 = 1. + t2222;
  t2238 = t2233*t2072;
  t2256 = t2192 + t2219 + t2238;
  t2341 = t304*t54;
  t2346 = 4.e-6*t805*t2037;
  t2368 = -1.*t1490*t2072;
  t2369 = t2341 + t2346 + t2368;
  t2406 = 4.e-6*t805*t54;
  t2407 = 1.6e-11*t1093;
  t2411 = 1. + t2407;
  t2415 = t2411*t2037;
  t2428 = 4.e-6*t1490*t2072;
  t2430 = t2406 + t2415 + t2428;
  t2561 = Cos(var1[6]);
  t2581 = -1.*t2561;
  t2587 = 1. + t2581;
  t2598 = 0.15121*t2587;
  t2608 = Sin(var1[6]);
  t2655 = Cos(var1[7]);
  t2657 = -1.*t2655;
  t2661 = 1. + t2657;
  t2665 = Sin(var1[7]);
  t2755 = -1. + t2655;
  t2647 = t2561*t1823*t1985;
  t2648 = t1630*t1823*t2608;
  t2650 = t2647 + t2648;
  t2689 = -1.*t1630*t2561*t1823;
  t2690 = t1823*t1985*t2608;
  t2691 = t2689 + t2690;
  t2789 = Cos(var1[8]);
  t2791 = -1.*t2789;
  t2794 = 1. + t2791;
  t2805 = Sin(var1[8]);
  t2756 = 4.e-6*t54*t2755;
  t2761 = 1.6e-11*t2755;
  t2772 = 1. + t2761;
  t2776 = t2772*t2650;
  t2781 = 4.e-6*t2691*t2665;
  t2782 = t2756 + t2776 + t2781;
  t2877 = -1. + t2789;
  t2844 = t54*t2655;
  t2848 = 4.e-6*t2755*t2650;
  t2850 = t2691*t2665;
  t2854 = t2844 + t2848 + t2850;
  t2815 = -1.000000000016*t2661;
  t2817 = 1. + t2815;
  t2818 = t2817*t2691;
  t2819 = -1.*t54*t2665;
  t2822 = -4.e-6*t2650*t2665;
  t2825 = t2818 + t2819 + t2822;
  t1899 = -0.15121*t1663;
  t1910 = t1899 + t1691;
  t1665 = 0.15121*t1663;
  t1799 = t1665 + t1691;
  t2042 = 0.281210000008499*t805;
  t2057 = -0.03874900000062*t1490;
  t2063 = t2042 + t2057;
  t2009 = -1.2484e-7*var1[10];
  t2013 = 2.479936e-18*t805;
  t2020 = -1.54996e-7*t1093;
  t2025 = 1.124840000016e-6*t1490;
  t2028 = t2009 + t2013 + t2020 + t2025;
  t2376 = -1.26e-8*var1[11];
  t2381 = 2.552896e-18*t2156;
  t2384 = -1.59556e-7*t2299;
  t2394 = 2.012600000032e-6*t2160;
  t2400 = t2376 + t2381 + t2384 + t2394;
  t2926 = -1.*t54*t1630*t1690;
  t2931 = -1.*t1644*t54*t1985;
  t2932 = t2926 + t2931;
  t2935 = -1.*t1644*t54*t1630;
  t2937 = t54*t1690*t1985;
  t2938 = t2935 + t2937;
  t2264 = -5.04e-14*var1[11];
  t2265 = -0.039889*t2156;
  t2305 = 6.38224e-13*t2299;
  t2309 = -0.503150000008*t2160;
  t2322 = t2264 + t2265 + t2305 + t2309;
  t2159 = 0.50315000001605*t2156;
  t2170 = -0.0398890000006382*t2160;
  t2173 = t2159 + t2170;
  t2941 = 4.e-6*t1490*t2932;
  t2942 = t2411*t2938;
  t2944 = t2941 + t2942;
  t2948 = -1.*t1490*t2932;
  t2949 = 4.e-6*t805*t2938;
  t2952 = t2948 + t2949;
  t2513 = -1.000000000016*t2156;
  t2523 = 1. + t2513;
  t2955 = t2233*t2932;
  t2956 = -4.e-6*t1490*t2938;
  t2957 = t2955 + t2956;
  t2444 = 1.6e-11*t2299;
  t2448 = 1. + t2444;
  t2611 = -0.15121*t2608;
  t2616 = t2598 + t2611;
  t2625 = 0.15121*t2608;
  t2631 = t2598 + t2625;
  t2653 = -1.2484e-7*var1[7];
  t2663 = -1.5499600000248e-7*t2661;
  t2669 = 1.124840000016e-6*t2665;
  t2672 = t2653 + t2663 + t2669;
  t2695 = 0.281210000008499*t2661;
  t2706 = 0.03874900000062*t2665;
  t2711 = t2695 + t2706;
  t3007 = -1.*t54*t1630*t2561;
  t3009 = t54*t1985*t2608;
  t3012 = t3007 + t3009;
  t3014 = -1.*t54*t2561*t1985;
  t3017 = -1.*t54*t1630*t2608;
  t3021 = t3014 + t3017;
  t2788 = -1.284e-8*var1[8];
  t2799 = -1.5499600000248e-7*t2794;
  t2806 = 2.012840000032e-6*t2805;
  t2808 = t2788 + t2799 + t2806;
  t2826 = 0.503210000016051*t2794;
  t2828 = 0.03874900000062*t2805;
  t2840 = t2826 + t2828;
  t2862 = 5.136e-14*var1[8];
  t2863 = -0.03874900000062*t2794;
  t2865 = 0.503210000008*t2805;
  t2869 = t2862 + t2863 + t2865;
  t2910 = -1.000000000016*t2794;
  t2911 = 1. + t2910;
  t3044 = t2817*t3021;
  t3045 = -4.e-6*t3012*t2665;
  t3047 = t3044 + t3045;
  t3036 = t2772*t3012;
  t3038 = 4.e-6*t3021*t2665;
  t3041 = t3036 + t3038;
  t3049 = 4.e-6*t2755*t3012;
  t3050 = t3021*t2665;
  t3051 = t3049 + t3050;
  t2883 = 1.6e-11*t2877;
  t2887 = 1. + t2883;
  t3013 = t3012*t2672;
  t3030 = t3021*t2711;
  t3042 = t3041*t2808;
  t3048 = t3047*t2840;
  t3052 = t3051*t2869;
  t3053 = t2911*t3047;
  t3058 = -4.e-6*t3041*t2805;
  t3059 = -1.*t3051*t2805;
  t3061 = t3053 + t3058 + t3059;
  t3062 = 0.80321*t3061;
  t3065 = t2887*t3041;
  t3071 = 4.e-6*t2877*t3051;
  t3072 = 4.e-6*t3047*t2805;
  t3074 = t3065 + t3071 + t3072;
  t3075 = 0.14871*t3074;
  t3076 = 4.e-6*t2877*t3041;
  t3079 = t2789*t3051;
  t3081 = t3047*t2805;
  t3084 = t3076 + t3079 + t3081;
  t3088 = -0.03875*t3084;
  t3129 = t54*t1630*t2561;
  t3132 = -1.*t54*t1985*t2608;
  t3137 = t3129 + t3132;
  t3166 = -1.*t2655*t1823;
  t3167 = -4.e-6*t2655*t3021;
  t3169 = -1.000000000016*t3137*t2665;
  t3180 = t3166 + t3167 + t3169;
  t3191 = t2655*t3137;
  t3192 = -1.*t1823*t2665;
  t3193 = -4.e-6*t3021*t2665;
  t3196 = t3191 + t3192 + t3193;
  t3147 = 4.e-6*t2655*t3137;
  t3150 = -4.e-6*t1823*t2665;
  t3155 = -1.6e-11*t3021*t2665;
  t3157 = t3147 + t3150 + t3155;
  t3270 = 4.e-6*t2755*t1823;
  t3273 = t2772*t3021;
  t3275 = 4.e-6*t3137*t2665;
  t3280 = t3270 + t3273 + t3275;
  t3250 = t2655*t1823;
  t3252 = 4.e-6*t2755*t3021;
  t3253 = t3137*t2665;
  t3255 = t3250 + t3252 + t3253;
  t3297 = t2817*t3137;
  t3305 = t3297 + t3192 + t3193;
  t3361 = -0.15121*t1644;
  t2933 = -1.*t2063*t2932;
  t2940 = -1.*t2028*t2938;
  t2946 = -1.*t2400*t2944;
  t2953 = -1.*t2322*t2952;
  t2960 = -1.*t2173*t2957;
  t2963 = -4.e-6*t2160*t2944;
  t2964 = t2160*t2952;
  t2966 = t2523*t2957;
  t2967 = t2963 + t2964 + t2966;
  t2969 = -0.803147*t2967;
  t2970 = 4.e-6*t2156*t2944;
  t2977 = t2106*t2952;
  t2979 = -1.*t2160*t2957;
  t2982 = t2970 + t2977 + t2979;
  t2983 = 0.041195*t2982;
  t2984 = t2448*t2944;
  t2988 = 4.e-6*t2156*t2952;
  t2994 = 4.e-6*t2160*t2957;
  t2995 = t2984 + t2988 + t2994;
  t2997 = 0.14871*t2995;
  t3406 = t1644*t54*t1630;
  t3408 = -1.*t54*t1690*t1985;
  t3414 = t3406 + t3408;
  t3416 = -1.*t1490*t1823;
  t3418 = -1.*t304*t3414;
  t3419 = t3416 + t2941 + t3418;
  t3427 = 4.e-6*t1490*t1823;
  t3429 = -1.6e-11*t1490*t2932;
  t3430 = 4.e-6*t304*t3414;
  t3431 = t3427 + t3429 + t3430;
  t3434 = t304*t1823;
  t3435 = -4.e-6*t304*t2932;
  t3436 = -1.000000000016*t1490*t3414;
  t3442 = t3434 + t3435 + t3436;
  t3502 = t1490*t1823;
  t3505 = -4.e-6*t1490*t2932;
  t3508 = t2233*t3414;
  t3509 = t3502 + t3505 + t3508;
  t3515 = 4.e-6*t805*t2932;
  t3516 = -1.*t1490*t3414;
  t3517 = t3434 + t3515 + t3516;
  t3526 = 4.e-6*t805*t1823;
  t3527 = t2411*t2932;
  t3528 = 4.e-6*t1490*t3414;
  t3530 = t3526 + t3527 + t3528;
  t80 = -4.9936e-13*var1[10];
  t955 = -0.038749*t805;
  t1119 = 6.19984e-13*t1093;
  t1539 = -0.281210000004*t1490;
  t1579 = t80 + t955 + t1119 + t1539;
  t3574 = Cos(var1[3]);
  t3579 = Sin(var1[3]);
  t3578 = t3574*t1630*t1823;
  t3581 = -1.*t3579*t1985;
  t3583 = t3578 + t3581;
  t3586 = -1.*t1630*t3579;
  t3587 = -1.*t3574*t1823*t1985;
  t3588 = t3586 + t3587;
  t3591 = -1.*t1690*t3583;
  t3592 = t1644*t3588;
  t3594 = t3591 + t3592;
  t3598 = t1644*t3583;
  t3599 = t1690*t3588;
  t3601 = t3598 + t3599;
  t3604 = -1.*t3574*t54*t1490;
  t3606 = -4.e-6*t1490*t3594;
  t3608 = t2233*t3601;
  t3609 = t3604 + t3606 + t3608;
  t3612 = -1.*t304*t3574*t54;
  t3613 = 4.e-6*t805*t3594;
  t3615 = -1.*t1490*t3601;
  t3616 = t3612 + t3613 + t3615;
  t3618 = -4.e-6*t805*t3574*t54;
  t3620 = t2411*t3594;
  t3621 = 4.e-6*t1490*t3601;
  t3622 = t3618 + t3620 + t3621;
  t2721 = 4.9936e-13*var1[7];
  t2722 = -0.03874900000062*t2661;
  t2732 = 0.281210000004*t2665;
  t2744 = t2721 + t2722 + t2732;
  t3669 = t2561*t3588;
  t3671 = -1.*t3583*t2608;
  t3675 = t3669 + t3671;
  t3680 = t2561*t3583;
  t3683 = t3588*t2608;
  t3685 = t3680 + t3683;
  t3695 = -4.e-6*t3574*t54*t2755;
  t3696 = t2772*t3675;
  t3698 = 4.e-6*t3685*t2665;
  t3701 = t3695 + t3696 + t3698;
  t3712 = -1.*t3574*t54*t2655;
  t3713 = 4.e-6*t2755*t3675;
  t3718 = t3685*t2665;
  t3719 = t3712 + t3713 + t3718;
  t3705 = t2817*t3685;
  t3708 = t3574*t54*t2665;
  t3709 = -4.e-6*t3675*t2665;
  t3710 = t3705 + t3708 + t3709;
  t3755 = -1.*t54*t1630*t1690*t3579;
  t3756 = -1.*t1644*t54*t3579*t1985;
  t3757 = t3755 + t3756;
  t3761 = t1644*t54*t1630*t3579;
  t3762 = -1.*t54*t1690*t3579*t1985;
  t3765 = t3761 + t3762;
  t3768 = t1490*t3579*t1823;
  t3769 = -4.e-6*t1490*t3757;
  t3770 = t2233*t3765;
  t3773 = t3768 + t3769 + t3770;
  t3776 = t304*t3579*t1823;
  t3777 = 4.e-6*t805*t3757;
  t3778 = -1.*t1490*t3765;
  t3781 = t3776 + t3777 + t3778;
  t3783 = 4.e-6*t805*t3579*t1823;
  t3784 = t2411*t3757;
  t3785 = 4.e-6*t1490*t3765;
  t3786 = t3783 + t3784 + t3785;
  t3830 = -1.*t54*t2561*t3579*t1985;
  t3832 = -1.*t54*t1630*t3579*t2608;
  t3836 = t3830 + t3832;
  t3839 = t54*t1630*t2561*t3579;
  t3841 = -1.*t54*t3579*t1985*t2608;
  t3843 = t3839 + t3841;
  t3850 = 4.e-6*t2755*t3579*t1823;
  t3851 = t2772*t3836;
  t3852 = 4.e-6*t3843*t2665;
  t3853 = t3850 + t3851 + t3852;
  t3864 = t2655*t3579*t1823;
  t3866 = 4.e-6*t2755*t3836;
  t3867 = t3843*t2665;
  t3868 = t3864 + t3866 + t3867;
  t3856 = t2817*t3843;
  t3858 = -1.*t3579*t1823*t2665;
  t3859 = -4.e-6*t3836*t2665;
  t3862 = t3856 + t3858 + t3859;
  t3912 = -1.*t1630*t3579*t1823;
  t3913 = -1.*t3574*t1985;
  t3914 = t3912 + t3913;
  t3917 = t3574*t1630;
  t3918 = -1.*t3579*t1823*t1985;
  t3919 = t3917 + t3918;
  t3921 = t1690*t3914;
  t3923 = t1644*t3919;
  t3924 = t3921 + t3923;
  t3929 = t1644*t3914;
  t3930 = -1.*t1690*t3919;
  t3931 = t3929 + t3930;
  t3934 = 4.e-6*t1490*t3924;
  t3935 = t2411*t3931;
  t3936 = t3934 + t3935;
  t3947 = -1.*t1490*t3924;
  t3950 = 4.e-6*t805*t3931;
  t3952 = t3947 + t3950;
  t3955 = t2233*t3924;
  t3958 = -4.e-6*t1490*t3931;
  t3959 = t3955 + t3958;
  t3994 = t2561*t3914;
  t3996 = -1.*t3919*t2608;
  t3997 = t3994 + t3996;
  t4002 = t2561*t3919;
  t4004 = t3914*t2608;
  t4010 = t4002 + t4004;
  t4021 = t2817*t4010;
  t4022 = -4.e-6*t3997*t2665;
  t4023 = t4021 + t4022;
  t4013 = t2772*t3997;
  t4015 = 4.e-6*t4010*t2665;
  t4016 = t4013 + t4015;
  t4026 = 4.e-6*t2755*t3997;
  t4028 = t4010*t2665;
  t4029 = t4026 + t4028;
  t3092 = -0.15121*t2561;
  t3094 = t3092 + t2625;
  t3102 = 0.15121*t2561;
  t3103 = t3102 + t2625;
  t4072 = t1630*t3579*t1823;
  t4074 = t3574*t1985;
  t4075 = t4072 + t4074;
  t4079 = -1.*t2561*t4075;
  t4081 = t4079 + t3996;
  t4089 = -1.*t4075*t2608;
  t4092 = t4002 + t4089;
  t4108 = t2817*t4092;
  t4109 = -4.e-6*t4081*t2665;
  t4111 = t4108 + t4109;
  t4099 = t2772*t4081;
  t4100 = 4.e-6*t4092*t2665;
  t4101 = t4099 + t4100;
  t4115 = 4.e-6*t2755*t4081;
  t4117 = t4092*t2665;
  t4118 = t4115 + t4117;
  t3110 = 0.281210000004*t2655;
  t3116 = -0.03874900000062*t2665;
  t3117 = 4.9936e-13 + t3110 + t3116;
  t3120 = 1.124840000016e-6*t2655;
  t3121 = -1.5499600000248e-7*t2665;
  t3124 = -1.2484e-7 + t3120 + t3121;
  t3140 = 0.03874900000062*t2655;
  t3142 = 0.281210000008499*t2665;
  t3144 = t3140 + t3142;
  t4160 = t2561*t4075;
  t4162 = t3919*t2608;
  t4163 = t4160 + t4162;
  t4172 = t54*t2655*t3579;
  t4173 = -4.e-6*t2655*t4092;
  t4174 = -1.000000000016*t4163*t2665;
  t4175 = t4172 + t4173 + t4174;
  t4179 = t2655*t4163;
  t4181 = t54*t3579*t2665;
  t4182 = -4.e-6*t4092*t2665;
  t4185 = t4179 + t4181 + t4182;
  t4167 = 4.e-6*t2655*t4163;
  t4168 = 4.e-6*t54*t3579*t2665;
  t4169 = -1.6e-11*t4092*t2665;
  t4170 = t4167 + t4168 + t4169;
  t3256 = 0.503210000008*t2789;
  t3258 = -0.03874900000062*t2805;
  t3260 = 5.136e-14 + t3256 + t3258;
  t3282 = 2.012840000032e-6*t2789;
  t3283 = -1.5499600000248e-7*t2805;
  t3285 = -1.284e-8 + t3282 + t3283;
  t3308 = 0.03874900000062*t2789;
  t3309 = 0.503210000016051*t2805;
  t3312 = t3308 + t3309;
  t4227 = -4.e-6*t54*t2755*t3579;
  t4228 = t2772*t4092;
  t4229 = 4.e-6*t4163*t2665;
  t4231 = t4227 + t4228 + t4229;
  t4214 = -1.*t54*t2655*t3579;
  t4215 = 4.e-6*t2755*t4092;
  t4224 = t4163*t2665;
  t4225 = t4214 + t4215 + t4224;
  t4234 = t2817*t4163;
  t4235 = t4234 + t4181 + t4182;
  t3362 = 0.15121*t1690;
  t3363 = t3361 + t3362;
  t3369 = t3361 + t1691;
  t4263 = -1.*t1690*t4075;
  t4266 = t4263 + t3923;
  t4268 = -1.*t1644*t4075;
  t4269 = t4268 + t3930;
  t4271 = 4.e-6*t1490*t4266;
  t4274 = t2411*t4269;
  t4275 = t4271 + t4274;
  t4277 = -1.*t1490*t4266;
  t4278 = 4.e-6*t805*t4269;
  t4280 = t4277 + t4278;
  t4282 = t2233*t4266;
  t4283 = -4.e-6*t1490*t4269;
  t4284 = t4282 + t4283;
  t3373 = -0.281210000004*t304;
  t3375 = -4.9936e-13 + t3373 + t2057;
  t3377 = 1.124840000016e-6*t304;
  t3381 = 1.5499600000248e-7*t1490;
  t3384 = -1.2484e-7 + t3377 + t3381;
  t3394 = -0.03874900000062*t304;
  t3399 = 0.281210000008499*t1490;
  t3400 = t3394 + t3399;
  t4332 = t1644*t4075;
  t4333 = t1690*t3919;
  t4334 = t4332 + t4333;
  t4340 = t54*t1490*t3579;
  t4341 = -1.*t304*t4334;
  t4343 = t4340 + t4271 + t4341;
  t4346 = -4.e-6*t54*t1490*t3579;
  t4350 = -1.6e-11*t1490*t4266;
  t4351 = 4.e-6*t304*t4334;
  t4352 = t4346 + t4350 + t4351;
  t4354 = -1.*t304*t54*t3579;
  t4355 = -4.e-6*t304*t4266;
  t4358 = -1.000000000016*t1490*t4334;
  t4359 = t4354 + t4355 + t4358;
  t3494 = -0.0398890000006382*t2106;
  t3497 = 0.50315000001605*t2160;
  t3500 = t3494 + t3497;
  t3512 = -0.503150000008*t2106;
  t3514 = -5.04e-14 + t3512 + t2170;
  t3519 = 2.012600000032e-6*t2106;
  t3522 = 1.59556000002553e-7*t2160;
  t3525 = -1.26e-8 + t3519 + t3522;
  t4391 = -1.*t54*t1490*t3579;
  t4396 = -4.e-6*t1490*t4266;
  t4397 = t2233*t4334;
  t4398 = t4391 + t4396 + t4397;
  t4401 = 4.e-6*t805*t4266;
  t4402 = -1.*t1490*t4334;
  t4403 = t4354 + t4401 + t4402;
  t4407 = -4.e-6*t805*t54*t3579;
  t4408 = t2411*t4266;
  t4409 = 4.e-6*t1490*t4334;
  t4410 = t4407 + t4408 + t4409;
  p_output1[0]=t1630*t1799*t1823 - 1.*t1823*t1910*t1985 - 1.*t2028*t2037 - 1.*t2063*t2072 - 1.*t2173*t2256 - 1.*t2322*t2369 - 1.*t2400*t2430 + 0.041195*(-1.*t2160*t2256 + t2106*t2369 + 4.e-6*t2156*t2430) + 0.14871*(4.e-6*t2160*t2256 + 4.e-6*t2156*t2369 + t2430*t2448) - 0.803147*(t2160*t2369 - 4.e-6*t2160*t2430 + t2256*t2523) + t1823*t1985*t2616 - 1.*t1630*t1823*t2631 + t2650*t2672 + t2691*t2711 + t2782*t2808 + t2825*t2840 + t2854*t2869 - 0.03875*(t2805*t2825 + t2789*t2854 + 4.e-6*t2782*t2877) + 0.14871*(4.e-6*t2805*t2825 + 4.e-6*t2854*t2877 + t2782*t2887) + 0.80321*(-4.e-6*t2782*t2805 - 1.*t2805*t2854 + t2825*t2911) - 1.*t1579*t54 + t2744*t54;
  p_output1[1]=t2933 + t2940 + t2946 + t2953 + t2960 + t2969 + t2983 + t2997 + t3013 + t3030 + t3042 + t3048 + t3052 + t3062 + t3075 + t3088 + t1630*t1910*t54 + t1799*t1985*t54 - 1.*t1630*t2616*t54 - 1.*t1985*t2631*t54;
  p_output1[2]=t3013 + t3030 + t3042 + t3048 + t3052 + t3062 + t3075 + t3088 - 1.*t1985*t3094*t54 + t1630*t3103*t54;
  p_output1[3]=t1823*t3117 + t3021*t3124 + t3137*t3144 + t2808*t3157 + t2840*t3180 + t2869*t3196 - 0.03875*(4.e-6*t2877*t3157 + t2805*t3180 + t2789*t3196) + 0.80321*(-4.e-6*t2805*t3157 + t2911*t3180 - 1.*t2805*t3196) + 0.14871*(t2887*t3157 + 4.e-6*t2805*t3180 + 4.e-6*t2877*t3196);
  p_output1[4]=t3255*t3260 + t3280*t3285 + 0.14871*(-4.e-6*t2805*t3255 - 1.6e-11*t2805*t3280 + 4.e-6*t2789*t3305) - 0.03875*(-1.*t2805*t3255 - 4.e-6*t2805*t3280 + t2789*t3305) + 0.80321*(-1.*t2789*t3255 - 4.e-6*t2789*t3280 - 1.000000000016*t2805*t3305) + t3305*t3312;
  p_output1[5]=t2933 + t2940 + t2946 + t2953 + t2960 + t2969 + t2983 + t2997 - 1.*t1630*t3363*t54 + t1985*t3369*t54;
  p_output1[6]=-1.*t1823*t3375 - 1.*t2932*t3384 - 1.*t3400*t3414 - 1.*t2322*t3419 - 1.*t2400*t3431 - 1.*t2173*t3442 + 0.041195*(t2106*t3419 + 4.e-6*t2156*t3431 - 1.*t2160*t3442) + 0.14871*(4.e-6*t2156*t3419 + t2448*t3431 + 4.e-6*t2160*t3442) - 0.803147*(t2160*t3419 - 4.e-6*t2160*t3431 + t2523*t3442);
  p_output1[7]=-1.*t3500*t3509 - 1.*t3514*t3517 - 1.*t3525*t3530 - 0.803147*(-1.000000000016*t2160*t3509 + t2106*t3517 - 4.e-6*t2106*t3530) + 0.14871*(4.e-6*t2106*t3509 + 4.e-6*t2160*t3517 - 1.6e-11*t2160*t3530) + 0.041195*(-1.*t2106*t3509 - 1.*t2160*t3517 + 4.e-6*t2160*t3530);
  p_output1[8]=-1.*t1799*t3583 + t2631*t3583 - 1.*t1910*t3588 + t2616*t3588 - 1.*t2028*t3594 - 1.*t2063*t3601 - 1.*t2173*t3609 - 1.*t2322*t3616 - 1.*t2400*t3622 + 0.041195*(-1.*t2160*t3609 + t2106*t3616 + 4.e-6*t2156*t3622) - 0.803147*(t2523*t3609 + t2160*t3616 - 4.e-6*t2160*t3622) + 0.14871*(4.e-6*t2160*t3609 + 4.e-6*t2156*t3616 + t2448*t3622) + t2672*t3675 + t2711*t3685 + t2808*t3701 + t2840*t3710 + t2869*t3719 - 0.03875*(4.e-6*t2877*t3701 + t2805*t3710 + t2789*t3719) + 0.80321*(-4.e-6*t2805*t3701 + t2911*t3710 - 1.*t2805*t3719) + 0.14871*(t2887*t3701 + 4.e-6*t2805*t3710 + 4.e-6*t2877*t3719) + t1579*t3574*t54 - 1.*t2744*t3574*t54;
  p_output1[9]=-1.*t1579*t1823*t3579 + t1823*t2744*t3579 - 1.*t2028*t3757 - 1.*t2063*t3765 - 1.*t2173*t3773 - 1.*t2322*t3781 - 1.*t2400*t3786 + 0.041195*(-1.*t2160*t3773 + t2106*t3781 + 4.e-6*t2156*t3786) - 0.803147*(t2523*t3773 + t2160*t3781 - 4.e-6*t2160*t3786) + 0.14871*(4.e-6*t2160*t3773 + 4.e-6*t2156*t3781 + t2448*t3786) + t2672*t3836 + t2711*t3843 + t2808*t3853 + t2840*t3862 + t2869*t3868 - 0.03875*(4.e-6*t2877*t3853 + t2805*t3862 + t2789*t3868) + 0.80321*(-4.e-6*t2805*t3853 + t2911*t3862 - 1.*t2805*t3868) + 0.14871*(t2887*t3853 + 4.e-6*t2805*t3862 + 4.e-6*t2877*t3868) - 1.*t1630*t1799*t3579*t54 + t1910*t1985*t3579*t54 - 1.*t1985*t2616*t3579*t54 + t1630*t2631*t3579*t54;
  p_output1[10]=-1.*t1910*t3914 + t2616*t3914 - 1.*t1799*t3919 + t2631*t3919 - 1.*t2063*t3924 - 1.*t2028*t3931 - 1.*t2400*t3936 - 1.*t2322*t3952 - 1.*t2173*t3959 + 0.041195*(4.e-6*t2156*t3936 + t2106*t3952 - 1.*t2160*t3959) + 0.14871*(t2448*t3936 + 4.e-6*t2156*t3952 + 4.e-6*t2160*t3959) - 0.803147*(-4.e-6*t2160*t3936 + t2160*t3952 + t2523*t3959) + t2672*t3997 + t2711*t4010 + t2808*t4016 + t2840*t4023 + t2869*t4029 - 0.03875*(4.e-6*t2877*t4016 + t2805*t4023 + t2789*t4029) + 0.80321*(-4.e-6*t2805*t4016 + t2911*t4023 - 1.*t2805*t4029) + 0.14871*(t2887*t4016 + 4.e-6*t2805*t4023 + 4.e-6*t2877*t4029);
  p_output1[11]=t3094*t3919 + t3103*t4075 + t2672*t4081 + t2711*t4092 + t2808*t4101 + t2840*t4111 + t2869*t4118 - 0.03875*(4.e-6*t2877*t4101 + t2805*t4111 + t2789*t4118) + 0.80321*(-4.e-6*t2805*t4101 + t2911*t4111 - 1.*t2805*t4118) + 0.14871*(t2887*t4101 + 4.e-6*t2805*t4111 + 4.e-6*t2877*t4118);
  p_output1[12]=t3124*t4092 + t3144*t4163 + t2808*t4170 + t2840*t4175 + t2869*t4185 - 0.03875*(4.e-6*t2877*t4170 + t2805*t4175 + t2789*t4185) + 0.80321*(-4.e-6*t2805*t4170 + t2911*t4175 - 1.*t2805*t4185) + 0.14871*(t2887*t4170 + 4.e-6*t2805*t4175 + 4.e-6*t2877*t4185) - 1.*t3117*t3579*t54;
  p_output1[13]=t3260*t4225 + t3285*t4231 + t3312*t4235 + 0.14871*(-4.e-6*t2805*t4225 - 1.6e-11*t2805*t4231 + 4.e-6*t2789*t4235) - 0.03875*(-1.*t2805*t4225 - 4.e-6*t2805*t4231 + t2789*t4235) + 0.80321*(-1.*t2789*t4225 - 4.e-6*t2789*t4231 - 1.000000000016*t2805*t4235);
  p_output1[14]=-1.*t3369*t3919 - 1.*t3363*t4075 - 1.*t2063*t4266 - 1.*t2028*t4269 - 1.*t2400*t4275 - 1.*t2322*t4280 - 1.*t2173*t4284 + 0.041195*(4.e-6*t2156*t4275 + t2106*t4280 - 1.*t2160*t4284) + 0.14871*(t2448*t4275 + 4.e-6*t2156*t4280 + 4.e-6*t2160*t4284) - 0.803147*(-4.e-6*t2160*t4275 + t2160*t4280 + t2523*t4284);
  p_output1[15]=-1.*t3384*t4266 - 1.*t3400*t4334 - 1.*t2322*t4343 - 1.*t2400*t4352 - 1.*t2173*t4359 + 0.041195*(t2106*t4343 + 4.e-6*t2156*t4352 - 1.*t2160*t4359) + 0.14871*(4.e-6*t2156*t4343 + t2448*t4352 + 4.e-6*t2160*t4359) - 0.803147*(t2160*t4343 - 4.e-6*t2160*t4352 + t2523*t4359) + t3375*t3579*t54;
  p_output1[16]=-1.*t3500*t4398 - 1.*t3514*t4403 - 1.*t3525*t4410 - 0.803147*(-1.000000000016*t2160*t4398 + t2106*t4403 - 4.e-6*t2106*t4410) + 0.14871*(4.e-6*t2106*t4398 + 4.e-6*t2160*t4403 - 1.6e-11*t2160*t4410) + 0.041195*(-1.*t2106*t4398 - 1.*t2160*t4403 + 4.e-6*t2160*t4410);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 17, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "J_step_distance_DiagonalStance2.hh"

namespace DiagonalStance2
{

void J_step_distance_DiagonalStance2_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
