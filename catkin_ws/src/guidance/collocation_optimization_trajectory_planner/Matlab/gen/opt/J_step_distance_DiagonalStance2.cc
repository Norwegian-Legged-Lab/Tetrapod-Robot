/*
 * Automatically Generated from Mathematica.
 * Fri 10 Dec 2021 20:18:54 GMT+01:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t157;
  double t173;
  double t340;
  double t661;
  double t48;
  double t1379;
  double t1412;
  double t1428;
  double t1485;
  double t1848;
  double t1943;
  double t1872;
  double t1886;
  double t1900;
  double t1908;
  double t1929;
  double t1985;
  double t1999;
  double t2005;
  double t2010;
  double t2026;
  double t2051;
  double t567;
  double t1654;
  double t1683;
  double t810;
  double t2114;
  double t2193;
  double t1482;
  double t2420;
  double t2431;
  double t2452;
  double t2471;
  double t2280;
  double t2291;
  double t2170;
  double t2173;
  double t2175;
  double t2311;
  double t2319;
  double t2326;
  double t2518;
  double t2096;
  double t2573;
  double t2128;
  double t2640;
  double t2460;
  double t2722;
  double t2726;
  double t697;
  double t2549;
  double t2887;
  double t2888;
  double t2892;
  double t2906;
  double t2352;
  double t2244;
  double t2246;
  double t2252;
  double t2400;
  double t2404;
  double t2405;
  double t2925;
  double t1717;
  double t2944;
  double t1512;
  double t2899;
  double t3013;
  double t3016;
  double t3050;
  double t2206;
  double t2952;
  double t2195;
  double t2551;
  double t2556;
  double t2574;
  double t2579;
  double t2582;
  double t2585;
  double t2590;
  double t2604;
  double t2810;
  double t2727;
  double t2733;
  double t2737;
  double t2750;
  double t2751;
  double t2757;
  double t2772;
  double t2780;
  double t2842;
  double t2848;
  double t2858;
  double t2862;
  double t2870;
  double t2872;
  double t2878;
  double t2880;
  double t2525;
  double t3120;
  double t2473;
  double t3157;
  double t2693;
  double t3124;
  double t3126;
  double t2665;
  double t3078;
  double t2946;
  double t2947;
  double t2955;
  double t2958;
  double t2966;
  double t2973;
  double t2974;
  double t2978;
  double t3085;
  double t3039;
  double t3041;
  double t3046;
  double t3053;
  double t3058;
  double t3061;
  double t3062;
  double t3063;
  double t3094;
  double t3096;
  double t3097;
  double t3102;
  double t3103;
  double t3105;
  double t3110;
  double t3114;
  double t3001;
  double t3203;
  double t3022;
  double t3225;
  double t3198;
  double t2909;
  double t2040;
  double t2047;
  double t2074;
  double t2085;
  double t1906;
  double t1930;
  double t2028;
  double t2029;
  double t2273;
  double t2278;
  double t2281;
  double t2284;
  double t2297;
  double t2302;
  double t2305;
  double t2344;
  double t2351;
  double t2354;
  double t2359;
  double t2361;
  double t2380;
  double t2398;
  double t2091;
  double t2094;
  double t2099;
  double t2105;
  double t2130;
  double t2149;
  double t2165;
  double t2189;
  double t2192;
  double t2200;
  double t2204;
  double t2207;
  double t2215;
  double t2238;
  double t2616;
  double t2621;
  double t2674;
  double t2688;
  double t2695;
  double t2699;
  double t2716;
  double t3279;
  double t3280;
  double t3282;
  double t3296;
  double t3303;
  double t3304;
  double t2414;
  double t2459;
  double t2487;
  double t2502;
  double t2530;
  double t2534;
  double t2536;
  double t2793;
  double t2800;
  double t2819;
  double t2827;
  double t2829;
  double t2830;
  double t2835;
  double t3071;
  double t3073;
  double t3083;
  double t3084;
  double t3086;
  double t3087;
  double t3090;
  double t3284;
  double t3288;
  double t3290;
  double t3309;
  double t3311;
  double t3312;
  double t2994;
  double t2996;
  double t3002;
  double t3006;
  double t3024;
  double t3028;
  double t3035;
  double t2884;
  double t2894;
  double t2918;
  double t2921;
  double t2934;
  double t2941;
  double t2942;
  double t3132;
  double t3320;
  double t3323;
  double t3333;
  double t3121;
  double t3340;
  double t3346;
  double t3348;
  double t3139;
  double t3141;
  double t3354;
  double t3355;
  double t3358;
  double t3159;
  double t3153;
  double t3154;
  double t3165;
  double t3177;
  double t3179;
  double t3172;
  double t3184;
  double t3257;
  double t3361;
  double t3364;
  double t3365;
  double t3253;
  double t3372;
  double t3378;
  double t3379;
  double t3248;
  double t3249;
  double t3381;
  double t3387;
  double t3390;
  double t3236;
  double t3232;
  double t3234;
  double t3226;
  double t3217;
  double t3218;
  double t3204;
  double t3199;
  double t3489;
  double t3283;
  double t3305;
  double t3334;
  double t3350;
  double t3359;
  double t3400;
  double t3405;
  double t3407;
  double t3412;
  double t3417;
  double t3420;
  double t3421;
  double t3423;
  double t3432;
  double t3437;
  double t3439;
  double t3441;
  double t3443;
  double t3444;
  double t3445;
  double t3502;
  double t3540;
  double t3545;
  double t3568;
  double t3569;
  double t3572;
  double t3515;
  double t3609;
  double t3560;
  double t3576;
  double t3583;
  double t3586;
  double t3590;
  double t3594;
  double t3596;
  double t3600;
  double t3606;
  double t3608;
  double t3612;
  double t3613;
  double t3614;
  double t3617;
  double t3618;
  double t3622;
  double t3633;
  double t3634;
  double t3637;
  double t3675;
  double t3711;
  double t3694;
  double t3695;
  double t3696;
  double t3702;
  double t3728;
  double t3733;
  double t3734;
  double t3736;
  double t3705;
  double t3754;
  double t3761;
  double t3765;
  double t3769;
  double t3685;
  double t3795;
  double t3745;
  double t3295;
  double t3318;
  double t3371;
  double t3380;
  double t3391;
  double t3450;
  double t3453;
  double t3455;
  double t3456;
  double t3461;
  double t3463;
  double t3466;
  double t3469;
  double t3472;
  double t3473;
  double t3474;
  double t3478;
  double t3480;
  double t3484;
  double t3485;
  double t3882;
  double t3888;
  double t3892;
  double t3929;
  double t3935;
  double t3937;
  double t3877;
  double t3966;
  double t3917;
  double t3943;
  double t3944;
  double t3945;
  double t3947;
  double t3948;
  double t3955;
  double t3960;
  double t3962;
  double t3963;
  double t3967;
  double t3969;
  double t3971;
  double t3974;
  double t3975;
  double t3979;
  double t3983;
  double t3985;
  double t3986;
  double t4037;
  double t4060;
  double t4067;
  double t4071;
  double t4072;
  double t4092;
  double t4093;
  double t4094;
  double t4096;
  double t4045;
  double t4125;
  double t4126;
  double t4128;
  double t4135;
  double t4140;
  double t4074;
  double t4106;
  double t4099;
  double t124;
  double t487;
  double t707;
  double t742;
  double t887;
  double t1108;
  double t1130;
  double t4190;
  double t1338;
  double t1437;
  double t1532;
  double t1590;
  double t1723;
  double t1789;
  double t1815;
  double t4193;
  double t4194;
  double t4197;
  double t4198;
  double t4206;
  double t4212;
  double t4213;
  double t4218;
  double t4219;
  double t4224;
  double t4238;
  double t4239;
  double t4240;
  double t4229;
  double t4233;
  double t4235;
  double t4251;
  double t4253;
  double t4259;
  double t4263;
  double t4270;
  double t4271;
  double t4273;
  double t4286;
  double t4287;
  double t4289;
  double t4290;
  double t4298;
  double t4301;
  double t4306;
  double t4311;
  double t4314;
  double t4315;
  double t4318;
  double t4324;
  double t4330;
  double t4333;
  double t4334;
  double t4335;
  double t4337;
  double t4338;
  double t4343;
  double t4344;
  double t4443;
  double t4445;
  double t4448;
  double t4469;
  double t4474;
  double t4475;
  double t4453;
  double t4462;
  double t4463;
  double t4479;
  double t4480;
  double t4482;
  double t4487;
  double t4488;
  double t4490;
  double t4492;
  double t4500;
  double t4501;
  double t4502;
  double t4504;
  double t4508;
  double t4510;
  double t4511;
  double t4512;
  double t4514;
  double t4517;
  double t4519;
  double t4521;
  double t4527;
  double t4532;
  double t4533;
  double t4534;
  double t4536;
  double t4540;
  double t4542;
  double t4543;
  double t4616;
  double t4618;
  double t4619;
  double t4622;
  double t4624;
  double t4629;
  double t4639;
  double t4640;
  double t4643;
  double t4657;
  double t4661;
  double t4662;
  double t4648;
  double t4650;
  double t4653;
  double t4672;
  double t4673;
  double t4674;
  double t4678;
  double t4681;
  double t4683;
  double t4688;
  double t4689;
  double t4692;
  double t4695;
  double t4698;
  double t4699;
  double t4704;
  double t4710;
  double t4713;
  double t4728;
  double t4729;
  double t4731;
  double t4739;
  double t4744;
  double t4746;
  double t3491;
  double t3494;
  double t3496;
  double t4841;
  double t4846;
  double t4847;
  double t4853;
  double t4855;
  double t4864;
  double t4865;
  double t4877;
  double t4881;
  double t4884;
  double t4890;
  double t4892;
  double t4897;
  double t4899;
  double t4903;
  double t4904;
  double t3507;
  double t3511;
  double t3519;
  double t3523;
  double t3526;
  double t3538;
  double t3542;
  double t3543;
  double t3547;
  double t3551;
  double t3552;
  double t3553;
  double t3555;
  double t3559;
  double t3562;
  double t3563;
  double t3564;
  double t3566;
  double t4941;
  double t4942;
  double t4943;
  double t4947;
  double t4948;
  double t4949;
  double t4951;
  double t4954;
  double t4957;
  double t4961;
  double t4962;
  double t4966;
  double t4968;
  double t4975;
  double t4976;
  double t3680;
  double t3684;
  double t3686;
  double t3687;
  double t3691;
  double t3692;
  double t3706;
  double t3710;
  double t3712;
  double t3718;
  double t3720;
  double t3722;
  double t3740;
  double t3742;
  double t3748;
  double t3750;
  double t3751;
  double t3752;
  double t3772;
  double t5023;
  double t5027;
  double t5031;
  double t5032;
  double t5036;
  double t5037;
  double t5040;
  double t5042;
  double t3779;
  double t5046;
  double t5048;
  double t5053;
  double t5062;
  double t3792;
  double t3800;
  double t3827;
  double t3831;
  double t3859;
  double t3861;
  double t3867;
  double t3868;
  double t5123;
  double t5127;
  double t5130;
  double t5131;
  double t5133;
  double t5136;
  double t5139;
  double t5141;
  double t5143;
  double t5146;
  double t5148;
  double t5150;
  double t5153;
  double t3879;
  double t3881;
  double t3883;
  double t3884;
  double t3885;
  double t3886;
  double t3889;
  double t3891;
  double t3894;
  double t3905;
  double t3907;
  double t3909;
  double t3912;
  double t3915;
  double t3919;
  double t3923;
  double t3926;
  double t3928;
  double t5183;
  double t5184;
  double t5192;
  double t5202;
  double t5203;
  double t5205;
  double t5206;
  double t5212;
  double t5217;
  double t5220;
  double t5228;
  double t5230;
  double t5232;
  double t5234;
  double t5237;
  double t4042;
  double t4044;
  double t4047;
  double t4049;
  double t4050;
  double t4057;
  double t4079;
  double t4084;
  double t4086;
  double t4087;
  double t4088;
  double t4090;
  double t4101;
  double t4103;
  double t4110;
  double t4116;
  double t4121;
  double t4123;
  double t5280;
  double t5282;
  double t5283;
  double t5285;
  double t4143;
  double t5288;
  double t5289;
  double t5292;
  double t5294;
  double t4146;
  double t5297;
  double t5298;
  double t5300;
  double t5303;
  double t4159;
  double t4167;
  double t4173;
  double t4181;
  t157 = Cos(var1[13]);
  t173 = -1.*t157;
  t340 = 1. + t173;
  t661 = Sin(var1[13]);
  t48 = Cos(var1[4]);
  t1379 = Cos(var1[16]);
  t1412 = -1.*t1379;
  t1428 = 1. + t1412;
  t1485 = Sin(var1[16]);
  t1848 = Cos(var1[5]);
  t1943 = Sin(var1[4]);
  t1872 = Cos(var1[12]);
  t1886 = -1.*t1872;
  t1900 = 1. + t1886;
  t1908 = Sin(var1[12]);
  t1929 = 0.15121*t1908;
  t1985 = Cos(var1[15]);
  t1999 = -1.*t1985;
  t2005 = 1. + t1999;
  t2010 = -0.15121*t2005;
  t2026 = Sin(var1[15]);
  t2051 = Sin(var1[5]);
  t567 = 4.e-6*t340;
  t1654 = -1. + t1379;
  t1683 = 4.e-6*t1654;
  t810 = -2.8e-11*t340;
  t2114 = 7.e-6*t340;
  t2193 = 7.e-6*t1428;
  t1482 = 2.8e-11*t1428;
  t2420 = Cos(var1[14]);
  t2431 = -1.*t2420;
  t2452 = 1. + t2431;
  t2471 = Sin(var1[14]);
  t2280 = -1.*t661;
  t2291 = -4.e-6*t661;
  t2170 = t1848*t1908*t1943;
  t2173 = t1872*t1943*t2051;
  t2175 = t2170 + t2173;
  t2311 = -1.*t1872*t1848*t1943;
  t2319 = t1908*t1943*t2051;
  t2326 = t2311 + t2319;
  t2518 = 7.e-6*t2452;
  t2096 = -7.e-6*t661;
  t2573 = -7.e-6*t340;
  t2128 = 4.e-6*t661;
  t2640 = 4.e-6*t2452;
  t2460 = -2.8e-11*t2452;
  t2722 = -1. + t157;
  t2726 = 4.e-6*t2722;
  t697 = 7.e-6*t661;
  t2549 = 2.8e-11*t340;
  t2887 = Cos(var1[17]);
  t2888 = -1.*t2887;
  t2892 = 1. + t2888;
  t2906 = Sin(var1[17]);
  t2352 = -4.e-6*t1485;
  t2244 = t1848*t2026*t1943;
  t2246 = t1985*t1943*t2051;
  t2252 = t2244 + t2246;
  t2400 = -1.*t1985*t1848*t1943;
  t2404 = t2026*t1943*t2051;
  t2405 = t2400 + t2404;
  t2925 = 2.8e-11*t2892;
  t1717 = -7.e-6*t1485;
  t2944 = -2.8e-11*t1428;
  t1512 = -1.*t1485;
  t2899 = 7.e-6*t2892;
  t3013 = -1. + t2887;
  t3016 = 4.e-6*t3013;
  t3050 = 4.e-6*t1428;
  t2206 = 7.e-6*t1485;
  t2952 = -7.e-6*t1428;
  t2195 = 4.e-6*t1485;
  t2551 = t2549 + t2280;
  t2556 = t48*t2551;
  t2574 = t2573 + t2291;
  t2579 = t2574*t2175;
  t2582 = -1.000000000016*t340;
  t2585 = 1. + t2582;
  t2590 = t2585*t2326;
  t2604 = t2556 + t2579 + t2590;
  t2810 = 7.e-6*t2471;
  t2727 = t2726 + t2096;
  t2733 = t48*t2727;
  t2737 = -6.5e-11*t340;
  t2750 = 1. + t2737;
  t2751 = t2750*t2175;
  t2757 = t2573 + t2128;
  t2772 = t2757*t2326;
  t2780 = t2733 + t2751 + t2772;
  t2842 = -1.000000000049*t340;
  t2848 = 1. + t2842;
  t2858 = t2848*t48;
  t2862 = t2726 + t697;
  t2870 = t2862*t2175;
  t2872 = t2549 + t661;
  t2878 = t2872*t2326;
  t2880 = t2858 + t2870 + t2878;
  t2525 = -4.e-6*t2471;
  t3120 = 2.8e-11*t2452;
  t2473 = -1.*t2471;
  t3157 = -7.e-6*t2452;
  t2693 = 4.e-6*t2471;
  t3124 = -1. + t2420;
  t3126 = 4.e-6*t3124;
  t2665 = -7.e-6*t2471;
  t3078 = 4.e-6*t2906;
  t2946 = t2944 + t1485;
  t2947 = t48*t2946;
  t2955 = t2952 + t2352;
  t2958 = t2955*t2252;
  t2966 = -1.000000000016*t1428;
  t2973 = 1. + t2966;
  t2974 = t2973*t2405;
  t2978 = t2947 + t2958 + t2974;
  t3085 = 7.e-6*t2906;
  t3039 = -1.000000000049*t1428;
  t3041 = 1. + t3039;
  t3046 = t3041*t48;
  t3053 = t3050 + t1717;
  t3058 = t3053*t2252;
  t3061 = t2944 + t1512;
  t3062 = t3061*t2405;
  t3063 = t3046 + t3058 + t3062;
  t3094 = t3050 + t2206;
  t3096 = t48*t3094;
  t3097 = -6.5e-11*t1428;
  t3102 = 1. + t3097;
  t3103 = t3102*t2252;
  t3105 = t2952 + t2195;
  t3110 = t3105*t2405;
  t3114 = t3096 + t3103 + t3110;
  t3001 = -1.*t2906;
  t3203 = 4.e-6*t2892;
  t3022 = -7.e-6*t2906;
  t3225 = -2.8e-11*t2892;
  t3198 = -7.e-6*t2892;
  t2909 = -4.e-6*t2906;
  t2040 = 0.15121*t1900;
  t2047 = t2040 + t1929;
  t2074 = 0.15121*t2026;
  t2085 = t2010 + t2074;
  t1906 = -0.15121*t1900;
  t1930 = t1906 + t1929;
  t2028 = -0.15121*t2026;
  t2029 = t2010 + t2028;
  t2273 = 1.0248489999999998e-12*var1[13];
  t2278 = -0.28120900000849935*t340;
  t2281 = t810 + t2280;
  t2284 = -0.038748999993*t2281;
  t2297 = t2114 + t2291;
  t2302 = -2.123459e-6*t2297;
  t2305 = t2273 + t2278 + t2284 + t2302;
  t2344 = -2.7726089999999997e-12*var1[16];
  t2351 = -0.2812110000084994*t1428;
  t2354 = t2193 + t2352;
  t2359 = -1.8134809999999998e-6*t2354;
  t2361 = t1482 + t1485;
  t2380 = -0.038749000006999997*t2361;
  t2398 = t2344 + t2351 + t2359 + t2380;
  t2091 = -1.4640699999999997e-7*var1[13];
  t2094 = -1.38024835e-16*t340;
  t2099 = t567 + t2096;
  t2105 = -0.038748999993*t2099;
  t2130 = t2114 + t2128;
  t2149 = -0.281209000004*t2130;
  t2165 = t2091 + t2094 + t2105 + t2149;
  t2189 = 3.9608699999999997e-7*var1[16];
  t2192 = -1.1787626499999999e-16*t1428;
  t2200 = t2193 + t2195;
  t2204 = -0.281211000004*t2200;
  t2207 = t1683 + t2206;
  t2215 = -0.038749000006999997*t2207;
  t2238 = t2189 + t2192 + t2204 + t2215;
  t2616 = -2.598649999999999e-7*var1[14];
  t2621 = -2.3905277499999995e-16*t2452;
  t2674 = t2640 + t2665;
  t2688 = -0.038922999986*t2674;
  t2695 = t2518 + t2693;
  t2699 = -0.503149000008*t2695;
  t2716 = t2616 + t2621 + t2688 + t2699;
  t3279 = -1.*t48*t1848*t1908;
  t3280 = -1.*t1872*t48*t2051;
  t3282 = t3279 + t3280;
  t3296 = -1.*t1872*t48*t1848;
  t3303 = t48*t1908*t2051;
  t3304 = t3296 + t3303;
  t2414 = 1.8190549999999993e-12*var1[14];
  t2459 = -0.5031490000160505*t2452;
  t2487 = t2460 + t2473;
  t2502 = -0.038922999986*t2487;
  t2530 = t2518 + t2525;
  t2534 = -3.6777349999999994e-6*t2530;
  t2536 = t2414 + t2459 + t2502 + t2534;
  t2793 = 1.0394599999999997e-12*var1[14];
  t2800 = -0.03892299998790722*t2452;
  t2819 = t2640 + t2810;
  t2827 = -3.6777349999999994e-6*t2819;
  t2829 = t2460 + t2471;
  t2830 = -0.503149000008*t2829;
  t2835 = t2793 + t2800 + t2827 + t2830;
  t3071 = 2.826290000000002e-7*var1[17];
  t3073 = -2.18904205e-16*t2892;
  t3083 = t2899 + t3078;
  t3084 = -0.5031510000080001*t3083;
  t3086 = t3016 + t3085;
  t3087 = -0.038575000014*t3086;
  t3090 = t3071 + t3073 + t3084 + t3087;
  t3284 = -1.*t48*t1848*t2026;
  t3288 = -1.*t1985*t48*t2051;
  t3290 = t3284 + t3288;
  t3309 = -1.*t1985*t48*t1848;
  t3311 = t48*t2026*t2051;
  t3312 = t3309 + t3311;
  t2994 = 1.1305160000000008e-12*var1[17];
  t2996 = -0.03857500001589017*t2892;
  t3002 = t2925 + t3001;
  t3006 = -0.5031510000080001*t3002;
  t3024 = t3016 + t3022;
  t3028 = -3.367757e-6*t3024;
  t3035 = t2994 + t2996 + t3006 + t3028;
  t2884 = -1.9784030000000015e-12*var1[17];
  t2894 = -0.5031510000160505*t2892;
  t2918 = t2899 + t2909;
  t2921 = -3.367757e-6*t2918;
  t2934 = t2925 + t2906;
  t2941 = -0.038575000014*t2934;
  t2942 = t2884 + t2894 + t2921 + t2941;
  t3132 = t3126 + t2810;
  t3320 = t2757*t3282;
  t3323 = t2750*t3304;
  t3333 = t3320 + t3323;
  t3121 = t3120 + t2471;
  t3340 = t2585*t3282;
  t3346 = t2574*t3304;
  t3348 = t3340 + t3346;
  t3139 = -1.000000000049*t2452;
  t3141 = 1. + t3139;
  t3354 = t2872*t3282;
  t3355 = t2862*t3304;
  t3358 = t3354 + t3355;
  t3159 = t3157 + t2525;
  t3153 = -1.000000000016*t2452;
  t3154 = 1. + t3153;
  t3165 = t3120 + t2473;
  t3177 = -6.5e-11*t2452;
  t3179 = 1. + t3177;
  t3172 = t3157 + t2693;
  t3184 = t3126 + t2665;
  t3257 = t3198 + t2909;
  t3361 = t3105*t3290;
  t3364 = t3102*t3312;
  t3365 = t3361 + t3364;
  t3253 = t3225 + t2906;
  t3372 = t3061*t3290;
  t3378 = t3053*t3312;
  t3379 = t3372 + t3378;
  t3248 = -1.000000000016*t2892;
  t3249 = 1. + t3248;
  t3381 = t2973*t3290;
  t3387 = t2955*t3312;
  t3390 = t3381 + t3387;
  t3236 = t3203 + t3022;
  t3232 = -1.000000000049*t2892;
  t3234 = 1. + t3232;
  t3226 = t3225 + t3001;
  t3217 = -6.5e-11*t2892;
  t3218 = 1. + t3217;
  t3204 = t3203 + t3085;
  t3199 = t3198 + t3078;
  t3489 = 0.15121*t1872;
  t3283 = -1.*t2305*t3282;
  t3305 = -1.*t2165*t3304;
  t3334 = -1.*t2716*t3333;
  t3350 = -1.*t2536*t3348;
  t3359 = -1.*t2835*t3358;
  t3400 = t3132*t3333;
  t3405 = t3121*t3348;
  t3407 = t3141*t3358;
  t3412 = t3400 + t3405 + t3407;
  t3417 = 0.038924*t3412;
  t3420 = t3159*t3333;
  t3421 = t3154*t3348;
  t3423 = t3165*t3358;
  t3432 = t3420 + t3421 + t3423;
  t3437 = 0.80315*t3432;
  t3439 = t3179*t3333;
  t3441 = t3172*t3348;
  t3443 = t3184*t3358;
  t3444 = t3439 + t3441 + t3443;
  t3445 = -0.148705*t3444;
  t3502 = -2.8e-11*t661;
  t3540 = -7.e-6*t157;
  t3545 = 4.e-6*t157;
  t3568 = t1872*t48*t1848;
  t3569 = -1.*t48*t1908*t2051;
  t3572 = t3568 + t3569;
  t3515 = 7.e-6*t157;
  t3609 = 2.8e-11*t661;
  t3560 = -4.e-6*t157;
  t3576 = t3540 + t2291;
  t3583 = t3576*t1943;
  t3586 = -6.5e-11*t661*t3282;
  t3590 = t3545 + t2096;
  t3594 = t3590*t3572;
  t3596 = t3583 + t3586 + t3594;
  t3600 = -1.000000000049*t661*t1943;
  t3606 = t3515 + t2291;
  t3608 = t3606*t3282;
  t3612 = t157 + t3609;
  t3613 = t3612*t3572;
  t3614 = t3600 + t3608 + t3613;
  t3617 = t173 + t3609;
  t3618 = t3617*t1943;
  t3622 = t3560 + t2096;
  t3633 = t3622*t3282;
  t3634 = -1.000000000016*t661*t3572;
  t3637 = t3618 + t3633 + t3634;
  t3675 = -2.8e-11*t2471;
  t3711 = 4.e-6*t2420;
  t3694 = t2551*t1943;
  t3695 = t2574*t3282;
  t3696 = t2585*t3572;
  t3702 = t3694 + t3695 + t3696;
  t3728 = t2727*t1943;
  t3733 = t2750*t3282;
  t3734 = t2757*t3572;
  t3736 = t3728 + t3733 + t3734;
  t3705 = -7.e-6*t2420;
  t3754 = t2848*t1943;
  t3761 = t2862*t3282;
  t3765 = t2872*t3572;
  t3769 = t3754 + t3761 + t3765;
  t3685 = -4.e-6*t2420;
  t3795 = 2.8e-11*t2471;
  t3745 = 7.e-6*t2420;
  t3295 = t2398*t3290;
  t3318 = t2238*t3312;
  t3371 = t3090*t3365;
  t3380 = t3035*t3379;
  t3391 = t2942*t3390;
  t3450 = t3257*t3365;
  t3453 = t3253*t3379;
  t3455 = t3249*t3390;
  t3456 = t3450 + t3453 + t3455;
  t3461 = -0.80315*t3456;
  t3463 = t3236*t3365;
  t3466 = t3234*t3379;
  t3469 = t3226*t3390;
  t3472 = t3463 + t3466 + t3469;
  t3473 = -0.038576*t3472;
  t3474 = t3218*t3365;
  t3478 = t3204*t3379;
  t3480 = t3199*t3390;
  t3484 = t3474 + t3478 + t3480;
  t3485 = -0.148715*t3484;
  t3882 = 2.8e-11*t1485;
  t3888 = 7.e-6*t1379;
  t3892 = 4.e-6*t1379;
  t3929 = t1985*t48*t1848;
  t3935 = -1.*t48*t2026*t2051;
  t3937 = t3929 + t3935;
  t3877 = -7.e-6*t1379;
  t3966 = -2.8e-11*t1485;
  t3917 = -4.e-6*t1379;
  t3943 = t3888 + t2195;
  t3944 = t3943*t1943;
  t3945 = -6.5e-11*t1485*t3290;
  t3947 = t3892 + t1717;
  t3948 = t3947*t3937;
  t3955 = t3944 + t3945 + t3948;
  t3960 = -1.000000000049*t1485*t1943;
  t3962 = t3877 + t2195;
  t3963 = t3962*t3290;
  t3967 = t1412 + t3966;
  t3969 = t3967*t3937;
  t3971 = t3960 + t3963 + t3969;
  t3974 = t1379 + t3966;
  t3975 = t3974*t1943;
  t3979 = t3917 + t1717;
  t3983 = t3979*t3290;
  t3985 = -1.000000000016*t1485*t3937;
  t3986 = t3975 + t3983 + t3985;
  t4037 = 2.8e-11*t2906;
  t4060 = t2946*t1943;
  t4067 = t2955*t3290;
  t4071 = t2973*t3937;
  t4072 = t4060 + t4067 + t4071;
  t4092 = t3041*t1943;
  t4093 = t3053*t3290;
  t4094 = t3061*t3937;
  t4096 = t4092 + t4093 + t4094;
  t4045 = -4.e-6*t2887;
  t4125 = t3094*t1943;
  t4126 = t3102*t3290;
  t4128 = t3105*t3937;
  t4135 = t4125 + t4126 + t4128;
  t4140 = -2.8e-11*t2906;
  t4074 = -7.e-6*t2887;
  t4106 = 4.e-6*t2887;
  t4099 = 7.e-6*t2887;
  t124 = 5.856279999999999e-13*var1[13];
  t487 = -0.0387489999948987*t340;
  t707 = t567 + t697;
  t742 = -2.123459e-6*t707;
  t887 = t810 + t661;
  t1108 = -0.281209000004*t887;
  t1130 = t124 + t487 + t742 + t1108;
  t4190 = Cos(var1[3]);
  t1338 = 1.5843479999999999e-12*var1[16];
  t1437 = -0.03874900000889869*t1428;
  t1532 = t1482 + t1512;
  t1590 = -0.281211000004*t1532;
  t1723 = t1683 + t1717;
  t1789 = -1.8134809999999998e-6*t1723;
  t1815 = t1338 + t1437 + t1590 + t1789;
  t4193 = t4190*t1848*t1943;
  t4194 = Sin(var1[3]);
  t4197 = -1.*t4194*t2051;
  t4198 = t4193 + t4197;
  t4206 = -1.*t1848*t4194;
  t4212 = -1.*t4190*t1943*t2051;
  t4213 = t4206 + t4212;
  t4218 = -1.*t1908*t4198;
  t4219 = t1872*t4213;
  t4224 = t4218 + t4219;
  t4238 = t1872*t4198;
  t4239 = t1908*t4213;
  t4240 = t4238 + t4239;
  t4229 = -1.*t2026*t4198;
  t4233 = t1985*t4213;
  t4235 = t4229 + t4233;
  t4251 = t1985*t4198;
  t4253 = t2026*t4213;
  t4259 = t4251 + t4253;
  t4263 = -1.*t4190*t48*t2551;
  t4270 = t2574*t4224;
  t4271 = t2585*t4240;
  t4273 = t4263 + t4270 + t4271;
  t4286 = -1.*t4190*t48*t2727;
  t4287 = t2750*t4224;
  t4289 = t2757*t4240;
  t4290 = t4286 + t4287 + t4289;
  t4298 = -1.*t2848*t4190*t48;
  t4301 = t2862*t4224;
  t4306 = t2872*t4240;
  t4311 = t4298 + t4301 + t4306;
  t4314 = -1.*t4190*t48*t2946;
  t4315 = t2955*t4235;
  t4318 = t2973*t4259;
  t4324 = t4314 + t4315 + t4318;
  t4330 = -1.*t3041*t4190*t48;
  t4333 = t3053*t4235;
  t4334 = t3061*t4259;
  t4335 = t4330 + t4333 + t4334;
  t4337 = -1.*t4190*t48*t3094;
  t4338 = t3102*t4235;
  t4343 = t3105*t4259;
  t4344 = t4337 + t4338 + t4343;
  t4443 = -1.*t48*t1848*t1908*t4194;
  t4445 = -1.*t1872*t48*t4194*t2051;
  t4448 = t4443 + t4445;
  t4469 = t1872*t48*t1848*t4194;
  t4474 = -1.*t48*t1908*t4194*t2051;
  t4475 = t4469 + t4474;
  t4453 = -1.*t48*t1848*t2026*t4194;
  t4462 = -1.*t1985*t48*t4194*t2051;
  t4463 = t4453 + t4462;
  t4479 = t1985*t48*t1848*t4194;
  t4480 = -1.*t48*t2026*t4194*t2051;
  t4482 = t4479 + t4480;
  t4487 = t2551*t4194*t1943;
  t4488 = t2574*t4448;
  t4490 = t2585*t4475;
  t4492 = t4487 + t4488 + t4490;
  t4500 = t2727*t4194*t1943;
  t4501 = t2750*t4448;
  t4502 = t2757*t4475;
  t4504 = t4500 + t4501 + t4502;
  t4508 = t2848*t4194*t1943;
  t4510 = t2862*t4448;
  t4511 = t2872*t4475;
  t4512 = t4508 + t4510 + t4511;
  t4514 = t2946*t4194*t1943;
  t4517 = t2955*t4463;
  t4519 = t2973*t4482;
  t4521 = t4514 + t4517 + t4519;
  t4527 = t3041*t4194*t1943;
  t4532 = t3053*t4463;
  t4533 = t3061*t4482;
  t4534 = t4527 + t4532 + t4533;
  t4536 = t3094*t4194*t1943;
  t4540 = t3102*t4463;
  t4542 = t3105*t4482;
  t4543 = t4536 + t4540 + t4542;
  t4616 = -1.*t1848*t4194*t1943;
  t4618 = -1.*t4190*t2051;
  t4619 = t4616 + t4618;
  t4622 = t4190*t1848;
  t4624 = -1.*t4194*t1943*t2051;
  t4629 = t4622 + t4624;
  t4639 = t1908*t4619;
  t4640 = t1872*t4629;
  t4643 = t4639 + t4640;
  t4657 = t1872*t4619;
  t4661 = -1.*t1908*t4629;
  t4662 = t4657 + t4661;
  t4648 = t2026*t4619;
  t4650 = t1985*t4629;
  t4653 = t4648 + t4650;
  t4672 = t1985*t4619;
  t4673 = -1.*t2026*t4629;
  t4674 = t4672 + t4673;
  t4678 = t2757*t4643;
  t4681 = t2750*t4662;
  t4683 = t4678 + t4681;
  t4688 = t2585*t4643;
  t4689 = t2574*t4662;
  t4692 = t4688 + t4689;
  t4695 = t2872*t4643;
  t4698 = t2862*t4662;
  t4699 = t4695 + t4698;
  t4704 = t3105*t4653;
  t4710 = t3102*t4674;
  t4713 = t4704 + t4710;
  t4728 = t3061*t4653;
  t4729 = t3053*t4674;
  t4731 = t4728 + t4729;
  t4739 = t2973*t4653;
  t4744 = t2955*t4674;
  t4746 = t4739 + t4744;
  t3491 = -0.15121*t1908;
  t3494 = t3489 + t3491;
  t3496 = t3489 + t1929;
  t4841 = t1848*t4194*t1943;
  t4846 = t4190*t2051;
  t4847 = t4841 + t4846;
  t4853 = -1.*t1908*t4847;
  t4855 = t4853 + t4640;
  t4864 = -1.*t1872*t4847;
  t4865 = t4864 + t4661;
  t4877 = t2757*t4855;
  t4881 = t2750*t4865;
  t4884 = t4877 + t4881;
  t4890 = t2585*t4855;
  t4892 = t2574*t4865;
  t4897 = t4890 + t4892;
  t4899 = t2872*t4855;
  t4903 = t2862*t4865;
  t4904 = t4899 + t4903;
  t3507 = t157 + t3502;
  t3511 = -0.281209000004*t3507;
  t3519 = t3515 + t2128;
  t3523 = -2.123459e-6*t3519;
  t3526 = -0.0387489999948987*t661;
  t3538 = 5.856279999999999e-13 + t3511 + t3523 + t3526;
  t3542 = t3540 + t2128;
  t3543 = -0.038748999993*t3542;
  t3547 = t3545 + t697;
  t3551 = -0.281209000004*t3547;
  t3552 = -1.38024835e-16*t661;
  t3553 = -1.4640699999999997e-7 + t3543 + t3551 + t3552;
  t3555 = t173 + t3502;
  t3559 = -0.038748999993*t3555;
  t3562 = t3560 + t697;
  t3563 = -2.123459e-6*t3562;
  t3564 = -0.28120900000849935*t661;
  t3566 = 1.0248489999999998e-12 + t3559 + t3563 + t3564;
  t4941 = t1872*t4847;
  t4942 = t1908*t4629;
  t4943 = t4941 + t4942;
  t4947 = -1.*t48*t3576*t4194;
  t4948 = -6.5e-11*t661*t4855;
  t4949 = t3590*t4943;
  t4951 = t4947 + t4948 + t4949;
  t4954 = 1.000000000049*t48*t661*t4194;
  t4957 = t3606*t4855;
  t4961 = t3612*t4943;
  t4962 = t4954 + t4957 + t4961;
  t4966 = -1.*t48*t3617*t4194;
  t4968 = t3622*t4855;
  t4975 = -1.000000000016*t661*t4943;
  t4976 = t4966 + t4968 + t4975;
  t3680 = t2431 + t3675;
  t3684 = -0.038922999986*t3680;
  t3686 = t3685 + t2810;
  t3687 = -3.6777349999999994e-6*t3686;
  t3691 = -0.5031490000160505*t2471;
  t3692 = 1.8190549999999993e-12 + t3684 + t3687 + t3691;
  t3706 = t3705 + t2693;
  t3710 = -0.038922999986*t3706;
  t3712 = t3711 + t2810;
  t3718 = -0.503149000008*t3712;
  t3720 = -2.3905277499999995e-16*t2471;
  t3722 = -2.598649999999999e-7 + t3710 + t3718 + t3720;
  t3740 = t2420 + t3675;
  t3742 = -0.503149000008*t3740;
  t3748 = t3745 + t2693;
  t3750 = -3.6777349999999994e-6*t3748;
  t3751 = -0.03892299998790722*t2471;
  t3752 = 1.0394599999999997e-12 + t3742 + t3750 + t3751;
  t3772 = t3711 + t2665;
  t5023 = -1.*t48*t2551*t4194;
  t5027 = t2574*t4855;
  t5031 = t2585*t4943;
  t5032 = t5023 + t5027 + t5031;
  t5036 = -1.*t48*t2727*t4194;
  t5037 = t2750*t4855;
  t5040 = t2757*t4943;
  t5042 = t5036 + t5037 + t5040;
  t3779 = t3705 + t2525;
  t5046 = -1.*t2848*t48*t4194;
  t5048 = t2862*t4855;
  t5053 = t2872*t4943;
  t5062 = t5046 + t5048 + t5053;
  t3792 = t3685 + t2665;
  t3800 = t2431 + t3795;
  t3827 = t2420 + t3795;
  t3831 = t3745 + t2525;
  t3859 = -0.15121*t1985;
  t3861 = t3859 + t2028;
  t3867 = 0.15121*t1985;
  t3868 = t3867 + t2028;
  t5123 = -1.*t2026*t4847;
  t5127 = t5123 + t4650;
  t5130 = -1.*t1985*t4847;
  t5131 = t5130 + t4673;
  t5133 = t3105*t5127;
  t5136 = t3102*t5131;
  t5139 = t5133 + t5136;
  t5141 = t3061*t5127;
  t5143 = t3053*t5131;
  t5146 = t5141 + t5143;
  t5148 = t2973*t5127;
  t5150 = t2955*t5131;
  t5153 = t5148 + t5150;
  t3879 = t3877 + t2352;
  t3881 = -1.8134809999999998e-6*t3879;
  t3883 = t1412 + t3882;
  t3884 = -0.281211000004*t3883;
  t3885 = -0.03874900000889869*t1485;
  t3886 = 1.5843479999999999e-12 + t3881 + t3884 + t3885;
  t3889 = t3888 + t2352;
  t3891 = -0.038749000006999997*t3889;
  t3894 = t3892 + t2206;
  t3905 = -0.281211000004*t3894;
  t3907 = -1.1787626499999999e-16*t1485;
  t3909 = 3.9608699999999997e-7 + t3891 + t3905 + t3907;
  t3912 = t1379 + t3882;
  t3915 = -0.038749000006999997*t3912;
  t3919 = t3917 + t2206;
  t3923 = -1.8134809999999998e-6*t3919;
  t3926 = -0.2812110000084994*t1485;
  t3928 = -2.7726089999999997e-12 + t3915 + t3923 + t3926;
  t5183 = t1985*t4847;
  t5184 = t2026*t4629;
  t5192 = t5183 + t5184;
  t5202 = -1.*t48*t3943*t4194;
  t5203 = -6.5e-11*t1485*t5127;
  t5205 = t3947*t5192;
  t5206 = t5202 + t5203 + t5205;
  t5212 = 1.000000000049*t48*t1485*t4194;
  t5217 = t3962*t5127;
  t5220 = t3967*t5192;
  t5228 = t5212 + t5217 + t5220;
  t5230 = -1.*t48*t3974*t4194;
  t5232 = t3979*t5127;
  t5234 = -1.000000000016*t1485*t5192;
  t5237 = t5230 + t5232 + t5234;
  t4042 = t2887 + t4037;
  t4044 = -0.038575000014*t4042;
  t4047 = t4045 + t3085;
  t4049 = -3.367757e-6*t4047;
  t4050 = -0.5031510000160505*t2906;
  t4057 = -1.9784030000000015e-12 + t4044 + t4049 + t4050;
  t4079 = t4074 + t2909;
  t4084 = -3.367757e-6*t4079;
  t4086 = t2888 + t4037;
  t4087 = -0.5031510000080001*t4086;
  t4088 = -0.03857500001589017*t2906;
  t4090 = 1.1305160000000008e-12 + t4084 + t4087 + t4088;
  t4101 = t4099 + t2909;
  t4103 = -0.038575000014*t4101;
  t4110 = t4106 + t3085;
  t4116 = -0.5031510000080001*t4110;
  t4121 = -2.18904205e-16*t2906;
  t4123 = 2.826290000000002e-7 + t4103 + t4116 + t4121;
  t5280 = -1.*t48*t2946*t4194;
  t5282 = t2955*t5127;
  t5283 = t2973*t5192;
  t5285 = t5280 + t5282 + t5283;
  t4143 = t2887 + t4140;
  t5288 = -1.*t3041*t48*t4194;
  t5289 = t3053*t5127;
  t5292 = t3061*t5192;
  t5294 = t5288 + t5289 + t5292;
  t4146 = t4045 + t3022;
  t5297 = -1.*t48*t3094*t4194;
  t5298 = t3102*t5127;
  t5300 = t3105*t5192;
  t5303 = t5297 + t5298 + t5300;
  t4159 = t2888 + t4140;
  t4167 = t4074 + t3078;
  t4173 = t4106 + t3022;
  t4181 = t4099 + t3078;
  p_output1[0]=t1848*t1930*t1943 - 1.*t1848*t1943*t2029 - 1.*t1943*t2047*t2051 + t1943*t2051*t2085 - 1.*t2165*t2175 + t2238*t2252 - 1.*t2305*t2326 + t2398*t2405 - 1.*t2536*t2604 - 1.*t2716*t2780 - 1.*t2835*t2880 + t2942*t2978 + t3035*t3063 + t3090*t3114 + 0.038924*(t2604*t3121 + t2780*t3132 + t2880*t3141) + 0.80315*(t2604*t3154 + t2780*t3159 + t2880*t3165) - 0.148705*(t2604*t3172 + t2780*t3179 + t2880*t3184) - 0.148715*(t2978*t3199 + t3063*t3204 + t3114*t3218) - 0.038576*(t2978*t3226 + t3063*t3234 + t3114*t3236) - 0.80315*(t2978*t3249 + t3063*t3253 + t3114*t3257) - 1.*t1130*t48 + t1815*t48;
  p_output1[1]=t3283 + t3295 + t3305 + t3318 + t3334 + t3350 + t3359 + t3371 + t3380 + t3391 + t3417 + t3437 + t3445 + t3461 + t3473 + t3485 + t1848*t2047*t48 + t1930*t2051*t48 - 1.*t2029*t2051*t48 - 1.*t1848*t2085*t48;
  p_output1[2]=t3283 + t3305 + t3334 + t3350 + t3359 + t3417 + t3437 + t3445 - 1.*t1848*t3494*t48 + t2051*t3496*t48;
  p_output1[3]=-1.*t1943*t3538 - 1.*t3282*t3553 - 1.*t3566*t3572 - 1.*t2716*t3596 - 1.*t2835*t3614 - 1.*t2536*t3637 + 0.038924*(t3132*t3596 + t3141*t3614 + t3121*t3637) + 0.80315*(t3159*t3596 + t3165*t3614 + t3154*t3637) - 0.148705*(t3179*t3596 + t3184*t3614 + t3172*t3637);
  p_output1[4]=-1.*t3692*t3702 - 1.*t3722*t3736 - 1.*t3752*t3769 - 0.148705*(-6.5e-11*t2471*t3736 + t3702*t3772 + t3769*t3779) + 0.80315*(-1.000000000016*t2471*t3702 + t3736*t3792 + t3769*t3800) + 0.038924*(-1.000000000049*t2471*t3769 + t3702*t3827 + t3736*t3831);
  p_output1[5]=t3295 + t3318 + t3371 + t3380 + t3391 + t3461 + t3473 + t3485 + t1848*t3861*t48 - 1.*t2051*t3868*t48;
  p_output1[6]=t1943*t3886 + t3290*t3909 + t3928*t3937 + t3090*t3955 + t3035*t3971 + t2942*t3986 - 0.148715*(t3218*t3955 + t3204*t3971 + t3199*t3986) - 0.038576*(t3236*t3955 + t3234*t3971 + t3226*t3986) - 0.80315*(t3257*t3955 + t3253*t3971 + t3249*t3986);
  p_output1[7]=t4057*t4072 + t4090*t4096 + t4123*t4135 - 0.80315*(-1.000000000016*t2906*t4072 + t4096*t4143 + t4135*t4146) - 0.038576*(-1.000000000049*t2906*t4096 + t4072*t4159 + t4135*t4167) - 0.148715*(-6.5e-11*t2906*t4135 + t4072*t4173 + t4096*t4181);
  p_output1[8]=-1.*t1930*t4198 + t2029*t4198 - 1.*t2047*t4213 + t2085*t4213 - 1.*t2165*t4224 + t2238*t4235 - 1.*t2305*t4240 + t2398*t4259 - 1.*t2536*t4273 - 1.*t2716*t4290 - 1.*t2835*t4311 + 0.038924*(t3121*t4273 + t3132*t4290 + t3141*t4311) + 0.80315*(t3154*t4273 + t3159*t4290 + t3165*t4311) - 0.148705*(t3172*t4273 + t3179*t4290 + t3184*t4311) + t2942*t4324 + t3035*t4335 + t3090*t4344 - 0.148715*(t3199*t4324 + t3204*t4335 + t3218*t4344) - 0.038576*(t3226*t4324 + t3234*t4335 + t3236*t4344) - 0.80315*(t3249*t4324 + t3253*t4335 + t3257*t4344) + t1130*t4190*t48 - 1.*t1815*t4190*t48;
  p_output1[9]=-1.*t1130*t1943*t4194 + t1815*t1943*t4194 - 1.*t2165*t4448 + t2238*t4463 - 1.*t2305*t4475 + t2398*t4482 - 1.*t2536*t4492 - 1.*t2716*t4504 - 1.*t2835*t4512 + 0.038924*(t3121*t4492 + t3132*t4504 + t3141*t4512) + 0.80315*(t3154*t4492 + t3159*t4504 + t3165*t4512) - 0.148705*(t3172*t4492 + t3179*t4504 + t3184*t4512) + t2942*t4521 + t3035*t4534 + t3090*t4543 - 0.148715*(t3199*t4521 + t3204*t4534 + t3218*t4543) - 0.038576*(t3226*t4521 + t3234*t4534 + t3236*t4543) - 0.80315*(t3249*t4521 + t3253*t4534 + t3257*t4543) - 1.*t1848*t1930*t4194*t48 + t1848*t2029*t4194*t48 + t2047*t2051*t4194*t48 - 1.*t2051*t2085*t4194*t48;
  p_output1[10]=-1.*t2047*t4619 + t2085*t4619 - 1.*t1930*t4629 + t2029*t4629 - 1.*t2305*t4643 + t2398*t4653 - 1.*t2165*t4662 + t2238*t4674 - 1.*t2716*t4683 - 1.*t2536*t4692 - 1.*t2835*t4699 + 0.038924*(t3132*t4683 + t3121*t4692 + t3141*t4699) + 0.80315*(t3159*t4683 + t3154*t4692 + t3165*t4699) - 0.148705*(t3179*t4683 + t3172*t4692 + t3184*t4699) + t3090*t4713 + t3035*t4731 + t2942*t4746 - 0.148715*(t3218*t4713 + t3204*t4731 + t3199*t4746) - 0.038576*(t3236*t4713 + t3234*t4731 + t3226*t4746) - 0.80315*(t3257*t4713 + t3253*t4731 + t3249*t4746);
  p_output1[11]=-1.*t3496*t4629 - 1.*t3494*t4847 - 1.*t2305*t4855 - 1.*t2165*t4865 - 1.*t2716*t4884 - 1.*t2536*t4897 - 1.*t2835*t4904 + 0.038924*(t3132*t4884 + t3121*t4897 + t3141*t4904) + 0.80315*(t3159*t4884 + t3154*t4897 + t3165*t4904) - 0.148705*(t3179*t4884 + t3172*t4897 + t3184*t4904);
  p_output1[12]=t3538*t4194*t48 - 1.*t3553*t4855 - 1.*t3566*t4943 - 1.*t2716*t4951 - 1.*t2835*t4962 - 1.*t2536*t4976 + 0.038924*(t3132*t4951 + t3141*t4962 + t3121*t4976) + 0.80315*(t3159*t4951 + t3165*t4962 + t3154*t4976) - 0.148705*(t3179*t4951 + t3184*t4962 + t3172*t4976);
  p_output1[13]=-1.*t3692*t5032 - 1.*t3722*t5042 - 1.*t3752*t5062 + 0.038924*(t3827*t5032 + t3831*t5042 - 1.000000000049*t2471*t5062) - 0.148705*(t3772*t5032 - 6.5e-11*t2471*t5042 + t3779*t5062) + 0.80315*(-1.000000000016*t2471*t5032 + t3792*t5042 + t3800*t5062);
  p_output1[14]=t3868*t4629 + t3861*t4847 + t2398*t5127 + t2238*t5131 + t3090*t5139 + t3035*t5146 + t2942*t5153 - 0.148715*(t3218*t5139 + t3204*t5146 + t3199*t5153) - 0.038576*(t3236*t5139 + t3234*t5146 + t3226*t5153) - 0.80315*(t3257*t5139 + t3253*t5146 + t3249*t5153);
  p_output1[15]=-1.*t3886*t4194*t48 + t3909*t5127 + t3928*t5192 + t3090*t5206 + t3035*t5228 + t2942*t5237 - 0.148715*(t3218*t5206 + t3204*t5228 + t3199*t5237) - 0.038576*(t3236*t5206 + t3234*t5228 + t3226*t5237) - 0.80315*(t3257*t5206 + t3253*t5228 + t3249*t5237);
  p_output1[16]=t4057*t5285 + t4090*t5294 + t4123*t5303 - 0.148715*(t4173*t5285 + t4181*t5294 - 6.5e-11*t2906*t5303) - 0.80315*(-1.000000000016*t2906*t5285 + t4143*t5294 + t4146*t5303) - 0.038576*(t4159*t5285 - 1.000000000049*t2906*t5294 + t4167*t5303);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 17, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "J_step_distance_DiagonalStance2.hh"

namespace TrotStance2
{

void J_step_distance_DiagonalStance2_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
