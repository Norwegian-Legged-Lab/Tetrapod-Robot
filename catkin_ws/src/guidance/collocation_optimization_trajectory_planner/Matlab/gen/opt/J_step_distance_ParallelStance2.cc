/*
 * Automatically Generated from Mathematica.
 * Wed 8 Dec 2021 23:15:54 GMT+01:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t401;
  double t481;
  double t802;
  double t855;
  double t379;
  double t1483;
  double t1503;
  double t1533;
  double t1576;
  double t1763;
  double t1843;
  double t1770;
  double t1787;
  double t1799;
  double t1821;
  double t1822;
  double t1860;
  double t1865;
  double t1874;
  double t1875;
  double t1890;
  double t1935;
  double t853;
  double t1665;
  double t1671;
  double t1265;
  double t1983;
  double t2114;
  double t1551;
  double t2388;
  double t2392;
  double t2401;
  double t2437;
  double t2209;
  double t2248;
  double t2049;
  double t2057;
  double t2086;
  double t2257;
  double t2262;
  double t2263;
  double t2458;
  double t1976;
  double t2494;
  double t1991;
  double t2554;
  double t2436;
  double t2596;
  double t2600;
  double t938;
  double t2481;
  double t2696;
  double t2701;
  double t2704;
  double t2711;
  double t2281;
  double t2160;
  double t2179;
  double t2184;
  double t2353;
  double t2362;
  double t2365;
  double t2723;
  double t1712;
  double t2738;
  double t1620;
  double t2709;
  double t2788;
  double t2792;
  double t2808;
  double t2134;
  double t2748;
  double t2118;
  double t2484;
  double t2492;
  double t2505;
  double t2510;
  double t2516;
  double t2520;
  double t2524;
  double t2534;
  double t2650;
  double t2603;
  double t2605;
  double t2607;
  double t2612;
  double t2613;
  double t2618;
  double t2628;
  double t2629;
  double t2673;
  double t2674;
  double t2676;
  double t2682;
  double t2683;
  double t2686;
  double t2689;
  double t2690;
  double t2459;
  double t2861;
  double t2448;
  double t2894;
  double t2574;
  double t2867;
  double t2871;
  double t2558;
  double t2828;
  double t2741;
  double t2745;
  double t2749;
  double t2753;
  double t2757;
  double t2759;
  double t2763;
  double t2765;
  double t2841;
  double t2805;
  double t2806;
  double t2807;
  double t2809;
  double t2810;
  double t2812;
  double t2819;
  double t2820;
  double t2847;
  double t2849;
  double t2850;
  double t2851;
  double t2854;
  double t2855;
  double t2857;
  double t2858;
  double t2778;
  double t2955;
  double t2793;
  double t2976;
  double t2943;
  double t2717;
  double t1909;
  double t1933;
  double t1955;
  double t1956;
  double t1808;
  double t1832;
  double t1893;
  double t1895;
  double t2191;
  double t2206;
  double t2237;
  double t2243;
  double t2249;
  double t2252;
  double t2253;
  double t2267;
  double t2278;
  double t2301;
  double t2319;
  double t2322;
  double t2329;
  double t2332;
  double t1968;
  double t1970;
  double t1979;
  double t1982;
  double t2004;
  double t2016;
  double t2034;
  double t2109;
  double t2111;
  double t2124;
  double t2128;
  double t2139;
  double t2141;
  double t2148;
  double t2550;
  double t2552;
  double t2563;
  double t2569;
  double t2576;
  double t2580;
  double t2586;
  double t3037;
  double t3041;
  double t3043;
  double t3056;
  double t3057;
  double t3059;
  double t2385;
  double t2408;
  double t2453;
  double t2454;
  double t2469;
  double t2471;
  double t2472;
  double t2636;
  double t2640;
  double t2653;
  double t2654;
  double t2663;
  double t2668;
  double t2670;
  double t2823;
  double t2827;
  double t2830;
  double t2834;
  double t2842;
  double t2844;
  double t2845;
  double t3046;
  double t3049;
  double t3052;
  double t3061;
  double t3062;
  double t3063;
  double t2771;
  double t2775;
  double t2784;
  double t2787;
  double t2796;
  double t2801;
  double t2803;
  double t2695;
  double t2706;
  double t2718;
  double t2720;
  double t2731;
  double t2733;
  double t2736;
  double t2877;
  double t3066;
  double t3068;
  double t3069;
  double t2863;
  double t3071;
  double t3074;
  double t3078;
  double t2881;
  double t2884;
  double t3080;
  double t3082;
  double t3083;
  double t2899;
  double t2890;
  double t2891;
  double t2908;
  double t2930;
  double t2931;
  double t2926;
  double t2936;
  double t3010;
  double t3087;
  double t3089;
  double t3090;
  double t3001;
  double t3094;
  double t3095;
  double t3096;
  double t2995;
  double t2997;
  double t3099;
  double t3102;
  double t3103;
  double t2989;
  double t2980;
  double t2982;
  double t2977;
  double t2964;
  double t2968;
  double t2956;
  double t2947;
  double t3165;
  double t3045;
  double t3060;
  double t3070;
  double t3079;
  double t3084;
  double t3106;
  double t3107;
  double t3108;
  double t3109;
  double t3111;
  double t3115;
  double t3116;
  double t3117;
  double t3118;
  double t3119;
  double t3120;
  double t3121;
  double t3122;
  double t3123;
  double t3125;
  double t3175;
  double t3196;
  double t3205;
  double t3224;
  double t3227;
  double t3229;
  double t3182;
  double t3249;
  double t3217;
  double t3231;
  double t3234;
  double t3235;
  double t3236;
  double t3239;
  double t3241;
  double t3245;
  double t3247;
  double t3248;
  double t3250;
  double t3253;
  double t3254;
  double t3257;
  double t3258;
  double t3260;
  double t3263;
  double t3267;
  double t3270;
  double t3347;
  double t3394;
  double t3371;
  double t3378;
  double t3381;
  double t3383;
  double t3406;
  double t3407;
  double t3409;
  double t3414;
  double t3388;
  double t3435;
  double t3437;
  double t3438;
  double t3441;
  double t3360;
  double t3474;
  double t3427;
  double t3053;
  double t3065;
  double t3093;
  double t3098;
  double t3104;
  double t3128;
  double t3130;
  double t3135;
  double t3138;
  double t3140;
  double t3142;
  double t3147;
  double t3148;
  double t3149;
  double t3150;
  double t3151;
  double t3152;
  double t3153;
  double t3158;
  double t3159;
  double t3537;
  double t3556;
  double t3561;
  double t3596;
  double t3597;
  double t3602;
  double t3528;
  double t3634;
  double t3584;
  double t3605;
  double t3613;
  double t3614;
  double t3616;
  double t3618;
  double t3619;
  double t3626;
  double t3632;
  double t3633;
  double t3637;
  double t3638;
  double t3639;
  double t3642;
  double t3644;
  double t3648;
  double t3650;
  double t3652;
  double t3653;
  double t3688;
  double t3705;
  double t3706;
  double t3707;
  double t3709;
  double t3727;
  double t3731;
  double t3732;
  double t3737;
  double t3694;
  double t3760;
  double t3763;
  double t3768;
  double t3769;
  double t3777;
  double t3713;
  double t3751;
  double t3743;
  double t385;
  double t812;
  double t1088;
  double t1091;
  double t1304;
  double t1314;
  double t1421;
  double t3811;
  double t1436;
  double t1544;
  double t1627;
  double t1649;
  double t1714;
  double t1723;
  double t1741;
  double t3817;
  double t3818;
  double t3819;
  double t3820;
  double t3824;
  double t3825;
  double t3826;
  double t3831;
  double t3833;
  double t3834;
  double t3852;
  double t3856;
  double t3857;
  double t3837;
  double t3839;
  double t3842;
  double t3860;
  double t3861;
  double t3862;
  double t3865;
  double t3868;
  double t3869;
  double t3873;
  double t3875;
  double t3876;
  double t3877;
  double t3878;
  double t3889;
  double t3893;
  double t3894;
  double t3896;
  double t3898;
  double t3899;
  double t3900;
  double t3901;
  double t3904;
  double t3906;
  double t3907;
  double t3910;
  double t3915;
  double t3918;
  double t3919;
  double t3921;
  double t3988;
  double t3989;
  double t3990;
  double t3998;
  double t4000;
  double t4002;
  double t3992;
  double t3993;
  double t3994;
  double t4005;
  double t4008;
  double t4011;
  double t4013;
  double t4015;
  double t4017;
  double t4018;
  double t4020;
  double t4021;
  double t4024;
  double t4026;
  double t4032;
  double t4033;
  double t4036;
  double t4037;
  double t4048;
  double t4050;
  double t4051;
  double t4052;
  double t4058;
  double t4060;
  double t4061;
  double t4063;
  double t4065;
  double t4071;
  double t4072;
  double t4075;
  double t4135;
  double t4142;
  double t4146;
  double t4151;
  double t4153;
  double t4157;
  double t4161;
  double t4162;
  double t4163;
  double t4173;
  double t4176;
  double t4177;
  double t4165;
  double t4167;
  double t4169;
  double t4180;
  double t4181;
  double t4182;
  double t4189;
  double t4190;
  double t4191;
  double t4194;
  double t4197;
  double t4200;
  double t4202;
  double t4209;
  double t4210;
  double t4212;
  double t4214;
  double t4215;
  double t4218;
  double t4220;
  double t4223;
  double t4227;
  double t4228;
  double t4229;
  double t3167;
  double t3168;
  double t3170;
  double t4296;
  double t4297;
  double t4299;
  double t4302;
  double t4303;
  double t4307;
  double t4309;
  double t4313;
  double t4315;
  double t4316;
  double t4318;
  double t4319;
  double t4320;
  double t4325;
  double t4326;
  double t4327;
  double t3178;
  double t3179;
  double t3183;
  double t3184;
  double t3189;
  double t3193;
  double t3197;
  double t3200;
  double t3206;
  double t3207;
  double t3208;
  double t3211;
  double t3215;
  double t3216;
  double t3218;
  double t3220;
  double t3222;
  double t3223;
  double t4368;
  double t4370;
  double t4371;
  double t4378;
  double t4379;
  double t4381;
  double t4382;
  double t4384;
  double t4385;
  double t4390;
  double t4392;
  double t4396;
  double t4397;
  double t4400;
  double t4401;
  double t3352;
  double t3356;
  double t3361;
  double t3365;
  double t3367;
  double t3370;
  double t3391;
  double t3392;
  double t3397;
  double t3398;
  double t3399;
  double t3400;
  double t3420;
  double t3422;
  double t3428;
  double t3430;
  double t3431;
  double t3433;
  double t3449;
  double t4431;
  double t4432;
  double t4433;
  double t4434;
  double t4436;
  double t4438;
  double t4442;
  double t4444;
  double t3453;
  double t4446;
  double t4450;
  double t4453;
  double t4454;
  double t3470;
  double t3476;
  double t3490;
  double t3493;
  double t3510;
  double t3512;
  double t3516;
  double t3517;
  double t4485;
  double t4487;
  double t4490;
  double t4491;
  double t4495;
  double t4497;
  double t4499;
  double t4502;
  double t4506;
  double t4508;
  double t4512;
  double t4514;
  double t4515;
  double t3533;
  double t3534;
  double t3539;
  double t3540;
  double t3548;
  double t3550;
  double t3558;
  double t3559;
  double t3562;
  double t3563;
  double t3572;
  double t3573;
  double t3578;
  double t3582;
  double t3589;
  double t3590;
  double t3592;
  double t3595;
  double t4543;
  double t4545;
  double t4547;
  double t4550;
  double t4551;
  double t4554;
  double t4555;
  double t4558;
  double t4560;
  double t4562;
  double t4563;
  double t4566;
  double t4567;
  double t4568;
  double t4569;
  double t3690;
  double t3692;
  double t3695;
  double t3696;
  double t3698;
  double t3703;
  double t3717;
  double t3718;
  double t3720;
  double t3722;
  double t3723;
  double t3725;
  double t3744;
  double t3749;
  double t3756;
  double t3757;
  double t3758;
  double t3759;
  double t4606;
  double t4607;
  double t4608;
  double t4610;
  double t3779;
  double t4612;
  double t4614;
  double t4615;
  double t4617;
  double t3783;
  double t4621;
  double t4622;
  double t4624;
  double t4628;
  double t3790;
  double t3794;
  double t3799;
  double t3802;
  t401 = Cos(var1[13]);
  t481 = -1.*t401;
  t802 = 1. + t481;
  t855 = Sin(var1[13]);
  t379 = Cos(var1[4]);
  t1483 = Cos(var1[16]);
  t1503 = -1.*t1483;
  t1533 = 1. + t1503;
  t1576 = Sin(var1[16]);
  t1763 = Cos(var1[5]);
  t1843 = Sin(var1[4]);
  t1770 = Cos(var1[12]);
  t1787 = -1.*t1770;
  t1799 = 1. + t1787;
  t1821 = Sin(var1[12]);
  t1822 = 0.15121*t1821;
  t1860 = Cos(var1[15]);
  t1865 = -1.*t1860;
  t1874 = 1. + t1865;
  t1875 = -0.15121*t1874;
  t1890 = Sin(var1[15]);
  t1935 = Sin(var1[5]);
  t853 = 4.e-6*t802;
  t1665 = -1. + t1483;
  t1671 = 4.e-6*t1665;
  t1265 = -2.8e-11*t802;
  t1983 = 7.e-6*t802;
  t2114 = 7.e-6*t1533;
  t1551 = 2.8e-11*t1533;
  t2388 = Cos(var1[14]);
  t2392 = -1.*t2388;
  t2401 = 1. + t2392;
  t2437 = Sin(var1[14]);
  t2209 = -1.*t855;
  t2248 = -4.e-6*t855;
  t2049 = t1763*t1821*t1843;
  t2057 = t1770*t1843*t1935;
  t2086 = t2049 + t2057;
  t2257 = -1.*t1770*t1763*t1843;
  t2262 = t1821*t1843*t1935;
  t2263 = t2257 + t2262;
  t2458 = 7.e-6*t2401;
  t1976 = -7.e-6*t855;
  t2494 = -7.e-6*t802;
  t1991 = 4.e-6*t855;
  t2554 = 4.e-6*t2401;
  t2436 = -2.8e-11*t2401;
  t2596 = -1. + t401;
  t2600 = 4.e-6*t2596;
  t938 = 7.e-6*t855;
  t2481 = 2.8e-11*t802;
  t2696 = Cos(var1[17]);
  t2701 = -1.*t2696;
  t2704 = 1. + t2701;
  t2711 = Sin(var1[17]);
  t2281 = -4.e-6*t1576;
  t2160 = t1763*t1890*t1843;
  t2179 = t1860*t1843*t1935;
  t2184 = t2160 + t2179;
  t2353 = -1.*t1860*t1763*t1843;
  t2362 = t1890*t1843*t1935;
  t2365 = t2353 + t2362;
  t2723 = 2.8e-11*t2704;
  t1712 = -7.e-6*t1576;
  t2738 = -2.8e-11*t1533;
  t1620 = -1.*t1576;
  t2709 = 7.e-6*t2704;
  t2788 = -1. + t2696;
  t2792 = 4.e-6*t2788;
  t2808 = 4.e-6*t1533;
  t2134 = 7.e-6*t1576;
  t2748 = -7.e-6*t1533;
  t2118 = 4.e-6*t1576;
  t2484 = t2481 + t2209;
  t2492 = t379*t2484;
  t2505 = t2494 + t2248;
  t2510 = t2505*t2086;
  t2516 = -1.000000000016*t802;
  t2520 = 1. + t2516;
  t2524 = t2520*t2263;
  t2534 = t2492 + t2510 + t2524;
  t2650 = 7.e-6*t2437;
  t2603 = t2600 + t1976;
  t2605 = t379*t2603;
  t2607 = -6.5e-11*t802;
  t2612 = 1. + t2607;
  t2613 = t2612*t2086;
  t2618 = t2494 + t1991;
  t2628 = t2618*t2263;
  t2629 = t2605 + t2613 + t2628;
  t2673 = -1.000000000049*t802;
  t2674 = 1. + t2673;
  t2676 = t2674*t379;
  t2682 = t2600 + t938;
  t2683 = t2682*t2086;
  t2686 = t2481 + t855;
  t2689 = t2686*t2263;
  t2690 = t2676 + t2683 + t2689;
  t2459 = -4.e-6*t2437;
  t2861 = 2.8e-11*t2401;
  t2448 = -1.*t2437;
  t2894 = -7.e-6*t2401;
  t2574 = 4.e-6*t2437;
  t2867 = -1. + t2388;
  t2871 = 4.e-6*t2867;
  t2558 = -7.e-6*t2437;
  t2828 = 4.e-6*t2711;
  t2741 = t2738 + t1576;
  t2745 = t379*t2741;
  t2749 = t2748 + t2281;
  t2753 = t2749*t2184;
  t2757 = -1.000000000016*t1533;
  t2759 = 1. + t2757;
  t2763 = t2759*t2365;
  t2765 = t2745 + t2753 + t2763;
  t2841 = 7.e-6*t2711;
  t2805 = -1.000000000049*t1533;
  t2806 = 1. + t2805;
  t2807 = t2806*t379;
  t2809 = t2808 + t1712;
  t2810 = t2809*t2184;
  t2812 = t2738 + t1620;
  t2819 = t2812*t2365;
  t2820 = t2807 + t2810 + t2819;
  t2847 = t2808 + t2134;
  t2849 = t379*t2847;
  t2850 = -6.5e-11*t1533;
  t2851 = 1. + t2850;
  t2854 = t2851*t2184;
  t2855 = t2748 + t2118;
  t2857 = t2855*t2365;
  t2858 = t2849 + t2854 + t2857;
  t2778 = -1.*t2711;
  t2955 = 4.e-6*t2704;
  t2793 = -7.e-6*t2711;
  t2976 = -2.8e-11*t2704;
  t2943 = -7.e-6*t2704;
  t2717 = -4.e-6*t2711;
  t1909 = 0.15121*t1799;
  t1933 = t1909 + t1822;
  t1955 = 0.15121*t1890;
  t1956 = t1875 + t1955;
  t1808 = -0.15121*t1799;
  t1832 = t1808 + t1822;
  t1893 = -0.15121*t1890;
  t1895 = t1875 + t1893;
  t2191 = 1.0248489999999998e-12*var1[13];
  t2206 = -0.28120900000849935*t802;
  t2237 = t1265 + t2209;
  t2243 = -0.038748999993*t2237;
  t2249 = t1983 + t2248;
  t2252 = -2.123459e-6*t2249;
  t2253 = t2191 + t2206 + t2243 + t2252;
  t2267 = -2.7726089999999997e-12*var1[16];
  t2278 = -0.2812110000084994*t1533;
  t2301 = t2114 + t2281;
  t2319 = -1.8134809999999998e-6*t2301;
  t2322 = t1551 + t1576;
  t2329 = -0.038749000006999997*t2322;
  t2332 = t2267 + t2278 + t2319 + t2329;
  t1968 = -1.4640699999999997e-7*var1[13];
  t1970 = -1.38024835e-16*t802;
  t1979 = t853 + t1976;
  t1982 = -0.038748999993*t1979;
  t2004 = t1983 + t1991;
  t2016 = -0.281209000004*t2004;
  t2034 = t1968 + t1970 + t1982 + t2016;
  t2109 = 3.9608699999999997e-7*var1[16];
  t2111 = -1.1787626499999999e-16*t1533;
  t2124 = t2114 + t2118;
  t2128 = -0.281211000004*t2124;
  t2139 = t1671 + t2134;
  t2141 = -0.038749000006999997*t2139;
  t2148 = t2109 + t2111 + t2128 + t2141;
  t2550 = -2.598649999999999e-7*var1[14];
  t2552 = -2.3905277499999995e-16*t2401;
  t2563 = t2554 + t2558;
  t2569 = -0.038922999986*t2563;
  t2576 = t2458 + t2574;
  t2580 = -0.503149000008*t2576;
  t2586 = t2550 + t2552 + t2569 + t2580;
  t3037 = -1.*t379*t1763*t1821;
  t3041 = -1.*t1770*t379*t1935;
  t3043 = t3037 + t3041;
  t3056 = -1.*t1770*t379*t1763;
  t3057 = t379*t1821*t1935;
  t3059 = t3056 + t3057;
  t2385 = 1.8190549999999993e-12*var1[14];
  t2408 = -0.5031490000160505*t2401;
  t2453 = t2436 + t2448;
  t2454 = -0.038922999986*t2453;
  t2469 = t2458 + t2459;
  t2471 = -3.6777349999999994e-6*t2469;
  t2472 = t2385 + t2408 + t2454 + t2471;
  t2636 = 1.0394599999999997e-12*var1[14];
  t2640 = -0.03892299998790722*t2401;
  t2653 = t2554 + t2650;
  t2654 = -3.6777349999999994e-6*t2653;
  t2663 = t2436 + t2437;
  t2668 = -0.503149000008*t2663;
  t2670 = t2636 + t2640 + t2654 + t2668;
  t2823 = 2.826290000000002e-7*var1[17];
  t2827 = -2.18904205e-16*t2704;
  t2830 = t2709 + t2828;
  t2834 = -0.5031510000080001*t2830;
  t2842 = t2792 + t2841;
  t2844 = -0.038575000014*t2842;
  t2845 = t2823 + t2827 + t2834 + t2844;
  t3046 = -1.*t379*t1763*t1890;
  t3049 = -1.*t1860*t379*t1935;
  t3052 = t3046 + t3049;
  t3061 = -1.*t1860*t379*t1763;
  t3062 = t379*t1890*t1935;
  t3063 = t3061 + t3062;
  t2771 = 1.1305160000000008e-12*var1[17];
  t2775 = -0.03857500001589017*t2704;
  t2784 = t2723 + t2778;
  t2787 = -0.5031510000080001*t2784;
  t2796 = t2792 + t2793;
  t2801 = -3.367757e-6*t2796;
  t2803 = t2771 + t2775 + t2787 + t2801;
  t2695 = -1.9784030000000015e-12*var1[17];
  t2706 = -0.5031510000160505*t2704;
  t2718 = t2709 + t2717;
  t2720 = -3.367757e-6*t2718;
  t2731 = t2723 + t2711;
  t2733 = -0.038575000014*t2731;
  t2736 = t2695 + t2706 + t2720 + t2733;
  t2877 = t2871 + t2650;
  t3066 = t2618*t3043;
  t3068 = t2612*t3059;
  t3069 = t3066 + t3068;
  t2863 = t2861 + t2437;
  t3071 = t2520*t3043;
  t3074 = t2505*t3059;
  t3078 = t3071 + t3074;
  t2881 = -1.000000000049*t2401;
  t2884 = 1. + t2881;
  t3080 = t2686*t3043;
  t3082 = t2682*t3059;
  t3083 = t3080 + t3082;
  t2899 = t2894 + t2459;
  t2890 = -1.000000000016*t2401;
  t2891 = 1. + t2890;
  t2908 = t2861 + t2448;
  t2930 = -6.5e-11*t2401;
  t2931 = 1. + t2930;
  t2926 = t2894 + t2574;
  t2936 = t2871 + t2558;
  t3010 = t2943 + t2717;
  t3087 = t2855*t3052;
  t3089 = t2851*t3063;
  t3090 = t3087 + t3089;
  t3001 = t2976 + t2711;
  t3094 = t2812*t3052;
  t3095 = t2809*t3063;
  t3096 = t3094 + t3095;
  t2995 = -1.000000000016*t2704;
  t2997 = 1. + t2995;
  t3099 = t2759*t3052;
  t3102 = t2749*t3063;
  t3103 = t3099 + t3102;
  t2989 = t2955 + t2793;
  t2980 = -1.000000000049*t2704;
  t2982 = 1. + t2980;
  t2977 = t2976 + t2778;
  t2964 = -6.5e-11*t2704;
  t2968 = 1. + t2964;
  t2956 = t2955 + t2841;
  t2947 = t2943 + t2828;
  t3165 = 0.15121*t1770;
  t3045 = t2253*t3043;
  t3060 = t2034*t3059;
  t3070 = t2586*t3069;
  t3079 = t2472*t3078;
  t3084 = t2670*t3083;
  t3106 = t2877*t3069;
  t3107 = t2863*t3078;
  t3108 = t2884*t3083;
  t3109 = t3106 + t3107 + t3108;
  t3111 = -0.038924*t3109;
  t3115 = t2899*t3069;
  t3116 = t2891*t3078;
  t3117 = t2908*t3083;
  t3118 = t3115 + t3116 + t3117;
  t3119 = -0.80315*t3118;
  t3120 = t2931*t3069;
  t3121 = t2926*t3078;
  t3122 = t2936*t3083;
  t3123 = t3120 + t3121 + t3122;
  t3125 = 0.148705*t3123;
  t3175 = -2.8e-11*t855;
  t3196 = -7.e-6*t401;
  t3205 = 4.e-6*t401;
  t3224 = t1770*t379*t1763;
  t3227 = -1.*t379*t1821*t1935;
  t3229 = t3224 + t3227;
  t3182 = 7.e-6*t401;
  t3249 = 2.8e-11*t855;
  t3217 = -4.e-6*t401;
  t3231 = t3196 + t2248;
  t3234 = t3231*t1843;
  t3235 = -6.5e-11*t855*t3043;
  t3236 = t3205 + t1976;
  t3239 = t3236*t3229;
  t3241 = t3234 + t3235 + t3239;
  t3245 = -1.000000000049*t855*t1843;
  t3247 = t3182 + t2248;
  t3248 = t3247*t3043;
  t3250 = t401 + t3249;
  t3253 = t3250*t3229;
  t3254 = t3245 + t3248 + t3253;
  t3257 = t481 + t3249;
  t3258 = t3257*t1843;
  t3260 = t3217 + t1976;
  t3263 = t3260*t3043;
  t3267 = -1.000000000016*t855*t3229;
  t3270 = t3258 + t3263 + t3267;
  t3347 = -2.8e-11*t2437;
  t3394 = 4.e-6*t2388;
  t3371 = t2484*t1843;
  t3378 = t2505*t3043;
  t3381 = t2520*t3229;
  t3383 = t3371 + t3378 + t3381;
  t3406 = t2603*t1843;
  t3407 = t2612*t3043;
  t3409 = t2618*t3229;
  t3414 = t3406 + t3407 + t3409;
  t3388 = -7.e-6*t2388;
  t3435 = t2674*t1843;
  t3437 = t2682*t3043;
  t3438 = t2686*t3229;
  t3441 = t3435 + t3437 + t3438;
  t3360 = -4.e-6*t2388;
  t3474 = 2.8e-11*t2437;
  t3427 = 7.e-6*t2388;
  t3053 = -1.*t2332*t3052;
  t3065 = -1.*t2148*t3063;
  t3093 = -1.*t2845*t3090;
  t3098 = -1.*t2803*t3096;
  t3104 = -1.*t2736*t3103;
  t3128 = t3010*t3090;
  t3130 = t3001*t3096;
  t3135 = t2997*t3103;
  t3138 = t3128 + t3130 + t3135;
  t3140 = 0.80315*t3138;
  t3142 = t2989*t3090;
  t3147 = t2982*t3096;
  t3148 = t2977*t3103;
  t3149 = t3142 + t3147 + t3148;
  t3150 = 0.038576*t3149;
  t3151 = t2968*t3090;
  t3152 = t2956*t3096;
  t3153 = t2947*t3103;
  t3158 = t3151 + t3152 + t3153;
  t3159 = 0.148715*t3158;
  t3537 = 2.8e-11*t1576;
  t3556 = 7.e-6*t1483;
  t3561 = 4.e-6*t1483;
  t3596 = t1860*t379*t1763;
  t3597 = -1.*t379*t1890*t1935;
  t3602 = t3596 + t3597;
  t3528 = -7.e-6*t1483;
  t3634 = -2.8e-11*t1576;
  t3584 = -4.e-6*t1483;
  t3605 = t3556 + t2118;
  t3613 = t3605*t1843;
  t3614 = -6.5e-11*t1576*t3052;
  t3616 = t3561 + t1712;
  t3618 = t3616*t3602;
  t3619 = t3613 + t3614 + t3618;
  t3626 = -1.000000000049*t1576*t1843;
  t3632 = t3528 + t2118;
  t3633 = t3632*t3052;
  t3637 = t1503 + t3634;
  t3638 = t3637*t3602;
  t3639 = t3626 + t3633 + t3638;
  t3642 = t1483 + t3634;
  t3644 = t3642*t1843;
  t3648 = t3584 + t1712;
  t3650 = t3648*t3052;
  t3652 = -1.000000000016*t1576*t3602;
  t3653 = t3644 + t3650 + t3652;
  t3688 = 2.8e-11*t2711;
  t3705 = t2741*t1843;
  t3706 = t2749*t3052;
  t3707 = t2759*t3602;
  t3709 = t3705 + t3706 + t3707;
  t3727 = t2806*t1843;
  t3731 = t2809*t3052;
  t3732 = t2812*t3602;
  t3737 = t3727 + t3731 + t3732;
  t3694 = -4.e-6*t2696;
  t3760 = t2847*t1843;
  t3763 = t2851*t3052;
  t3768 = t2855*t3602;
  t3769 = t3760 + t3763 + t3768;
  t3777 = -2.8e-11*t2711;
  t3713 = -7.e-6*t2696;
  t3751 = 4.e-6*t2696;
  t3743 = 7.e-6*t2696;
  t385 = 5.856279999999999e-13*var1[13];
  t812 = -0.0387489999948987*t802;
  t1088 = t853 + t938;
  t1091 = -2.123459e-6*t1088;
  t1304 = t1265 + t855;
  t1314 = -0.281209000004*t1304;
  t1421 = t385 + t812 + t1091 + t1314;
  t3811 = Cos(var1[3]);
  t1436 = 1.5843479999999999e-12*var1[16];
  t1544 = -0.03874900000889869*t1533;
  t1627 = t1551 + t1620;
  t1649 = -0.281211000004*t1627;
  t1714 = t1671 + t1712;
  t1723 = -1.8134809999999998e-6*t1714;
  t1741 = t1436 + t1544 + t1649 + t1723;
  t3817 = t3811*t1763*t1843;
  t3818 = Sin(var1[3]);
  t3819 = -1.*t3818*t1935;
  t3820 = t3817 + t3819;
  t3824 = -1.*t1763*t3818;
  t3825 = -1.*t3811*t1843*t1935;
  t3826 = t3824 + t3825;
  t3831 = -1.*t1821*t3820;
  t3833 = t1770*t3826;
  t3834 = t3831 + t3833;
  t3852 = t1770*t3820;
  t3856 = t1821*t3826;
  t3857 = t3852 + t3856;
  t3837 = -1.*t1890*t3820;
  t3839 = t1860*t3826;
  t3842 = t3837 + t3839;
  t3860 = t1860*t3820;
  t3861 = t1890*t3826;
  t3862 = t3860 + t3861;
  t3865 = -1.*t3811*t379*t2484;
  t3868 = t2505*t3834;
  t3869 = t2520*t3857;
  t3873 = t3865 + t3868 + t3869;
  t3875 = -1.*t3811*t379*t2603;
  t3876 = t2612*t3834;
  t3877 = t2618*t3857;
  t3878 = t3875 + t3876 + t3877;
  t3889 = -1.*t2674*t3811*t379;
  t3893 = t2682*t3834;
  t3894 = t2686*t3857;
  t3896 = t3889 + t3893 + t3894;
  t3898 = -1.*t3811*t379*t2741;
  t3899 = t2749*t3842;
  t3900 = t2759*t3862;
  t3901 = t3898 + t3899 + t3900;
  t3904 = -1.*t2806*t3811*t379;
  t3906 = t2809*t3842;
  t3907 = t2812*t3862;
  t3910 = t3904 + t3906 + t3907;
  t3915 = -1.*t3811*t379*t2847;
  t3918 = t2851*t3842;
  t3919 = t2855*t3862;
  t3921 = t3915 + t3918 + t3919;
  t3988 = -1.*t379*t1763*t1821*t3818;
  t3989 = -1.*t1770*t379*t3818*t1935;
  t3990 = t3988 + t3989;
  t3998 = t1770*t379*t1763*t3818;
  t4000 = -1.*t379*t1821*t3818*t1935;
  t4002 = t3998 + t4000;
  t3992 = -1.*t379*t1763*t1890*t3818;
  t3993 = -1.*t1860*t379*t3818*t1935;
  t3994 = t3992 + t3993;
  t4005 = t1860*t379*t1763*t3818;
  t4008 = -1.*t379*t1890*t3818*t1935;
  t4011 = t4005 + t4008;
  t4013 = t2484*t3818*t1843;
  t4015 = t2505*t3990;
  t4017 = t2520*t4002;
  t4018 = t4013 + t4015 + t4017;
  t4020 = t2603*t3818*t1843;
  t4021 = t2612*t3990;
  t4024 = t2618*t4002;
  t4026 = t4020 + t4021 + t4024;
  t4032 = t2674*t3818*t1843;
  t4033 = t2682*t3990;
  t4036 = t2686*t4002;
  t4037 = t4032 + t4033 + t4036;
  t4048 = t2741*t3818*t1843;
  t4050 = t2749*t3994;
  t4051 = t2759*t4011;
  t4052 = t4048 + t4050 + t4051;
  t4058 = t2806*t3818*t1843;
  t4060 = t2809*t3994;
  t4061 = t2812*t4011;
  t4063 = t4058 + t4060 + t4061;
  t4065 = t2847*t3818*t1843;
  t4071 = t2851*t3994;
  t4072 = t2855*t4011;
  t4075 = t4065 + t4071 + t4072;
  t4135 = -1.*t1763*t3818*t1843;
  t4142 = -1.*t3811*t1935;
  t4146 = t4135 + t4142;
  t4151 = t3811*t1763;
  t4153 = -1.*t3818*t1843*t1935;
  t4157 = t4151 + t4153;
  t4161 = t1821*t4146;
  t4162 = t1770*t4157;
  t4163 = t4161 + t4162;
  t4173 = t1770*t4146;
  t4176 = -1.*t1821*t4157;
  t4177 = t4173 + t4176;
  t4165 = t1890*t4146;
  t4167 = t1860*t4157;
  t4169 = t4165 + t4167;
  t4180 = t1860*t4146;
  t4181 = -1.*t1890*t4157;
  t4182 = t4180 + t4181;
  t4189 = t2618*t4163;
  t4190 = t2612*t4177;
  t4191 = t4189 + t4190;
  t4194 = t2520*t4163;
  t4197 = t2505*t4177;
  t4200 = t4194 + t4197;
  t4202 = t2686*t4163;
  t4209 = t2682*t4177;
  t4210 = t4202 + t4209;
  t4212 = t2855*t4169;
  t4214 = t2851*t4182;
  t4215 = t4212 + t4214;
  t4218 = t2812*t4169;
  t4220 = t2809*t4182;
  t4223 = t4218 + t4220;
  t4227 = t2759*t4169;
  t4228 = t2749*t4182;
  t4229 = t4227 + t4228;
  t3167 = -0.15121*t1821;
  t3168 = t3165 + t3167;
  t3170 = t3165 + t1822;
  t4296 = t1763*t3818*t1843;
  t4297 = t3811*t1935;
  t4299 = t4296 + t4297;
  t4302 = -1.*t1821*t4299;
  t4303 = t4302 + t4162;
  t4307 = -1.*t1770*t4299;
  t4309 = t4307 + t4176;
  t4313 = t2618*t4303;
  t4315 = t2612*t4309;
  t4316 = t4313 + t4315;
  t4318 = t2520*t4303;
  t4319 = t2505*t4309;
  t4320 = t4318 + t4319;
  t4325 = t2686*t4303;
  t4326 = t2682*t4309;
  t4327 = t4325 + t4326;
  t3178 = t401 + t3175;
  t3179 = -0.281209000004*t3178;
  t3183 = t3182 + t1991;
  t3184 = -2.123459e-6*t3183;
  t3189 = -0.0387489999948987*t855;
  t3193 = 5.856279999999999e-13 + t3179 + t3184 + t3189;
  t3197 = t3196 + t1991;
  t3200 = -0.038748999993*t3197;
  t3206 = t3205 + t938;
  t3207 = -0.281209000004*t3206;
  t3208 = -1.38024835e-16*t855;
  t3211 = -1.4640699999999997e-7 + t3200 + t3207 + t3208;
  t3215 = t481 + t3175;
  t3216 = -0.038748999993*t3215;
  t3218 = t3217 + t938;
  t3220 = -2.123459e-6*t3218;
  t3222 = -0.28120900000849935*t855;
  t3223 = 1.0248489999999998e-12 + t3216 + t3220 + t3222;
  t4368 = t1770*t4299;
  t4370 = t1821*t4157;
  t4371 = t4368 + t4370;
  t4378 = -1.*t379*t3231*t3818;
  t4379 = -6.5e-11*t855*t4303;
  t4381 = t3236*t4371;
  t4382 = t4378 + t4379 + t4381;
  t4384 = 1.000000000049*t379*t855*t3818;
  t4385 = t3247*t4303;
  t4390 = t3250*t4371;
  t4392 = t4384 + t4385 + t4390;
  t4396 = -1.*t379*t3257*t3818;
  t4397 = t3260*t4303;
  t4400 = -1.000000000016*t855*t4371;
  t4401 = t4396 + t4397 + t4400;
  t3352 = t2392 + t3347;
  t3356 = -0.038922999986*t3352;
  t3361 = t3360 + t2650;
  t3365 = -3.6777349999999994e-6*t3361;
  t3367 = -0.5031490000160505*t2437;
  t3370 = 1.8190549999999993e-12 + t3356 + t3365 + t3367;
  t3391 = t3388 + t2574;
  t3392 = -0.038922999986*t3391;
  t3397 = t3394 + t2650;
  t3398 = -0.503149000008*t3397;
  t3399 = -2.3905277499999995e-16*t2437;
  t3400 = -2.598649999999999e-7 + t3392 + t3398 + t3399;
  t3420 = t2388 + t3347;
  t3422 = -0.503149000008*t3420;
  t3428 = t3427 + t2574;
  t3430 = -3.6777349999999994e-6*t3428;
  t3431 = -0.03892299998790722*t2437;
  t3433 = 1.0394599999999997e-12 + t3422 + t3430 + t3431;
  t3449 = t3394 + t2558;
  t4431 = -1.*t379*t2484*t3818;
  t4432 = t2505*t4303;
  t4433 = t2520*t4371;
  t4434 = t4431 + t4432 + t4433;
  t4436 = -1.*t379*t2603*t3818;
  t4438 = t2612*t4303;
  t4442 = t2618*t4371;
  t4444 = t4436 + t4438 + t4442;
  t3453 = t3388 + t2459;
  t4446 = -1.*t2674*t379*t3818;
  t4450 = t2682*t4303;
  t4453 = t2686*t4371;
  t4454 = t4446 + t4450 + t4453;
  t3470 = t3360 + t2558;
  t3476 = t2392 + t3474;
  t3490 = t2388 + t3474;
  t3493 = t3427 + t2459;
  t3510 = -0.15121*t1860;
  t3512 = t3510 + t1893;
  t3516 = 0.15121*t1860;
  t3517 = t3516 + t1893;
  t4485 = -1.*t1890*t4299;
  t4487 = t4485 + t4167;
  t4490 = -1.*t1860*t4299;
  t4491 = t4490 + t4181;
  t4495 = t2855*t4487;
  t4497 = t2851*t4491;
  t4499 = t4495 + t4497;
  t4502 = t2812*t4487;
  t4506 = t2809*t4491;
  t4508 = t4502 + t4506;
  t4512 = t2759*t4487;
  t4514 = t2749*t4491;
  t4515 = t4512 + t4514;
  t3533 = t3528 + t2281;
  t3534 = -1.8134809999999998e-6*t3533;
  t3539 = t1503 + t3537;
  t3540 = -0.281211000004*t3539;
  t3548 = -0.03874900000889869*t1576;
  t3550 = 1.5843479999999999e-12 + t3534 + t3540 + t3548;
  t3558 = t3556 + t2281;
  t3559 = -0.038749000006999997*t3558;
  t3562 = t3561 + t2134;
  t3563 = -0.281211000004*t3562;
  t3572 = -1.1787626499999999e-16*t1576;
  t3573 = 3.9608699999999997e-7 + t3559 + t3563 + t3572;
  t3578 = t1483 + t3537;
  t3582 = -0.038749000006999997*t3578;
  t3589 = t3584 + t2134;
  t3590 = -1.8134809999999998e-6*t3589;
  t3592 = -0.2812110000084994*t1576;
  t3595 = -2.7726089999999997e-12 + t3582 + t3590 + t3592;
  t4543 = t1860*t4299;
  t4545 = t1890*t4157;
  t4547 = t4543 + t4545;
  t4550 = -1.*t379*t3605*t3818;
  t4551 = -6.5e-11*t1576*t4487;
  t4554 = t3616*t4547;
  t4555 = t4550 + t4551 + t4554;
  t4558 = 1.000000000049*t379*t1576*t3818;
  t4560 = t3632*t4487;
  t4562 = t3637*t4547;
  t4563 = t4558 + t4560 + t4562;
  t4566 = -1.*t379*t3642*t3818;
  t4567 = t3648*t4487;
  t4568 = -1.000000000016*t1576*t4547;
  t4569 = t4566 + t4567 + t4568;
  t3690 = t2696 + t3688;
  t3692 = -0.038575000014*t3690;
  t3695 = t3694 + t2841;
  t3696 = -3.367757e-6*t3695;
  t3698 = -0.5031510000160505*t2711;
  t3703 = -1.9784030000000015e-12 + t3692 + t3696 + t3698;
  t3717 = t3713 + t2717;
  t3718 = -3.367757e-6*t3717;
  t3720 = t2701 + t3688;
  t3722 = -0.5031510000080001*t3720;
  t3723 = -0.03857500001589017*t2711;
  t3725 = 1.1305160000000008e-12 + t3718 + t3722 + t3723;
  t3744 = t3743 + t2717;
  t3749 = -0.038575000014*t3744;
  t3756 = t3751 + t2841;
  t3757 = -0.5031510000080001*t3756;
  t3758 = -2.18904205e-16*t2711;
  t3759 = 2.826290000000002e-7 + t3749 + t3757 + t3758;
  t4606 = -1.*t379*t2741*t3818;
  t4607 = t2749*t4487;
  t4608 = t2759*t4547;
  t4610 = t4606 + t4607 + t4608;
  t3779 = t2696 + t3777;
  t4612 = -1.*t2806*t379*t3818;
  t4614 = t2809*t4487;
  t4615 = t2812*t4547;
  t4617 = t4612 + t4614 + t4615;
  t3783 = t3694 + t2793;
  t4621 = -1.*t379*t2847*t3818;
  t4622 = t2851*t4487;
  t4624 = t2855*t4547;
  t4628 = t4621 + t4622 + t4624;
  t3790 = t2701 + t3777;
  t3794 = t3713 + t2828;
  t3799 = t3751 + t2793;
  t3802 = t3743 + t2828;
  p_output1[0]=-1.*t1763*t1832*t1843 + t1763*t1843*t1895 + t1843*t1933*t1935 - 1.*t1843*t1935*t1956 + t2034*t2086 - 1.*t2148*t2184 + t2253*t2263 - 1.*t2332*t2365 + t2472*t2534 + t2586*t2629 + t2670*t2690 - 1.*t2736*t2765 - 1.*t2803*t2820 - 1.*t2845*t2858 - 0.038924*(t2534*t2863 + t2629*t2877 + t2690*t2884) - 0.80315*(t2534*t2891 + t2629*t2899 + t2690*t2908) + 0.148705*(t2534*t2926 + t2629*t2931 + t2690*t2936) + 0.148715*(t2765*t2947 + t2820*t2956 + t2858*t2968) + 0.038576*(t2765*t2977 + t2820*t2982 + t2858*t2989) + 0.80315*(t2765*t2997 + t2820*t3001 + t2858*t3010) + t1421*t379 - 1.*t1741*t379;
  p_output1[1]=t3045 + t3053 + t3060 + t3065 + t3070 + t3079 + t3084 + t3093 + t3098 + t3104 + t3111 + t3119 + t3125 + t3140 + t3150 + t3159 - 1.*t1763*t1933*t379 - 1.*t1832*t1935*t379 + t1895*t1935*t379 + t1763*t1956*t379;
  p_output1[2]=t3045 + t3060 + t3070 + t3079 + t3084 + t3111 + t3119 + t3125 + t1763*t3168*t379 - 1.*t1935*t3170*t379;
  p_output1[3]=t1843*t3193 + t3043*t3211 + t3223*t3229 + t2586*t3241 + t2670*t3254 + t2472*t3270 - 0.038924*(t2877*t3241 + t2884*t3254 + t2863*t3270) - 0.80315*(t2899*t3241 + t2908*t3254 + t2891*t3270) + 0.148705*(t2931*t3241 + t2936*t3254 + t2926*t3270);
  p_output1[4]=t3370*t3383 + t3400*t3414 + t3433*t3441 + 0.148705*(-6.5e-11*t2437*t3414 + t3383*t3449 + t3441*t3453) - 0.80315*(-1.000000000016*t2437*t3383 + t3414*t3470 + t3441*t3476) - 0.038924*(-1.000000000049*t2437*t3441 + t3383*t3490 + t3414*t3493);
  p_output1[5]=t3053 + t3065 + t3093 + t3098 + t3104 + t3140 + t3150 + t3159 - 1.*t1763*t3512*t379 + t1935*t3517*t379;
  p_output1[6]=-1.*t1843*t3550 - 1.*t3052*t3573 - 1.*t3595*t3602 - 1.*t2845*t3619 - 1.*t2803*t3639 - 1.*t2736*t3653 + 0.148715*(t2968*t3619 + t2956*t3639 + t2947*t3653) + 0.038576*(t2989*t3619 + t2982*t3639 + t2977*t3653) + 0.80315*(t3010*t3619 + t3001*t3639 + t2997*t3653);
  p_output1[7]=-1.*t3703*t3709 - 1.*t3725*t3737 - 1.*t3759*t3769 + 0.80315*(-1.000000000016*t2711*t3709 + t3737*t3779 + t3769*t3783) + 0.038576*(-1.000000000049*t2711*t3737 + t3709*t3790 + t3769*t3794) + 0.148715*(-6.5e-11*t2711*t3769 + t3709*t3799 + t3737*t3802);
  p_output1[8]=-1.*t1421*t379*t3811 + t1741*t379*t3811 + t1832*t3820 - 1.*t1895*t3820 + t1933*t3826 - 1.*t1956*t3826 + t2034*t3834 - 1.*t2148*t3842 + t2253*t3857 - 1.*t2332*t3862 + t2472*t3873 + t2586*t3878 + t2670*t3896 - 0.038924*(t2863*t3873 + t2877*t3878 + t2884*t3896) - 0.80315*(t2891*t3873 + t2899*t3878 + t2908*t3896) + 0.148705*(t2926*t3873 + t2931*t3878 + t2936*t3896) - 1.*t2736*t3901 - 1.*t2803*t3910 - 1.*t2845*t3921 + 0.148715*(t2947*t3901 + t2956*t3910 + t2968*t3921) + 0.038576*(t2977*t3901 + t2982*t3910 + t2989*t3921) + 0.80315*(t2997*t3901 + t3001*t3910 + t3010*t3921);
  p_output1[9]=t1421*t1843*t3818 - 1.*t1741*t1843*t3818 + t1763*t1832*t379*t3818 - 1.*t1763*t1895*t379*t3818 - 1.*t1933*t1935*t379*t3818 + t1935*t1956*t379*t3818 + t2034*t3990 - 1.*t2148*t3994 + t2253*t4002 - 1.*t2332*t4011 + t2472*t4018 + t2586*t4026 + t2670*t4037 - 0.038924*(t2863*t4018 + t2877*t4026 + t2884*t4037) - 0.80315*(t2891*t4018 + t2899*t4026 + t2908*t4037) + 0.148705*(t2926*t4018 + t2931*t4026 + t2936*t4037) - 1.*t2736*t4052 - 1.*t2803*t4063 - 1.*t2845*t4075 + 0.148715*(t2947*t4052 + t2956*t4063 + t2968*t4075) + 0.038576*(t2977*t4052 + t2982*t4063 + t2989*t4075) + 0.80315*(t2997*t4052 + t3001*t4063 + t3010*t4075);
  p_output1[10]=t1933*t4146 - 1.*t1956*t4146 + t1832*t4157 - 1.*t1895*t4157 + t2253*t4163 - 1.*t2332*t4169 + t2034*t4177 - 1.*t2148*t4182 + t2586*t4191 + t2472*t4200 + t2670*t4210 - 0.038924*(t2877*t4191 + t2863*t4200 + t2884*t4210) - 0.80315*(t2899*t4191 + t2891*t4200 + t2908*t4210) + 0.148705*(t2931*t4191 + t2926*t4200 + t2936*t4210) - 1.*t2845*t4215 - 1.*t2803*t4223 - 1.*t2736*t4229 + 0.148715*(t2968*t4215 + t2956*t4223 + t2947*t4229) + 0.038576*(t2989*t4215 + t2982*t4223 + t2977*t4229) + 0.80315*(t3010*t4215 + t3001*t4223 + t2997*t4229);
  p_output1[11]=t3170*t4157 + t3168*t4299 + t2253*t4303 + t2034*t4309 + t2586*t4316 + t2472*t4320 + t2670*t4327 - 0.038924*(t2877*t4316 + t2863*t4320 + t2884*t4327) - 0.80315*(t2899*t4316 + t2891*t4320 + t2908*t4327) + 0.148705*(t2931*t4316 + t2926*t4320 + t2936*t4327);
  p_output1[12]=-1.*t3193*t379*t3818 + t3211*t4303 + t3223*t4371 + t2586*t4382 + t2670*t4392 + t2472*t4401 - 0.038924*(t2877*t4382 + t2884*t4392 + t2863*t4401) - 0.80315*(t2899*t4382 + t2908*t4392 + t2891*t4401) + 0.148705*(t2931*t4382 + t2936*t4392 + t2926*t4401);
  p_output1[13]=t3370*t4434 + t3400*t4444 + t3433*t4454 - 0.038924*(t3490*t4434 + t3493*t4444 - 1.000000000049*t2437*t4454) + 0.148705*(t3449*t4434 - 6.5e-11*t2437*t4444 + t3453*t4454) - 0.80315*(-1.000000000016*t2437*t4434 + t3470*t4444 + t3476*t4454);
  p_output1[14]=-1.*t3517*t4157 - 1.*t3512*t4299 - 1.*t2332*t4487 - 1.*t2148*t4491 - 1.*t2845*t4499 - 1.*t2803*t4508 - 1.*t2736*t4515 + 0.148715*(t2968*t4499 + t2956*t4508 + t2947*t4515) + 0.038576*(t2989*t4499 + t2982*t4508 + t2977*t4515) + 0.80315*(t3010*t4499 + t3001*t4508 + t2997*t4515);
  p_output1[15]=t3550*t379*t3818 - 1.*t3573*t4487 - 1.*t3595*t4547 - 1.*t2845*t4555 - 1.*t2803*t4563 - 1.*t2736*t4569 + 0.148715*(t2968*t4555 + t2956*t4563 + t2947*t4569) + 0.038576*(t2989*t4555 + t2982*t4563 + t2977*t4569) + 0.80315*(t3010*t4555 + t3001*t4563 + t2997*t4569);
  p_output1[16]=-1.*t3703*t4610 - 1.*t3725*t4617 - 1.*t3759*t4628 + 0.148715*(t3799*t4610 + t3802*t4617 - 6.5e-11*t2711*t4628) + 0.80315*(-1.000000000016*t2711*t4610 + t3779*t4617 + t3783*t4628) + 0.038576*(t3790*t4610 - 1.000000000049*t2711*t4617 + t3794*t4628);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 17, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "J_step_distance_ParallelStance2.hh"

namespace ParallelStance2
{

void J_step_distance_ParallelStance2_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
