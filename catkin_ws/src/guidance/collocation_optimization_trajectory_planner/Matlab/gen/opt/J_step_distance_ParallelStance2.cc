/*
 * Automatically Generated from Mathematica.
 * Sun 14 Nov 2021 17:32:52 GMT+01:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t651;
  double t655;
  double t744;
  double t1128;
  double t125;
  double t1474;
  double t1483;
  double t1502;
  double t1551;
  double t1812;
  double t1851;
  double t1813;
  double t1815;
  double t1824;
  double t1843;
  double t1844;
  double t1859;
  double t1865;
  double t1874;
  double t1877;
  double t1900;
  double t1926;
  double t1081;
  double t1700;
  double t1707;
  double t1356;
  double t1947;
  double t2026;
  double t1514;
  double t2328;
  double t2341;
  double t2353;
  double t2369;
  double t2168;
  double t2180;
  double t1987;
  double t1993;
  double t2000;
  double t2193;
  double t2198;
  double t2199;
  double t2397;
  double t1940;
  double t2464;
  double t1949;
  double t2514;
  double t2367;
  double t2565;
  double t2572;
  double t1137;
  double t2446;
  double t2739;
  double t2741;
  double t2742;
  double t2751;
  double t2218;
  double t2072;
  double t2073;
  double t2099;
  double t2261;
  double t2292;
  double t2303;
  double t2767;
  double t1717;
  double t2790;
  double t1609;
  double t2748;
  double t2860;
  double t2863;
  double t2900;
  double t2051;
  double t2798;
  double t2039;
  double t2457;
  double t2463;
  double t2469;
  double t2471;
  double t2472;
  double t2473;
  double t2475;
  double t2482;
  double t2644;
  double t2576;
  double t2585;
  double t2587;
  double t2588;
  double t2594;
  double t2602;
  double t2613;
  double t2619;
  double t2681;
  double t2682;
  double t2686;
  double t2690;
  double t2709;
  double t2714;
  double t2725;
  double t2727;
  double t2410;
  double t2970;
  double t2370;
  double t3006;
  double t2535;
  double t2980;
  double t2985;
  double t2516;
  double t2927;
  double t2792;
  double t2793;
  double t2800;
  double t2802;
  double t2807;
  double t2812;
  double t2813;
  double t2816;
  double t2931;
  double t2886;
  double t2889;
  double t2894;
  double t2901;
  double t2902;
  double t2904;
  double t2905;
  double t2917;
  double t2946;
  double t2947;
  double t2948;
  double t2949;
  double t2954;
  double t2958;
  double t2959;
  double t2964;
  double t2834;
  double t3053;
  double t2866;
  double t3069;
  double t3047;
  double t2754;
  double t1921;
  double t1923;
  double t1930;
  double t1933;
  double t1826;
  double t1850;
  double t1905;
  double t1910;
  double t2129;
  double t2157;
  double t2171;
  double t2179;
  double t2181;
  double t2185;
  double t2191;
  double t2207;
  double t2212;
  double t2221;
  double t2228;
  double t2230;
  double t2245;
  double t2260;
  double t1935;
  double t1939;
  double t1941;
  double t1943;
  double t1963;
  double t1965;
  double t1972;
  double t2013;
  double t2023;
  double t2042;
  double t2045;
  double t2060;
  double t2062;
  double t2065;
  double t2498;
  double t2513;
  double t2522;
  double t2531;
  double t2540;
  double t2549;
  double t2557;
  double t3118;
  double t3121;
  double t3129;
  double t3145;
  double t3146;
  double t3148;
  double t2317;
  double t2358;
  double t2379;
  double t2381;
  double t2431;
  double t2439;
  double t2440;
  double t2627;
  double t2635;
  double t2648;
  double t2653;
  double t2659;
  double t2664;
  double t2677;
  double t2924;
  double t2926;
  double t2929;
  double t2930;
  double t2933;
  double t2934;
  double t2939;
  double t3139;
  double t3141;
  double t3142;
  double t3155;
  double t3160;
  double t3162;
  double t2826;
  double t2831;
  double t2835;
  double t2851;
  double t2871;
  double t2874;
  double t2880;
  double t2734;
  double t2746;
  double t2757;
  double t2764;
  double t2779;
  double t2784;
  double t2786;
  double t2988;
  double t3169;
  double t3171;
  double t3172;
  double t2973;
  double t3179;
  double t3180;
  double t3181;
  double t2993;
  double t2994;
  double t3185;
  double t3187;
  double t3189;
  double t3009;
  double t3000;
  double t3002;
  double t3014;
  double t3026;
  double t3029;
  double t3023;
  double t3033;
  double t3104;
  double t3195;
  double t3196;
  double t3200;
  double t3095;
  double t3205;
  double t3206;
  double t3207;
  double t3087;
  double t3090;
  double t3210;
  double t3211;
  double t3212;
  double t3081;
  double t3077;
  double t3079;
  double t3071;
  double t3058;
  double t3059;
  double t3055;
  double t3049;
  double t3273;
  double t3136;
  double t3154;
  double t3175;
  double t3182;
  double t3194;
  double t3216;
  double t3217;
  double t3218;
  double t3219;
  double t3220;
  double t3222;
  double t3224;
  double t3225;
  double t3226;
  double t3228;
  double t3233;
  double t3235;
  double t3236;
  double t3237;
  double t3238;
  double t3288;
  double t3303;
  double t3307;
  double t3354;
  double t3357;
  double t3361;
  double t3292;
  double t3384;
  double t3337;
  double t3364;
  double t3365;
  double t3366;
  double t3371;
  double t3372;
  double t3376;
  double t3381;
  double t3382;
  double t3383;
  double t3387;
  double t3388;
  double t3390;
  double t3394;
  double t3395;
  double t3396;
  double t3398;
  double t3399;
  double t3401;
  double t3448;
  double t3483;
  double t3459;
  double t3461;
  double t3464;
  double t3469;
  double t3498;
  double t3499;
  double t3501;
  double t3502;
  double t3473;
  double t3520;
  double t3521;
  double t3524;
  double t3525;
  double t3452;
  double t3549;
  double t3507;
  double t3143;
  double t3165;
  double t3201;
  double t3209;
  double t3215;
  double t3239;
  double t3240;
  double t3242;
  double t3243;
  double t3244;
  double t3245;
  double t3246;
  double t3249;
  double t3252;
  double t3254;
  double t3255;
  double t3258;
  double t3259;
  double t3261;
  double t3265;
  double t3612;
  double t3630;
  double t3638;
  double t3663;
  double t3664;
  double t3666;
  double t3605;
  double t3690;
  double t3657;
  double t3668;
  double t3670;
  double t3672;
  double t3673;
  double t3678;
  double t3679;
  double t3681;
  double t3685;
  double t3687;
  double t3692;
  double t3696;
  double t3697;
  double t3703;
  double t3704;
  double t3707;
  double t3711;
  double t3712;
  double t3713;
  double t3745;
  double t3764;
  double t3768;
  double t3769;
  double t3772;
  double t3788;
  double t3790;
  double t3791;
  double t3792;
  double t3751;
  double t3812;
  double t3813;
  double t3815;
  double t3816;
  double t3819;
  double t3775;
  double t3800;
  double t3795;
  double t569;
  double t1059;
  double t1143;
  double t1258;
  double t1360;
  double t1383;
  double t1440;
  double t3856;
  double t1470;
  double t1510;
  double t1628;
  double t1669;
  double t1741;
  double t1784;
  double t1800;
  double t3861;
  double t3862;
  double t3863;
  double t3864;
  double t3870;
  double t3871;
  double t3872;
  double t3876;
  double t3877;
  double t3878;
  double t3887;
  double t3888;
  double t3889;
  double t3881;
  double t3883;
  double t3885;
  double t3892;
  double t3894;
  double t3895;
  double t3899;
  double t3901;
  double t3902;
  double t3904;
  double t3906;
  double t3907;
  double t3912;
  double t3913;
  double t3916;
  double t3917;
  double t3918;
  double t3921;
  double t3926;
  double t3927;
  double t3928;
  double t3934;
  double t3940;
  double t3941;
  double t3943;
  double t3944;
  double t3948;
  double t3950;
  double t3953;
  double t3954;
  double t4015;
  double t4016;
  double t4018;
  double t4026;
  double t4027;
  double t4029;
  double t4021;
  double t4022;
  double t4023;
  double t4031;
  double t4032;
  double t4035;
  double t4037;
  double t4038;
  double t4039;
  double t4040;
  double t4042;
  double t4043;
  double t4045;
  double t4046;
  double t4048;
  double t4049;
  double t4050;
  double t4051;
  double t4053;
  double t4055;
  double t4057;
  double t4060;
  double t4065;
  double t4067;
  double t4068;
  double t4069;
  double t4072;
  double t4074;
  double t4077;
  double t4079;
  double t4143;
  double t4145;
  double t4147;
  double t4161;
  double t4163;
  double t4166;
  double t4170;
  double t4171;
  double t4174;
  double t4180;
  double t4183;
  double t4184;
  double t4176;
  double t4177;
  double t4178;
  double t4186;
  double t4187;
  double t4190;
  double t4195;
  double t4198;
  double t4199;
  double t4201;
  double t4205;
  double t4207;
  double t4210;
  double t4211;
  double t4212;
  double t4217;
  double t4218;
  double t4219;
  double t4221;
  double t4222;
  double t4223;
  double t4228;
  double t4230;
  double t4231;
  double t3274;
  double t3277;
  double t3280;
  double t4285;
  double t4286;
  double t4289;
  double t4294;
  double t4296;
  double t4298;
  double t4304;
  double t4307;
  double t4308;
  double t4313;
  double t4317;
  double t4319;
  double t4321;
  double t4323;
  double t4324;
  double t4326;
  double t3289;
  double t3291;
  double t3298;
  double t3299;
  double t3300;
  double t3301;
  double t3304;
  double t3305;
  double t3314;
  double t3315;
  double t3324;
  double t3325;
  double t3330;
  double t3334;
  double t3342;
  double t3343;
  double t3345;
  double t3349;
  double t4359;
  double t4360;
  double t4361;
  double t4365;
  double t4366;
  double t4368;
  double t4371;
  double t4377;
  double t4378;
  double t4379;
  double t4380;
  double t4384;
  double t4385;
  double t4386;
  double t4387;
  double t3450;
  double t3451;
  double t3454;
  double t3455;
  double t3456;
  double t3458;
  double t3474;
  double t3477;
  double t3485;
  double t3488;
  double t3491;
  double t3494;
  double t3505;
  double t3506;
  double t3508;
  double t3510;
  double t3511;
  double t3518;
  double t3530;
  double t4423;
  double t4425;
  double t4426;
  double t4429;
  double t4438;
  double t4440;
  double t4442;
  double t4444;
  double t3533;
  double t4447;
  double t4448;
  double t4451;
  double t4452;
  double t3544;
  double t3552;
  double t3562;
  double t3578;
  double t3588;
  double t3589;
  double t3592;
  double t3595;
  double t4486;
  double t4487;
  double t4490;
  double t4491;
  double t4495;
  double t4496;
  double t4497;
  double t4499;
  double t4501;
  double t4503;
  double t4506;
  double t4510;
  double t4511;
  double t3609;
  double t3610;
  double t3613;
  double t3620;
  double t3626;
  double t3627;
  double t3631;
  double t3634;
  double t3642;
  double t3643;
  double t3649;
  double t3650;
  double t3654;
  double t3655;
  double t3658;
  double t3659;
  double t3660;
  double t3662;
  double t4539;
  double t4540;
  double t4542;
  double t4545;
  double t4546;
  double t4548;
  double t4549;
  double t4551;
  double t4552;
  double t4554;
  double t4556;
  double t4563;
  double t4564;
  double t4565;
  double t4566;
  double t3747;
  double t3748;
  double t3754;
  double t3755;
  double t3757;
  double t3759;
  double t3776;
  double t3778;
  double t3779;
  double t3783;
  double t3784;
  double t3787;
  double t3796;
  double t3798;
  double t3804;
  double t3806;
  double t3809;
  double t3810;
  double t4602;
  double t4604;
  double t4606;
  double t4607;
  double t3820;
  double t4609;
  double t4612;
  double t4613;
  double t4614;
  double t3822;
  double t4619;
  double t4620;
  double t4621;
  double t4628;
  double t3828;
  double t3832;
  double t3837;
  double t3841;
  t651 = Cos(var1[13]);
  t655 = -1.*t651;
  t744 = 1. + t655;
  t1128 = Sin(var1[13]);
  t125 = Cos(var1[4]);
  t1474 = Cos(var1[16]);
  t1483 = -1.*t1474;
  t1502 = 1. + t1483;
  t1551 = Sin(var1[16]);
  t1812 = Cos(var1[5]);
  t1851 = Sin(var1[4]);
  t1813 = Cos(var1[12]);
  t1815 = -1.*t1813;
  t1824 = 1. + t1815;
  t1843 = Sin(var1[12]);
  t1844 = 0.15121*t1843;
  t1859 = Cos(var1[15]);
  t1865 = -1.*t1859;
  t1874 = 1. + t1865;
  t1877 = -0.15121*t1874;
  t1900 = Sin(var1[15]);
  t1926 = Sin(var1[5]);
  t1081 = 4.e-6*t744;
  t1700 = -1. + t1474;
  t1707 = 4.e-6*t1700;
  t1356 = -2.8e-11*t744;
  t1947 = 7.e-6*t744;
  t2026 = 7.e-6*t1502;
  t1514 = 2.8e-11*t1502;
  t2328 = Cos(var1[14]);
  t2341 = -1.*t2328;
  t2353 = 1. + t2341;
  t2369 = Sin(var1[14]);
  t2168 = -1.*t1128;
  t2180 = -4.e-6*t1128;
  t1987 = t1812*t1843*t1851;
  t1993 = t1813*t1851*t1926;
  t2000 = t1987 + t1993;
  t2193 = -1.*t1813*t1812*t1851;
  t2198 = t1843*t1851*t1926;
  t2199 = t2193 + t2198;
  t2397 = 7.e-6*t2353;
  t1940 = -7.e-6*t1128;
  t2464 = -7.e-6*t744;
  t1949 = 4.e-6*t1128;
  t2514 = 4.e-6*t2353;
  t2367 = -2.8e-11*t2353;
  t2565 = -1. + t651;
  t2572 = 4.e-6*t2565;
  t1137 = 7.e-6*t1128;
  t2446 = 2.8e-11*t744;
  t2739 = Cos(var1[17]);
  t2741 = -1.*t2739;
  t2742 = 1. + t2741;
  t2751 = Sin(var1[17]);
  t2218 = -4.e-6*t1551;
  t2072 = t1812*t1900*t1851;
  t2073 = t1859*t1851*t1926;
  t2099 = t2072 + t2073;
  t2261 = -1.*t1859*t1812*t1851;
  t2292 = t1900*t1851*t1926;
  t2303 = t2261 + t2292;
  t2767 = 2.8e-11*t2742;
  t1717 = -7.e-6*t1551;
  t2790 = -2.8e-11*t1502;
  t1609 = -1.*t1551;
  t2748 = 7.e-6*t2742;
  t2860 = -1. + t2739;
  t2863 = 4.e-6*t2860;
  t2900 = 4.e-6*t1502;
  t2051 = 7.e-6*t1551;
  t2798 = -7.e-6*t1502;
  t2039 = 4.e-6*t1551;
  t2457 = t2446 + t2168;
  t2463 = t125*t2457;
  t2469 = t2464 + t2180;
  t2471 = t2469*t2000;
  t2472 = -1.000000000016*t744;
  t2473 = 1. + t2472;
  t2475 = t2473*t2199;
  t2482 = t2463 + t2471 + t2475;
  t2644 = 7.e-6*t2369;
  t2576 = t2572 + t1940;
  t2585 = t125*t2576;
  t2587 = -6.5e-11*t744;
  t2588 = 1. + t2587;
  t2594 = t2588*t2000;
  t2602 = t2464 + t1949;
  t2613 = t2602*t2199;
  t2619 = t2585 + t2594 + t2613;
  t2681 = -1.000000000049*t744;
  t2682 = 1. + t2681;
  t2686 = t2682*t125;
  t2690 = t2572 + t1137;
  t2709 = t2690*t2000;
  t2714 = t2446 + t1128;
  t2725 = t2714*t2199;
  t2727 = t2686 + t2709 + t2725;
  t2410 = -4.e-6*t2369;
  t2970 = 2.8e-11*t2353;
  t2370 = -1.*t2369;
  t3006 = -7.e-6*t2353;
  t2535 = 4.e-6*t2369;
  t2980 = -1. + t2328;
  t2985 = 4.e-6*t2980;
  t2516 = -7.e-6*t2369;
  t2927 = 4.e-6*t2751;
  t2792 = t2790 + t1551;
  t2793 = t125*t2792;
  t2800 = t2798 + t2218;
  t2802 = t2800*t2099;
  t2807 = -1.000000000016*t1502;
  t2812 = 1. + t2807;
  t2813 = t2812*t2303;
  t2816 = t2793 + t2802 + t2813;
  t2931 = 7.e-6*t2751;
  t2886 = -1.000000000049*t1502;
  t2889 = 1. + t2886;
  t2894 = t2889*t125;
  t2901 = t2900 + t1717;
  t2902 = t2901*t2099;
  t2904 = t2790 + t1609;
  t2905 = t2904*t2303;
  t2917 = t2894 + t2902 + t2905;
  t2946 = t2900 + t2051;
  t2947 = t125*t2946;
  t2948 = -6.5e-11*t1502;
  t2949 = 1. + t2948;
  t2954 = t2949*t2099;
  t2958 = t2798 + t2039;
  t2959 = t2958*t2303;
  t2964 = t2947 + t2954 + t2959;
  t2834 = -1.*t2751;
  t3053 = 4.e-6*t2742;
  t2866 = -7.e-6*t2751;
  t3069 = -2.8e-11*t2742;
  t3047 = -7.e-6*t2742;
  t2754 = -4.e-6*t2751;
  t1921 = 0.15121*t1824;
  t1923 = t1921 + t1844;
  t1930 = 0.15121*t1900;
  t1933 = t1877 + t1930;
  t1826 = -0.15121*t1824;
  t1850 = t1826 + t1844;
  t1905 = -0.15121*t1900;
  t1910 = t1877 + t1905;
  t2129 = 1.0248489999999998e-12*var1[13];
  t2157 = -0.28120900000849935*t744;
  t2171 = t1356 + t2168;
  t2179 = -0.038748999993*t2171;
  t2181 = t1947 + t2180;
  t2185 = -2.123459e-6*t2181;
  t2191 = t2129 + t2157 + t2179 + t2185;
  t2207 = -2.7726089999999997e-12*var1[16];
  t2212 = -0.2812110000084994*t1502;
  t2221 = t2026 + t2218;
  t2228 = -1.8134809999999998e-6*t2221;
  t2230 = t1514 + t1551;
  t2245 = -0.038749000006999997*t2230;
  t2260 = t2207 + t2212 + t2228 + t2245;
  t1935 = -1.4640699999999997e-7*var1[13];
  t1939 = -1.38024835e-16*t744;
  t1941 = t1081 + t1940;
  t1943 = -0.038748999993*t1941;
  t1963 = t1947 + t1949;
  t1965 = -0.281209000004*t1963;
  t1972 = t1935 + t1939 + t1943 + t1965;
  t2013 = 3.9608699999999997e-7*var1[16];
  t2023 = -1.1787626499999999e-16*t1502;
  t2042 = t2026 + t2039;
  t2045 = -0.281211000004*t2042;
  t2060 = t1707 + t2051;
  t2062 = -0.038749000006999997*t2060;
  t2065 = t2013 + t2023 + t2045 + t2062;
  t2498 = -2.598649999999999e-7*var1[14];
  t2513 = -2.3905277499999995e-16*t2353;
  t2522 = t2514 + t2516;
  t2531 = -0.038922999986*t2522;
  t2540 = t2397 + t2535;
  t2549 = -0.503149000008*t2540;
  t2557 = t2498 + t2513 + t2531 + t2549;
  t3118 = -1.*t125*t1812*t1843;
  t3121 = -1.*t1813*t125*t1926;
  t3129 = t3118 + t3121;
  t3145 = -1.*t1813*t125*t1812;
  t3146 = t125*t1843*t1926;
  t3148 = t3145 + t3146;
  t2317 = 1.8190549999999993e-12*var1[14];
  t2358 = -0.5031490000160505*t2353;
  t2379 = t2367 + t2370;
  t2381 = -0.038922999986*t2379;
  t2431 = t2397 + t2410;
  t2439 = -3.6777349999999994e-6*t2431;
  t2440 = t2317 + t2358 + t2381 + t2439;
  t2627 = 1.0394599999999997e-12*var1[14];
  t2635 = -0.03892299998790722*t2353;
  t2648 = t2514 + t2644;
  t2653 = -3.6777349999999994e-6*t2648;
  t2659 = t2367 + t2369;
  t2664 = -0.503149000008*t2659;
  t2677 = t2627 + t2635 + t2653 + t2664;
  t2924 = 2.826290000000002e-7*var1[17];
  t2926 = -2.18904205e-16*t2742;
  t2929 = t2748 + t2927;
  t2930 = -0.5031510000080001*t2929;
  t2933 = t2863 + t2931;
  t2934 = -0.038575000014*t2933;
  t2939 = t2924 + t2926 + t2930 + t2934;
  t3139 = -1.*t125*t1812*t1900;
  t3141 = -1.*t1859*t125*t1926;
  t3142 = t3139 + t3141;
  t3155 = -1.*t1859*t125*t1812;
  t3160 = t125*t1900*t1926;
  t3162 = t3155 + t3160;
  t2826 = 1.1305160000000008e-12*var1[17];
  t2831 = -0.03857500001589017*t2742;
  t2835 = t2767 + t2834;
  t2851 = -0.5031510000080001*t2835;
  t2871 = t2863 + t2866;
  t2874 = -3.367757e-6*t2871;
  t2880 = t2826 + t2831 + t2851 + t2874;
  t2734 = -1.9784030000000015e-12*var1[17];
  t2746 = -0.5031510000160505*t2742;
  t2757 = t2748 + t2754;
  t2764 = -3.367757e-6*t2757;
  t2779 = t2767 + t2751;
  t2784 = -0.038575000014*t2779;
  t2786 = t2734 + t2746 + t2764 + t2784;
  t2988 = t2985 + t2644;
  t3169 = t2602*t3129;
  t3171 = t2588*t3148;
  t3172 = t3169 + t3171;
  t2973 = t2970 + t2369;
  t3179 = t2473*t3129;
  t3180 = t2469*t3148;
  t3181 = t3179 + t3180;
  t2993 = -1.000000000049*t2353;
  t2994 = 1. + t2993;
  t3185 = t2714*t3129;
  t3187 = t2690*t3148;
  t3189 = t3185 + t3187;
  t3009 = t3006 + t2410;
  t3000 = -1.000000000016*t2353;
  t3002 = 1. + t3000;
  t3014 = t2970 + t2370;
  t3026 = -6.5e-11*t2353;
  t3029 = 1. + t3026;
  t3023 = t3006 + t2535;
  t3033 = t2985 + t2516;
  t3104 = t3047 + t2754;
  t3195 = t2958*t3142;
  t3196 = t2949*t3162;
  t3200 = t3195 + t3196;
  t3095 = t3069 + t2751;
  t3205 = t2904*t3142;
  t3206 = t2901*t3162;
  t3207 = t3205 + t3206;
  t3087 = -1.000000000016*t2742;
  t3090 = 1. + t3087;
  t3210 = t2812*t3142;
  t3211 = t2800*t3162;
  t3212 = t3210 + t3211;
  t3081 = t3053 + t2866;
  t3077 = -1.000000000049*t2742;
  t3079 = 1. + t3077;
  t3071 = t3069 + t2834;
  t3058 = -6.5e-11*t2742;
  t3059 = 1. + t3058;
  t3055 = t3053 + t2931;
  t3049 = t3047 + t2927;
  t3273 = 0.15121*t1813;
  t3136 = t2191*t3129;
  t3154 = t1972*t3148;
  t3175 = t2557*t3172;
  t3182 = t2440*t3181;
  t3194 = t2677*t3189;
  t3216 = t2988*t3172;
  t3217 = t2973*t3181;
  t3218 = t2994*t3189;
  t3219 = t3216 + t3217 + t3218;
  t3220 = -0.038924*t3219;
  t3222 = t3009*t3172;
  t3224 = t3002*t3181;
  t3225 = t3014*t3189;
  t3226 = t3222 + t3224 + t3225;
  t3228 = -0.80315*t3226;
  t3233 = t3029*t3172;
  t3235 = t3023*t3181;
  t3236 = t3033*t3189;
  t3237 = t3233 + t3235 + t3236;
  t3238 = 0.148705*t3237;
  t3288 = -2.8e-11*t1128;
  t3303 = -7.e-6*t651;
  t3307 = 4.e-6*t651;
  t3354 = t1813*t125*t1812;
  t3357 = -1.*t125*t1843*t1926;
  t3361 = t3354 + t3357;
  t3292 = 7.e-6*t651;
  t3384 = 2.8e-11*t1128;
  t3337 = -4.e-6*t651;
  t3364 = t3303 + t2180;
  t3365 = t3364*t1851;
  t3366 = -6.5e-11*t1128*t3129;
  t3371 = t3307 + t1940;
  t3372 = t3371*t3361;
  t3376 = t3365 + t3366 + t3372;
  t3381 = -1.000000000049*t1128*t1851;
  t3382 = t3292 + t2180;
  t3383 = t3382*t3129;
  t3387 = t651 + t3384;
  t3388 = t3387*t3361;
  t3390 = t3381 + t3383 + t3388;
  t3394 = t655 + t3384;
  t3395 = t3394*t1851;
  t3396 = t3337 + t1940;
  t3398 = t3396*t3129;
  t3399 = -1.000000000016*t1128*t3361;
  t3401 = t3395 + t3398 + t3399;
  t3448 = -2.8e-11*t2369;
  t3483 = 4.e-6*t2328;
  t3459 = t2457*t1851;
  t3461 = t2469*t3129;
  t3464 = t2473*t3361;
  t3469 = t3459 + t3461 + t3464;
  t3498 = t2576*t1851;
  t3499 = t2588*t3129;
  t3501 = t2602*t3361;
  t3502 = t3498 + t3499 + t3501;
  t3473 = -7.e-6*t2328;
  t3520 = t2682*t1851;
  t3521 = t2690*t3129;
  t3524 = t2714*t3361;
  t3525 = t3520 + t3521 + t3524;
  t3452 = -4.e-6*t2328;
  t3549 = 2.8e-11*t2369;
  t3507 = 7.e-6*t2328;
  t3143 = -1.*t2260*t3142;
  t3165 = -1.*t2065*t3162;
  t3201 = -1.*t2939*t3200;
  t3209 = -1.*t2880*t3207;
  t3215 = -1.*t2786*t3212;
  t3239 = t3104*t3200;
  t3240 = t3095*t3207;
  t3242 = t3090*t3212;
  t3243 = t3239 + t3240 + t3242;
  t3244 = 0.80315*t3243;
  t3245 = t3081*t3200;
  t3246 = t3079*t3207;
  t3249 = t3071*t3212;
  t3252 = t3245 + t3246 + t3249;
  t3254 = 0.038576*t3252;
  t3255 = t3059*t3200;
  t3258 = t3055*t3207;
  t3259 = t3049*t3212;
  t3261 = t3255 + t3258 + t3259;
  t3265 = 0.148715*t3261;
  t3612 = 2.8e-11*t1551;
  t3630 = 7.e-6*t1474;
  t3638 = 4.e-6*t1474;
  t3663 = t1859*t125*t1812;
  t3664 = -1.*t125*t1900*t1926;
  t3666 = t3663 + t3664;
  t3605 = -7.e-6*t1474;
  t3690 = -2.8e-11*t1551;
  t3657 = -4.e-6*t1474;
  t3668 = t3630 + t2039;
  t3670 = t3668*t1851;
  t3672 = -6.5e-11*t1551*t3142;
  t3673 = t3638 + t1717;
  t3678 = t3673*t3666;
  t3679 = t3670 + t3672 + t3678;
  t3681 = -1.000000000049*t1551*t1851;
  t3685 = t3605 + t2039;
  t3687 = t3685*t3142;
  t3692 = t1483 + t3690;
  t3696 = t3692*t3666;
  t3697 = t3681 + t3687 + t3696;
  t3703 = t1474 + t3690;
  t3704 = t3703*t1851;
  t3707 = t3657 + t1717;
  t3711 = t3707*t3142;
  t3712 = -1.000000000016*t1551*t3666;
  t3713 = t3704 + t3711 + t3712;
  t3745 = 2.8e-11*t2751;
  t3764 = t2792*t1851;
  t3768 = t2800*t3142;
  t3769 = t2812*t3666;
  t3772 = t3764 + t3768 + t3769;
  t3788 = t2889*t1851;
  t3790 = t2901*t3142;
  t3791 = t2904*t3666;
  t3792 = t3788 + t3790 + t3791;
  t3751 = -4.e-6*t2739;
  t3812 = t2946*t1851;
  t3813 = t2949*t3142;
  t3815 = t2958*t3666;
  t3816 = t3812 + t3813 + t3815;
  t3819 = -2.8e-11*t2751;
  t3775 = -7.e-6*t2739;
  t3800 = 4.e-6*t2739;
  t3795 = 7.e-6*t2739;
  t569 = 5.856279999999999e-13*var1[13];
  t1059 = -0.0387489999948987*t744;
  t1143 = t1081 + t1137;
  t1258 = -2.123459e-6*t1143;
  t1360 = t1356 + t1128;
  t1383 = -0.281209000004*t1360;
  t1440 = t569 + t1059 + t1258 + t1383;
  t3856 = Cos(var1[3]);
  t1470 = 1.5843479999999999e-12*var1[16];
  t1510 = -0.03874900000889869*t1502;
  t1628 = t1514 + t1609;
  t1669 = -0.281211000004*t1628;
  t1741 = t1707 + t1717;
  t1784 = -1.8134809999999998e-6*t1741;
  t1800 = t1470 + t1510 + t1669 + t1784;
  t3861 = t3856*t1812*t1851;
  t3862 = Sin(var1[3]);
  t3863 = -1.*t3862*t1926;
  t3864 = t3861 + t3863;
  t3870 = -1.*t1812*t3862;
  t3871 = -1.*t3856*t1851*t1926;
  t3872 = t3870 + t3871;
  t3876 = -1.*t1843*t3864;
  t3877 = t1813*t3872;
  t3878 = t3876 + t3877;
  t3887 = t1813*t3864;
  t3888 = t1843*t3872;
  t3889 = t3887 + t3888;
  t3881 = -1.*t1900*t3864;
  t3883 = t1859*t3872;
  t3885 = t3881 + t3883;
  t3892 = t1859*t3864;
  t3894 = t1900*t3872;
  t3895 = t3892 + t3894;
  t3899 = -1.*t3856*t125*t2457;
  t3901 = t2469*t3878;
  t3902 = t2473*t3889;
  t3904 = t3899 + t3901 + t3902;
  t3906 = -1.*t3856*t125*t2576;
  t3907 = t2588*t3878;
  t3912 = t2602*t3889;
  t3913 = t3906 + t3907 + t3912;
  t3916 = -1.*t2682*t3856*t125;
  t3917 = t2690*t3878;
  t3918 = t2714*t3889;
  t3921 = t3916 + t3917 + t3918;
  t3926 = -1.*t3856*t125*t2792;
  t3927 = t2800*t3885;
  t3928 = t2812*t3895;
  t3934 = t3926 + t3927 + t3928;
  t3940 = -1.*t2889*t3856*t125;
  t3941 = t2901*t3885;
  t3943 = t2904*t3895;
  t3944 = t3940 + t3941 + t3943;
  t3948 = -1.*t3856*t125*t2946;
  t3950 = t2949*t3885;
  t3953 = t2958*t3895;
  t3954 = t3948 + t3950 + t3953;
  t4015 = -1.*t125*t1812*t1843*t3862;
  t4016 = -1.*t1813*t125*t3862*t1926;
  t4018 = t4015 + t4016;
  t4026 = t1813*t125*t1812*t3862;
  t4027 = -1.*t125*t1843*t3862*t1926;
  t4029 = t4026 + t4027;
  t4021 = -1.*t125*t1812*t1900*t3862;
  t4022 = -1.*t1859*t125*t3862*t1926;
  t4023 = t4021 + t4022;
  t4031 = t1859*t125*t1812*t3862;
  t4032 = -1.*t125*t1900*t3862*t1926;
  t4035 = t4031 + t4032;
  t4037 = t2457*t3862*t1851;
  t4038 = t2469*t4018;
  t4039 = t2473*t4029;
  t4040 = t4037 + t4038 + t4039;
  t4042 = t2576*t3862*t1851;
  t4043 = t2588*t4018;
  t4045 = t2602*t4029;
  t4046 = t4042 + t4043 + t4045;
  t4048 = t2682*t3862*t1851;
  t4049 = t2690*t4018;
  t4050 = t2714*t4029;
  t4051 = t4048 + t4049 + t4050;
  t4053 = t2792*t3862*t1851;
  t4055 = t2800*t4023;
  t4057 = t2812*t4035;
  t4060 = t4053 + t4055 + t4057;
  t4065 = t2889*t3862*t1851;
  t4067 = t2901*t4023;
  t4068 = t2904*t4035;
  t4069 = t4065 + t4067 + t4068;
  t4072 = t2946*t3862*t1851;
  t4074 = t2949*t4023;
  t4077 = t2958*t4035;
  t4079 = t4072 + t4074 + t4077;
  t4143 = -1.*t1812*t3862*t1851;
  t4145 = -1.*t3856*t1926;
  t4147 = t4143 + t4145;
  t4161 = t3856*t1812;
  t4163 = -1.*t3862*t1851*t1926;
  t4166 = t4161 + t4163;
  t4170 = t1843*t4147;
  t4171 = t1813*t4166;
  t4174 = t4170 + t4171;
  t4180 = t1813*t4147;
  t4183 = -1.*t1843*t4166;
  t4184 = t4180 + t4183;
  t4176 = t1900*t4147;
  t4177 = t1859*t4166;
  t4178 = t4176 + t4177;
  t4186 = t1859*t4147;
  t4187 = -1.*t1900*t4166;
  t4190 = t4186 + t4187;
  t4195 = t2602*t4174;
  t4198 = t2588*t4184;
  t4199 = t4195 + t4198;
  t4201 = t2473*t4174;
  t4205 = t2469*t4184;
  t4207 = t4201 + t4205;
  t4210 = t2714*t4174;
  t4211 = t2690*t4184;
  t4212 = t4210 + t4211;
  t4217 = t2958*t4178;
  t4218 = t2949*t4190;
  t4219 = t4217 + t4218;
  t4221 = t2904*t4178;
  t4222 = t2901*t4190;
  t4223 = t4221 + t4222;
  t4228 = t2812*t4178;
  t4230 = t2800*t4190;
  t4231 = t4228 + t4230;
  t3274 = -0.15121*t1843;
  t3277 = t3273 + t3274;
  t3280 = t3273 + t1844;
  t4285 = t1812*t3862*t1851;
  t4286 = t3856*t1926;
  t4289 = t4285 + t4286;
  t4294 = -1.*t1843*t4289;
  t4296 = t4294 + t4171;
  t4298 = -1.*t1813*t4289;
  t4304 = t4298 + t4183;
  t4307 = t2602*t4296;
  t4308 = t2588*t4304;
  t4313 = t4307 + t4308;
  t4317 = t2473*t4296;
  t4319 = t2469*t4304;
  t4321 = t4317 + t4319;
  t4323 = t2714*t4296;
  t4324 = t2690*t4304;
  t4326 = t4323 + t4324;
  t3289 = t651 + t3288;
  t3291 = -0.281209000004*t3289;
  t3298 = t3292 + t1949;
  t3299 = -2.123459e-6*t3298;
  t3300 = -0.0387489999948987*t1128;
  t3301 = 5.856279999999999e-13 + t3291 + t3299 + t3300;
  t3304 = t3303 + t1949;
  t3305 = -0.038748999993*t3304;
  t3314 = t3307 + t1137;
  t3315 = -0.281209000004*t3314;
  t3324 = -1.38024835e-16*t1128;
  t3325 = -1.4640699999999997e-7 + t3305 + t3315 + t3324;
  t3330 = t655 + t3288;
  t3334 = -0.038748999993*t3330;
  t3342 = t3337 + t1137;
  t3343 = -2.123459e-6*t3342;
  t3345 = -0.28120900000849935*t1128;
  t3349 = 1.0248489999999998e-12 + t3334 + t3343 + t3345;
  t4359 = t1813*t4289;
  t4360 = t1843*t4166;
  t4361 = t4359 + t4360;
  t4365 = -1.*t125*t3364*t3862;
  t4366 = -6.5e-11*t1128*t4296;
  t4368 = t3371*t4361;
  t4371 = t4365 + t4366 + t4368;
  t4377 = 1.000000000049*t125*t1128*t3862;
  t4378 = t3382*t4296;
  t4379 = t3387*t4361;
  t4380 = t4377 + t4378 + t4379;
  t4384 = -1.*t125*t3394*t3862;
  t4385 = t3396*t4296;
  t4386 = -1.000000000016*t1128*t4361;
  t4387 = t4384 + t4385 + t4386;
  t3450 = t2341 + t3448;
  t3451 = -0.038922999986*t3450;
  t3454 = t3452 + t2644;
  t3455 = -3.6777349999999994e-6*t3454;
  t3456 = -0.5031490000160505*t2369;
  t3458 = 1.8190549999999993e-12 + t3451 + t3455 + t3456;
  t3474 = t3473 + t2535;
  t3477 = -0.038922999986*t3474;
  t3485 = t3483 + t2644;
  t3488 = -0.503149000008*t3485;
  t3491 = -2.3905277499999995e-16*t2369;
  t3494 = -2.598649999999999e-7 + t3477 + t3488 + t3491;
  t3505 = t2328 + t3448;
  t3506 = -0.503149000008*t3505;
  t3508 = t3507 + t2535;
  t3510 = -3.6777349999999994e-6*t3508;
  t3511 = -0.03892299998790722*t2369;
  t3518 = 1.0394599999999997e-12 + t3506 + t3510 + t3511;
  t3530 = t3483 + t2516;
  t4423 = -1.*t125*t2457*t3862;
  t4425 = t2469*t4296;
  t4426 = t2473*t4361;
  t4429 = t4423 + t4425 + t4426;
  t4438 = -1.*t125*t2576*t3862;
  t4440 = t2588*t4296;
  t4442 = t2602*t4361;
  t4444 = t4438 + t4440 + t4442;
  t3533 = t3473 + t2410;
  t4447 = -1.*t2682*t125*t3862;
  t4448 = t2690*t4296;
  t4451 = t2714*t4361;
  t4452 = t4447 + t4448 + t4451;
  t3544 = t3452 + t2516;
  t3552 = t2341 + t3549;
  t3562 = t2328 + t3549;
  t3578 = t3507 + t2410;
  t3588 = -0.15121*t1859;
  t3589 = t3588 + t1905;
  t3592 = 0.15121*t1859;
  t3595 = t3592 + t1905;
  t4486 = -1.*t1900*t4289;
  t4487 = t4486 + t4177;
  t4490 = -1.*t1859*t4289;
  t4491 = t4490 + t4187;
  t4495 = t2958*t4487;
  t4496 = t2949*t4491;
  t4497 = t4495 + t4496;
  t4499 = t2904*t4487;
  t4501 = t2901*t4491;
  t4503 = t4499 + t4501;
  t4506 = t2812*t4487;
  t4510 = t2800*t4491;
  t4511 = t4506 + t4510;
  t3609 = t3605 + t2218;
  t3610 = -1.8134809999999998e-6*t3609;
  t3613 = t1483 + t3612;
  t3620 = -0.281211000004*t3613;
  t3626 = -0.03874900000889869*t1551;
  t3627 = 1.5843479999999999e-12 + t3610 + t3620 + t3626;
  t3631 = t3630 + t2218;
  t3634 = -0.038749000006999997*t3631;
  t3642 = t3638 + t2051;
  t3643 = -0.281211000004*t3642;
  t3649 = -1.1787626499999999e-16*t1551;
  t3650 = 3.9608699999999997e-7 + t3634 + t3643 + t3649;
  t3654 = t1474 + t3612;
  t3655 = -0.038749000006999997*t3654;
  t3658 = t3657 + t2051;
  t3659 = -1.8134809999999998e-6*t3658;
  t3660 = -0.2812110000084994*t1551;
  t3662 = -2.7726089999999997e-12 + t3655 + t3659 + t3660;
  t4539 = t1859*t4289;
  t4540 = t1900*t4166;
  t4542 = t4539 + t4540;
  t4545 = -1.*t125*t3668*t3862;
  t4546 = -6.5e-11*t1551*t4487;
  t4548 = t3673*t4542;
  t4549 = t4545 + t4546 + t4548;
  t4551 = 1.000000000049*t125*t1551*t3862;
  t4552 = t3685*t4487;
  t4554 = t3692*t4542;
  t4556 = t4551 + t4552 + t4554;
  t4563 = -1.*t125*t3703*t3862;
  t4564 = t3707*t4487;
  t4565 = -1.000000000016*t1551*t4542;
  t4566 = t4563 + t4564 + t4565;
  t3747 = t2739 + t3745;
  t3748 = -0.038575000014*t3747;
  t3754 = t3751 + t2931;
  t3755 = -3.367757e-6*t3754;
  t3757 = -0.5031510000160505*t2751;
  t3759 = -1.9784030000000015e-12 + t3748 + t3755 + t3757;
  t3776 = t3775 + t2754;
  t3778 = -3.367757e-6*t3776;
  t3779 = t2741 + t3745;
  t3783 = -0.5031510000080001*t3779;
  t3784 = -0.03857500001589017*t2751;
  t3787 = 1.1305160000000008e-12 + t3778 + t3783 + t3784;
  t3796 = t3795 + t2754;
  t3798 = -0.038575000014*t3796;
  t3804 = t3800 + t2931;
  t3806 = -0.5031510000080001*t3804;
  t3809 = -2.18904205e-16*t2751;
  t3810 = 2.826290000000002e-7 + t3798 + t3806 + t3809;
  t4602 = -1.*t125*t2792*t3862;
  t4604 = t2800*t4487;
  t4606 = t2812*t4542;
  t4607 = t4602 + t4604 + t4606;
  t3820 = t2739 + t3819;
  t4609 = -1.*t2889*t125*t3862;
  t4612 = t2901*t4487;
  t4613 = t2904*t4542;
  t4614 = t4609 + t4612 + t4613;
  t3822 = t3751 + t2866;
  t4619 = -1.*t125*t2946*t3862;
  t4620 = t2949*t4487;
  t4621 = t2958*t4542;
  t4628 = t4619 + t4620 + t4621;
  t3828 = t2741 + t3819;
  t3832 = t3775 + t2927;
  t3837 = t3800 + t2866;
  t3841 = t3795 + t2927;
  p_output1[0]=t125*t1440 - 1.*t125*t1800 - 1.*t1812*t1850*t1851 + t1812*t1851*t1910 + t1851*t1923*t1926 - 1.*t1851*t1926*t1933 + t1972*t2000 - 1.*t2065*t2099 + t2191*t2199 - 1.*t2260*t2303 + t2440*t2482 + t2557*t2619 + t2677*t2727 - 1.*t2786*t2816 - 1.*t2880*t2917 - 1.*t2939*t2964 - 0.038924*(t2482*t2973 + t2619*t2988 + t2727*t2994) - 0.80315*(t2482*t3002 + t2619*t3009 + t2727*t3014) + 0.148705*(t2482*t3023 + t2619*t3029 + t2727*t3033) + 0.148715*(t2816*t3049 + t2917*t3055 + t2964*t3059) + 0.038576*(t2816*t3071 + t2917*t3079 + t2964*t3081) + 0.80315*(t2816*t3090 + t2917*t3095 + t2964*t3104);
  p_output1[1]=-1.*t125*t1812*t1923 - 1.*t125*t1850*t1926 + t125*t1910*t1926 + t125*t1812*t1933 + t3136 + t3143 + t3154 + t3165 + t3175 + t3182 + t3194 + t3201 + t3209 + t3215 + t3220 + t3228 + t3238 + t3244 + t3254 + t3265;
  p_output1[2]=t3136 + t3154 + t3175 + t3182 + t3194 + t3220 + t3228 + t3238 + t125*t1812*t3277 - 1.*t125*t1926*t3280;
  p_output1[3]=t1851*t3301 + t3129*t3325 + t3349*t3361 + t2557*t3376 + t2677*t3390 + t2440*t3401 - 0.038924*(t2988*t3376 + t2994*t3390 + t2973*t3401) - 0.80315*(t3009*t3376 + t3014*t3390 + t3002*t3401) + 0.148705*(t3029*t3376 + t3033*t3390 + t3023*t3401);
  p_output1[4]=t3458*t3469 + t3494*t3502 + t3518*t3525 + 0.148705*(-6.5e-11*t2369*t3502 + t3469*t3530 + t3525*t3533) - 0.80315*(-1.000000000016*t2369*t3469 + t3502*t3544 + t3525*t3552) - 0.038924*(-1.000000000049*t2369*t3525 + t3469*t3562 + t3502*t3578);
  p_output1[5]=t3143 + t3165 + t3201 + t3209 + t3215 + t3244 + t3254 + t3265 - 1.*t125*t1812*t3589 + t125*t1926*t3595;
  p_output1[6]=-1.*t1851*t3627 - 1.*t3142*t3650 - 1.*t3662*t3666 - 1.*t2939*t3679 - 1.*t2880*t3697 - 1.*t2786*t3713 + 0.148715*(t3059*t3679 + t3055*t3697 + t3049*t3713) + 0.038576*(t3081*t3679 + t3079*t3697 + t3071*t3713) + 0.80315*(t3104*t3679 + t3095*t3697 + t3090*t3713);
  p_output1[7]=-1.*t3759*t3772 - 1.*t3787*t3792 - 1.*t3810*t3816 + 0.80315*(-1.000000000016*t2751*t3772 + t3792*t3820 + t3816*t3822) + 0.038576*(-1.000000000049*t2751*t3792 + t3772*t3828 + t3816*t3832) + 0.148715*(-6.5e-11*t2751*t3816 + t3772*t3837 + t3792*t3841);
  p_output1[8]=-1.*t125*t1440*t3856 + t125*t1800*t3856 + t1850*t3864 - 1.*t1910*t3864 + t1923*t3872 - 1.*t1933*t3872 + t1972*t3878 - 1.*t2065*t3885 + t2191*t3889 - 1.*t2260*t3895 + t2440*t3904 + t2557*t3913 + t2677*t3921 - 0.038924*(t2973*t3904 + t2988*t3913 + t2994*t3921) - 0.80315*(t3002*t3904 + t3009*t3913 + t3014*t3921) + 0.148705*(t3023*t3904 + t3029*t3913 + t3033*t3921) - 1.*t2786*t3934 - 1.*t2880*t3944 - 1.*t2939*t3954 + 0.148715*(t3049*t3934 + t3055*t3944 + t3059*t3954) + 0.038576*(t3071*t3934 + t3079*t3944 + t3081*t3954) + 0.80315*(t3090*t3934 + t3095*t3944 + t3104*t3954);
  p_output1[9]=t125*t1812*t1850*t3862 + t1440*t1851*t3862 - 1.*t1800*t1851*t3862 - 1.*t125*t1812*t1910*t3862 - 1.*t125*t1923*t1926*t3862 + t125*t1926*t1933*t3862 + t1972*t4018 - 1.*t2065*t4023 + t2191*t4029 - 1.*t2260*t4035 + t2440*t4040 + t2557*t4046 + t2677*t4051 - 0.038924*(t2973*t4040 + t2988*t4046 + t2994*t4051) - 0.80315*(t3002*t4040 + t3009*t4046 + t3014*t4051) + 0.148705*(t3023*t4040 + t3029*t4046 + t3033*t4051) - 1.*t2786*t4060 - 1.*t2880*t4069 - 1.*t2939*t4079 + 0.148715*(t3049*t4060 + t3055*t4069 + t3059*t4079) + 0.038576*(t3071*t4060 + t3079*t4069 + t3081*t4079) + 0.80315*(t3090*t4060 + t3095*t4069 + t3104*t4079);
  p_output1[10]=t1923*t4147 - 1.*t1933*t4147 + t1850*t4166 - 1.*t1910*t4166 + t2191*t4174 - 1.*t2260*t4178 + t1972*t4184 - 1.*t2065*t4190 + t2557*t4199 + t2440*t4207 + t2677*t4212 - 0.038924*(t2988*t4199 + t2973*t4207 + t2994*t4212) - 0.80315*(t3009*t4199 + t3002*t4207 + t3014*t4212) + 0.148705*(t3029*t4199 + t3023*t4207 + t3033*t4212) - 1.*t2939*t4219 - 1.*t2880*t4223 - 1.*t2786*t4231 + 0.148715*(t3059*t4219 + t3055*t4223 + t3049*t4231) + 0.038576*(t3081*t4219 + t3079*t4223 + t3071*t4231) + 0.80315*(t3104*t4219 + t3095*t4223 + t3090*t4231);
  p_output1[11]=t3280*t4166 + t3277*t4289 + t2191*t4296 + t1972*t4304 + t2557*t4313 + t2440*t4321 + t2677*t4326 - 0.038924*(t2988*t4313 + t2973*t4321 + t2994*t4326) - 0.80315*(t3009*t4313 + t3002*t4321 + t3014*t4326) + 0.148705*(t3029*t4313 + t3023*t4321 + t3033*t4326);
  p_output1[12]=-1.*t125*t3301*t3862 + t3325*t4296 + t3349*t4361 + t2557*t4371 + t2677*t4380 + t2440*t4387 - 0.038924*(t2988*t4371 + t2994*t4380 + t2973*t4387) - 0.80315*(t3009*t4371 + t3014*t4380 + t3002*t4387) + 0.148705*(t3029*t4371 + t3033*t4380 + t3023*t4387);
  p_output1[13]=t3458*t4429 + t3494*t4444 + t3518*t4452 - 0.038924*(t3562*t4429 + t3578*t4444 - 1.000000000049*t2369*t4452) + 0.148705*(t3530*t4429 - 6.5e-11*t2369*t4444 + t3533*t4452) - 0.80315*(-1.000000000016*t2369*t4429 + t3544*t4444 + t3552*t4452);
  p_output1[14]=-1.*t3595*t4166 - 1.*t3589*t4289 - 1.*t2260*t4487 - 1.*t2065*t4491 - 1.*t2939*t4497 - 1.*t2880*t4503 - 1.*t2786*t4511 + 0.148715*(t3059*t4497 + t3055*t4503 + t3049*t4511) + 0.038576*(t3081*t4497 + t3079*t4503 + t3071*t4511) + 0.80315*(t3104*t4497 + t3095*t4503 + t3090*t4511);
  p_output1[15]=t125*t3627*t3862 - 1.*t3650*t4487 - 1.*t3662*t4542 - 1.*t2939*t4549 - 1.*t2880*t4556 - 1.*t2786*t4566 + 0.148715*(t3059*t4549 + t3055*t4556 + t3049*t4566) + 0.038576*(t3081*t4549 + t3079*t4556 + t3071*t4566) + 0.80315*(t3104*t4549 + t3095*t4556 + t3090*t4566);
  p_output1[16]=-1.*t3759*t4607 - 1.*t3787*t4614 - 1.*t3810*t4628 + 0.148715*(t3837*t4607 + t3841*t4614 - 6.5e-11*t2751*t4628) + 0.80315*(-1.000000000016*t2751*t4607 + t3820*t4614 + t3822*t4628) + 0.038576*(t3828*t4607 - 1.000000000049*t2751*t4614 + t3832*t4628);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 17, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "J_step_distance_ParallelStance2.hh"

namespace ParallelStance2
{

void J_step_distance_ParallelStance2_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
