/*
 * Automatically Generated from Mathematica.
 * Sat 13 Nov 2021 17:51:47 GMT+01:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t117;
  double t147;
  double t158;
  double t169;
  double t170;
  double t181;
  double t140;
  double t212;
  double t372;
  double t413;
  double t424;
  double t451;
  double t603;
  double t666;
  double t269;
  double t271;
  double t315;
  double t490;
  double t507;
  double t525;
  double t792;
  double t801;
  double t826;
  double t854;
  double t675;
  double t682;
  double t686;
  double t697;
  double t720;
  double t765;
  double t1173;
  double t1060;
  double t1069;
  double t1078;
  double t1100;
  double t884;
  double t893;
  double t895;
  double t920;
  double t959;
  double t979;
  double t1437;
  double t1446;
  double t1183;
  double t530;
  double t543;
  double t1103;
  double t1113;
  double t769;
  double t1187;
  double t827;
  double t990;
  double t1745;
  double t1746;
  double t1763;
  double t1808;
  double t1831;
  double t626;
  double t632;
  double t635;
  double t1901;
  double t1978;
  double t2003;
  double t2006;
  double t2069;
  double t2089;
  double t2107;
  double t2121;
  double t2177;
  double t2209;
  double t2211;
  double t340;
  double t426;
  double t466;
  double t2246;
  double t2336;
  double t2372;
  double t2063;
  double t2145;
  double t2214;
  double t2216;
  double t2635;
  double t2667;
  double t2705;
  double t2709;
  double t2726;
  double t2514;
  double t2520;
  double t2550;
  double t2556;
  double t2386;
  double t2437;
  double t2446;
  double t2451;
  double t2723;
  double t2746;
  double t2750;
  double t2787;
  double t1539;
  double t1556;
  double t1557;
  double t1580;
  double t1586;
  double t1637;
  double t1702;
  double t1709;
  double t1740;
  double t1760;
  double t1860;
  double t1886;
  double t2223;
  double t2457;
  double t2464;
  double t2466;
  double t2506;
  double t2597;
  double t2628;
  double t2796;
  double t2797;
  double t2847;
  double t2849;
  double t2865;
  double t2887;
  double t2976;
  double t3054;
  double t3059;
  double t3077;
  double t3090;
  double t3134;
  double t3139;
  double t3141;
  double t3151;
  double t3207;
  double t3209;
  double t3211;
  double t3249;
  double t3268;
  double t3279;
  double t3288;
  double t3196;
  double t3239;
  double t3244;
  double t3310;
  double t3319;
  double t3340;
  double t3346;
  double t3370;
  double t3372;
  double t3414;
  double t3473;
  double t3509;
  double t3546;
  double t3547;
  double t3569;
  double t3572;
  double t3621;
  double t3633;
  double t3652;
  double t3660;
  double t3668;
  double t3698;
  double t3703;
  double t3762;
  double t3764;
  double t189;
  double t230;
  double t3821;
  double t3826;
  double t3828;
  double t3953;
  double t3975;
  double t3976;
  double t3797;
  double t3804;
  double t3810;
  double t3831;
  double t3886;
  double t3930;
  double t3934;
  double t4013;
  double t4123;
  double t4158;
  double t4159;
  double t4161;
  double t4163;
  double t4169;
  double t4197;
  double t4219;
  double t4269;
  double t4350;
  double t4357;
  double t4359;
  double t4362;
  double t4392;
  double t4393;
  double t4402;
  double t4410;
  double t4422;
  double t4453;
  double t4467;
  double t4472;
  double t4498;
  double t4501;
  double t4502;
  double t4542;
  double t4564;
  double t4566;
  double t4667;
  double t4744;
  double t4746;
  double t4620;
  double t4622;
  double t4631;
  double t4767;
  double t4778;
  double t4814;
  double t4837;
  double t4844;
  double t4885;
  double t4589;
  double t4603;
  double t4607;
  double t4635;
  double t4822;
  double t4829;
  double t4887;
  double t4951;
  double t4955;
  double t4997;
  double t4998;
  double t5006;
  double t5013;
  double t5046;
  double t5047;
  double t5240;
  double t5243;
  double t5256;
  double t5261;
  double t5276;
  double t5281;
  double t5353;
  double t5355;
  double t5356;
  double t5219;
  double t5229;
  double t5231;
  double t5187;
  double t5209;
  double t5212;
  double t5238;
  double t5345;
  double t5351;
  double t5361;
  double t5372;
  double t5382;
  double t5392;
  double t5395;
  double t5403;
  double t5411;
  double t5418;
  double t5419;
  double t5438;
  double t5441;
  double t5462;
  double t5466;
  double t5472;
  double t5506;
  double t5520;
  double t5528;
  double t5599;
  double t5600;
  double t5561;
  double t5571;
  double t5574;
  double t5577;
  double t5609;
  double t5611;
  double t5612;
  double t5584;
  double t5590;
  double t5593;
  double t5746;
  double t5755;
  double t5683;
  double t5685;
  double t5798;
  double t5801;
  double t5817;
  double t5775;
  double t5782;
  double t5783;
  double t5862;
  double t5865;
  double t5866;
  double t5767;
  double t5796;
  double t5710;
  double t5713;
  double t5735;
  double t5845;
  double t5872;
  double t5943;
  double t5944;
  double t6024;
  double t6029;
  double t6047;
  double t6071;
  double t6086;
  double t6022;
  double t6050;
  double t5998;
  double t6013;
  double t6065;
  double t6111;
  double t6194;
  double t6198;
  double t6199;
  double t6275;
  double t6296;
  double t6303;
  double t6760;
  double t6778;
  double t6791;
  double t6695;
  double t6697;
  double t6711;
  double t6742;
  double t6745;
  double t6471;
  double t6475;
  double t6491;
  double t6494;
  double t6618;
  double t6632;
  double t6635;
  double t6640;
  double t6645;
  double t6661;
  double t6545;
  double t6558;
  double t6570;
  double t6579;
  double t6605;
  double t6606;
  double t6439;
  double t6442;
  double t6447;
  double t6510;
  double t6515;
  double t6517;
  double t6518;
  double t6804;
  double t6806;
  double t6832;
  double t6612;
  double t6795;
  double t6950;
  double t6963;
  double t7165;
  double t7176;
  double t7179;
  double t7133;
  double t7144;
  double t7154;
  double t6873;
  double t6890;
  double t6906;
  double t6916;
  double t6971;
  double t6980;
  double t6982;
  double t7057;
  double t7059;
  double t7063;
  double t7079;
  double t7087;
  double t7089;
  double t7044;
  double t7049;
  double t7078;
  double t7091;
  double t7092;
  double t7337;
  double t7389;
  double t7409;
  double t7421;
  double t7425;
  double t7426;
  double t7189;
  double t7190;
  double t7197;
  double t7203;
  double t7204;
  double t7205;
  double t7274;
  double t7284;
  double t7286;
  double t7293;
  double t7298;
  double t7302;
  double t7554;
  double t7589;
  double t7593;
  double t7489;
  double t7494;
  double t7501;
  double t7454;
  double t7458;
  double t7471;
  double t7621;
  double t7650;
  double t7651;
  double t7474;
  double t7596;
  double t7535;
  double t7541;
  double t7548;
  double t7667;
  double t7681;
  double t7700;
  double t7887;
  double t7898;
  double t7936;
  double t7660;
  double t7661;
  double t7763;
  double t7777;
  double t7778;
  double t7740;
  double t7742;
  double t7752;
  double t7962;
  double t7972;
  double t7976;
  double t8201;
  double t8215;
  double t8222;
  double t8235;
  double t8238;
  double t8239;
  double t8247;
  double t8251;
  double t8269;
  double t8397;
  double t8399;
  double t8400;
  double t8406;
  double t8114;
  double t8133;
  double t8156;
  double t8234;
  double t8240;
  double t8295;
  double t8313;
  double t8345;
  double t8357;
  double t8375;
  double t8383;
  double t8502;
  double t8516;
  double t8521;
  double t8537;
  double t8538;
  double t8539;
  double t8542;
  double t8559;
  double t8567;
  double t8573;
  double t8098;
  double t8100;
  double t8174;
  double t8177;
  double t8184;
  double t8388;
  double t8448;
  double t8452;
  double t8692;
  double t8694;
  double t8695;
  double t8687;
  double t8688;
  double t8689;
  double t8430;
  double t8432;
  double t8440;
  double t8441;
  double t8453;
  double t8456;
  double t8633;
  double t8642;
  double t8645;
  double t8647;
  double t8655;
  double t8656;
  double t8621;
  double t8624;
  double t8628;
  double t8646;
  double t8665;
  double t8672;
  double t8761;
  double t8764;
  double t8772;
  double t8776;
  double t8778;
  double t8779;
  double t8715;
  double t8718;
  double t8722;
  double t8730;
  double t8735;
  double t8738;
  double t8796;
  double t8798;
  double t8799;
  double t8788;
  double t8791;
  double t8794;
  double t8812;
  double t8813;
  double t8821;
  double t8795;
  double t8834;
  double t8838;
  double t8841;
  double t8832;
  double t8833;
  double t8871;
  double t8873;
  double t8874;
  double t8856;
  double t8857;
  double t8859;
  double t8882;
  double t8884;
  double t8892;
  double t193;
  double t255;
  double t8949;
  double t8950;
  double t8951;
  double t8953;
  double t8954;
  double t8956;
  double t471;
  double t552;
  double t648;
  double t8958;
  double t8959;
  double t8961;
  double t8974;
  double t8977;
  double t8981;
  double t859;
  double t864;
  double t1002;
  double t1003;
  double t1128;
  double t1132;
  double t8995;
  double t9000;
  double t9005;
  double t9013;
  double t9035;
  double t9039;
  double t9040;
  double t9048;
  double t9016;
  double t9025;
  double t9026;
  double t9029;
  double t9110;
  double t9113;
  double t9119;
  double t9121;
  double t9124;
  double t9125;
  double t9128;
  double t9131;
  double t9141;
  double t9144;
  double t9159;
  double t9160;
  double t9162;
  double t8532;
  double t9171;
  double t9173;
  double t9174;
  double t9181;
  double t9183;
  double t9185;
  double t9187;
  double t9168;
  double t9169;
  double t9179;
  double t9191;
  double t9193;
  double t9199;
  double t9207;
  double t9210;
  double t9216;
  double t9234;
  double t9236;
  double t9238;
  double t9239;
  double t9242;
  double t9245;
  double t9248;
  double t9254;
  double t9258;
  double t9290;
  double t9294;
  double t9301;
  double t9310;
  double t9311;
  double t9319;
  double t9325;
  double t9328;
  double t9329;
  double t9344;
  double t9352;
  double t9381;
  double t9384;
  double t9387;
  double t9388;
  double t9398;
  double t9399;
  double t9401;
  double t9402;
  double t9403;
  double t9404;
  double t9405;
  double t9407;
  double t9408;
  double t9487;
  double t9488;
  double t9502;
  double t9503;
  double t9584;
  double t9591;
  double t9605;
  double t9607;
  double t6367;
  double t6370;
  double t6371;
  double t6224;
  double t6228;
  double t6261;
  double t9712;
  double t9719;
  double t9742;
  double t9749;
  double t8041;
  double t8048;
  double t8049;
  double t9810;
  double t9829;
  double t7824;
  double t7844;
  double t7851;
  double t7050;
  double t7095;
  double t7096;
  double t9851;
  double t9858;
  double t10006;
  double t10011;
  double t10012;
  double t10017;
  double t10019;
  double t10021;
  double t10022;
  double t10024;
  double t10027;
  double t10028;
  double t9964;
  double t9986;
  double t9989;
  double t8907;
  double t8908;
  double t8909;
  double t10081;
  double t8629;
  double t8675;
  double t8676;
  double t10089;
  double t10095;
  double t10215;
  double t10216;
  double t10217;
  double t10219;
  double t10220;
  double t10221;
  double t10253;
  double t10256;
  double t10257;
  double t10262;
  double t10264;
  double t10266;
  double t10224;
  double t10226;
  double t10227;
  double t10229;
  double t10231;
  double t10236;
  double t10289;
  double t10290;
  double t10291;
  double t10292;
  double t10301;
  double t10302;
  double t10303;
  double t10304;
  double t10294;
  double t10295;
  double t10296;
  double t10297;
  double t10355;
  double t10356;
  double t10357;
  double t10358;
  double t10359;
  double t10360;
  double t10361;
  double t10362;
  double t10363;
  double t10364;
  double t10365;
  double t10369;
  double t10370;
  double t10376;
  double t10378;
  double t10379;
  double t10380;
  double t10382;
  double t10385;
  double t10387;
  double t10373;
  double t10374;
  double t10381;
  double t10389;
  double t10395;
  double t10397;
  double t10398;
  double t10399;
  double t10400;
  double t10407;
  double t10408;
  double t10411;
  double t10412;
  double t10418;
  double t10421;
  double t10424;
  double t10428;
  double t10431;
  double t10437;
  double t10438;
  double t10440;
  double t10441;
  double t10444;
  double t10445;
  double t10446;
  double t10448;
  double t10450;
  double t10453;
  double t10455;
  double t10456;
  double t10457;
  double t10460;
  double t10462;
  double t10463;
  double t10464;
  double t10465;
  double t10513;
  double t10514;
  double t10520;
  double t10526;
  double t10571;
  double t10573;
  double t10581;
  double t10586;
  double t10683;
  double t10687;
  double t10694;
  double t10699;
  double t10744;
  double t10749;
  double t10766;
  double t10770;
  double t10843;
  double t10844;
  double t10845;
  double t10847;
  double t10848;
  double t10849;
  double t10851;
  double t10855;
  double t10857;
  double t10858;
  double t10860;
  double t10861;
  double t10862;
  double t10819;
  double t10822;
  double t10828;
  double t10831;
  double t10898;
  double t10903;
  double t10907;
  double t10908;
  t117 = Cos(var1[4]);
  t147 = Cos(var1[6]);
  t158 = -1.*t147;
  t169 = 1. + t158;
  t170 = 0.15121*t169;
  t181 = Sin(var1[6]);
  t140 = Sin(var1[5]);
  t212 = Cos(var1[5]);
  t372 = Cos(var1[7]);
  t413 = -1.*t372;
  t424 = 1. + t413;
  t451 = Sin(var1[7]);
  t603 = Sin(var1[4]);
  t666 = -1. + t372;
  t269 = -1.*t117*t147*t140;
  t271 = -1.*t117*t212*t181;
  t315 = t269 + t271;
  t490 = t117*t212*t147;
  t507 = -1.*t117*t140*t181;
  t525 = t490 + t507;
  t792 = Cos(var1[8]);
  t801 = -1.*t792;
  t826 = 1. + t801;
  t854 = Sin(var1[8]);
  t675 = 4.e-6*t666*t603;
  t682 = 1.6e-11*t666;
  t686 = 1. + t682;
  t697 = t686*t315;
  t720 = 4.e-6*t525*t451;
  t765 = t675 + t697 + t720;
  t1173 = -1. + t792;
  t1060 = t372*t603;
  t1069 = 4.e-6*t666*t315;
  t1078 = t525*t451;
  t1100 = t1060 + t1069 + t1078;
  t884 = -1.000000000016*t424;
  t893 = 1. + t884;
  t895 = t893*t525;
  t920 = -1.*t603*t451;
  t959 = -4.e-6*t315*t451;
  t979 = t895 + t920 + t959;
  t1437 = -1.000000000016*t826;
  t1446 = 1. + t1437;
  t1183 = 1.6e-11*t1173;
  t530 = 0.281210000008499*t424;
  t543 = 0.03874900000062*t451;
  t1103 = 5.136e-14*var1[8];
  t1113 = -0.03874900000062*t826;
  t769 = -1.284e-8*var1[8];
  t1187 = 1. + t1183;
  t827 = -1.5499600000248e-7*t826;
  t990 = 0.503210000016051*t826;
  t1745 = 1.6e-11*t826;
  t1746 = 1. + t1745 + t1183;
  t1763 = 4.e-6*t1173;
  t1808 = -4.e-6*t792;
  t1831 = t1763 + t1808;
  t626 = 4.9936e-13*var1[7];
  t632 = -0.03874900000062*t424;
  t635 = 0.281210000004*t451;
  t1901 = 5.9484e-7*t1173;
  t1978 = -0.03875*t792;
  t2003 = -0.299999999992*t854;
  t2006 = t1103 + t1113 + t1901 + t1978 + t2003;
  t2069 = 0.14871*t1187;
  t2089 = -1.55e-7*t1173;
  t2107 = -1.199999999968e-6*t854;
  t2121 = t769 + t2069 + t827 + t2089 + t2107;
  t2177 = 0.80321*t1446;
  t2209 = -4.05159380016e-7*t854;
  t2211 = t2177 + t990 + t2209;
  t340 = -1.2484e-7*var1[7];
  t426 = -1.5499600000248e-7*t424;
  t466 = 1.124840000016e-6*t451;
  t2246 = 4.e-6*t666*t1746;
  t2336 = t372*t1831;
  t2372 = t2246 + t2336;
  t2063 = t451*t2006;
  t2145 = 4.e-6*t451*t2121;
  t2214 = t893*t2211;
  t2216 = t530 + t543 + t2063 + t2145 + t2214;
  t2635 = -1. + t1745;
  t2667 = 4.e-6*t2635;
  t2705 = 4.e-6*t826;
  t2709 = t2667 + t2705;
  t2726 = t1745 + t801;
  t2514 = 4.e-6*t666*t2006;
  t2520 = t686*t2121;
  t2550 = -4.e-6*t451*t2211;
  t2556 = t340 + t426 + t466 + t2514 + t2520 + t2550;
  t2386 = t372*t2006;
  t2437 = 4.e-6*t666*t2121;
  t2446 = -1.*t451*t2211;
  t2451 = t626 + t632 + t635 + t2386 + t2437 + t2446;
  t2723 = 4.e-6*t666*t2709;
  t2746 = t372*t2726;
  t2750 = 1.000000000016*t451*t854;
  t2787 = t2723 + t2746 + t2750;
  t1539 = -4.e-6*t1446*t451;
  t1556 = -4.e-6*t686*t854;
  t1557 = -4.e-6*t666*t854;
  t1580 = t1539 + t1556 + t1557;
  t1586 = -0.15121*t1580;
  t1637 = t893*t1446;
  t1702 = -1.000000000016*t451*t854;
  t1709 = t1637 + t1702;
  t1740 = 0.15121*t1709;
  t1760 = 4.e-6*t1746*t451;
  t1860 = t1831*t451;
  t1886 = t1760 + t1860;
  t2223 = t1886*t2216;
  t2457 = t2372*t2451;
  t2464 = t686*t1746;
  t2466 = 4.e-6*t666*t1831;
  t2506 = t2464 + t2466;
  t2597 = t2506*t2556;
  t2628 = t2223 + t2457 + t2597;
  t2796 = t2628*t2787;
  t2797 = 4.e-6*t2709*t451;
  t2847 = t2726*t451;
  t2849 = -1.000000000016*t893*t854;
  t2865 = t2797 + t2847 + t2849;
  t2887 = -1.*t2216*t2865;
  t2976 = t686*t2709;
  t3054 = 4.e-6*t666*t2726;
  t3059 = 4.000000000064e-6*t451*t854;
  t3077 = t2976 + t3054 + t3059;
  t3090 = -1.*t2556*t3077;
  t3134 = -1.*t2451*t2787;
  t3139 = t2887 + t3090 + t3134;
  t3141 = t2372*t3139;
  t3151 = t1586 + t1740 + t2796 + t3141;
  t3207 = t1831*t2006;
  t3209 = t1746*t2121;
  t3211 = t3207 + t3209;
  t3249 = -1.*t2726*t2006;
  t3268 = -1.*t2709*t2121;
  t3279 = 1.000000000016*t2211*t854;
  t3288 = t3249 + t3268 + t3279;
  t3196 = 0.038749*t1446;
  t3239 = t2709*t3211;
  t3244 = -0.281210000004*t854;
  t3310 = t1746*t3288;
  t3319 = -1.*t2726*t3211;
  t3340 = -1.*t1831*t3288;
  t3346 = t3319 + t3340;
  t3370 = 4.e-6*t3346;
  t3372 = t3196 + t3239 + t3244 + t3310 + t3370;
  t3414 = -1.*t1446*t451;
  t3473 = -1.6e-11*t666*t854;
  t3509 = -1.*t372*t854;
  t3546 = t3414 + t3473 + t3509;
  t3547 = t603*t3546;
  t3569 = -1.*t181*t1580;
  t3572 = t147*t1709;
  t3621 = t3569 + t3572;
  t3633 = t212*t3621;
  t3652 = t147*t1580;
  t3660 = t181*t1709;
  t3668 = t3652 + t3660;
  t3698 = -1.*t140*t3668;
  t3703 = t3633 + t3698;
  t3762 = t117*t3703;
  t3764 = t3547 + t3762;
  t189 = -0.15121*t181;
  t230 = 0.15121*t181;
  t3821 = t181*t2216;
  t3826 = t147*t2556;
  t3828 = t170 + t189 + t3821 + t3826;
  t3953 = t147*t2216;
  t3975 = -1.*t181*t2556;
  t3976 = t170 + t230 + t3953 + t3975;
  t3797 = t147*t2506;
  t3804 = t181*t1886;
  t3810 = t3797 + t3804;
  t3831 = t3810*t3828;
  t3886 = -1.*t2506*t181;
  t3930 = t147*t1886;
  t3934 = t3886 + t3930;
  t4013 = t3934*t3976;
  t4123 = t3831 + t4013 + t2457;
  t4158 = t4123*t2787;
  t4159 = t181*t2865;
  t4161 = t147*t3077;
  t4163 = t4159 + t4161;
  t4169 = -1.*t3828*t4163;
  t4197 = t147*t2865;
  t4219 = -1.*t181*t3077;
  t4269 = t4197 + t4219;
  t4350 = -1.*t3976*t4269;
  t4357 = t3134 + t4169 + t4350;
  t4359 = t2372*t4357;
  t4362 = t4158 + t4359;
  t4392 = Sin(var1[3]);
  t4393 = t140*t3621;
  t4402 = t212*t3668;
  t4410 = t4393 + t4402;
  t4422 = t4392*t4410;
  t4453 = Cos(var1[3]);
  t4467 = t117*t3546;
  t4472 = -1.*t603*t3703;
  t4498 = t4467 + t4472;
  t4501 = t4453*t4498;
  t4502 = t4422 + t4501;
  t4542 = t4453*t4410;
  t4564 = -1.*t4392*t4498;
  t4566 = t4542 + t4564;
  t4667 = t140*t3934;
  t4744 = t212*t3810;
  t4746 = t4667 + t4744;
  t4620 = -1.*t140*t3828;
  t4622 = t212*t3976;
  t4631 = t4620 + t4622;
  t4767 = t212*t3828;
  t4778 = t140*t3976;
  t4814 = t4767 + t4778;
  t4837 = t212*t4163;
  t4844 = t140*t4269;
  t4885 = t4837 + t4844;
  t4589 = t212*t3934;
  t4603 = -1.*t140*t3810;
  t4607 = t4589 + t4603;
  t4635 = t4607*t4631;
  t4822 = t4746*t4814;
  t4829 = t4635 + t4822 + t2457;
  t4887 = t4829*t4885;
  t4951 = -1.*t140*t4163;
  t4955 = t212*t4269;
  t4997 = t4951 + t4955;
  t4998 = -1.*t4631*t4997;
  t5006 = -1.*t4814*t4885;
  t5013 = t3134 + t4998 + t5006;
  t5046 = t4746*t5013;
  t5047 = t4887 + t5046;
  t5240 = t2372*t603;
  t5243 = t117*t4607;
  t5256 = t5240 + t5243;
  t5261 = t117*t4631;
  t5276 = t603*t2451;
  t5281 = t5261 + t5276;
  t5353 = t603*t2787;
  t5355 = t117*t4997;
  t5356 = t5353 + t5355;
  t5219 = -1.*t603*t4631;
  t5229 = t117*t2451;
  t5231 = t5219 + t5229;
  t5187 = t117*t2372;
  t5209 = -1.*t603*t4607;
  t5212 = t5187 + t5209;
  t5238 = t5212*t5231;
  t5345 = t5256*t5281;
  t5351 = t4822 + t5238 + t5345;
  t5361 = t5351*t5356;
  t5372 = -1.*t5281*t5356;
  t5382 = t117*t2787;
  t5392 = -1.*t603*t4997;
  t5395 = t5382 + t5392;
  t5403 = -1.*t5231*t5395;
  t5411 = t5006 + t5372 + t5403;
  t5418 = t5256*t5411;
  t5419 = t5361 + t5418;
  t5438 = -1.*t140*t3621;
  t5441 = -1.*t147*t1580;
  t5462 = -1.*t181*t1709;
  t5466 = t5441 + t5462;
  t5472 = t212*t5466;
  t5506 = t5438 + t5472;
  t5520 = t140*t5466;
  t5528 = t3633 + t5520;
  t5599 = -0.15121*t147;
  t5600 = t5599 + t230 + t3953 + t3975;
  t5561 = 0.15121*t147;
  t5571 = -1.*t181*t2216;
  t5574 = -1.*t147*t2556;
  t5577 = t5561 + t230 + t5571 + t5574;
  t5609 = -1.*t181*t2865;
  t5611 = -1.*t147*t3077;
  t5612 = t5609 + t5611;
  t5584 = -1.*t147*t2506;
  t5590 = -1.*t181*t1886;
  t5593 = t5584 + t5590;
  t5746 = t140*t5593;
  t5755 = t4589 + t5746;
  t5683 = t140*t5612;
  t5685 = t5683 + t4955;
  t5798 = t212*t5577;
  t5801 = -1.*t140*t5600;
  t5817 = t5798 + t5801;
  t5775 = t140*t5577;
  t5782 = t212*t5600;
  t5783 = t5775 + t5782;
  t5862 = t212*t5612;
  t5865 = -1.*t140*t4269;
  t5866 = t5862 + t5865;
  t5767 = t5755*t4814;
  t5796 = t4746*t5783;
  t5710 = -1.*t140*t3934;
  t5713 = t212*t5593;
  t5735 = t5710 + t5713;
  t5845 = -1.*t4814*t5685;
  t5872 = -1.*t5783*t4885;
  t5943 = -1.*t212*t3668;
  t5944 = t5438 + t5943;
  t6024 = -1.*t212*t3828;
  t6029 = -1.*t140*t3976;
  t6047 = t6024 + t6029;
  t6071 = -1.*t212*t4163;
  t6086 = t6071 + t5865;
  t6022 = t4746*t4631;
  t6050 = t4607*t4814;
  t5998 = -1.*t212*t3810;
  t6013 = t5710 + t5998;
  t6065 = -1.*t4814*t4997;
  t6111 = -1.*t4631*t4885;
  t6194 = -1.*t603*t3546;
  t6198 = -1.*t117*t3703;
  t6199 = t6194 + t6198;
  t6275 = -1.*t117*t4631;
  t6296 = -1.*t603*t2451;
  t6303 = t6275 + t6296;
  t6760 = -4.e-6*t1746*t451;
  t6778 = -1.*t1831*t451;
  t6791 = t6760 + t6778;
  t6695 = 0.03874900000062*t372;
  t6697 = 0.281210000008499*t451;
  t6711 = 4.e-6*t372*t2121;
  t6742 = -1.000000000016*t451*t2211;
  t6745 = t6695 + t6697 + t2386 + t6711 + t6742;
  t6471 = -4.e-6*t2709*t451;
  t6475 = -1.*t2726*t451;
  t6491 = 1.000000000016*t372*t854;
  t6494 = t6471 + t6475 + t6491;
  t6618 = 1.124840000016e-6*t372;
  t6632 = -1.5499600000248e-7*t451;
  t6635 = -4.e-6*t451*t2006;
  t6640 = -1.6e-11*t451*t2121;
  t6645 = -4.e-6*t372*t2211;
  t6661 = -1.2484e-7 + t6618 + t6632 + t6635 + t6640 + t6645;
  t6545 = 0.281210000004*t372;
  t6558 = -0.03874900000062*t451;
  t6570 = -1.*t451*t2006;
  t6579 = -4.e-6*t451*t2121;
  t6605 = -1.*t372*t2211;
  t6606 = 4.9936e-13 + t6545 + t6558 + t6570 + t6579 + t6605;
  t6439 = -1.000000000016*t1446*t451;
  t6442 = -1.000000000016*t372*t854;
  t6447 = t6439 + t6442;
  t6510 = -4.e-6*t372*t1446;
  t6515 = t6510 + t3059;
  t6517 = 4.e-6*t372*t1746;
  t6518 = t6517 + t2336;
  t6804 = -1.6e-11*t1746*t451;
  t6806 = -4.e-6*t1831*t451;
  t6832 = t6804 + t6806;
  t6612 = t2372*t6606;
  t6795 = t6791*t2451;
  t6950 = -1.*t2451*t6494;
  t6963 = -1.*t6606*t2787;
  t7165 = t147*t6661;
  t7176 = t181*t6745;
  t7179 = t7165 + t7176;
  t7133 = -1.*t181*t6661;
  t7144 = t147*t6745;
  t7154 = t7133 + t7144;
  t6873 = -1.6e-11*t2709*t451;
  t6890 = -4.e-6*t2726*t451;
  t6906 = 4.000000000064e-6*t372*t854;
  t6916 = t6873 + t6890 + t6906;
  t6971 = 4.e-6*t372*t2709;
  t6980 = 1.000000000032*t451*t854;
  t6982 = t6971 + t2746 + t6980;
  t7057 = t181*t6447;
  t7059 = t147*t6515;
  t7063 = t7057 + t7059;
  t7079 = t147*t6447;
  t7087 = -1.*t181*t6515;
  t7089 = t7079 + t7087;
  t7044 = -1.*t372*t1446;
  t7049 = t7044 + t2750;
  t7078 = -1.*t140*t7063;
  t7091 = t212*t7089;
  t7092 = t7078 + t7091;
  t7337 = t212*t7063;
  t7389 = t140*t7089;
  t7409 = t7337 + t7389;
  t7421 = t117*t7049;
  t7425 = -1.*t603*t7092;
  t7426 = t7421 + t7425;
  t7189 = t6518*t181;
  t7190 = t147*t6832;
  t7197 = t7189 + t7190;
  t7203 = t147*t6518;
  t7204 = -1.*t181*t6832;
  t7205 = t7203 + t7204;
  t7274 = -1.*t181*t6916;
  t7284 = t147*t6982;
  t7286 = t7274 + t7284;
  t7293 = t147*t6916;
  t7298 = t181*t6982;
  t7302 = t7293 + t7298;
  t7554 = t212*t7197;
  t7589 = t140*t7205;
  t7593 = t7554 + t7589;
  t7489 = t212*t7154;
  t7494 = -1.*t140*t7179;
  t7501 = t7489 + t7494;
  t7454 = t140*t7154;
  t7458 = t212*t7179;
  t7471 = t7454 + t7458;
  t7621 = t140*t7286;
  t7650 = t212*t7302;
  t7651 = t7621 + t7650;
  t7474 = t4746*t7471;
  t7596 = t7593*t4814;
  t7535 = -1.*t140*t7197;
  t7541 = t212*t7205;
  t7548 = t7535 + t7541;
  t7667 = t212*t7286;
  t7681 = -1.*t140*t7302;
  t7700 = t7667 + t7681;
  t7887 = t603*t6791;
  t7898 = t117*t7548;
  t7936 = t7887 + t7898;
  t7660 = -1.*t7471*t4885;
  t7661 = -1.*t4814*t7651;
  t7763 = t117*t7501;
  t7777 = t603*t6606;
  t7778 = t7763 + t7777;
  t7740 = -1.*t603*t7501;
  t7742 = t117*t6606;
  t7752 = t7740 + t7742;
  t7962 = t603*t6494;
  t7972 = t117*t7700;
  t7976 = t7962 + t7972;
  t8201 = -4.05159380016e-7*t792;
  t8215 = -0.2999999999968*t854;
  t8222 = t8201 + t8215;
  t8235 = -1.199999999968e-6*t792;
  t8238 = 1.620637520064e-12*t854;
  t8239 = -1.284e-8 + t8235 + t8238;
  t8247 = -0.299999999992*t792;
  t8251 = 4.05159380016e-7*t854;
  t8269 = 5.136e-14 + t8247 + t8251;
  t8397 = t893*t8222;
  t8399 = 4.e-6*t451*t8239;
  t8400 = t451*t8269;
  t8406 = t8397 + t8399 + t8400;
  t8114 = 1.000000000016*t792*t451;
  t8133 = 1.6000000000256e-11*t666*t854;
  t8156 = t8114 + t8133 + t6491;
  t8234 = -4.e-6*t451*t8222;
  t8240 = t686*t8239;
  t8295 = 4.e-6*t666*t8269;
  t8313 = t8234 + t8240 + t8295;
  t8345 = -1.*t451*t8222;
  t8357 = 4.e-6*t666*t8239;
  t8375 = t372*t8269;
  t8383 = t8345 + t8357 + t8375;
  t8502 = t1746*t8239;
  t8516 = t1831*t8269;
  t8521 = t8502 + t8516;
  t8537 = 1.000000000016*t792*t2211;
  t8538 = -1.*t2709*t8239;
  t8539 = -1.*t2726*t8269;
  t8542 = 1.000000000016*t8222*t854;
  t8559 = -1.000000000016*t2006*t854;
  t8567 = -4.000000000064e-6*t2121*t854;
  t8573 = t8537 + t8538 + t8539 + t8542 + t8559 + t8567;
  t8098 = -1.000000000016*t792*t451;
  t8100 = t8098 + t2849;
  t8174 = -4.e-6*t686*t792;
  t8177 = -4.e-6*t666*t792;
  t8184 = t8174 + t8177 + t3059;
  t8388 = t2372*t8383;
  t8448 = -1.*t2451*t8156;
  t8452 = -1.*t8383*t2787;
  t8692 = t147*t8313;
  t8694 = t181*t8406;
  t8695 = t8692 + t8694;
  t8687 = -1.*t181*t8313;
  t8688 = t147*t8406;
  t8689 = t8687 + t8688;
  t8430 = 4.000000000064e-6*t792*t451;
  t8432 = 4.000000000064e-6*t686*t854;
  t8440 = 4.000000000064e-6*t666*t854;
  t8441 = t8430 + t8432 + t8440;
  t8453 = -1.000000000016*t893*t792;
  t8456 = t8453 + t6980;
  t8633 = t181*t8100;
  t8642 = t147*t8184;
  t8645 = t8633 + t8642;
  t8647 = t147*t8100;
  t8655 = -1.*t181*t8184;
  t8656 = t8647 + t8655;
  t8621 = -1.6e-11*t666*t792;
  t8624 = -1.*t372*t792;
  t8628 = t8621 + t8624 + t2750;
  t8646 = -1.*t140*t8645;
  t8665 = t212*t8656;
  t8672 = t8646 + t8665;
  t8761 = t212*t8645;
  t8764 = t140*t8656;
  t8772 = t8761 + t8764;
  t8776 = t117*t8628;
  t8778 = -1.*t603*t8672;
  t8779 = t8776 + t8778;
  t8715 = -1.*t181*t8441;
  t8718 = t147*t8456;
  t8722 = t8715 + t8718;
  t8730 = t147*t8441;
  t8735 = t181*t8456;
  t8738 = t8730 + t8735;
  t8796 = t212*t8689;
  t8798 = -1.*t140*t8695;
  t8799 = t8796 + t8798;
  t8788 = t140*t8689;
  t8791 = t212*t8695;
  t8794 = t8788 + t8791;
  t8812 = t140*t8722;
  t8813 = t212*t8738;
  t8821 = t8812 + t8813;
  t8795 = t4746*t8794;
  t8834 = t212*t8722;
  t8838 = -1.*t140*t8738;
  t8841 = t8834 + t8838;
  t8832 = -1.*t8794*t4885;
  t8833 = -1.*t4814*t8821;
  t8871 = t117*t8799;
  t8873 = t603*t8383;
  t8874 = t8871 + t8873;
  t8856 = -1.*t603*t8799;
  t8857 = t117*t8383;
  t8859 = t8856 + t8857;
  t8882 = t603*t8156;
  t8884 = t117*t8841;
  t8892 = t8882 + t8884;
  t193 = t170 + t189;
  t255 = t170 + t230;
  t8949 = t4453*t212;
  t8950 = -1.*t4392*t603*t140;
  t8951 = t8949 + t8950;
  t8953 = t212*t4392*t603;
  t8954 = t4453*t140;
  t8956 = t8953 + t8954;
  t471 = t340 + t426 + t466;
  t552 = t530 + t543;
  t648 = t626 + t632 + t635;
  t8958 = t147*t8951;
  t8959 = -1.*t8956*t181;
  t8961 = t8958 + t8959;
  t8974 = t147*t8956;
  t8977 = t8951*t181;
  t8981 = t8974 + t8977;
  t859 = 2.012840000032e-6*t854;
  t864 = t769 + t827 + t859;
  t1002 = 0.03874900000062*t854;
  t1003 = t990 + t1002;
  t1128 = 0.503210000008*t854;
  t1132 = t1103 + t1113 + t1128;
  t8995 = -4.e-6*t117*t666*t4392;
  t9000 = t686*t8961;
  t9005 = 4.e-6*t8981*t451;
  t9013 = t8995 + t9000 + t9005;
  t9035 = -1.*t117*t372*t4392;
  t9039 = 4.e-6*t666*t8961;
  t9040 = t8981*t451;
  t9048 = t9035 + t9039 + t9040;
  t9016 = t893*t8981;
  t9025 = t117*t4392*t451;
  t9026 = -4.e-6*t8961*t451;
  t9029 = t9016 + t9025 + t9026;
  t9110 = 0.15121*t2865;
  t9113 = -1.*t1886*t2216;
  t9119 = -1.*t2372*t2451;
  t9121 = -1.*t2506*t2556;
  t9124 = t9113 + t9119 + t9121;
  t9125 = t9124*t3546;
  t9128 = -0.15121*t3077;
  t9131 = t2556*t1580;
  t9141 = t2451*t3546;
  t9144 = t2216*t1709;
  t9159 = t9131 + t9141 + t9144;
  t9160 = t2372*t9159;
  t9162 = t9110 + t9125 + t9128 + t9160;
  t8532 = -0.03874900000062*t854;
  t9171 = -1.*t1831*t2006;
  t9173 = -1.*t1746*t2121;
  t9174 = t9171 + t9173;
  t9181 = t1446*t2211;
  t9183 = -1.*t2006*t854;
  t9185 = -4.e-6*t2121*t854;
  t9187 = t9181 + t9183 + t9185;
  t9168 = 1.e-6*t2709;
  t9169 = 0.28121*t2726;
  t9179 = -4.e-6*t9174*t854;
  t9191 = t1746*t9187;
  t9193 = t9174*t854;
  t9199 = -1.*t1831*t9187;
  t9207 = t9193 + t9199;
  t9210 = 4.e-6*t9207;
  t9216 = t9168 + t9169 + t8532 + t9179 + t9191 + t9210;
  t9234 = -1.*t3810*t3828;
  t9236 = -1.*t3934*t3976;
  t9238 = t9234 + t9236 + t9119;
  t9239 = t9238*t3546;
  t9242 = t3976*t3621;
  t9245 = t3828*t3668;
  t9248 = t9141 + t9242 + t9245;
  t9254 = t2372*t9248;
  t9258 = t9239 + t9254;
  t9290 = -1.*t4607*t4631;
  t9294 = -1.*t4746*t4814;
  t9301 = t9290 + t9294 + t9119;
  t9310 = t9301*t4410;
  t9311 = t4814*t4410;
  t9319 = t4631*t3703;
  t9325 = t9141 + t9311 + t9319;
  t9328 = t4746*t9325;
  t9329 = t9310 + t9328;
  t9344 = t4392*t4885;
  t9352 = t4453*t5395;
  t9381 = t9344 + t9352;
  t9384 = t4453*t4885;
  t9387 = -1.*t4392*t5395;
  t9388 = t9384 + t9387;
  t9398 = -1.*t5212*t5231;
  t9399 = -1.*t5256*t5281;
  t9401 = t9294 + t9398 + t9399;
  t9402 = t9401*t3764;
  t9403 = t5281*t3764;
  t9404 = t5231*t4498;
  t9405 = t9311 + t9403 + t9404;
  t9407 = t5256*t9405;
  t9408 = t9402 + t9407;
  t9487 = -1.*t5755*t4814;
  t9488 = -1.*t4746*t5783;
  t9502 = t4814*t5528;
  t9503 = t5783*t4410;
  t9584 = -1.*t4746*t4631;
  t9591 = -1.*t4607*t4814;
  t9605 = t4631*t4410;
  t9607 = t4814*t3703;
  t6367 = -1.*t603*t2787;
  t6370 = -1.*t117*t4997;
  t6371 = t6367 + t6370;
  t6224 = -1.*t2372*t603;
  t6228 = -1.*t117*t4607;
  t6261 = t6224 + t6228;
  t9712 = -1.*t2372*t6606;
  t9719 = -1.*t6791*t2451;
  t9742 = t6606*t3546;
  t9749 = t2451*t7049;
  t8041 = t117*t6494;
  t8048 = -1.*t603*t7700;
  t8049 = t8041 + t8048;
  t9810 = -1.*t4746*t7471;
  t9829 = -1.*t7593*t4814;
  t7824 = t117*t6791;
  t7844 = -1.*t603*t7548;
  t7851 = t7824 + t7844;
  t7050 = t603*t7049;
  t7095 = t117*t7092;
  t7096 = t7050 + t7095;
  t9851 = t7471*t4410;
  t9858 = t4814*t7409;
  t10006 = -1.*t1746*t8239;
  t10011 = -1.*t1831*t8269;
  t10012 = t10006 + t10011;
  t10017 = t1446*t8222;
  t10019 = -1.*t792*t2006;
  t10021 = -4.e-6*t792*t2121;
  t10022 = -1.000000000016*t2211*t854;
  t10024 = -4.e-6*t8239*t854;
  t10027 = -1.*t8269*t854;
  t10028 = t10017 + t10019 + t10021 + t10022 + t10024 + t10027;
  t9964 = -1.*t2372*t8383;
  t9986 = t8383*t3546;
  t9989 = t2451*t8628;
  t8907 = t117*t8156;
  t8908 = -1.*t603*t8841;
  t8909 = t8907 + t8908;
  t10081 = -1.*t4746*t8794;
  t8629 = t603*t8628;
  t8675 = t117*t8672;
  t8676 = t8629 + t8675;
  t10089 = t8794*t4410;
  t10095 = t4814*t8772;
  t10215 = t212*t4392;
  t10216 = t4453*t603*t140;
  t10217 = t10215 + t10216;
  t10219 = -1.*t4453*t212*t603;
  t10220 = t4392*t140;
  t10221 = t10219 + t10220;
  t10253 = t4392*t4746;
  t10256 = t4453*t5212;
  t10257 = t10253 + t10256;
  t10262 = t4453*t4746;
  t10264 = -1.*t4392*t5212;
  t10266 = t10262 + t10264;
  t10224 = t147*t10217;
  t10226 = -1.*t10221*t181;
  t10227 = t10224 + t10226;
  t10229 = t147*t10221;
  t10231 = t10217*t181;
  t10236 = t10229 + t10231;
  t10289 = 4.e-6*t4453*t117*t666;
  t10290 = t686*t10227;
  t10291 = 4.e-6*t10236*t451;
  t10292 = t10289 + t10290 + t10291;
  t10301 = t4453*t117*t372;
  t10302 = 4.e-6*t666*t10227;
  t10303 = t10236*t451;
  t10304 = t10301 + t10302 + t10303;
  t10294 = t893*t10236;
  t10295 = -1.*t4453*t117*t451;
  t10296 = -4.e-6*t10227*t451;
  t10297 = t10294 + t10295 + t10296;
  t10355 = -0.15121*t2506;
  t10356 = 0.15121*t1886;
  t10357 = -1.*t2556*t1580;
  t10358 = -1.*t2451*t3546;
  t10359 = -1.*t2216*t1709;
  t10360 = t10357 + t10358 + t10359;
  t10361 = t2787*t10360;
  t10362 = t2216*t2865;
  t10363 = t2556*t3077;
  t10364 = t2451*t2787;
  t10365 = t10362 + t10363 + t10364;
  t10369 = t3546*t10365;
  t10370 = t10355 + t10356 + t10361 + t10369;
  t10376 = -1.*t1446*t2211;
  t10378 = t2006*t854;
  t10379 = 4.e-6*t2121*t854;
  t10380 = t10376 + t10378 + t10379;
  t10382 = t2726*t2006;
  t10385 = t2709*t2121;
  t10387 = t10382 + t10385 + t10022;
  t10373 = 1.e-6*t1746;
  t10374 = 0.28121*t1831;
  t10381 = t2709*t10380;
  t10389 = -4.e-6*t854*t10387;
  t10395 = -1.*t2726*t10380;
  t10397 = t854*t10387;
  t10398 = t10395 + t10397;
  t10399 = 4.e-6*t10398;
  t10400 = t10373 + t10374 + t10381 + t10389 + t10399;
  t10407 = -1.*t3976*t3621;
  t10408 = -1.*t3828*t3668;
  t10411 = t10358 + t10407 + t10408;
  t10412 = t2787*t10411;
  t10418 = t3828*t4163;
  t10421 = t3976*t4269;
  t10424 = t10364 + t10418 + t10421;
  t10428 = t3546*t10424;
  t10431 = t10412 + t10428;
  t10437 = -1.*t4814*t4410;
  t10438 = -1.*t4631*t3703;
  t10440 = t10358 + t10437 + t10438;
  t10441 = t4885*t10440;
  t10444 = t4631*t4997;
  t10445 = t4814*t4885;
  t10446 = t10364 + t10444 + t10445;
  t10448 = t4410*t10446;
  t10450 = t10441 + t10448;
  t10453 = -1.*t5281*t3764;
  t10455 = -1.*t5231*t4498;
  t10456 = t10437 + t10453 + t10455;
  t10457 = t5356*t10456;
  t10460 = t5281*t5356;
  t10462 = t5231*t5395;
  t10463 = t10445 + t10460 + t10462;
  t10464 = t3764*t10463;
  t10465 = t10457 + t10464;
  t10513 = -1.*t4814*t5528;
  t10514 = -1.*t5783*t4410;
  t10520 = t4814*t5685;
  t10526 = t5783*t4885;
  t10571 = -1.*t4631*t4410;
  t10573 = -1.*t4814*t3703;
  t10581 = t4814*t4997;
  t10586 = t4631*t4885;
  t10683 = -1.*t6606*t3546;
  t10687 = -1.*t2451*t7049;
  t10694 = t2451*t6494;
  t10699 = t6606*t2787;
  t10744 = -1.*t7471*t4410;
  t10749 = -1.*t4814*t7409;
  t10766 = t7471*t4885;
  t10770 = t4814*t7651;
  t10843 = -1.000000000016*t792*t2211;
  t10844 = t2709*t8239;
  t10845 = t2726*t8269;
  t10847 = -1.000000000016*t8222*t854;
  t10848 = 1.000000000016*t2006*t854;
  t10849 = 4.000000000064e-6*t2121*t854;
  t10851 = t10843 + t10844 + t10845 + t10847 + t10848 + t10849;
  t10855 = -1.*t1446*t8222;
  t10857 = t792*t2006;
  t10858 = 4.e-6*t792*t2121;
  t10860 = 4.e-6*t8239*t854;
  t10861 = t8269*t854;
  t10862 = t10855 + t10857 + t10858 + t3279 + t10860 + t10861;
  t10819 = -1.*t8383*t3546;
  t10822 = -1.*t2451*t8628;
  t10828 = t2451*t8156;
  t10831 = t8383*t2787;
  t10898 = -1.*t8794*t4410;
  t10903 = -1.*t4814*t8772;
  t10907 = t8794*t4885;
  t10908 = t4814*t8821;
  p_output1[0]=t1100*t1132 - 1.*t117*t140*t193 + t117*t212*t255 + t315*t471 + t525*t552 + t603*t648 + t765*t864 + t1003*t979 + 0.80321*(-1.*t1100*t854 - 4.e-6*t765*t854 + t1446*t979) + 0.14871*(4.e-6*t1100*t1173 + t1187*t765 + 4.e-6*t854*t979) - 0.03875*(4.e-6*t1173*t765 + t1100*t792 + t854*t979) + var1[0] + t3764*var2[0] + t4566*var2[1] + t4502*var2[2] + t5419*var2[3] + ((-1.*t4392*t4410 - 1.*t4453*t4498)*var2[1] + t4566*var2[2])*var2[3] + t5047*var2[4] + (t4498*var2[0] - 1.*t4392*t6199*var2[1] + t4453*t6199*var2[2] + (t5351*t5395 + t5212*t5411 + t5356*(t5231*t5256 + t5212*t5281 + t5231*t6261 + t5212*t6303) + t5256*(-1.*t5231*t5356 - 1.*t5281*t5395 - 1.*t5395*t6303 - 1.*t5231*t6371))*var2[3])*var2[4] + t4362*var2[5] + (t117*t5944*var2[0] + (t3703*t4453 + t4392*t5944*t603)*var2[1] + (t3703*t4392 - 1.*t4453*t5944*t603)*var2[2] + (t117*t5411*t6013 + t5356*(t117*t5281*t6013 + t6022 - 1.*t5231*t6013*t603 + t117*t5256*t6047 - 1.*t5212*t603*t6047 + t6050) + t117*t5351*t6086 + t5256*(-1.*t117*t5356*t6047 + t5395*t603*t6047 + t6065 - 1.*t117*t5281*t6086 + t5231*t603*t6086 + t6111))*var2[3] + (t4829*t4997 + t4607*t5013 + t4885*(t4631*t6013 + t6022 + t4607*t6047 + t6050) + t4746*(-1.*t4997*t6047 + t6065 - 1.*t4631*t6086 + t6111))*var2[4])*var2[5] + t3151*var2[6] + (t117*t5506*var2[0] + (t4453*t5528 + t4392*t5506*t603)*var2[1] + (t4392*t5528 - 1.*t4453*t5506*t603)*var2[2] + (t117*t5411*t5735 + t117*t5351*t5866 + t5356*(t117*t5281*t5735 + t5767 + t5796 + t117*t5256*t5817 - 1.*t5231*t5735*t603 - 1.*t5212*t5817*t603) + t5256*(-1.*t117*t5356*t5817 + t5845 - 1.*t117*t5281*t5866 + t5872 + t5395*t5817*t603 + t5231*t5866*t603))*var2[3] + (t4829*t5685 + t5013*t5755 + t4885*(t4631*t5735 + t5767 + t5796 + t4607*t5817) + t4746*(-1.*t4997*t5817 + t5845 - 1.*t4631*t5866 + t5872))*var2[4] + (t2787*(t3828*t3934 + t3934*t5577 + t3976*t5593 + t3810*t5600) + t2372*(-1.*t3828*t4269 - 1.*t4269*t5577 - 1.*t4163*t5600 - 1.*t3976*t5612))*var2[5])*var2[6] + t3372*var2[7] + (t7096*var2[0] + (t4453*t7409 - 1.*t4392*t7426)*var2[1] + (t4392*t7409 + t4453*t7426)*var2[2] + (t5411*t7936 + t5356*(t7474 + t7596 + t5212*t7752 + t5256*t7778 + t5231*t7851 + t5281*t7936) + t5351*t7976 + t5256*(t7660 + t7661 - 1.*t5395*t7752 - 1.*t5356*t7778 - 1.*t5281*t7976 - 1.*t5231*t8049))*var2[3] + (t5013*t7593 + t4885*(t6612 + t6795 + t7474 + t4607*t7501 + t4631*t7548 + t7596) + t4829*t7651 + t4746*(t6950 + t6963 - 1.*t4997*t7501 + t7660 + t7661 - 1.*t4631*t7700))*var2[4] + (t4123*t6494 + t4357*t6791 + t2787*(t6612 + t6795 + t3934*t7154 + t3810*t7179 + t3828*t7197 + t3976*t7205) + t2372*(t6950 + t6963 - 1.*t4269*t7154 - 1.*t4163*t7179 - 1.*t3976*t7286 - 1.*t3828*t7302))*var2[5] + (0.15121*t6447 + t2628*t6494 - 0.15121*t6515 + t3139*t6791 + t2787*(t2216*t6518 + t6612 + t2506*t6661 + t1886*t6745 + t6795 + t2556*t6832) + t2372*(-1.*t3077*t6661 - 1.*t2865*t6745 - 1.*t2556*t6916 + t6950 + t6963 - 1.*t2216*t6982))*var2[6])*var2[7] - 4.05160619990483e-7*var2[8] + (t8676*var2[0] + (t4453*t8772 - 1.*t4392*t8779)*var2[1] + (t4392*t8772 + t4453*t8779)*var2[2] + (t5356*(t8795 + t5212*t8859 + t5256*t8874) + t5351*t8892 + t5256*(t8832 + t8833 - 1.*t5395*t8859 - 1.*t5356*t8874 - 1.*t5281*t8892 - 1.*t5231*t8909))*var2[3] + (t4885*(t8388 + t8795 + t4607*t8799) + t4829*t8821 + t4746*(t8448 + t8452 - 1.*t4997*t8799 + t8832 + t8833 - 1.*t4631*t8841))*var2[4] + (t4123*t8156 + t2787*(t8388 + t3934*t8689 + t3810*t8695) + t2372*(t8448 + t8452 - 1.*t4269*t8689 - 1.*t4163*t8695 - 1.*t3976*t8722 - 1.*t3828*t8738))*var2[5] + (0.15121*t8100 + t2628*t8156 - 0.15121*t8184 + t2787*(t2506*t8313 + t8388 + t1886*t8406) + t2372*(-1.*t3077*t8313 - 1.*t2865*t8406 - 1.*t2556*t8441 + t8448 + t8452 - 1.*t2216*t8456))*var2[6] + (-0.281210000004*t792 + t2709*t8521 + t8532 + 4.000000000064e-6*t3211*t854 + t1746*t8573 + 4.e-6*(-1.*t2726*t8521 - 1.000000000016*t3211*t854 - 1.*t1831*t8573))*var2[7])*var2[8] + t3764*var3[0] + t4566*var3[1] + t4502*var3[2] + t5419*var3[3] + t5047*var3[4] + t4362*var3[5] + t3151*var3[6] + t3372*var3[7] - 4.05160619990483e-7*var3[8] - 1.*var4[0];
  p_output1[1]=-1.*t117*t4392*t648 + t193*t8951 + t255*t8956 + t471*t8961 + t552*t8981 + t864*t9013 + t1003*t9029 + t1132*t9048 + 0.14871*(t1187*t9013 + 4.e-6*t854*t9029 + 4.e-6*t1173*t9048) - 0.03875*(4.e-6*t1173*t9013 + t854*t9029 + t792*t9048) + 0.80321*(-4.e-6*t854*t9013 + t1446*t9029 - 1.*t854*t9048) + var1[1] + t5356*var2[0] + t9388*var2[1] + t9381*var2[2] + t9408*var2[3] + ((-1.*t4392*t4885 - 1.*t4453*t5395)*var2[1] + t9388*var2[2])*var2[3] + t9329*var2[4] + (t5395*var2[0] - 1.*t4392*t6371*var2[1] + t4453*t6371*var2[2] + (t5256*(t3764*t5231 + t4498*t5281 + t5231*t6199 + t4498*t6303) + t3764*(-1.*t5231*t5256 - 1.*t5212*t5281 - 1.*t5231*t6261 - 1.*t5212*t6303) + t4498*t9401 + t5212*t9405)*var2[3])*var2[4] + t9258*var2[5] + (t117*t6086*var2[0] + (t4453*t4997 + t4392*t603*t6086)*var2[1] + (t4392*t4997 - 1.*t4453*t603*t6086)*var2[2] + (t117*t5944*t9401 + t117*t6013*t9405 + t3764*(-1.*t117*t5281*t6013 + t5231*t6013*t603 - 1.*t117*t5256*t6047 + t5212*t603*t6047 + t9584 + t9591) + t5256*(t117*t5281*t5944 - 1.*t5231*t5944*t603 + t117*t3764*t6047 - 1.*t4498*t603*t6047 + t9605 + t9607))*var2[3] + (t3703*t9301 + t4607*t9325 + t4410*(-1.*t4631*t6013 - 1.*t4607*t6047 + t9584 + t9591) + t4746*(t4631*t5944 + t3703*t6047 + t9605 + t9607))*var2[4])*var2[5] + t9162*var2[6] + (t117*t5866*var2[0] + (t4453*t5685 + t4392*t5866*t603)*var2[1] + (t4392*t5685 - 1.*t4453*t5866*t603)*var2[2] + (t117*t5506*t9401 + t117*t5735*t9405 + t3764*(-1.*t117*t5281*t5735 - 1.*t117*t5256*t5817 + t5231*t5735*t603 + t5212*t5817*t603 + t9487 + t9488) + t5256*(t117*t5281*t5506 + t117*t3764*t5817 - 1.*t5231*t5506*t603 - 1.*t4498*t5817*t603 + t9502 + t9503))*var2[3] + (t5528*t9301 + t5755*t9325 + t4410*(-1.*t4631*t5735 - 1.*t4607*t5817 + t9487 + t9488) + t4746*(t4631*t5506 + t3703*t5817 + t9502 + t9503))*var2[4] + (t2372*(t3621*t3828 + t3976*t5466 + t3621*t5577 + t3668*t5600) + t3546*(-1.*t3828*t3934 - 1.*t3934*t5577 - 1.*t3976*t5593 - 1.*t3810*t5600))*var2[5])*var2[6] + t9216*var2[7] + (t7976*var2[0] + (t4453*t7651 - 1.*t4392*t8049)*var2[1] + (t4392*t7651 + t4453*t8049)*var2[2] + (t7096*t9401 + t7936*t9405 + t3764*(-1.*t5212*t7752 - 1.*t5256*t7778 - 1.*t5231*t7851 - 1.*t5281*t7936 + t9810 + t9829) + t5256*(t5281*t7096 + t5231*t7426 + t4498*t7752 + t3764*t7778 + t9851 + t9858))*var2[3] + (t7409*t9301 + t7593*t9325 + t4410*(-1.*t4607*t7501 - 1.*t4631*t7548 + t9712 + t9719 + t9810 + t9829) + t4746*(t4631*t7092 + t3703*t7501 + t9742 + t9749 + t9851 + t9858))*var2[4] + (t7049*t9238 + t6791*t9248 + t3546*(-1.*t3934*t7154 - 1.*t3810*t7179 - 1.*t3828*t7197 - 1.*t3976*t7205 + t9712 + t9719) + t2372*(t3828*t7063 + t3976*t7089 + t3621*t7154 + t3668*t7179 + t9742 + t9749))*var2[5] + (-0.15121*t6916 + 0.15121*t6982 + t7049*t9124 + t6791*t9159 + t3546*(-1.*t2216*t6518 - 1.*t2506*t6661 - 1.*t1886*t6745 - 1.*t2556*t6832 + t9712 + t9719) + t2372*(t2216*t6447 + t2556*t6515 + t1580*t6661 + t1709*t6745 + t9742 + t9749))*var2[6])*var2[7] + 0.300000000004851*var2[8] + (t8892*var2[0] + (t4453*t8821 - 1.*t4392*t8909)*var2[1] + (t4392*t8821 + t4453*t8909)*var2[2] + (t5256*(t10089 + t10095 + t5281*t8676 + t5231*t8779 + t4498*t8859 + t3764*t8874) + t3764*(t10081 - 1.*t5212*t8859 - 1.*t5256*t8874) + t8676*t9401)*var2[3] + (t8772*t9301 + t4410*(t10081 - 1.*t4607*t8799 + t9964) + t4746*(t10089 + t10095 + t4631*t8672 + t3703*t8799 + t9986 + t9989))*var2[4] + (t8628*t9238 + t3546*(-1.*t3934*t8689 - 1.*t3810*t8695 + t9964) + t2372*(t3828*t8645 + t3976*t8656 + t3621*t8689 + t3668*t8695 + t9986 + t9989))*var2[5] + (-0.15121*t8441 + 0.15121*t8456 + t8628*t9124 + t3546*(-1.*t2506*t8313 - 1.*t1886*t8406 + t9964) + t2372*(t2216*t8100 + t2556*t8184 + t1580*t8313 + t1709*t8406 + t9986 + t9989))*var2[6] + (t10028*t1746 - 0.03874900000062*t792 + 0.281210000008499*t854 - 4.e-6*t10012*t854 - 4.e-6*t792*t9174 + 4.e-6*(-1.*t10028*t1831 + t10012*t854 + t792*t9174))*var2[7])*var2[8] + t5356*var3[0] + t9388*var3[1] + t9381*var3[2] + t9408*var3[3] + t9329*var3[4] + t9258*var3[5] + t9162*var3[6] + t9216*var3[7] + 0.300000000004851*var3[8] - 1.*var4[1];
  p_output1[2]=t1003*t10297 + t10304*t1132 + t10217*t193 + t10221*t255 + t10227*t471 + t10236*t552 + t117*t4453*t648 + 0.14871*(4.e-6*t10304*t1173 + t10292*t1187 + 4.e-6*t10297*t854) - 0.03875*(4.e-6*t10292*t1173 + t10304*t792 + t10297*t854) + 0.80321*(t10297*t1446 - 4.e-6*t10292*t854 - 1.*t10304*t854) + t10292*t864 + var1[2] + t5256*var2[0] + t10266*var2[1] + t10257*var2[2] + t10465*var2[3] + ((-1.*t4392*t4746 - 1.*t4453*t5212)*var2[1] + t10266*var2[2])*var2[3] + t10450*var2[4] + (t5212*var2[0] - 1.*t4392*t6261*var2[1] + t4453*t6261*var2[2] + (t10463*t4498 + t10456*t5395 + t5356*(-1.*t3764*t5231 - 1.*t4498*t5281 - 1.*t5231*t6199 - 1.*t4498*t6303) + t3764*(t5231*t5356 + t5281*t5395 + t5395*t6303 + t5231*t6371))*var2[3])*var2[4] + t10431*var2[5] + (t117*t6013*var2[0] + (t4453*t4607 + t4392*t6013*t603)*var2[1] + (t4392*t4607 - 1.*t4453*t6013*t603)*var2[2] + (t10463*t117*t5944 + t5356*(t10571 + t10573 - 1.*t117*t5281*t5944 + t5231*t5944*t603 - 1.*t117*t3764*t6047 + t4498*t603*t6047) + t10456*t117*t6086 + t3764*(t10581 + t10586 + t117*t5356*t6047 - 1.*t5395*t603*t6047 + t117*t5281*t6086 - 1.*t5231*t603*t6086))*var2[3] + (t10446*t3703 + t10440*t4997 + t4885*(t10571 + t10573 - 1.*t4631*t5944 - 1.*t3703*t6047) + t4410*(t10581 + t10586 + t4997*t6047 + t4631*t6086))*var2[4])*var2[5] + t10370*var2[6] + (t117*t5735*var2[0] + (t4453*t5755 + t4392*t5735*t603)*var2[1] + (t4392*t5755 - 1.*t4453*t5735*t603)*var2[2] + (t10463*t117*t5506 + t10456*t117*t5866 + t5356*(t10513 + t10514 - 1.*t117*t5281*t5506 - 1.*t117*t3764*t5817 + t5231*t5506*t603 + t4498*t5817*t603) + t3764*(t10520 + t10526 + t117*t5356*t5817 + t117*t5281*t5866 - 1.*t5395*t5817*t603 - 1.*t5231*t5866*t603))*var2[3] + (t10446*t5528 + t10440*t5685 + t4885*(t10513 + t10514 - 1.*t4631*t5506 - 1.*t3703*t5817) + t4410*(t10520 + t10526 + t4997*t5817 + t4631*t5866))*var2[4] + (t2787*(-1.*t3621*t3828 - 1.*t3976*t5466 - 1.*t3621*t5577 - 1.*t3668*t5600) + t3546*(t3828*t4269 + t4269*t5577 + t4163*t5600 + t3976*t5612))*var2[5])*var2[6] + t10400*var2[7] + (t7936*var2[0] + (t4453*t7593 - 1.*t4392*t7851)*var2[1] + (t4392*t7593 + t4453*t7851)*var2[2] + (t10463*t7096 + t5356*(t10744 + t10749 - 1.*t5281*t7096 - 1.*t5231*t7426 - 1.*t4498*t7752 - 1.*t3764*t7778) + t10456*t7976 + t3764*(t10766 + t10770 + t5395*t7752 + t5356*t7778 + t5281*t7976 + t5231*t8049))*var2[3] + (t10446*t7409 + t4885*(t10683 + t10687 + t10744 + t10749 - 1.*t4631*t7092 - 1.*t3703*t7501) + t10440*t7651 + t4410*(t10694 + t10699 + t10766 + t10770 + t4997*t7501 + t4631*t7700))*var2[4] + (t10411*t6494 + t10424*t7049 + t2787*(t10683 + t10687 - 1.*t3828*t7063 - 1.*t3976*t7089 - 1.*t3621*t7154 - 1.*t3668*t7179) + t3546*(t10694 + t10699 + t4269*t7154 + t4163*t7179 + t3976*t7286 + t3828*t7302))*var2[5] + (t10360*t6494 + 0.15121*t6518 + t2787*(t10683 + t10687 - 1.*t2216*t6447 - 1.*t2556*t6515 - 1.*t1580*t6661 - 1.*t1709*t6745) - 0.15121*t6832 + t3546*(t10694 + t10699 + t3077*t6661 + t2865*t6745 + t2556*t6916 + t2216*t6982) + t10365*t7049)*var2[6])*var2[7] - 1.284e-8*var2[8] + ((t10463*t8676 + t5356*(t10898 + t10903 - 1.*t5281*t8676 - 1.*t5231*t8779 - 1.*t4498*t8859 - 1.*t3764*t8874) + t10456*t8892 + t3764*(t10907 + t10908 + t5395*t8859 + t5356*t8874 + t5281*t8892 + t5231*t8909))*var2[3] + (t10446*t8772 + t4885*(t10819 + t10822 + t10898 + t10903 - 1.*t4631*t8672 - 1.*t3703*t8799) + t10440*t8821 + t4410*(t10828 + t10831 + t10907 + t10908 + t4997*t8799 + t4631*t8841))*var2[4] + (t10411*t8156 + t10424*t8628 + t2787*(t10819 + t10822 - 1.*t3828*t8645 - 1.*t3976*t8656 - 1.*t3621*t8689 - 1.*t3668*t8695) + t3546*(t10828 + t10831 + t4269*t8689 + t4163*t8695 + t3976*t8722 + t3828*t8738))*var2[5] + (t10360*t8156 + t2787*(t10819 + t10822 - 1.*t2216*t8100 - 1.*t2556*t8184 - 1.*t1580*t8313 - 1.*t1709*t8406) + t3546*(t10828 + t10831 + t3077*t8313 + t2865*t8406 + t2556*t8441 + t2216*t8456) + t10365*t8628)*var2[6] + (t10862*t2709 - 4.e-6*t10387*t792 + 4.000000000064e-6*t10380*t854 - 4.e-6*t10851*t854 + 4.e-6*(-1.*t10862*t2726 + t10387*t792 - 1.000000000016*t10380*t854 + t10851*t854))*var2[7])*var2[8] + t5256*var3[0] + t10266*var3[1] + t10257*var3[2] + t10465*var3[3] + t10450*var3[4] + t10431*var3[5] + t10370*var3[6] + t10400*var3[7] - 1.284e-8*var3[8] - 1.*var4[2];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "ddh_FlFoot_QuadrupleStance.hh"

namespace QuadrupleStance
{

void ddh_FlFoot_QuadrupleStance_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
