/*
 * Automatically Generated from Mathematica.
 * Fri 10 Dec 2021 20:18:08 GMT+01:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t1909;
  double t1983;
  double t2149;
  double t627;
  double t892;
  double t1367;
  double t1436;
  double t1591;
  double t1603;
  double t3111;
  double t1734;
  double t2068;
  double t2147;
  double t2171;
  double t2181;
  double t2365;
  double t250;
  double t3309;
  double t3801;
  double t3923;
  double t4118;
  double t4180;
  double t4310;
  double t4311;
  double t4475;
  double t3087;
  double t4341;
  double t4436;
  double t121;
  double t4478;
  double t4479;
  double t4482;
  double t4508;
  double t4474;
  double t4485;
  double t4489;
  double t97;
  double t4551;
  double t4570;
  double t4571;
  double t4597;
  double t4599;
  double t4612;
  double t4622;
  double t4723;
  double t4739;
  double t4796;
  double t4829;
  double t4848;
  double t4973;
  double t4986;
  double t4987;
  double t5008;
  double t5002;
  double t5012;
  double t5062;
  double t5113;
  double t5119;
  double t5156;
  double t5208;
  double t5224;
  double t5226;
  double t5259;
  double t5267;
  double t5268;
  double t5411;
  double t5412;
  double t5413;
  double t5418;
  double t5419;
  double t5421;
  double t5488;
  double t5490;
  double t5493;
  double t5512;
  double t5520;
  double t5521;
  double t5554;
  double t5609;
  double t5612;
  double t5613;
  double t5615;
  double t5362;
  double t5364;
  double t5366;
  double t5390;
  double t5408;
  double t5479;
  double t5594;
  double t5617;
  double t5622;
  double t5640;
  double t5641;
  double t5648;
  double t5653;
  double t5669;
  double t5670;
  double t5690;
  double t5099;
  double t5173;
  double t5185;
  double t5255;
  double t5272;
  double t5274;
  double t5275;
  double t5276;
  double t5281;
  double t5283;
  double t5292;
  double t5304;
  double t5367;
  double t5623;
  double t5693;
  double t5696;
  double t5710;
  double t5712;
  double t5730;
  double t5770;
  double t5780;
  double t5791;
  double t5799;
  double t5821;
  double t5834;
  double t5854;
  double t5861;
  double t5863;
  double t5874;
  double t5877;
  double t5883;
  double t5889;
  double t5907;
  double t5959;
  double t5965;
  double t5967;
  double t6098;
  double t6100;
  double t6122;
  double t6126;
  double t6164;
  double t6222;
  double t6223;
  double t6279;
  double t6345;
  double t6362;
  double t6364;
  double t6371;
  double t6384;
  double t5927;
  double t5931;
  double t5939;
  double t6073;
  double t6083;
  double t6092;
  double t6133;
  double t6168;
  double t6194;
  double t6212;
  double t6356;
  double t6398;
  double t6402;
  double t6413;
  double t6420;
  double t6421;
  double t6428;
  double t6432;
  double t6439;
  double t6577;
  double t6585;
  double t6589;
  double t6213;
  double t6446;
  double t6474;
  double t6600;
  double t6602;
  double t6603;
  double t5977;
  double t6034;
  double t6046;
  double t6730;
  double t6736;
  double t6738;
  double t6491;
  double t6506;
  double t6536;
  double t6590;
  double t6605;
  double t6606;
  double t6609;
  double t6787;
  double t6788;
  double t6791;
  double t6612;
  double t6595;
  double t6596;
  double t6598;
  double t6847;
  double t6848;
  double t6854;
  double t6786;
  double t6794;
  double t6779;
  double t6780;
  double t6781;
  double t6846;
  double t6863;
  double t6613;
  double t6616;
  double t6620;
  double t6959;
  double t6961;
  double t6964;
  double t6965;
  double t6966;
  double t6971;
  double t6972;
  double t7048;
  double t7051;
  double t6986;
  double t6987;
  double t6988;
  double t6990;
  double t6772;
  double t6773;
  double t6774;
  double t7094;
  double t7096;
  double t7102;
  double t7018;
  double t7032;
  double t7033;
  double t7161;
  double t7162;
  double t6882;
  double t6887;
  double t6892;
  double t7142;
  double t7145;
  double t7208;
  double t7209;
  double t7212;
  double t7182;
  double t7202;
  double t7205;
  double t7241;
  double t7244;
  double t7164;
  double t7207;
  double t7148;
  double t7153;
  double t7225;
  double t7262;
  double t7509;
  double t7513;
  double t7515;
  double t7495;
  double t7496;
  double t7500;
  double t7503;
  double t7504;
  double t7385;
  double t7388;
  double t7410;
  double t7413;
  double t7466;
  double t7476;
  double t7478;
  double t7488;
  double t7489;
  double t7491;
  double t7439;
  double t7440;
  double t7441;
  double t7449;
  double t7453;
  double t7454;
  double t7360;
  double t7366;
  double t7368;
  double t7426;
  double t7432;
  double t7436;
  double t7437;
  double t7518;
  double t7520;
  double t7521;
  double t7456;
  double t7516;
  double t7548;
  double t7553;
  double t7715;
  double t7726;
  double t7730;
  double t7667;
  double t7672;
  double t7680;
  double t7540;
  double t7541;
  double t7543;
  double t7544;
  double t7555;
  double t7556;
  double t7558;
  double t7573;
  double t7576;
  double t7578;
  double t7582;
  double t7587;
  double t7589;
  double t7567;
  double t7571;
  double t7579;
  double t7591;
  double t7607;
  double t7844;
  double t7860;
  double t7868;
  double t7876;
  double t7879;
  double t7881;
  double t7733;
  double t7739;
  double t7741;
  double t7758;
  double t7761;
  double t7764;
  double t7789;
  double t7790;
  double t7798;
  double t7814;
  double t7818;
  double t7828;
  double t7959;
  double t7965;
  double t7966;
  double t7938;
  double t7942;
  double t7947;
  double t7921;
  double t7923;
  double t7929;
  double t7974;
  double t7981;
  double t7982;
  double t7934;
  double t7970;
  double t7950;
  double t7956;
  double t7957;
  double t8000;
  double t8003;
  double t8010;
  double t8071;
  double t8073;
  double t8076;
  double t7990;
  double t7992;
  double t8049;
  double t8053;
  double t8058;
  double t8042;
  double t8046;
  double t8047;
  double t8083;
  double t8084;
  double t8088;
  double t7374;
  double t7375;
  double t7382;
  double t8145;
  double t8146;
  double t8154;
  double t8158;
  double t8160;
  double t8161;
  double t8166;
  double t8167;
  double t8168;
  double t8182;
  double t8183;
  double t8184;
  double t8186;
  double t8121;
  double t8123;
  double t8128;
  double t8157;
  double t8165;
  double t8169;
  double t8170;
  double t8172;
  double t8173;
  double t8176;
  double t8177;
  double t8246;
  double t8247;
  double t8248;
  double t8253;
  double t8254;
  double t8256;
  double t8258;
  double t8259;
  double t8260;
  double t8262;
  double t8263;
  double t8265;
  double t8266;
  double t8117;
  double t8118;
  double t8135;
  double t8137;
  double t8140;
  double t7626;
  double t7627;
  double t7628;
  double t8181;
  double t8210;
  double t8216;
  double t8319;
  double t8323;
  double t8324;
  double t8315;
  double t8316;
  double t8317;
  double t8201;
  double t8203;
  double t8205;
  double t8206;
  double t8217;
  double t8219;
  double t8291;
  double t8296;
  double t8297;
  double t8299;
  double t8300;
  double t8301;
  double t8281;
  double t8288;
  double t8289;
  double t8298;
  double t8302;
  double t8303;
  double t8352;
  double t8353;
  double t8354;
  double t8358;
  double t8359;
  double t8362;
  double t8337;
  double t8339;
  double t8341;
  double t8343;
  double t8344;
  double t8345;
  double t8379;
  double t8384;
  double t8385;
  double t8374;
  double t8375;
  double t8376;
  double t8397;
  double t8399;
  double t8400;
  double t8378;
  double t8407;
  double t8409;
  double t8410;
  double t8404;
  double t8406;
  double t8439;
  double t8442;
  double t8443;
  double t8432;
  double t8433;
  double t8434;
  double t8451;
  double t8452;
  double t8456;
  double t4946;
  double t4951;
  double t4955;
  double t7777;
  double t7778;
  double t7779;
  double t7528;
  double t7530;
  double t7537;
  double t8533;
  double t8536;
  double t8544;
  double t8555;
  double t6629;
  double t6632;
  double t6638;
  double t5187;
  double t5321;
  double t5361;
  double t8478;
  double t8479;
  double t8487;
  double t8605;
  double t8611;
  double t8606;
  double t8607;
  double t8608;
  double t8665;
  double t8668;
  double t8689;
  double t8691;
  double t8613;
  double t8615;
  double t8617;
  double t8673;
  double t8677;
  double t8678;
  double t8681;
  double t8682;
  double t8684;
  double t8774;
  double t8775;
  double t8784;
  double t8785;
  double t8824;
  double t8834;
  double t8862;
  double t8866;
  double t8100;
  double t8102;
  double t8104;
  double t8911;
  double t8914;
  double t8064;
  double t8068;
  double t8069;
  double t7572;
  double t7618;
  double t7622;
  double t8923;
  double t8928;
  double t8839;
  double t8841;
  double t8842;
  double t9019;
  double t9020;
  double t9022;
  double t9035;
  double t9036;
  double t9037;
  double t9040;
  double t9041;
  double t9042;
  double t9044;
  double t9045;
  double t9046;
  double t9048;
  double t8988;
  double t8882;
  double t8883;
  double t8884;
  double t9000;
  double t9011;
  double t8462;
  double t8463;
  double t8467;
  double t9089;
  double t8290;
  double t8304;
  double t8307;
  double t9104;
  double t9111;
  double t8582;
  double t8583;
  double t8586;
  double t8886;
  double t8887;
  double t8889;
  double t8845;
  double t8849;
  double t8850;
  double t8252;
  double t9194;
  double t9195;
  double t9200;
  double t9203;
  double t9244;
  double t9269;
  double t9317;
  double t9320;
  double t9247;
  double t9250;
  double t9252;
  double t9327;
  double t9330;
  double t9271;
  double t9273;
  double t9274;
  double t9308;
  double t9310;
  double t9311;
  double t9333;
  double t9335;
  double t9336;
  double t9411;
  double t9413;
  double t9424;
  double t9428;
  double t9487;
  double t9492;
  double t9506;
  double t9509;
  double t9549;
  double t9559;
  double t9564;
  double t9565;
  double t9479;
  double t9480;
  double t9481;
  double t9498;
  double t9499;
  double t9500;
  double t9622;
  double t9623;
  double t9624;
  double t9625;
  double t9627;
  double t9631;
  double t9632;
  double t9633;
  double t9634;
  double t9635;
  double t9636;
  double t9638;
  double t9639;
  double t9642;
  double t9644;
  double t9645;
  double t9646;
  double t9647;
  double t9648;
  double t9649;
  double t9519;
  double t9520;
  double t9521;
  double t9534;
  double t9535;
  double t9537;
  double t9597;
  double t9602;
  double t9610;
  double t9612;
  double t9693;
  double t9698;
  double t9702;
  double t9703;
  double t9228;
  double t9229;
  double t9230;
  t1909 = Cos(var1[7]);
  t1983 = -1. + t1909;
  t2149 = Sin(var1[8]);
  t627 = Cos(var1[8]);
  t892 = -1.*t627;
  t1367 = 1. + t892;
  t1436 = -1.000000000016*t1367;
  t1591 = 1. + t1436;
  t1603 = Sin(var1[7]);
  t3111 = Cos(var1[6]);
  t1734 = -4.e-6*t1591*t1603;
  t2068 = 1.6e-11*t1983;
  t2147 = 1. + t2068;
  t2171 = -4.e-6*t2147*t2149;
  t2181 = -4.e-6*t1983*t2149;
  t2365 = t1734 + t2171 + t2181;
  t250 = Sin(var1[6]);
  t3309 = -1.*t1909;
  t3801 = 1. + t3309;
  t3923 = -1.000000000016*t3801;
  t4118 = 1. + t3923;
  t4180 = t4118*t1591;
  t4310 = -1.000000000016*t1603*t2149;
  t4311 = t4180 + t4310;
  t4475 = Cos(var1[5]);
  t3087 = -1.*t250*t2365;
  t4341 = t3111*t4311;
  t4436 = t3087 + t4341;
  t121 = Sin(var1[5]);
  t4478 = t3111*t2365;
  t4479 = t250*t4311;
  t4482 = t4478 + t4479;
  t4508 = Cos(var1[3]);
  t4474 = t121*t4436;
  t4485 = t4475*t4482;
  t4489 = t4474 + t4485;
  t97 = Sin(var1[3]);
  t4551 = Cos(var1[4]);
  t4570 = -1.*t1591*t1603;
  t4571 = -1.6e-11*t1983*t2149;
  t4597 = -1.*t1909*t2149;
  t4599 = t4570 + t4571 + t4597;
  t4612 = t4551*t4599;
  t4622 = Sin(var1[4]);
  t4723 = t4475*t4436;
  t4739 = -1.*t121*t4482;
  t4796 = t4723 + t4739;
  t4829 = -1.*t4622*t4796;
  t4848 = t4612 + t4829;
  t4973 = -1.*t4622*t4599;
  t4986 = -1.*t4551*t4796;
  t4987 = t4973 + t4986;
  t5008 = -1. + t627;
  t5002 = 1.6e-11*t1367;
  t5012 = 1.6e-11*t5008;
  t5062 = 1. + t5002 + t5012;
  t5113 = 4.e-6*t5008;
  t5119 = -4.e-6*t627;
  t5156 = t5113 + t5119;
  t5208 = t2147*t5062;
  t5224 = 4.e-6*t1983*t5156;
  t5226 = t5208 + t5224;
  t5259 = 4.e-6*t5062*t1603;
  t5267 = t5156*t1603;
  t5268 = t5259 + t5267;
  t5411 = 5.136e-14*var1[8];
  t5412 = -0.03874900000062*t1367;
  t5413 = 5.9484e-7*t5008;
  t5418 = -0.03875*t627;
  t5419 = -0.299999999992*t2149;
  t5421 = t5411 + t5412 + t5413 + t5418 + t5419;
  t5488 = -1.284e-8*var1[8];
  t5490 = 1. + t5012;
  t5493 = 0.14871*t5490;
  t5512 = -1.5499600000248e-7*t1367;
  t5520 = -1.55e-7*t5008;
  t5521 = -1.199999999968e-6*t2149;
  t5554 = t5488 + t5493 + t5512 + t5520 + t5521;
  t5609 = 0.80321*t1591;
  t5612 = 0.503210000016051*t1367;
  t5613 = -4.05159380016e-7*t2149;
  t5615 = t5609 + t5612 + t5613;
  t5362 = -1.*t3111;
  t5364 = 1. + t5362;
  t5366 = 0.15121*t5364;
  t5390 = 0.281210000008499*t3801;
  t5408 = 0.03874900000062*t1603;
  t5479 = t1603*t5421;
  t5594 = 4.e-6*t1603*t5554;
  t5617 = t4118*t5615;
  t5622 = t5390 + t5408 + t5479 + t5594 + t5617;
  t5640 = -1.2484e-7*var1[7];
  t5641 = -1.5499600000248e-7*t3801;
  t5648 = 1.124840000016e-6*t1603;
  t5653 = 4.e-6*t1983*t5421;
  t5669 = t2147*t5554;
  t5670 = -4.e-6*t1603*t5615;
  t5690 = t5640 + t5641 + t5648 + t5653 + t5669 + t5670;
  t5099 = 4.e-6*t1983*t5062;
  t5173 = t1909*t5156;
  t5185 = t5099 + t5173;
  t5255 = -1.*t5226*t250;
  t5272 = t3111*t5268;
  t5274 = t5255 + t5272;
  t5275 = t4475*t5274;
  t5276 = t3111*t5226;
  t5281 = t250*t5268;
  t5283 = t5276 + t5281;
  t5292 = -1.*t121*t5283;
  t5304 = t5275 + t5292;
  t5367 = -0.15121*t250;
  t5623 = t250*t5622;
  t5693 = t3111*t5690;
  t5696 = t5366 + t5367 + t5623 + t5693;
  t5710 = -1.*t121*t5696;
  t5712 = 0.15121*t250;
  t5730 = t3111*t5622;
  t5770 = -1.*t250*t5690;
  t5780 = t5366 + t5712 + t5730 + t5770;
  t5791 = t4475*t5780;
  t5799 = t5710 + t5791;
  t5821 = -1.*t4622*t5799;
  t5834 = 4.9936e-13*var1[7];
  t5854 = -0.03874900000062*t3801;
  t5861 = 0.281210000004*t1603;
  t5863 = t1909*t5421;
  t5874 = 4.e-6*t1983*t5554;
  t5877 = -1.*t1603*t5615;
  t5883 = t5834 + t5854 + t5861 + t5863 + t5874 + t5877;
  t5889 = t4551*t5883;
  t5907 = t5821 + t5889;
  t5959 = t4551*t5185;
  t5965 = -1.*t4622*t5304;
  t5967 = t5959 + t5965;
  t6098 = -1. + t5002;
  t6100 = 4.e-6*t6098;
  t6122 = 4.e-6*t1367;
  t6126 = t6100 + t6122;
  t6164 = t5002 + t892;
  t6222 = 4.e-6*t6126*t1603;
  t6223 = t6164*t1603;
  t6279 = -1.000000000016*t4118*t2149;
  t6345 = t6222 + t6223 + t6279;
  t6362 = t2147*t6126;
  t6364 = 4.e-6*t1983*t6164;
  t6371 = 4.000000000064e-6*t1603*t2149;
  t6384 = t6362 + t6364 + t6371;
  t5927 = t5185*t4622;
  t5931 = t4551*t5304;
  t5939 = t5927 + t5931;
  t6073 = t4551*t5799;
  t6083 = t4622*t5883;
  t6092 = t6073 + t6083;
  t6133 = 4.e-6*t1983*t6126;
  t6168 = t1909*t6164;
  t6194 = 1.000000000016*t1603*t2149;
  t6212 = t6133 + t6168 + t6194;
  t6356 = t250*t6345;
  t6398 = t3111*t6384;
  t6402 = t6356 + t6398;
  t6413 = -1.*t121*t6402;
  t6420 = t3111*t6345;
  t6421 = -1.*t250*t6384;
  t6428 = t6420 + t6421;
  t6432 = t4475*t6428;
  t6439 = t6413 + t6432;
  t6577 = t4475*t5696;
  t6585 = t121*t5780;
  t6589 = t6577 + t6585;
  t6213 = t4622*t6212;
  t6446 = t4551*t6439;
  t6474 = t6213 + t6446;
  t6600 = t4551*t6212;
  t6602 = -1.*t4622*t6439;
  t6603 = t6600 + t6602;
  t5977 = -1.*t4551*t5799;
  t6034 = -1.*t4622*t5883;
  t6046 = t5977 + t6034;
  t6730 = -1.*t121*t4436;
  t6736 = -1.*t4475*t4482;
  t6738 = t6730 + t6736;
  t6491 = t121*t5274;
  t6506 = t4475*t5283;
  t6536 = t6491 + t6506;
  t6590 = t6536*t6589;
  t6605 = t4475*t6402;
  t6606 = t121*t6428;
  t6609 = t6605 + t6606;
  t6787 = -1.*t4475*t5696;
  t6788 = -1.*t121*t5780;
  t6791 = t6787 + t6788;
  t6612 = -1.*t6589*t6609;
  t6595 = t5967*t5907;
  t6596 = t5939*t6092;
  t6598 = t6590 + t6595 + t6596;
  t6847 = -1.*t4475*t6402;
  t6848 = -1.*t121*t6428;
  t6854 = t6847 + t6848;
  t6786 = t6536*t5799;
  t6794 = t5304*t6589;
  t6779 = -1.*t121*t5274;
  t6780 = -1.*t4475*t5283;
  t6781 = t6779 + t6780;
  t6846 = -1.*t6589*t6439;
  t6863 = -1.*t5799*t6609;
  t6613 = -1.*t6092*t6474;
  t6616 = -1.*t5907*t6603;
  t6620 = t6612 + t6613 + t6616;
  t6959 = -1.*t3111*t2365;
  t6961 = -1.*t250*t4311;
  t6964 = t6959 + t6961;
  t6965 = t4475*t6964;
  t6966 = t6730 + t6965;
  t6971 = t121*t6964;
  t6972 = t4723 + t6971;
  t7048 = -0.15121*t3111;
  t7051 = t7048 + t5712 + t5730 + t5770;
  t6986 = 0.15121*t3111;
  t6987 = -1.*t250*t5622;
  t6988 = -1.*t3111*t5690;
  t6990 = t6986 + t5712 + t6987 + t6988;
  t6772 = t5304*t5799;
  t6773 = t5185*t5883;
  t6774 = t6772 + t6590 + t6773;
  t7094 = -1.*t250*t6345;
  t7096 = -1.*t3111*t6384;
  t7102 = t7094 + t7096;
  t7018 = -1.*t3111*t5226;
  t7032 = -1.*t250*t5268;
  t7033 = t7018 + t7032;
  t7161 = t121*t7033;
  t7162 = t5275 + t7161;
  t6882 = -1.*t5883*t6212;
  t6887 = -1.*t5799*t6439;
  t6892 = t6882 + t6887 + t6612;
  t7142 = t121*t7102;
  t7145 = t7142 + t6432;
  t7208 = t4475*t6990;
  t7209 = -1.*t121*t7051;
  t7212 = t7208 + t7209;
  t7182 = t121*t6990;
  t7202 = t4475*t7051;
  t7205 = t7182 + t7202;
  t7241 = t4475*t7102;
  t7244 = t7241 + t6848;
  t7164 = t7162*t6589;
  t7207 = t6536*t7205;
  t7148 = t4475*t7033;
  t7153 = t6779 + t7148;
  t7225 = -1.*t6589*t7145;
  t7262 = -1.*t7205*t6609;
  t7509 = -4.e-6*t5062*t1603;
  t7513 = -1.*t5156*t1603;
  t7515 = t7509 + t7513;
  t7495 = 0.03874900000062*t1909;
  t7496 = 0.281210000008499*t1603;
  t7500 = 4.e-6*t1909*t5554;
  t7503 = -1.000000000016*t1603*t5615;
  t7504 = t7495 + t7496 + t5863 + t7500 + t7503;
  t7385 = -4.e-6*t6126*t1603;
  t7388 = -1.*t6164*t1603;
  t7410 = 1.000000000016*t1909*t2149;
  t7413 = t7385 + t7388 + t7410;
  t7466 = 1.124840000016e-6*t1909;
  t7476 = -1.5499600000248e-7*t1603;
  t7478 = -4.e-6*t1603*t5421;
  t7488 = -1.6e-11*t1603*t5554;
  t7489 = -4.e-6*t1909*t5615;
  t7491 = -1.2484e-7 + t7466 + t7476 + t7478 + t7488 + t7489;
  t7439 = 0.281210000004*t1909;
  t7440 = -0.03874900000062*t1603;
  t7441 = -1.*t1603*t5421;
  t7449 = -4.e-6*t1603*t5554;
  t7453 = -1.*t1909*t5615;
  t7454 = 4.9936e-13 + t7439 + t7440 + t7441 + t7449 + t7453;
  t7360 = -1.000000000016*t1591*t1603;
  t7366 = -1.000000000016*t1909*t2149;
  t7368 = t7360 + t7366;
  t7426 = -4.e-6*t1909*t1591;
  t7432 = t7426 + t6371;
  t7436 = 4.e-6*t1909*t5062;
  t7437 = t7436 + t5173;
  t7518 = -1.6e-11*t5062*t1603;
  t7520 = -4.e-6*t5156*t1603;
  t7521 = t7518 + t7520;
  t7456 = t5185*t7454;
  t7516 = t7515*t5883;
  t7548 = -1.*t5883*t7413;
  t7553 = -1.*t7454*t6212;
  t7715 = t3111*t7491;
  t7726 = t250*t7504;
  t7730 = t7715 + t7726;
  t7667 = -1.*t250*t7491;
  t7672 = t3111*t7504;
  t7680 = t7667 + t7672;
  t7540 = -1.6e-11*t6126*t1603;
  t7541 = -4.e-6*t6164*t1603;
  t7543 = 4.000000000064e-6*t1909*t2149;
  t7544 = t7540 + t7541 + t7543;
  t7555 = 4.e-6*t1909*t6126;
  t7556 = 1.000000000032*t1603*t2149;
  t7558 = t7555 + t6168 + t7556;
  t7573 = t250*t7368;
  t7576 = t3111*t7432;
  t7578 = t7573 + t7576;
  t7582 = t3111*t7368;
  t7587 = -1.*t250*t7432;
  t7589 = t7582 + t7587;
  t7567 = -1.*t1909*t1591;
  t7571 = t7567 + t6194;
  t7579 = -1.*t121*t7578;
  t7591 = t4475*t7589;
  t7607 = t7579 + t7591;
  t7844 = t4475*t7578;
  t7860 = t121*t7589;
  t7868 = t7844 + t7860;
  t7876 = t4551*t7571;
  t7879 = -1.*t4622*t7607;
  t7881 = t7876 + t7879;
  t7733 = t7437*t250;
  t7739 = t3111*t7521;
  t7741 = t7733 + t7739;
  t7758 = t3111*t7437;
  t7761 = -1.*t250*t7521;
  t7764 = t7758 + t7761;
  t7789 = -1.*t250*t7544;
  t7790 = t3111*t7558;
  t7798 = t7789 + t7790;
  t7814 = t3111*t7544;
  t7818 = t250*t7558;
  t7828 = t7814 + t7818;
  t7959 = t4475*t7741;
  t7965 = t121*t7764;
  t7966 = t7959 + t7965;
  t7938 = t4475*t7680;
  t7942 = -1.*t121*t7730;
  t7947 = t7938 + t7942;
  t7921 = t121*t7680;
  t7923 = t4475*t7730;
  t7929 = t7921 + t7923;
  t7974 = t121*t7798;
  t7981 = t4475*t7828;
  t7982 = t7974 + t7981;
  t7934 = t6536*t7929;
  t7970 = t7966*t6589;
  t7950 = -1.*t121*t7741;
  t7956 = t4475*t7764;
  t7957 = t7950 + t7956;
  t8000 = t4475*t7798;
  t8003 = -1.*t121*t7828;
  t8010 = t8000 + t8003;
  t8071 = t4622*t7515;
  t8073 = t4551*t7957;
  t8076 = t8071 + t8073;
  t7990 = -1.*t7929*t6609;
  t7992 = -1.*t6589*t7982;
  t8049 = t4551*t7947;
  t8053 = t4622*t7454;
  t8058 = t8049 + t8053;
  t8042 = -1.*t4622*t7947;
  t8046 = t4551*t7454;
  t8047 = t8042 + t8046;
  t8083 = t4622*t7413;
  t8084 = t4551*t8010;
  t8088 = t8083 + t8084;
  t7374 = t5268*t5622;
  t7375 = t5226*t5690;
  t7382 = t7374 + t6773 + t7375;
  t8145 = -4.05159380016e-7*t627;
  t8146 = -0.2999999999968*t2149;
  t8154 = t8145 + t8146;
  t8158 = -1.199999999968e-6*t627;
  t8160 = 1.620637520064e-12*t2149;
  t8161 = -1.284e-8 + t8158 + t8160;
  t8166 = -0.299999999992*t627;
  t8167 = 4.05159380016e-7*t2149;
  t8168 = 5.136e-14 + t8166 + t8167;
  t8182 = t4118*t8154;
  t8183 = 4.e-6*t1603*t8161;
  t8184 = t1603*t8168;
  t8186 = t8182 + t8183 + t8184;
  t8121 = 1.000000000016*t627*t1603;
  t8123 = 1.6000000000256e-11*t1983*t2149;
  t8128 = t8121 + t8123 + t7410;
  t8157 = -4.e-6*t1603*t8154;
  t8165 = t2147*t8161;
  t8169 = 4.e-6*t1983*t8168;
  t8170 = t8157 + t8165 + t8169;
  t8172 = -1.*t1603*t8154;
  t8173 = 4.e-6*t1983*t8161;
  t8176 = t1909*t8168;
  t8177 = t8172 + t8173 + t8176;
  t8246 = t5062*t8161;
  t8247 = t5156*t8168;
  t8248 = t8246 + t8247;
  t8253 = t5156*t5421;
  t8254 = t5062*t5554;
  t8256 = t8253 + t8254;
  t8258 = 1.000000000016*t627*t5615;
  t8259 = -1.*t6126*t8161;
  t8260 = -1.*t6164*t8168;
  t8262 = 1.000000000016*t8154*t2149;
  t8263 = -1.000000000016*t5421*t2149;
  t8265 = -4.000000000064e-6*t5554*t2149;
  t8266 = t8258 + t8259 + t8260 + t8262 + t8263 + t8265;
  t8117 = -1.000000000016*t627*t1603;
  t8118 = t8117 + t6279;
  t8135 = -4.e-6*t2147*t627;
  t8137 = -4.e-6*t1983*t627;
  t8140 = t8135 + t8137 + t6371;
  t7626 = t5283*t5696;
  t7627 = t5274*t5780;
  t7628 = t7626 + t7627 + t6773;
  t8181 = t5185*t8177;
  t8210 = -1.*t5883*t8128;
  t8216 = -1.*t8177*t6212;
  t8319 = t3111*t8170;
  t8323 = t250*t8186;
  t8324 = t8319 + t8323;
  t8315 = -1.*t250*t8170;
  t8316 = t3111*t8186;
  t8317 = t8315 + t8316;
  t8201 = 4.000000000064e-6*t627*t1603;
  t8203 = 4.000000000064e-6*t2147*t2149;
  t8205 = 4.000000000064e-6*t1983*t2149;
  t8206 = t8201 + t8203 + t8205;
  t8217 = -1.000000000016*t4118*t627;
  t8219 = t8217 + t7556;
  t8291 = t250*t8118;
  t8296 = t3111*t8140;
  t8297 = t8291 + t8296;
  t8299 = t3111*t8118;
  t8300 = -1.*t250*t8140;
  t8301 = t8299 + t8300;
  t8281 = -1.6e-11*t1983*t627;
  t8288 = -1.*t1909*t627;
  t8289 = t8281 + t8288 + t6194;
  t8298 = -1.*t121*t8297;
  t8302 = t4475*t8301;
  t8303 = t8298 + t8302;
  t8352 = t4475*t8297;
  t8353 = t121*t8301;
  t8354 = t8352 + t8353;
  t8358 = t4551*t8289;
  t8359 = -1.*t4622*t8303;
  t8362 = t8358 + t8359;
  t8337 = -1.*t250*t8206;
  t8339 = t3111*t8219;
  t8341 = t8337 + t8339;
  t8343 = t3111*t8206;
  t8344 = t250*t8219;
  t8345 = t8343 + t8344;
  t8379 = t4475*t8317;
  t8384 = -1.*t121*t8324;
  t8385 = t8379 + t8384;
  t8374 = t121*t8317;
  t8375 = t4475*t8324;
  t8376 = t8374 + t8375;
  t8397 = t121*t8341;
  t8399 = t4475*t8345;
  t8400 = t8397 + t8399;
  t8378 = t6536*t8376;
  t8407 = t4475*t8341;
  t8409 = -1.*t121*t8345;
  t8410 = t8407 + t8409;
  t8404 = -1.*t8376*t6609;
  t8406 = -1.*t6589*t8400;
  t8439 = t4551*t8385;
  t8442 = t4622*t8177;
  t8443 = t8439 + t8442;
  t8432 = -1.*t4622*t8385;
  t8433 = t4551*t8177;
  t8434 = t8432 + t8433;
  t8451 = t4622*t8128;
  t8452 = t4551*t8410;
  t8456 = t8451 + t8452;
  t4946 = t4508*t4489;
  t4951 = -1.*t97*t4848;
  t4955 = t4946 + t4951;
  t7777 = -1.*t5696*t6402;
  t7778 = -1.*t5780*t6428;
  t7779 = t6882 + t7777 + t7778;
  t7528 = -1.*t5622*t6345;
  t7530 = -1.*t5690*t6384;
  t7537 = t7528 + t7530 + t6882;
  t8533 = -1.*t6164*t5421;
  t8536 = -1.*t6126*t5554;
  t8544 = 1.000000000016*t5615*t2149;
  t8555 = t8533 + t8536 + t8544;
  t6629 = -1.*t4622*t6212;
  t6632 = -1.*t4551*t6439;
  t6638 = t6629 + t6632;
  t5187 = -1.*t5185*t4622;
  t5321 = -1.*t4551*t5304;
  t5361 = t5187 + t5321;
  t8478 = t4622*t4599;
  t8479 = t4551*t4796;
  t8487 = t8478 + t8479;
  t8605 = -1.*t6536*t6589;
  t8611 = t6589*t4489;
  t8606 = -1.*t5967*t5907;
  t8607 = -1.*t5939*t6092;
  t8608 = t8605 + t8606 + t8607;
  t8665 = -1.*t6536*t5799;
  t8668 = -1.*t5304*t6589;
  t8689 = t5799*t4489;
  t8691 = t6589*t4796;
  t8613 = t6092*t8487;
  t8615 = t5907*t4848;
  t8617 = t8611 + t8613 + t8615;
  t8673 = -1.*t5304*t5799;
  t8677 = -1.*t5185*t5883;
  t8678 = t8673 + t8605 + t8677;
  t8681 = t5883*t4599;
  t8682 = t5799*t4796;
  t8684 = t8681 + t8611 + t8682;
  t8774 = -1.*t7162*t6589;
  t8775 = -1.*t6536*t7205;
  t8784 = t6589*t6972;
  t8785 = t7205*t4489;
  t8824 = -1.*t5185*t7454;
  t8834 = -1.*t7515*t5883;
  t8862 = t7454*t4599;
  t8866 = t5883*t7571;
  t8100 = t4551*t7413;
  t8102 = -1.*t4622*t8010;
  t8104 = t8100 + t8102;
  t8911 = -1.*t6536*t7929;
  t8914 = -1.*t7966*t6589;
  t8064 = t4551*t7515;
  t8068 = -1.*t4622*t7957;
  t8069 = t8064 + t8068;
  t7572 = t4622*t7571;
  t7618 = t4551*t7607;
  t7622 = t7572 + t7618;
  t8923 = t7929*t4489;
  t8928 = t6589*t7868;
  t8839 = -1.*t5268*t5622;
  t8841 = -1.*t5226*t5690;
  t8842 = t8839 + t8677 + t8841;
  t9019 = -1.*t5156*t5421;
  t9020 = -1.*t5062*t5554;
  t9022 = t9019 + t9020;
  t9035 = -1.*t5062*t8161;
  t9036 = -1.*t5156*t8168;
  t9037 = t9035 + t9036;
  t9040 = t1591*t8154;
  t9041 = -1.*t627*t5421;
  t9042 = -4.e-6*t627*t5554;
  t9044 = -1.000000000016*t5615*t2149;
  t9045 = -4.e-6*t8161*t2149;
  t9046 = -1.*t8168*t2149;
  t9048 = t9040 + t9041 + t9042 + t9044 + t9045 + t9046;
  t8988 = -1.*t5185*t8177;
  t8882 = -1.*t5283*t5696;
  t8883 = -1.*t5274*t5780;
  t8884 = t8882 + t8883 + t8677;
  t9000 = t8177*t4599;
  t9011 = t5883*t8289;
  t8462 = t4551*t8128;
  t8463 = -1.*t4622*t8410;
  t8467 = t8462 + t8463;
  t9089 = -1.*t6536*t8376;
  t8290 = t4622*t8289;
  t8304 = t4551*t8303;
  t8307 = t8290 + t8304;
  t9104 = t8376*t4489;
  t9111 = t6589*t8354;
  t8582 = t4508*t6609;
  t8583 = -1.*t97*t6603;
  t8586 = t8582 + t8583;
  t8886 = t5780*t4436;
  t8887 = t5696*t4482;
  t8889 = t8681 + t8886 + t8887;
  t8845 = t5690*t2365;
  t8849 = t5622*t4311;
  t8850 = t8845 + t8681 + t8849;
  t8252 = -0.03874900000062*t2149;
  t9194 = t1591*t5615;
  t9195 = -1.*t5421*t2149;
  t9200 = -4.e-6*t5554*t2149;
  t9203 = t9194 + t9195 + t9200;
  t9244 = -1.*t6589*t4489;
  t9269 = t6589*t6609;
  t9317 = -1.*t5799*t4489;
  t9320 = -1.*t6589*t4796;
  t9247 = -1.*t6092*t8487;
  t9250 = -1.*t5907*t4848;
  t9252 = t9244 + t9247 + t9250;
  t9327 = t6589*t6439;
  t9330 = t5799*t6609;
  t9271 = t6092*t6474;
  t9273 = t5907*t6603;
  t9274 = t9269 + t9271 + t9273;
  t9308 = -1.*t5883*t4599;
  t9310 = -1.*t5799*t4796;
  t9311 = t9308 + t9244 + t9310;
  t9333 = t5883*t6212;
  t9335 = t5799*t6439;
  t9336 = t9333 + t9335 + t9269;
  t9411 = -1.*t6589*t6972;
  t9413 = -1.*t7205*t4489;
  t9424 = t6589*t7145;
  t9428 = t7205*t6609;
  t9487 = -1.*t7454*t4599;
  t9492 = -1.*t5883*t7571;
  t9506 = t5883*t7413;
  t9509 = t7454*t6212;
  t9549 = -1.*t7929*t4489;
  t9559 = -1.*t6589*t7868;
  t9564 = t7929*t6609;
  t9565 = t6589*t7982;
  t9479 = -1.*t5690*t2365;
  t9480 = -1.*t5622*t4311;
  t9481 = t9479 + t9308 + t9480;
  t9498 = t5622*t6345;
  t9499 = t5690*t6384;
  t9500 = t9498 + t9499 + t9333;
  t9622 = -1.*t1591*t5615;
  t9623 = t5421*t2149;
  t9624 = 4.e-6*t5554*t2149;
  t9625 = t9622 + t9623 + t9624;
  t9627 = -1.000000000016*t627*t5615;
  t9631 = t6126*t8161;
  t9632 = t6164*t8168;
  t9633 = -1.000000000016*t8154*t2149;
  t9634 = 1.000000000016*t5421*t2149;
  t9635 = 4.000000000064e-6*t5554*t2149;
  t9636 = t9627 + t9631 + t9632 + t9633 + t9634 + t9635;
  t9638 = t6164*t5421;
  t9639 = t6126*t5554;
  t9642 = t9638 + t9639 + t9044;
  t9644 = -1.*t1591*t8154;
  t9645 = t627*t5421;
  t9646 = 4.e-6*t627*t5554;
  t9647 = 4.e-6*t8161*t2149;
  t9648 = t8168*t2149;
  t9649 = t9644 + t9645 + t9646 + t8544 + t9647 + t9648;
  t9519 = -1.*t5780*t4436;
  t9520 = -1.*t5696*t4482;
  t9521 = t9308 + t9519 + t9520;
  t9534 = t5696*t6402;
  t9535 = t5780*t6428;
  t9537 = t9333 + t9534 + t9535;
  t9597 = -1.*t8177*t4599;
  t9602 = -1.*t5883*t8289;
  t9610 = t5883*t8128;
  t9612 = t8177*t6212;
  t9693 = -1.*t8376*t4489;
  t9698 = -1.*t6589*t8354;
  t9702 = t8376*t6609;
  t9703 = t6589*t8400;
  t9228 = t4508*t6536;
  t9229 = -1.*t97*t5967;
  t9230 = t9228 + t9229;
  p_output1[0]=(-1.*t4508*t4848 - 1.*t4489*t97)*var2[1] + t4955*var2[2];
  p_output1[1]=t4848*var2[0] - 1.*t4987*t97*var2[1] + t4508*t4987*var2[2] + ((t5361*t5907 + t5907*t5939 + t5967*t6046 + t5967*t6092)*t6474 + t6598*t6603 + t5967*t6620 + t5939*(-1.*t5907*t6474 - 1.*t6046*t6603 - 1.*t6092*t6603 - 1.*t5907*t6638))*var2[3];
  p_output1[2]=t4551*t6738*var2[0] + (t4508*t4796 + t4622*t6738*t97)*var2[1] + (-1.*t4508*t4622*t6738 + t4796*t97)*var2[2] + (t4551*t6620*t6781 + t6474*(-1.*t4622*t5907*t6781 + t4551*t6092*t6781 + t6786 + t4551*t5939*t6791 - 1.*t4622*t5967*t6791 + t6794) + t4551*t6598*t6854 + t5939*(-1.*t4551*t6474*t6791 + t4622*t6603*t6791 + t6846 + t4622*t5907*t6854 - 1.*t4551*t6092*t6854 + t6863))*var2[3] + (t6439*t6774 + t6609*(t5799*t6781 + t6786 + t5304*t6791 + t6794) + t6536*(-1.*t6439*t6791 + t6846 - 1.*t5799*t6854 + t6863) + t5304*t6892)*var2[4];
  p_output1[3]=t4551*t6966*var2[0] + (t4508*t6972 + t4622*t6966*t97)*var2[1] + (-1.*t4508*t4622*t6966 + t6972*t97)*var2[2] + (t4551*t6620*t7153 + t6474*(-1.*t4622*t5907*t7153 + t4551*t6092*t7153 + t7164 + t7207 + t4551*t5939*t7212 - 1.*t4622*t5967*t7212) + t4551*t6598*t7244 + t5939*(-1.*t4551*t6474*t7212 + t4622*t6603*t7212 + t7225 + t4622*t5907*t7244 - 1.*t4551*t6092*t7244 + t7262))*var2[3] + (t6774*t7145 + t6892*t7162 + t6609*(t5799*t7153 + t7164 + t7207 + t5304*t7212) + t6536*(-1.*t6439*t7212 + t7225 - 1.*t5799*t7244 + t7262))*var2[4] + (t6212*(t5274*t5696 + t5274*t6990 + t5780*t7033 + t5283*t7051) + t5185*(-1.*t5696*t6428 - 1.*t6428*t6990 - 1.*t6402*t7051 - 1.*t5780*t7102))*var2[5];
  p_output1[4]=t7622*var2[0] + (t4508*t7868 - 1.*t7881*t97)*var2[1] + (t4508*t7881 + t7868*t97)*var2[2] + (t6620*t8076 + t6474*(t7934 + t7970 + t5967*t8047 + t5939*t8058 + t5907*t8069 + t6092*t8076) + t6598*t8088 + t5939*(t7990 + t7992 - 1.*t6603*t8047 - 1.*t6474*t8058 - 1.*t6092*t8088 - 1.*t5907*t8104))*var2[3] + (t6892*t7966 + t6609*(t7456 + t7516 + t7934 + t5304*t7947 + t5799*t7957 + t7970) + t6774*t7982 + t6536*(t7548 + t7553 - 1.*t6439*t7947 + t7990 + t7992 - 1.*t5799*t8010))*var2[4] + (t7413*t7628 + t6212*(t7456 + t7516 + t5274*t7680 + t5283*t7730 + t5696*t7741 + t5780*t7764) + t7515*t7779 + t5185*(t7548 + t7553 - 1.*t6428*t7680 - 1.*t6402*t7730 - 1.*t5780*t7798 - 1.*t5696*t7828))*var2[5] + (0.15121*t7368 + t7382*t7413 - 0.15121*t7432 + t6212*(t5622*t7437 + t7456 + t5226*t7491 + t5268*t7504 + t7516 + t5690*t7521) + t7515*t7537 + t5185*(-1.*t6384*t7491 - 1.*t6345*t7504 - 1.*t5690*t7544 + t7548 + t7553 - 1.*t5622*t7558))*var2[6];
  p_output1[5]=t8307*var2[0] + (t4508*t8354 - 1.*t8362*t97)*var2[1] + (t4508*t8362 + t8354*t97)*var2[2] + (t6474*(t8378 + t5967*t8434 + t5939*t8443) + t6598*t8456 + t5939*(t8404 + t8406 - 1.*t6603*t8434 - 1.*t6474*t8443 - 1.*t6092*t8456 - 1.*t5907*t8467))*var2[3] + (t6609*(t8181 + t8378 + t5304*t8385) + t6774*t8400 + t6536*(t8210 + t8216 - 1.*t6439*t8385 + t8404 + t8406 - 1.*t5799*t8410))*var2[4] + (t7628*t8128 + t6212*(t8181 + t5274*t8317 + t5283*t8324) + t5185*(t8210 + t8216 - 1.*t6428*t8317 - 1.*t6402*t8324 - 1.*t5780*t8341 - 1.*t5696*t8345))*var2[5] + (0.15121*t8118 + t7382*t8128 - 0.15121*t8140 + t6212*(t5226*t8170 + t8181 + t5268*t8186) + t5185*(-1.*t6384*t8170 - 1.*t6345*t8186 - 1.*t5690*t8206 + t8210 + t8216 - 1.*t5622*t8219))*var2[6] + (-0.281210000004*t627 + t6126*t8248 + t8252 + 4.000000000064e-6*t2149*t8256 + t5062*t8266 + 4.e-6*(-1.*t6164*t8248 - 1.000000000016*t2149*t8256 - 1.*t5156*t8266))*var2[7];
  p_output1[6]=t8487;
  p_output1[7]=t4955;
  p_output1[8]=t4508*t4848 + t4489*t97;
  p_output1[9]=t6474*t6598 + t5939*t6620;
  p_output1[10]=t6609*t6774 + t6536*t6892;
  p_output1[11]=t6212*t7628 + t5185*t7779;
  p_output1[12]=-0.15121*t2365 + 0.15121*t4311 + t6212*t7382 + t5185*t7537;
  p_output1[13]=0.038749*t1591 - 0.281210000004*t2149 + t6126*t8256 + t5062*t8555 + 4.e-6*(-1.*t6164*t8256 - 1.*t5156*t8555);
  p_output1[14]=-4.05160619990483e-7;
  p_output1[15]=(-1.*t4508*t6603 - 1.*t6609*t97)*var2[1] + t8586*var2[2];
  p_output1[16]=t6603*var2[0] - 1.*t6638*t97*var2[1] + t4508*t6638*var2[2] + ((-1.*t5361*t5907 - 1.*t5907*t5939 - 1.*t5967*t6046 - 1.*t5967*t6092)*t8487 + t5939*(t4987*t5907 + t4848*t6046 + t4848*t6092 + t5907*t8487) + t4848*t8608 + t5967*t8617)*var2[3];
  p_output1[17]=t4551*t6854*var2[0] + (t4508*t6439 + t4622*t6854*t97)*var2[1] + (-1.*t4508*t4622*t6854 + t6439*t97)*var2[2] + (t4551*t6738*t8608 + t4551*t6781*t8617 + t8487*(t4622*t5907*t6781 - 1.*t4551*t6092*t6781 - 1.*t4551*t5939*t6791 + t4622*t5967*t6791 + t8665 + t8668) + t5939*(-1.*t4622*t5907*t6738 + t4551*t6092*t6738 - 1.*t4622*t4848*t6791 + t4551*t6791*t8487 + t8689 + t8691))*var2[3] + (t4489*(-1.*t5799*t6781 - 1.*t5304*t6791 + t8665 + t8668) + t4796*t8678 + t5304*t8684 + t6536*(t5799*t6738 + t4796*t6791 + t8689 + t8691))*var2[4];
  p_output1[18]=t4551*t7244*var2[0] + (t4508*t7145 + t4622*t7244*t97)*var2[1] + (-1.*t4508*t4622*t7244 + t7145*t97)*var2[2] + (t4551*t6966*t8608 + t4551*t7153*t8617 + t8487*(t4622*t5907*t7153 - 1.*t4551*t6092*t7153 - 1.*t4551*t5939*t7212 + t4622*t5967*t7212 + t8774 + t8775) + t5939*(-1.*t4622*t5907*t6966 + t4551*t6092*t6966 - 1.*t4622*t4848*t7212 + t4551*t7212*t8487 + t8784 + t8785))*var2[3] + (t6972*t8678 + t7162*t8684 + t4489*(-1.*t5799*t7153 - 1.*t5304*t7212 + t8774 + t8775) + t6536*(t5799*t6966 + t4796*t7212 + t8784 + t8785))*var2[4] + (t5185*(t4436*t5696 + t5780*t6964 + t4436*t6990 + t4482*t7051) + t4599*(-1.*t5274*t5696 - 1.*t5274*t6990 - 1.*t5780*t7033 - 1.*t5283*t7051))*var2[5];
  p_output1[19]=t8088*var2[0] + (t4508*t7982 - 1.*t8104*t97)*var2[1] + (t4508*t8104 + t7982*t97)*var2[2] + (t7622*t8608 + t8076*t8617 + t8487*(-1.*t5967*t8047 - 1.*t5939*t8058 - 1.*t5907*t8069 - 1.*t6092*t8076 + t8911 + t8914) + t5939*(t6092*t7622 + t5907*t7881 + t4848*t8047 + t8058*t8487 + t8923 + t8928))*var2[3] + (t7868*t8678 + t7966*t8684 + t4489*(-1.*t5304*t7947 - 1.*t5799*t7957 + t8824 + t8834 + t8911 + t8914) + t6536*(t5799*t7607 + t4796*t7947 + t8862 + t8866 + t8923 + t8928))*var2[4] + (t4599*(-1.*t5274*t7680 - 1.*t5283*t7730 - 1.*t5696*t7741 - 1.*t5780*t7764 + t8824 + t8834) + t5185*(t5696*t7578 + t5780*t7589 + t4436*t7680 + t4482*t7730 + t8862 + t8866) + t7571*t8884 + t7515*t8889)*var2[5] + (-0.15121*t7544 + 0.15121*t7558 + t4599*(-1.*t5622*t7437 - 1.*t5226*t7491 - 1.*t5268*t7504 - 1.*t5690*t7521 + t8824 + t8834) + t7571*t8842 + t7515*t8850 + t5185*(t5622*t7368 + t5690*t7432 + t2365*t7491 + t4311*t7504 + t8862 + t8866))*var2[6];
  p_output1[20]=t8456*var2[0] + (t4508*t8400 - 1.*t8467*t97)*var2[1] + (t4508*t8467 + t8400*t97)*var2[2] + (t8307*t8608 + t8487*(-1.*t5967*t8434 - 1.*t5939*t8443 + t9089) + t5939*(t6092*t8307 + t5907*t8362 + t4848*t8434 + t8443*t8487 + t9104 + t9111))*var2[3] + (t8354*t8678 + t4489*(-1.*t5304*t8385 + t8988 + t9089) + t6536*(t5799*t8303 + t4796*t8385 + t9000 + t9011 + t9104 + t9111))*var2[4] + (t8289*t8884 + t4599*(-1.*t5274*t8317 - 1.*t5283*t8324 + t8988) + t5185*(t5696*t8297 + t5780*t8301 + t4436*t8317 + t4482*t8324 + t9000 + t9011))*var2[5] + (-0.15121*t8206 + 0.15121*t8219 + t8289*t8842 + t4599*(-1.*t5226*t8170 - 1.*t5268*t8186 + t8988) + t5185*(t5622*t8118 + t5690*t8140 + t2365*t8170 + t4311*t8186 + t9000 + t9011))*var2[6] + (0.281210000008499*t2149 - 0.03874900000062*t627 - 4.e-6*t627*t9022 - 4.e-6*t2149*t9037 + t5062*t9048 + 4.e-6*(t627*t9022 + t2149*t9037 - 1.*t5156*t9048))*var2[7];
  p_output1[21]=t6474;
  p_output1[22]=t8586;
  p_output1[23]=t4508*t6603 + t6609*t97;
  p_output1[24]=t8487*t8608 + t5939*t8617;
  p_output1[25]=t4489*t8678 + t6536*t8684;
  p_output1[26]=t4599*t8884 + t5185*t8889;
  p_output1[27]=0.15121*t6345 - 0.15121*t6384 + t4599*t8842 + t5185*t8850;
  p_output1[28]=1.e-6*t6126 + 0.28121*t6164 + t8252 - 4.e-6*t2149*t9022 + t5062*t9203 + 4.e-6*(t2149*t9022 - 1.*t5156*t9203);
  p_output1[29]=0.300000000004851;
  p_output1[30]=(-1.*t4508*t5967 - 1.*t6536*t97)*var2[1] + t9230*var2[2];
  p_output1[31]=t5967*var2[0] - 1.*t5361*t97*var2[1] + t4508*t5361*var2[2] + ((t5907*t6474 + t6046*t6603 + t6092*t6603 + t5907*t6638)*t8487 + t6474*(-1.*t4987*t5907 - 1.*t4848*t6046 - 1.*t4848*t6092 - 1.*t5907*t8487) + t6603*t9252 + t4848*t9274)*var2[3];
  p_output1[32]=t4551*t6781*var2[0] + (t4508*t5304 + t4622*t6781*t97)*var2[1] + (-1.*t4508*t4622*t6781 + t5304*t97)*var2[2] + (t4551*t6854*t9252 + t4551*t6738*t9274 + t6474*(t4622*t5907*t6738 - 1.*t4551*t6092*t6738 + t4622*t4848*t6791 - 1.*t4551*t6791*t8487 + t9317 + t9320) + t8487*(t4551*t6474*t6791 - 1.*t4622*t6603*t6791 - 1.*t4622*t5907*t6854 + t4551*t6092*t6854 + t9327 + t9330))*var2[3] + (t6439*t9311 + t6609*(-1.*t5799*t6738 - 1.*t4796*t6791 + t9317 + t9320) + t4489*(t6439*t6791 + t5799*t6854 + t9327 + t9330) + t4796*t9336)*var2[4];
  p_output1[33]=t4551*t7153*var2[0] + (t4508*t7162 + t4622*t7153*t97)*var2[1] + (-1.*t4508*t4622*t7153 + t7162*t97)*var2[2] + (t4551*t7244*t9252 + t4551*t6966*t9274 + t6474*(t4622*t5907*t6966 - 1.*t4551*t6092*t6966 + t4622*t4848*t7212 - 1.*t4551*t7212*t8487 + t9411 + t9413) + t8487*(t4551*t6474*t7212 - 1.*t4622*t6603*t7212 - 1.*t4622*t5907*t7244 + t4551*t6092*t7244 + t9424 + t9428))*var2[3] + (t7145*t9311 + t6972*t9336 + t6609*(-1.*t5799*t6966 - 1.*t4796*t7212 + t9411 + t9413) + t4489*(t6439*t7212 + t5799*t7244 + t9424 + t9428))*var2[4] + (t6212*(-1.*t4436*t5696 - 1.*t5780*t6964 - 1.*t4436*t6990 - 1.*t4482*t7051) + t4599*(t5696*t6428 + t6428*t6990 + t6402*t7051 + t5780*t7102))*var2[5];
  p_output1[34]=t8076*var2[0] + (t4508*t7966 - 1.*t8069*t97)*var2[1] + (t4508*t8069 + t7966*t97)*var2[2] + (t8088*t9252 + t7622*t9274 + t6474*(-1.*t6092*t7622 - 1.*t5907*t7881 - 1.*t4848*t8047 - 1.*t8058*t8487 + t9549 + t9559) + t8487*(t6603*t8047 + t6474*t8058 + t6092*t8088 + t5907*t8104 + t9564 + t9565))*var2[3] + (t7982*t9311 + t7868*t9336 + t6609*(-1.*t5799*t7607 - 1.*t4796*t7947 + t9487 + t9492 + t9549 + t9559) + t4489*(t6439*t7947 + t5799*t8010 + t9506 + t9509 + t9564 + t9565))*var2[4] + (t6212*(-1.*t5696*t7578 - 1.*t5780*t7589 - 1.*t4436*t7680 - 1.*t4482*t7730 + t9487 + t9492) + t4599*(t6428*t7680 + t6402*t7730 + t5780*t7798 + t5696*t7828 + t9506 + t9509) + t7413*t9521 + t7571*t9537)*var2[5] + (0.15121*t7437 - 0.15121*t7521 + t7413*t9481 + t6212*(-1.*t5622*t7368 - 1.*t5690*t7432 - 1.*t2365*t7491 - 1.*t4311*t7504 + t9487 + t9492) + t7571*t9500 + t4599*(t6384*t7491 + t6345*t7504 + t5690*t7544 + t5622*t7558 + t9506 + t9509))*var2[6];
  p_output1[35]=(t8456*t9252 + t8307*t9274 + t6474*(-1.*t6092*t8307 - 1.*t5907*t8362 - 1.*t4848*t8434 - 1.*t8443*t8487 + t9693 + t9698) + t8487*(t6603*t8434 + t6474*t8443 + t6092*t8456 + t5907*t8467 + t9702 + t9703))*var2[3] + (t8400*t9311 + t8354*t9336 + t6609*(-1.*t5799*t8303 - 1.*t4796*t8385 + t9597 + t9602 + t9693 + t9698) + t4489*(t6439*t8385 + t5799*t8410 + t9610 + t9612 + t9702 + t9703))*var2[4] + (t8128*t9521 + t8289*t9537 + t6212*(-1.*t5696*t8297 - 1.*t5780*t8301 - 1.*t4436*t8317 - 1.*t4482*t8324 + t9597 + t9602) + t4599*(t6428*t8317 + t6402*t8324 + t5780*t8341 + t5696*t8345 + t9610 + t9612))*var2[5] + (t8128*t9481 + t8289*t9500 + t6212*(-1.*t5622*t8118 - 1.*t5690*t8140 - 1.*t2365*t8170 - 1.*t4311*t8186 + t9597 + t9602) + t4599*(t6384*t8170 + t6345*t8186 + t5690*t8206 + t5622*t8219 + t9610 + t9612))*var2[6] + (4.000000000064e-6*t2149*t9625 - 4.e-6*t2149*t9636 - 4.e-6*t627*t9642 + t6126*t9649 + 4.e-6*(-1.000000000016*t2149*t9625 + t2149*t9636 + t627*t9642 - 1.*t6164*t9649))*var2[7];
  p_output1[36]=t5939;
  p_output1[37]=t9230;
  p_output1[38]=t4508*t5967 + t6536*t97;
  p_output1[39]=t6474*t9252 + t8487*t9274;
  p_output1[40]=t6609*t9311 + t4489*t9336;
  p_output1[41]=t6212*t9521 + t4599*t9537;
  p_output1[42]=-0.15121*t5226 + 0.15121*t5268 + t6212*t9481 + t4599*t9500;
  p_output1[43]=1.e-6*t5062 + 0.28121*t5156 + t6126*t9625 - 4.e-6*t2149*t9642 + 4.e-6*(-1.*t6164*t9625 + t2149*t9642);
  p_output1[44]=-1.284e-8;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 45, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_dh_FlFoot_DiagonalStance2.hh"

namespace TrotStance2
{

void J_dh_FlFoot_DiagonalStance2_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
