/*
 * Automatically Generated from Mathematica.
 * Sun 14 Nov 2021 17:29:12 GMT+01:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4,const double *var5,const double *var6,const double *var7)
{
  double t48;
  double t99;
  double t105;
  double t116;
  double t121;
  double t172;
  double t175;
  double t183;
  double t186;
  double t191;
  double t195;
  double t222;
  double t235;
  double t270;
  double t273;
  double t346;
  double t375;
  double t376;
  double t385;
  double t444;
  double t473;
  double t488;
  double t552;
  double t540;
  double t543;
  double t566;
  double t555;
  double t562;
  double t567;
  double t599;
  double t614;
  double t615;
  double t531;
  double t565;
  double t569;
  double t570;
  double t705;
  double t747;
  double t753;
  double t757;
  double t816;
  double t818;
  double t834;
  double t837;
  double t889;
  double t891;
  double t897;
  double t905;
  double t663;
  double t672;
  double t677;
  double t685;
  double t963;
  double t1089;
  double t1194;
  double t1210;
  double t1213;
  double t1217;
  double t1220;
  double t1228;
  double t1064;
  double t1113;
  double t1155;
  double t1161;
  double t1273;
  double t1274;
  double t1279;
  double t1295;
  double t1298;
  double t1309;
  double t1471;
  double t1480;
  double t1499;
  double t1566;
  double t1578;
  double t1579;
  double t700;
  double t754;
  double t769;
  double t776;
  double t849;
  double t851;
  double t857;
  double t914;
  double t917;
  double t928;
  double t929;
  double t933;
  double t938;
  double t1654;
  double t1659;
  double t1664;
  double t1635;
  double t1636;
  double t1645;
  double t1670;
  double t1675;
  double t1676;
  double t966;
  double t974;
  double t1532;
  double t1600;
  double t1603;
  double t1616;
  double t1619;
  double t1621;
  double t1627;
  double t1628;
  double t1632;
  double t1633;
  double t1648;
  double t1669;
  double t1680;
  double t1686;
  double t1687;
  double t1688;
  double t1690;
  double t1691;
  double t1692;
  double t1693;
  double t1698;
  double t1706;
  double t1710;
  double t1711;
  double t1712;
  double t1721;
  double t1723;
  double t1730;
  double t1505;
  double t1515;
  double t1541;
  double t1800;
  double t1801;
  double t1804;
  double t1810;
  double t1817;
  double t1821;
  double t1857;
  double t1862;
  double t1865;
  double t1866;
  double t1913;
  double t1916;
  double t1919;
  double t1922;
  double t1886;
  double t1891;
  double t1892;
  double t1902;
  double t2009;
  double t1832;
  double t1836;
  double t1846;
  double t1849;
  double t2016;
  double t2018;
  double t2020;
  double t2024;
  double t2029;
  double t2032;
  double t2039;
  double t2043;
  double t2046;
  double t2047;
  double t2085;
  double t2087;
  double t2088;
  double t2092;
  double t2052;
  double t2057;
  double t2062;
  double t2065;
  double t2154;
  double t2153;
  double t2155;
  double t2156;
  double t2162;
  double t2165;
  double t2173;
  double t2183;
  double t2185;
  double t2214;
  double t2233;
  double t2237;
  double t2241;
  double t2257;
  double t2265;
  double t2270;
  double t2279;
  double t2307;
  double t2311;
  double t2313;
  double t2316;
  double t2293;
  double t2296;
  double t2299;
  double t2303;
  double t2366;
  double t2374;
  double t2377;
  double t2385;
  double t2395;
  double t2397;
  double t2399;
  double t2401;
  double t2408;
  double t2417;
  double t2420;
  double t2425;
  double t2442;
  double t2449;
  double t2451;
  double t2434;
  double t2435;
  double t2437;
  double t2457;
  double t2460;
  double t2466;
  double t1746;
  double t1769;
  double t1779;
  double t1780;
  double t2528;
  double t2530;
  double t2533;
  double t2536;
  double t2537;
  double t2542;
  double t2543;
  double t2566;
  double t2568;
  double t2570;
  double t2552;
  double t2553;
  double t2559;
  double t2572;
  double t2573;
  double t2576;
  double t541;
  double t544;
  double t548;
  double t571;
  double t580;
  double t589;
  double t624;
  double t626;
  double t630;
  double t2622;
  double t2624;
  double t2627;
  double t2647;
  double t2649;
  double t2653;
  double t2654;
  double t2661;
  double t2665;
  double t2669;
  double t2670;
  double t2633;
  double t2637;
  double t2641;
  double t2645;
  double t1162;
  double t1169;
  double t1174;
  double t1229;
  double t1233;
  double t1235;
  double t1311;
  double t1346;
  double t1349;
  double t2737;
  double t2738;
  double t2740;
  double t2741;
  double t2726;
  double t2728;
  double t2732;
  double t2735;
  double t2750;
  double t2751;
  double t2836;
  double t2839;
  double t2842;
  double t2844;
  double t2847;
  double t2848;
  double t2862;
  double t2868;
  double t2869;
  double t2870;
  double t2897;
  double t2898;
  double t2902;
  double t2903;
  double t2878;
  double t2880;
  double t2882;
  double t2891;
  double t2941;
  double t2942;
  double t2944;
  double t2946;
  double t2947;
  double t2954;
  double t2955;
  double t2956;
  double t2974;
  double t2976;
  double t2980;
  double t2959;
  double t2964;
  double t2968;
  double t2983;
  double t2985;
  double t2986;
  double t3074;
  double t3085;
  double t3087;
  double t3091;
  double t3094;
  double t3096;
  double t3099;
  double t3113;
  double t3116;
  double t3120;
  double t3108;
  double t3109;
  double t3110;
  double t3123;
  double t3125;
  double t3130;
  double t3199;
  double t3200;
  double t3202;
  double t3220;
  double t3225;
  double t3228;
  double t3237;
  double t3238;
  double t3246;
  double t3248;
  double t3212;
  double t3215;
  double t3216;
  double t3217;
  double t3327;
  double t3334;
  double t3338;
  double t3339;
  double t3304;
  double t3313;
  double t3318;
  double t3321;
  double t3348;
  double t3349;
  double t2778;
  double t2782;
  double t3502;
  double t3504;
  double t3516;
  double t3505;
  double t3541;
  double t3556;
  double t3553;
  double t3651;
  double t3652;
  double t3658;
  double t3682;
  double t3531;
  double t3555;
  double t3557;
  double t3559;
  double t3537;
  double t3620;
  double t3623;
  double t3642;
  double t3674;
  double t3512;
  double t3735;
  double t3793;
  double t3713;
  double t3566;
  double t3829;
  double t3602;
  double t3751;
  double t3856;
  double t3736;
  double t3741;
  double t3749;
  double t3753;
  double t3754;
  double t3757;
  double t3849;
  double t3815;
  double t3823;
  double t3828;
  double t3830;
  double t3838;
  double t3843;
  double t3868;
  double t3869;
  double t3870;
  double t3872;
  double t3874;
  double t3876;
  double t3690;
  double t3880;
  double t3717;
  double t3913;
  double t3914;
  double t3780;
  double t3891;
  double t3966;
  double t3993;
  double t3948;
  double t4095;
  double t4098;
  double t3970;
  double t4063;
  double t3971;
  double t3972;
  double t3973;
  double t3997;
  double t4004;
  double t4008;
  double t4015;
  double t4018;
  double t4022;
  double t4099;
  double t4105;
  double t4107;
  double t4116;
  double t4118;
  double t4119;
  double t4138;
  double t4140;
  double t4054;
  double t4165;
  double t4169;
  double t4176;
  double t4177;
  double t4188;
  double t4189;
  double t4192;
  double t4202;
  double t3955;
  double t4255;
  double t4149;
  double t4306;
  double t4307;
  double t4315;
  double t4337;
  double t3645;
  double t3669;
  double t3700;
  double t3712;
  double t3719;
  double t3732;
  double t3733;
  double t4385;
  double t4390;
  double t4393;
  double t3847;
  double t3848;
  double t3852;
  double t3853;
  double t3857;
  double t3861;
  double t3866;
  double t3772;
  double t3774;
  double t3787;
  double t3791;
  double t3795;
  double t3799;
  double t3801;
  double t3925;
  double t4396;
  double t4398;
  double t4399;
  double t3938;
  double t4418;
  double t4419;
  double t4432;
  double t3928;
  double t3930;
  double t4449;
  double t4452;
  double t4460;
  double t3882;
  double t3897;
  double t3900;
  double t3894;
  double t3906;
  double t3907;
  double t3919;
  double t3916;
  double t4535;
  double t4329;
  double t4330;
  double t4333;
  double t4334;
  double t4336;
  double t4345;
  double t4348;
  double t4349;
  double t4354;
  double t4363;
  double t4366;
  double t4367;
  double t4371;
  double t4372;
  double t4376;
  double t4378;
  double t4381;
  double t4394;
  double t4405;
  double t4438;
  double t4464;
  double t4466;
  double t4471;
  double t4473;
  double t4476;
  double t4484;
  double t4488;
  double t4489;
  double t4497;
  double t4508;
  double t4510;
  double t4512;
  double t4517;
  double t4524;
  double t4525;
  double t4529;
  double t4322;
  double t4325;
  double t4312;
  double t4318;
  double t4610;
  double t4612;
  double t4616;
  double t4626;
  double t4627;
  double t4640;
  double t4646;
  double t4662;
  double t4663;
  double t4683;
  double t4688;
  double t4692;
  double t4693;
  double t4699;
  double t4706;
  double t4709;
  double t4712;
  double t4713;
  double t4577;
  double t4578;
  double t4582;
  double t4585;
  double t4594;
  double t4599;
  double t4604;
  double t4849;
  double t4853;
  double t4865;
  double t4874;
  double t4880;
  double t4881;
  double t4888;
  double t4889;
  double t4892;
  double t4897;
  double t4901;
  double t4907;
  double t4911;
  double t4914;
  double t4918;
  double t4919;
  double t4920;
  double t4931;
  double t5006;
  double t5011;
  double t5014;
  double t5016;
  double t5023;
  double t5028;
  double t5030;
  double t5034;
  double t5038;
  double t5040;
  double t5044;
  double t5047;
  double t5051;
  double t5052;
  double t5057;
  double t5058;
  double t5059;
  double t5061;
  double t5157;
  double t5159;
  double t5162;
  double t5166;
  double t5167;
  double t5168;
  double t5171;
  double t5172;
  double t5174;
  double t5185;
  double t5186;
  double t5192;
  double t5198;
  double t5204;
  double t5206;
  double t4539;
  double t4540;
  double t4542;
  double t5254;
  double t5255;
  double t5266;
  double t5267;
  double t5270;
  double t5271;
  double t5284;
  double t5291;
  double t5293;
  double t5295;
  double t5302;
  double t5303;
  double t5305;
  double t3508;
  double t3511;
  double t3518;
  double t3519;
  double t3523;
  double t3527;
  double t3533;
  double t3535;
  double t3543;
  double t3544;
  double t3550;
  double t3551;
  double t3569;
  double t3597;
  double t3609;
  double t3611;
  double t3615;
  double t3617;
  double t5352;
  double t5355;
  double t5364;
  double t5371;
  double t5375;
  double t5376;
  double t5383;
  double t5387;
  double t5391;
  double t5399;
  double t5404;
  double t5412;
  double t5419;
  double t5420;
  double t5421;
  double t3951;
  double t3952;
  double t3959;
  double t3960;
  double t3962;
  double t3964;
  double t4056;
  double t4062;
  double t4079;
  double t4080;
  double t4084;
  double t4090;
  double t4146;
  double t4147;
  double t4155;
  double t4156;
  double t4160;
  double t4163;
  double t4209;
  double t5462;
  double t5463;
  double t5465;
  double t5466;
  double t5486;
  double t5488;
  double t5495;
  double t5497;
  double t4223;
  double t5503;
  double t5510;
  double t5513;
  double t5517;
  double t4238;
  double t4257;
  double t4266;
  double t4270;
  double t5592;
  double t5594;
  double t5598;
  double t5600;
  double t5601;
  double t5602;
  double t5606;
  double t5607;
  double t5608;
  double t5620;
  double t5628;
  double t5630;
  double t5631;
  double t5632;
  double t5639;
  double t5645;
  double t5648;
  double t5650;
  double t5701;
  double t5702;
  double t5707;
  double t5711;
  double t5712;
  double t5715;
  double t5716;
  double t5719;
  double t5732;
  double t5737;
  double t5738;
  double t5750;
  double t5759;
  double t5760;
  double t5812;
  double t5816;
  double t5821;
  double t5823;
  double t5835;
  double t5837;
  double t5838;
  double t5841;
  double t5846;
  double t5847;
  double t5849;
  double t5850;
  double t5852;
  double t5934;
  double t5935;
  double t5936;
  double t5941;
  double t5944;
  double t5946;
  double t5948;
  double t5957;
  double t5961;
  double t5964;
  double t5966;
  double t5968;
  double t5969;
  double t5978;
  double t5979;
  double t6048;
  double t6054;
  double t6055;
  double t6060;
  double t6065;
  double t6069;
  double t6076;
  double t6077;
  double t6086;
  double t6089;
  double t6090;
  double t6092;
  double t6361;
  double t6362;
  double t6366;
  double t6367;
  double t6369;
  double t6370;
  double t6424;
  double t6426;
  double t6428;
  double t6438;
  double t6441;
  double t6454;
  double t6455;
  double t6457;
  double t6458;
  double t6459;
  double t6528;
  double t6468;
  double t6471;
  double t6475;
  double t6477;
  double t6435;
  double t6442;
  double t6463;
  double t6464;
  double t6536;
  double t6543;
  double t6569;
  double t6588;
  t48 = -1.*var5[0];
  t99 = t48 + var5[1];
  t105 = Power(t99,-5);
  t116 = -1. + var6[0];
  t121 = -1. + var7[0];
  t172 = 1/t121;
  t175 = -1.*var1[0];
  t183 = t175 + var1[1];
  t186 = t116*t172*t183;
  t191 = t48 + var1[0] + t186;
  t195 = Power(t191,4);
  t222 = Power(t99,-4);
  t235 = Power(t191,3);
  t270 = 1/t99;
  t273 = -1.*t270*t191;
  t346 = 1. + t273;
  t375 = Power(t99,-3);
  t376 = Power(t191,2);
  t385 = Power(t346,2);
  t444 = Power(t99,-2);
  t473 = Power(t346,3);
  t488 = Power(t346,4);
  t552 = Cos(var2[4]);
  t540 = Cos(var2[7]);
  t543 = Sin(var2[7]);
  t566 = Cos(var2[5]);
  t555 = Cos(var2[6]);
  t562 = Sin(var2[5]);
  t567 = Sin(var2[6]);
  t599 = t552*t566*t555;
  t614 = -1.*t552*t562*t567;
  t615 = t599 + t614;
  t531 = Sin(var2[4]);
  t565 = -1.*t552*t555*t562;
  t569 = -1.*t552*t566*t567;
  t570 = t565 + t569;
  t705 = Cos(var2[8]);
  t747 = -1.*t705;
  t753 = 1. + t747;
  t757 = Sin(var2[8]);
  t816 = -1.*t540*t531;
  t818 = -4.e-6*t540*t570;
  t834 = -1.000000000016*t615*t543;
  t837 = t816 + t818 + t834;
  t889 = t540*t615;
  t891 = -1.*t531*t543;
  t897 = -4.e-6*t570*t543;
  t905 = t889 + t891 + t897;
  t663 = 4.e-6*t540*t615;
  t672 = -4.e-6*t531*t543;
  t677 = -1.6e-11*t570*t543;
  t685 = t663 + t672 + t677;
  t963 = -1. + t705;
  t1089 = -1. + t540;
  t1194 = 4.e-6*t1089*t531;
  t1210 = 1.6e-11*t1089;
  t1213 = 1. + t1210;
  t1217 = t1213*t570;
  t1220 = 4.e-6*t615*t543;
  t1228 = t1194 + t1217 + t1220;
  t1064 = t540*t531;
  t1113 = 4.e-6*t1089*t570;
  t1155 = t615*t543;
  t1161 = t1064 + t1113 + t1155;
  t1273 = -1.*t540;
  t1274 = 1. + t1273;
  t1279 = -1.000000000016*t1274;
  t1295 = 1. + t1279;
  t1298 = t1295*t615;
  t1309 = t1298 + t891 + t897;
  t1471 = -1.*t555;
  t1480 = 1. + t1471;
  t1499 = 0.15121*t1480;
  t1566 = -1.*t552*t566*t555;
  t1578 = t552*t562*t567;
  t1579 = t1566 + t1578;
  t700 = -1.284e-8*var2[8];
  t754 = -1.5499600000248e-7*t753;
  t769 = 2.012840000032e-6*t757;
  t776 = t700 + t754 + t769;
  t849 = 0.503210000016051*t753;
  t851 = 0.03874900000062*t757;
  t857 = t849 + t851;
  t914 = 5.136e-14*var2[8];
  t917 = -0.03874900000062*t753;
  t928 = 0.503210000008*t757;
  t929 = t914 + t917 + t928;
  t933 = -1.000000000016*t753;
  t938 = 1. + t933;
  t1654 = t1295*t570;
  t1659 = -4.e-6*t1579*t543;
  t1664 = t1654 + t1659;
  t1635 = t1213*t1579;
  t1636 = 4.e-6*t570*t543;
  t1645 = t1635 + t1636;
  t1670 = 4.e-6*t1089*t1579;
  t1675 = t570*t543;
  t1676 = t1670 + t1675;
  t966 = 1.6e-11*t963;
  t974 = 1. + t966;
  t1532 = 0.15121*t567;
  t1600 = -1.2484e-7*var2[7];
  t1603 = -1.5499600000248e-7*t1274;
  t1616 = 1.124840000016e-6*t543;
  t1619 = t1600 + t1603 + t1616;
  t1621 = t1579*t1619;
  t1627 = 0.281210000008499*t1274;
  t1628 = 0.03874900000062*t543;
  t1632 = t1627 + t1628;
  t1633 = t570*t1632;
  t1648 = t1645*t776;
  t1669 = t1664*t857;
  t1680 = t1676*t929;
  t1686 = t938*t1664;
  t1687 = -4.e-6*t1645*t757;
  t1688 = -1.*t1676*t757;
  t1690 = t1686 + t1687 + t1688;
  t1691 = 0.80321*t1690;
  t1692 = t974*t1645;
  t1693 = 4.e-6*t963*t1676;
  t1698 = 4.e-6*t1664*t757;
  t1706 = t1692 + t1693 + t1698;
  t1710 = 0.14871*t1706;
  t1711 = 4.e-6*t963*t1645;
  t1712 = t705*t1676;
  t1721 = t1664*t757;
  t1723 = t1711 + t1712 + t1721;
  t1730 = -0.03875*t1723;
  t1505 = -0.15121*t567;
  t1515 = t1499 + t1505;
  t1541 = t1499 + t1532;
  t1800 = t555*t531*t562;
  t1801 = t566*t531*t567;
  t1804 = t1800 + t1801;
  t1810 = -1.*t566*t555*t531;
  t1817 = t531*t562*t567;
  t1821 = t1810 + t1817;
  t1857 = 4.e-6*t552*t1089;
  t1862 = t1213*t1804;
  t1865 = 4.e-6*t1821*t543;
  t1866 = t1857 + t1862 + t1865;
  t1913 = t552*t540;
  t1916 = 4.e-6*t1089*t1804;
  t1919 = t1821*t543;
  t1922 = t1913 + t1916 + t1919;
  t1886 = t1295*t1821;
  t1891 = -1.*t552*t543;
  t1892 = -4.e-6*t1804*t543;
  t1902 = t1886 + t1891 + t1892;
  t2009 = Sin(var2[3]);
  t1832 = 4.9936e-13*var2[7];
  t1836 = -0.03874900000062*t1274;
  t1846 = 0.281210000004*t543;
  t1849 = t1832 + t1836 + t1846;
  t2016 = -1.*t552*t555*t2009*t562;
  t2018 = -1.*t552*t566*t2009*t567;
  t2020 = t2016 + t2018;
  t2024 = t552*t566*t555*t2009;
  t2029 = -1.*t552*t2009*t562*t567;
  t2032 = t2024 + t2029;
  t2039 = 4.e-6*t1089*t2009*t531;
  t2043 = t1213*t2020;
  t2046 = 4.e-6*t2032*t543;
  t2047 = t2039 + t2043 + t2046;
  t2085 = t540*t2009*t531;
  t2087 = 4.e-6*t1089*t2020;
  t2088 = t2032*t543;
  t2092 = t2085 + t2087 + t2088;
  t2052 = t1295*t2032;
  t2057 = -1.*t2009*t531*t543;
  t2062 = -4.e-6*t2020*t543;
  t2065 = t2052 + t2057 + t2062;
  t2154 = Cos(var2[3]);
  t2153 = -1.*t566*t2009;
  t2155 = -1.*t2154*t531*t562;
  t2156 = t2153 + t2155;
  t2162 = t2154*t566*t531;
  t2165 = -1.*t2009*t562;
  t2173 = t2162 + t2165;
  t2183 = t555*t2156;
  t2185 = -1.*t2173*t567;
  t2214 = t2183 + t2185;
  t2233 = t555*t2173;
  t2237 = t2156*t567;
  t2241 = t2233 + t2237;
  t2257 = -4.e-6*t2154*t552*t1089;
  t2265 = t1213*t2214;
  t2270 = 4.e-6*t2241*t543;
  t2279 = t2257 + t2265 + t2270;
  t2307 = -1.*t2154*t552*t540;
  t2311 = 4.e-6*t1089*t2214;
  t2313 = t2241*t543;
  t2316 = t2307 + t2311 + t2313;
  t2293 = t1295*t2241;
  t2296 = t2154*t552*t543;
  t2299 = -4.e-6*t2214*t543;
  t2303 = t2293 + t2296 + t2299;
  t2366 = -1.*t566*t2009*t531;
  t2374 = -1.*t2154*t562;
  t2377 = t2366 + t2374;
  t2385 = t2154*t566;
  t2395 = -1.*t2009*t531*t562;
  t2397 = t2385 + t2395;
  t2399 = t555*t2377;
  t2401 = -1.*t2397*t567;
  t2408 = t2399 + t2401;
  t2417 = t555*t2397;
  t2420 = t2377*t567;
  t2425 = t2417 + t2420;
  t2442 = t1295*t2425;
  t2449 = -4.e-6*t2408*t543;
  t2451 = t2442 + t2449;
  t2434 = t1213*t2408;
  t2435 = 4.e-6*t2425*t543;
  t2437 = t2434 + t2435;
  t2457 = 4.e-6*t1089*t2408;
  t2460 = t2425*t543;
  t2466 = t2457 + t2460;
  t1746 = -0.15121*t555;
  t1769 = t1746 + t1532;
  t1779 = 0.15121*t555;
  t1780 = t1779 + t1532;
  t2528 = t566*t2009*t531;
  t2530 = t2154*t562;
  t2533 = t2528 + t2530;
  t2536 = -1.*t555*t2533;
  t2537 = t2536 + t2401;
  t2542 = -1.*t2533*t567;
  t2543 = t2417 + t2542;
  t2566 = t1295*t2543;
  t2568 = -4.e-6*t2537*t543;
  t2570 = t2566 + t2568;
  t2552 = t1213*t2537;
  t2553 = 4.e-6*t2543*t543;
  t2559 = t2552 + t2553;
  t2572 = 4.e-6*t1089*t2537;
  t2573 = t2543*t543;
  t2576 = t2572 + t2573;
  t541 = 0.281210000004*t540;
  t544 = -0.03874900000062*t543;
  t548 = 4.9936e-13 + t541 + t544;
  t571 = 1.124840000016e-6*t540;
  t580 = -1.5499600000248e-7*t543;
  t589 = -1.2484e-7 + t571 + t580;
  t624 = 0.03874900000062*t540;
  t626 = 0.281210000008499*t543;
  t630 = t624 + t626;
  t2622 = t555*t2533;
  t2624 = t2397*t567;
  t2627 = t2622 + t2624;
  t2647 = t552*t540*t2009;
  t2649 = -4.e-6*t540*t2543;
  t2653 = -1.000000000016*t2627*t543;
  t2654 = t2647 + t2649 + t2653;
  t2661 = t540*t2627;
  t2665 = t552*t2009*t543;
  t2669 = -4.e-6*t2543*t543;
  t2670 = t2661 + t2665 + t2669;
  t2633 = 4.e-6*t540*t2627;
  t2637 = 4.e-6*t552*t2009*t543;
  t2641 = -1.6e-11*t2543*t543;
  t2645 = t2633 + t2637 + t2641;
  t1162 = 0.503210000008*t705;
  t1169 = -0.03874900000062*t757;
  t1174 = 5.136e-14 + t1162 + t1169;
  t1229 = 2.012840000032e-6*t705;
  t1233 = -1.5499600000248e-7*t757;
  t1235 = -1.284e-8 + t1229 + t1233;
  t1311 = 0.03874900000062*t705;
  t1346 = 0.503210000016051*t757;
  t1349 = t1311 + t1346;
  t2737 = -4.e-6*t552*t1089*t2009;
  t2738 = t1213*t2543;
  t2740 = 4.e-6*t2627*t543;
  t2741 = t2737 + t2738 + t2740;
  t2726 = -1.*t552*t540*t2009;
  t2728 = 4.e-6*t1089*t2543;
  t2732 = t2627*t543;
  t2735 = t2726 + t2728 + t2732;
  t2750 = t1295*t2627;
  t2751 = t2750 + t2665 + t2669;
  t2836 = t2154*t552*t555*t562;
  t2839 = t2154*t552*t566*t567;
  t2842 = t2836 + t2839;
  t2844 = -1.*t2154*t552*t566*t555;
  t2847 = t2154*t552*t562*t567;
  t2848 = t2844 + t2847;
  t2862 = -4.e-6*t2154*t1089*t531;
  t2868 = t1213*t2842;
  t2869 = 4.e-6*t2848*t543;
  t2870 = t2862 + t2868 + t2869;
  t2897 = -1.*t2154*t540*t531;
  t2898 = 4.e-6*t1089*t2842;
  t2902 = t2848*t543;
  t2903 = t2897 + t2898 + t2902;
  t2878 = t1295*t2848;
  t2880 = t2154*t531*t543;
  t2882 = -4.e-6*t2842*t543;
  t2891 = t2878 + t2880 + t2882;
  t2941 = t566*t2009;
  t2942 = t2154*t531*t562;
  t2944 = t2941 + t2942;
  t2946 = -1.*t2944*t567;
  t2947 = t2233 + t2946;
  t2954 = t555*t2944;
  t2955 = t2173*t567;
  t2956 = t2954 + t2955;
  t2974 = t1295*t2956;
  t2976 = -4.e-6*t2947*t543;
  t2980 = t2974 + t2976;
  t2959 = t1213*t2947;
  t2964 = 4.e-6*t2956*t543;
  t2968 = t2959 + t2964;
  t2983 = 4.e-6*t1089*t2947;
  t2985 = t2956*t543;
  t2986 = t2983 + t2985;
  t3074 = -1.*t2154*t566*t531;
  t3085 = t2009*t562;
  t3087 = t3074 + t3085;
  t3091 = -1.*t555*t3087;
  t3094 = t3091 + t2946;
  t3096 = -1.*t3087*t567;
  t3099 = t2954 + t3096;
  t3113 = t1295*t3099;
  t3116 = -4.e-6*t3094*t543;
  t3120 = t3113 + t3116;
  t3108 = t1213*t3094;
  t3109 = 4.e-6*t3099*t543;
  t3110 = t3108 + t3109;
  t3123 = 4.e-6*t1089*t3094;
  t3125 = t3099*t543;
  t3130 = t3123 + t3125;
  t3199 = t555*t3087;
  t3200 = t2944*t567;
  t3202 = t3199 + t3200;
  t3220 = -4.e-6*t540*t3099;
  t3225 = -1.000000000016*t3202*t543;
  t3228 = t2307 + t3220 + t3225;
  t3237 = t540*t3202;
  t3238 = -1.*t2154*t552*t543;
  t3246 = -4.e-6*t3099*t543;
  t3248 = t3237 + t3238 + t3246;
  t3212 = 4.e-6*t540*t3202;
  t3215 = -4.e-6*t2154*t552*t543;
  t3216 = -1.6e-11*t3099*t543;
  t3217 = t3212 + t3215 + t3216;
  t3327 = 4.e-6*t2154*t552*t1089;
  t3334 = t1213*t3099;
  t3338 = 4.e-6*t3202*t543;
  t3339 = t3327 + t3334 + t3338;
  t3304 = t2154*t552*t540;
  t3313 = 4.e-6*t1089*t3099;
  t3318 = t3202*t543;
  t3321 = t3304 + t3313 + t3318;
  t3348 = t1295*t3202;
  t3349 = t3348 + t3238 + t3246;
  t2778 = -4.e-6*t2741*t757;
  t2782 = -1.*t2735*t757;
  t3502 = Cos(var2[13]);
  t3504 = Sin(var2[13]);
  t3516 = 4.e-6*t3504;
  t3505 = -2.8e-11*t3504;
  t3541 = 7.e-6*t3504;
  t3556 = Cos(var2[12]);
  t3553 = Sin(var2[12]);
  t3651 = Cos(var2[14]);
  t3652 = -1.*t3651;
  t3658 = 1. + t3652;
  t3682 = Sin(var2[14]);
  t3531 = -7.e-6*t3502;
  t3555 = -1.*t552*t566*t3553;
  t3557 = -1.*t3556*t552*t562;
  t3559 = t3555 + t3557;
  t3537 = 4.e-6*t3502;
  t3620 = t3556*t552*t566;
  t3623 = -1.*t552*t3553*t562;
  t3642 = t3620 + t3623;
  t3674 = 4.e-6*t3658;
  t3512 = 7.e-6*t3502;
  t3735 = -4.e-6*t3504;
  t3793 = -2.8e-11*t3658;
  t3713 = 7.e-6*t3658;
  t3566 = -1.*t3502;
  t3829 = 2.8e-11*t3504;
  t3602 = -4.e-6*t3502;
  t3751 = -7.e-6*t3504;
  t3856 = -4.e-6*t3682;
  t3736 = t3531 + t3735;
  t3741 = t3736*t531;
  t3749 = -6.5e-11*t3504*t3559;
  t3753 = t3537 + t3751;
  t3754 = t3753*t3642;
  t3757 = t3741 + t3749 + t3754;
  t3849 = -1.*t3682;
  t3815 = -1.000000000049*t3504*t531;
  t3823 = t3512 + t3735;
  t3828 = t3823*t3559;
  t3830 = t3502 + t3829;
  t3838 = t3830*t3642;
  t3843 = t3815 + t3828 + t3838;
  t3868 = t3566 + t3829;
  t3869 = t3868*t531;
  t3870 = t3602 + t3751;
  t3872 = t3870*t3559;
  t3874 = -1.000000000016*t3504*t3642;
  t3876 = t3869 + t3872 + t3874;
  t3690 = -7.e-6*t3682;
  t3880 = -7.e-6*t3658;
  t3717 = 4.e-6*t3682;
  t3913 = -1. + t3651;
  t3914 = 4.e-6*t3913;
  t3780 = 7.e-6*t3682;
  t3891 = 2.8e-11*t3658;
  t3966 = 1. + t3566;
  t3993 = -7.e-6*t3966;
  t3948 = -2.8e-11*t3682;
  t4095 = -1. + t3502;
  t4098 = 4.e-6*t4095;
  t3970 = 2.8e-11*t3966;
  t4063 = 4.e-6*t3651;
  t3971 = -1.*t3504;
  t3972 = t3970 + t3971;
  t3973 = t3972*t531;
  t3997 = t3993 + t3735;
  t4004 = t3997*t3559;
  t4008 = -1.000000000016*t3966;
  t4015 = 1. + t4008;
  t4018 = t4015*t3642;
  t4022 = t3973 + t4004 + t4018;
  t4099 = t4098 + t3751;
  t4105 = t4099*t531;
  t4107 = -6.5e-11*t3966;
  t4116 = 1. + t4107;
  t4118 = t4116*t3559;
  t4119 = t3993 + t3516;
  t4138 = t4119*t3642;
  t4140 = t4105 + t4118 + t4138;
  t4054 = -7.e-6*t3651;
  t4165 = -1.000000000049*t3966;
  t4169 = 1. + t4165;
  t4176 = t4169*t531;
  t4177 = t4098 + t3541;
  t4188 = t4177*t3559;
  t4189 = t3970 + t3504;
  t4192 = t4189*t3642;
  t4202 = t4176 + t4188 + t4192;
  t3955 = -4.e-6*t3651;
  t4255 = 2.8e-11*t3682;
  t4149 = 7.e-6*t3651;
  t4306 = -1.*t3556;
  t4307 = 1. + t4306;
  t4315 = 0.15121*t3553;
  t4337 = 7.e-6*t3966;
  t3645 = -2.598649999999999e-7*var2[14];
  t3669 = -2.3905277499999995e-16*t3658;
  t3700 = t3674 + t3690;
  t3712 = -0.038922999986*t3700;
  t3719 = t3713 + t3717;
  t3732 = -0.503149000008*t3719;
  t3733 = t3645 + t3669 + t3712 + t3732;
  t4385 = -1.*t3556*t552*t566;
  t4390 = t552*t3553*t562;
  t4393 = t4385 + t4390;
  t3847 = 1.8190549999999993e-12*var2[14];
  t3848 = -0.5031490000160505*t3658;
  t3852 = t3793 + t3849;
  t3853 = -0.038922999986*t3852;
  t3857 = t3713 + t3856;
  t3861 = -3.6777349999999994e-6*t3857;
  t3866 = t3847 + t3848 + t3853 + t3861;
  t3772 = 1.0394599999999997e-12*var2[14];
  t3774 = -0.03892299998790722*t3658;
  t3787 = t3674 + t3780;
  t3791 = -3.6777349999999994e-6*t3787;
  t3795 = t3793 + t3682;
  t3799 = -0.503149000008*t3795;
  t3801 = t3772 + t3774 + t3791 + t3799;
  t3925 = t3914 + t3780;
  t4396 = t4119*t3559;
  t4398 = t4116*t4393;
  t4399 = t4396 + t4398;
  t3938 = t3891 + t3682;
  t4418 = t4015*t3559;
  t4419 = t3997*t4393;
  t4432 = t4418 + t4419;
  t3928 = -1.000000000049*t3658;
  t3930 = 1. + t3928;
  t4449 = t4189*t3559;
  t4452 = t4177*t4393;
  t4460 = t4449 + t4452;
  t3882 = t3880 + t3856;
  t3897 = -1.000000000016*t3658;
  t3900 = 1. + t3897;
  t3894 = t3891 + t3849;
  t3906 = -6.5e-11*t3658;
  t3907 = 1. + t3906;
  t3919 = t3880 + t3717;
  t3916 = t3914 + t3690;
  t4535 = 0.15121*t3556;
  t4329 = 1.0248489999999998e-12*var2[13];
  t4330 = -0.28120900000849935*t3966;
  t4333 = -2.8e-11*t3966;
  t4334 = t4333 + t3971;
  t4336 = -0.038748999993*t4334;
  t4345 = t4337 + t3735;
  t4348 = -2.123459e-6*t4345;
  t4349 = t4329 + t4330 + t4336 + t4348;
  t4354 = t4349*t3559;
  t4363 = -1.4640699999999997e-7*var2[13];
  t4366 = -1.38024835e-16*t3966;
  t4367 = 4.e-6*t3966;
  t4371 = t4367 + t3751;
  t4372 = -0.038748999993*t4371;
  t4376 = t4337 + t3516;
  t4378 = -0.281209000004*t4376;
  t4381 = t4363 + t4366 + t4372 + t4378;
  t4394 = t4381*t4393;
  t4405 = t3733*t4399;
  t4438 = t3866*t4432;
  t4464 = t3801*t4460;
  t4466 = t3925*t4399;
  t4471 = t3938*t4432;
  t4473 = t3930*t4460;
  t4476 = t4466 + t4471 + t4473;
  t4484 = -0.038924*t4476;
  t4488 = t3882*t4399;
  t4489 = t3900*t4432;
  t4497 = t3894*t4460;
  t4508 = t4488 + t4489 + t4497;
  t4510 = -0.80315*t4508;
  t4512 = t3907*t4399;
  t4517 = t3919*t4432;
  t4524 = t3916*t4460;
  t4525 = t4512 + t4517 + t4524;
  t4529 = 0.148705*t4525;
  t4322 = -0.15121*t4307;
  t4325 = t4322 + t4315;
  t4312 = 0.15121*t4307;
  t4318 = t4312 + t4315;
  t4610 = t566*t3553*t531;
  t4612 = t3556*t531*t562;
  t4616 = t4610 + t4612;
  t4626 = -1.*t3556*t566*t531;
  t4627 = t3553*t531*t562;
  t4640 = t4626 + t4627;
  t4646 = t552*t3972;
  t4662 = t3997*t4616;
  t4663 = t4015*t4640;
  t4683 = t4646 + t4662 + t4663;
  t4688 = t552*t4099;
  t4692 = t4116*t4616;
  t4693 = t4119*t4640;
  t4699 = t4688 + t4692 + t4693;
  t4706 = t4169*t552;
  t4709 = t4177*t4616;
  t4712 = t4189*t4640;
  t4713 = t4706 + t4709 + t4712;
  t4577 = 5.856279999999999e-13*var2[13];
  t4578 = -0.0387489999948987*t3966;
  t4582 = t4367 + t3541;
  t4585 = -2.123459e-6*t4582;
  t4594 = t4333 + t3504;
  t4599 = -0.281209000004*t4594;
  t4604 = t4577 + t4578 + t4585 + t4599;
  t4849 = -1.*t552*t566*t3553*t2009;
  t4853 = -1.*t3556*t552*t2009*t562;
  t4865 = t4849 + t4853;
  t4874 = t3556*t552*t566*t2009;
  t4880 = -1.*t552*t3553*t2009*t562;
  t4881 = t4874 + t4880;
  t4888 = t3972*t2009*t531;
  t4889 = t3997*t4865;
  t4892 = t4015*t4881;
  t4897 = t4888 + t4889 + t4892;
  t4901 = t4099*t2009*t531;
  t4907 = t4116*t4865;
  t4911 = t4119*t4881;
  t4914 = t4901 + t4907 + t4911;
  t4918 = t4169*t2009*t531;
  t4919 = t4177*t4865;
  t4920 = t4189*t4881;
  t4931 = t4918 + t4919 + t4920;
  t5006 = -1.*t3553*t2173;
  t5011 = t3556*t2156;
  t5014 = t5006 + t5011;
  t5016 = t3556*t2173;
  t5023 = t3553*t2156;
  t5028 = t5016 + t5023;
  t5030 = -1.*t2154*t552*t3972;
  t5034 = t3997*t5014;
  t5038 = t4015*t5028;
  t5040 = t5030 + t5034 + t5038;
  t5044 = -1.*t2154*t552*t4099;
  t5047 = t4116*t5014;
  t5051 = t4119*t5028;
  t5052 = t5044 + t5047 + t5051;
  t5057 = -1.*t4169*t2154*t552;
  t5058 = t4177*t5014;
  t5059 = t4189*t5028;
  t5061 = t5057 + t5058 + t5059;
  t5157 = t3553*t2377;
  t5159 = t3556*t2397;
  t5162 = t5157 + t5159;
  t5166 = t3556*t2377;
  t5167 = -1.*t3553*t2397;
  t5168 = t5166 + t5167;
  t5171 = t4119*t5162;
  t5172 = t4116*t5168;
  t5174 = t5171 + t5172;
  t5185 = t4015*t5162;
  t5186 = t3997*t5168;
  t5192 = t5185 + t5186;
  t5198 = t4189*t5162;
  t5204 = t4177*t5168;
  t5206 = t5198 + t5204;
  t4539 = -0.15121*t3553;
  t4540 = t4535 + t4539;
  t4542 = t4535 + t4315;
  t5254 = -1.*t3553*t2533;
  t5255 = t5254 + t5159;
  t5266 = -1.*t3556*t2533;
  t5267 = t5266 + t5167;
  t5270 = t4119*t5255;
  t5271 = t4116*t5267;
  t5284 = t5270 + t5271;
  t5291 = t4015*t5255;
  t5293 = t3997*t5267;
  t5295 = t5291 + t5293;
  t5302 = t4189*t5255;
  t5303 = t4177*t5267;
  t5305 = t5302 + t5303;
  t3508 = t3502 + t3505;
  t3511 = -0.281209000004*t3508;
  t3518 = t3512 + t3516;
  t3519 = -2.123459e-6*t3518;
  t3523 = -0.0387489999948987*t3504;
  t3527 = 5.856279999999999e-13 + t3511 + t3519 + t3523;
  t3533 = t3531 + t3516;
  t3535 = -0.038748999993*t3533;
  t3543 = t3537 + t3541;
  t3544 = -0.281209000004*t3543;
  t3550 = -1.38024835e-16*t3504;
  t3551 = -1.4640699999999997e-7 + t3535 + t3544 + t3550;
  t3569 = t3566 + t3505;
  t3597 = -0.038748999993*t3569;
  t3609 = t3602 + t3541;
  t3611 = -2.123459e-6*t3609;
  t3615 = -0.28120900000849935*t3504;
  t3617 = 1.0248489999999998e-12 + t3597 + t3611 + t3615;
  t5352 = t3556*t2533;
  t5355 = t3553*t2397;
  t5364 = t5352 + t5355;
  t5371 = -1.*t552*t3736*t2009;
  t5375 = -6.5e-11*t3504*t5255;
  t5376 = t3753*t5364;
  t5383 = t5371 + t5375 + t5376;
  t5387 = 1.000000000049*t552*t3504*t2009;
  t5391 = t3823*t5255;
  t5399 = t3830*t5364;
  t5404 = t5387 + t5391 + t5399;
  t5412 = -1.*t552*t3868*t2009;
  t5419 = t3870*t5255;
  t5420 = -1.000000000016*t3504*t5364;
  t5421 = t5412 + t5419 + t5420;
  t3951 = t3652 + t3948;
  t3952 = -0.038922999986*t3951;
  t3959 = t3955 + t3780;
  t3960 = -3.6777349999999994e-6*t3959;
  t3962 = -0.5031490000160505*t3682;
  t3964 = 1.8190549999999993e-12 + t3952 + t3960 + t3962;
  t4056 = t4054 + t3717;
  t4062 = -0.038922999986*t4056;
  t4079 = t4063 + t3780;
  t4080 = -0.503149000008*t4079;
  t4084 = -2.3905277499999995e-16*t3682;
  t4090 = -2.598649999999999e-7 + t4062 + t4080 + t4084;
  t4146 = t3651 + t3948;
  t4147 = -0.503149000008*t4146;
  t4155 = t4149 + t3717;
  t4156 = -3.6777349999999994e-6*t4155;
  t4160 = -0.03892299998790722*t3682;
  t4163 = 1.0394599999999997e-12 + t4147 + t4156 + t4160;
  t4209 = t4063 + t3690;
  t5462 = -1.*t552*t3972*t2009;
  t5463 = t3997*t5255;
  t5465 = t4015*t5364;
  t5466 = t5462 + t5463 + t5465;
  t5486 = -1.*t552*t4099*t2009;
  t5488 = t4116*t5255;
  t5495 = t4119*t5364;
  t5497 = t5486 + t5488 + t5495;
  t4223 = t4054 + t3856;
  t5503 = -1.*t4169*t552*t2009;
  t5510 = t4177*t5255;
  t5513 = t4189*t5364;
  t5517 = t5503 + t5510 + t5513;
  t4238 = t3955 + t3690;
  t4257 = t3652 + t4255;
  t4266 = t3651 + t4255;
  t4270 = t4149 + t3856;
  t5592 = t2154*t552*t566*t3553;
  t5594 = t3556*t2154*t552*t562;
  t5598 = t5592 + t5594;
  t5600 = -1.*t3556*t2154*t552*t566;
  t5601 = t2154*t552*t3553*t562;
  t5602 = t5600 + t5601;
  t5606 = -1.*t2154*t3972*t531;
  t5607 = t3997*t5598;
  t5608 = t4015*t5602;
  t5620 = t5606 + t5607 + t5608;
  t5628 = -1.*t2154*t4099*t531;
  t5630 = t4116*t5598;
  t5631 = t4119*t5602;
  t5632 = t5628 + t5630 + t5631;
  t5639 = -1.*t4169*t2154*t531;
  t5645 = t4177*t5598;
  t5648 = t4189*t5602;
  t5650 = t5639 + t5645 + t5648;
  t5701 = t3553*t2173;
  t5702 = t3556*t2944;
  t5707 = t5701 + t5702;
  t5711 = -1.*t3553*t2944;
  t5712 = t5016 + t5711;
  t5715 = t4119*t5707;
  t5716 = t4116*t5712;
  t5719 = t5715 + t5716;
  t5732 = t4015*t5707;
  t5737 = t3997*t5712;
  t5738 = t5732 + t5737;
  t5750 = t4189*t5707;
  t5759 = t4177*t5712;
  t5760 = t5750 + t5759;
  t5812 = -1.*t3553*t3087;
  t5816 = t5812 + t5702;
  t5821 = -1.*t3556*t3087;
  t5823 = t5821 + t5711;
  t5835 = t4119*t5816;
  t5837 = t4116*t5823;
  t5838 = t5835 + t5837;
  t5841 = t4015*t5816;
  t5846 = t3997*t5823;
  t5847 = t5841 + t5846;
  t5849 = t4189*t5816;
  t5850 = t4177*t5823;
  t5852 = t5849 + t5850;
  t5934 = t3556*t3087;
  t5935 = t3553*t2944;
  t5936 = t5934 + t5935;
  t5941 = t2154*t552*t3736;
  t5944 = -6.5e-11*t3504*t5816;
  t5946 = t3753*t5936;
  t5948 = t5941 + t5944 + t5946;
  t5957 = -1.000000000049*t2154*t552*t3504;
  t5961 = t3823*t5816;
  t5964 = t3830*t5936;
  t5966 = t5957 + t5961 + t5964;
  t5968 = t2154*t552*t3868;
  t5969 = t3870*t5816;
  t5978 = -1.000000000016*t3504*t5936;
  t5979 = t5968 + t5969 + t5978;
  t6048 = t2154*t552*t3972;
  t6054 = t3997*t5816;
  t6055 = t4015*t5936;
  t6060 = t6048 + t6054 + t6055;
  t6065 = t2154*t552*t4099;
  t6069 = t4116*t5816;
  t6076 = t4119*t5936;
  t6077 = t6065 + t6069 + t6076;
  t6086 = t4169*t2154*t552;
  t6089 = t4177*t5816;
  t6090 = t4189*t5936;
  t6092 = t6086 + t6089 + t6090;
  t6361 = Power(t552,2);
  t6362 = Power(t566,2);
  t6366 = t6361*t6362;
  t6367 = Power(t2533,2);
  t6369 = t6366 + t6367;
  t6370 = 1/t6369;
  t6424 = Cos(var2[9]);
  t6426 = -1.*t6424;
  t6428 = 1. + t6426;
  t6438 = Sin(var2[9]);
  t6441 = -0.15121*t6438;
  t6454 = Cos(var2[15]);
  t6455 = -1.*t6454;
  t6457 = 1. + t6455;
  t6458 = -0.15121*t6457;
  t6459 = Sin(var2[15]);
  t6528 = -0.15121*t6424;
  t6468 = -0.15121*t6428;
  t6471 = t6468 + t6441;
  t6475 = 0.15121*t6459;
  t6477 = t6458 + t6475;
  t6435 = 0.15121*t6428;
  t6442 = t6435 + t6441;
  t6463 = -0.15121*t6459;
  t6464 = t6458 + t6463;
  t6536 = t6424*t2944;
  t6543 = -1.*t6438*t2944;
  t6569 = t6454*t2944;
  t6588 = -1.*t6459*t2944;
  p_output1[0]=var3[0] + (t1619*t1804 + t1632*t1821 + t1849*t552 + t1515*t531*t562 - 1.*t1541*t531*t566 + t1866*t776 + t1902*t857 + t1922*t929 + 0.80321*(-4.e-6*t1866*t757 - 1.*t1922*t757 + t1902*t938) - 0.03875*(t1922*t705 + t1902*t757 + 4.e-6*t1866*t963) + 0.14871*(4.e-6*t1902*t757 + 4.e-6*t1922*t963 + t1866*t974))*var3[4] + (t1621 + t1633 + t1648 + t1669 + t1680 + t1691 + t1710 + t1730 - 1.*t1541*t552*t562 - 1.*t1515*t552*t566)*var3[5] + (t1621 + t1633 + t1648 + t1669 + t1680 + t1691 + t1710 + t1730 - 1.*t1769*t552*t562 + t1780*t552*t566)*var3[6] + (t531*t548 + t570*t589 + t615*t630 + t685*t776 + t837*t857 + t905*t929 + 0.80321*(-4.e-6*t685*t757 - 1.*t757*t905 + t837*t938) - 0.03875*(t757*t837 + t705*t905 + 4.e-6*t685*t963) + 0.14871*(4.e-6*t757*t837 + 4.e-6*t905*t963 + t685*t974))*var3[7] + (t1161*t1174 + t1228*t1235 + t1309*t1349 - 0.03875*(t1309*t705 - 1.*t1161*t757 - 4.e-6*t1228*t757) + 0.14871*(4.e-6*t1309*t705 - 4.e-6*t1161*t757 - 1.6e-11*t1228*t757) + 0.80321*(-1.*t1161*t705 - 4.e-6*t1228*t705 - 1.000000000016*t1309*t757))*var3[8] + 5.*t270*t488*var4[0] + 20.*t191*t444*t473*var4[10] - 5.*t270*t488*var4[10] + 30.*t375*t376*t385*var4[20] - 20.*t191*t444*t473*var4[20] + 20.*t222*t235*t346*var4[30] - 30.*t375*t376*t385*var4[30] + 5.*t105*t195*var4[40] - 20.*t222*t235*t346*var4[40] - 5.*t105*t195*var4[50];
  p_output1[1]=var3[1] + (t1515*t2156 + t1541*t2173 + t1619*t2214 + t1632*t2241 - 1.*t1849*t2154*t552 + t2279*t776 + t2303*t857 + t2316*t929 + 0.80321*(-4.e-6*t2279*t757 - 1.*t2316*t757 + t2303*t938) - 0.03875*(t2316*t705 + t2303*t757 + 4.e-6*t2279*t963) + 0.14871*(4.e-6*t2303*t757 + 4.e-6*t2316*t963 + t2279*t974))*var3[3] + (t1619*t2020 + t1632*t2032 + t1849*t2009*t531 - 1.*t1515*t2009*t552*t562 + t1541*t2009*t552*t566 + t2047*t776 + t2065*t857 + t2092*t929 + 0.80321*(-4.e-6*t2047*t757 - 1.*t2092*t757 + t2065*t938) - 0.03875*(t2092*t705 + t2065*t757 + 4.e-6*t2047*t963) + 0.14871*(4.e-6*t2065*t757 + 4.e-6*t2092*t963 + t2047*t974))*var3[4] + (t1515*t2377 + t1541*t2397 + t1619*t2408 + t1632*t2425 + t2437*t776 + t2451*t857 + t2466*t929 + 0.80321*(-4.e-6*t2437*t757 - 1.*t2466*t757 + t2451*t938) - 0.03875*(t2466*t705 + t2451*t757 + 4.e-6*t2437*t963) + 0.14871*(4.e-6*t2451*t757 + 4.e-6*t2466*t963 + t2437*t974))*var3[5] + (t1769*t2397 + t1780*t2533 + t1619*t2537 + t1632*t2543 + t2559*t776 + t2570*t857 + t2576*t929 + 0.80321*(-4.e-6*t2559*t757 - 1.*t2576*t757 + t2570*t938) - 0.03875*(t2576*t705 + t2570*t757 + 4.e-6*t2559*t963) + 0.14871*(4.e-6*t2570*t757 + 4.e-6*t2576*t963 + t2559*t974))*var3[6] + (-1.*t2009*t548*t552 + t2543*t589 + t2627*t630 + t2645*t776 + t2654*t857 + t2670*t929 + 0.80321*(-4.e-6*t2645*t757 - 1.*t2670*t757 + t2654*t938) - 0.03875*(t2670*t705 + t2654*t757 + 4.e-6*t2645*t963) + 0.14871*(4.e-6*t2654*t757 + 4.e-6*t2670*t963 + t2645*t974))*var3[7] + (t1174*t2735 + t1235*t2741 + t1349*t2751 - 0.03875*(t2778 + t2782 + t2751*t705) + 0.14871*(4.e-6*t2751*t705 - 4.e-6*t2735*t757 - 1.6e-11*t2741*t757) + 0.80321*(-1.*t2735*t705 - 4.e-6*t2741*t705 - 1.000000000016*t2751*t757))*var3[8] + 5.*t270*t488*var4[1] + 20.*t191*t444*t473*var4[11] - 5.*t270*t488*var4[11] + 30.*t375*t376*t385*var4[21] - 20.*t191*t444*t473*var4[21] + 20.*t222*t235*t346*var4[31] - 30.*t375*t376*t385*var4[31] + 5.*t105*t195*var4[41] - 20.*t222*t235*t346*var4[41] - 5.*t105*t195*var4[51];
  p_output1[2]=var3[2] + (t1515*t2397 + t1541*t2533 + t1619*t2543 + t1632*t2627 - 1.*t1849*t2009*t552 + t2741*t776 + t2751*t857 + t2735*t929 + 0.80321*(t2778 + t2782 + t2751*t938) - 0.03875*(t2735*t705 + t2751*t757 + 4.e-6*t2741*t963) + 0.14871*(4.e-6*t2751*t757 + 4.e-6*t2735*t963 + t2741*t974))*var3[3] + (t1619*t2842 + t1632*t2848 - 1.*t1849*t2154*t531 + t1515*t2154*t552*t562 - 1.*t1541*t2154*t552*t566 + t2870*t776 + t2891*t857 + t2903*t929 + 0.80321*(-4.e-6*t2870*t757 - 1.*t2903*t757 + t2891*t938) - 0.03875*(t2903*t705 + t2891*t757 + 4.e-6*t2870*t963) + 0.14871*(4.e-6*t2891*t757 + 4.e-6*t2903*t963 + t2870*t974))*var3[4] + (t1515*t2173 + t1541*t2944 + t1619*t2947 + t1632*t2956 + t2968*t776 + t2980*t857 + t2986*t929 + 0.80321*(-4.e-6*t2968*t757 - 1.*t2986*t757 + t2980*t938) - 0.03875*(t2986*t705 + t2980*t757 + 4.e-6*t2968*t963) + 0.14871*(4.e-6*t2980*t757 + 4.e-6*t2986*t963 + t2968*t974))*var3[5] + (t1769*t2944 + t1780*t3087 + t1619*t3094 + t1632*t3099 + t3110*t776 + t3120*t857 + t3130*t929 + 0.80321*(-4.e-6*t3110*t757 - 1.*t3130*t757 + t3120*t938) - 0.03875*(t3130*t705 + t3120*t757 + 4.e-6*t3110*t963) + 0.14871*(4.e-6*t3120*t757 + 4.e-6*t3130*t963 + t3110*t974))*var3[6] + (t2154*t548*t552 + t3099*t589 + t3202*t630 + t3217*t776 + t3228*t857 + t3248*t929 + 0.80321*(-4.e-6*t3217*t757 - 1.*t3248*t757 + t3228*t938) - 0.03875*(t3248*t705 + t3228*t757 + 4.e-6*t3217*t963) + 0.14871*(4.e-6*t3228*t757 + 4.e-6*t3248*t963 + t3217*t974))*var3[7] + (t1174*t3321 + t1235*t3339 + t1349*t3349 - 0.03875*(t3349*t705 - 1.*t3321*t757 - 4.e-6*t3339*t757) + 0.14871*(4.e-6*t3349*t705 - 4.e-6*t3321*t757 - 1.6e-11*t3339*t757) + 0.80321*(-1.*t3321*t705 - 4.e-6*t3339*t705 - 1.000000000016*t3349*t757))*var3[8] + 5.*t270*t488*var4[2] + 20.*t191*t444*t473*var4[12] - 5.*t270*t488*var4[12] + 30.*t375*t376*t385*var4[22] - 20.*t191*t444*t473*var4[22] + 20.*t222*t235*t346*var4[32] - 30.*t375*t376*t385*var4[32] + 5.*t105*t195*var4[42] - 20.*t222*t235*t346*var4[42] - 5.*t105*t195*var4[52];
  p_output1[3]=var3[0] + (t4381*t4616 + t4349*t4640 + t3866*t4683 + t3733*t4699 + t3801*t4713 - 0.80315*(t3900*t4683 + t3882*t4699 + t3894*t4713) + 0.148705*(t3919*t4683 + t3907*t4699 + t3916*t4713) - 0.038924*(t3938*t4683 + t3925*t4699 + t3930*t4713) + t4604*t552 + t4318*t531*t562 - 1.*t4325*t531*t566)*var3[4] + (t4354 + t4394 + t4405 + t4438 + t4464 + t4484 + t4510 + t4529 - 1.*t4325*t552*t562 - 1.*t4318*t552*t566)*var3[5] + (t4354 + t4394 + t4405 + t4438 + t4464 + t4484 + t4510 + t4529 - 1.*t4542*t552*t562 + t4540*t552*t566)*var3[12] + (t3551*t3559 + t3617*t3642 + t3733*t3757 + t3801*t3843 + t3866*t3876 - 0.80315*(t3757*t3882 + t3843*t3894 + t3876*t3900) + 0.148705*(t3757*t3907 + t3843*t3916 + t3876*t3919) - 0.038924*(t3757*t3925 + t3843*t3930 + t3876*t3938) + t3527*t531)*var3[13] + (t3964*t4022 + t4090*t4140 + t4163*t4202 + 0.148705*(-6.5e-11*t3682*t4140 + t4022*t4209 + t4202*t4223) - 0.80315*(-1.000000000016*t3682*t4022 + t4140*t4238 + t4202*t4257) - 0.038924*(-1.000000000049*t3682*t4202 + t4022*t4266 + t4140*t4270))*var3[14] + 5.*t270*t488*var4[3] + 20.*t191*t444*t473*var4[13] - 5.*t270*t488*var4[13] + 30.*t375*t376*t385*var4[23] - 20.*t191*t444*t473*var4[23] + 20.*t222*t235*t346*var4[33] - 30.*t375*t376*t385*var4[33] + 5.*t105*t195*var4[43] - 20.*t222*t235*t346*var4[43] - 5.*t105*t195*var4[53];
  p_output1[4]=var3[1] + (t2156*t4318 + t2173*t4325 + t4381*t5014 + t4349*t5028 + t3866*t5040 + t3733*t5052 + t3801*t5061 - 0.80315*(t3900*t5040 + t3882*t5052 + t3894*t5061) + 0.148705*(t3919*t5040 + t3907*t5052 + t3916*t5061) - 0.038924*(t3938*t5040 + t3925*t5052 + t3930*t5061) - 1.*t2154*t4604*t552)*var3[3] + (t4381*t4865 + t4349*t4881 + t3866*t4897 + t3733*t4914 + t3801*t4931 - 0.80315*(t3900*t4897 + t3882*t4914 + t3894*t4931) + 0.148705*(t3919*t4897 + t3907*t4914 + t3916*t4931) - 0.038924*(t3938*t4897 + t3925*t4914 + t3930*t4931) + t2009*t4604*t531 - 1.*t2009*t4318*t552*t562 + t2009*t4325*t552*t566)*var3[4] + (t2377*t4318 + t2397*t4325 + t4349*t5162 + t4381*t5168 + t3733*t5174 + t3866*t5192 + t3801*t5206 - 0.80315*(t3882*t5174 + t3900*t5192 + t3894*t5206) + 0.148705*(t3907*t5174 + t3919*t5192 + t3916*t5206) - 0.038924*(t3925*t5174 + t3938*t5192 + t3930*t5206))*var3[5] + (t2533*t4540 + t2397*t4542 + t4349*t5255 + t4381*t5267 + t3733*t5284 + t3866*t5295 + t3801*t5305 - 0.80315*(t3882*t5284 + t3900*t5295 + t3894*t5305) + 0.148705*(t3907*t5284 + t3919*t5295 + t3916*t5305) - 0.038924*(t3925*t5284 + t3938*t5295 + t3930*t5305))*var3[12] + (t3551*t5255 + t3617*t5364 + t3733*t5383 + t3801*t5404 + t3866*t5421 - 0.80315*(t3882*t5383 + t3894*t5404 + t3900*t5421) + 0.148705*(t3907*t5383 + t3916*t5404 + t3919*t5421) - 0.038924*(t3925*t5383 + t3930*t5404 + t3938*t5421) - 1.*t2009*t3527*t552)*var3[13] + (t3964*t5466 + t4090*t5497 + t4163*t5517 - 0.038924*(t4266*t5466 + t4270*t5497 - 1.000000000049*t3682*t5517) + 0.148705*(t4209*t5466 - 6.5e-11*t3682*t5497 + t4223*t5517) - 0.80315*(-1.000000000016*t3682*t5466 + t4238*t5497 + t4257*t5517))*var3[14] + 5.*t270*t488*var4[4] + 20.*t191*t444*t473*var4[14] - 5.*t270*t488*var4[14] + 30.*t375*t376*t385*var4[24] - 20.*t191*t444*t473*var4[24] + 20.*t222*t235*t346*var4[34] - 30.*t375*t376*t385*var4[34] + 5.*t105*t195*var4[44] - 20.*t222*t235*t346*var4[44] - 5.*t105*t195*var4[54];
  p_output1[5]=var3[2] + (t2397*t4318 + t2533*t4325 + t4381*t5255 + t4349*t5364 + t3866*t5466 + t3733*t5497 + t3801*t5517 - 0.80315*(t3900*t5466 + t3882*t5497 + t3894*t5517) + 0.148705*(t3919*t5466 + t3907*t5497 + t3916*t5517) - 0.038924*(t3938*t5466 + t3925*t5497 + t3930*t5517) - 1.*t2009*t4604*t552)*var3[3] + (-1.*t2154*t4604*t531 + t4381*t5598 + t4349*t5602 + t2154*t4318*t552*t562 + t3866*t5620 + t3733*t5632 + t3801*t5650 - 0.80315*(t3900*t5620 + t3882*t5632 + t3894*t5650) + 0.148705*(t3919*t5620 + t3907*t5632 + t3916*t5650) - 0.038924*(t3938*t5620 + t3925*t5632 + t3930*t5650) - 1.*t2154*t4325*t552*t566)*var3[4] + (t2173*t4318 + t2944*t4325 + t4349*t5707 + t4381*t5712 + t3733*t5719 + t3866*t5738 + t3801*t5760 - 0.80315*(t3882*t5719 + t3900*t5738 + t3894*t5760) + 0.148705*(t3907*t5719 + t3919*t5738 + t3916*t5760) - 0.038924*(t3925*t5719 + t3938*t5738 + t3930*t5760))*var3[5] + (t3087*t4540 + t2944*t4542 + t4349*t5816 + t4381*t5823 + t3733*t5838 + t3866*t5847 + t3801*t5852 - 0.80315*(t3882*t5838 + t3900*t5847 + t3894*t5852) + 0.148705*(t3907*t5838 + t3919*t5847 + t3916*t5852) - 0.038924*(t3925*t5838 + t3938*t5847 + t3930*t5852))*var3[12] + (t2154*t3527*t552 + t3551*t5816 + t3617*t5936 + t3733*t5948 + t3801*t5966 + t3866*t5979 - 0.80315*(t3882*t5948 + t3894*t5966 + t3900*t5979) + 0.148705*(t3907*t5948 + t3916*t5966 + t3919*t5979) - 0.038924*(t3925*t5948 + t3930*t5966 + t3938*t5979))*var3[13] + (t3964*t6060 + t4090*t6077 + t4163*t6092 - 0.038924*(t4266*t6060 + t4270*t6077 - 1.000000000049*t3682*t6092) + 0.148705*(t4209*t6060 - 6.5e-11*t3682*t6077 + t4223*t6092) - 0.80315*(-1.000000000016*t3682*t6060 + t4238*t6077 + t4257*t6092))*var3[14] + 5.*t270*t488*var4[5] + 20.*t191*t444*t473*var4[15] - 5.*t270*t488*var4[15] + 30.*t375*t376*t385*var4[25] - 20.*t191*t444*t473*var4[25] + 20.*t222*t235*t346*var4[35] - 30.*t375*t376*t385*var4[35] + 5.*t105*t195*var4[45] - 20.*t222*t235*t346*var4[45] - 5.*t105*t195*var4[55];
  p_output1[6]=var3[1] + (-0.002264*t2156 + 0.00183*t2173 + 0.024028*t2154*t552)*var3[3] + (-0.024028*t2009*t531 + 0.002264*t2009*t552*t562 + 0.00183*t2009*t552*t566)*var3[4] + (-0.002264*t2377 + 0.00183*t2397)*var3[5] + 5.*t270*t488*var4[6] + 20.*t191*t444*t473*var4[16] - 5.*t270*t488*var4[16] + 30.*t375*t376*t385*var4[26] - 20.*t191*t444*t473*var4[26] + 20.*t222*t235*t346*var4[36] - 30.*t375*t376*t385*var4[36] + 5.*t105*t195*var4[46] - 20.*t222*t235*t346*var4[46] - 5.*t105*t195*var4[56];
  p_output1[7]=var3[2] + (-0.002264*t2397 + 0.00183*t2533 + 0.024028*t2009*t552)*var3[3] + (0.024028*t2154*t531 - 0.002264*t2154*t552*t562 - 0.00183*t2154*t552*t566)*var3[4] + (-0.002264*t2173 + 0.00183*t2944)*var3[5] + 5.*t270*t488*var4[7] + 20.*t191*t444*t473*var4[17] - 5.*t270*t488*var4[17] + 30.*t375*t376*t385*var4[27] - 20.*t191*t444*t473*var4[27] + 20.*t222*t235*t346*var4[37] - 30.*t375*t376*t385*var4[37] + 5.*t105*t195*var4[47] - 20.*t222*t235*t346*var4[47] - 5.*t105*t195*var4[57];
  p_output1[8]=t2173*t552*t566*t6370*var3[3] + (-1.*t2377*t531*t566*t6370 + t2009*t6361*t6362*t6370)*var3[4] + (-1.*t2377*t552*t562*t6370 + t2397*t552*t566*t6370)*var3[5] + 5.*t270*t488*var4[8] + 20.*t191*t444*t473*var4[18] - 5.*t270*t488*var4[18] + 30.*t375*t376*t385*var4[28] - 20.*t191*t444*t473*var4[28] + 20.*t222*t235*t346*var4[38] - 30.*t375*t376*t385*var4[38] + 5.*t105*t195*var4[48] - 20.*t222*t235*t346*var4[48] - 5.*t105*t195*var4[58];
  p_output1[9]=(0.15121*(t2533*t6424 + t2397*t6438) - 0.15121*(t2397*t6424 - 1.*t2533*t6438) + t2533*t6442 + 0.15121*(t2533*t6454 + t2397*t6459) + 0.15121*(t2397*t6454 - 1.*t2533*t6459) - 1.*t2533*t6464 + t2397*t6471 - 1.*t2397*t6477)*var3[3] + (0.15121*(-1.*t2154*t552*t566*t6424 + t2154*t552*t562*t6438) - 0.15121*(t2154*t552*t562*t6424 + t2154*t552*t566*t6438) - 1.*t2154*t552*t566*t6442 + 0.15121*(-1.*t2154*t552*t566*t6454 + t2154*t552*t562*t6459) + 0.15121*(t2154*t552*t562*t6454 + t2154*t552*t566*t6459) + t2154*t552*t566*t6464 + t2154*t552*t562*t6471 - 1.*t2154*t552*t562*t6477)*var3[4] + (t2944*t6442 - 1.*t2944*t6464 + t2173*t6471 - 1.*t2173*t6477 + 0.15121*(t2173*t6438 + t6536) - 0.15121*(t2173*t6424 + t6543) + 0.15121*(t2173*t6459 + t6569) + 0.15121*(t2173*t6454 + t6588))*var3[5] + (t3087*(0.15121*t6438 + t6528) + t2944*(t6441 + t6528) + 0.15121*(-1.*t3087*t6438 + t6536) - 0.15121*(-1.*t3087*t6424 + t6543))*var3[9] + (-1.*t3087*(-0.15121*t6454 + t6463) - 1.*t2944*(0.15121*t6454 + t6463) + 0.15121*(-1.*t3087*t6459 + t6569) + 0.15121*(-1.*t3087*t6454 + t6588))*var3[15] + 5.*t270*t488*var4[9] + 20.*t191*t444*t473*var4[19] - 5.*t270*t488*var4[19] + 30.*t375*t376*t385*var4[29] - 20.*t191*t444*t473*var4[29] + 20.*t222*t235*t346*var4[39] - 30.*t375*t376*t385*var4[39] + 5.*t105*t195*var4[49] - 20.*t222*t235*t346*var4[49] - 5.*t105*t195*var4[59];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4,*var5,*var6,*var7;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 7)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Seven input(s) required (var1,var2,var3,var4,var5,var6,var7).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 2 && ncols == 1) && 
      !(mrows == 1 && ncols == 2))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 60 && ncols == 1) && 
      !(mrows == 1 && ncols == 60))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }
  mrows = mxGetM(prhs[4]);
  ncols = mxGetN(prhs[4]);
  if( !mxIsDouble(prhs[4]) || mxIsComplex(prhs[4]) ||
    ( !(mrows == 2 && ncols == 1) && 
      !(mrows == 1 && ncols == 2))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var5 is wrong.");
    }
  mrows = mxGetM(prhs[5]);
  ncols = mxGetN(prhs[5]);
  if( !mxIsDouble(prhs[5]) || mxIsComplex(prhs[5]) ||
    ( !(mrows == 1 && ncols == 1) && 
      !(mrows == 1 && ncols == 1))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var6 is wrong.");
    }
  mrows = mxGetM(prhs[6]);
  ncols = mxGetN(prhs[6]);
  if( !mxIsDouble(prhs[6]) || mxIsComplex(prhs[6]) ||
    ( !(mrows == 1 && ncols == 1) && 
      !(mrows == 1 && ncols == 1))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var7 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
  var5 = mxGetPr(prhs[4]);
  var6 = mxGetPr(prhs[5]);
  var7 = mxGetPr(prhs[6]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 10, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4,var5,var6,var7);


}

#else // MATLAB_MEX_FILE

#include "d1y_position_ParallelStance1.hh"

namespace ParallelStance1
{

void d1y_position_ParallelStance1_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4,const double *var5,const double *var6,const double *var7)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4, var5, var6, var7);

}

}

#endif // MATLAB_MEX_FILE
