/*
 * Automatically Generated from Mathematica.
 * Wed 8 Dec 2021 23:11:47 GMT+01:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4,const double *var5,const double *var6,const double *var7)
{
  double t8;
  double t71;
  double t101;
  double t103;
  double t109;
  double t110;
  double t113;
  double t133;
  double t142;
  double t148;
  double t160;
  double t177;
  double t182;
  double t200;
  double t212;
  double t228;
  double t252;
  double t253;
  double t264;
  double t303;
  double t304;
  double t327;
  double t412;
  double t358;
  double t363;
  double t464;
  double t421;
  double t425;
  double t470;
  double t513;
  double t514;
  double t521;
  double t355;
  double t444;
  double t477;
  double t478;
  double t605;
  double t607;
  double t609;
  double t613;
  double t618;
  double t621;
  double t625;
  double t627;
  double t643;
  double t649;
  double t657;
  double t659;
  double t566;
  double t578;
  double t582;
  double t585;
  double t733;
  double t809;
  double t894;
  double t910;
  double t929;
  double t947;
  double t970;
  double t971;
  double t805;
  double t814;
  double t831;
  double t857;
  double t1013;
  double t1019;
  double t1028;
  double t1030;
  double t1032;
  double t1037;
  double t1123;
  double t1130;
  double t1131;
  double t1169;
  double t1178;
  double t1179;
  double t588;
  double t611;
  double t614;
  double t616;
  double t632;
  double t635;
  double t638;
  double t661;
  double t670;
  double t671;
  double t673;
  double t693;
  double t699;
  double t1251;
  double t1257;
  double t1259;
  double t1232;
  double t1233;
  double t1243;
  double t1275;
  double t1284;
  double t1285;
  double t750;
  double t755;
  double t1140;
  double t1184;
  double t1202;
  double t1206;
  double t1209;
  double t1219;
  double t1224;
  double t1225;
  double t1226;
  double t1227;
  double t1249;
  double t1264;
  double t1292;
  double t1295;
  double t1296;
  double t1300;
  double t1324;
  double t1325;
  double t1331;
  double t1343;
  double t1352;
  double t1366;
  double t1395;
  double t1412;
  double t1413;
  double t1426;
  double t1432;
  double t1436;
  double t1133;
  double t1134;
  double t1142;
  double t1541;
  double t1545;
  double t1549;
  double t1563;
  double t1574;
  double t1580;
  double t1610;
  double t1613;
  double t1614;
  double t1615;
  double t1626;
  double t1627;
  double t1628;
  double t1630;
  double t1620;
  double t1621;
  double t1622;
  double t1623;
  double t1776;
  double t1599;
  double t1604;
  double t1606;
  double t1608;
  double t1793;
  double t1803;
  double t1807;
  double t1813;
  double t1814;
  double t1817;
  double t1826;
  double t1828;
  double t1835;
  double t1836;
  double t1855;
  double t1860;
  double t1861;
  double t1862;
  double t1844;
  double t1846;
  double t1847;
  double t1852;
  double t1893;
  double t1891;
  double t1895;
  double t1898;
  double t1900;
  double t1904;
  double t1905;
  double t1907;
  double t1908;
  double t1913;
  double t1925;
  double t1928;
  double t1935;
  double t1949;
  double t1951;
  double t1958;
  double t1970;
  double t2013;
  double t2017;
  double t2020;
  double t2025;
  double t1996;
  double t2000;
  double t2004;
  double t2005;
  double t2076;
  double t2077;
  double t2082;
  double t2092;
  double t2093;
  double t2100;
  double t2102;
  double t2106;
  double t2108;
  double t2115;
  double t2117;
  double t2119;
  double t2140;
  double t2145;
  double t2147;
  double t2129;
  double t2131;
  double t2133;
  double t2149;
  double t2153;
  double t2158;
  double t1461;
  double t1466;
  double t1491;
  double t1497;
  double t2209;
  double t2214;
  double t2217;
  double t2225;
  double t2226;
  double t2233;
  double t2241;
  double t2262;
  double t2265;
  double t2266;
  double t2253;
  double t2254;
  double t2255;
  double t2273;
  double t2274;
  double t2276;
  double t362;
  double t366;
  double t388;
  double t480;
  double t481;
  double t490;
  double t529;
  double t530;
  double t538;
  double t2340;
  double t2341;
  double t2342;
  double t2359;
  double t2360;
  double t2365;
  double t2373;
  double t2381;
  double t2384;
  double t2385;
  double t2387;
  double t2349;
  double t2351;
  double t2353;
  double t2354;
  double t862;
  double t865;
  double t866;
  double t972;
  double t989;
  double t991;
  double t1039;
  double t1044;
  double t1052;
  double t2485;
  double t2486;
  double t2487;
  double t2489;
  double t2475;
  double t2479;
  double t2480;
  double t2481;
  double t2498;
  double t2504;
  double t2644;
  double t2647;
  double t2649;
  double t2655;
  double t2656;
  double t2657;
  double t2665;
  double t2673;
  double t2675;
  double t2681;
  double t2695;
  double t2696;
  double t2698;
  double t2703;
  double t2683;
  double t2685;
  double t2688;
  double t2689;
  double t2763;
  double t2769;
  double t2770;
  double t2773;
  double t2775;
  double t2780;
  double t2781;
  double t2787;
  double t2801;
  double t2803;
  double t2805;
  double t2791;
  double t2794;
  double t2796;
  double t2810;
  double t2812;
  double t2813;
  double t2896;
  double t2897;
  double t2900;
  double t2911;
  double t2914;
  double t2923;
  double t2926;
  double t2942;
  double t2943;
  double t2944;
  double t2930;
  double t2936;
  double t2937;
  double t2958;
  double t2961;
  double t2963;
  double t3034;
  double t3042;
  double t3047;
  double t3070;
  double t3074;
  double t3075;
  double t3094;
  double t3095;
  double t3099;
  double t3101;
  double t3056;
  double t3060;
  double t3062;
  double t3063;
  double t3184;
  double t3185;
  double t3189;
  double t3190;
  double t3164;
  double t3167;
  double t3170;
  double t3175;
  double t3194;
  double t3198;
  double t2562;
  double t2563;
  double t3357;
  double t3362;
  double t3378;
  double t3364;
  double t3421;
  double t3444;
  double t3437;
  double t3481;
  double t3483;
  double t3486;
  double t3501;
  double t3410;
  double t3442;
  double t3445;
  double t3446;
  double t3417;
  double t3466;
  double t3467;
  double t3468;
  double t3499;
  double t3377;
  double t3538;
  double t3610;
  double t3523;
  double t3451;
  double t3624;
  double t3460;
  double t3566;
  double t3678;
  double t3544;
  double t3561;
  double t3563;
  double t3570;
  double t3575;
  double t3584;
  double t3645;
  double t3620;
  double t3621;
  double t3623;
  double t3625;
  double t3627;
  double t3631;
  double t3689;
  double t3692;
  double t3704;
  double t3709;
  double t3710;
  double t3712;
  double t3511;
  double t3724;
  double t3527;
  double t3776;
  double t3777;
  double t3604;
  double t3731;
  double t3890;
  double t3909;
  double t3863;
  double t3975;
  double t3976;
  double t3891;
  double t3948;
  double t3892;
  double t3898;
  double t3902;
  double t3910;
  double t3915;
  double t3924;
  double t3925;
  double t3926;
  double t3927;
  double t3980;
  double t3984;
  double t3985;
  double t3987;
  double t3990;
  double t3994;
  double t3995;
  double t3996;
  double t3931;
  double t4031;
  double t4032;
  double t4034;
  double t4038;
  double t4041;
  double t4044;
  double t4045;
  double t4053;
  double t3875;
  double t4118;
  double t4014;
  double t4183;
  double t4184;
  double t4187;
  double t4217;
  double t3479;
  double t3491;
  double t3513;
  double t3520;
  double t3531;
  double t3533;
  double t3537;
  double t4265;
  double t4277;
  double t4290;
  double t3637;
  double t3639;
  double t3652;
  double t3663;
  double t3680;
  double t3685;
  double t3686;
  double t3590;
  double t3598;
  double t3606;
  double t3607;
  double t3613;
  double t3617;
  double t3619;
  double t3828;
  double t4302;
  double t4306;
  double t4313;
  double t3852;
  double t4319;
  double t4322;
  double t4329;
  double t3837;
  double t3841;
  double t4332;
  double t4338;
  double t4339;
  double t3728;
  double t3753;
  double t3754;
  double t3735;
  double t3766;
  double t3768;
  double t3797;
  double t3784;
  double t4394;
  double t4207;
  double t4209;
  double t4210;
  double t4215;
  double t4216;
  double t4221;
  double t4223;
  double t4224;
  double t4228;
  double t4230;
  double t4233;
  double t4236;
  double t4238;
  double t4239;
  double t4241;
  double t4253;
  double t4261;
  double t4295;
  double t4315;
  double t4331;
  double t4344;
  double t4346;
  double t4347;
  double t4351;
  double t4354;
  double t4356;
  double t4358;
  double t4360;
  double t4361;
  double t4363;
  double t4365;
  double t4371;
  double t4373;
  double t4376;
  double t4378;
  double t4380;
  double t4194;
  double t4197;
  double t4185;
  double t4190;
  double t4453;
  double t4455;
  double t4462;
  double t4467;
  double t4469;
  double t4472;
  double t4476;
  double t4477;
  double t4483;
  double t4486;
  double t4497;
  double t4498;
  double t4499;
  double t4501;
  double t4504;
  double t4508;
  double t4512;
  double t4516;
  double t4435;
  double t4437;
  double t4439;
  double t4441;
  double t4444;
  double t4445;
  double t4446;
  double t4615;
  double t4616;
  double t4617;
  double t4621;
  double t4622;
  double t4626;
  double t4631;
  double t4632;
  double t4638;
  double t4639;
  double t4641;
  double t4644;
  double t4646;
  double t4649;
  double t4654;
  double t4656;
  double t4658;
  double t4661;
  double t4729;
  double t4738;
  double t4741;
  double t4747;
  double t4753;
  double t4754;
  double t4758;
  double t4763;
  double t4764;
  double t4771;
  double t4778;
  double t4779;
  double t4780;
  double t4785;
  double t4787;
  double t4790;
  double t4791;
  double t4795;
  double t4859;
  double t4861;
  double t4862;
  double t4869;
  double t4870;
  double t4871;
  double t4874;
  double t4877;
  double t4878;
  double t4883;
  double t4884;
  double t4886;
  double t4890;
  double t4895;
  double t4898;
  double t4395;
  double t4398;
  double t4413;
  double t4968;
  double t4969;
  double t4972;
  double t4975;
  double t4978;
  double t4980;
  double t4982;
  double t4984;
  double t4986;
  double t4988;
  double t4991;
  double t4994;
  double t4997;
  double t3373;
  double t3376;
  double t3387;
  double t3392;
  double t3398;
  double t3402;
  double t3412;
  double t3414;
  double t3428;
  double t3431;
  double t3434;
  double t3435;
  double t3457;
  double t3459;
  double t3461;
  double t3462;
  double t3463;
  double t3465;
  double t5049;
  double t5050;
  double t5052;
  double t5055;
  double t5057;
  double t5058;
  double t5059;
  double t5061;
  double t5064;
  double t5066;
  double t5069;
  double t5072;
  double t5073;
  double t5074;
  double t5078;
  double t3869;
  double t3870;
  double t3878;
  double t3880;
  double t3882;
  double t3887;
  double t3936;
  double t3937;
  double t3949;
  double t3967;
  double t3971;
  double t3973;
  double t4001;
  double t4008;
  double t4017;
  double t4026;
  double t4027;
  double t4028;
  double t4060;
  double t5130;
  double t5132;
  double t5134;
  double t5137;
  double t5143;
  double t5148;
  double t5149;
  double t5153;
  double t4079;
  double t5158;
  double t5162;
  double t5165;
  double t5169;
  double t4105;
  double t4122;
  double t4140;
  double t4144;
  double t5271;
  double t5272;
  double t5274;
  double t5282;
  double t5287;
  double t5289;
  double t5296;
  double t5297;
  double t5298;
  double t5299;
  double t5306;
  double t5307;
  double t5308;
  double t5310;
  double t5314;
  double t5315;
  double t5316;
  double t5317;
  double t5352;
  double t5353;
  double t5354;
  double t5357;
  double t5360;
  double t5370;
  double t5372;
  double t5374;
  double t5382;
  double t5384;
  double t5390;
  double t5393;
  double t5395;
  double t5397;
  double t5430;
  double t5432;
  double t5435;
  double t5436;
  double t5439;
  double t5440;
  double t5441;
  double t5447;
  double t5448;
  double t5449;
  double t5451;
  double t5453;
  double t5454;
  double t5509;
  double t5512;
  double t5514;
  double t5521;
  double t5525;
  double t5527;
  double t5533;
  double t5543;
  double t5546;
  double t5548;
  double t5550;
  double t5553;
  double t5555;
  double t5558;
  double t5559;
  double t5593;
  double t5594;
  double t5597;
  double t5604;
  double t5608;
  double t5613;
  double t5615;
  double t5617;
  double t5620;
  double t5621;
  double t5623;
  double t5624;
  double t5860;
  double t5861;
  double t5862;
  double t5865;
  double t5870;
  double t5872;
  double t5920;
  double t5921;
  double t5925;
  double t5928;
  double t5929;
  double t5935;
  double t5936;
  double t5937;
  double t5940;
  double t5944;
  double t6018;
  double t5955;
  double t5959;
  double t5963;
  double t5966;
  double t5926;
  double t5930;
  double t5949;
  double t5950;
  double t6033;
  double t6039;
  double t6073;
  double t6093;
  t8 = -1.*var5[0];
  t71 = t8 + var5[1];
  t101 = Power(t71,-5);
  t103 = -1. + var6[0];
  t109 = -1. + var7[0];
  t110 = 1/t109;
  t113 = -1.*var1[0];
  t133 = t113 + var1[1];
  t142 = t103*t110*t133;
  t148 = t8 + var1[0] + t142;
  t160 = Power(t148,4);
  t177 = Power(t71,-4);
  t182 = Power(t148,3);
  t200 = 1/t71;
  t212 = -1.*t200*t148;
  t228 = 1. + t212;
  t252 = Power(t71,-3);
  t253 = Power(t148,2);
  t264 = Power(t228,2);
  t303 = Power(t71,-2);
  t304 = Power(t228,3);
  t327 = Power(t228,4);
  t412 = Cos(var2[4]);
  t358 = Cos(var2[7]);
  t363 = Sin(var2[7]);
  t464 = Cos(var2[5]);
  t421 = Cos(var2[6]);
  t425 = Sin(var2[5]);
  t470 = Sin(var2[6]);
  t513 = t412*t464*t421;
  t514 = -1.*t412*t425*t470;
  t521 = t513 + t514;
  t355 = Sin(var2[4]);
  t444 = -1.*t412*t421*t425;
  t477 = -1.*t412*t464*t470;
  t478 = t444 + t477;
  t605 = Cos(var2[8]);
  t607 = -1.*t605;
  t609 = 1. + t607;
  t613 = Sin(var2[8]);
  t618 = -1.*t358*t355;
  t621 = -4.e-6*t358*t478;
  t625 = -1.000000000016*t521*t363;
  t627 = t618 + t621 + t625;
  t643 = t358*t521;
  t649 = -1.*t355*t363;
  t657 = -4.e-6*t478*t363;
  t659 = t643 + t649 + t657;
  t566 = 4.e-6*t358*t521;
  t578 = -4.e-6*t355*t363;
  t582 = -1.6e-11*t478*t363;
  t585 = t566 + t578 + t582;
  t733 = -1. + t605;
  t809 = -1. + t358;
  t894 = 4.e-6*t809*t355;
  t910 = 1.6e-11*t809;
  t929 = 1. + t910;
  t947 = t929*t478;
  t970 = 4.e-6*t521*t363;
  t971 = t894 + t947 + t970;
  t805 = t358*t355;
  t814 = 4.e-6*t809*t478;
  t831 = t521*t363;
  t857 = t805 + t814 + t831;
  t1013 = -1.*t358;
  t1019 = 1. + t1013;
  t1028 = -1.000000000016*t1019;
  t1030 = 1. + t1028;
  t1032 = t1030*t521;
  t1037 = t1032 + t649 + t657;
  t1123 = -1.*t421;
  t1130 = 1. + t1123;
  t1131 = 0.15121*t1130;
  t1169 = -1.*t412*t464*t421;
  t1178 = t412*t425*t470;
  t1179 = t1169 + t1178;
  t588 = -1.284e-8*var2[8];
  t611 = -1.5499600000248e-7*t609;
  t614 = 2.012840000032e-6*t613;
  t616 = t588 + t611 + t614;
  t632 = 0.503210000016051*t609;
  t635 = 0.03874900000062*t613;
  t638 = t632 + t635;
  t661 = 5.136e-14*var2[8];
  t670 = -0.03874900000062*t609;
  t671 = 0.503210000008*t613;
  t673 = t661 + t670 + t671;
  t693 = -1.000000000016*t609;
  t699 = 1. + t693;
  t1251 = t1030*t478;
  t1257 = -4.e-6*t1179*t363;
  t1259 = t1251 + t1257;
  t1232 = t929*t1179;
  t1233 = 4.e-6*t478*t363;
  t1243 = t1232 + t1233;
  t1275 = 4.e-6*t809*t1179;
  t1284 = t478*t363;
  t1285 = t1275 + t1284;
  t750 = 1.6e-11*t733;
  t755 = 1. + t750;
  t1140 = 0.15121*t470;
  t1184 = -1.2484e-7*var2[7];
  t1202 = -1.5499600000248e-7*t1019;
  t1206 = 1.124840000016e-6*t363;
  t1209 = t1184 + t1202 + t1206;
  t1219 = t1179*t1209;
  t1224 = 0.281210000008499*t1019;
  t1225 = 0.03874900000062*t363;
  t1226 = t1224 + t1225;
  t1227 = t478*t1226;
  t1249 = t1243*t616;
  t1264 = t1259*t638;
  t1292 = t1285*t673;
  t1295 = t699*t1259;
  t1296 = -4.e-6*t1243*t613;
  t1300 = -1.*t1285*t613;
  t1324 = t1295 + t1296 + t1300;
  t1325 = 0.80321*t1324;
  t1331 = t755*t1243;
  t1343 = 4.e-6*t733*t1285;
  t1352 = 4.e-6*t1259*t613;
  t1366 = t1331 + t1343 + t1352;
  t1395 = 0.14871*t1366;
  t1412 = 4.e-6*t733*t1243;
  t1413 = t605*t1285;
  t1426 = t1259*t613;
  t1432 = t1412 + t1413 + t1426;
  t1436 = -0.03875*t1432;
  t1133 = -0.15121*t470;
  t1134 = t1131 + t1133;
  t1142 = t1131 + t1140;
  t1541 = t421*t355*t425;
  t1545 = t464*t355*t470;
  t1549 = t1541 + t1545;
  t1563 = -1.*t464*t421*t355;
  t1574 = t355*t425*t470;
  t1580 = t1563 + t1574;
  t1610 = 4.e-6*t412*t809;
  t1613 = t929*t1549;
  t1614 = 4.e-6*t1580*t363;
  t1615 = t1610 + t1613 + t1614;
  t1626 = t412*t358;
  t1627 = 4.e-6*t809*t1549;
  t1628 = t1580*t363;
  t1630 = t1626 + t1627 + t1628;
  t1620 = t1030*t1580;
  t1621 = -1.*t412*t363;
  t1622 = -4.e-6*t1549*t363;
  t1623 = t1620 + t1621 + t1622;
  t1776 = Sin(var2[3]);
  t1599 = 4.9936e-13*var2[7];
  t1604 = -0.03874900000062*t1019;
  t1606 = 0.281210000004*t363;
  t1608 = t1599 + t1604 + t1606;
  t1793 = -1.*t412*t421*t1776*t425;
  t1803 = -1.*t412*t464*t1776*t470;
  t1807 = t1793 + t1803;
  t1813 = t412*t464*t421*t1776;
  t1814 = -1.*t412*t1776*t425*t470;
  t1817 = t1813 + t1814;
  t1826 = 4.e-6*t809*t1776*t355;
  t1828 = t929*t1807;
  t1835 = 4.e-6*t1817*t363;
  t1836 = t1826 + t1828 + t1835;
  t1855 = t358*t1776*t355;
  t1860 = 4.e-6*t809*t1807;
  t1861 = t1817*t363;
  t1862 = t1855 + t1860 + t1861;
  t1844 = t1030*t1817;
  t1846 = -1.*t1776*t355*t363;
  t1847 = -4.e-6*t1807*t363;
  t1852 = t1844 + t1846 + t1847;
  t1893 = Cos(var2[3]);
  t1891 = -1.*t464*t1776;
  t1895 = -1.*t1893*t355*t425;
  t1898 = t1891 + t1895;
  t1900 = t1893*t464*t355;
  t1904 = -1.*t1776*t425;
  t1905 = t1900 + t1904;
  t1907 = t421*t1898;
  t1908 = -1.*t1905*t470;
  t1913 = t1907 + t1908;
  t1925 = t421*t1905;
  t1928 = t1898*t470;
  t1935 = t1925 + t1928;
  t1949 = -4.e-6*t1893*t412*t809;
  t1951 = t929*t1913;
  t1958 = 4.e-6*t1935*t363;
  t1970 = t1949 + t1951 + t1958;
  t2013 = -1.*t1893*t412*t358;
  t2017 = 4.e-6*t809*t1913;
  t2020 = t1935*t363;
  t2025 = t2013 + t2017 + t2020;
  t1996 = t1030*t1935;
  t2000 = t1893*t412*t363;
  t2004 = -4.e-6*t1913*t363;
  t2005 = t1996 + t2000 + t2004;
  t2076 = -1.*t464*t1776*t355;
  t2077 = -1.*t1893*t425;
  t2082 = t2076 + t2077;
  t2092 = t1893*t464;
  t2093 = -1.*t1776*t355*t425;
  t2100 = t2092 + t2093;
  t2102 = t421*t2082;
  t2106 = -1.*t2100*t470;
  t2108 = t2102 + t2106;
  t2115 = t421*t2100;
  t2117 = t2082*t470;
  t2119 = t2115 + t2117;
  t2140 = t1030*t2119;
  t2145 = -4.e-6*t2108*t363;
  t2147 = t2140 + t2145;
  t2129 = t929*t2108;
  t2131 = 4.e-6*t2119*t363;
  t2133 = t2129 + t2131;
  t2149 = 4.e-6*t809*t2108;
  t2153 = t2119*t363;
  t2158 = t2149 + t2153;
  t1461 = -0.15121*t421;
  t1466 = t1461 + t1140;
  t1491 = 0.15121*t421;
  t1497 = t1491 + t1140;
  t2209 = t464*t1776*t355;
  t2214 = t1893*t425;
  t2217 = t2209 + t2214;
  t2225 = -1.*t421*t2217;
  t2226 = t2225 + t2106;
  t2233 = -1.*t2217*t470;
  t2241 = t2115 + t2233;
  t2262 = t1030*t2241;
  t2265 = -4.e-6*t2226*t363;
  t2266 = t2262 + t2265;
  t2253 = t929*t2226;
  t2254 = 4.e-6*t2241*t363;
  t2255 = t2253 + t2254;
  t2273 = 4.e-6*t809*t2226;
  t2274 = t2241*t363;
  t2276 = t2273 + t2274;
  t362 = 0.281210000004*t358;
  t366 = -0.03874900000062*t363;
  t388 = 4.9936e-13 + t362 + t366;
  t480 = 1.124840000016e-6*t358;
  t481 = -1.5499600000248e-7*t363;
  t490 = -1.2484e-7 + t480 + t481;
  t529 = 0.03874900000062*t358;
  t530 = 0.281210000008499*t363;
  t538 = t529 + t530;
  t2340 = t421*t2217;
  t2341 = t2100*t470;
  t2342 = t2340 + t2341;
  t2359 = t412*t358*t1776;
  t2360 = -4.e-6*t358*t2241;
  t2365 = -1.000000000016*t2342*t363;
  t2373 = t2359 + t2360 + t2365;
  t2381 = t358*t2342;
  t2384 = t412*t1776*t363;
  t2385 = -4.e-6*t2241*t363;
  t2387 = t2381 + t2384 + t2385;
  t2349 = 4.e-6*t358*t2342;
  t2351 = 4.e-6*t412*t1776*t363;
  t2353 = -1.6e-11*t2241*t363;
  t2354 = t2349 + t2351 + t2353;
  t862 = 0.503210000008*t605;
  t865 = -0.03874900000062*t613;
  t866 = 5.136e-14 + t862 + t865;
  t972 = 2.012840000032e-6*t605;
  t989 = -1.5499600000248e-7*t613;
  t991 = -1.284e-8 + t972 + t989;
  t1039 = 0.03874900000062*t605;
  t1044 = 0.503210000016051*t613;
  t1052 = t1039 + t1044;
  t2485 = -4.e-6*t412*t809*t1776;
  t2486 = t929*t2241;
  t2487 = 4.e-6*t2342*t363;
  t2489 = t2485 + t2486 + t2487;
  t2475 = -1.*t412*t358*t1776;
  t2479 = 4.e-6*t809*t2241;
  t2480 = t2342*t363;
  t2481 = t2475 + t2479 + t2480;
  t2498 = t1030*t2342;
  t2504 = t2498 + t2384 + t2385;
  t2644 = t1893*t412*t421*t425;
  t2647 = t1893*t412*t464*t470;
  t2649 = t2644 + t2647;
  t2655 = -1.*t1893*t412*t464*t421;
  t2656 = t1893*t412*t425*t470;
  t2657 = t2655 + t2656;
  t2665 = -4.e-6*t1893*t809*t355;
  t2673 = t929*t2649;
  t2675 = 4.e-6*t2657*t363;
  t2681 = t2665 + t2673 + t2675;
  t2695 = -1.*t1893*t358*t355;
  t2696 = 4.e-6*t809*t2649;
  t2698 = t2657*t363;
  t2703 = t2695 + t2696 + t2698;
  t2683 = t1030*t2657;
  t2685 = t1893*t355*t363;
  t2688 = -4.e-6*t2649*t363;
  t2689 = t2683 + t2685 + t2688;
  t2763 = t464*t1776;
  t2769 = t1893*t355*t425;
  t2770 = t2763 + t2769;
  t2773 = -1.*t2770*t470;
  t2775 = t1925 + t2773;
  t2780 = t421*t2770;
  t2781 = t1905*t470;
  t2787 = t2780 + t2781;
  t2801 = t1030*t2787;
  t2803 = -4.e-6*t2775*t363;
  t2805 = t2801 + t2803;
  t2791 = t929*t2775;
  t2794 = 4.e-6*t2787*t363;
  t2796 = t2791 + t2794;
  t2810 = 4.e-6*t809*t2775;
  t2812 = t2787*t363;
  t2813 = t2810 + t2812;
  t2896 = -1.*t1893*t464*t355;
  t2897 = t1776*t425;
  t2900 = t2896 + t2897;
  t2911 = -1.*t421*t2900;
  t2914 = t2911 + t2773;
  t2923 = -1.*t2900*t470;
  t2926 = t2780 + t2923;
  t2942 = t1030*t2926;
  t2943 = -4.e-6*t2914*t363;
  t2944 = t2942 + t2943;
  t2930 = t929*t2914;
  t2936 = 4.e-6*t2926*t363;
  t2937 = t2930 + t2936;
  t2958 = 4.e-6*t809*t2914;
  t2961 = t2926*t363;
  t2963 = t2958 + t2961;
  t3034 = t421*t2900;
  t3042 = t2770*t470;
  t3047 = t3034 + t3042;
  t3070 = -4.e-6*t358*t2926;
  t3074 = -1.000000000016*t3047*t363;
  t3075 = t2013 + t3070 + t3074;
  t3094 = t358*t3047;
  t3095 = -1.*t1893*t412*t363;
  t3099 = -4.e-6*t2926*t363;
  t3101 = t3094 + t3095 + t3099;
  t3056 = 4.e-6*t358*t3047;
  t3060 = -4.e-6*t1893*t412*t363;
  t3062 = -1.6e-11*t2926*t363;
  t3063 = t3056 + t3060 + t3062;
  t3184 = 4.e-6*t1893*t412*t809;
  t3185 = t929*t2926;
  t3189 = 4.e-6*t3047*t363;
  t3190 = t3184 + t3185 + t3189;
  t3164 = t1893*t412*t358;
  t3167 = 4.e-6*t809*t2926;
  t3170 = t3047*t363;
  t3175 = t3164 + t3167 + t3170;
  t3194 = t1030*t3047;
  t3198 = t3194 + t3095 + t3099;
  t2562 = -4.e-6*t2489*t613;
  t2563 = -1.*t2481*t613;
  t3357 = Cos(var2[13]);
  t3362 = Sin(var2[13]);
  t3378 = 4.e-6*t3362;
  t3364 = -2.8e-11*t3362;
  t3421 = 7.e-6*t3362;
  t3444 = Cos(var2[12]);
  t3437 = Sin(var2[12]);
  t3481 = Cos(var2[14]);
  t3483 = -1.*t3481;
  t3486 = 1. + t3483;
  t3501 = Sin(var2[14]);
  t3410 = -7.e-6*t3357;
  t3442 = -1.*t412*t464*t3437;
  t3445 = -1.*t3444*t412*t425;
  t3446 = t3442 + t3445;
  t3417 = 4.e-6*t3357;
  t3466 = t3444*t412*t464;
  t3467 = -1.*t412*t3437*t425;
  t3468 = t3466 + t3467;
  t3499 = 4.e-6*t3486;
  t3377 = 7.e-6*t3357;
  t3538 = -4.e-6*t3362;
  t3610 = -2.8e-11*t3486;
  t3523 = 7.e-6*t3486;
  t3451 = -1.*t3357;
  t3624 = 2.8e-11*t3362;
  t3460 = -4.e-6*t3357;
  t3566 = -7.e-6*t3362;
  t3678 = -4.e-6*t3501;
  t3544 = t3410 + t3538;
  t3561 = t3544*t355;
  t3563 = -6.5e-11*t3362*t3446;
  t3570 = t3417 + t3566;
  t3575 = t3570*t3468;
  t3584 = t3561 + t3563 + t3575;
  t3645 = -1.*t3501;
  t3620 = -1.000000000049*t3362*t355;
  t3621 = t3377 + t3538;
  t3623 = t3621*t3446;
  t3625 = t3357 + t3624;
  t3627 = t3625*t3468;
  t3631 = t3620 + t3623 + t3627;
  t3689 = t3451 + t3624;
  t3692 = t3689*t355;
  t3704 = t3460 + t3566;
  t3709 = t3704*t3446;
  t3710 = -1.000000000016*t3362*t3468;
  t3712 = t3692 + t3709 + t3710;
  t3511 = -7.e-6*t3501;
  t3724 = -7.e-6*t3486;
  t3527 = 4.e-6*t3501;
  t3776 = -1. + t3481;
  t3777 = 4.e-6*t3776;
  t3604 = 7.e-6*t3501;
  t3731 = 2.8e-11*t3486;
  t3890 = 1. + t3451;
  t3909 = -7.e-6*t3890;
  t3863 = -2.8e-11*t3501;
  t3975 = -1. + t3357;
  t3976 = 4.e-6*t3975;
  t3891 = 2.8e-11*t3890;
  t3948 = 4.e-6*t3481;
  t3892 = -1.*t3362;
  t3898 = t3891 + t3892;
  t3902 = t3898*t355;
  t3910 = t3909 + t3538;
  t3915 = t3910*t3446;
  t3924 = -1.000000000016*t3890;
  t3925 = 1. + t3924;
  t3926 = t3925*t3468;
  t3927 = t3902 + t3915 + t3926;
  t3980 = t3976 + t3566;
  t3984 = t3980*t355;
  t3985 = -6.5e-11*t3890;
  t3987 = 1. + t3985;
  t3990 = t3987*t3446;
  t3994 = t3909 + t3378;
  t3995 = t3994*t3468;
  t3996 = t3984 + t3990 + t3995;
  t3931 = -7.e-6*t3481;
  t4031 = -1.000000000049*t3890;
  t4032 = 1. + t4031;
  t4034 = t4032*t355;
  t4038 = t3976 + t3421;
  t4041 = t4038*t3446;
  t4044 = t3891 + t3362;
  t4045 = t4044*t3468;
  t4053 = t4034 + t4041 + t4045;
  t3875 = -4.e-6*t3481;
  t4118 = 2.8e-11*t3501;
  t4014 = 7.e-6*t3481;
  t4183 = -1.*t3444;
  t4184 = 1. + t4183;
  t4187 = 0.15121*t3437;
  t4217 = 7.e-6*t3890;
  t3479 = -2.598649999999999e-7*var2[14];
  t3491 = -2.3905277499999995e-16*t3486;
  t3513 = t3499 + t3511;
  t3520 = -0.038922999986*t3513;
  t3531 = t3523 + t3527;
  t3533 = -0.503149000008*t3531;
  t3537 = t3479 + t3491 + t3520 + t3533;
  t4265 = -1.*t3444*t412*t464;
  t4277 = t412*t3437*t425;
  t4290 = t4265 + t4277;
  t3637 = 1.8190549999999993e-12*var2[14];
  t3639 = -0.5031490000160505*t3486;
  t3652 = t3610 + t3645;
  t3663 = -0.038922999986*t3652;
  t3680 = t3523 + t3678;
  t3685 = -3.6777349999999994e-6*t3680;
  t3686 = t3637 + t3639 + t3663 + t3685;
  t3590 = 1.0394599999999997e-12*var2[14];
  t3598 = -0.03892299998790722*t3486;
  t3606 = t3499 + t3604;
  t3607 = -3.6777349999999994e-6*t3606;
  t3613 = t3610 + t3501;
  t3617 = -0.503149000008*t3613;
  t3619 = t3590 + t3598 + t3607 + t3617;
  t3828 = t3777 + t3604;
  t4302 = t3994*t3446;
  t4306 = t3987*t4290;
  t4313 = t4302 + t4306;
  t3852 = t3731 + t3501;
  t4319 = t3925*t3446;
  t4322 = t3910*t4290;
  t4329 = t4319 + t4322;
  t3837 = -1.000000000049*t3486;
  t3841 = 1. + t3837;
  t4332 = t4044*t3446;
  t4338 = t4038*t4290;
  t4339 = t4332 + t4338;
  t3728 = t3724 + t3678;
  t3753 = -1.000000000016*t3486;
  t3754 = 1. + t3753;
  t3735 = t3731 + t3645;
  t3766 = -6.5e-11*t3486;
  t3768 = 1. + t3766;
  t3797 = t3724 + t3527;
  t3784 = t3777 + t3511;
  t4394 = 0.15121*t3444;
  t4207 = 1.0248489999999998e-12*var2[13];
  t4209 = -0.28120900000849935*t3890;
  t4210 = -2.8e-11*t3890;
  t4215 = t4210 + t3892;
  t4216 = -0.038748999993*t4215;
  t4221 = t4217 + t3538;
  t4223 = -2.123459e-6*t4221;
  t4224 = t4207 + t4209 + t4216 + t4223;
  t4228 = t4224*t3446;
  t4230 = -1.4640699999999997e-7*var2[13];
  t4233 = -1.38024835e-16*t3890;
  t4236 = 4.e-6*t3890;
  t4238 = t4236 + t3566;
  t4239 = -0.038748999993*t4238;
  t4241 = t4217 + t3378;
  t4253 = -0.281209000004*t4241;
  t4261 = t4230 + t4233 + t4239 + t4253;
  t4295 = t4261*t4290;
  t4315 = t3537*t4313;
  t4331 = t3686*t4329;
  t4344 = t3619*t4339;
  t4346 = t3828*t4313;
  t4347 = t3852*t4329;
  t4351 = t3841*t4339;
  t4354 = t4346 + t4347 + t4351;
  t4356 = -0.038924*t4354;
  t4358 = t3728*t4313;
  t4360 = t3754*t4329;
  t4361 = t3735*t4339;
  t4363 = t4358 + t4360 + t4361;
  t4365 = -0.80315*t4363;
  t4371 = t3768*t4313;
  t4373 = t3797*t4329;
  t4376 = t3784*t4339;
  t4378 = t4371 + t4373 + t4376;
  t4380 = 0.148705*t4378;
  t4194 = -0.15121*t4184;
  t4197 = t4194 + t4187;
  t4185 = 0.15121*t4184;
  t4190 = t4185 + t4187;
  t4453 = t464*t3437*t355;
  t4455 = t3444*t355*t425;
  t4462 = t4453 + t4455;
  t4467 = -1.*t3444*t464*t355;
  t4469 = t3437*t355*t425;
  t4472 = t4467 + t4469;
  t4476 = t412*t3898;
  t4477 = t3910*t4462;
  t4483 = t3925*t4472;
  t4486 = t4476 + t4477 + t4483;
  t4497 = t412*t3980;
  t4498 = t3987*t4462;
  t4499 = t3994*t4472;
  t4501 = t4497 + t4498 + t4499;
  t4504 = t4032*t412;
  t4508 = t4038*t4462;
  t4512 = t4044*t4472;
  t4516 = t4504 + t4508 + t4512;
  t4435 = 5.856279999999999e-13*var2[13];
  t4437 = -0.0387489999948987*t3890;
  t4439 = t4236 + t3421;
  t4441 = -2.123459e-6*t4439;
  t4444 = t4210 + t3362;
  t4445 = -0.281209000004*t4444;
  t4446 = t4435 + t4437 + t4441 + t4445;
  t4615 = -1.*t412*t464*t3437*t1776;
  t4616 = -1.*t3444*t412*t1776*t425;
  t4617 = t4615 + t4616;
  t4621 = t3444*t412*t464*t1776;
  t4622 = -1.*t412*t3437*t1776*t425;
  t4626 = t4621 + t4622;
  t4631 = t3898*t1776*t355;
  t4632 = t3910*t4617;
  t4638 = t3925*t4626;
  t4639 = t4631 + t4632 + t4638;
  t4641 = t3980*t1776*t355;
  t4644 = t3987*t4617;
  t4646 = t3994*t4626;
  t4649 = t4641 + t4644 + t4646;
  t4654 = t4032*t1776*t355;
  t4656 = t4038*t4617;
  t4658 = t4044*t4626;
  t4661 = t4654 + t4656 + t4658;
  t4729 = -1.*t3437*t1905;
  t4738 = t3444*t1898;
  t4741 = t4729 + t4738;
  t4747 = t3444*t1905;
  t4753 = t3437*t1898;
  t4754 = t4747 + t4753;
  t4758 = -1.*t1893*t412*t3898;
  t4763 = t3910*t4741;
  t4764 = t3925*t4754;
  t4771 = t4758 + t4763 + t4764;
  t4778 = -1.*t1893*t412*t3980;
  t4779 = t3987*t4741;
  t4780 = t3994*t4754;
  t4785 = t4778 + t4779 + t4780;
  t4787 = -1.*t4032*t1893*t412;
  t4790 = t4038*t4741;
  t4791 = t4044*t4754;
  t4795 = t4787 + t4790 + t4791;
  t4859 = t3437*t2082;
  t4861 = t3444*t2100;
  t4862 = t4859 + t4861;
  t4869 = t3444*t2082;
  t4870 = -1.*t3437*t2100;
  t4871 = t4869 + t4870;
  t4874 = t3994*t4862;
  t4877 = t3987*t4871;
  t4878 = t4874 + t4877;
  t4883 = t3925*t4862;
  t4884 = t3910*t4871;
  t4886 = t4883 + t4884;
  t4890 = t4044*t4862;
  t4895 = t4038*t4871;
  t4898 = t4890 + t4895;
  t4395 = -0.15121*t3437;
  t4398 = t4394 + t4395;
  t4413 = t4394 + t4187;
  t4968 = -1.*t3437*t2217;
  t4969 = t4968 + t4861;
  t4972 = -1.*t3444*t2217;
  t4975 = t4972 + t4870;
  t4978 = t3994*t4969;
  t4980 = t3987*t4975;
  t4982 = t4978 + t4980;
  t4984 = t3925*t4969;
  t4986 = t3910*t4975;
  t4988 = t4984 + t4986;
  t4991 = t4044*t4969;
  t4994 = t4038*t4975;
  t4997 = t4991 + t4994;
  t3373 = t3357 + t3364;
  t3376 = -0.281209000004*t3373;
  t3387 = t3377 + t3378;
  t3392 = -2.123459e-6*t3387;
  t3398 = -0.0387489999948987*t3362;
  t3402 = 5.856279999999999e-13 + t3376 + t3392 + t3398;
  t3412 = t3410 + t3378;
  t3414 = -0.038748999993*t3412;
  t3428 = t3417 + t3421;
  t3431 = -0.281209000004*t3428;
  t3434 = -1.38024835e-16*t3362;
  t3435 = -1.4640699999999997e-7 + t3414 + t3431 + t3434;
  t3457 = t3451 + t3364;
  t3459 = -0.038748999993*t3457;
  t3461 = t3460 + t3421;
  t3462 = -2.123459e-6*t3461;
  t3463 = -0.28120900000849935*t3362;
  t3465 = 1.0248489999999998e-12 + t3459 + t3462 + t3463;
  t5049 = t3444*t2217;
  t5050 = t3437*t2100;
  t5052 = t5049 + t5050;
  t5055 = -1.*t412*t3544*t1776;
  t5057 = -6.5e-11*t3362*t4969;
  t5058 = t3570*t5052;
  t5059 = t5055 + t5057 + t5058;
  t5061 = 1.000000000049*t412*t3362*t1776;
  t5064 = t3621*t4969;
  t5066 = t3625*t5052;
  t5069 = t5061 + t5064 + t5066;
  t5072 = -1.*t412*t3689*t1776;
  t5073 = t3704*t4969;
  t5074 = -1.000000000016*t3362*t5052;
  t5078 = t5072 + t5073 + t5074;
  t3869 = t3483 + t3863;
  t3870 = -0.038922999986*t3869;
  t3878 = t3875 + t3604;
  t3880 = -3.6777349999999994e-6*t3878;
  t3882 = -0.5031490000160505*t3501;
  t3887 = 1.8190549999999993e-12 + t3870 + t3880 + t3882;
  t3936 = t3931 + t3527;
  t3937 = -0.038922999986*t3936;
  t3949 = t3948 + t3604;
  t3967 = -0.503149000008*t3949;
  t3971 = -2.3905277499999995e-16*t3501;
  t3973 = -2.598649999999999e-7 + t3937 + t3967 + t3971;
  t4001 = t3481 + t3863;
  t4008 = -0.503149000008*t4001;
  t4017 = t4014 + t3527;
  t4026 = -3.6777349999999994e-6*t4017;
  t4027 = -0.03892299998790722*t3501;
  t4028 = 1.0394599999999997e-12 + t4008 + t4026 + t4027;
  t4060 = t3948 + t3511;
  t5130 = -1.*t412*t3898*t1776;
  t5132 = t3910*t4969;
  t5134 = t3925*t5052;
  t5137 = t5130 + t5132 + t5134;
  t5143 = -1.*t412*t3980*t1776;
  t5148 = t3987*t4969;
  t5149 = t3994*t5052;
  t5153 = t5143 + t5148 + t5149;
  t4079 = t3931 + t3678;
  t5158 = -1.*t4032*t412*t1776;
  t5162 = t4038*t4969;
  t5165 = t4044*t5052;
  t5169 = t5158 + t5162 + t5165;
  t4105 = t3875 + t3511;
  t4122 = t3483 + t4118;
  t4140 = t3481 + t4118;
  t4144 = t4014 + t3678;
  t5271 = t1893*t412*t464*t3437;
  t5272 = t3444*t1893*t412*t425;
  t5274 = t5271 + t5272;
  t5282 = -1.*t3444*t1893*t412*t464;
  t5287 = t1893*t412*t3437*t425;
  t5289 = t5282 + t5287;
  t5296 = -1.*t1893*t3898*t355;
  t5297 = t3910*t5274;
  t5298 = t3925*t5289;
  t5299 = t5296 + t5297 + t5298;
  t5306 = -1.*t1893*t3980*t355;
  t5307 = t3987*t5274;
  t5308 = t3994*t5289;
  t5310 = t5306 + t5307 + t5308;
  t5314 = -1.*t4032*t1893*t355;
  t5315 = t4038*t5274;
  t5316 = t4044*t5289;
  t5317 = t5314 + t5315 + t5316;
  t5352 = t3437*t1905;
  t5353 = t3444*t2770;
  t5354 = t5352 + t5353;
  t5357 = -1.*t3437*t2770;
  t5360 = t4747 + t5357;
  t5370 = t3994*t5354;
  t5372 = t3987*t5360;
  t5374 = t5370 + t5372;
  t5382 = t3925*t5354;
  t5384 = t3910*t5360;
  t5390 = t5382 + t5384;
  t5393 = t4044*t5354;
  t5395 = t4038*t5360;
  t5397 = t5393 + t5395;
  t5430 = -1.*t3437*t2900;
  t5432 = t5430 + t5353;
  t5435 = -1.*t3444*t2900;
  t5436 = t5435 + t5357;
  t5439 = t3994*t5432;
  t5440 = t3987*t5436;
  t5441 = t5439 + t5440;
  t5447 = t3925*t5432;
  t5448 = t3910*t5436;
  t5449 = t5447 + t5448;
  t5451 = t4044*t5432;
  t5453 = t4038*t5436;
  t5454 = t5451 + t5453;
  t5509 = t3444*t2900;
  t5512 = t3437*t2770;
  t5514 = t5509 + t5512;
  t5521 = t1893*t412*t3544;
  t5525 = -6.5e-11*t3362*t5432;
  t5527 = t3570*t5514;
  t5533 = t5521 + t5525 + t5527;
  t5543 = -1.000000000049*t1893*t412*t3362;
  t5546 = t3621*t5432;
  t5548 = t3625*t5514;
  t5550 = t5543 + t5546 + t5548;
  t5553 = t1893*t412*t3689;
  t5555 = t3704*t5432;
  t5558 = -1.000000000016*t3362*t5514;
  t5559 = t5553 + t5555 + t5558;
  t5593 = t1893*t412*t3898;
  t5594 = t3910*t5432;
  t5597 = t3925*t5514;
  t5604 = t5593 + t5594 + t5597;
  t5608 = t1893*t412*t3980;
  t5613 = t3987*t5432;
  t5615 = t3994*t5514;
  t5617 = t5608 + t5613 + t5615;
  t5620 = t4032*t1893*t412;
  t5621 = t4038*t5432;
  t5623 = t4044*t5514;
  t5624 = t5620 + t5621 + t5623;
  t5860 = Power(t412,2);
  t5861 = Power(t464,2);
  t5862 = t5860*t5861;
  t5865 = Power(t2217,2);
  t5870 = t5862 + t5865;
  t5872 = 1/t5870;
  t5920 = Cos(var2[9]);
  t5921 = -1.*t5920;
  t5925 = 1. + t5921;
  t5928 = Sin(var2[9]);
  t5929 = -0.15121*t5928;
  t5935 = Cos(var2[15]);
  t5936 = -1.*t5935;
  t5937 = 1. + t5936;
  t5940 = -0.15121*t5937;
  t5944 = Sin(var2[15]);
  t6018 = -0.15121*t5920;
  t5955 = -0.15121*t5925;
  t5959 = t5955 + t5929;
  t5963 = 0.15121*t5944;
  t5966 = t5940 + t5963;
  t5926 = 0.15121*t5925;
  t5930 = t5926 + t5929;
  t5949 = -0.15121*t5944;
  t5950 = t5940 + t5949;
  t6033 = t5920*t2770;
  t6039 = -1.*t5928*t2770;
  t6073 = t5935*t2770;
  t6093 = -1.*t5944*t2770;
  p_output1[0]=var3[0] + (t1209*t1549 + t1226*t1580 + t1608*t412 + t1134*t355*t425 - 1.*t1142*t355*t464 + t1615*t616 + t1623*t638 + t1630*t673 + 0.80321*(-4.e-6*t1615*t613 - 1.*t1630*t613 + t1623*t699) - 0.03875*(t1630*t605 + t1623*t613 + 4.e-6*t1615*t733) + 0.14871*(4.e-6*t1623*t613 + 4.e-6*t1630*t733 + t1615*t755))*var3[4] + (t1219 + t1227 + t1249 + t1264 + t1292 + t1325 + t1395 + t1436 - 1.*t1142*t412*t425 - 1.*t1134*t412*t464)*var3[5] + (t1219 + t1227 + t1249 + t1264 + t1292 + t1325 + t1395 + t1436 - 1.*t1466*t412*t425 + t1497*t412*t464)*var3[6] + (t355*t388 + t478*t490 + t521*t538 + t585*t616 + t627*t638 + t659*t673 + 0.80321*(-4.e-6*t585*t613 - 1.*t613*t659 + t627*t699) - 0.03875*(t613*t627 + t605*t659 + 4.e-6*t585*t733) + 0.14871*(4.e-6*t613*t627 + 4.e-6*t659*t733 + t585*t755))*var3[7] + (t1037*t1052 + t857*t866 + 0.80321*(-1.000000000016*t1037*t613 - 1.*t605*t857 - 4.e-6*t605*t971) - 0.03875*(t1037*t605 - 1.*t613*t857 - 4.e-6*t613*t971) + 0.14871*(4.e-6*t1037*t605 - 4.e-6*t613*t857 - 1.6e-11*t613*t971) + t971*t991)*var3[8] + 5.*t200*t327*var4[0] + 20.*t148*t303*t304*var4[10] - 5.*t200*t327*var4[10] + 30.*t252*t253*t264*var4[20] - 20.*t148*t303*t304*var4[20] + 20.*t177*t182*t228*var4[30] - 30.*t252*t253*t264*var4[30] + 5.*t101*t160*var4[40] - 20.*t177*t182*t228*var4[40] - 5.*t101*t160*var4[50];
  p_output1[1]=var3[1] + (t1134*t1898 + t1142*t1905 + t1209*t1913 + t1226*t1935 - 1.*t1608*t1893*t412 + t1970*t616 + t2005*t638 + t2025*t673 + 0.80321*(-4.e-6*t1970*t613 - 1.*t2025*t613 + t2005*t699) - 0.03875*(t2025*t605 + t2005*t613 + 4.e-6*t1970*t733) + 0.14871*(4.e-6*t2005*t613 + 4.e-6*t2025*t733 + t1970*t755))*var3[3] + (t1209*t1807 + t1226*t1817 + t1608*t1776*t355 - 1.*t1134*t1776*t412*t425 + t1142*t1776*t412*t464 + t1836*t616 + t1852*t638 + t1862*t673 + 0.80321*(-4.e-6*t1836*t613 - 1.*t1862*t613 + t1852*t699) - 0.03875*(t1862*t605 + t1852*t613 + 4.e-6*t1836*t733) + 0.14871*(4.e-6*t1852*t613 + 4.e-6*t1862*t733 + t1836*t755))*var3[4] + (t1134*t2082 + t1142*t2100 + t1209*t2108 + t1226*t2119 + t2133*t616 + t2147*t638 + t2158*t673 + 0.80321*(-4.e-6*t2133*t613 - 1.*t2158*t613 + t2147*t699) - 0.03875*(t2158*t605 + t2147*t613 + 4.e-6*t2133*t733) + 0.14871*(4.e-6*t2147*t613 + 4.e-6*t2158*t733 + t2133*t755))*var3[5] + (t1466*t2100 + t1497*t2217 + t1209*t2226 + t1226*t2241 + t2255*t616 + t2266*t638 + t2276*t673 + 0.80321*(-4.e-6*t2255*t613 - 1.*t2276*t613 + t2266*t699) - 0.03875*(t2276*t605 + t2266*t613 + 4.e-6*t2255*t733) + 0.14871*(4.e-6*t2266*t613 + 4.e-6*t2276*t733 + t2255*t755))*var3[6] + (-1.*t1776*t388*t412 + t2241*t490 + t2342*t538 + t2354*t616 + t2373*t638 + t2387*t673 + 0.80321*(-4.e-6*t2354*t613 - 1.*t2387*t613 + t2373*t699) - 0.03875*(t2387*t605 + t2373*t613 + 4.e-6*t2354*t733) + 0.14871*(4.e-6*t2373*t613 + 4.e-6*t2387*t733 + t2354*t755))*var3[7] + (t1052*t2504 - 0.03875*(t2562 + t2563 + t2504*t605) + 0.14871*(4.e-6*t2504*t605 - 4.e-6*t2481*t613 - 1.6e-11*t2489*t613) + 0.80321*(-1.*t2481*t605 - 4.e-6*t2489*t605 - 1.000000000016*t2504*t613) + t2481*t866 + t2489*t991)*var3[8] + 5.*t200*t327*var4[1] + 20.*t148*t303*t304*var4[11] - 5.*t200*t327*var4[11] + 30.*t252*t253*t264*var4[21] - 20.*t148*t303*t304*var4[21] + 20.*t177*t182*t228*var4[31] - 30.*t252*t253*t264*var4[31] + 5.*t101*t160*var4[41] - 20.*t177*t182*t228*var4[41] - 5.*t101*t160*var4[51];
  p_output1[2]=var3[2] + (t1134*t2100 + t1142*t2217 + t1209*t2241 + t1226*t2342 - 1.*t1608*t1776*t412 + t2489*t616 + t2504*t638 + t2481*t673 + 0.80321*(t2562 + t2563 + t2504*t699) - 0.03875*(t2481*t605 + t2504*t613 + 4.e-6*t2489*t733) + 0.14871*(4.e-6*t2504*t613 + 4.e-6*t2481*t733 + t2489*t755))*var3[3] + (t1209*t2649 + t1226*t2657 - 1.*t1608*t1893*t355 + t1134*t1893*t412*t425 - 1.*t1142*t1893*t412*t464 + t2681*t616 + t2689*t638 + t2703*t673 + 0.80321*(-4.e-6*t2681*t613 - 1.*t2703*t613 + t2689*t699) - 0.03875*(t2703*t605 + t2689*t613 + 4.e-6*t2681*t733) + 0.14871*(4.e-6*t2689*t613 + 4.e-6*t2703*t733 + t2681*t755))*var3[4] + (t1134*t1905 + t1142*t2770 + t1209*t2775 + t1226*t2787 + t2796*t616 + t2805*t638 + t2813*t673 + 0.80321*(-4.e-6*t2796*t613 - 1.*t2813*t613 + t2805*t699) - 0.03875*(t2813*t605 + t2805*t613 + 4.e-6*t2796*t733) + 0.14871*(4.e-6*t2805*t613 + 4.e-6*t2813*t733 + t2796*t755))*var3[5] + (t1466*t2770 + t1497*t2900 + t1209*t2914 + t1226*t2926 + t2937*t616 + t2944*t638 + t2963*t673 + 0.80321*(-4.e-6*t2937*t613 - 1.*t2963*t613 + t2944*t699) - 0.03875*(t2963*t605 + t2944*t613 + 4.e-6*t2937*t733) + 0.14871*(4.e-6*t2944*t613 + 4.e-6*t2963*t733 + t2937*t755))*var3[6] + (t1893*t388*t412 + t2926*t490 + t3047*t538 + t3063*t616 + t3075*t638 + t3101*t673 + 0.80321*(-4.e-6*t3063*t613 - 1.*t3101*t613 + t3075*t699) - 0.03875*(t3101*t605 + t3075*t613 + 4.e-6*t3063*t733) + 0.14871*(4.e-6*t3075*t613 + 4.e-6*t3101*t733 + t3063*t755))*var3[7] + (t1052*t3198 - 0.03875*(t3198*t605 - 1.*t3175*t613 - 4.e-6*t3190*t613) + 0.14871*(4.e-6*t3198*t605 - 4.e-6*t3175*t613 - 1.6e-11*t3190*t613) + 0.80321*(-1.*t3175*t605 - 4.e-6*t3190*t605 - 1.000000000016*t3198*t613) + t3175*t866 + t3190*t991)*var3[8] + 5.*t200*t327*var4[2] + 20.*t148*t303*t304*var4[12] - 5.*t200*t327*var4[12] + 30.*t252*t253*t264*var4[22] - 20.*t148*t303*t304*var4[22] + 20.*t177*t182*t228*var4[32] - 30.*t252*t253*t264*var4[32] + 5.*t101*t160*var4[42] - 20.*t177*t182*t228*var4[42] - 5.*t101*t160*var4[52];
  p_output1[3]=var3[0] + (t355*t4190*t425 + t412*t4446 + t4261*t4462 + t4224*t4472 + t3686*t4486 + t3537*t4501 + t3619*t4516 - 0.80315*(t3754*t4486 + t3728*t4501 + t3735*t4516) + 0.148705*(t3797*t4486 + t3768*t4501 + t3784*t4516) - 0.038924*(t3852*t4486 + t3828*t4501 + t3841*t4516) - 1.*t355*t4197*t464)*var3[4] + (t4228 - 1.*t412*t4197*t425 + t4295 + t4315 + t4331 + t4344 + t4356 + t4365 + t4380 - 1.*t412*t4190*t464)*var3[5] + (t4228 + t4295 + t4315 + t4331 + t4344 + t4356 + t4365 + t4380 - 1.*t412*t425*t4413 + t412*t4398*t464)*var3[12] + (t3435*t3446 + t3465*t3468 + t3402*t355 + t3537*t3584 + t3619*t3631 + t3686*t3712 - 0.80315*(t3584*t3728 + t3631*t3735 + t3712*t3754) + 0.148705*(t3584*t3768 + t3631*t3784 + t3712*t3797) - 0.038924*(t3584*t3828 + t3631*t3841 + t3712*t3852))*var3[13] + (t3887*t3927 + t3973*t3996 + t4028*t4053 + 0.148705*(-6.5e-11*t3501*t3996 + t3927*t4060 + t4053*t4079) - 0.80315*(-1.000000000016*t3501*t3927 + t3996*t4105 + t4053*t4122) - 0.038924*(-1.000000000049*t3501*t4053 + t3927*t4140 + t3996*t4144))*var3[14] + 5.*t200*t327*var4[3] + 20.*t148*t303*t304*var4[13] - 5.*t200*t327*var4[13] + 30.*t252*t253*t264*var4[23] - 20.*t148*t303*t304*var4[23] + 20.*t177*t182*t228*var4[33] - 30.*t252*t253*t264*var4[33] + 5.*t101*t160*var4[43] - 20.*t177*t182*t228*var4[43] - 5.*t101*t160*var4[53];
  p_output1[4]=var3[1] + (t1898*t4190 + t1905*t4197 - 1.*t1893*t412*t4446 + t4261*t4741 + t4224*t4754 + t3686*t4771 + t3537*t4785 + t3619*t4795 - 0.80315*(t3754*t4771 + t3728*t4785 + t3735*t4795) + 0.148705*(t3797*t4771 + t3768*t4785 + t3784*t4795) - 0.038924*(t3852*t4771 + t3828*t4785 + t3841*t4795))*var3[3] + (-1.*t1776*t412*t4190*t425 + t1776*t355*t4446 + t4261*t4617 + t4224*t4626 + t3686*t4639 + t1776*t412*t4197*t464 + t3537*t4649 + t3619*t4661 - 0.80315*(t3754*t4639 + t3728*t4649 + t3735*t4661) + 0.148705*(t3797*t4639 + t3768*t4649 + t3784*t4661) - 0.038924*(t3852*t4639 + t3828*t4649 + t3841*t4661))*var3[4] + (t2082*t4190 + t2100*t4197 + t4224*t4862 + t4261*t4871 + t3537*t4878 + t3686*t4886 + t3619*t4898 - 0.80315*(t3728*t4878 + t3754*t4886 + t3735*t4898) + 0.148705*(t3768*t4878 + t3797*t4886 + t3784*t4898) - 0.038924*(t3828*t4878 + t3852*t4886 + t3841*t4898))*var3[5] + (t2217*t4398 + t2100*t4413 + t4224*t4969 + t4261*t4975 + t3537*t4982 + t3686*t4988 + t3619*t4997 - 0.80315*(t3728*t4982 + t3754*t4988 + t3735*t4997) + 0.148705*(t3768*t4982 + t3797*t4988 + t3784*t4997) - 0.038924*(t3828*t4982 + t3852*t4988 + t3841*t4997))*var3[12] + (-1.*t1776*t3402*t412 + t3435*t4969 + t3465*t5052 + t3537*t5059 + t3619*t5069 + t3686*t5078 - 0.80315*(t3728*t5059 + t3735*t5069 + t3754*t5078) + 0.148705*(t3768*t5059 + t3784*t5069 + t3797*t5078) - 0.038924*(t3828*t5059 + t3841*t5069 + t3852*t5078))*var3[13] + (t3887*t5137 + t3973*t5153 + t4028*t5169 - 0.038924*(t4140*t5137 + t4144*t5153 - 1.000000000049*t3501*t5169) + 0.148705*(t4060*t5137 - 6.5e-11*t3501*t5153 + t4079*t5169) - 0.80315*(-1.000000000016*t3501*t5137 + t4105*t5153 + t4122*t5169))*var3[14] + 5.*t200*t327*var4[4] + 20.*t148*t303*t304*var4[14] - 5.*t200*t327*var4[14] + 30.*t252*t253*t264*var4[24] - 20.*t148*t303*t304*var4[24] + 20.*t177*t182*t228*var4[34] - 30.*t252*t253*t264*var4[34] + 5.*t101*t160*var4[44] - 20.*t177*t182*t228*var4[44] - 5.*t101*t160*var4[54];
  p_output1[5]=var3[2] + (t2100*t4190 + t2217*t4197 - 1.*t1776*t412*t4446 + t4261*t4969 + t4224*t5052 + t3686*t5137 + t3537*t5153 + t3619*t5169 - 0.80315*(t3754*t5137 + t3728*t5153 + t3735*t5169) + 0.148705*(t3797*t5137 + t3768*t5153 + t3784*t5169) - 0.038924*(t3852*t5137 + t3828*t5153 + t3841*t5169))*var3[3] + (t1893*t412*t4190*t425 - 1.*t1893*t355*t4446 - 1.*t1893*t412*t4197*t464 + t4261*t5274 + t4224*t5289 + t3686*t5299 + t3537*t5310 + t3619*t5317 - 0.80315*(t3754*t5299 + t3728*t5310 + t3735*t5317) + 0.148705*(t3797*t5299 + t3768*t5310 + t3784*t5317) - 0.038924*(t3852*t5299 + t3828*t5310 + t3841*t5317))*var3[4] + (t1905*t4190 + t2770*t4197 + t4224*t5354 + t4261*t5360 + t3537*t5374 + t3686*t5390 + t3619*t5397 - 0.80315*(t3728*t5374 + t3754*t5390 + t3735*t5397) + 0.148705*(t3768*t5374 + t3797*t5390 + t3784*t5397) - 0.038924*(t3828*t5374 + t3852*t5390 + t3841*t5397))*var3[5] + (t2900*t4398 + t2770*t4413 + t4224*t5432 + t4261*t5436 + t3537*t5441 + t3686*t5449 + t3619*t5454 - 0.80315*(t3728*t5441 + t3754*t5449 + t3735*t5454) + 0.148705*(t3768*t5441 + t3797*t5449 + t3784*t5454) - 0.038924*(t3828*t5441 + t3852*t5449 + t3841*t5454))*var3[12] + (t1893*t3402*t412 + t3435*t5432 + t3465*t5514 + t3537*t5533 + t3619*t5550 + t3686*t5559 - 0.80315*(t3728*t5533 + t3735*t5550 + t3754*t5559) + 0.148705*(t3768*t5533 + t3784*t5550 + t3797*t5559) - 0.038924*(t3828*t5533 + t3841*t5550 + t3852*t5559))*var3[13] + (t3887*t5604 + t3973*t5617 + t4028*t5624 - 0.038924*(t4140*t5604 + t4144*t5617 - 1.000000000049*t3501*t5624) + 0.148705*(t4060*t5604 - 6.5e-11*t3501*t5617 + t4079*t5624) - 0.80315*(-1.000000000016*t3501*t5604 + t4105*t5617 + t4122*t5624))*var3[14] + 5.*t200*t327*var4[5] + 20.*t148*t303*t304*var4[15] - 5.*t200*t327*var4[15] + 30.*t252*t253*t264*var4[25] - 20.*t148*t303*t304*var4[25] + 20.*t177*t182*t228*var4[35] - 30.*t252*t253*t264*var4[35] + 5.*t101*t160*var4[45] - 20.*t177*t182*t228*var4[45] - 5.*t101*t160*var4[55];
  p_output1[6]=var3[1] + (-0.002264*t1898 + 0.00183*t1905 + 0.024028*t1893*t412)*var3[3] + (-0.024028*t1776*t355 + 0.002264*t1776*t412*t425 + 0.00183*t1776*t412*t464)*var3[4] + (-0.002264*t2082 + 0.00183*t2100)*var3[5] + 5.*t200*t327*var4[6] + 20.*t148*t303*t304*var4[16] - 5.*t200*t327*var4[16] + 30.*t252*t253*t264*var4[26] - 20.*t148*t303*t304*var4[26] + 20.*t177*t182*t228*var4[36] - 30.*t252*t253*t264*var4[36] + 5.*t101*t160*var4[46] - 20.*t177*t182*t228*var4[46] - 5.*t101*t160*var4[56];
  p_output1[7]=var3[2] + (-0.002264*t2100 + 0.00183*t2217 + 0.024028*t1776*t412)*var3[3] + (0.024028*t1893*t355 - 0.002264*t1893*t412*t425 - 0.00183*t1893*t412*t464)*var3[4] + (-0.002264*t1905 + 0.00183*t2770)*var3[5] + 5.*t200*t327*var4[7] + 20.*t148*t303*t304*var4[17] - 5.*t200*t327*var4[17] + 30.*t252*t253*t264*var4[27] - 20.*t148*t303*t304*var4[27] + 20.*t177*t182*t228*var4[37] - 30.*t252*t253*t264*var4[37] + 5.*t101*t160*var4[47] - 20.*t177*t182*t228*var4[47] - 5.*t101*t160*var4[57];
  p_output1[8]=t1905*t412*t464*t5872*var3[3] + (-1.*t2082*t355*t464*t5872 + t1776*t5860*t5861*t5872)*var3[4] + (-1.*t2082*t412*t425*t5872 + t2100*t412*t464*t5872)*var3[5] + 5.*t200*t327*var4[8] + 20.*t148*t303*t304*var4[18] - 5.*t200*t327*var4[18] + 30.*t252*t253*t264*var4[28] - 20.*t148*t303*t304*var4[28] + 20.*t177*t182*t228*var4[38] - 30.*t252*t253*t264*var4[38] + 5.*t101*t160*var4[48] - 20.*t177*t182*t228*var4[48] - 5.*t101*t160*var4[58];
  p_output1[9]=(0.15121*(t2217*t5920 + t2100*t5928) - 0.15121*(t2100*t5920 - 1.*t2217*t5928) + t2217*t5930 + 0.15121*(t2217*t5935 + t2100*t5944) + 0.15121*(t2100*t5935 - 1.*t2217*t5944) - 1.*t2217*t5950 + t2100*t5959 - 1.*t2100*t5966)*var3[3] + (0.15121*(-1.*t1893*t412*t464*t5920 + t1893*t412*t425*t5928) - 0.15121*(t1893*t412*t425*t5920 + t1893*t412*t464*t5928) - 1.*t1893*t412*t464*t5930 + 0.15121*(-1.*t1893*t412*t464*t5935 + t1893*t412*t425*t5944) + 0.15121*(t1893*t412*t425*t5935 + t1893*t412*t464*t5944) + t1893*t412*t464*t5950 + t1893*t412*t425*t5959 - 1.*t1893*t412*t425*t5966)*var3[4] + (t2770*t5930 - 1.*t2770*t5950 + t1905*t5959 - 1.*t1905*t5966 + 0.15121*(t1905*t5928 + t6033) - 0.15121*(t1905*t5920 + t6039) + 0.15121*(t1905*t5944 + t6073) + 0.15121*(t1905*t5935 + t6093))*var3[5] + (t2900*(0.15121*t5928 + t6018) + t2770*(t5929 + t6018) + 0.15121*(-1.*t2900*t5928 + t6033) - 0.15121*(-1.*t2900*t5920 + t6039))*var3[9] + (-1.*t2900*(-0.15121*t5935 + t5949) - 1.*t2770*(0.15121*t5935 + t5949) + 0.15121*(-1.*t2900*t5944 + t6073) + 0.15121*(-1.*t2900*t5935 + t6093))*var3[15] + 5.*t200*t327*var4[9] + 20.*t148*t303*t304*var4[19] - 5.*t200*t327*var4[19] + 30.*t252*t253*t264*var4[29] - 20.*t148*t303*t304*var4[29] + 20.*t177*t182*t228*var4[39] - 30.*t252*t253*t264*var4[39] + 5.*t101*t160*var4[49] - 20.*t177*t182*t228*var4[49] - 5.*t101*t160*var4[59];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4,*var5,*var6,*var7;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 7)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Seven input(s) required (var1,var2,var3,var4,var5,var6,var7).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 2 && ncols == 1) && 
      !(mrows == 1 && ncols == 2))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 60 && ncols == 1) && 
      !(mrows == 1 && ncols == 60))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }
  mrows = mxGetM(prhs[4]);
  ncols = mxGetN(prhs[4]);
  if( !mxIsDouble(prhs[4]) || mxIsComplex(prhs[4]) ||
    ( !(mrows == 2 && ncols == 1) && 
      !(mrows == 1 && ncols == 2))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var5 is wrong.");
    }
  mrows = mxGetM(prhs[5]);
  ncols = mxGetN(prhs[5]);
  if( !mxIsDouble(prhs[5]) || mxIsComplex(prhs[5]) ||
    ( !(mrows == 1 && ncols == 1) && 
      !(mrows == 1 && ncols == 1))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var6 is wrong.");
    }
  mrows = mxGetM(prhs[6]);
  ncols = mxGetN(prhs[6]);
  if( !mxIsDouble(prhs[6]) || mxIsComplex(prhs[6]) ||
    ( !(mrows == 1 && ncols == 1) && 
      !(mrows == 1 && ncols == 1))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var7 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
  var5 = mxGetPr(prhs[4]);
  var6 = mxGetPr(prhs[5]);
  var7 = mxGetPr(prhs[6]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 10, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4,var5,var6,var7);


}

#else // MATLAB_MEX_FILE

#include "d1y_position_ParallelStance1.hh"

namespace ParallelStance1
{

void d1y_position_ParallelStance1_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4,const double *var5,const double *var6,const double *var7)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4, var5, var6, var7);

}

}

#endif // MATLAB_MEX_FILE
