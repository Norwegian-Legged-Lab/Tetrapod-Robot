/*
 * Automatically Generated from Mathematica.
 * Sat 13 Nov 2021 17:51:56 GMT+01:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t297;
  double t274;
  double t385;
  double t206;
  double t332;
  double t371;
  double t374;
  double t708;
  double t289;
  double t294;
  double t431;
  double t155;
  double t630;
  double t631;
  double t652;
  double t730;
  double t742;
  double t619;
  double t833;
  double t873;
  double t875;
  double t906;
  double t913;
  double t951;
  double t953;
  double t966;
  double t175;
  double t200;
  double t203;
  double t218;
  double t802;
  double t811;
  double t828;
  double t1197;
  double t1199;
  double t1207;
  double t1229;
  double t1234;
  double t1239;
  double t1273;
  double t993;
  double t1007;
  double t1287;
  double t1291;
  double t1299;
  double t1303;
  double t1347;
  double t1356;
  double t1359;
  double t1362;
  double t1381;
  double t1480;
  double t766;
  double t930;
  double t968;
  double t983;
  double t1023;
  double t1025;
  double t1032;
  double t1066;
  double t1117;
  double t1162;
  double t1193;
  double t1195;
  double t1274;
  double t1306;
  double t1481;
  double t1487;
  double t1540;
  double t1547;
  double t1549;
  double t1559;
  double t1565;
  double t1591;
  double t463;
  double t467;
  double t470;
  double t479;
  double t1515;
  double t1595;
  double t1616;
  double t2125;
  double t2153;
  double t2161;
  double t2182;
  double t2260;
  double t2309;
  double t1691;
  double t1713;
  double t1773;
  double t1791;
  double t464;
  double t491;
  double t521;
  double t1861;
  double t1872;
  double t1944;
  double t1988;
  double t2000;
  double t2013;
  double t2024;
  double t2068;
  double t1806;
  double t1819;
  double t1830;
  double t1842;
  double t987;
  double t1111;
  double t1114;
  double t1619;
  double t1625;
  double t1644;
  double t1654;
  double t1793;
  double t2072;
  double t2077;
  double t2104;
  double t2173;
  double t2324;
  double t2331;
  double t2354;
  double t2360;
  double t2361;
  double t2363;
  double t2388;
  double t2392;
  double t2403;
  double t2404;
  double t2445;
  double t2497;
  double t2580;
  double t2584;
  double t2587;
  double t2610;
  double t2616;
  double t2639;
  double t2648;
  double t2666;
  double t2496;
  double t2503;
  double t2510;
  double t2516;
  double t2517;
  double t2531;
  double t2534;
  double t2537;
  double t2562;
  double t2577;
  double t2595;
  double t2638;
  double t2670;
  double t2683;
  double t2687;
  double t2713;
  double t2720;
  double t2733;
  double t2742;
  double t2770;
  double t2782;
  double t2808;
  double t2824;
  double t2852;
  double t2864;
  double t2903;
  double t2914;
  double t2957;
  double t2880;
  double t2986;
  double t2991;
  double t3000;
  double t3020;
  double t3021;
  double t3042;
  double t3074;
  double t3095;
  double t3117;
  double t104;
  double t146;
  double t3280;
  double t3179;
  double t3299;
  double t3304;
  double t3442;
  double t3448;
  double t3460;
  double t3462;
  double t3782;
  double t3784;
  double t3791;
  double t3795;
  double t3799;
  double t3820;
  double t3838;
  double t3851;
  double t3854;
  double t3888;
  double t3893;
  double t3919;
  double t3921;
  double t3931;
  double t3952;
  double t3954;
  double t3524;
  double t3526;
  double t3530;
  double t3545;
  double t3640;
  double t3658;
  double t3662;
  double t3671;
  double t3719;
  double t3738;
  double t3747;
  double t3759;
  double t4095;
  double t4103;
  double t4105;
  double t4061;
  double t4071;
  double t4072;
  double t4111;
  double t4127;
  double t4133;
  double t4176;
  double t4177;
  double t4183;
  double t4141;
  double t4147;
  double t4149;
  double t4151;
  double t4193;
  double t4212;
  double t4222;
  double t4223;
  double t4224;
  double t4237;
  double t4242;
  double t4247;
  double t4255;
  double t4270;
  double t4276;
  double t4322;
  double t4336;
  double t4340;
  double t4343;
  double t4348;
  double t4352;
  double t4354;
  double t4360;
  double t4365;
  double t4368;
  double t4375;
  double t4379;
  double t4380;
  double t4403;
  double t4493;
  double t4500;
  double t4507;
  double t4480;
  double t4490;
  double t4491;
  double t4509;
  double t4511;
  double t4522;
  double t4629;
  double t4638;
  double t4646;
  double t4547;
  double t4587;
  double t4591;
  double t4597;
  double t4651;
  double t4653;
  double t4654;
  double t4656;
  double t4665;
  double t4666;
  double t4669;
  double t4675;
  double t4676;
  double t4689;
  double t4692;
  double t4793;
  double t4803;
  double t4807;
  double t4835;
  double t4836;
  double t4838;
  double t4845;
  double t4848;
  double t4812;
  double t4839;
  double t4855;
  double t4862;
  double t4892;
  double t4926;
  double t4927;
  double t4928;
  double t4999;
  double t5001;
  double t5016;
  double t5022;
  double t5023;
  double t5033;
  double t5035;
  double t5039;
  double t5003;
  double t5025;
  double t5040;
  double t5041;
  double t5044;
  double t5068;
  double t5078;
  double t5083;
  double t5224;
  double t5225;
  double t5228;
  double t5233;
  double t4863;
  double t4929;
  double t4967;
  double t4976;
  double t4978;
  double t4979;
  double t5169;
  double t5195;
  double t5202;
  double t5206;
  double t5214;
  double t5383;
  double t5402;
  double t5431;
  double t5275;
  double t5542;
  double t5546;
  double t5562;
  double t5564;
  double t5569;
  double t5596;
  double t5623;
  double t5680;
  double t5686;
  double t5690;
  double t5375;
  double t5426;
  double t5435;
  double t5447;
  double t5470;
  double t5482;
  double t5489;
  double t5501;
  double t5824;
  double t5825;
  double t5828;
  double t5780;
  double t5802;
  double t5820;
  double t5759;
  double t5769;
  double t5772;
  double t5774;
  double t5823;
  double t5833;
  double t5838;
  double t5875;
  double t5877;
  double t5938;
  double t5948;
  double t5960;
  double t5961;
  double t5097;
  double t5140;
  double t5144;
  double t5043;
  double t5087;
  double t5088;
  double t5235;
  double t6061;
  double t6064;
  double t6068;
  double t6083;
  double t6095;
  double t6125;
  double t6159;
  double t6160;
  double t6173;
  double t6082;
  double t6191;
  double t6195;
  double t6200;
  double t6180;
  double t6184;
  double t6213;
  double t6214;
  double t6229;
  double t6242;
  double t6244;
  double t6248;
  double t6265;
  double t6272;
  double t6283;
  double t6420;
  double t6485;
  double t6559;
  double t6563;
  double t6571;
  double t6575;
  double t6809;
  double t6811;
  double t6816;
  double t6819;
  double t6820;
  double t6821;
  double t6823;
  double t6829;
  double t6830;
  double t6833;
  double t6692;
  double t6698;
  double t6706;
  double t6614;
  double t6372;
  double t6378;
  double t6401;
  double t7031;
  double t7041;
  double t7097;
  double t6892;
  double t6893;
  double t6900;
  double t6927;
  double t6933;
  double t6934;
  double t6853;
  double t6863;
  double t6871;
  double t6936;
  double t6937;
  double t6938;
  double t6997;
  double t7103;
  double t7148;
  double t7169;
  double t7223;
  double t7237;
  double t7438;
  double t7443;
  double t7445;
  double t7475;
  double t7513;
  double t7519;
  double t7572;
  double t7636;
  double t7588;
  double t7585;
  double t7590;
  double t7600;
  double t7603;
  double t7679;
  double t7682;
  double t7691;
  double t7692;
  double t7698;
  double t7873;
  double t7877;
  double t7880;
  double t7901;
  double t7903;
  double t7905;
  double t7957;
  double t7923;
  double t8115;
  double t8118;
  double t8122;
  double t8126;
  double t8143;
  double t8144;
  double t8166;
  double t8176;
  double t8225;
  double t8277;
  double t8279;
  double t8284;
  double t8300;
  double t8301;
  double t8311;
  double t8314;
  double t8317;
  double t8336;
  double t8377;
  double t8382;
  double t8526;
  double t8529;
  double t8540;
  double t8547;
  double t8552;
  double t8568;
  double t8309;
  double t8384;
  double t8412;
  double t8458;
  double t8459;
  double t8460;
  double t8477;
  double t8493;
  double t8497;
  double t8465;
  double t8467;
  double t8499;
  double t8615;
  double t8683;
  double t8693;
  double t8699;
  double t8703;
  double t8716;
  double t8736;
  double t8753;
  double t8756;
  double t8198;
  double t8209;
  double t8218;
  double t8135;
  double t8186;
  double t8189;
  double t8589;
  double t8601;
  double t8604;
  double t8541;
  double t8578;
  double t8579;
  double t8614;
  double t8914;
  double t8915;
  double t8920;
  double t8470;
  double t8899;
  double t8903;
  double t8912;
  double t9044;
  double t9049;
  double t9050;
  double t9058;
  double t9096;
  double t9109;
  double t8846;
  double t8855;
  double t8869;
  double t8823;
  double t8825;
  double t8826;
  double t8771;
  double t8792;
  double t8829;
  double t8883;
  double t8886;
  double t9227;
  double t9228;
  double t9229;
  double t9241;
  double t9246;
  double t9247;
  double t9186;
  double t9189;
  double t9195;
  double t8991;
  double t9006;
  double t9011;
  double t8982;
  double t9112;
  double t9295;
  double t9322;
  double t9324;
  double t9157;
  double t9220;
  double t9286;
  double t9288;
  double t9289;
  double t9354;
  double t9358;
  double t9362;
  double t9365;
  double t9409;
  double t9422;
  double t9631;
  double t9642;
  double t9678;
  double t9689;
  double t9697;
  double t9698;
  double t9701;
  double t9707;
  double t9717;
  double t9722;
  double t9724;
  double t9765;
  double t9771;
  double t9774;
  double t9788;
  double t9789;
  double t9797;
  double t9799;
  double t9812;
  double t9813;
  double t9817;
  double t9823;
  double t9825;
  double t9833;
  double t9837;
  double t9847;
  double t9863;
  double t9891;
  double t9897;
  double t9898;
  double t9902;
  double t9892;
  double t9904;
  double t9905;
  double t9906;
  double t9907;
  double t9908;
  double t9909;
  double t9910;
  double t9911;
  double t9912;
  double t3176;
  double t241;
  double t3229;
  double t3291;
  double t9943;
  double t9953;
  double t9959;
  double t9970;
  double t9978;
  double t9982;
  double t3446;
  double t10014;
  double t10016;
  double t10029;
  double t10045;
  double t10046;
  double t10047;
  double t10058;
  double t10059;
  double t10061;
  double t10062;
  double t10063;
  double t10064;
  double t10065;
  double t10066;
  double t10067;
  double t3488;
  double t3493;
  double t9994;
  double t9997;
  double t9999;
  double t10002;
  double t10003;
  double t10004;
  double t3577;
  double t3582;
  double t3608;
  double t3678;
  double t3693;
  double t3715;
  double t10235;
  double t10240;
  double t10241;
  double t10242;
  double t10247;
  double t10263;
  double t10265;
  double t10280;
  double t10282;
  double t10078;
  double t10101;
  double t10103;
  double t10105;
  double t10124;
  double t10126;
  double t10130;
  double t10131;
  double t10148;
  double t10154;
  double t10167;
  double t10180;
  double t10486;
  double t10541;
  double t10628;
  double t10630;
  double t10641;
  double t10646;
  double t10648;
  double t10649;
  double t10655;
  double t10668;
  double t10673;
  double t10674;
  double t6306;
  double t6309;
  double t6313;
  double t10469;
  double t10726;
  double t5778;
  double t5846;
  double t5854;
  double t10735;
  double t10742;
  double t10841;
  double t10846;
  double t10879;
  double t10970;
  double t11240;
  double t11246;
  double t11253;
  double t11255;
  double t7993;
  double t8003;
  double t8021;
  double t7929;
  double t7931;
  double t7932;
  double t7892;
  double t11473;
  double t11493;
  double t9477;
  double t9498;
  double t9499;
  double t11485;
  double t11474;
  double t8811;
  double t8889;
  double t8890;
  double t11670;
  double t11673;
  double t9346;
  double t9347;
  double t9351;
  double t11680;
  double t11694;
  double t11773;
  double t11778;
  double t11779;
  double t11785;
  double t11831;
  double t11847;
  double t11858;
  double t11890;
  double t11906;
  double t11907;
  double t11908;
  double t11923;
  double t11927;
  double t11939;
  double t11940;
  double t11944;
  double t11956;
  double t11961;
  double t11965;
  double t11968;
  double t11993;
  double t11995;
  double t12000;
  double t12015;
  double t12049;
  double t12051;
  double t12052;
  double t12053;
  double t12038;
  double t12045;
  double t12046;
  double t12047;
  double t12029;
  double t12035;
  double t12048;
  double t12054;
  double t12055;
  double t12056;
  double t12058;
  double t12059;
  double t12060;
  double t12069;
  double t12098;
  double t12099;
  double t12107;
  double t12117;
  double t12124;
  double t12163;
  double t12179;
  double t12197;
  double t12202;
  double t12203;
  double t12207;
  double t12219;
  double t12222;
  double t12224;
  double t12227;
  double t12229;
  double t12230;
  double t12236;
  double t12241;
  double t12243;
  double t12143;
  double t12145;
  double t12147;
  double t12152;
  double t12153;
  double t12158;
  double t12319;
  double t12320;
  double t12322;
  double t12324;
  double t12328;
  double t12332;
  double t12334;
  double t12335;
  double t12336;
  double t12257;
  double t12259;
  double t12260;
  double t12262;
  double t12265;
  double t12268;
  double t12269;
  double t12273;
  double t12291;
  double t12292;
  double t12298;
  double t12302;
  double t12422;
  double t12426;
  double t12433;
  double t12436;
  double t12523;
  double t12528;
  double t12555;
  double t12556;
  double t12669;
  double t12708;
  double t12903;
  double t12906;
  double t12907;
  double t12908;
  double t12909;
  double t12911;
  double t12912;
  double t12836;
  double t12838;
  double t12893;
  double t12894;
  double t12895;
  double t12897;
  double t12899;
  double t12710;
  double t12667;
  double t12923;
  double t12925;
  double t12942;
  double t13012;
  double t13294;
  double t13317;
  double t13316;
  double t13296;
  double t13383;
  double t13455;
  double t13565;
  double t13599;
  t297 = Cos(var1[11]);
  t274 = Cos(var1[10]);
  t385 = -1. + t297;
  t206 = Sin(var1[9]);
  t332 = -1.*t297;
  t371 = 1. + t332;
  t374 = 1.6e-11*t371;
  t708 = Sin(var1[11]);
  t289 = -1.*t274;
  t294 = 1. + t289;
  t431 = 1.6e-11*t385;
  t155 = Cos(var1[9]);
  t630 = -1.000000000016*t371;
  t631 = 1. + t630;
  t652 = 0.004352*t631;
  t730 = -0.9999910000159999*t708;
  t742 = t652 + t730;
  t619 = Sin(var1[10]);
  t833 = -1. + t374;
  t873 = 4.e-6*t833;
  t875 = 3.999964e-6*t371;
  t906 = -1.7408e-8*t708;
  t913 = t873 + t875 + t906;
  t951 = 0.999991*t297;
  t953 = 0.004352*t708;
  t966 = t431 + t951 + t953;
  t175 = -1.*t155;
  t200 = 1. + t175;
  t203 = 0.15121*t200;
  t218 = -0.15121*t206;
  t802 = -1. + t274;
  t811 = 1.6e-11*t802;
  t828 = 1. + t811;
  t1197 = -1.26e-8*var1[11];
  t1199 = 1. + t431;
  t1207 = -0.14871*t1199;
  t1229 = -1.64779999997447e-7*t371;
  t1234 = -1.59556e-7*t385;
  t1239 = -1.199987999968e-6*t708;
  t1273 = t1197 + t1207 + t1229 + t1234 + t1239;
  t993 = -1.000000000016*t294;
  t1007 = 1. + t993;
  t1287 = 0.803147*t631;
  t1291 = 0.50315000001605*t371;
  t1299 = 0.00130540515936178*t708;
  t1303 = t1287 + t1291 + t1299;
  t1347 = -5.04e-14*var1[11];
  t1356 = -0.03988959484*t371;
  t1359 = 6.38224e-13*t385;
  t1362 = -0.041195*t297;
  t1381 = 0.299996999992*t708;
  t1480 = t1347 + t1356 + t1359 + t1362 + t1381;
  t766 = -4.e-6*t619*t742;
  t930 = t828*t913;
  t968 = 4.e-6*t294*t966;
  t983 = 0. + t766 + t930 + t968;
  t1023 = t1007*t742;
  t1025 = 4.e-6*t619*t913;
  t1032 = -1.*t619*t966;
  t1066 = 0. + t1023 + t1025 + t1032;
  t1117 = -1.2484e-7*var1[10];
  t1162 = 2.479936e-18*t294;
  t1193 = -1.54996e-7*t802;
  t1195 = 1.124840000016e-6*t619;
  t1274 = t828*t1273;
  t1306 = -4.e-6*t619*t1303;
  t1481 = 4.e-6*t294*t1480;
  t1487 = t1117 + t1162 + t1193 + t1195 + t1274 + t1306 + t1481;
  t1540 = 0.281210000008499*t294;
  t1547 = -0.03874900000062*t619;
  t1549 = 4.e-6*t619*t1273;
  t1559 = t1007*t1303;
  t1565 = -1.*t619*t1480;
  t1591 = t1540 + t1547 + t1549 + t1559 + t1565;
  t463 = -1. + t374 + t431;
  t467 = 4.e-6*t385;
  t470 = -4.e-6*t297;
  t479 = t467 + t470;
  t1515 = -1.*t206*t1487;
  t1595 = t155*t1591;
  t1616 = t203 + t218 + t1515 + t1595;
  t2125 = t828*t463;
  t2153 = 4.e-6*t294*t479;
  t2161 = t2125 + t2153;
  t2182 = 4.e-6*t463*t619;
  t2260 = -1.*t479*t619;
  t2309 = t2182 + t2260;
  t1691 = -0.15121*t200;
  t1713 = t155*t1487;
  t1773 = t206*t1591;
  t1791 = t1691 + t218 + t1713 + t1773;
  t464 = 4.e-6*t294*t463;
  t491 = t274*t479;
  t521 = t464 + t491;
  t1861 = -4.9936e-13*var1[10];
  t1872 = -0.038749*t294;
  t1944 = 6.19984e-13*t802;
  t1988 = -0.281210000004*t619;
  t2000 = 4.e-6*t294*t1273;
  t2013 = t619*t1303;
  t2024 = t274*t1480;
  t2068 = 0. + t1861 + t1872 + t1944 + t1988 + t2000 + t2013 + t2024;
  t1806 = t619*t742;
  t1819 = 4.e-6*t294*t913;
  t1830 = t274*t966;
  t1842 = 0. + t1806 + t1819 + t1830;
  t987 = -1.*t206*t983;
  t1111 = t155*t1066;
  t1114 = 0. + t987 + t1111;
  t1619 = -1.*t1114*t1616;
  t1625 = t155*t983;
  t1644 = t206*t1066;
  t1654 = 0. + t1625 + t1644;
  t1793 = -1.*t1654*t1791;
  t2072 = -1.*t1842*t2068;
  t2077 = t1619 + t1793 + t2072;
  t2104 = t521*t2077;
  t2173 = -1.*t2161*t206;
  t2324 = t155*t2309;
  t2331 = t2173 + t2324;
  t2354 = t2331*t1616;
  t2360 = t155*t2161;
  t2361 = t206*t2309;
  t2363 = t2360 + t2361;
  t2388 = t2363*t1791;
  t2392 = t521*t2068;
  t2403 = t2354 + t2388 + t2392;
  t2404 = t2403*t1842;
  t2445 = t2104 + t2404;
  t2497 = t1861 + t1872 + t1944 + t1988 + t2000 + t2013 + t2024;
  t2580 = -1.7408e-8*t371;
  t2584 = -3.999964e-6*t708;
  t2587 = t2580 + t2584;
  t2610 = 0.999991*t631;
  t2616 = t2610 + t953;
  t2639 = -0.004352*t297;
  t2648 = 0.999991*t708;
  t2666 = t2639 + t2648;
  t2496 = -1.*t983*t1487;
  t2503 = -1.*t1842*t2497;
  t2510 = -1.*t1066*t1591;
  t2516 = t2496 + t2503 + t2510;
  t2517 = t521*t2516;
  t2531 = t2161*t1487;
  t2534 = t521*t2497;
  t2537 = t2309*t1591;
  t2562 = t2531 + t2534 + t2537;
  t2577 = t2562*t1842;
  t2595 = t828*t2587;
  t2638 = -4.e-6*t619*t2616;
  t2670 = 4.e-6*t294*t2666;
  t2683 = 0. + t2595 + t2638 + t2670;
  t2687 = -0.15121*t2683;
  t2713 = 4.e-6*t619*t2587;
  t2720 = t1007*t2616;
  t2733 = -1.*t619*t2666;
  t2742 = 0. + t2713 + t2720 + t2733;
  t2770 = -0.15121*t2742;
  t2782 = t2517 + t2577 + t2687 + t2770;
  t2808 = -1.*t1273*t913;
  t2824 = -1.*t742*t1303;
  t2852 = -1.*t966*t1480;
  t2864 = t2808 + t2824 + t2852;
  t2903 = t463*t1273;
  t2914 = t479*t1480;
  t2957 = t2903 + t2914;
  t2880 = -1.*t479*t2864;
  t2986 = -1.*t2957*t966;
  t2991 = t2880 + t2986;
  t3000 = 4.e-6*t2991;
  t3020 = -1.*t463*t2864;
  t3021 = 1.e-6*t2587;
  t3042 = -1.*t2957*t913;
  t3074 = -0.038749*t2616;
  t3095 = -0.28121*t2666;
  t3117 = t3000 + t3020 + t3021 + t3042 + t3074 + t3095;
  t104 = Cos(var1[4]);
  t146 = Cos(var1[5]);
  t3280 = Sin(var1[5]);
  t3179 = Sin(var1[4]);
  t3299 = -1.*t104*t146*t206;
  t3304 = -1.*t155*t104*t3280;
  t3442 = t3299 + t3304;
  t3448 = t155*t104*t146;
  t3460 = -1.*t104*t206*t3280;
  t3462 = t3448 + t3460;
  t3782 = 4.e-6*t294*t2587;
  t3784 = t619*t2616;
  t3791 = t274*t2666;
  t3795 = 0. + t3782 + t3784 + t3791;
  t3799 = t3795*t3179;
  t3820 = -1.*t206*t2683;
  t3838 = t155*t2742;
  t3851 = 0. + t3820 + t3838;
  t3854 = t146*t3851;
  t3888 = t155*t2683;
  t3893 = t206*t2742;
  t3919 = 0. + t3888 + t3893;
  t3921 = -1.*t3919*t3280;
  t3931 = 0. + t3854 + t3921;
  t3952 = t104*t3931;
  t3954 = 0. + t3799 + t3952;
  t3524 = t619*t3179;
  t3526 = -4.e-6*t619*t3442;
  t3530 = t1007*t3462;
  t3545 = t3524 + t3526 + t3530;
  t3640 = t274*t3179;
  t3658 = 4.e-6*t294*t3442;
  t3662 = -1.*t619*t3462;
  t3671 = t3640 + t3658 + t3662;
  t3719 = 4.e-6*t294*t3179;
  t3738 = t828*t3442;
  t3747 = 4.e-6*t619*t3462;
  t3759 = t3719 + t3738 + t3747;
  t4095 = t146*t2363;
  t4103 = t2331*t3280;
  t4105 = t4095 + t4103;
  t4061 = t146*t1654;
  t4071 = t1114*t3280;
  t4072 = 0. + t4061 + t4071;
  t4111 = t146*t1791;
  t4127 = t1616*t3280;
  t4133 = 0. + t4111 + t4127;
  t4176 = t146*t1616;
  t4177 = -1.*t1791*t3280;
  t4183 = 0. + t4176 + t4177;
  t4141 = t4105*t4133;
  t4147 = t146*t2331;
  t4149 = -1.*t2363*t3280;
  t4151 = t4147 + t4149;
  t4193 = t4151*t4183;
  t4212 = t2392 + t4141 + t4193;
  t4222 = t4072*t4212;
  t4223 = -1.*t4072*t4133;
  t4224 = t146*t1114;
  t4237 = -1.*t1654*t3280;
  t4242 = 0. + t4224 + t4237;
  t4247 = -1.*t4242*t4183;
  t4255 = t2072 + t4223 + t4247;
  t4270 = t4105*t4255;
  t4276 = t4222 + t4270;
  t4322 = Sin(var1[3]);
  t4336 = t146*t3919;
  t4340 = t3851*t3280;
  t4343 = 0. + t4336 + t4340;
  t4348 = t4322*t4343;
  t4352 = Cos(var1[3]);
  t4354 = t104*t3795;
  t4360 = -1.*t3179*t3931;
  t4365 = 0. + t4354 + t4360;
  t4368 = t4352*t4365;
  t4375 = 0. + t4348 + t4368;
  t4379 = t4352*t4343;
  t4380 = -1.*t4322*t4365;
  t4403 = 0. + t4379 + t4380;
  t4493 = t521*t3179;
  t4500 = t104*t4151;
  t4507 = t4493 + t4500;
  t4480 = t1842*t3179;
  t4490 = t104*t4242;
  t4491 = 0. + t4480 + t4490;
  t4509 = t2068*t3179;
  t4511 = t104*t4183;
  t4522 = 0. + t4509 + t4511;
  t4629 = t104*t2068;
  t4638 = -1.*t3179*t4183;
  t4646 = 0. + t4629 + t4638;
  t4547 = t4507*t4522;
  t4587 = t521*t104;
  t4591 = -1.*t3179*t4151;
  t4597 = t4587 + t4591;
  t4651 = t4597*t4646;
  t4653 = t4141 + t4547 + t4651;
  t4654 = t4491*t4653;
  t4656 = -1.*t4491*t4522;
  t4665 = t104*t1842;
  t4666 = -1.*t3179*t4242;
  t4669 = 0. + t4665 + t4666;
  t4675 = -1.*t4669*t4646;
  t4676 = t4223 + t4656 + t4675;
  t4689 = t4507*t4676;
  t4692 = t4654 + t4689;
  t4793 = 0.00130540515936178*t297;
  t4803 = -0.2999969999968001*t708;
  t4807 = t4793 + t4803;
  t4835 = -1.199987999968e-6*t297;
  t4836 = -5.2216206374471e-9*t708;
  t4838 = -1.26e-8 + t4835 + t4836;
  t4845 = 0.299996999992*t297;
  t4848 = -5.04e-14 + t4845 + t1299;
  t4812 = -4.e-6*t619*t4807;
  t4839 = t828*t4838;
  t4855 = 4.e-6*t294*t4848;
  t4862 = t4812 + t4839 + t4855;
  t4892 = t1007*t4807;
  t4926 = 4.e-6*t619*t4838;
  t4927 = -1.*t619*t4848;
  t4928 = t4892 + t4926 + t4927;
  t4999 = 0.004352*t297;
  t5001 = t4999 + t730;
  t5016 = -0.9999910000159999*t297;
  t5022 = -0.00435200000006963*t708;
  t5023 = t5016 + t5022;
  t5033 = -1.7408e-8*t297;
  t5035 = 3.999964000064e-6*t708;
  t5039 = t5033 + t5035;
  t5003 = 4.e-6*t294*t5001;
  t5025 = -4.e-6*t619*t5023;
  t5040 = t828*t5039;
  t5041 = t5003 + t5025 + t5040;
  t5044 = -1.*t619*t5001;
  t5068 = t1007*t5023;
  t5078 = 4.e-6*t619*t5039;
  t5083 = t5044 + t5068 + t5078;
  t5224 = t274*t5001;
  t5225 = t619*t5023;
  t5228 = 4.e-6*t294*t5039;
  t5233 = t5224 + t5225 + t5228;
  t4863 = -1.*t206*t4862;
  t4929 = t155*t4928;
  t4967 = t4863 + t4929;
  t4976 = t155*t4862;
  t4978 = t206*t4928;
  t4979 = t4976 + t4978;
  t5169 = t619*t4807;
  t5195 = 4.e-6*t294*t4838;
  t5202 = t274*t4848;
  t5206 = t5169 + t5195 + t5202;
  t5214 = -1.*t5206*t1842;
  t5383 = -3.999964e-6*t297;
  t5402 = t5383 + t906;
  t5431 = t951 + t953;
  t5275 = t521*t5206;
  t5542 = -1.*t742*t4807;
  t5546 = -1.*t913*t4838;
  t5562 = -1.*t1273*t5039;
  t5564 = -1.*t5023*t1303;
  t5569 = -1.*t4848*t966;
  t5596 = -1.*t5001*t1480;
  t5623 = t5542 + t5546 + t5562 + t5564 + t5569 + t5596;
  t5680 = t463*t4838;
  t5686 = t479*t4848;
  t5690 = t5680 + t5686;
  t5375 = -4.e-6*t619*t5001;
  t5426 = t828*t5402;
  t5435 = 4.e-6*t294*t5431;
  t5447 = t5375 + t5426 + t5435;
  t5470 = t1007*t5001;
  t5482 = 4.e-6*t619*t5402;
  t5489 = -1.*t619*t5431;
  t5501 = t5470 + t5482 + t5489;
  t5824 = t155*t5447;
  t5825 = t206*t5501;
  t5828 = t5824 + t5825;
  t5780 = -1.*t206*t5447;
  t5802 = t155*t5501;
  t5820 = t5780 + t5802;
  t5759 = t619*t5001;
  t5769 = 4.e-6*t294*t5402;
  t5772 = t274*t5431;
  t5774 = t5759 + t5769 + t5772;
  t5823 = t146*t5820;
  t5833 = -1.*t5828*t3280;
  t5838 = t5823 + t5833;
  t5875 = t146*t5828;
  t5877 = t5820*t3280;
  t5938 = t5875 + t5877;
  t5948 = t104*t5774;
  t5960 = -1.*t3179*t5838;
  t5961 = t5948 + t5960;
  t5097 = t155*t5041;
  t5140 = t206*t5083;
  t5144 = t5097 + t5140;
  t5043 = -1.*t206*t5041;
  t5087 = t155*t5083;
  t5088 = t5043 + t5087;
  t5235 = -1.*t5233*t2068;
  t6061 = t146*t4979;
  t6064 = t4967*t3280;
  t6068 = t6061 + t6064;
  t6083 = t146*t4967;
  t6095 = -1.*t4979*t3280;
  t6125 = t6083 + t6095;
  t6159 = t146*t5144;
  t6160 = t5088*t3280;
  t6173 = t6159 + t6160;
  t6082 = t4105*t6068;
  t6191 = t146*t5088;
  t6195 = -1.*t5144*t3280;
  t6200 = t6191 + t6195;
  t6180 = -1.*t6068*t4072;
  t6184 = -1.*t6173*t4133;
  t6213 = t5206*t3179;
  t6214 = t104*t6125;
  t6229 = t6213 + t6214;
  t6242 = t104*t5206;
  t6244 = -1.*t3179*t6125;
  t6248 = t6242 + t6244;
  t6265 = t5233*t3179;
  t6272 = t104*t6200;
  t6283 = t6265 + t6272;
  t6420 = -0.15121*t155;
  t6485 = t6420 + t218 + t1515 + t1595;
  t6559 = 0.15121*t206;
  t6563 = -1.*t155*t1487;
  t6571 = -1.*t206*t1591;
  t6575 = t6420 + t6559 + t6563 + t6571;
  t6809 = -1.*t155*t2683;
  t6811 = -1.*t206*t2742;
  t6816 = t6809 + t6811;
  t6819 = t146*t6816;
  t6820 = t3820 + t3838;
  t6821 = -1.*t6820*t3280;
  t6823 = t6819 + t6821;
  t6829 = t146*t6820;
  t6830 = t6816*t3280;
  t6833 = t6829 + t6830;
  t6692 = -1.*t155*t2161;
  t6698 = -1.*t206*t2309;
  t6706 = t6692 + t6698;
  t6614 = t987 + t1111;
  t6372 = -1.*t155*t983;
  t6378 = -1.*t206*t1066;
  t6401 = t6372 + t6378;
  t7031 = t146*t6614;
  t7041 = t6401*t3280;
  t7097 = t7031 + t7041;
  t6892 = t146*t6575;
  t6893 = -1.*t6485*t3280;
  t6900 = t6892 + t6893;
  t6927 = t146*t6485;
  t6933 = t6575*t3280;
  t6934 = t6927 + t6933;
  t6853 = t6706*t3280;
  t6863 = t4147 + t6853;
  t6871 = t6863*t4133;
  t6936 = t4105*t6934;
  t6937 = t146*t6706;
  t6938 = -1.*t2331*t3280;
  t6997 = t6937 + t6938;
  t7103 = -1.*t7097*t4133;
  t7148 = -1.*t4072*t6934;
  t7169 = t146*t6401;
  t7223 = -1.*t6614*t3280;
  t7237 = t7169 + t7223;
  t7438 = -1.*t146*t3919;
  t7443 = -1.*t3851*t3280;
  t7445 = t7438 + t7443;
  t7475 = t3854 + t3921;
  t7513 = -1.*t146*t1791;
  t7519 = -1.*t1616*t3280;
  t7572 = t7513 + t7519;
  t7636 = t4224 + t4237;
  t7588 = t4176 + t4177;
  t7585 = t4151*t4133;
  t7590 = t4105*t7588;
  t7600 = -1.*t146*t2363;
  t7603 = t7600 + t6938;
  t7679 = -1.*t7636*t4133;
  t7682 = -1.*t4072*t7588;
  t7691 = -1.*t146*t1654;
  t7692 = -1.*t1114*t3280;
  t7698 = t7691 + t7692;
  t7873 = -1.*t3795*t3179;
  t7877 = -1.*t104*t3931;
  t7880 = t7873 + t7877;
  t7901 = -1.*t2068*t3179;
  t7903 = -1.*t104*t4183;
  t7905 = t7901 + t7903;
  t7957 = t4665 + t4666;
  t7923 = t4629 + t4638;
  t8115 = -1.000000000016*t619*t742;
  t8118 = 4.e-6*t274*t913;
  t8122 = -1.*t274*t966;
  t8126 = t8115 + t8118 + t8122;
  t8143 = -4.e-6*t274*t742;
  t8144 = -1.6e-11*t619*t913;
  t8166 = 4.e-6*t619*t966;
  t8176 = t8143 + t8144 + t8166;
  t8225 = -0.03874900000062*t274;
  t8277 = 0.281210000008499*t619;
  t8279 = 4.e-6*t274*t1273;
  t8284 = -1.000000000016*t619*t1303;
  t8300 = -1.*t274*t1480;
  t8301 = t8225 + t8277 + t8279 + t8284 + t8300;
  t8311 = 1.124840000016e-6*t274;
  t8314 = 1.5499600000248e-7*t619;
  t8317 = -1.6e-11*t619*t1273;
  t8336 = -4.e-6*t274*t1303;
  t8377 = 4.e-6*t619*t1480;
  t8382 = -1.2484e-7 + t8311 + t8314 + t8317 + t8336 + t8377;
  t8526 = 4.e-6*t274*t463;
  t8529 = -1.*t274*t479;
  t8540 = t8526 + t8529;
  t8547 = -1.6e-11*t463*t619;
  t8552 = 4.e-6*t479*t619;
  t8568 = t8547 + t8552;
  t8309 = t206*t8301;
  t8384 = t155*t8382;
  t8412 = t8309 + t8384;
  t8458 = t155*t8301;
  t8459 = -1.*t206*t8382;
  t8460 = t8458 + t8459;
  t8477 = -0.281210000004*t274;
  t8493 = t274*t1303;
  t8497 = -4.9936e-13 + t8477 + t1547 + t1549 + t8493 + t1565;
  t8465 = t274*t742;
  t8467 = t8465 + t1025 + t1032;
  t8499 = -1.*t1842*t8497;
  t8615 = t521*t8497;
  t8683 = 4.e-6*t274*t2587;
  t8693 = -1.000000000016*t619*t2616;
  t8699 = -1.*t274*t2666;
  t8703 = t8683 + t8693 + t8699;
  t8716 = -1.6e-11*t619*t2587;
  t8736 = -4.e-6*t274*t2616;
  t8753 = 4.e-6*t619*t2666;
  t8756 = t8716 + t8736 + t8753;
  t8198 = t206*t8126;
  t8209 = t155*t8176;
  t8218 = t8198 + t8209;
  t8135 = t155*t8126;
  t8186 = -1.*t206*t8176;
  t8189 = t8135 + t8186;
  t8589 = t8540*t206;
  t8601 = t155*t8568;
  t8604 = t8589 + t8601;
  t8541 = t155*t8540;
  t8578 = -1.*t206*t8568;
  t8579 = t8541 + t8578;
  t8614 = t2309*t2068;
  t8914 = t146*t8604;
  t8915 = t8579*t3280;
  t8920 = t8914 + t8915;
  t8470 = -1.*t8467*t2068;
  t8899 = t146*t8218;
  t8903 = t8189*t3280;
  t8912 = t8899 + t8903;
  t9044 = t146*t8460;
  t9049 = -1.*t8412*t3280;
  t9050 = t9044 + t9049;
  t9058 = t146*t8412;
  t9096 = t8460*t3280;
  t9109 = t9058 + t9096;
  t8846 = t206*t8703;
  t8855 = t155*t8756;
  t8869 = t8846 + t8855;
  t8823 = t155*t8703;
  t8825 = -1.*t206*t8756;
  t8826 = t8823 + t8825;
  t8771 = t274*t2616;
  t8792 = t2713 + t8771 + t2733;
  t8829 = t146*t8826;
  t8883 = -1.*t8869*t3280;
  t8886 = t8829 + t8883;
  t9227 = t146*t8869;
  t9228 = t8826*t3280;
  t9229 = t9227 + t9228;
  t9241 = t104*t8792;
  t9246 = -1.*t3179*t8886;
  t9247 = t9241 + t9246;
  t9186 = t146*t8189;
  t9189 = -1.*t8218*t3280;
  t9195 = t9186 + t9189;
  t8991 = t146*t8579;
  t9006 = -1.*t8604*t3280;
  t9011 = t8991 + t9006;
  t8982 = t8920*t4133;
  t9112 = t4105*t9109;
  t9295 = t2309*t3179;
  t9322 = t104*t9011;
  t9324 = t9295 + t9322;
  t9157 = -1.*t8912*t4133;
  t9220 = -1.*t4072*t9109;
  t9286 = t8467*t3179;
  t9288 = t104*t9195;
  t9289 = t9286 + t9288;
  t9354 = t8497*t3179;
  t9358 = t104*t9050;
  t9362 = t9354 + t9358;
  t9365 = t104*t8497;
  t9409 = -1.*t3179*t9050;
  t9422 = t9365 + t9409;
  t9631 = t1616*t3851;
  t9642 = t1791*t3919;
  t9678 = t2068*t3795;
  t9689 = t9631 + t9642 + t9678;
  t9697 = t521*t9689;
  t9698 = -1.*t2331*t1616;
  t9701 = -1.*t2363*t1791;
  t9707 = -1.*t521*t2068;
  t9717 = t9698 + t9701 + t9707;
  t9722 = t9717*t3795;
  t9724 = t9697 + t9722;
  t9765 = t1487*t2683;
  t9771 = t2497*t3795;
  t9774 = t1591*t2742;
  t9788 = t9765 + t9771 + t9774;
  t9789 = t521*t9788;
  t9797 = -0.15121*t983;
  t9799 = -0.15121*t1066;
  t9812 = -1.*t2161*t1487;
  t9813 = -1.*t521*t2497;
  t9817 = -1.*t2309*t1591;
  t9823 = t9812 + t9813 + t9817;
  t9825 = t9823*t3795;
  t9833 = t9789 + t9797 + t9799 + t9825;
  t9837 = t2587*t1273;
  t9847 = t1303*t2616;
  t9863 = t1480*t2666;
  t9891 = t9837 + t9847 + t9863;
  t9897 = -1.*t463*t1273;
  t9898 = -1.*t479*t1480;
  t9902 = t9897 + t9898;
  t9892 = -1.*t479*t9891;
  t9904 = -1.*t9902*t2666;
  t9905 = t9892 + t9904;
  t9906 = 4.e-6*t9905;
  t9907 = -1.*t463*t9891;
  t9908 = -0.038749*t742;
  t9909 = -1.*t9902*t2587;
  t9910 = 1.e-6*t913;
  t9911 = -0.28121*t966;
  t9912 = t9906 + t9907 + t9908 + t9909 + t9910 + t9911;
  t3176 = t1861 + t1872 + t1944 + t1988;
  t241 = t203 + t218;
  t3229 = t1691 + t218;
  t3291 = t1117 + t1162 + t1193 + t1195;
  t9943 = t146*t4322*t3179;
  t9953 = t4352*t3280;
  t9959 = t9943 + t9953;
  t9970 = t4352*t146;
  t9978 = -1.*t4322*t3179*t3280;
  t9982 = t9970 + t9978;
  t3446 = t1540 + t1547;
  t10014 = t4322*t4072;
  t10016 = t4352*t4669;
  t10029 = 0. + t10014 + t10016;
  t10045 = t4352*t4072;
  t10046 = -1.*t4322*t4669;
  t10047 = 0. + t10045 + t10046;
  t10058 = -1.*t4105*t4133;
  t10059 = -1.*t4151*t4183;
  t10061 = t9707 + t10058 + t10059;
  t10062 = t4343*t10061;
  t10063 = t4133*t4343;
  t10064 = t4183*t3931;
  t10065 = t9678 + t10063 + t10064;
  t10066 = t4105*t10065;
  t10067 = t10062 + t10066;
  t3488 = -0.0398890000006382*t708;
  t3493 = t1291 + t3488;
  t9994 = -1.*t206*t9959;
  t9997 = t155*t9982;
  t9999 = t9994 + t9997;
  t10002 = t155*t9959;
  t10003 = t206*t9982;
  t10004 = t10002 + t10003;
  t3577 = -0.039889*t371;
  t3582 = -0.503150000008*t708;
  t3608 = t1347 + t3577 + t1359 + t3582;
  t3678 = 2.552896e-18*t371;
  t3693 = 2.012600000032e-6*t708;
  t3715 = t1197 + t3678 + t1234 + t3693;
  t10235 = -1.*t4507*t4522;
  t10240 = -1.*t4597*t4646;
  t10241 = t10058 + t10235 + t10240;
  t10242 = t3954*t10241;
  t10247 = t4522*t3954;
  t10263 = t4646*t4365;
  t10265 = t10063 + t10247 + t10263;
  t10280 = t4507*t10265;
  t10282 = t10242 + t10280;
  t10078 = -1.*t104*t619*t4322;
  t10101 = -4.e-6*t619*t9999;
  t10103 = t1007*t10004;
  t10105 = t10078 + t10101 + t10103;
  t10124 = -1.*t274*t104*t4322;
  t10126 = 4.e-6*t294*t9999;
  t10130 = -1.*t619*t10004;
  t10131 = t10124 + t10126 + t10130;
  t10148 = -4.e-6*t294*t104*t4322;
  t10154 = t828*t9999;
  t10167 = 4.e-6*t619*t10004;
  t10180 = t10148 + t10154 + t10167;
  t10486 = t5206*t3795;
  t10541 = -1.*t521*t5206;
  t10628 = t1273*t5402;
  t10630 = t2587*t4838;
  t10641 = t5001*t1303;
  t10646 = t4807*t2616;
  t10648 = t5431*t1480;
  t10649 = t4848*t2666;
  t10655 = t10628 + t10630 + t10641 + t10646 + t10648 + t10649;
  t10668 = -1.*t463*t4838;
  t10673 = -1.*t479*t4848;
  t10674 = t10668 + t10673;
  t6306 = t104*t5233;
  t6309 = -1.*t3179*t6200;
  t6313 = t6306 + t6309;
  t10469 = t5774*t2068;
  t10726 = -1.*t4105*t6068;
  t5778 = t5774*t3179;
  t5846 = t104*t5838;
  t5854 = t5778 + t5846;
  t10735 = t5938*t4133;
  t10742 = t6068*t4343;
  t10841 = -1.*t6863*t4133;
  t10846 = -1.*t4105*t6934;
  t10879 = t6934*t4343;
  t10970 = t4133*t6833;
  t11240 = -1.*t4151*t4133;
  t11246 = -1.*t4105*t7588;
  t11253 = t7588*t4343;
  t11255 = t4133*t7475;
  t7993 = -1.*t1842*t3179;
  t8003 = -1.*t104*t4242;
  t8021 = t7993 + t8003;
  t7929 = -1.*t521*t3179;
  t7931 = -1.*t104*t4151;
  t7932 = t7929 + t7931;
  t7892 = t4354 + t4360;
  t11473 = t8497*t3795;
  t11493 = -1.*t521*t8497;
  t9477 = t104*t8467;
  t9498 = -1.*t3179*t9195;
  t9499 = t9477 + t9498;
  t11485 = -1.*t2309*t2068;
  t11474 = t2068*t8792;
  t8811 = t8792*t3179;
  t8889 = t104*t8886;
  t8890 = t8811 + t8889;
  t11670 = -1.*t8920*t4133;
  t11673 = -1.*t4105*t9109;
  t9346 = t104*t2309;
  t9347 = -1.*t3179*t9011;
  t9351 = t9346 + t9347;
  t11680 = t9109*t4343;
  t11694 = t4133*t9229;
  t11773 = -1.*t1616*t3851;
  t11778 = -1.*t1791*t3919;
  t11779 = -1.*t2068*t3795;
  t11785 = t11773 + t11778 + t11779;
  t11831 = t11785*t1842;
  t11847 = t1114*t1616;
  t11858 = t1654*t1791;
  t11890 = t1842*t2068;
  t11906 = t11847 + t11858 + t11890;
  t11907 = t11906*t3795;
  t11908 = t11831 + t11907;
  t11923 = -0.15121*t2161;
  t11927 = -0.15121*t2309;
  t11939 = -1.*t1487*t2683;
  t11940 = -1.*t2497*t3795;
  t11944 = -1.*t1591*t2742;
  t11956 = t11939 + t11940 + t11944;
  t11961 = t11956*t1842;
  t11965 = t983*t1487;
  t11968 = t1842*t2497;
  t11993 = t1066*t1591;
  t11995 = t11965 + t11968 + t11993;
  t12000 = t11995*t3795;
  t12015 = t11923 + t11927 + t11961 + t12000;
  t12049 = t1273*t913;
  t12051 = t742*t1303;
  t12052 = t966*t1480;
  t12053 = t12049 + t12051 + t12052;
  t12038 = -1.*t2587*t1273;
  t12045 = -1.*t1303*t2616;
  t12046 = -1.*t1480*t2666;
  t12047 = t12038 + t12045 + t12046;
  t12029 = 1.e-6*t463;
  t12035 = -0.28121*t479;
  t12048 = -1.*t12047*t966;
  t12054 = -1.*t12053*t2666;
  t12055 = t12048 + t12054;
  t12056 = 4.e-6*t12055;
  t12058 = -1.*t12053*t2587;
  t12059 = -1.*t12047*t913;
  t12060 = t12029 + t12035 + t12056 + t12058 + t12059;
  t12069 = -1.*t4352*t146*t3179;
  t12098 = t4322*t3280;
  t12099 = t12069 + t12098;
  t12107 = t146*t4322;
  t12117 = t4352*t3179*t3280;
  t12124 = t12107 + t12117;
  t12163 = t4322*t4105;
  t12179 = t4352*t4597;
  t12197 = t12163 + t12179;
  t12202 = t4352*t4105;
  t12203 = -1.*t4322*t4597;
  t12207 = t12202 + t12203;
  t12219 = t4072*t4133;
  t12222 = t4242*t4183;
  t12224 = t11890 + t12219 + t12222;
  t12227 = t4343*t12224;
  t12229 = -1.*t4133*t4343;
  t12230 = -1.*t4183*t3931;
  t12236 = t11779 + t12229 + t12230;
  t12241 = t4072*t12236;
  t12243 = t12227 + t12241;
  t12143 = -1.*t206*t12099;
  t12145 = t155*t12124;
  t12147 = t12143 + t12145;
  t12152 = t155*t12099;
  t12153 = t206*t12124;
  t12158 = t12152 + t12153;
  t12319 = t4491*t4522;
  t12320 = t4669*t4646;
  t12322 = t12219 + t12319 + t12320;
  t12324 = t3954*t12322;
  t12328 = -1.*t4522*t3954;
  t12332 = -1.*t4646*t4365;
  t12334 = t12229 + t12328 + t12332;
  t12335 = t4491*t12334;
  t12336 = t12324 + t12335;
  t12257 = t4352*t104*t619;
  t12259 = -4.e-6*t619*t12147;
  t12260 = t1007*t12158;
  t12262 = t12257 + t12259 + t12260;
  t12265 = t274*t4352*t104;
  t12268 = 4.e-6*t294*t12147;
  t12269 = -1.*t619*t12158;
  t12273 = t12265 + t12268 + t12269;
  t12291 = 4.e-6*t294*t4352*t104;
  t12292 = t828*t12147;
  t12298 = 4.e-6*t619*t12158;
  t12302 = t12291 + t12292 + t12298;
  t12422 = t7097*t4133;
  t12426 = t4072*t6934;
  t12433 = -1.*t6934*t4343;
  t12436 = -1.*t4133*t6833;
  t12523 = t7636*t4133;
  t12528 = t4072*t7588;
  t12555 = -1.*t7588*t4343;
  t12556 = -1.*t4133*t7475;
  t12669 = -1.*t5206*t3795;
  t12708 = t5206*t1842;
  t12903 = t742*t4807;
  t12906 = t913*t4838;
  t12907 = t1273*t5039;
  t12908 = t5023*t1303;
  t12909 = t4848*t966;
  t12911 = t5001*t1480;
  t12912 = t12903 + t12906 + t12907 + t12908 + t12909 + t12911;
  t12836 = -1.*t1273*t5402;
  t12838 = -1.*t2587*t4838;
  t12893 = -1.*t5001*t1303;
  t12894 = -1.*t4807*t2616;
  t12895 = -1.*t5431*t1480;
  t12897 = -1.*t4848*t2666;
  t12899 = t12836 + t12838 + t12893 + t12894 + t12895 + t12897;
  t12710 = t5233*t2068;
  t12667 = -1.*t5774*t2068;
  t12923 = t6068*t4072;
  t12925 = t6173*t4133;
  t12942 = -1.*t5938*t4133;
  t13012 = -1.*t6068*t4343;
  t13294 = -1.*t8497*t3795;
  t13317 = t1842*t8497;
  t13316 = t8467*t2068;
  t13296 = -1.*t2068*t8792;
  t13383 = t8912*t4133;
  t13455 = t4072*t9109;
  t13565 = -1.*t9109*t4343;
  t13599 = -1.*t4133*t9229;
  p_output1[0]=t104*t146*t241 + t3176*t3179 - 1.*t104*t3229*t3280 + t3291*t3442 + t3446*t3462 + t3493*t3545 + t3608*t3671 + t3715*t3759 - 0.041195*(t297*t3671 + 4.e-6*t371*t3759 - 1.*t3545*t708) - 0.14871*(4.e-6*t3671*t371 + t1199*t3759 + 4.e-6*t3545*t708) + 0.803147*(t3545*t631 + t3671*t708 - 4.e-6*t3759*t708) + var1[0] + t3954*var2[0] + t4403*var2[1] + t4375*var2[2] + t4692*var2[3] + ((-1.*t4322*t4343 - 1.*t4352*t4365)*var2[1] + (t4379 + t4380)*var2[2])*var2[3] + t4276*var2[4] + (t7892*var2[0] - 1.*t4322*t7880*var2[1] + t4352*t7880*var2[2] + (t4597*t4676 + t4491*(t4522*t4597 + t4597*t7905 + t4507*t7923 + t4646*t7932) + t4653*t7957 + t4507*(-1.*t4669*t7905 - 1.*t4491*t7923 - 1.*t4522*t7957 - 1.*t4646*t8021))*var2[3])*var2[4] + t2445*var2[5] + (t104*t7445*var2[0] + (t3179*t4322*t7445 + t4352*t7475)*var2[1] + (-1.*t3179*t4352*t7445 + t4322*t7475)*var2[2] + (t104*t4676*t7603 + t4491*(t104*t4507*t7572 - 1.*t3179*t4597*t7572 + t7585 + t7590 + t104*t4522*t7603 - 1.*t3179*t4646*t7603) + t104*t4653*t7698 + t4507*(-1.*t104*t4491*t7572 + t3179*t4669*t7572 + t7679 + t7682 - 1.*t104*t4522*t7698 + t3179*t4646*t7698))*var2[3] + (t4151*t4255 + t4072*(t4151*t7572 + t7585 + t7590 + t4183*t7603) + t4212*t7636 + t4105*(-1.*t4242*t7572 + t7679 + t7682 - 1.*t4183*t7698))*var2[4])*var2[5] + t2782*var2[9] + (t104*t6823*var2[0] + (t3179*t4322*t6823 + t4352*t6833)*var2[1] + (-1.*t3179*t4352*t6823 + t4322*t6833)*var2[2] + (t104*t4676*t6997 + t4491*(t6871 + t104*t4507*t6900 - 1.*t3179*t4597*t6900 + t6936 + t104*t4522*t6997 - 1.*t3179*t4646*t6997) + t104*t4653*t7237 + t4507*(-1.*t104*t4491*t6900 + t3179*t4669*t6900 + t7103 + t7148 - 1.*t104*t4522*t7237 + t3179*t4646*t7237))*var2[3] + (t4255*t6863 + t4072*(t6871 + t4151*t6900 + t6936 + t4183*t6997) + t4212*t7097 + t4105*(-1.*t4242*t6900 + t7103 + t7148 - 1.*t4183*t7237))*var2[4] + (t521*(-1.*t1616*t6401 - 1.*t1654*t6485 - 1.*t1114*t6575 - 1.*t1791*t6614) + t1842*(t1791*t2331 + t2363*t6485 + t2331*t6575 + t1616*t6706))*var2[5])*var2[9] + t3117*var2[10] + (t8890*var2[0] + (t4352*t9229 - 1.*t4322*t9247)*var2[1] + (t4322*t9229 + t4352*t9247)*var2[2] + (t4653*t9289 + t4676*t9324 + t4491*(t8982 + t9112 + t4522*t9324 + t4646*t9351 + t4507*t9362 + t4597*t9422) + t4507*(t9157 + t9220 - 1.*t4522*t9289 - 1.*t4491*t9362 - 1.*t4669*t9422 - 1.*t4646*t9499))*var2[3] + (t4212*t8912 + t4255*t8920 + t4072*(t8614 + t8615 + t8982 + t4183*t9011 + t4151*t9050 + t9112) + t4105*(t8470 + t8499 - 1.*t4242*t9050 + t9157 - 1.*t4183*t9195 + t9220))*var2[4] + (t2077*t2309 + t2403*t8467 + t521*(-1.*t1616*t8189 - 1.*t1791*t8218 - 1.*t1654*t8412 - 1.*t1114*t8460 + t8470 + t8499) + t1842*(t2363*t8412 + t2331*t8460 + t1616*t8579 + t1791*t8604 + t8614 + t8615))*var2[5] + (t2309*t2516 + t2562*t8467 + t1842*(t2309*t2497 + t2309*t8301 + t2161*t8382 + t1591*t8540 + t1487*t8568 + t8615) - 0.15121*t8703 - 0.15121*t8756 + t521*(-1.*t1591*t8126 - 1.*t1487*t8176 - 1.*t1066*t8301 - 1.*t2497*t8467 + t8499 - 1.*t8382*t983))*var2[9])*var2[10] - 1.9353204325022392e-7*var2[11] + (t5854*var2[0] + (t4352*t5938 - 1.*t4322*t5961)*var2[1] + (t4322*t5938 + t4352*t5961)*var2[2] + (t4491*(t6082 + t4507*t6229 + t4597*t6248) + t4653*t6283 + t4507*(t6180 + t6184 - 1.*t4491*t6229 - 1.*t4669*t6248 - 1.*t4522*t6283 - 1.*t4646*t6313))*var2[3] + (t4072*(t5275 + t6082 + t4151*t6125) + t4212*t6173 + t4105*(t5214 + t5235 - 1.*t4242*t6125 + t6180 + t6184 - 1.*t4183*t6200))*var2[4] + (t2403*t5233 + t521*(-1.*t1114*t4967 - 1.*t1654*t4979 - 1.*t1616*t5088 - 1.*t1791*t5144 + t5214 + t5235) + t1842*(t2331*t4967 + t2363*t4979 + t5275))*var2[5] + (t2562*t5233 + t1842*(t2161*t4862 + t2309*t4928 + t5275) - 0.15121*t5447 - 0.15121*t5501 + t521*(-1.*t1066*t4928 - 1.*t1487*t5041 - 1.*t1591*t5083 + t5214 - 1.*t2497*t5233 - 1.*t4862*t983))*var2[9] + (-0.038749*t5001 - 1.*t2957*t5039 + 1.e-6*t5402 - 0.28121*t5431 - 1.*t463*t5623 - 1.*t5690*t913 + 4.e-6*(-1.*t2957*t5001 - 1.*t479*t5623 - 1.*t5690*t966))*var2[10])*var2[11] + t3954*var3[0] + t4403*var3[1] + t4375*var3[2] + t4692*var3[3] + t4276*var3[4] + t2445*var3[5] + t2782*var3[9] + t3117*var3[10] - 1.9353204325022392e-7*var3[11] - 1.*var4[0];
  p_output1[1]=t10004*t3446 + t10105*t3493 + t10131*t3608 + t10180*t3715 - 1.*t104*t3176*t4322 - 0.041195*(t10131*t297 + 4.e-6*t10180*t371 - 1.*t10105*t708) - 0.14871*(t10180*t1199 + 4.e-6*t10131*t371 + 4.e-6*t10105*t708) + 0.803147*(t10105*t631 + t10131*t708 - 4.e-6*t10180*t708) + t241*t9959 + t3229*t9982 + t3291*t9999 + var1[1] + t4491*var2[0] + t10047*var2[1] + t10029*var2[2] + t10282*var2[3] + ((-1.*t4072*t4322 - 1.*t4352*t4669)*var2[1] + (t10045 + t10046)*var2[2])*var2[3] + t10067*var2[4] + (t7957*var2[0] - 1.*t4322*t8021*var2[1] + t4352*t8021*var2[2] + (t10265*t4597 + t10241*t7892 + t4507*(t4646*t7880 + t4522*t7892 + t4365*t7905 + t3954*t7923) + t3954*(-1.*t4522*t4597 - 1.*t4597*t7905 - 1.*t4507*t7923 - 1.*t4646*t7932))*var2[3])*var2[4] + t9724*var2[5] + (t104*t7698*var2[0] + (t4352*t7636 + t3179*t4322*t7698)*var2[1] + (t4322*t7636 - 1.*t3179*t4352*t7698)*var2[2] + (t10241*t104*t7445 + t4507*(t11253 + t11255 + t104*t4522*t7445 - 1.*t3179*t4646*t7445 + t104*t3954*t7572 - 1.*t3179*t4365*t7572) + t10265*t104*t7603 + t3954*(t11240 + t11246 - 1.*t104*t4507*t7572 + t3179*t4597*t7572 - 1.*t104*t4522*t7603 + t3179*t4646*t7603))*var2[3] + (t10065*t4151 + t10061*t7475 + t4105*(t11253 + t11255 + t4183*t7445 + t3931*t7572) + t4343*(t11240 + t11246 - 1.*t4151*t7572 - 1.*t4183*t7603))*var2[4])*var2[5] + t9833*var2[9] + (t104*t7237*var2[0] + (t4352*t7097 + t3179*t4322*t7237)*var2[1] + (t4322*t7097 - 1.*t3179*t4352*t7237)*var2[2] + (t10241*t104*t6823 + t4507*(t10879 + t10970 + t104*t4522*t6823 - 1.*t3179*t4646*t6823 + t104*t3954*t6900 - 1.*t3179*t4365*t6900) + t10265*t104*t6997 + t3954*(t10841 + t10846 - 1.*t104*t4507*t6900 + t3179*t4597*t6900 - 1.*t104*t4522*t6997 + t3179*t4646*t6997))*var2[3] + (t10061*t6833 + t10065*t6863 + t4105*(t10879 + t10970 + t4183*t6823 + t3931*t6900) + t4343*(t10841 + t10846 - 1.*t4151*t6900 - 1.*t4183*t6997))*var2[4] + (t3795*(-1.*t1791*t2331 - 1.*t2363*t6485 - 1.*t2331*t6575 - 1.*t1616*t6706) + t521*(t3919*t6485 + t3851*t6575 + t1616*t6816 + t1791*t6820))*var2[5])*var2[9] + t9912*var2[10] + (t9289*var2[0] + (t4352*t8912 - 1.*t4322*t9499)*var2[1] + (t4322*t8912 + t4352*t9499)*var2[2] + (t10241*t8890 + t10265*t9324 + t4507*(t11680 + t11694 + t4522*t8890 + t4646*t9247 + t3954*t9362 + t4365*t9422) + t3954*(t11670 + t11673 - 1.*t4522*t9324 - 1.*t4646*t9351 - 1.*t4507*t9362 - 1.*t4597*t9422))*var2[3] + (t10065*t8920 + t4105*(t11473 + t11474 + t11680 + t11694 + t4183*t8886 + t3931*t9050) + t4343*(t11485 + t11493 + t11670 + t11673 - 1.*t4183*t9011 - 1.*t4151*t9050) + t10061*t9229)*var2[4] + (t3795*(t11485 + t11493 - 1.*t2363*t8412 - 1.*t2331*t8460 - 1.*t1616*t8579 - 1.*t1791*t8604) + t521*(t11473 + t11474 + t3919*t8412 + t3851*t8460 + t1616*t8826 + t1791*t8869) + t2309*t9689 + t8792*t9717)*var2[5] + (-0.15121*t8126 - 0.15121*t8176 + t3795*(t11493 - 1.*t2309*t2497 - 1.*t2309*t8301 - 1.*t2161*t8382 - 1.*t1591*t8540 - 1.*t1487*t8568) + t521*(t11473 + t2742*t8301 + t2683*t8382 + t1591*t8703 + t1487*t8756 + t2497*t8792) + t2309*t9788 + t8792*t9823)*var2[9])*var2[10] + 0.29999998115510645*var2[11] + (t6283*var2[0] + (t4352*t6173 - 1.*t4322*t6313)*var2[1] + (t4322*t6173 + t4352*t6313)*var2[2] + (t10241*t5854 + t4507*(t10735 + t10742 + t4522*t5854 + t4646*t5961 + t3954*t6229 + t4365*t6248) + t3954*(t10726 - 1.*t4507*t6229 - 1.*t4597*t6248))*var2[3] + (t10061*t5938 + t4105*(t10469 + t10486 + t10735 + t10742 + t4183*t5838 + t3931*t6125) + t4343*(t10541 + t10726 - 1.*t4151*t6125))*var2[4] + (t3795*(t10541 - 1.*t2331*t4967 - 1.*t2363*t4979) + t521*(t10469 + t10486 + t3851*t4967 + t3919*t4979 + t1616*t5820 + t1791*t5828) + t5774*t9717)*var2[5] + (t3795*(t10541 - 1.*t2161*t4862 - 1.*t2309*t4928) - 0.15121*t5041 - 0.15121*t5083 + t521*(t10486 + t2683*t4862 + t2742*t4928 + t1487*t5447 + t1591*t5501 + t2497*t5774) + t5774*t9823)*var2[9] + (-1.*t10674*t2587 - 1.*t10655*t463 - 0.28121*t5001 - 0.038749*t5023 + 1.e-6*t5039 - 1.*t5402*t9902 + 4.e-6*(-1.*t10674*t2666 - 1.*t10655*t479 - 1.*t5431*t9902))*var2[10])*var2[11] + t4491*var3[0] + t10047*var3[1] + t10029*var3[2] + t10282*var3[3] + t10067*var3[4] + t9724*var3[5] + t9833*var3[9] + t9912*var3[10] + 0.29999998115510645*var3[11] - 1.*var4[1];
  p_output1[2]=t12099*t241 + t12124*t3229 + t12147*t3291 + t12158*t3446 + t12262*t3493 + t12273*t3608 + t12302*t3715 + t104*t3176*t4352 - 0.041195*(t12273*t297 + 4.e-6*t12302*t371 - 1.*t12262*t708) - 0.14871*(t1199*t12302 + 4.e-6*t12273*t371 + 4.e-6*t12262*t708) + 0.803147*(t12262*t631 + t12273*t708 - 4.e-6*t12302*t708) + var1[2] + t4507*var2[0] + t12207*var2[1] + t12197*var2[2] + t12336*var2[3] + ((-1.*t4105*t4322 - 1.*t4352*t4597)*var2[1] + t12207*var2[2])*var2[3] + t12243*var2[4] + (t4597*var2[0] - 1.*t4322*t7932*var2[1] + t4352*t7932*var2[2] + (t12322*t7892 + t4491*(-1.*t4646*t7880 - 1.*t4522*t7892 - 1.*t4365*t7905 - 1.*t3954*t7923) + t12334*t7957 + t3954*(t4669*t7905 + t4491*t7923 + t4522*t7957 + t4646*t8021))*var2[3])*var2[4] + t11908*var2[5] + (t104*t7603*var2[0] + (t4151*t4352 + t3179*t4322*t7603)*var2[1] + (t4151*t4322 - 1.*t3179*t4352*t7603)*var2[2] + (t104*t12322*t7445 + t4491*(t12555 + t12556 - 1.*t104*t4522*t7445 + t3179*t4646*t7445 - 1.*t104*t3954*t7572 + t3179*t4365*t7572) + t104*t12334*t7698 + t3954*(t12523 + t12528 + t104*t4491*t7572 - 1.*t3179*t4669*t7572 + t104*t4522*t7698 - 1.*t3179*t4646*t7698))*var2[3] + (t12224*t7475 + t4072*(t12555 + t12556 - 1.*t4183*t7445 - 1.*t3931*t7572) + t12236*t7636 + t4343*(t12523 + t12528 + t4242*t7572 + t4183*t7698))*var2[4])*var2[5] + t12015*var2[9] + (t104*t6997*var2[0] + (t4352*t6863 + t3179*t4322*t6997)*var2[1] + (t4322*t6863 - 1.*t3179*t4352*t6997)*var2[2] + (t104*t12322*t6823 + t4491*(t12433 + t12436 - 1.*t104*t4522*t6823 + t3179*t4646*t6823 - 1.*t104*t3954*t6900 + t3179*t4365*t6900) + t104*t12334*t7237 + t3954*(t12422 + t12426 + t104*t4491*t6900 - 1.*t3179*t4669*t6900 + t104*t4522*t7237 - 1.*t3179*t4646*t7237))*var2[3] + (t12224*t6833 + t4072*(t12433 + t12436 - 1.*t4183*t6823 - 1.*t3931*t6900) + t12236*t7097 + t4343*(t12422 + t12426 + t4242*t6900 + t4183*t7237))*var2[4] + (t3795*(t1616*t6401 + t1654*t6485 + t1114*t6575 + t1791*t6614) + t1842*(-1.*t3919*t6485 - 1.*t3851*t6575 - 1.*t1616*t6816 - 1.*t1791*t6820))*var2[5])*var2[9] + t12060*var2[10] + (t9324*var2[0] + (t4352*t8920 - 1.*t4322*t9351)*var2[1] + (t4322*t8920 + t4352*t9351)*var2[2] + (t12322*t8890 + t12334*t9289 + t4491*(t13565 + t13599 - 1.*t4522*t8890 - 1.*t4646*t9247 - 1.*t3954*t9362 - 1.*t4365*t9422) + t3954*(t13383 + t13455 + t4522*t9289 + t4491*t9362 + t4669*t9422 + t4646*t9499))*var2[3] + (t12236*t8912 + t4072*(t13294 + t13296 + t13565 + t13599 - 1.*t4183*t8886 - 1.*t3931*t9050) + t4343*(t13316 + t13317 + t13383 + t13455 + t4242*t9050 + t4183*t9195) + t12224*t9229)*var2[4] + (t3795*(t13316 + t13317 + t1616*t8189 + t1791*t8218 + t1654*t8412 + t1114*t8460) + t11785*t8467 + t11906*t8792 + t1842*(t13294 + t13296 - 1.*t3919*t8412 - 1.*t3851*t8460 - 1.*t1616*t8826 - 1.*t1791*t8869))*var2[5] + (t11956*t8467 - 0.15121*t8540 - 0.15121*t8568 + t11995*t8792 + t1842*(t13294 - 1.*t2742*t8301 - 1.*t2683*t8382 - 1.*t1591*t8703 - 1.*t1487*t8756 - 1.*t2497*t8792) + t3795*(t13317 + t1591*t8126 + t1487*t8176 + t1066*t8301 + t2497*t8467 + t8382*t983))*var2[9])*var2[10] + 1.1914820871506078e-8*var2[11] + ((t12322*t5854 + t4491*(t12942 + t13012 - 1.*t4522*t5854 - 1.*t4646*t5961 - 1.*t3954*t6229 - 1.*t4365*t6248) + t12334*t6283 + t3954*(t12923 + t12925 + t4491*t6229 + t4669*t6248 + t4522*t6283 + t4646*t6313))*var2[3] + (t12224*t5938 + t4072*(t12667 + t12669 + t12942 + t13012 - 1.*t4183*t5838 - 1.*t3931*t6125) + t12236*t6173 + t4343*(t12708 + t12710 + t12923 + t12925 + t4242*t6125 + t4183*t6200))*var2[4] + (t3795*(t12708 + t12710 + t1114*t4967 + t1654*t4979 + t1616*t5088 + t1791*t5144) + t11785*t5233 + t11906*t5774 + t1842*(t12667 + t12669 - 1.*t3851*t4967 - 1.*t3919*t4979 - 1.*t1616*t5820 - 1.*t1791*t5828))*var2[5] + (t11956*t5233 + t11995*t5774 + t1842*(t12669 - 1.*t2683*t4862 - 1.*t2742*t4928 - 1.*t1487*t5447 - 1.*t1591*t5501 - 1.*t2497*t5774) + t3795*(t12708 + t1066*t4928 + t1487*t5041 + t1591*t5083 + t2497*t5233 + t4862*t983))*var2[9] + (-1.*t12912*t2587 - 1.*t12047*t5039 - 1.*t12053*t5402 - 1.*t12899*t913 + 4.e-6*(-1.*t12912*t2666 - 1.*t12047*t5001 - 1.*t12053*t5431 - 1.*t12899*t966))*var2[10])*var2[11] + t4507*var3[0] + t12207*var3[1] + t12197*var3[2] + t12336*var3[3] + t12243*var3[4] + t11908*var3[5] + t12015*var3[9] + t12060*var3[10] + 1.1914820871506078e-8*var3[11] - 1.*var4[2];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "ddh_FrFoot_QuadrupleStance.hh"

namespace QuadrupleStance
{

void ddh_FrFoot_QuadrupleStance_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
