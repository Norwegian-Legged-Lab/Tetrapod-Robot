/*
 * Automatically Generated from Mathematica.
 * Wed 8 Dec 2021 22:33:21 GMT+01:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t84;
  double t69;
  double t104;
  double t49;
  double t89;
  double t94;
  double t99;
  double t1036;
  double t74;
  double t79;
  double t109;
  double t34;
  double t526;
  double t838;
  double t1024;
  double t1037;
  double t1079;
  double t410;
  double t1345;
  double t1351;
  double t1511;
  double t1600;
  double t1632;
  double t1749;
  double t1796;
  double t1800;
  double t39;
  double t41;
  double t44;
  double t54;
  double t1180;
  double t1246;
  double t1247;
  double t2255;
  double t2282;
  double t2298;
  double t2315;
  double t2376;
  double t2390;
  double t2401;
  double t1957;
  double t1976;
  double t2492;
  double t2494;
  double t2559;
  double t2607;
  double t2728;
  double t2750;
  double t2766;
  double t2798;
  double t2821;
  double t2907;
  double t1096;
  double t1633;
  double t1833;
  double t1846;
  double t1990;
  double t2013;
  double t2022;
  double t2047;
  double t2135;
  double t2184;
  double t2199;
  double t2233;
  double t2476;
  double t2724;
  double t2917;
  double t2932;
  double t2946;
  double t2950;
  double t2953;
  double t2955;
  double t2963;
  double t2974;
  double t114;
  double t171;
  double t190;
  double t218;
  double t2936;
  double t2987;
  double t2991;
  double t3999;
  double t4002;
  double t4011;
  double t4053;
  double t4056;
  double t4088;
  double t3093;
  double t3252;
  double t3368;
  double t3446;
  double t170;
  double t301;
  double t397;
  double t3575;
  double t3583;
  double t3591;
  double t3596;
  double t3682;
  double t3696;
  double t3753;
  double t3810;
  double t3480;
  double t3529;
  double t3537;
  double t3566;
  double t1857;
  double t2118;
  double t2122;
  double t3018;
  double t3058;
  double t3077;
  double t3081;
  double t3475;
  double t3823;
  double t3959;
  double t3989;
  double t4014;
  double t4089;
  double t4105;
  double t4106;
  double t4111;
  double t4117;
  double t4118;
  double t4119;
  double t4125;
  double t4129;
  double t4152;
  double t4196;
  double t4216;
  double t4461;
  double t4483;
  double t4525;
  double t4568;
  double t4600;
  double t4623;
  double t4626;
  double t4627;
  double t4214;
  double t4257;
  double t4294;
  double t4332;
  double t4341;
  double t4357;
  double t4377;
  double t4402;
  double t4415;
  double t4457;
  double t4546;
  double t4603;
  double t4630;
  double t4636;
  double t4648;
  double t4651;
  double t4735;
  double t4736;
  double t4777;
  double t4842;
  double t4891;
  double t4947;
  double t4948;
  double t4953;
  double t4984;
  double t5069;
  double t5081;
  double t5092;
  double t5026;
  double t5102;
  double t5103;
  double t5105;
  double t5230;
  double t5231;
  double t5257;
  double t5272;
  double t5324;
  double t5332;
  double t27;
  double t29;
  double t5508;
  double t5417;
  double t5673;
  double t5683;
  double t5694;
  double t5762;
  double t5763;
  double t5769;
  double t6115;
  double t6121;
  double t6125;
  double t6126;
  double t6130;
  double t6134;
  double t6138;
  double t6188;
  double t6190;
  double t6191;
  double t6201;
  double t6234;
  double t6279;
  double t6285;
  double t6335;
  double t6340;
  double t5788;
  double t5795;
  double t5806;
  double t5827;
  double t5973;
  double t5980;
  double t6013;
  double t6020;
  double t6048;
  double t6058;
  double t6072;
  double t6073;
  double t6626;
  double t6640;
  double t6651;
  double t6586;
  double t6623;
  double t6625;
  double t6674;
  double t6676;
  double t6678;
  double t6739;
  double t6740;
  double t6749;
  double t6716;
  double t6719;
  double t6726;
  double t6738;
  double t6768;
  double t6776;
  double t6788;
  double t6791;
  double t6803;
  double t6804;
  double t6820;
  double t6836;
  double t6888;
  double t6889;
  double t6893;
  double t6970;
  double t6972;
  double t6980;
  double t6984;
  double t6986;
  double t7008;
  double t7028;
  double t7031;
  double t7036;
  double t7044;
  double t7052;
  double t7070;
  double t7079;
  double t7088;
  double t7103;
  double t7104;
  double t7114;
  double t7092;
  double t7096;
  double t7102;
  double t7115;
  double t7118;
  double t7126;
  double t7162;
  double t7174;
  double t7176;
  double t7131;
  double t7148;
  double t7151;
  double t7157;
  double t7178;
  double t7185;
  double t7190;
  double t7192;
  double t7193;
  double t7197;
  double t7198;
  double t7199;
  double t7201;
  double t7208;
  double t7209;
  double t7258;
  double t7288;
  double t7297;
  double t7308;
  double t7312;
  double t7318;
  double t7324;
  double t7325;
  double t7298;
  double t7319;
  double t7326;
  double t7329;
  double t7333;
  double t7335;
  double t7337;
  double t7350;
  double t7400;
  double t7419;
  double t7458;
  double t7459;
  double t7472;
  double t7475;
  double t7486;
  double t7509;
  double t7447;
  double t7474;
  double t7589;
  double t7594;
  double t7665;
  double t7666;
  double t7667;
  double t7673;
  double t7865;
  double t7875;
  double t7876;
  double t7901;
  double t7332;
  double t7360;
  double t7378;
  double t7387;
  double t7390;
  double t7394;
  double t7760;
  double t7765;
  double t7791;
  double t7843;
  double t7854;
  double t8180;
  double t8225;
  double t8241;
  double t7949;
  double t8710;
  double t8723;
  double t8764;
  double t8984;
  double t8993;
  double t9013;
  double t9029;
  double t9086;
  double t9111;
  double t9118;
  double t8172;
  double t8240;
  double t8281;
  double t8291;
  double t8298;
  double t8300;
  double t8304;
  double t8305;
  double t9271;
  double t9275;
  double t9283;
  double t9259;
  double t9261;
  double t9264;
  double t9245;
  double t9249;
  double t9253;
  double t9254;
  double t9267;
  double t9284;
  double t9290;
  double t9297;
  double t9300;
  double t9301;
  double t9303;
  double t9304;
  double t9309;
  double t7698;
  double t7713;
  double t7718;
  double t7609;
  double t7676;
  double t7681;
  double t7925;
  double t9609;
  double t9612;
  double t9613;
  double t9621;
  double t9631;
  double t9649;
  double t9662;
  double t9663;
  double t9667;
  double t9615;
  double t9698;
  double t9699;
  double t9700;
  double t9681;
  double t9689;
  double t9707;
  double t9708;
  double t9709;
  double t9711;
  double t9712;
  double t9713;
  double t9719;
  double t9723;
  double t9724;
  double t10038;
  double t10040;
  double t10049;
  double t10055;
  double t10057;
  double t10058;
  double t10140;
  double t10141;
  double t10142;
  double t10146;
  double t10150;
  double t10159;
  double t10165;
  double t10171;
  double t10172;
  double t10174;
  double t10092;
  double t10103;
  double t10105;
  double t10069;
  double t9981;
  double t10005;
  double t10010;
  double t10251;
  double t10255;
  double t10256;
  double t10203;
  double t10217;
  double t10218;
  double t10223;
  double t10225;
  double t10229;
  double t10192;
  double t10193;
  double t10199;
  double t10230;
  double t10231;
  double t10232;
  double t10233;
  double t10258;
  double t10264;
  double t10265;
  double t10266;
  double t10267;
  double t10514;
  double t10515;
  double t10522;
  double t10564;
  double t10584;
  double t10588;
  double t10616;
  double t10636;
  double t10620;
  double t10619;
  double t10623;
  double t10624;
  double t10630;
  double t10643;
  double t10644;
  double t10645;
  double t10656;
  double t10657;
  double t10726;
  double t10734;
  double t10735;
  double t10746;
  double t10747;
  double t10748;
  double t10771;
  double t10754;
  double t10792;
  double t10793;
  double t10794;
  double t10795;
  double t10800;
  double t10802;
  double t10803;
  double t10804;
  double t10816;
  double t10817;
  double t10818;
  double t10819;
  double t10820;
  double t10823;
  double t10825;
  double t10826;
  double t10831;
  double t10832;
  double t10833;
  double t10846;
  double t10896;
  double t10897;
  double t10898;
  double t10901;
  double t10902;
  double t10906;
  double t10824;
  double t10848;
  double t10850;
  double t10852;
  double t10853;
  double t10859;
  double t10877;
  double t10888;
  double t10889;
  double t10867;
  double t10871;
  double t10893;
  double t10943;
  double t11010;
  double t11036;
  double t11076;
  double t11115;
  double t11117;
  double t11118;
  double t11119;
  double t11120;
  double t10810;
  double t10811;
  double t10812;
  double t10799;
  double t10805;
  double t10808;
  double t10936;
  double t10937;
  double t10938;
  double t10900;
  double t10910;
  double t10915;
  double t10942;
  double t11229;
  double t11233;
  double t11234;
  double t10872;
  double t11141;
  double t11142;
  double t11189;
  double t11256;
  double t11260;
  double t11261;
  double t11263;
  double t11264;
  double t11265;
  double t11131;
  double t11132;
  double t11133;
  double t11127;
  double t11128;
  double t11129;
  double t11124;
  double t11125;
  double t11130;
  double t11134;
  double t11135;
  double t11389;
  double t11390;
  double t11391;
  double t11393;
  double t11394;
  double t11395;
  double t11270;
  double t11271;
  double t11272;
  double t11243;
  double t11247;
  double t11250;
  double t11239;
  double t11266;
  double t11414;
  double t11415;
  double t11416;
  double t11269;
  double t11275;
  double t11406;
  double t11407;
  double t11410;
  double t11425;
  double t11426;
  double t11427;
  double t11429;
  double t11430;
  double t11431;
  double t11603;
  double t11607;
  double t11608;
  double t11609;
  double t11610;
  double t11611;
  double t11612;
  double t11613;
  double t11614;
  double t11616;
  double t11617;
  double t11620;
  double t11621;
  double t11622;
  double t11623;
  double t11638;
  double t11643;
  double t11645;
  double t11652;
  double t11654;
  double t11655;
  double t11661;
  double t11665;
  double t11666;
  double t11669;
  double t11670;
  double t11671;
  double t11672;
  double t11674;
  double t11675;
  double t11676;
  double t11673;
  double t11677;
  double t11678;
  double t11680;
  double t11681;
  double t11682;
  double t11683;
  double t11684;
  double t11685;
  double t11686;
  double t5411;
  double t59;
  double t5477;
  double t5639;
  double t11696;
  double t11697;
  double t11698;
  double t11701;
  double t11702;
  double t11703;
  double t5727;
  double t11723;
  double t11724;
  double t11725;
  double t11731;
  double t11732;
  double t11733;
  double t11736;
  double t11737;
  double t11738;
  double t11739;
  double t11740;
  double t11763;
  double t11769;
  double t11773;
  double t11779;
  double t5781;
  double t5785;
  double t11710;
  double t11713;
  double t11714;
  double t11716;
  double t11717;
  double t11719;
  double t5924;
  double t5927;
  double t5937;
  double t6025;
  double t6039;
  double t6040;
  double t11948;
  double t11949;
  double t11996;
  double t12005;
  double t12010;
  double t12012;
  double t12019;
  double t12021;
  double t12024;
  double t11910;
  double t11911;
  double t11912;
  double t11913;
  double t11920;
  double t11923;
  double t11928;
  double t11933;
  double t11935;
  double t11936;
  double t11937;
  double t11938;
  double t12053;
  double t12064;
  double t12095;
  double t12096;
  double t12097;
  double t12098;
  double t12099;
  double t12100;
  double t12102;
  double t12107;
  double t12108;
  double t12110;
  double t9946;
  double t9951;
  double t9956;
  double t12052;
  double t12135;
  double t9255;
  double t9291;
  double t9295;
  double t12270;
  double t12274;
  double t12392;
  double t12394;
  double t12412;
  double t12413;
  double t12457;
  double t12458;
  double t12464;
  double t12465;
  double t10776;
  double t10777;
  double t10778;
  double t10762;
  double t10763;
  double t10764;
  double t10741;
  double t12552;
  double t12587;
  double t11436;
  double t11437;
  double t11438;
  double t12586;
  double t12562;
  double t11126;
  double t11136;
  double t11137;
  double t12644;
  double t12647;
  double t11421;
  double t11422;
  double t11423;
  double t12651;
  double t12654;
  double t12823;
  double t12824;
  double t12825;
  double t12826;
  double t12827;
  double t12828;
  double t12866;
  double t12876;
  double t12877;
  double t12878;
  double t12882;
  double t12890;
  double t12892;
  double t12897;
  double t12899;
  double t12903;
  double t12907;
  double t12911;
  double t12912;
  double t12913;
  double t12914;
  double t12915;
  double t12916;
  double t12917;
  double t12944;
  double t12951;
  double t13025;
  double t13026;
  double t12922;
  double t12923;
  double t12924;
  double t12925;
  double t12920;
  double t12921;
  double t12926;
  double t13027;
  double t13028;
  double t13029;
  double t13030;
  double t13031;
  double t13032;
  double t13035;
  double t13036;
  double t13037;
  double t13042;
  double t13043;
  double t13044;
  double t13059;
  double t13060;
  double t13061;
  double t13064;
  double t13065;
  double t13066;
  double t13069;
  double t13070;
  double t13071;
  double t13072;
  double t13073;
  double t13074;
  double t13075;
  double t13076;
  double t13077;
  double t13049;
  double t13052;
  double t13053;
  double t13055;
  double t13056;
  double t13057;
  double t13267;
  double t13268;
  double t13269;
  double t13270;
  double t13271;
  double t13272;
  double t13273;
  double t13274;
  double t13275;
  double t13080;
  double t13081;
  double t13085;
  double t13159;
  double t13228;
  double t13229;
  double t13233;
  double t13236;
  double t13240;
  double t13242;
  double t13247;
  double t13249;
  double t13345;
  double t13347;
  double t13356;
  double t13357;
  double t13506;
  double t13512;
  double t13570;
  double t13571;
  double t13681;
  double t13688;
  double t13728;
  double t13729;
  double t13730;
  double t13731;
  double t13732;
  double t13733;
  double t13734;
  double t13720;
  double t13721;
  double t13722;
  double t13723;
  double t13724;
  double t13725;
  double t13726;
  double t13689;
  double t13680;
  double t13744;
  double t13747;
  double t13755;
  double t13759;
  double t13960;
  double t14023;
  double t14022;
  double t13961;
  double t14081;
  double t14084;
  double t14088;
  double t14091;
  t84 = Cos(var1[11]);
  t69 = Cos(var1[10]);
  t104 = -1. + t84;
  t49 = Sin(var1[9]);
  t89 = -1.*t84;
  t94 = 1. + t89;
  t99 = 1.6e-11*t94;
  t1036 = Sin(var1[11]);
  t74 = -1.*t69;
  t79 = 1. + t74;
  t109 = 1.6e-11*t104;
  t34 = Cos(var1[9]);
  t526 = -1.000000000016*t94;
  t838 = 1. + t526;
  t1024 = 0.004352*t838;
  t1037 = -0.9999910000159999*t1036;
  t1079 = t1024 + t1037;
  t410 = Sin(var1[10]);
  t1345 = -1. + t99;
  t1351 = 4.e-6*t1345;
  t1511 = 3.999964e-6*t94;
  t1600 = -1.7408e-8*t1036;
  t1632 = t1351 + t1511 + t1600;
  t1749 = 0.999991*t84;
  t1796 = 0.004352*t1036;
  t1800 = t109 + t1749 + t1796;
  t39 = -1.*t34;
  t41 = 1. + t39;
  t44 = 0.15121*t41;
  t54 = -0.15121*t49;
  t1180 = -1. + t69;
  t1246 = 1.6e-11*t1180;
  t1247 = 1. + t1246;
  t2255 = -1.26e-8*var1[11];
  t2282 = 1. + t109;
  t2298 = -0.14871*t2282;
  t2315 = -1.64779999997447e-7*t94;
  t2376 = -1.59556e-7*t104;
  t2390 = -1.199987999968e-6*t1036;
  t2401 = t2255 + t2298 + t2315 + t2376 + t2390;
  t1957 = -1.000000000016*t79;
  t1976 = 1. + t1957;
  t2492 = 0.803147*t838;
  t2494 = 0.50315000001605*t94;
  t2559 = 0.00130540515936178*t1036;
  t2607 = t2492 + t2494 + t2559;
  t2728 = -5.04e-14*var1[11];
  t2750 = -0.03988959484*t94;
  t2766 = 6.38224e-13*t104;
  t2798 = -0.041195*t84;
  t2821 = 0.299996999992*t1036;
  t2907 = t2728 + t2750 + t2766 + t2798 + t2821;
  t1096 = -4.e-6*t410*t1079;
  t1633 = t1247*t1632;
  t1833 = 4.e-6*t79*t1800;
  t1846 = 0. + t1096 + t1633 + t1833;
  t1990 = t1976*t1079;
  t2013 = 4.e-6*t410*t1632;
  t2022 = -1.*t410*t1800;
  t2047 = 0. + t1990 + t2013 + t2022;
  t2135 = -1.2484e-7*var1[10];
  t2184 = 2.479936e-18*t79;
  t2199 = -1.54996e-7*t1180;
  t2233 = 1.124840000016e-6*t410;
  t2476 = t1247*t2401;
  t2724 = -4.e-6*t410*t2607;
  t2917 = 4.e-6*t79*t2907;
  t2932 = t2135 + t2184 + t2199 + t2233 + t2476 + t2724 + t2917;
  t2946 = 0.281210000008499*t79;
  t2950 = -0.03874900000062*t410;
  t2953 = 4.e-6*t410*t2401;
  t2955 = t1976*t2607;
  t2963 = -1.*t410*t2907;
  t2974 = t2946 + t2950 + t2953 + t2955 + t2963;
  t114 = -1. + t99 + t109;
  t171 = 4.e-6*t104;
  t190 = -4.e-6*t84;
  t218 = t171 + t190;
  t2936 = -1.*t49*t2932;
  t2987 = t34*t2974;
  t2991 = t44 + t54 + t2936 + t2987;
  t3999 = t1247*t114;
  t4002 = 4.e-6*t79*t218;
  t4011 = t3999 + t4002;
  t4053 = 4.e-6*t114*t410;
  t4056 = -1.*t218*t410;
  t4088 = t4053 + t4056;
  t3093 = -0.15121*t41;
  t3252 = t34*t2932;
  t3368 = t49*t2974;
  t3446 = t3093 + t54 + t3252 + t3368;
  t170 = 4.e-6*t79*t114;
  t301 = t69*t218;
  t397 = t170 + t301;
  t3575 = -4.9936e-13*var1[10];
  t3583 = -0.038749*t79;
  t3591 = 6.19984e-13*t1180;
  t3596 = -0.281210000004*t410;
  t3682 = 4.e-6*t79*t2401;
  t3696 = t410*t2607;
  t3753 = t69*t2907;
  t3810 = 0. + t3575 + t3583 + t3591 + t3596 + t3682 + t3696 + t3753;
  t3480 = t410*t1079;
  t3529 = 4.e-6*t79*t1632;
  t3537 = t69*t1800;
  t3566 = 0. + t3480 + t3529 + t3537;
  t1857 = -1.*t49*t1846;
  t2118 = t34*t2047;
  t2122 = 0. + t1857 + t2118;
  t3018 = -1.*t2122*t2991;
  t3058 = t34*t1846;
  t3077 = t49*t2047;
  t3081 = 0. + t3058 + t3077;
  t3475 = -1.*t3081*t3446;
  t3823 = -1.*t3566*t3810;
  t3959 = t3018 + t3475 + t3823;
  t3989 = t397*t3959;
  t4014 = -1.*t4011*t49;
  t4089 = t34*t4088;
  t4105 = t4014 + t4089;
  t4106 = t4105*t2991;
  t4111 = t34*t4011;
  t4117 = t49*t4088;
  t4118 = t4111 + t4117;
  t4119 = t4118*t3446;
  t4125 = t397*t3810;
  t4129 = t4106 + t4119 + t4125;
  t4152 = t4129*t3566;
  t4196 = t3989 + t4152;
  t4216 = t3575 + t3583 + t3591 + t3596 + t3682 + t3696 + t3753;
  t4461 = -1.7408e-8*t94;
  t4483 = -3.999964e-6*t1036;
  t4525 = t4461 + t4483;
  t4568 = 0.999991*t838;
  t4600 = t4568 + t1796;
  t4623 = -0.004352*t84;
  t4626 = 0.999991*t1036;
  t4627 = t4623 + t4626;
  t4214 = -1.*t1846*t2932;
  t4257 = -1.*t3566*t4216;
  t4294 = -1.*t2047*t2974;
  t4332 = t4214 + t4257 + t4294;
  t4341 = t397*t4332;
  t4357 = t4011*t2932;
  t4377 = t397*t4216;
  t4402 = t4088*t2974;
  t4415 = t4357 + t4377 + t4402;
  t4457 = t4415*t3566;
  t4546 = t1247*t4525;
  t4603 = -4.e-6*t410*t4600;
  t4630 = 4.e-6*t79*t4627;
  t4636 = 0. + t4546 + t4603 + t4630;
  t4648 = -0.15121*t4636;
  t4651 = 4.e-6*t410*t4525;
  t4735 = t1976*t4600;
  t4736 = -1.*t410*t4627;
  t4777 = 0. + t4651 + t4735 + t4736;
  t4842 = -0.15121*t4777;
  t4891 = t4341 + t4457 + t4648 + t4842;
  t4947 = -1.*t2401*t1632;
  t4948 = -1.*t1079*t2607;
  t4953 = -1.*t1800*t2907;
  t4984 = t4947 + t4948 + t4953;
  t5069 = t114*t2401;
  t5081 = t218*t2907;
  t5092 = t5069 + t5081;
  t5026 = -1.*t218*t4984;
  t5102 = -1.*t5092*t1800;
  t5103 = t5026 + t5102;
  t5105 = 4.e-6*t5103;
  t5230 = -1.*t114*t4984;
  t5231 = 1.e-6*t4525;
  t5257 = -1.*t5092*t1632;
  t5272 = -0.038749*t4600;
  t5324 = -0.28121*t4627;
  t5332 = t5105 + t5230 + t5231 + t5257 + t5272 + t5324;
  t27 = Cos(var1[4]);
  t29 = Cos(var1[5]);
  t5508 = Sin(var1[5]);
  t5417 = Sin(var1[4]);
  t5673 = -1.*t27*t29*t49;
  t5683 = -1.*t34*t27*t5508;
  t5694 = t5673 + t5683;
  t5762 = t34*t27*t29;
  t5763 = -1.*t27*t49*t5508;
  t5769 = t5762 + t5763;
  t6115 = 4.e-6*t79*t4525;
  t6121 = t410*t4600;
  t6125 = t69*t4627;
  t6126 = 0. + t6115 + t6121 + t6125;
  t6130 = t6126*t5417;
  t6134 = -1.*t49*t4636;
  t6138 = t34*t4777;
  t6188 = 0. + t6134 + t6138;
  t6190 = t29*t6188;
  t6191 = t34*t4636;
  t6201 = t49*t4777;
  t6234 = 0. + t6191 + t6201;
  t6279 = -1.*t6234*t5508;
  t6285 = 0. + t6190 + t6279;
  t6335 = t27*t6285;
  t6340 = 0. + t6130 + t6335;
  t5788 = t410*t5417;
  t5795 = -4.e-6*t410*t5694;
  t5806 = t1976*t5769;
  t5827 = t5788 + t5795 + t5806;
  t5973 = t69*t5417;
  t5980 = 4.e-6*t79*t5694;
  t6013 = -1.*t410*t5769;
  t6020 = t5973 + t5980 + t6013;
  t6048 = 4.e-6*t79*t5417;
  t6058 = t1247*t5694;
  t6072 = 4.e-6*t410*t5769;
  t6073 = t6048 + t6058 + t6072;
  t6626 = t29*t4118;
  t6640 = t4105*t5508;
  t6651 = t6626 + t6640;
  t6586 = t29*t3081;
  t6623 = t2122*t5508;
  t6625 = 0. + t6586 + t6623;
  t6674 = t29*t3446;
  t6676 = t2991*t5508;
  t6678 = 0. + t6674 + t6676;
  t6739 = t29*t2991;
  t6740 = -1.*t3446*t5508;
  t6749 = 0. + t6739 + t6740;
  t6716 = t6651*t6678;
  t6719 = t29*t4105;
  t6726 = -1.*t4118*t5508;
  t6738 = t6719 + t6726;
  t6768 = t6738*t6749;
  t6776 = t4125 + t6716 + t6768;
  t6788 = t6625*t6776;
  t6791 = -1.*t6625*t6678;
  t6803 = t29*t2122;
  t6804 = -1.*t3081*t5508;
  t6820 = 0. + t6803 + t6804;
  t6836 = -1.*t6820*t6749;
  t6888 = t3823 + t6791 + t6836;
  t6889 = t6651*t6888;
  t6893 = t6788 + t6889;
  t6970 = Sin(var1[3]);
  t6972 = t29*t6234;
  t6980 = t6188*t5508;
  t6984 = 0. + t6972 + t6980;
  t6986 = t6970*t6984;
  t7008 = Cos(var1[3]);
  t7028 = t27*t6126;
  t7031 = -1.*t5417*t6285;
  t7036 = 0. + t7028 + t7031;
  t7044 = t7008*t7036;
  t7052 = 0. + t6986 + t7044;
  t7070 = t7008*t6984;
  t7079 = -1.*t6970*t7036;
  t7088 = 0. + t7070 + t7079;
  t7103 = t397*t5417;
  t7104 = t27*t6738;
  t7114 = t7103 + t7104;
  t7092 = t3566*t5417;
  t7096 = t27*t6820;
  t7102 = 0. + t7092 + t7096;
  t7115 = t3810*t5417;
  t7118 = t27*t6749;
  t7126 = 0. + t7115 + t7118;
  t7162 = t27*t3810;
  t7174 = -1.*t5417*t6749;
  t7176 = 0. + t7162 + t7174;
  t7131 = t7114*t7126;
  t7148 = t397*t27;
  t7151 = -1.*t5417*t6738;
  t7157 = t7148 + t7151;
  t7178 = t7157*t7176;
  t7185 = t6716 + t7131 + t7178;
  t7190 = t7102*t7185;
  t7192 = -1.*t7102*t7126;
  t7193 = t27*t3566;
  t7197 = -1.*t5417*t6820;
  t7198 = 0. + t7193 + t7197;
  t7199 = -1.*t7198*t7176;
  t7201 = t6791 + t7192 + t7199;
  t7208 = t7114*t7201;
  t7209 = t7190 + t7208;
  t7258 = 0.00130540515936178*t84;
  t7288 = -0.2999969999968001*t1036;
  t7297 = t7258 + t7288;
  t7308 = -1.199987999968e-6*t84;
  t7312 = -5.2216206374471e-9*t1036;
  t7318 = -1.26e-8 + t7308 + t7312;
  t7324 = 0.299996999992*t84;
  t7325 = -5.04e-14 + t7324 + t2559;
  t7298 = -4.e-6*t410*t7297;
  t7319 = t1247*t7318;
  t7326 = 4.e-6*t79*t7325;
  t7329 = t7298 + t7319 + t7326;
  t7333 = t1976*t7297;
  t7335 = 4.e-6*t410*t7318;
  t7337 = -1.*t410*t7325;
  t7350 = t7333 + t7335 + t7337;
  t7400 = 0.004352*t84;
  t7419 = t7400 + t1037;
  t7458 = -0.9999910000159999*t84;
  t7459 = -0.00435200000006963*t1036;
  t7472 = t7458 + t7459;
  t7475 = -1.7408e-8*t84;
  t7486 = 3.999964000064e-6*t1036;
  t7509 = t7475 + t7486;
  t7447 = 4.e-6*t79*t7419;
  t7474 = -4.e-6*t410*t7472;
  t7589 = t1247*t7509;
  t7594 = t7447 + t7474 + t7589;
  t7665 = -1.*t410*t7419;
  t7666 = t1976*t7472;
  t7667 = 4.e-6*t410*t7509;
  t7673 = t7665 + t7666 + t7667;
  t7865 = t69*t7419;
  t7875 = t410*t7472;
  t7876 = 4.e-6*t79*t7509;
  t7901 = t7865 + t7875 + t7876;
  t7332 = -1.*t49*t7329;
  t7360 = t34*t7350;
  t7378 = t7332 + t7360;
  t7387 = t34*t7329;
  t7390 = t49*t7350;
  t7394 = t7387 + t7390;
  t7760 = t410*t7297;
  t7765 = 4.e-6*t79*t7318;
  t7791 = t69*t7325;
  t7843 = t7760 + t7765 + t7791;
  t7854 = -1.*t7843*t3566;
  t8180 = -3.999964e-6*t84;
  t8225 = t8180 + t1600;
  t8241 = t1749 + t1796;
  t7949 = t397*t7843;
  t8710 = -1.*t1079*t7297;
  t8723 = -1.*t1632*t7318;
  t8764 = -1.*t2401*t7509;
  t8984 = -1.*t7472*t2607;
  t8993 = -1.*t7325*t1800;
  t9013 = -1.*t7419*t2907;
  t9029 = t8710 + t8723 + t8764 + t8984 + t8993 + t9013;
  t9086 = t114*t7318;
  t9111 = t218*t7325;
  t9118 = t9086 + t9111;
  t8172 = -4.e-6*t410*t7419;
  t8240 = t1247*t8225;
  t8281 = 4.e-6*t79*t8241;
  t8291 = t8172 + t8240 + t8281;
  t8298 = t1976*t7419;
  t8300 = 4.e-6*t410*t8225;
  t8304 = -1.*t410*t8241;
  t8305 = t8298 + t8300 + t8304;
  t9271 = t34*t8291;
  t9275 = t49*t8305;
  t9283 = t9271 + t9275;
  t9259 = -1.*t49*t8291;
  t9261 = t34*t8305;
  t9264 = t9259 + t9261;
  t9245 = t410*t7419;
  t9249 = 4.e-6*t79*t8225;
  t9253 = t69*t8241;
  t9254 = t9245 + t9249 + t9253;
  t9267 = t29*t9264;
  t9284 = -1.*t9283*t5508;
  t9290 = t9267 + t9284;
  t9297 = t29*t9283;
  t9300 = t9264*t5508;
  t9301 = t9297 + t9300;
  t9303 = t27*t9254;
  t9304 = -1.*t5417*t9290;
  t9309 = t9303 + t9304;
  t7698 = t34*t7594;
  t7713 = t49*t7673;
  t7718 = t7698 + t7713;
  t7609 = -1.*t49*t7594;
  t7676 = t34*t7673;
  t7681 = t7609 + t7676;
  t7925 = -1.*t7901*t3810;
  t9609 = t29*t7394;
  t9612 = t7378*t5508;
  t9613 = t9609 + t9612;
  t9621 = t29*t7378;
  t9631 = -1.*t7394*t5508;
  t9649 = t9621 + t9631;
  t9662 = t29*t7718;
  t9663 = t7681*t5508;
  t9667 = t9662 + t9663;
  t9615 = t6651*t9613;
  t9698 = t29*t7681;
  t9699 = -1.*t7718*t5508;
  t9700 = t9698 + t9699;
  t9681 = -1.*t9613*t6625;
  t9689 = -1.*t9667*t6678;
  t9707 = t7843*t5417;
  t9708 = t27*t9649;
  t9709 = t9707 + t9708;
  t9711 = t27*t7843;
  t9712 = -1.*t5417*t9649;
  t9713 = t9711 + t9712;
  t9719 = t7901*t5417;
  t9723 = t27*t9700;
  t9724 = t9719 + t9723;
  t10038 = -0.15121*t34;
  t10040 = t10038 + t54 + t2936 + t2987;
  t10049 = 0.15121*t49;
  t10055 = -1.*t34*t2932;
  t10057 = -1.*t49*t2974;
  t10058 = t10038 + t10049 + t10055 + t10057;
  t10140 = -1.*t34*t4636;
  t10141 = -1.*t49*t4777;
  t10142 = t10140 + t10141;
  t10146 = t29*t10142;
  t10150 = t6134 + t6138;
  t10159 = -1.*t10150*t5508;
  t10165 = t10146 + t10159;
  t10171 = t29*t10150;
  t10172 = t10142*t5508;
  t10174 = t10171 + t10172;
  t10092 = -1.*t34*t4011;
  t10103 = -1.*t49*t4088;
  t10105 = t10092 + t10103;
  t10069 = t1857 + t2118;
  t9981 = -1.*t34*t1846;
  t10005 = -1.*t49*t2047;
  t10010 = t9981 + t10005;
  t10251 = t29*t10069;
  t10255 = t10010*t5508;
  t10256 = t10251 + t10255;
  t10203 = t29*t10058;
  t10217 = -1.*t10040*t5508;
  t10218 = t10203 + t10217;
  t10223 = t29*t10040;
  t10225 = t10058*t5508;
  t10229 = t10223 + t10225;
  t10192 = t10105*t5508;
  t10193 = t6719 + t10192;
  t10199 = t10193*t6678;
  t10230 = t6651*t10229;
  t10231 = t29*t10105;
  t10232 = -1.*t4105*t5508;
  t10233 = t10231 + t10232;
  t10258 = -1.*t10256*t6678;
  t10264 = -1.*t6625*t10229;
  t10265 = t29*t10010;
  t10266 = -1.*t10069*t5508;
  t10267 = t10265 + t10266;
  t10514 = -1.*t29*t6234;
  t10515 = -1.*t6188*t5508;
  t10522 = t10514 + t10515;
  t10564 = t6190 + t6279;
  t10584 = -1.*t29*t3446;
  t10588 = -1.*t2991*t5508;
  t10616 = t10584 + t10588;
  t10636 = t6803 + t6804;
  t10620 = t6739 + t6740;
  t10619 = t6738*t6678;
  t10623 = t6651*t10620;
  t10624 = -1.*t29*t4118;
  t10630 = t10624 + t10232;
  t10643 = -1.*t10636*t6678;
  t10644 = -1.*t6625*t10620;
  t10645 = -1.*t29*t3081;
  t10656 = -1.*t2122*t5508;
  t10657 = t10645 + t10656;
  t10726 = -1.*t6126*t5417;
  t10734 = -1.*t27*t6285;
  t10735 = t10726 + t10734;
  t10746 = -1.*t3810*t5417;
  t10747 = -1.*t27*t6749;
  t10748 = t10746 + t10747;
  t10771 = t7193 + t7197;
  t10754 = t7162 + t7174;
  t10792 = -1.000000000016*t410*t1079;
  t10793 = 4.e-6*t69*t1632;
  t10794 = -1.*t69*t1800;
  t10795 = t10792 + t10793 + t10794;
  t10800 = -4.e-6*t69*t1079;
  t10802 = -1.6e-11*t410*t1632;
  t10803 = 4.e-6*t410*t1800;
  t10804 = t10800 + t10802 + t10803;
  t10816 = -0.03874900000062*t69;
  t10817 = 0.281210000008499*t410;
  t10818 = 4.e-6*t69*t2401;
  t10819 = -1.000000000016*t410*t2607;
  t10820 = -1.*t69*t2907;
  t10823 = t10816 + t10817 + t10818 + t10819 + t10820;
  t10825 = 1.124840000016e-6*t69;
  t10826 = 1.5499600000248e-7*t410;
  t10831 = -1.6e-11*t410*t2401;
  t10832 = -4.e-6*t69*t2607;
  t10833 = 4.e-6*t410*t2907;
  t10846 = -1.2484e-7 + t10825 + t10826 + t10831 + t10832 + t10833;
  t10896 = 4.e-6*t69*t114;
  t10897 = -1.*t69*t218;
  t10898 = t10896 + t10897;
  t10901 = -1.6e-11*t114*t410;
  t10902 = 4.e-6*t218*t410;
  t10906 = t10901 + t10902;
  t10824 = t49*t10823;
  t10848 = t34*t10846;
  t10850 = t10824 + t10848;
  t10852 = t34*t10823;
  t10853 = -1.*t49*t10846;
  t10859 = t10852 + t10853;
  t10877 = -0.281210000004*t69;
  t10888 = t69*t2607;
  t10889 = -4.9936e-13 + t10877 + t2950 + t2953 + t10888 + t2963;
  t10867 = t69*t1079;
  t10871 = t10867 + t2013 + t2022;
  t10893 = -1.*t3566*t10889;
  t10943 = t397*t10889;
  t11010 = 4.e-6*t69*t4525;
  t11036 = -1.000000000016*t410*t4600;
  t11076 = -1.*t69*t4627;
  t11115 = t11010 + t11036 + t11076;
  t11117 = -1.6e-11*t410*t4525;
  t11118 = -4.e-6*t69*t4600;
  t11119 = 4.e-6*t410*t4627;
  t11120 = t11117 + t11118 + t11119;
  t10810 = t49*t10795;
  t10811 = t34*t10804;
  t10812 = t10810 + t10811;
  t10799 = t34*t10795;
  t10805 = -1.*t49*t10804;
  t10808 = t10799 + t10805;
  t10936 = t10898*t49;
  t10937 = t34*t10906;
  t10938 = t10936 + t10937;
  t10900 = t34*t10898;
  t10910 = -1.*t49*t10906;
  t10915 = t10900 + t10910;
  t10942 = t4088*t3810;
  t11229 = t29*t10938;
  t11233 = t10915*t5508;
  t11234 = t11229 + t11233;
  t10872 = -1.*t10871*t3810;
  t11141 = t29*t10812;
  t11142 = t10808*t5508;
  t11189 = t11141 + t11142;
  t11256 = t29*t10859;
  t11260 = -1.*t10850*t5508;
  t11261 = t11256 + t11260;
  t11263 = t29*t10850;
  t11264 = t10859*t5508;
  t11265 = t11263 + t11264;
  t11131 = t49*t11115;
  t11132 = t34*t11120;
  t11133 = t11131 + t11132;
  t11127 = t34*t11115;
  t11128 = -1.*t49*t11120;
  t11129 = t11127 + t11128;
  t11124 = t69*t4600;
  t11125 = t4651 + t11124 + t4736;
  t11130 = t29*t11129;
  t11134 = -1.*t11133*t5508;
  t11135 = t11130 + t11134;
  t11389 = t29*t11133;
  t11390 = t11129*t5508;
  t11391 = t11389 + t11390;
  t11393 = t27*t11125;
  t11394 = -1.*t5417*t11135;
  t11395 = t11393 + t11394;
  t11270 = t29*t10808;
  t11271 = -1.*t10812*t5508;
  t11272 = t11270 + t11271;
  t11243 = t29*t10915;
  t11247 = -1.*t10938*t5508;
  t11250 = t11243 + t11247;
  t11239 = t11234*t6678;
  t11266 = t6651*t11265;
  t11414 = t4088*t5417;
  t11415 = t27*t11250;
  t11416 = t11414 + t11415;
  t11269 = -1.*t11189*t6678;
  t11275 = -1.*t6625*t11265;
  t11406 = t10871*t5417;
  t11407 = t27*t11272;
  t11410 = t11406 + t11407;
  t11425 = t10889*t5417;
  t11426 = t27*t11261;
  t11427 = t11425 + t11426;
  t11429 = t27*t10889;
  t11430 = -1.*t5417*t11261;
  t11431 = t11429 + t11430;
  t11603 = t2991*t6188;
  t11607 = t3446*t6234;
  t11608 = t3810*t6126;
  t11609 = t11603 + t11607 + t11608;
  t11610 = t397*t11609;
  t11611 = -1.*t4105*t2991;
  t11612 = -1.*t4118*t3446;
  t11613 = -1.*t397*t3810;
  t11614 = t11611 + t11612 + t11613;
  t11616 = t11614*t6126;
  t11617 = t11610 + t11616;
  t11620 = t2932*t4636;
  t11621 = t4216*t6126;
  t11622 = t2974*t4777;
  t11623 = t11620 + t11621 + t11622;
  t11638 = t397*t11623;
  t11643 = -0.15121*t1846;
  t11645 = -0.15121*t2047;
  t11652 = -1.*t4011*t2932;
  t11654 = -1.*t397*t4216;
  t11655 = -1.*t4088*t2974;
  t11661 = t11652 + t11654 + t11655;
  t11665 = t11661*t6126;
  t11666 = t11638 + t11643 + t11645 + t11665;
  t11669 = t4525*t2401;
  t11670 = t2607*t4600;
  t11671 = t2907*t4627;
  t11672 = t11669 + t11670 + t11671;
  t11674 = -1.*t114*t2401;
  t11675 = -1.*t218*t2907;
  t11676 = t11674 + t11675;
  t11673 = -1.*t218*t11672;
  t11677 = -1.*t11676*t4627;
  t11678 = t11673 + t11677;
  t11680 = 4.e-6*t11678;
  t11681 = -1.*t114*t11672;
  t11682 = -0.038749*t1079;
  t11683 = -1.*t11676*t4525;
  t11684 = 1.e-6*t1632;
  t11685 = -0.28121*t1800;
  t11686 = t11680 + t11681 + t11682 + t11683 + t11684 + t11685;
  t5411 = t3575 + t3583 + t3591 + t3596;
  t59 = t44 + t54;
  t5477 = t3093 + t54;
  t5639 = t2135 + t2184 + t2199 + t2233;
  t11696 = t29*t6970*t5417;
  t11697 = t7008*t5508;
  t11698 = t11696 + t11697;
  t11701 = t7008*t29;
  t11702 = -1.*t6970*t5417*t5508;
  t11703 = t11701 + t11702;
  t5727 = t2946 + t2950;
  t11723 = t6970*t6625;
  t11724 = t7008*t7198;
  t11725 = 0. + t11723 + t11724;
  t11731 = t7008*t6625;
  t11732 = -1.*t6970*t7198;
  t11733 = 0. + t11731 + t11732;
  t11736 = -1.*t6651*t6678;
  t11737 = -1.*t6738*t6749;
  t11738 = t11613 + t11736 + t11737;
  t11739 = t6984*t11738;
  t11740 = t6678*t6984;
  t11763 = t6749*t6285;
  t11769 = t11608 + t11740 + t11763;
  t11773 = t6651*t11769;
  t11779 = t11739 + t11773;
  t5781 = -0.0398890000006382*t1036;
  t5785 = t2494 + t5781;
  t11710 = -1.*t49*t11698;
  t11713 = t34*t11703;
  t11714 = t11710 + t11713;
  t11716 = t34*t11698;
  t11717 = t49*t11703;
  t11719 = t11716 + t11717;
  t5924 = -0.039889*t94;
  t5927 = -0.503150000008*t1036;
  t5937 = t2728 + t5924 + t2766 + t5927;
  t6025 = 2.552896e-18*t94;
  t6039 = 2.012600000032e-6*t1036;
  t6040 = t2255 + t6025 + t2376 + t6039;
  t11948 = -1.*t7114*t7126;
  t11949 = -1.*t7157*t7176;
  t11996 = t11736 + t11948 + t11949;
  t12005 = t6340*t11996;
  t12010 = t7126*t6340;
  t12012 = t7176*t7036;
  t12019 = t11740 + t12010 + t12012;
  t12021 = t7114*t12019;
  t12024 = t12005 + t12021;
  t11910 = -1.*t27*t410*t6970;
  t11911 = -4.e-6*t410*t11714;
  t11912 = t1976*t11719;
  t11913 = t11910 + t11911 + t11912;
  t11920 = -1.*t69*t27*t6970;
  t11923 = 4.e-6*t79*t11714;
  t11928 = -1.*t410*t11719;
  t11933 = t11920 + t11923 + t11928;
  t11935 = -4.e-6*t79*t27*t6970;
  t11936 = t1247*t11714;
  t11937 = 4.e-6*t410*t11719;
  t11938 = t11935 + t11936 + t11937;
  t12053 = t7843*t6126;
  t12064 = -1.*t397*t7843;
  t12095 = t2401*t8225;
  t12096 = t4525*t7318;
  t12097 = t7419*t2607;
  t12098 = t7297*t4600;
  t12099 = t8241*t2907;
  t12100 = t7325*t4627;
  t12102 = t12095 + t12096 + t12097 + t12098 + t12099 + t12100;
  t12107 = -1.*t114*t7318;
  t12108 = -1.*t218*t7325;
  t12110 = t12107 + t12108;
  t9946 = t27*t7901;
  t9951 = -1.*t5417*t9700;
  t9956 = t9946 + t9951;
  t12052 = t9254*t3810;
  t12135 = -1.*t6651*t9613;
  t9255 = t9254*t5417;
  t9291 = t27*t9290;
  t9295 = t9255 + t9291;
  t12270 = t9301*t6678;
  t12274 = t9613*t6984;
  t12392 = -1.*t10193*t6678;
  t12394 = -1.*t6651*t10229;
  t12412 = t10229*t6984;
  t12413 = t6678*t10174;
  t12457 = -1.*t6738*t6678;
  t12458 = -1.*t6651*t10620;
  t12464 = t10620*t6984;
  t12465 = t6678*t10564;
  t10776 = -1.*t3566*t5417;
  t10777 = -1.*t27*t6820;
  t10778 = t10776 + t10777;
  t10762 = -1.*t397*t5417;
  t10763 = -1.*t27*t6738;
  t10764 = t10762 + t10763;
  t10741 = t7028 + t7031;
  t12552 = t10889*t6126;
  t12587 = -1.*t397*t10889;
  t11436 = t27*t10871;
  t11437 = -1.*t5417*t11272;
  t11438 = t11436 + t11437;
  t12586 = -1.*t4088*t3810;
  t12562 = t3810*t11125;
  t11126 = t11125*t5417;
  t11136 = t27*t11135;
  t11137 = t11126 + t11136;
  t12644 = -1.*t11234*t6678;
  t12647 = -1.*t6651*t11265;
  t11421 = t27*t4088;
  t11422 = -1.*t5417*t11250;
  t11423 = t11421 + t11422;
  t12651 = t11265*t6984;
  t12654 = t6678*t11391;
  t12823 = -1.*t2991*t6188;
  t12824 = -1.*t3446*t6234;
  t12825 = -1.*t3810*t6126;
  t12826 = t12823 + t12824 + t12825;
  t12827 = t12826*t3566;
  t12828 = t2122*t2991;
  t12866 = t3081*t3446;
  t12876 = t3566*t3810;
  t12877 = t12828 + t12866 + t12876;
  t12878 = t12877*t6126;
  t12882 = t12827 + t12878;
  t12890 = -0.15121*t4011;
  t12892 = -0.15121*t4088;
  t12897 = -1.*t2932*t4636;
  t12899 = -1.*t4216*t6126;
  t12903 = -1.*t2974*t4777;
  t12907 = t12897 + t12899 + t12903;
  t12911 = t12907*t3566;
  t12912 = t1846*t2932;
  t12913 = t3566*t4216;
  t12914 = t2047*t2974;
  t12915 = t12912 + t12913 + t12914;
  t12916 = t12915*t6126;
  t12917 = t12890 + t12892 + t12911 + t12916;
  t12944 = t2401*t1632;
  t12951 = t1079*t2607;
  t13025 = t1800*t2907;
  t13026 = t12944 + t12951 + t13025;
  t12922 = -1.*t4525*t2401;
  t12923 = -1.*t2607*t4600;
  t12924 = -1.*t2907*t4627;
  t12925 = t12922 + t12923 + t12924;
  t12920 = 1.e-6*t114;
  t12921 = -0.28121*t218;
  t12926 = -1.*t12925*t1800;
  t13027 = -1.*t13026*t4627;
  t13028 = t12926 + t13027;
  t13029 = 4.e-6*t13028;
  t13030 = -1.*t13026*t4525;
  t13031 = -1.*t12925*t1632;
  t13032 = t12920 + t12921 + t13029 + t13030 + t13031;
  t13035 = -1.*t7008*t29*t5417;
  t13036 = t6970*t5508;
  t13037 = t13035 + t13036;
  t13042 = t29*t6970;
  t13043 = t7008*t5417*t5508;
  t13044 = t13042 + t13043;
  t13059 = t6970*t6651;
  t13060 = t7008*t7157;
  t13061 = t13059 + t13060;
  t13064 = t7008*t6651;
  t13065 = -1.*t6970*t7157;
  t13066 = t13064 + t13065;
  t13069 = t6625*t6678;
  t13070 = t6820*t6749;
  t13071 = t12876 + t13069 + t13070;
  t13072 = t6984*t13071;
  t13073 = -1.*t6678*t6984;
  t13074 = -1.*t6749*t6285;
  t13075 = t12825 + t13073 + t13074;
  t13076 = t6625*t13075;
  t13077 = t13072 + t13076;
  t13049 = -1.*t49*t13037;
  t13052 = t34*t13044;
  t13053 = t13049 + t13052;
  t13055 = t34*t13037;
  t13056 = t49*t13044;
  t13057 = t13055 + t13056;
  t13267 = t7102*t7126;
  t13268 = t7198*t7176;
  t13269 = t13069 + t13267 + t13268;
  t13270 = t6340*t13269;
  t13271 = -1.*t7126*t6340;
  t13272 = -1.*t7176*t7036;
  t13273 = t13073 + t13271 + t13272;
  t13274 = t7102*t13273;
  t13275 = t13270 + t13274;
  t13080 = t7008*t27*t410;
  t13081 = -4.e-6*t410*t13053;
  t13085 = t1976*t13057;
  t13159 = t13080 + t13081 + t13085;
  t13228 = t69*t7008*t27;
  t13229 = 4.e-6*t79*t13053;
  t13233 = -1.*t410*t13057;
  t13236 = t13228 + t13229 + t13233;
  t13240 = 4.e-6*t79*t7008*t27;
  t13242 = t1247*t13053;
  t13247 = 4.e-6*t410*t13057;
  t13249 = t13240 + t13242 + t13247;
  t13345 = t10256*t6678;
  t13347 = t6625*t10229;
  t13356 = -1.*t10229*t6984;
  t13357 = -1.*t6678*t10174;
  t13506 = t10636*t6678;
  t13512 = t6625*t10620;
  t13570 = -1.*t10620*t6984;
  t13571 = -1.*t6678*t10564;
  t13681 = -1.*t7843*t6126;
  t13688 = t7843*t3566;
  t13728 = t1079*t7297;
  t13729 = t1632*t7318;
  t13730 = t2401*t7509;
  t13731 = t7472*t2607;
  t13732 = t7325*t1800;
  t13733 = t7419*t2907;
  t13734 = t13728 + t13729 + t13730 + t13731 + t13732 + t13733;
  t13720 = -1.*t2401*t8225;
  t13721 = -1.*t4525*t7318;
  t13722 = -1.*t7419*t2607;
  t13723 = -1.*t7297*t4600;
  t13724 = -1.*t8241*t2907;
  t13725 = -1.*t7325*t4627;
  t13726 = t13720 + t13721 + t13722 + t13723 + t13724 + t13725;
  t13689 = t7901*t3810;
  t13680 = -1.*t9254*t3810;
  t13744 = t9613*t6625;
  t13747 = t9667*t6678;
  t13755 = -1.*t9301*t6678;
  t13759 = -1.*t9613*t6984;
  t13960 = -1.*t10889*t6126;
  t14023 = t3566*t10889;
  t14022 = t10871*t3810;
  t13961 = -1.*t3810*t11125;
  t14081 = t11189*t6678;
  t14084 = t6625*t11265;
  t14088 = -1.*t11265*t6984;
  t14091 = -1.*t6678*t11391;
  p_output1[0]=t5411*t5417 - 1.*t27*t5477*t5508 + t5639*t5694 + t5727*t5769 + t5785*t5827 + t27*t29*t59 + t5937*t6020 + t6040*t6073 + 0.803147*(t1036*t6020 - 4.e-6*t1036*t6073 + t5827*t838) - 0.14871*(4.e-6*t1036*t5827 + t2282*t6073 + 4.e-6*t6020*t94) - 0.041195*(-1.*t1036*t5827 + t6020*t84 + 4.e-6*t6073*t94) + var1[0] + t6340*var2[0] + t7088*var2[1] + t7052*var2[2] + t7209*var2[3] + ((-1.*t6970*t6984 - 1.*t7008*t7036)*var2[1] + (t7070 + t7079)*var2[2])*var2[3] + t6893*var2[4] + (t10741*var2[0] - 1.*t10735*t6970*var2[1] + t10735*t7008*var2[2] + (t7102*(t10754*t7114 + t10748*t7157 + t7126*t7157 + t10764*t7176) + t10771*t7185 + t7114*(-1.*t10754*t7102 - 1.*t10771*t7126 - 1.*t10778*t7176 - 1.*t10748*t7198) + t7157*t7201)*var2[3])*var2[4] + t4196*var2[5] + (t10522*t27*var2[0] + (t10522*t5417*t6970 + t10564*t7008)*var2[1] + (t10564*t6970 - 1.*t10522*t5417*t7008)*var2[2] + (t7102*(t10619 + t10623 + t10616*t27*t7114 + t10630*t27*t7126 - 1.*t10616*t5417*t7157 - 1.*t10630*t5417*t7176) + t10657*t27*t7185 + t7114*(t10643 + t10644 - 1.*t10616*t27*t7102 - 1.*t10657*t27*t7126 + t10657*t5417*t7176 + t10616*t5417*t7198) + t10630*t27*t7201)*var2[3] + (t6625*(t10619 + t10623 + t10616*t6738 + t10630*t6749) + t10636*t6776 + t6651*(t10643 + t10644 - 1.*t10657*t6749 - 1.*t10616*t6820) + t6738*t6888)*var2[4])*var2[5] + t4891*var2[9] + (t10165*t27*var2[0] + (t10165*t5417*t6970 + t10174*t7008)*var2[1] + (t10174*t6970 - 1.*t10165*t5417*t7008)*var2[2] + (t7102*(t10199 + t10230 + t10218*t27*t7114 + t10233*t27*t7126 - 1.*t10218*t5417*t7157 - 1.*t10233*t5417*t7176) + t10267*t27*t7185 + t7114*(t10258 + t10264 - 1.*t10218*t27*t7102 - 1.*t10267*t27*t7126 + t10267*t5417*t7176 + t10218*t5417*t7198) + t10233*t27*t7201)*var2[3] + (t6625*(t10199 + t10230 + t10218*t6738 + t10233*t6749) + t10256*t6776 + t6651*(t10258 + t10264 - 1.*t10267*t6749 - 1.*t10218*t6820) + t10193*t6888)*var2[4] + ((-1.*t10058*t2122 - 1.*t10010*t2991 - 1.*t10040*t3081 - 1.*t10069*t3446)*t397 + t3566*(t10105*t2991 + t10058*t4105 + t3446*t4105 + t10040*t4118))*var2[5])*var2[9] + t5332*var2[10] + (t11137*var2[0] + (-1.*t11395*t6970 + t11391*t7008)*var2[1] + (t11391*t6970 + t11395*t7008)*var2[2] + (t7102*(t11239 + t11266 + t11427*t7114 + t11416*t7126 + t11431*t7157 + t11423*t7176) + t11410*t7185 + t7114*(t11269 + t11275 - 1.*t11427*t7102 - 1.*t11410*t7126 - 1.*t11438*t7176 - 1.*t11431*t7198) + t11416*t7201)*var2[3] + (t6625*(t10942 + t10943 + t11239 + t11266 + t11261*t6738 + t11250*t6749) + t11189*t6776 + t6651*(t10872 + t10893 + t11269 + t11275 - 1.*t11272*t6749 - 1.*t11261*t6820) + t11234*t6888)*var2[4] + ((t10872 + t10893 - 1.*t10859*t2122 - 1.*t10808*t2991 - 1.*t10850*t3081 - 1.*t10812*t3446)*t397 + t3959*t4088 + t3566*(t10942 + t10943 + t10915*t2991 + t10938*t3446 + t10859*t4105 + t10850*t4118) + t10871*t4129)*var2[5] + (-0.15121*t11115 - 0.15121*t11120 + t397*(t10893 - 1.*t10846*t1846 - 1.*t10823*t2047 - 1.*t10804*t2932 - 1.*t10795*t2974 - 1.*t10871*t4216) + t3566*(t10943 + t10906*t2932 + t10898*t2974 + t10846*t4011 + t10823*t4088 + t4088*t4216) + t4088*t4332 + t10871*t4415)*var2[9])*var2[10] - 1.9353204325022392e-7*var2[11] + (t9295*var2[0] + (t7008*t9301 - 1.*t6970*t9309)*var2[1] + (t6970*t9301 + t7008*t9309)*var2[2] + (t7102*(t9615 + t7114*t9709 + t7157*t9713) + t7185*t9724 + t7114*(t9681 + t9689 - 1.*t7102*t9709 - 1.*t7198*t9713 - 1.*t7126*t9724 - 1.*t7176*t9956))*var2[3] + (t6625*(t7949 + t9615 + t6738*t9649) + t6776*t9667 + t6651*(t7854 + t7925 - 1.*t6820*t9649 + t9681 + t9689 - 1.*t6749*t9700))*var2[4] + (t4129*t7901 + t397*(-1.*t2122*t7378 - 1.*t3081*t7394 - 1.*t2991*t7681 - 1.*t3446*t7718 + t7854 + t7925) + t3566*(t4105*t7378 + t4118*t7394 + t7949))*var2[5] + (t4415*t7901 + t397*(-1.*t1846*t7329 - 1.*t2047*t7350 - 1.*t2932*t7594 - 1.*t2974*t7673 + t7854 - 1.*t4216*t7901) + t3566*(t4011*t7329 + t4088*t7350 + t7949) - 0.15121*t8291 - 0.15121*t8305)*var2[9] + (-0.038749*t7419 - 1.*t5092*t7509 + 1.e-6*t8225 - 0.28121*t8241 - 1.*t114*t9029 - 1.*t1632*t9118 + 4.e-6*(-1.*t5092*t7419 - 1.*t218*t9029 - 1.*t1800*t9118))*var2[10])*var2[11] + t6340*var3[0] + t7088*var3[1] + t7052*var3[2] + t7209*var3[3] + t6893*var3[4] + t4196*var3[5] + t4891*var3[9] + t5332*var3[10] - 1.9353204325022392e-7*var3[11] - 1.*var4[0];
  p_output1[1]=t11703*t5477 + t11714*t5639 + t11719*t5727 + t11913*t5785 + t11698*t59 + t11933*t5937 + t11938*t6040 - 1.*t27*t5411*t6970 + 0.803147*(t1036*t11933 - 4.e-6*t1036*t11938 + t11913*t838) - 0.14871*(4.e-6*t1036*t11913 + t11938*t2282 + 4.e-6*t11933*t94) - 0.041195*(-1.*t1036*t11913 + t11933*t84 + 4.e-6*t11938*t94) + var1[1] + t7102*var2[0] + t11733*var2[1] + t11725*var2[2] + t12024*var2[3] + ((-1.*t6625*t6970 - 1.*t7008*t7198)*var2[1] + (t11731 + t11732)*var2[2])*var2[3] + t11779*var2[4] + (t10771*var2[0] - 1.*t10778*t6970*var2[1] + t10778*t7008*var2[2] + (t10741*t11996 + t12019*t7157 + t7114*(t10754*t6340 + t10748*t7036 + t10741*t7126 + t10735*t7176) + t6340*(-1.*t10754*t7114 - 1.*t10748*t7157 - 1.*t7126*t7157 - 1.*t10764*t7176))*var2[3])*var2[4] + t11617*var2[5] + (t10657*t27*var2[0] + (t10657*t5417*t6970 + t10636*t7008)*var2[1] + (t10636*t6970 - 1.*t10657*t5417*t7008)*var2[2] + (t10522*t11996*t27 + t10630*t12019*t27 + t7114*(t12464 + t12465 + t10616*t27*t6340 - 1.*t10616*t5417*t7036 + t10522*t27*t7126 - 1.*t10522*t5417*t7176) + t6340*(t12457 + t12458 - 1.*t10616*t27*t7114 - 1.*t10630*t27*t7126 + t10616*t5417*t7157 + t10630*t5417*t7176))*var2[3] + (t10564*t11738 + t11769*t6738 + t6651*(t12464 + t12465 + t10616*t6285 + t10522*t6749) + (t12457 + t12458 - 1.*t10616*t6738 - 1.*t10630*t6749)*t6984)*var2[4])*var2[5] + t11666*var2[9] + (t10267*t27*var2[0] + (t10267*t5417*t6970 + t10256*t7008)*var2[1] + (t10256*t6970 - 1.*t10267*t5417*t7008)*var2[2] + (t10165*t11996*t27 + t10233*t12019*t27 + t7114*(t12412 + t12413 + t10218*t27*t6340 - 1.*t10218*t5417*t7036 + t10165*t27*t7126 - 1.*t10165*t5417*t7176) + t6340*(t12392 + t12394 - 1.*t10218*t27*t7114 - 1.*t10233*t27*t7126 + t10218*t5417*t7157 + t10233*t5417*t7176))*var2[3] + (t10174*t11738 + t10193*t11769 + t6651*(t12412 + t12413 + t10218*t6285 + t10165*t6749) + (t12392 + t12394 - 1.*t10218*t6738 - 1.*t10233*t6749)*t6984)*var2[4] + ((-1.*t10105*t2991 - 1.*t10058*t4105 - 1.*t3446*t4105 - 1.*t10040*t4118)*t6126 + t397*(t10142*t2991 + t10150*t3446 + t10058*t6188 + t10040*t6234))*var2[5])*var2[9] + t11686*var2[10] + (t11410*var2[0] + (-1.*t11438*t6970 + t11189*t7008)*var2[1] + (t11189*t6970 + t11438*t7008)*var2[2] + (t11137*t11996 + t11416*t12019 + t7114*(t12651 + t12654 + t11427*t6340 + t11431*t7036 + t11137*t7126 + t11395*t7176) + t6340*(t12644 + t12647 - 1.*t11427*t7114 - 1.*t11416*t7126 - 1.*t11431*t7157 - 1.*t11423*t7176))*var2[3] + (t11391*t11738 + t11234*t11769 + t6651*(t12552 + t12562 + t12651 + t12654 + t11261*t6285 + t11135*t6749) + (t12586 + t12587 + t12644 + t12647 - 1.*t11261*t6738 - 1.*t11250*t6749)*t6984)*var2[4] + (t11125*t11614 + t11609*t4088 + (t12586 + t12587 - 1.*t10915*t2991 - 1.*t10938*t3446 - 1.*t10859*t4105 - 1.*t10850*t4118)*t6126 + t397*(t12552 + t12562 + t11129*t2991 + t11133*t3446 + t10859*t6188 + t10850*t6234))*var2[5] + (-0.15121*t10795 - 0.15121*t10804 + t11125*t11661 + t11623*t4088 + t397*(t12552 + t11120*t2932 + t11115*t2974 + t11125*t4216 + t10846*t4636 + t10823*t4777) + (t12587 - 1.*t10906*t2932 - 1.*t10898*t2974 - 1.*t10846*t4011 - 1.*t10823*t4088 - 1.*t4088*t4216)*t6126)*var2[9])*var2[10] + 0.29999998115510645*var2[11] + (t9724*var2[0] + (t7008*t9667 - 1.*t6970*t9956)*var2[1] + (t6970*t9667 + t7008*t9956)*var2[2] + (t11996*t9295 + t7114*(t12270 + t12274 + t7126*t9295 + t7176*t9309 + t6340*t9709 + t7036*t9713) + t6340*(t12135 - 1.*t7114*t9709 - 1.*t7157*t9713))*var2[3] + (t11738*t9301 + t6651*(t12052 + t12053 + t12270 + t12274 + t6749*t9290 + t6285*t9649) + t6984*(t12064 + t12135 - 1.*t6738*t9649))*var2[4] + (t6126*(t12064 - 1.*t4105*t7378 - 1.*t4118*t7394) + t11614*t9254 + t397*(t12052 + t12053 + t6188*t7378 + t6234*t7394 + t2991*t9264 + t3446*t9283))*var2[5] + (t6126*(t12064 - 1.*t4011*t7329 - 1.*t4088*t7350) - 0.15121*t7594 - 0.15121*t7673 + t11661*t9254 + t397*(t12053 + t4636*t7329 + t4777*t7350 + t2932*t8291 + t2974*t8305 + t4216*t9254))*var2[9] + (-1.*t114*t12102 - 1.*t12110*t4525 - 0.28121*t7419 - 0.038749*t7472 + 1.e-6*t7509 - 1.*t11676*t8225 + 4.e-6*(-1.*t12102*t218 - 1.*t12110*t4627 - 1.*t11676*t8241))*var2[10])*var2[11] + t7102*var3[0] + t11733*var3[1] + t11725*var3[2] + t12024*var3[3] + t11779*var3[4] + t11617*var3[5] + t11666*var3[9] + t11686*var3[10] + 0.29999998115510645*var3[11] - 1.*var4[1];
  p_output1[2]=t13044*t5477 + t13053*t5639 + t13057*t5727 + t13159*t5785 + t13037*t59 + t13236*t5937 + t13249*t6040 + t27*t5411*t7008 + 0.803147*(t1036*t13236 - 4.e-6*t1036*t13249 + t13159*t838) - 0.14871*(4.e-6*t1036*t13159 + t13249*t2282 + 4.e-6*t13236*t94) - 0.041195*(-1.*t1036*t13159 + t13236*t84 + 4.e-6*t13249*t94) + var1[2] + t7114*var2[0] + t13066*var2[1] + t13061*var2[2] + t13275*var2[3] + ((-1.*t6651*t6970 - 1.*t7008*t7157)*var2[1] + t13066*var2[2])*var2[3] + t13077*var2[4] + (t7157*var2[0] - 1.*t10764*t6970*var2[1] + t10764*t7008*var2[2] + (t10741*t13269 + t10771*t13273 + t7102*(-1.*t10754*t6340 - 1.*t10748*t7036 - 1.*t10741*t7126 - 1.*t10735*t7176) + t6340*(t10754*t7102 + t10771*t7126 + t10778*t7176 + t10748*t7198))*var2[3])*var2[4] + t12882*var2[5] + (t10630*t27*var2[0] + (t10630*t5417*t6970 + t6738*t7008)*var2[1] + (t6738*t6970 - 1.*t10630*t5417*t7008)*var2[2] + (t10522*t13269*t27 + t10657*t13273*t27 + t7102*(t13570 + t13571 - 1.*t10616*t27*t6340 + t10616*t5417*t7036 - 1.*t10522*t27*t7126 + t10522*t5417*t7176) + t6340*(t13506 + t13512 + t10616*t27*t7102 + t10657*t27*t7126 - 1.*t10657*t5417*t7176 - 1.*t10616*t5417*t7198))*var2[3] + (t10564*t13071 + t10636*t13075 + t6625*(t13570 + t13571 - 1.*t10616*t6285 - 1.*t10522*t6749) + (t13506 + t13512 + t10657*t6749 + t10616*t6820)*t6984)*var2[4])*var2[5] + t12917*var2[9] + (t10233*t27*var2[0] + (t10233*t5417*t6970 + t10193*t7008)*var2[1] + (t10193*t6970 - 1.*t10233*t5417*t7008)*var2[2] + (t10165*t13269*t27 + t10267*t13273*t27 + t7102*(t13356 + t13357 - 1.*t10218*t27*t6340 + t10218*t5417*t7036 - 1.*t10165*t27*t7126 + t10165*t5417*t7176) + t6340*(t13345 + t13347 + t10218*t27*t7102 + t10267*t27*t7126 - 1.*t10267*t5417*t7176 - 1.*t10218*t5417*t7198))*var2[3] + (t10174*t13071 + t10256*t13075 + t6625*(t13356 + t13357 - 1.*t10218*t6285 - 1.*t10165*t6749) + (t13345 + t13347 + t10267*t6749 + t10218*t6820)*t6984)*var2[4] + ((t10058*t2122 + t10010*t2991 + t10040*t3081 + t10069*t3446)*t6126 + t3566*(-1.*t10142*t2991 - 1.*t10150*t3446 - 1.*t10058*t6188 - 1.*t10040*t6234))*var2[5])*var2[9] + t13032*var2[10] + (t11416*var2[0] + (-1.*t11423*t6970 + t11234*t7008)*var2[1] + (t11234*t6970 + t11423*t7008)*var2[2] + (t11137*t13269 + t11410*t13273 + t7102*(t14088 + t14091 - 1.*t11427*t6340 - 1.*t11431*t7036 - 1.*t11137*t7126 - 1.*t11395*t7176) + t6340*(t14081 + t14084 + t11427*t7102 + t11410*t7126 + t11438*t7176 + t11431*t7198))*var2[3] + (t11391*t13071 + t11189*t13075 + t6625*(t13960 + t13961 + t14088 + t14091 - 1.*t11261*t6285 - 1.*t11135*t6749) + (t14022 + t14023 + t14081 + t14084 + t11272*t6749 + t11261*t6820)*t6984)*var2[4] + (t10871*t12826 + t11125*t12877 + (t14022 + t14023 + t10859*t2122 + t10808*t2991 + t10850*t3081 + t10812*t3446)*t6126 + t3566*(t13960 + t13961 - 1.*t11129*t2991 - 1.*t11133*t3446 - 1.*t10859*t6188 - 1.*t10850*t6234))*var2[5] + (-0.15121*t10898 - 0.15121*t10906 + t10871*t12907 + t11125*t12915 + t3566*(t13960 - 1.*t11120*t2932 - 1.*t11115*t2974 - 1.*t11125*t4216 - 1.*t10846*t4636 - 1.*t10823*t4777) + (t14023 + t10846*t1846 + t10823*t2047 + t10804*t2932 + t10795*t2974 + t10871*t4216)*t6126)*var2[9])*var2[10] + 1.1914820871506078e-8*var2[11] + ((t13269*t9295 + t7102*(t13755 + t13759 - 1.*t7126*t9295 - 1.*t7176*t9309 - 1.*t6340*t9709 - 1.*t7036*t9713) + t13273*t9724 + t6340*(t13744 + t13747 + t7102*t9709 + t7198*t9713 + t7126*t9724 + t7176*t9956))*var2[3] + (t13071*t9301 + t6625*(t13680 + t13681 + t13755 + t13759 - 1.*t6749*t9290 - 1.*t6285*t9649) + t13075*t9667 + t6984*(t13688 + t13689 + t13744 + t13747 + t6820*t9649 + t6749*t9700))*var2[4] + (t6126*(t13688 + t13689 + t2122*t7378 + t3081*t7394 + t2991*t7681 + t3446*t7718) + t12826*t7901 + t12877*t9254 + t3566*(t13680 + t13681 - 1.*t6188*t7378 - 1.*t6234*t7394 - 1.*t2991*t9264 - 1.*t3446*t9283))*var2[5] + (t12907*t7901 + t6126*(t13688 + t1846*t7329 + t2047*t7350 + t2932*t7594 + t2974*t7673 + t4216*t7901) + t12915*t9254 + t3566*(t13681 - 1.*t4636*t7329 - 1.*t4777*t7350 - 1.*t2932*t8291 - 1.*t2974*t8305 - 1.*t4216*t9254))*var2[9] + (-1.*t13726*t1632 - 1.*t13734*t4525 - 1.*t12925*t7509 - 1.*t13026*t8225 + 4.e-6*(-1.*t13726*t1800 - 1.*t13734*t4627 - 1.*t12925*t7419 - 1.*t13026*t8241))*var2[10])*var2[11] + t7114*var3[0] + t13066*var3[1] + t13061*var3[2] + t13275*var3[3] + t13077*var3[4] + t12882*var3[5] + t12917*var3[9] + t13032*var3[10] + 1.1914820871506078e-8*var3[11] - 1.*var4[2];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "ddh_FrFoot_QuadrupleStance.hh"

namespace QuadrupleStance
{

void ddh_FrFoot_QuadrupleStance_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
