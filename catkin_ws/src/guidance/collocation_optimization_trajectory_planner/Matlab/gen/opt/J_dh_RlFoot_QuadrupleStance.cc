/*
 * Automatically Generated from Mathematica.
 * Sat 13 Nov 2021 17:52:03 GMT+01:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t697;
  double t903;
  double t925;
  double t212;
  double t367;
  double t473;
  double t1013;
  double t1068;
  double t502;
  double t968;
  double t1003;
  double t1069;
  double t1081;
  double t1100;
  double t493;
  double t1379;
  double t1412;
  double t1419;
  double t1499;
  double t1586;
  double t1775;
  double t1786;
  double t1794;
  double t1800;
  double t1813;
  double t1830;
  double t1833;
  double t1862;
  double t635;
  double t659;
  double t1265;
  double t1287;
  double t1337;
  double t1621;
  double t1709;
  double t1751;
  double t1754;
  double t1759;
  double t1840;
  double t1841;
  double t143;
  double t1871;
  double t1893;
  double t1901;
  double t1954;
  double t1974;
  double t1992;
  double t2011;
  double t2020;
  double t2039;
  double t2050;
  double t129;
  double t2094;
  double t2105;
  double t2106;
  double t1860;
  double t2055;
  double t2063;
  double t2119;
  double t2178;
  double t2085;
  double t2121;
  double t2152;
  double t75;
  double t2189;
  double t2193;
  double t2211;
  double t2216;
  double t2238;
  double t2243;
  double t2253;
  double t2284;
  double t2298;
  double t2301;
  double t2324;
  double t2336;
  double t2341;
  double t2350;
  double t2360;
  double t2361;
  double t2372;
  double t2373;
  double t2443;
  double t2444;
  double t2445;
  double t2466;
  double t2477;
  double t2493;
  double t2503;
  double t2514;
  double t2520;
  double t2532;
  double t2540;
  double t2542;
  double t2569;
  double t2576;
  double t2577;
  double t2578;
  double t2591;
  double t2595;
  double t2607;
  double t2609;
  double t2856;
  double t2694;
  double t2705;
  double t2715;
  double t2716;
  double t2743;
  double t2749;
  double t2811;
  double t2832;
  double t2833;
  double t2834;
  double t2873;
  double t2876;
  double t2878;
  double t2901;
  double t2926;
  double t2945;
  double t2976;
  double t3008;
  double t3019;
  double t3059;
  double t3061;
  double t3075;
  double t3089;
  double t3106;
  double t3117;
  double t3123;
  double t3139;
  double t3262;
  double t3279;
  double t3291;
  double t3292;
  double t3296;
  double t3297;
  double t3299;
  double t3302;
  double t3315;
  double t3319;
  double t3321;
  double t3338;
  double t3339;
  double t3340;
  double t3346;
  double t3350;
  double t3356;
  double t3370;
  double t3372;
  double t3374;
  double t3383;
  double t3391;
  double t3430;
  double t3438;
  double t3454;
  double t3488;
  double t3509;
  double t3512;
  double t3530;
  double t3547;
  double t3548;
  double t3569;
  double t3241;
  double t3646;
  double t3590;
  double t3597;
  double t3608;
  double t3616;
  double t3618;
  double t3633;
  double t3641;
  double t3647;
  double t3659;
  double t3660;
  double t3666;
  double t3669;
  double t3672;
  double t3698;
  double t3738;
  double t3743;
  double t3744;
  double t3745;
  double t3749;
  double t3762;
  double t3764;
  double t3769;
  double t3774;
  double t2825;
  double t2887;
  double t3022;
  double t3025;
  double t3034;
  double t3098;
  double t3141;
  double t3151;
  double t3175;
  double t3178;
  double t3187;
  double t3188;
  double t3193;
  double t3204;
  double t3207;
  double t3209;
  double t3221;
  double t3239;
  double t3244;
  double t3252;
  double t3265;
  double t3270;
  double t3329;
  double t3418;
  double t3570;
  double t3585;
  double t3603;
  double t3684;
  double t3791;
  double t3794;
  double t3797;
  double t3799;
  double t3802;
  double t3804;
  double t3809;
  double t3810;
  double t3812;
  double t3852;
  double t3862;
  double t3871;
  double t2499;
  double t2528;
  double t2551;
  double t2556;
  double t2584;
  double t2618;
  double t2628;
  double t2642;
  double t2657;
  double t2662;
  double t2664;
  double t2667;
  double t2686;
  double t3873;
  double t3880;
  double t3886;
  double t3825;
  double t3826;
  double t3827;
  double t3930;
  double t3942;
  double t3947;
  double t3587;
  double t3814;
  double t3818;
  double t2560;
  double t2687;
  double t2692;
  double t3972;
  double t3974;
  double t3975;
  double t4141;
  double t4146;
  double t4153;
  double t4051;
  double t4057;
  double t4065;
  double t3953;
  double t3963;
  double t3964;
  double t3981;
  double t4290;
  double t4291;
  double t4293;
  double t4080;
  double t4287;
  double t4302;
  double t4234;
  double t4257;
  double t4264;
  double t4359;
  double t4367;
  double t4350;
  double t4351;
  double t4354;
  double t3988;
  double t3989;
  double t3994;
  double t4084;
  double t4085;
  double t4098;
  double t4566;
  double t4580;
  double t4581;
  double t4589;
  double t4600;
  double t4644;
  double t4749;
  double t4760;
  double t4764;
  double t4767;
  double t4768;
  double t4775;
  double t4778;
  double t4690;
  double t4694;
  double t4696;
  double t4321;
  double t4326;
  double t4335;
  double t4618;
  double t4620;
  double t4635;
  double t4385;
  double t4397;
  double t4403;
  double t4844;
  double t4883;
  double t4892;
  double t4929;
  double t4955;
  double t4822;
  double t4831;
  double t5003;
  double t5006;
  double t5016;
  double t4962;
  double t4996;
  double t4973;
  double t4978;
  double t5040;
  double t5052;
  double t5046;
  double t5047;
  double t5292;
  double t5353;
  double t5355;
  double t5361;
  double t5284;
  double t5287;
  double t5303;
  double t5418;
  double t5419;
  double t5437;
  double t5438;
  double t5261;
  double t5263;
  double t5234;
  double t5236;
  double t5564;
  double t5345;
  double t5360;
  double t5370;
  double t5372;
  double t5514;
  double t5516;
  double t5520;
  double t5521;
  double t5525;
  double t5526;
  double t5529;
  double t5533;
  double t5539;
  double t5571;
  double t5574;
  double t5576;
  double t5578;
  double t5584;
  double t5590;
  double t5593;
  double t5599;
  double t5604;
  double t5611;
  double t5619;
  double t5620;
  double t5622;
  double t5638;
  double t5648;
  double t5651;
  double t5654;
  double t5680;
  double t5505;
  double t5609;
  double t5551;
  double t5553;
  double t5556;
  double t5559;
  double t5464;
  double t5467;
  double t5472;
  double t5487;
  double t5728;
  double t5758;
  double t5742;
  double t5743;
  double t5744;
  double t5746;
  double t5699;
  double t5710;
  double t5713;
  double t5714;
  double t5864;
  double t5865;
  double t5866;
  double t5875;
  double t5882;
  double t5899;
  double t5237;
  double t5243;
  double t5269;
  double t5276;
  double t5280;
  double t5289;
  double t5315;
  double t5320;
  double t6191;
  double t6194;
  double t6198;
  double t6101;
  double t6159;
  double t6160;
  double t6061;
  double t6064;
  double t6071;
  double t6092;
  double t6179;
  double t6199;
  double t6201;
  double t6216;
  double t6218;
  double t6222;
  double t6228;
  double t6237;
  double t6242;
  double t5957;
  double t5959;
  double t5963;
  double t5998;
  double t6005;
  double t6006;
  double t5824;
  double t5826;
  double t5842;
  double t5844;
  double t5845;
  double t5855;
  double t6299;
  double t6304;
  double t6305;
  double t6284;
  double t6287;
  double t6294;
  double t6350;
  double t6352;
  double t6353;
  double t6370;
  double t6371;
  double t6375;
  double t6407;
  double t6409;
  double t6412;
  double t6312;
  double t6324;
  double t6326;
  double t6349;
  double t6367;
  double t6510;
  double t6517;
  double t6543;
  double t6439;
  double t6442;
  double t6482;
  double t6491;
  double t6496;
  double t6595;
  double t6598;
  double t6606;
  double t6612;
  double t6618;
  double t6635;
  double t6754;
  double t6718;
  double t6733;
  double t6736;
  double t6742;
  double t6745;
  double t6755;
  double t6756;
  double t6770;
  double t6775;
  double t6777;
  double t6778;
  double t6837;
  double t6933;
  double t6812;
  double t6832;
  double t6835;
  double t6839;
  double t6846;
  double t6847;
  double t6853;
  double t6854;
  double t6873;
  double t6878;
  double t6890;
  double t6906;
  double t6916;
  double t6923;
  double t6942;
  double t6943;
  double t6947;
  double t6950;
  double t6963;
  double t6971;
  double t6982;
  double t6984;
  double t6986;
  double t6987;
  double t7005;
  double t7021;
  double t7022;
  double t7025;
  double t7034;
  double t7083;
  double t7086;
  double t7088;
  double t7091;
  double t7094;
  double t7095;
  double t7096;
  double t7144;
  double t7165;
  double t7169;
  double t6892;
  double t6980;
  double t7036;
  double t7037;
  double t7040;
  double t7044;
  double t7046;
  double t7048;
  double t7057;
  double t7059;
  double t7075;
  double t7078;
  double t7261;
  double t7271;
  double t7274;
  double t7284;
  double t7293;
  double t7306;
  double t7315;
  double t7341;
  double t7344;
  double t7347;
  double t7353;
  double t5382;
  double t5392;
  double t5403;
  double t7197;
  double t7203;
  double t7204;
  double t7205;
  double t5439;
  double t5441;
  double t5458;
  double t7420;
  double t7421;
  double t7425;
  double t7426;
  double t7432;
  double t7447;
  double t7454;
  double t7460;
  double t7471;
  double t7474;
  double t7480;
  double t7486;
  double t7489;
  double t7494;
  double t7501;
  double t7519;
  double t7535;
  double t7540;
  double t7548;
  double t7554;
  double t7583;
  double t7586;
  double t7050;
  double t7220;
  double t7222;
  double t7234;
  double t7236;
  double t7243;
  double t7092;
  double t7133;
  double t7176;
  double t7189;
  double t7257;
  double t7354;
  double t7658;
  double t7660;
  double t7661;
  double t7669;
  double t7677;
  double t7692;
  double t7278;
  double t7298;
  double t7331;
  double t7334;
  double t7357;
  double t7362;
  double t7376;
  double t7381;
  double t5780;
  double t5782;
  double t5783;
  double t5796;
  double t5798;
  double t5800;
  double t6747;
  double t6760;
  double t6785;
  double t6790;
  double t6792;
  double t6793;
  double t6795;
  double t6804;
  double t7874;
  double t7875;
  double t7877;
  double t7842;
  double t7844;
  double t7851;
  double t7826;
  double t7827;
  double t7833;
  double t7838;
  double t7855;
  double t7886;
  double t7887;
  double t7901;
  double t7906;
  double t7925;
  double t7929;
  double t7935;
  double t7936;
  double t7727;
  double t7730;
  double t7734;
  double t7705;
  double t7706;
  double t7719;
  double t7976;
  double t7977;
  double t7980;
  double t7989;
  double t7990;
  double t7994;
  double t7775;
  double t7777;
  double t7791;
  double t7762;
  double t7763;
  double t7766;
  double t8097;
  double t8098;
  double t8110;
  double t8043;
  double t8046;
  double t8048;
  double t8022;
  double t8049;
  double t8025;
  double t8028;
  double t8034;
  double t8077;
  double t8114;
  double t8177;
  double t8183;
  double t8184;
  double t8186;
  double t8198;
  double t8200;
  double t8080;
  double t8084;
  double t8088;
  double t8257;
  double t8264;
  double t8269;
  double t8205;
  double t8215;
  double t8234;
  double t2392;
  double t2416;
  double t2420;
  double t4008;
  double t4011;
  double t4014;
  double t8361;
  double t8365;
  double t8370;
  double t3831;
  double t3835;
  double t3840;
  double t8587;
  double t8624;
  double t8675;
  double t8678;
  double t8720;
  double t8723;
  double t8588;
  double t8591;
  double t8601;
  double t8627;
  double t8628;
  double t8629;
  double t8687;
  double t8688;
  double t8692;
  double t8701;
  double t8707;
  double t8715;
  double t8884;
  double t8892;
  double t8908;
  double t8913;
  double t9039;
  double t9048;
  double t9105;
  double t9117;
  double t6654;
  double t6661;
  double t6662;
  double t6100;
  double t6203;
  double t6210;
  double t9230;
  double t9234;
  double t6587;
  double t6589;
  double t6590;
  double t9241;
  double t9242;
  double t9005;
  double t9010;
  double t9013;
  double t9025;
  double t9026;
  double t9029;
  double t9468;
  double t9471;
  double t9473;
  double t9477;
  double t9480;
  double t9483;
  double t9496;
  double t9510;
  double t9527;
  double t9528;
  double t9536;
  double t9550;
  double t9559;
  double t9562;
  double t9563;
  double t9569;
  double t9583;
  double t9584;
  double t9589;
  double t9591;
  double t9602;
  double t9605;
  double t9353;
  double t9368;
  double t9128;
  double t9130;
  double t9131;
  double t9136;
  double t9141;
  double t9143;
  double t9392;
  double t9401;
  double t8274;
  double t8279;
  double t8283;
  double t9907;
  double t9912;
  double t8238;
  double t8239;
  double t8240;
  double t7840;
  double t7889;
  double t7898;
  double t9943;
  double t9951;
  double t8539;
  double t8541;
  double t8542;
  double t10295;
  double t10330;
  double t10378;
  double t10380;
  double t10386;
  double t10389;
  double t10296;
  double t10297;
  double t10301;
  double t10334;
  double t10340;
  double t10345;
  double t10369;
  double t10370;
  double t10373;
  double t10398;
  double t10399;
  double t10400;
  double t10586;
  double t10590;
  double t10613;
  double t10620;
  double t10771;
  double t10780;
  double t10807;
  double t10827;
  double t11191;
  double t11207;
  double t11218;
  double t11234;
  double t10752;
  double t10754;
  double t10755;
  double t10757;
  double t10763;
  double t10765;
  double t11569;
  double t11579;
  double t11584;
  double t11586;
  double t11596;
  double t11598;
  double t11599;
  double t11605;
  double t11610;
  double t11611;
  double t11613;
  double t11615;
  double t11619;
  double t11620;
  double t11621;
  double t11623;
  double t11631;
  double t11650;
  double t11652;
  double t11654;
  double t11657;
  double t11662;
  double t11430;
  double t11438;
  double t10836;
  double t10843;
  double t10844;
  double t10847;
  double t10848;
  double t10849;
  double t11459;
  double t11480;
  double t12000;
  double t12015;
  double t12051;
  double t12061;
  double t10242;
  double t10245;
  double t10253;
  double t10133;
  t697 = Cos(var1[14]);
  t903 = -1.*t697;
  t925 = 1. + t903;
  t212 = Cos(var1[13]);
  t367 = -1.*t212;
  t473 = 1. + t367;
  t1013 = Sin(var1[14]);
  t1068 = 4.e-6*t1013;
  t502 = Sin(var1[13]);
  t968 = 1.000000000016*t925;
  t1003 = -7.e-6*t925;
  t1069 = t1003 + t1068;
  t1081 = -7.e-6*t1069;
  t1100 = -1. + t968 + t1081;
  t493 = -7.e-6*t473;
  t1379 = -6.5e-11*t925;
  t1412 = 1. + t1379;
  t1419 = -7.e-6*t1412;
  t1499 = 7.e-6*t925;
  t1586 = t1419 + t1499 + t1068;
  t1775 = -2.8e-11*t925;
  t1786 = -1. + t697;
  t1794 = 4.e-6*t1786;
  t1800 = -7.e-6*t1013;
  t1813 = t1794 + t1800;
  t1830 = -7.e-6*t1813;
  t1833 = t1775 + t1830 + t1013;
  t1862 = Sin(var1[12]);
  t635 = -4.e-6*t502;
  t659 = t493 + t635;
  t1265 = t659*t1100;
  t1287 = -6.5e-11*t473;
  t1337 = 1. + t1287;
  t1621 = t1337*t1586;
  t1709 = -1. + t212;
  t1751 = 4.e-6*t1709;
  t1754 = 7.e-6*t502;
  t1759 = t1751 + t1754;
  t1840 = t1759*t1833;
  t1841 = t1265 + t1621 + t1840;
  t143 = Cos(var1[12]);
  t1871 = -1.000000000016*t473;
  t1893 = 1. + t1871;
  t1901 = t1893*t1100;
  t1954 = 4.e-6*t502;
  t1974 = t493 + t1954;
  t1992 = t1974*t1586;
  t2011 = 2.8e-11*t473;
  t2020 = t2011 + t502;
  t2039 = t2020*t1833;
  t2050 = t1901 + t1992 + t2039;
  t129 = Cos(var1[5]);
  t2094 = -1.*t1862*t1841;
  t2105 = t143*t2050;
  t2106 = t2094 + t2105;
  t1860 = t143*t1841;
  t2055 = t1862*t2050;
  t2063 = t1860 + t2055;
  t2119 = Sin(var1[5]);
  t2178 = Cos(var1[3]);
  t2085 = t129*t2063;
  t2121 = t2106*t2119;
  t2152 = t2085 + t2121;
  t75 = Sin(var1[3]);
  t2189 = Cos(var1[4]);
  t2193 = -1.*t502;
  t2211 = t2011 + t2193;
  t2216 = t2211*t1100;
  t2238 = -7.e-6*t502;
  t2243 = t1751 + t2238;
  t2253 = t2243*t1586;
  t2284 = -1.000000000049*t473;
  t2298 = 1. + t2284;
  t2301 = t2298*t1833;
  t2324 = t2216 + t2253 + t2301;
  t2336 = t2189*t2324;
  t2341 = Sin(var1[4]);
  t2350 = t129*t2106;
  t2360 = -1.*t2063*t2119;
  t2361 = t2350 + t2360;
  t2372 = -1.*t2341*t2361;
  t2373 = t2336 + t2372;
  t2443 = -1.*t2324*t2341;
  t2444 = -1.*t2189*t2361;
  t2445 = t2443 + t2444;
  t2466 = -1.000000000049*t925;
  t2477 = 4.e-6*t1813;
  t2493 = 1. + t2466 + t2477;
  t2503 = 4.e-6*t1412;
  t2514 = 7.e-6*t1013;
  t2520 = t2503 + t1794 + t2514;
  t2532 = 2.8e-11*t925;
  t2540 = 4.e-6*t1069;
  t2542 = t2532 + t2540 + t1013;
  t2569 = t2020*t2493;
  t2576 = t1974*t2520;
  t2577 = t1893*t2542;
  t2578 = t2569 + t2576 + t2577;
  t2591 = t1759*t2493;
  t2595 = t1337*t2520;
  t2607 = t659*t2542;
  t2609 = t2591 + t2595 + t2607;
  t2856 = -1.*t1013;
  t2694 = 4.e-6*t925;
  t2705 = t2694 + t1800;
  t2715 = 4.e-6*t2705;
  t2716 = -4.e-6*t1013;
  t2743 = t1003 + t2716;
  t2749 = -7.e-6*t2743;
  t2811 = 1. + t1379 + t2715 + t2749;
  t2832 = 1.000000000049*t925;
  t2833 = -1. + t2832;
  t2834 = 4.e-6*t2833;
  t2873 = t2532 + t2856;
  t2876 = -7.e-6*t2873;
  t2878 = t2834 + t1794 + t2876 + t1800;
  t2901 = -1.000000000016*t925;
  t2926 = 1. + t2901;
  t2945 = -7.e-6*t2926;
  t2976 = t1775 + t2856;
  t3008 = 4.e-6*t2976;
  t3019 = t2945 + t1003 + t3008 + t1068;
  t3059 = t1974*t2811;
  t3061 = t2020*t2878;
  t3075 = t1893*t3019;
  t3089 = t3059 + t3061 + t3075;
  t3106 = t1337*t2811;
  t3117 = t1759*t2878;
  t3123 = t659*t3019;
  t3139 = t3106 + t3117 + t3123;
  t3262 = -2.8e-11*t473;
  t3279 = -2.598649999999999e-7*var1[14];
  t3291 = 0.148705*t1412;
  t3292 = -2.3905277499999995e-16*t925;
  t3296 = -0.038922999986*t2705;
  t3297 = -0.80315*t2743;
  t3299 = t1499 + t1068;
  t3302 = -0.503149000008*t3299;
  t3315 = t1794 + t2514;
  t3319 = -0.038924*t3315;
  t3321 = t3279 + t3291 + t3292 + t3296 + t3297 + t3302 + t3319;
  t3338 = 1.0394599999999997e-12*var1[14];
  t3339 = 1. + t2466;
  t3340 = -0.038924*t3339;
  t3346 = -0.03892299998790722*t925;
  t3350 = -0.80315*t2873;
  t3356 = 0.148705*t1813;
  t3370 = t2694 + t2514;
  t3372 = -3.6777349999999994e-6*t3370;
  t3374 = t1775 + t1013;
  t3383 = -0.503149000008*t3374;
  t3391 = t3338 + t3340 + t3346 + t3350 + t3356 + t3372 + t3383;
  t3430 = 1.8190549999999993e-12*var1[14];
  t3438 = -0.80315*t2926;
  t3454 = -0.5031490000160505*t925;
  t3488 = -0.038922999986*t2976;
  t3509 = t1499 + t2716;
  t3512 = -3.6777349999999994e-6*t3509;
  t3530 = 0.148705*t1069;
  t3547 = t2532 + t1013;
  t3548 = -0.038924*t3547;
  t3569 = t3430 + t3438 + t3454 + t3488 + t3512 + t3530 + t3548;
  t3241 = 4.e-6*t473;
  t3646 = 7.e-6*t473;
  t3590 = -1.*t143;
  t3597 = 1. + t3590;
  t3608 = 0.15121*t1862;
  t3616 = 1.0248489999999998e-12*var1[13];
  t3618 = -0.28120900000849935*t473;
  t3633 = t3262 + t2193;
  t3641 = -0.038748999993*t3633;
  t3647 = t3646 + t635;
  t3659 = -2.123459e-6*t3647;
  t3660 = t1974*t3321;
  t3666 = t2020*t3391;
  t3669 = t1893*t3569;
  t3672 = t3616 + t3618 + t3641 + t3659 + t3660 + t3666 + t3669;
  t3698 = -1.4640699999999997e-7*var1[13];
  t3738 = -1.38024835e-16*t473;
  t3743 = t3241 + t2238;
  t3744 = -0.038748999993*t3743;
  t3745 = t3646 + t1954;
  t3749 = -0.281209000004*t3745;
  t3762 = t1337*t3321;
  t3764 = t1759*t3391;
  t3769 = t659*t3569;
  t3774 = t3698 + t3738 + t3744 + t3749 + t3762 + t3764 + t3769;
  t2825 = t2243*t2811;
  t2887 = t2298*t2878;
  t3022 = t2211*t3019;
  t3025 = t2825 + t2887 + t3022;
  t3034 = t2189*t3025;
  t3098 = t143*t3089;
  t3141 = -1.*t1862*t3139;
  t3151 = t3098 + t3141;
  t3175 = t129*t3151;
  t3178 = t1862*t3089;
  t3187 = t143*t3139;
  t3188 = t3178 + t3187;
  t3193 = -1.*t3188*t2119;
  t3204 = t3175 + t3193;
  t3207 = -1.*t2341*t3204;
  t3209 = t3034 + t3207;
  t3221 = 5.856279999999999e-13*var1[13];
  t3239 = -0.0387489999948987*t473;
  t3244 = t3241 + t1754;
  t3252 = -2.123459e-6*t3244;
  t3265 = t3262 + t502;
  t3270 = -0.281209000004*t3265;
  t3329 = t2243*t3321;
  t3418 = t2298*t3391;
  t3570 = t2211*t3569;
  t3585 = t3221 + t3239 + t3252 + t3270 + t3329 + t3418 + t3570;
  t3603 = -0.15121*t3597;
  t3684 = t143*t3672;
  t3791 = -1.*t1862*t3774;
  t3794 = t3603 + t3608 + t3684 + t3791;
  t3797 = t129*t3794;
  t3799 = 0.15121*t3597;
  t3802 = t1862*t3672;
  t3804 = t143*t3774;
  t3809 = t3799 + t3608 + t3802 + t3804;
  t3810 = -1.*t3809*t2119;
  t3812 = t3797 + t3810;
  t3852 = t2189*t3585;
  t3862 = -1.*t2341*t3812;
  t3871 = t3852 + t3862;
  t2499 = t2298*t2493;
  t2528 = t2243*t2520;
  t2551 = t2211*t2542;
  t2556 = t2499 + t2528 + t2551;
  t2584 = t143*t2578;
  t2618 = -1.*t1862*t2609;
  t2628 = t2584 + t2618;
  t2642 = t129*t2628;
  t2657 = t1862*t2578;
  t2662 = t143*t2609;
  t2664 = t2657 + t2662;
  t2667 = -1.*t2664*t2119;
  t2686 = t2642 + t2667;
  t3873 = t3025*t2341;
  t3880 = t2189*t3204;
  t3886 = t3873 + t3880;
  t3825 = t3585*t2341;
  t3826 = t2189*t3812;
  t3827 = t3825 + t3826;
  t3930 = t2189*t2556;
  t3942 = -1.*t2341*t2686;
  t3947 = t3930 + t3942;
  t3587 = -1.*t3585*t2341;
  t3814 = -1.*t2189*t3812;
  t3818 = t3587 + t3814;
  t2560 = t2556*t2341;
  t2687 = t2189*t2686;
  t2692 = t2560 + t2687;
  t3972 = t129*t3809;
  t3974 = t3794*t2119;
  t3975 = t3972 + t3974;
  t4141 = -1.*t129*t2063;
  t4146 = -1.*t2106*t2119;
  t4153 = t4141 + t4146;
  t4051 = t129*t2664;
  t4057 = t2628*t2119;
  t4065 = t4051 + t4057;
  t3953 = t129*t3188;
  t3963 = t3151*t2119;
  t3964 = t3953 + t3963;
  t3981 = t3964*t3975;
  t4290 = -1.*t129*t3809;
  t4291 = -1.*t3794*t2119;
  t4293 = t4290 + t4291;
  t4080 = -1.*t4065*t3975;
  t4287 = t3964*t3812;
  t4302 = t3204*t3975;
  t4234 = -1.*t129*t3188;
  t4257 = -1.*t3151*t2119;
  t4264 = t4234 + t4257;
  t4359 = -1.*t4065*t3812;
  t4367 = -1.*t2686*t3975;
  t4350 = -1.*t129*t2664;
  t4351 = -1.*t2628*t2119;
  t4354 = t4350 + t4351;
  t3988 = t3886*t3827;
  t3989 = t3209*t3871;
  t3994 = t3981 + t3988 + t3989;
  t4084 = -1.*t2692*t3827;
  t4085 = -1.*t3947*t3871;
  t4098 = t4080 + t4084 + t4085;
  t4566 = 0.15121*t143;
  t4580 = -0.15121*t1862;
  t4581 = -1.*t1862*t3672;
  t4589 = -1.*t143*t3774;
  t4600 = t4566 + t4580 + t4581 + t4589;
  t4644 = t4566 + t3608 + t3684 + t3791;
  t4749 = -1.*t143*t1841;
  t4760 = -1.*t1862*t2050;
  t4764 = t4749 + t4760;
  t4767 = t129*t4764;
  t4768 = t4767 + t4146;
  t4775 = t4764*t2119;
  t4778 = t2350 + t4775;
  t4690 = -1.*t1862*t2578;
  t4694 = -1.*t143*t2609;
  t4696 = t4690 + t4694;
  t4321 = t3025*t3585;
  t4326 = t3204*t3812;
  t4335 = t4321 + t4326 + t3981;
  t4618 = -1.*t1862*t3089;
  t4620 = -1.*t143*t3139;
  t4635 = t4618 + t4620;
  t4385 = -1.*t2556*t3585;
  t4397 = -1.*t2686*t3812;
  t4403 = t4385 + t4397 + t4080;
  t4844 = t4635*t2119;
  t4883 = t3175 + t4844;
  t4892 = t129*t4644;
  t4929 = t4600*t2119;
  t4955 = t4892 + t4929;
  t4822 = t4696*t2119;
  t4831 = t2642 + t4822;
  t5003 = t129*t4600;
  t5006 = -1.*t4644*t2119;
  t5016 = t5003 + t5006;
  t4962 = t3964*t4955;
  t4996 = t4883*t3975;
  t4973 = t129*t4635;
  t4978 = t4973 + t4257;
  t5040 = -1.*t4065*t4955;
  t5052 = -1.*t4831*t3975;
  t5046 = t129*t4696;
  t5047 = t5046 + t4351;
  t5292 = 2.8e-11*t502;
  t5353 = -7.e-6*t212;
  t5355 = t5353 + t635;
  t5361 = t367 + t5292;
  t5284 = 4.e-6*t212;
  t5287 = t5284 + t2238;
  t5303 = t212 + t5292;
  t5418 = t5355*t2811;
  t5419 = -1.000000000049*t502*t2878;
  t5437 = t5361*t3019;
  t5438 = t5418 + t5419 + t5437;
  t5261 = 7.e-6*t212;
  t5263 = t5261 + t635;
  t5234 = -4.e-6*t212;
  t5236 = t5234 + t2238;
  t5564 = -2.8e-11*t502;
  t5345 = -1.000000000049*t502*t2493;
  t5360 = t5355*t2520;
  t5370 = t5361*t2542;
  t5372 = t5345 + t5360 + t5370;
  t5514 = t5353 + t1954;
  t5516 = -0.038748999993*t5514;
  t5520 = t5284 + t1754;
  t5521 = -0.281209000004*t5520;
  t5525 = -1.38024835e-16*t502;
  t5526 = -6.5e-11*t502*t3321;
  t5529 = t5263*t3391;
  t5533 = t5236*t3569;
  t5539 = -1.4640699999999997e-7 + t5516 + t5521 + t5525 + t5526 + t5529 + t5533;
  t5571 = t212 + t5564;
  t5574 = -0.281209000004*t5571;
  t5576 = t5261 + t1954;
  t5578 = -2.123459e-6*t5576;
  t5584 = -0.0387489999948987*t502;
  t5590 = t5355*t3321;
  t5593 = -1.000000000049*t502*t3391;
  t5599 = t5361*t3569;
  t5604 = 5.856279999999999e-13 + t5574 + t5578 + t5584 + t5590 + t5593 + t5599;
  t5611 = t367 + t5564;
  t5619 = -0.038748999993*t5611;
  t5620 = t5234 + t1754;
  t5622 = -2.123459e-6*t5620;
  t5638 = -0.28120900000849935*t502;
  t5648 = t5287*t3321;
  t5651 = t5303*t3391;
  t5654 = -1.000000000016*t502*t3569;
  t5680 = 1.0248489999999998e-12 + t5619 + t5622 + t5638 + t5648 + t5651 + t5654;
  t5505 = t5438*t3585;
  t5609 = t3025*t5604;
  t5551 = -6.5e-11*t502*t2811;
  t5553 = t5263*t2878;
  t5556 = t5236*t3019;
  t5559 = t5551 + t5553 + t5556;
  t5464 = t5287*t2811;
  t5467 = t5303*t2878;
  t5472 = -1.000000000016*t502*t3019;
  t5487 = t5464 + t5467 + t5472;
  t5728 = -1.*t5372*t3585;
  t5758 = -1.*t2556*t5604;
  t5742 = t5263*t2493;
  t5743 = -6.5e-11*t502*t2520;
  t5744 = t5236*t2542;
  t5746 = t5742 + t5743 + t5744;
  t5699 = t5303*t2493;
  t5710 = t5287*t2520;
  t5713 = -1.000000000016*t502*t2542;
  t5714 = t5699 + t5710 + t5713;
  t5864 = -1.*t1862*t5539;
  t5865 = t143*t5680;
  t5866 = t5864 + t5865;
  t5875 = t143*t5539;
  t5882 = t1862*t5680;
  t5899 = t5875 + t5882;
  t5237 = t5236*t1100;
  t5243 = -6.5e-11*t502*t1586;
  t5269 = t5263*t1833;
  t5276 = t5237 + t5243 + t5269;
  t5280 = -1.000000000016*t502*t1100;
  t5289 = t5287*t1586;
  t5315 = t5303*t1833;
  t5320 = t5280 + t5289 + t5315;
  t6191 = t143*t5276;
  t6194 = t1862*t5320;
  t6198 = t6191 + t6194;
  t6101 = -1.*t1862*t5276;
  t6159 = t143*t5320;
  t6160 = t6101 + t6159;
  t6061 = t5361*t1100;
  t6064 = t5355*t1586;
  t6071 = -1.000000000049*t502*t1833;
  t6092 = t6061 + t6064 + t6071;
  t6179 = t129*t6160;
  t6199 = -1.*t6198*t2119;
  t6201 = t6179 + t6199;
  t6216 = t129*t6198;
  t6218 = t6160*t2119;
  t6222 = t6216 + t6218;
  t6228 = t2189*t6092;
  t6237 = -1.*t2341*t6201;
  t6242 = t6228 + t6237;
  t5957 = t143*t5746;
  t5959 = t1862*t5714;
  t5963 = t5957 + t5959;
  t5998 = -1.*t1862*t5746;
  t6005 = t143*t5714;
  t6006 = t5998 + t6005;
  t5824 = t143*t5559;
  t5826 = t1862*t5487;
  t5842 = t5824 + t5826;
  t5844 = -1.*t1862*t5559;
  t5845 = t143*t5487;
  t5855 = t5844 + t5845;
  t6299 = t129*t5842;
  t6304 = t5855*t2119;
  t6305 = t6299 + t6304;
  t6284 = t129*t5963;
  t6287 = t6006*t2119;
  t6294 = t6284 + t6287;
  t6350 = t129*t5899;
  t6352 = t5866*t2119;
  t6353 = t6350 + t6352;
  t6370 = t129*t5866;
  t6371 = -1.*t5899*t2119;
  t6375 = t6370 + t6371;
  t6407 = t129*t6006;
  t6409 = -1.*t5963*t2119;
  t6412 = t6407 + t6409;
  t6312 = t129*t5855;
  t6324 = -1.*t5842*t2119;
  t6326 = t6312 + t6324;
  t6349 = t6305*t3975;
  t6367 = t3964*t6353;
  t6510 = t5438*t2341;
  t6517 = t2189*t6326;
  t6543 = t6510 + t6517;
  t6439 = -1.*t6294*t3975;
  t6442 = -1.*t4065*t6353;
  t6482 = t5372*t2341;
  t6491 = t2189*t6412;
  t6496 = t6482 + t6491;
  t6595 = t5604*t2341;
  t6598 = t2189*t6375;
  t6606 = t6595 + t6598;
  t6612 = t2189*t5604;
  t6618 = -1.*t2341*t6375;
  t6635 = t6612 + t6618;
  t6754 = 4.e-6*t697;
  t6718 = -7.e-6*t697;
  t6733 = t6718 + t2716;
  t6736 = -7.e-6*t6733;
  t6742 = -2.8e-11*t1013;
  t6745 = t697 + t6736 + t6742;
  t6755 = 7.000000000455e-6*t1013;
  t6756 = t6754 + t6755;
  t6770 = t6754 + t1800;
  t6775 = -7.e-6*t6770;
  t6777 = 1.000000000016*t1013;
  t6778 = t6775 + t6777;
  t6837 = 7.e-6*t697;
  t6933 = 2.8e-11*t1013;
  t6812 = -4.e-6*t697;
  t6832 = t6812 + t1800;
  t6835 = -0.80315*t6832;
  t6839 = t6837 + t2716;
  t6846 = -0.038924*t6839;
  t6847 = t6718 + t1068;
  t6853 = -0.038922999986*t6847;
  t6854 = t6754 + t2514;
  t6873 = -0.503149000008*t6854;
  t6878 = -9.666064052774999e-12*t1013;
  t6890 = -2.598649999999999e-7 + t6835 + t6846 + t6853 + t6873 + t6878;
  t6906 = 0.148705*t6733;
  t6916 = t697 + t6742;
  t6923 = -0.503149000008*t6916;
  t6942 = t903 + t6933;
  t6943 = -0.80315*t6942;
  t6947 = t6837 + t1068;
  t6950 = -3.6777349999999994e-6*t6947;
  t6963 = 1.0000140000590574e-6*t1013;
  t6971 = 1.0394599999999997e-12 + t6906 + t6923 + t6943 + t6950 + t6963;
  t6982 = 0.148705*t6770;
  t6984 = t903 + t6742;
  t6986 = -0.038922999986*t6984;
  t6987 = t697 + t6933;
  t7005 = -0.038924*t6987;
  t7021 = t6812 + t2514;
  t7022 = -3.6777349999999994e-6*t7021;
  t7025 = 0.30000099999679997*t1013;
  t7034 = 1.8190549999999993e-12 + t6982 + t6986 + t7005 + t7022 + t7025;
  t7083 = -7.e-6*t6832;
  t7086 = 4.e-6*t6847;
  t7088 = -6.5e-11*t1013;
  t7091 = t7083 + t7086 + t7088;
  t7094 = 4.e-6*t6984;
  t7095 = 1.12e-16*t1013;
  t7096 = t6754 + t7094 + t7095;
  t7144 = -7.e-6*t6942;
  t7165 = 1.96e-16*t1013;
  t7169 = t6718 + t7144 + t7165;
  t6892 = t1974*t6890;
  t6980 = t2020*t6971;
  t7036 = t1893*t7034;
  t7037 = t6892 + t6980 + t7036;
  t7040 = t2243*t6890;
  t7044 = t2298*t6971;
  t7046 = t2211*t7034;
  t7048 = t7040 + t7044 + t7046;
  t7057 = t1337*t6890;
  t7059 = t1759*t6971;
  t7075 = t659*t7034;
  t7078 = t7057 + t7059 + t7075;
  t7261 = 4.e-6*t6733;
  t7271 = -1.000000000049*t1013;
  t7274 = t7261 + t7271;
  t7284 = -4.00000000026e-6*t1013;
  t7293 = t6837 + t7284;
  t7306 = 4.e-6*t6770;
  t7315 = t697 + t7306 + t6933;
  t7341 = t2298*t7274;
  t7344 = t2243*t7293;
  t7347 = t2211*t7315;
  t7353 = t7341 + t7344 + t7347;
  t5382 = t3089*t3672;
  t5392 = t3139*t3774;
  t5403 = t5382 + t4321 + t5392;
  t7197 = t2243*t7091;
  t7203 = t2211*t7096;
  t7204 = t2298*t7169;
  t7205 = t7197 + t7203 + t7204;
  t5439 = -1.*t2578*t3672;
  t5441 = -1.*t2609*t3774;
  t5458 = t5439 + t4385 + t5441;
  t7420 = t3321*t7091;
  t7421 = t2811*t6890;
  t7425 = t2878*t6971;
  t7426 = t3019*t7034;
  t7432 = t7169*t3391;
  t7447 = t7096*t3569;
  t7454 = t7420 + t7421 + t7425 + t7426 + t7432 + t7447;
  t7460 = -1.*t3321*t7293;
  t7471 = -1.*t2493*t6971;
  t7474 = -1.*t6890*t2520;
  t7480 = -1.*t7034*t2542;
  t7486 = -1.*t7274*t3391;
  t7489 = -1.*t7315*t3569;
  t7494 = t7460 + t7471 + t7474 + t7480 + t7486 + t7489;
  t7501 = t2811*t3321;
  t7519 = t2878*t3391;
  t7535 = t3019*t3569;
  t7540 = t7501 + t7519 + t7535;
  t7548 = -1.*t3321*t2520;
  t7554 = -1.*t2493*t3391;
  t7583 = -1.*t2542*t3569;
  t7586 = t7548 + t7554 + t7583;
  t7050 = t3025*t7048;
  t7220 = t7205*t3585;
  t7222 = t1337*t7091;
  t7234 = t659*t7096;
  t7236 = t1759*t7169;
  t7243 = t7222 + t7234 + t7236;
  t7092 = t1974*t7091;
  t7133 = t1893*t7096;
  t7176 = t2020*t7169;
  t7189 = t7092 + t7133 + t7176;
  t7257 = -1.*t7048*t2556;
  t7354 = -1.*t7353*t3585;
  t7658 = t1862*t7037;
  t7660 = t143*t7078;
  t7661 = t7658 + t7660;
  t7669 = t143*t7037;
  t7677 = -1.*t1862*t7078;
  t7692 = t7669 + t7677;
  t7278 = t2020*t7274;
  t7298 = t1974*t7293;
  t7331 = t1893*t7315;
  t7334 = t7278 + t7298 + t7331;
  t7357 = t1759*t7274;
  t7362 = t1337*t7293;
  t7376 = t659*t7315;
  t7381 = t7357 + t7362 + t7376;
  t5780 = t3188*t3809;
  t5782 = t3151*t3794;
  t5783 = t4321 + t5780 + t5782;
  t5796 = -1.*t2664*t3809;
  t5798 = -1.*t2628*t3794;
  t5800 = t4385 + t5796 + t5798;
  t6747 = t2020*t6745;
  t6760 = t1974*t6756;
  t6785 = t1893*t6778;
  t6790 = t6747 + t6760 + t6785;
  t6792 = t1759*t6745;
  t6793 = t1337*t6756;
  t6795 = t659*t6778;
  t6804 = t6792 + t6793 + t6795;
  t7874 = t1862*t6790;
  t7875 = t143*t6804;
  t7877 = t7874 + t7875;
  t7842 = t143*t6790;
  t7844 = -1.*t1862*t6804;
  t7851 = t7842 + t7844;
  t7826 = t2298*t6745;
  t7827 = t2243*t6756;
  t7833 = t2211*t6778;
  t7838 = t7826 + t7827 + t7833;
  t7855 = t129*t7851;
  t7886 = -1.*t7877*t2119;
  t7887 = t7855 + t7886;
  t7901 = t129*t7877;
  t7906 = t7851*t2119;
  t7925 = t7901 + t7906;
  t7929 = t2189*t7838;
  t7935 = -1.*t2341*t7887;
  t7936 = t7929 + t7935;
  t7727 = -1.*t1862*t7243;
  t7730 = t143*t7189;
  t7734 = t7727 + t7730;
  t7705 = t143*t7243;
  t7706 = t1862*t7189;
  t7719 = t7705 + t7706;
  t7976 = t129*t7692;
  t7977 = -1.*t7661*t2119;
  t7980 = t7976 + t7977;
  t7989 = t129*t7661;
  t7990 = t7692*t2119;
  t7994 = t7989 + t7990;
  t7775 = t143*t7334;
  t7777 = -1.*t1862*t7381;
  t7791 = t7775 + t7777;
  t7762 = t1862*t7334;
  t7763 = t143*t7381;
  t7766 = t7762 + t7763;
  t8097 = t129*t7766;
  t8098 = t7791*t2119;
  t8110 = t8097 + t8098;
  t8043 = t129*t7719;
  t8046 = t7734*t2119;
  t8048 = t8043 + t8046;
  t8022 = t3964*t7994;
  t8049 = t8048*t3975;
  t8025 = t129*t7734;
  t8028 = -1.*t7719*t2119;
  t8034 = t8025 + t8028;
  t8077 = -1.*t7994*t4065;
  t8114 = -1.*t8110*t3975;
  t8177 = t7048*t2341;
  t8183 = t2189*t7980;
  t8184 = t8177 + t8183;
  t8186 = t2189*t7048;
  t8198 = -1.*t2341*t7980;
  t8200 = t8186 + t8198;
  t8080 = t129*t7791;
  t8084 = -1.*t7766*t2119;
  t8088 = t8080 + t8084;
  t8257 = t7353*t2341;
  t8264 = t2189*t8088;
  t8269 = t8257 + t8264;
  t8205 = t7205*t2341;
  t8215 = t2189*t8034;
  t8234 = t8205 + t8215;
  t2392 = t2178*t2152;
  t2416 = -1.*t75*t2373;
  t2420 = t2392 + t2416;
  t4008 = -1.*t2556*t2341;
  t4011 = -1.*t2189*t2686;
  t4014 = t4008 + t4011;
  t8361 = t2324*t2341;
  t8365 = t2189*t2361;
  t8370 = t8361 + t8365;
  t3831 = -1.*t3025*t2341;
  t3835 = -1.*t2189*t3204;
  t3840 = t3831 + t3835;
  t8587 = -1.*t3964*t3975;
  t8624 = t2152*t3975;
  t8675 = -1.*t3964*t3812;
  t8678 = -1.*t3204*t3975;
  t8720 = t2152*t3812;
  t8723 = t2361*t3975;
  t8588 = -1.*t3886*t3827;
  t8591 = -1.*t3209*t3871;
  t8601 = t8587 + t8588 + t8591;
  t8627 = t8370*t3827;
  t8628 = t2373*t3871;
  t8629 = t8624 + t8627 + t8628;
  t8687 = -1.*t3025*t3585;
  t8688 = -1.*t3204*t3812;
  t8692 = t8687 + t8688 + t8587;
  t8701 = t2324*t3585;
  t8707 = t2361*t3812;
  t8715 = t8701 + t8707 + t8624;
  t8884 = -1.*t3964*t4955;
  t8892 = -1.*t4883*t3975;
  t8908 = t2152*t4955;
  t8913 = t4778*t3975;
  t9039 = -1.*t5438*t3585;
  t9048 = -1.*t3025*t5604;
  t9105 = t6092*t3585;
  t9117 = t2324*t5604;
  t6654 = t2189*t5372;
  t6661 = -1.*t2341*t6412;
  t6662 = t6654 + t6661;
  t6100 = t6092*t2341;
  t6203 = t2189*t6201;
  t6210 = t6100 + t6203;
  t9230 = -1.*t6305*t3975;
  t9234 = -1.*t3964*t6353;
  t6587 = t2189*t5438;
  t6589 = -1.*t2341*t6326;
  t6590 = t6587 + t6589;
  t9241 = t6222*t3975;
  t9242 = t2152*t6353;
  t9005 = -1.*t3089*t3672;
  t9010 = -1.*t3139*t3774;
  t9013 = t9005 + t8687 + t9010;
  t9025 = t2050*t3672;
  t9026 = t1841*t3774;
  t9029 = t9025 + t8701 + t9026;
  t9468 = t3321*t1586;
  t9471 = t1833*t3391;
  t9473 = t1100*t3569;
  t9477 = t9468 + t9471 + t9473;
  t9480 = -1.*t3321*t7091;
  t9483 = -1.*t2811*t6890;
  t9496 = -1.*t2878*t6971;
  t9510 = -1.*t3019*t7034;
  t9527 = -1.*t7169*t3391;
  t9528 = -1.*t7096*t3569;
  t9536 = t9480 + t9483 + t9496 + t9510 + t9527 + t9528;
  t9550 = -1.*t2811*t3321;
  t9559 = -1.*t2878*t3391;
  t9562 = -1.*t3019*t3569;
  t9563 = t9550 + t9559 + t9562;
  t9569 = t6890*t1586;
  t9583 = t3321*t6756;
  t9584 = t1100*t7034;
  t9589 = t6971*t1833;
  t9591 = t6745*t3391;
  t9602 = t6778*t3569;
  t9605 = t9569 + t9583 + t9584 + t9589 + t9591 + t9602;
  t9353 = -1.*t3025*t7048;
  t9368 = -1.*t7205*t3585;
  t9128 = -1.*t3188*t3809;
  t9130 = -1.*t3151*t3794;
  t9131 = t8687 + t9128 + t9130;
  t9136 = t2063*t3809;
  t9141 = t2106*t3794;
  t9143 = t8701 + t9136 + t9141;
  t9392 = t7048*t2324;
  t9401 = t7838*t3585;
  t8274 = t2189*t7353;
  t8279 = -1.*t2341*t8088;
  t8283 = t8274 + t8279;
  t9907 = -1.*t3964*t7994;
  t9912 = -1.*t8048*t3975;
  t8238 = t2189*t7205;
  t8239 = -1.*t2341*t8034;
  t8240 = t8238 + t8239;
  t7840 = t7838*t2341;
  t7889 = t2189*t7887;
  t7898 = t7840 + t7889;
  t9943 = t7994*t2152;
  t9951 = t7925*t3975;
  t8539 = t2178*t4065;
  t8541 = -1.*t75*t3947;
  t8542 = t8539 + t8541;
  t10295 = -1.*t2152*t3975;
  t10330 = t4065*t3975;
  t10378 = -1.*t2152*t3812;
  t10380 = -1.*t2361*t3975;
  t10386 = t4065*t3812;
  t10389 = t2686*t3975;
  t10296 = -1.*t8370*t3827;
  t10297 = -1.*t2373*t3871;
  t10301 = t10295 + t10296 + t10297;
  t10334 = t2692*t3827;
  t10340 = t3947*t3871;
  t10345 = t10330 + t10334 + t10340;
  t10369 = -1.*t2324*t3585;
  t10370 = -1.*t2361*t3812;
  t10373 = t10369 + t10370 + t10295;
  t10398 = t2556*t3585;
  t10399 = t2686*t3812;
  t10400 = t10398 + t10399 + t10330;
  t10586 = -1.*t2152*t4955;
  t10590 = -1.*t4778*t3975;
  t10613 = t4065*t4955;
  t10620 = t4831*t3975;
  t10771 = -1.*t6092*t3585;
  t10780 = -1.*t2324*t5604;
  t10807 = t5372*t3585;
  t10827 = t2556*t5604;
  t11191 = -1.*t6222*t3975;
  t11207 = -1.*t2152*t6353;
  t11218 = t6294*t3975;
  t11234 = t4065*t6353;
  t10752 = -1.*t2050*t3672;
  t10754 = -1.*t1841*t3774;
  t10755 = t10752 + t10369 + t10754;
  t10757 = t2578*t3672;
  t10763 = t2609*t3774;
  t10765 = t10757 + t10398 + t10763;
  t11569 = -1.*t3321*t1586;
  t11579 = -1.*t1833*t3391;
  t11584 = -1.*t1100*t3569;
  t11586 = t11569 + t11579 + t11584;
  t11596 = t3321*t7293;
  t11598 = t2493*t6971;
  t11599 = t6890*t2520;
  t11605 = t7034*t2542;
  t11610 = t7274*t3391;
  t11611 = t7315*t3569;
  t11613 = t11596 + t11598 + t11599 + t11605 + t11610 + t11611;
  t11615 = t3321*t2520;
  t11619 = t2493*t3391;
  t11620 = t2542*t3569;
  t11621 = t11615 + t11619 + t11620;
  t11623 = -1.*t6890*t1586;
  t11631 = -1.*t3321*t6756;
  t11650 = -1.*t1100*t7034;
  t11652 = -1.*t6971*t1833;
  t11654 = -1.*t6745*t3391;
  t11657 = -1.*t6778*t3569;
  t11662 = t11623 + t11631 + t11650 + t11652 + t11654 + t11657;
  t11430 = t7048*t2556;
  t11438 = t7353*t3585;
  t10836 = -1.*t2063*t3809;
  t10843 = -1.*t2106*t3794;
  t10844 = t10369 + t10836 + t10843;
  t10847 = t2664*t3809;
  t10848 = t2628*t3794;
  t10849 = t10398 + t10847 + t10848;
  t11459 = -1.*t7048*t2324;
  t11480 = -1.*t7838*t3585;
  t12000 = t7994*t4065;
  t12015 = t8110*t3975;
  t12051 = -1.*t7994*t2152;
  t12061 = -1.*t7925*t3975;
  t10242 = t2178*t3964;
  t10245 = -1.*t75*t3209;
  t10253 = t10242 + t10245;
  t10133 = 6.5e-11*t925;
  p_output1[0]=(-1.*t2178*t2373 - 1.*t2152*t75)*var2[1] + t2420*var2[2];
  p_output1[1]=t2373*var2[0] - 1.*t2445*t75*var2[1] + t2178*t2445*var2[2] + (t2692*(t3209*t3818 + t3209*t3827 + t3840*t3871 + t3871*t3886) + t3947*t3994 + t3886*(-1.*t2692*t3871 - 1.*t3818*t3947 - 1.*t3827*t3947 - 1.*t3871*t4014) + t3209*t4098)*var2[3];
  p_output1[2]=t2189*t4153*var2[0] + (t2178*t2361 + t2341*t4153*t75)*var2[1] + (-1.*t2178*t2341*t4153 + t2361*t75)*var2[2] + (t2189*t4098*t4264 + t2692*(t2189*t3827*t4264 - 1.*t2341*t3871*t4264 + t4287 - 1.*t2341*t3209*t4293 + t2189*t3886*t4293 + t4302) + t2189*t3994*t4354 + t3886*(-1.*t2189*t2692*t4293 + t2341*t3947*t4293 - 1.*t2189*t3827*t4354 + t2341*t3871*t4354 + t4359 + t4367))*var2[3] + (t4065*(t3812*t4264 + t4287 + t3204*t4293 + t4302) + t2686*t4335 + t3964*(-1.*t2686*t4293 - 1.*t3812*t4354 + t4359 + t4367) + t3204*t4403)*var2[4];
  p_output1[3]=t2189*t4768*var2[0] + (t2178*t4778 + t2341*t4768*t75)*var2[1] + (-1.*t2178*t2341*t4768 + t4778*t75)*var2[2] + (t2189*t4098*t4978 + t2692*(t4962 + t2189*t3827*t4978 - 1.*t2341*t3871*t4978 + t4996 - 1.*t2341*t3209*t5016 + t2189*t3886*t5016) + t2189*t3994*t5047 + t3886*(-1.*t2189*t2692*t5016 + t2341*t3947*t5016 + t5040 - 1.*t2189*t3827*t5047 + t2341*t3871*t5047 + t5052))*var2[3] + (t4335*t4831 + t4403*t4883 + t4065*(t4962 + t3812*t4978 + t4996 + t3204*t5016) + t3964*(-1.*t2686*t5016 + t5040 - 1.*t3812*t5047 + t5052))*var2[4] + (t2556*(t3151*t3809 + t3151*t4600 + t3794*t4635 + t3188*t4644) + t3025*(-1.*t2628*t3809 - 1.*t2628*t4600 - 1.*t2664*t4644 - 1.*t3794*t4696))*var2[5];
  p_output1[4]=t6210*var2[0] + (t2178*t6222 - 1.*t6242*t75)*var2[1] + (t2178*t6242 + t6222*t75)*var2[2] + (t3994*t6496 + t4098*t6543 + t2692*(t6349 + t6367 + t3827*t6543 + t3871*t6590 + t3886*t6606 + t3209*t6635) + t3886*(t6439 + t6442 - 1.*t3827*t6496 - 1.*t2692*t6606 - 1.*t3947*t6635 - 1.*t3871*t6662))*var2[3] + (t4335*t6294 + t4403*t6305 + t4065*(t5505 + t5609 + t3812*t6326 + t6349 + t6367 + t3204*t6375) + t3964*(t5728 + t5758 - 1.*t2686*t6375 - 1.*t3812*t6412 + t6439 + t6442))*var2[4] + (t5372*t5783 + t5438*t5800 + t2556*(t5505 + t5609 + t3809*t5842 + t3794*t5855 + t3151*t5866 + t3188*t5899) + t3025*(t5728 + t5758 - 1.*t2628*t5866 - 1.*t2664*t5899 - 1.*t3809*t5963 - 1.*t3794*t6006))*var2[5] + (0.15121*t5276 + 0.15121*t5320 + t5372*t5403 + t5438*t5458 + t2556*(t3672*t5487 + t5505 + t3139*t5539 + t3774*t5559 + t5609 + t3089*t5680) + t3025*(-1.*t2609*t5539 - 1.*t2578*t5680 - 1.*t3672*t5714 + t5728 - 1.*t3774*t5746 + t5758))*var2[12];
  p_output1[5]=t7898*var2[0] + (t2178*t7925 - 1.*t75*t7936)*var2[1] + (t75*t7925 + t2178*t7936)*var2[2] + (t4098*t8234 + t2692*(t8022 + t8049 + t3886*t8184 + t3209*t8200 + t3827*t8234 + t3871*t8240) + t3994*t8269 + t3886*(t8077 + t8114 - 1.*t2692*t8184 - 1.*t3947*t8200 - 1.*t3827*t8269 - 1.*t3871*t8283))*var2[3] + (t4403*t8048 + t4065*(t7050 + t7220 + t3204*t7980 + t8022 + t3812*t8034 + t8049) + t4335*t8110 + t3964*(t7257 + t7354 - 1.*t2686*t7980 + t8077 - 1.*t3812*t8088 + t8114))*var2[4] + (t5800*t7205 + t5783*t7353 + t2556*(t7050 + t7220 + t3188*t7661 + t3151*t7692 + t3809*t7719 + t3794*t7734) + t3025*(t7257 + t7354 - 1.*t2664*t7661 - 1.*t2628*t7692 - 1.*t3809*t7766 - 1.*t3794*t7791))*var2[5] + (0.15121*t6790 + 0.15121*t6804 + t5458*t7205 + t2556*(t3089*t7037 + t7050 + t3139*t7078 + t3672*t7189 + t7220 + t3774*t7243) + t5403*t7353 + t3025*(-1.*t2578*t7037 - 1.*t2609*t7078 + t7257 - 1.*t3672*t7334 + t7354 - 1.*t3774*t7381))*var2[12] + (-0.281209*t6745 + 0.038749*t6778 + 1.e-6*(-7.000000000455e-6*t1013 + t6812) + t2520*t7454 + t2811*t7494 + t7293*t7540 + t7091*t7586 - 7.e-6*(t2542*t7454 + t3019*t7494 + t7315*t7540 + t7096*t7586) + 4.e-6*(-1.*t2493*t7454 - 1.*t2878*t7494 - 1.*t7274*t7540 - 1.*t7169*t7586))*var2[13];
  p_output1[6]=t8370;
  p_output1[7]=t2420;
  p_output1[8]=t2178*t2373 + t2152*t75;
  p_output1[9]=t2692*t3994 + t3886*t4098;
  p_output1[10]=t4065*t4335 + t3964*t4403;
  p_output1[11]=t2556*t5783 + t3025*t5800;
  p_output1[12]=0.15121*t1841 + 0.15121*t2050 + t2556*t5403 + t3025*t5458;
  p_output1[13]=0.038749*t1100 - 0.281209*t1833 + 1.e-6*(t1003 + 7.e-6*t1412 + t2716) + t2520*t7540 + t2811*t7586 + 4.e-6*(-1.*t2493*t7540 - 1.*t2878*t7586) - 7.e-6*(t2542*t7540 + t3019*t7586);
  p_output1[14]=4.0519653002457196e-7;
  p_output1[15]=(-1.*t2178*t3947 - 1.*t4065*t75)*var2[1] + t8542*var2[2];
  p_output1[16]=t3947*var2[0] - 1.*t4014*t75*var2[1] + t2178*t4014*var2[2] + ((-1.*t3209*t3818 - 1.*t3209*t3827 - 1.*t3840*t3871 - 1.*t3871*t3886)*t8370 + t3886*(t2373*t3818 + t2373*t3827 + t2445*t3871 + t3871*t8370) + t2373*t8601 + t3209*t8629)*var2[3];
  p_output1[17]=t2189*t4354*var2[0] + (t2178*t2686 + t2341*t4354*t75)*var2[1] + (-1.*t2178*t2341*t4354 + t2686*t75)*var2[2] + (t2189*t4153*t8601 + t2189*t4264*t8629 + t8370*(-1.*t2189*t3827*t4264 + t2341*t3871*t4264 + t2341*t3209*t4293 - 1.*t2189*t3886*t4293 + t8675 + t8678) + t3886*(t2189*t3827*t4153 - 1.*t2341*t3871*t4153 - 1.*t2341*t2373*t4293 + t2189*t4293*t8370 + t8720 + t8723))*var2[3] + (t2152*(-1.*t3812*t4264 - 1.*t3204*t4293 + t8675 + t8678) + t2361*t8692 + t3204*t8715 + t3964*(t3812*t4153 + t2361*t4293 + t8720 + t8723))*var2[4];
  p_output1[18]=t2189*t5047*var2[0] + (t2178*t4831 + t2341*t5047*t75)*var2[1] + (-1.*t2178*t2341*t5047 + t4831*t75)*var2[2] + (t2189*t4768*t8601 + t2189*t4978*t8629 + t8370*(-1.*t2189*t3827*t4978 + t2341*t3871*t4978 + t2341*t3209*t5016 - 1.*t2189*t3886*t5016 + t8884 + t8892) + t3886*(t2189*t3827*t4768 - 1.*t2341*t3871*t4768 - 1.*t2341*t2373*t5016 + t2189*t5016*t8370 + t8908 + t8913))*var2[3] + (t4778*t8692 + t4883*t8715 + t2152*(-1.*t3812*t4978 - 1.*t3204*t5016 + t8884 + t8892) + t3964*(t3812*t4768 + t2361*t5016 + t8908 + t8913))*var2[4] + (t2324*(-1.*t3151*t3809 - 1.*t3151*t4600 - 1.*t3794*t4635 - 1.*t3188*t4644) + t3025*(t2106*t3809 + t2106*t4600 + t2063*t4644 + t3794*t4764))*var2[5];
  p_output1[19]=t6496*var2[0] + (t2178*t6294 - 1.*t6662*t75)*var2[1] + (t2178*t6662 + t6294*t75)*var2[2] + (t6210*t8601 + t6543*t8629 + t8370*(-1.*t3827*t6543 - 1.*t3871*t6590 - 1.*t3886*t6606 - 1.*t3209*t6635 + t9230 + t9234) + t3886*(t3827*t6210 + t3871*t6242 + t2373*t6635 + t6606*t8370 + t9241 + t9242))*var2[3] + (t6222*t8692 + t6305*t8715 + t2152*(-1.*t3812*t6326 - 1.*t3204*t6375 + t9039 + t9048 + t9230 + t9234) + t3964*(t3812*t6201 + t2361*t6375 + t9105 + t9117 + t9241 + t9242))*var2[4] + (t2324*(-1.*t3809*t5842 - 1.*t3794*t5855 - 1.*t3151*t5866 - 1.*t3188*t5899 + t9039 + t9048) + t3025*(t2106*t5866 + t2063*t5899 + t3794*t6160 + t3809*t6198 + t9105 + t9117) + t6092*t9131 + t5438*t9143)*var2[5] + (0.15121*t5714 + 0.15121*t5746 + t6092*t9013 + t5438*t9029 + t2324*(-1.*t3672*t5487 - 1.*t3139*t5539 - 1.*t3774*t5559 - 1.*t3089*t5680 + t9039 + t9048) + t3025*(t3774*t5276 + t3672*t5320 + t1841*t5539 + t2050*t5680 + t9105 + t9117))*var2[12];
  p_output1[20]=t8269*var2[0] + (t2178*t8110 - 1.*t75*t8283)*var2[1] + (t75*t8110 + t2178*t8283)*var2[2] + (t7898*t8601 + t8234*t8629 + t8370*(-1.*t3886*t8184 - 1.*t3209*t8200 - 1.*t3827*t8234 - 1.*t3871*t8240 + t9907 + t9912) + t3886*(t3827*t7898 + t3871*t7936 + t2373*t8200 + t8184*t8370 + t9943 + t9951))*var2[3] + (t7925*t8692 + t8048*t8715 + t2152*(-1.*t3204*t7980 - 1.*t3812*t8034 + t9353 + t9368 + t9907 + t9912) + t3964*(t3812*t7887 + t2361*t7980 + t9392 + t9401 + t9943 + t9951))*var2[4] + (t7838*t9131 + t7205*t9143 + t2324*(-1.*t3188*t7661 - 1.*t3151*t7692 - 1.*t3809*t7719 - 1.*t3794*t7734 + t9353 + t9368) + t3025*(t2063*t7661 + t2106*t7692 + t3794*t7851 + t3809*t7877 + t9392 + t9401))*var2[5] + (0.15121*t7334 + 0.15121*t7381 + t7838*t9013 + t7205*t9029 + t2324*(-1.*t3089*t7037 - 1.*t3139*t7078 - 1.*t3672*t7189 - 1.*t3774*t7243 + t9353 + t9368) + t3025*(t3672*t6790 + t3774*t6804 + t2050*t7037 + t1841*t7078 + t9392 + t9401))*var2[12] + (1.e-6*(4.00000000026e-6*t1013 + t6718) - 0.281209*t7274 + 0.038749*t7315 + t7091*t9477 + t1586*t9536 + t6756*t9563 + t2811*t9605 + 4.e-6*(-1.*t7169*t9477 - 1.*t1833*t9536 - 1.*t6745*t9563 - 1.*t2878*t9605) - 7.e-6*(t7096*t9477 + t1100*t9536 + t6778*t9563 + t3019*t9605))*var2[13];
  p_output1[21]=t2692;
  p_output1[22]=t8542;
  p_output1[23]=t2178*t3947 + t4065*t75;
  p_output1[24]=t8370*t8601 + t3886*t8629;
  p_output1[25]=t2152*t8692 + t3964*t8715;
  p_output1[26]=t2324*t9131 + t3025*t9143;
  p_output1[27]=0.15121*t2578 + 0.15121*t2609 + t2324*t9013 + t3025*t9029;
  p_output1[28]=-0.281209*t2493 + 0.038749*t2542 + 1.e-6*(4.e-6*(-1. + t10133) + t1800 + t2694) + t2811*t9477 + t1586*t9563 - 7.e-6*(t3019*t9477 + t1100*t9563) + 4.e-6*(-1.*t2878*t9477 - 1.*t1833*t9563);
  p_output1[29]=0.29999995910920463;
  p_output1[30]=(-1.*t2178*t3209 - 1.*t3964*t75)*var2[1] + t10253*var2[2];
  p_output1[31]=t3209*var2[0] - 1.*t3840*t75*var2[1] + t2178*t3840*var2[2] + (t10345*t2373 + t10301*t3947 + (t2692*t3871 + t3818*t3947 + t3827*t3947 + t3871*t4014)*t8370 + t2692*(-1.*t2373*t3818 - 1.*t2373*t3827 - 1.*t2445*t3871 - 1.*t3871*t8370))*var2[3];
  p_output1[32]=t2189*t4264*var2[0] + (t2178*t3204 + t2341*t4264*t75)*var2[1] + (-1.*t2178*t2341*t4264 + t3204*t75)*var2[2] + (t10345*t2189*t4153 + t10301*t2189*t4354 + (t10386 + t10389 + t2189*t2692*t4293 - 1.*t2341*t3947*t4293 + t2189*t3827*t4354 - 1.*t2341*t3871*t4354)*t8370 + t2692*(t10378 + t10380 - 1.*t2189*t3827*t4153 + t2341*t3871*t4153 + t2341*t2373*t4293 - 1.*t2189*t4293*t8370))*var2[3] + (t10400*t2361 + t10373*t2686 + t4065*(t10378 + t10380 - 1.*t3812*t4153 - 1.*t2361*t4293) + t2152*(t10386 + t10389 + t2686*t4293 + t3812*t4354))*var2[4];
  p_output1[33]=t2189*t4978*var2[0] + (t2178*t4883 + t2341*t4978*t75)*var2[1] + (-1.*t2178*t2341*t4978 + t4883*t75)*var2[2] + (t10345*t2189*t4768 + t10301*t2189*t5047 + (t10613 + t10620 + t2189*t2692*t5016 - 1.*t2341*t3947*t5016 + t2189*t3827*t5047 - 1.*t2341*t3871*t5047)*t8370 + t2692*(t10586 + t10590 - 1.*t2189*t3827*t4768 + t2341*t3871*t4768 + t2341*t2373*t5016 - 1.*t2189*t5016*t8370))*var2[3] + (t10400*t4778 + t10373*t4831 + t4065*(t10586 + t10590 - 1.*t3812*t4768 - 1.*t2361*t5016) + t2152*(t10613 + t10620 + t2686*t5016 + t3812*t5047))*var2[4] + (t2324*(t2628*t3809 + t2628*t4600 + t2664*t4644 + t3794*t4696) + t2556*(-1.*t2106*t3809 - 1.*t2106*t4600 - 1.*t2063*t4644 - 1.*t3794*t4764))*var2[5];
  p_output1[34]=t6543*var2[0] + (t2178*t6305 - 1.*t6590*t75)*var2[1] + (t2178*t6590 + t6305*t75)*var2[2] + (t10345*t6210 + t10301*t6496 + (t11218 + t11234 + t3827*t6496 + t2692*t6606 + t3947*t6635 + t3871*t6662)*t8370 + t2692*(t11191 + t11207 - 1.*t3827*t6210 - 1.*t3871*t6242 - 1.*t2373*t6635 - 1.*t6606*t8370))*var2[3] + (t10400*t6222 + t10373*t6294 + t4065*(t10771 + t10780 + t11191 + t11207 - 1.*t3812*t6201 - 1.*t2361*t6375) + t2152*(t10807 + t10827 + t11218 + t11234 + t2686*t6375 + t3812*t6412))*var2[4] + (t10844*t5372 + t2324*(t10807 + t10827 + t2628*t5866 + t2664*t5899 + t3809*t5963 + t3794*t6006) + t10849*t6092 + t2556*(t10771 + t10780 - 1.*t2106*t5866 - 1.*t2063*t5899 - 1.*t3794*t6160 - 1.*t3809*t6198))*var2[5] + (t10755*t5372 + 0.15121*t5487 + 0.15121*t5559 + t2556*(t10771 + t10780 - 1.*t3774*t5276 - 1.*t3672*t5320 - 1.*t1841*t5539 - 1.*t2050*t5680) + t2324*(t10807 + t10827 + t2609*t5539 + t2578*t5680 + t3672*t5714 + t3774*t5746) + t10765*t6092)*var2[12];
  p_output1[35]=t8234*var2[0] + (t2178*t8048 - 1.*t75*t8240)*var2[1] + (t75*t8048 + t2178*t8240)*var2[2] + (t10345*t7898 + t10301*t8269 + (t12000 + t12015 + t2692*t8184 + t3947*t8200 + t3827*t8269 + t3871*t8283)*t8370 + t2692*(t12051 + t12061 - 1.*t3827*t7898 - 1.*t3871*t7936 - 1.*t2373*t8200 - 1.*t8184*t8370))*var2[3] + (t10400*t7925 + t4065*(t11459 + t11480 + t12051 + t12061 - 1.*t3812*t7887 - 1.*t2361*t7980) + t2152*(t11430 + t11438 + t12000 + t12015 + t2686*t7980 + t3812*t8088) + t10373*t8110)*var2[4] + (t10844*t7353 + t2324*(t11430 + t11438 + t2664*t7661 + t2628*t7692 + t3809*t7766 + t3794*t7791) + t10849*t7838 + t2556*(t11459 + t11480 - 1.*t2063*t7661 - 1.*t2106*t7692 - 1.*t3794*t7851 - 1.*t3809*t7877))*var2[5] + (t2556*(t11459 + t11480 - 1.*t3672*t6790 - 1.*t3774*t6804 - 1.*t2050*t7037 - 1.*t1841*t7078) + 0.15121*t7189 + 0.15121*t7243 + t10755*t7353 + t2324*(t11430 + t11438 + t2578*t7037 + t2609*t7078 + t3672*t7334 + t3774*t7381) + t10765*t7838)*var2[12] + (t11613*t1586 + t11662*t2520 + t11621*t6756 + 1.e-6*(6.5e-11*t1013 + 7.e-6*t6832 + 4.e-6*t6839) + 0.038749*t7096 - 0.281209*t7169 + 4.e-6*(-1.*t11613*t1833 - 1.*t11662*t2493 - 1.*t11621*t6745 - 1.*t11586*t7274) + t11586*t7293 - 7.e-6*(t1100*t11613 + t11662*t2542 + t11621*t6778 + t11586*t7315))*var2[13];
  p_output1[36]=t3886;
  p_output1[37]=t10253;
  p_output1[38]=t2178*t3209 + t3964*t75;
  p_output1[39]=t10301*t2692 + t10345*t8370;
  p_output1[40]=t10400*t2152 + t10373*t4065;
  p_output1[41]=t10849*t2324 + t10844*t2556;
  p_output1[42]=t10765*t2324 + t10755*t2556 + 0.15121*t3089 + 0.15121*t3139;
  p_output1[43]=t11621*t1586 + 4.e-6*(-1.*t11621*t1833 - 1.*t11586*t2493) + t11586*t2520 - 7.e-6*(t1100*t11621 + t11586*t2542) - 0.281209*t2878 + 0.038749*t3019 + 1.e-6*(-1. + t10133 + 7.e-6*t2743 + 4.e-6*t3315);
  p_output1[44]=-2.5986500000000035e-7;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 45, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_dh_RlFoot_QuadrupleStance.hh"

namespace QuadrupleStance
{

void J_dh_RlFoot_QuadrupleStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
