/*
 * Automatically Generated from Mathematica.
 * Wed 8 Dec 2021 22:33:20 GMT+01:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t687;
  double t956;
  double t957;
  double t1056;
  double t379;
  double t1882;
  double t1024;
  double t1511;
  double t1512;
  double t2501;
  double t2555;
  double t1973;
  double t2080;
  double t2118;
  double t2207;
  double t2290;
  double t2573;
  double t2724;
  double t2796;
  double t3094;
  double t380;
  double t515;
  double t591;
  double t1749;
  double t2439;
  double t3015;
  double t3066;
  double t342;
  double t3117;
  double t3269;
  double t3377;
  double t3446;
  double t3453;
  double t3465;
  double t252;
  double t3573;
  double t3596;
  double t3632;
  double t3093;
  double t3480;
  double t3555;
  double t3675;
  double t3697;
  double t3566;
  double t3682;
  double t3695;
  double t72;
  double t3791;
  double t3808;
  double t3810;
  double t3823;
  double t3934;
  double t3959;
  double t3996;
  double t4011;
  double t4019;
  double t4044;
  double t4075;
  double t4077;
  double t4120;
  double t4122;
  double t4127;
  double t4229;
  double t4257;
  double t4266;
  double t4299;
  double t4310;
  double t4323;
  double t4332;
  double t4347;
  double t4351;
  double t4353;
  double t4354;
  double t4357;
  double t4372;
  double t4407;
  double t4457;
  double t4463;
  double t4494;
  double t4525;
  double t4553;
  double t4585;
  double t4587;
  double t4749;
  double t4822;
  double t4827;
  double t4838;
  double t4953;
  double t4962;
  double t4965;
  double t4982;
  double t4988;
  double t5013;
  double t5324;
  double t5326;
  double t5373;
  double t5375;
  double t5396;
  double t5411;
  double t5412;
  double t5417;
  double t5418;
  double t5432;
  double t5433;
  double t5438;
  double t5440;
  double t5445;
  double t5455;
  double t5477;
  double t5479;
  double t5577;
  double t5615;
  double t5626;
  double t5627;
  double t5629;
  double t5633;
  double t5635;
  double t5639;
  double t5641;
  double t5646;
  double t5647;
  double t5665;
  double t5666;
  double t5668;
  double t5673;
  double t5674;
  double t5678;
  double t4759;
  double t4891;
  double t4920;
  double t4932;
  double t4975;
  double t5069;
  double t5086;
  double t5102;
  double t5103;
  double t5105;
  double t5117;
  double t5118;
  double t5121;
  double t5123;
  double t5151;
  double t5153;
  double t5180;
  double t5272;
  double t5289;
  double t5414;
  double t5437;
  double t5508;
  double t5564;
  double t5620;
  double t5655;
  double t5683;
  double t5691;
  double t5694;
  double t5704;
  double t5725;
  double t5727;
  double t5730;
  double t5739;
  double t5756;
  double t5806;
  double t5808;
  double t4294;
  double t4352;
  double t4377;
  double t4380;
  double t4503;
  double t4600;
  double t4614;
  double t4623;
  double t4627;
  double t4648;
  double t4660;
  double t4693;
  double t4695;
  double t5785;
  double t5795;
  double t5798;
  double t5763;
  double t5769;
  double t5778;
  double t5881;
  double t5980;
  double t5999;
  double t5575;
  double t5758;
  double t5760;
  double t6003;
  double t4402;
  double t4736;
  double t4739;
  double t5813;
  double t6023;
  double t6025;
  double t6026;
  double t6063;
  double t6205;
  double t6209;
  double t6246;
  double t6288;
  double t6134;
  double t6138;
  double t6140;
  double t6013;
  double t6020;
  double t6021;
  double t6039;
  double t6397;
  double t6400;
  double t6417;
  double t6524;
  double t6453;
  double t6156;
  double t6445;
  double t6471;
  double t6502;
  double t6503;
  double t6505;
  double t6587;
  double t6590;
  double t6608;
  double t6609;
  double t6615;
  double t6040;
  double t6048;
  double t6053;
  double t6157;
  double t6169;
  double t6182;
  double t6924;
  double t6944;
  double t6964;
  double t6965;
  double t6968;
  double t6969;
  double t7063;
  double t7067;
  double t7068;
  double t7070;
  double t7074;
  double t7075;
  double t7087;
  double t7091;
  double t7092;
  double t7095;
  double t6992;
  double t7000;
  double t7004;
  double t6971;
  double t6896;
  double t6913;
  double t6914;
  double t6530;
  double t6564;
  double t6584;
  double t7198;
  double t7199;
  double t7200;
  double t7157;
  double t7159;
  double t7160;
  double t7174;
  double t7178;
  double t7179;
  double t7126;
  double t7130;
  double t6635;
  double t6636;
  double t6642;
  double t7144;
  double t7183;
  double t7190;
  double t7191;
  double t7202;
  double t7211;
  double t7219;
  double t7220;
  double t7221;
  double t7351;
  double t7352;
  double t7358;
  double t7359;
  double t7361;
  double t7362;
  double t7376;
  double t7379;
  double t7424;
  double t7433;
  double t7437;
  double t7442;
  double t7443;
  double t7445;
  double t7451;
  double t7464;
  double t7466;
  double t7467;
  double t7468;
  double t7469;
  double t7595;
  double t7604;
  double t7608;
  double t7611;
  double t7616;
  double t7625;
  double t7447;
  double t7472;
  double t7473;
  double t7475;
  double t7481;
  double t7484;
  double t7538;
  double t7554;
  double t7564;
  double t7509;
  double t7518;
  double t7804;
  double t7574;
  double t7696;
  double t7996;
  double t7997;
  double t7998;
  double t8009;
  double t8039;
  double t8065;
  double t8096;
  double t8112;
  double t7387;
  double t7396;
  double t7413;
  double t7360;
  double t7383;
  double t7384;
  double t7666;
  double t7667;
  double t7672;
  double t7609;
  double t7650;
  double t7663;
  double t7686;
  double t8305;
  double t8316;
  double t8334;
  double t7528;
  double t8298;
  double t8300;
  double t8301;
  double t8492;
  double t8608;
  double t8692;
  double t8723;
  double t8764;
  double t8802;
  double t8240;
  double t8241;
  double t8253;
  double t8180;
  double t8194;
  double t8206;
  double t8149;
  double t8150;
  double t8225;
  double t8264;
  double t8279;
  double t9154;
  double t9159;
  double t9225;
  double t9230;
  double t9231;
  double t9232;
  double t9013;
  double t9014;
  double t9015;
  double t8428;
  double t8451;
  double t8477;
  double t8343;
  double t8938;
  double t9254;
  double t9255;
  double t9258;
  double t9011;
  double t9078;
  double t9245;
  double t9249;
  double t9250;
  double t9271;
  double t9275;
  double t9279;
  double t9284;
  double t9285;
  double t9286;
  double t9320;
  double t9321;
  double t9322;
  double t9324;
  double t9442;
  double t9458;
  double t9555;
  double t9556;
  double t9323;
  double t9476;
  double t9558;
  double t9560;
  double t9563;
  double t9568;
  double t9585;
  double t9589;
  double t9617;
  double t9618;
  double t9621;
  double t9622;
  double t9623;
  double t9630;
  double t9631;
  double t9648;
  double t9620;
  double t9625;
  double t9649;
  double t9650;
  double t9652;
  double t9653;
  double t9654;
  double t9655;
  double t7713;
  double t7718;
  double t7728;
  double t9688;
  double t9689;
  double t9691;
  double t9692;
  double t9561;
  double t9595;
  double t9602;
  double t9612;
  double t9613;
  double t9614;
  double t9672;
  double t9676;
  double t9681;
  double t9684;
  double t9687;
  double t7978;
  double t7982;
  double t7983;
  double t7984;
  double t9717;
  double t9718;
  double t9720;
  double t9703;
  double t9961;
  double t9966;
  double t9967;
  double t9968;
  double t9969;
  double t9970;
  double t9971;
  double t9977;
  double t9978;
  double t9979;
  double t9973;
  double t9974;
  double t9975;
  double t9716;
  double t9719;
  double t9721;
  double t9722;
  double t9724;
  double t9725;
  double t9726;
  double t9727;
  double t10085;
  double t10092;
  double t10100;
  double t10070;
  double t10074;
  double t10076;
  double t10058;
  double t10061;
  double t10062;
  double t10066;
  double t10077;
  double t10101;
  double t10102;
  double t10109;
  double t10115;
  double t10116;
  double t10119;
  double t10120;
  double t10121;
  double t9662;
  double t9663;
  double t9664;
  double t9651;
  double t9659;
  double t9660;
  double t9696;
  double t10146;
  double t10150;
  double t10154;
  double t10159;
  double t10160;
  double t10161;
  double t10171;
  double t10172;
  double t10173;
  double t10158;
  double t10178;
  double t10179;
  double t10183;
  double t10175;
  double t10177;
  double t10192;
  double t10193;
  double t10197;
  double t10203;
  double t10211;
  double t10216;
  double t10223;
  double t10225;
  double t10228;
  double t4113;
  double t4116;
  double t7338;
  double t7339;
  double t7342;
  double t7801;
  double t7810;
  double t7817;
  double t7838;
  double t10494;
  double t10500;
  double t10501;
  double t10502;
  double t6082;
  double t6101;
  double t6109;
  double t10257;
  double t10258;
  double t10259;
  double t5831;
  double t5853;
  double t5876;
  double t4188;
  double t10589;
  double t10631;
  double t10664;
  double t10680;
  double t10592;
  double t10605;
  double t10615;
  double t10701;
  double t10702;
  double t10633;
  double t10634;
  double t10635;
  double t10690;
  double t10691;
  double t10692;
  double t10706;
  double t10707;
  double t10708;
  double t10788;
  double t10790;
  double t10796;
  double t10798;
  double t10854;
  double t10887;
  double t9297;
  double t9298;
  double t9299;
  double t10882;
  double t10855;
  double t8172;
  double t8281;
  double t8290;
  double t10999;
  double t11002;
  double t9264;
  double t9265;
  double t9266;
  double t11006;
  double t11012;
  double t10890;
  double t10891;
  double t10892;
  double t11139;
  double t10964;
  double t10965;
  double t10966;
  double t10970;
  double t11228;
  double t11270;
  double t11271;
  double t11272;
  double t11273;
  double t11274;
  double t11275;
  double t11276;
  double t11311;
  double t11385;
  double t11386;
  double t11282;
  double t11284;
  double t11303;
  double t10233;
  double t10237;
  double t10238;
  double t11138;
  double t11413;
  double t10069;
  double t10103;
  double t10104;
  double t11418;
  double t11420;
  double t10547;
  double t10552;
  double t10833;
  double t10846;
  double t10847;
  double t10896;
  double t10897;
  double t10898;
  double t10899;
  double t11612;
  double t11613;
  double t11614;
  double t11615;
  double t11676;
  double t11687;
  double t11711;
  double t11712;
  double t11677;
  double t11678;
  double t11679;
  double t11721;
  double t11722;
  double t11688;
  double t11689;
  double t11690;
  double t11716;
  double t11717;
  double t11718;
  double t11726;
  double t11727;
  double t11728;
  double t11973;
  double t11998;
  double t12022;
  double t12023;
  double t12057;
  double t12070;
  double t12069;
  double t12058;
  double t12123;
  double t12126;
  double t12130;
  double t12133;
  double t12061;
  double t12062;
  double t12063;
  double t12073;
  double t12074;
  double t12075;
  double t12089;
  double t12090;
  double t12092;
  double t12094;
  double t12104;
  double t12107;
  double t12108;
  double t12109;
  double t12341;
  double t12354;
  double t12413;
  double t12414;
  double t12415;
  double t12416;
  double t12417;
  double t12418;
  double t12419;
  double t12405;
  double t12406;
  double t12407;
  double t12408;
  double t12409;
  double t12410;
  double t12411;
  double t12400;
  double t12401;
  double t12402;
  double t12403;
  double t12395;
  double t12396;
  double t12397;
  double t12398;
  double t12356;
  double t12339;
  double t12430;
  double t12432;
  double t12440;
  double t12442;
  double t11661;
  double t11663;
  double t11664;
  t687 = Cos(var1[11]);
  t956 = -1.*t687;
  t957 = 1. + t956;
  t1056 = Sin(var1[11]);
  t379 = Cos(var1[10]);
  t1882 = Sin(var1[10]);
  t1024 = -1.7408e-8*t957;
  t1511 = -3.999964e-6*t1056;
  t1512 = t1024 + t1511;
  t2501 = -1.*t379;
  t2555 = 1. + t2501;
  t1973 = -1.000000000016*t957;
  t2080 = 1. + t1973;
  t2118 = 0.999991*t2080;
  t2207 = 0.004352*t1056;
  t2290 = t2118 + t2207;
  t2573 = -0.004352*t687;
  t2724 = 0.999991*t1056;
  t2796 = t2573 + t2724;
  t3094 = Sin(var1[9]);
  t380 = -1. + t379;
  t515 = 1.6e-11*t380;
  t591 = 1. + t515;
  t1749 = t591*t1512;
  t2439 = -4.e-6*t1882*t2290;
  t3015 = 4.e-6*t2555*t2796;
  t3066 = 0. + t1749 + t2439 + t3015;
  t342 = Cos(var1[9]);
  t3117 = 4.e-6*t1882*t1512;
  t3269 = -1.000000000016*t2555;
  t3377 = 1. + t3269;
  t3446 = t3377*t2290;
  t3453 = -1.*t1882*t2796;
  t3465 = 0. + t3117 + t3446 + t3453;
  t252 = Cos(var1[5]);
  t3573 = -1.*t3094*t3066;
  t3596 = t342*t3465;
  t3632 = 0. + t3573 + t3596;
  t3093 = t342*t3066;
  t3480 = t3094*t3465;
  t3555 = 0. + t3093 + t3480;
  t3675 = Sin(var1[5]);
  t3697 = Cos(var1[3]);
  t3566 = t252*t3555;
  t3682 = t3632*t3675;
  t3695 = 0. + t3566 + t3682;
  t72 = Sin(var1[3]);
  t3791 = Cos(var1[4]);
  t3808 = 4.e-6*t2555*t1512;
  t3810 = t1882*t2290;
  t3823 = t379*t2796;
  t3934 = 0. + t3808 + t3810 + t3823;
  t3959 = t3791*t3934;
  t3996 = Sin(var1[4]);
  t4011 = t252*t3632;
  t4019 = -1.*t3555*t3675;
  t4044 = 0. + t4011 + t4019;
  t4075 = -1.*t3996*t4044;
  t4077 = 0. + t3959 + t4075;
  t4120 = -1.*t3934*t3996;
  t4122 = -1.*t3791*t4044;
  t4127 = t4120 + t4122;
  t4229 = 0.004352*t2080;
  t4257 = -0.9999910000159999*t1056;
  t4266 = t4229 + t4257;
  t4299 = 1.6e-11*t957;
  t4310 = -1. + t4299;
  t4323 = 4.e-6*t4310;
  t4332 = 3.999964e-6*t957;
  t4347 = -1.7408e-8*t1056;
  t4351 = t4323 + t4332 + t4347;
  t4353 = -1. + t687;
  t4354 = 1.6e-11*t4353;
  t4357 = 0.999991*t687;
  t4372 = t4354 + t4357 + t2207;
  t4407 = -4.e-6*t1882*t4266;
  t4457 = t591*t4351;
  t4463 = 4.e-6*t2555*t4372;
  t4494 = 0. + t4407 + t4457 + t4463;
  t4525 = t3377*t4266;
  t4553 = 4.e-6*t1882*t4351;
  t4585 = -1.*t1882*t4372;
  t4587 = 0. + t4525 + t4553 + t4585;
  t4749 = -1. + t4299 + t4354;
  t4822 = 4.e-6*t4353;
  t4827 = -4.e-6*t687;
  t4838 = t4822 + t4827;
  t4953 = t591*t4749;
  t4962 = 4.e-6*t2555*t4838;
  t4965 = t4953 + t4962;
  t4982 = 4.e-6*t4749*t1882;
  t4988 = -1.*t4838*t1882;
  t5013 = t4982 + t4988;
  t5324 = -1.26e-8*var1[11];
  t5326 = 1. + t4354;
  t5373 = -0.14871*t5326;
  t5375 = -1.64779999997447e-7*t957;
  t5396 = -1.59556e-7*t4353;
  t5411 = -1.199987999968e-6*t1056;
  t5412 = t5324 + t5373 + t5375 + t5396 + t5411;
  t5417 = 0.803147*t2080;
  t5418 = 0.50315000001605*t957;
  t5432 = 0.00130540515936178*t1056;
  t5433 = t5417 + t5418 + t5432;
  t5438 = -5.04e-14*var1[11];
  t5440 = -0.03988959484*t957;
  t5445 = 6.38224e-13*t4353;
  t5455 = -0.041195*t687;
  t5477 = 0.299996999992*t1056;
  t5479 = t5438 + t5440 + t5445 + t5455 + t5477;
  t5577 = -1.*t342;
  t5615 = 1. + t5577;
  t5626 = -0.15121*t3094;
  t5627 = -1.2484e-7*var1[10];
  t5629 = 2.479936e-18*t2555;
  t5633 = -1.54996e-7*t380;
  t5635 = 1.124840000016e-6*t1882;
  t5639 = t591*t5412;
  t5641 = -4.e-6*t1882*t5433;
  t5646 = 4.e-6*t2555*t5479;
  t5647 = t5627 + t5629 + t5633 + t5635 + t5639 + t5641 + t5646;
  t5665 = 0.281210000008499*t2555;
  t5666 = -0.03874900000062*t1882;
  t5668 = 4.e-6*t1882*t5412;
  t5673 = t3377*t5433;
  t5674 = -1.*t1882*t5479;
  t5678 = t5665 + t5666 + t5668 + t5673 + t5674;
  t4759 = 4.e-6*t2555*t4749;
  t4891 = t379*t4838;
  t4920 = t4759 + t4891;
  t4932 = t4920*t3791;
  t4975 = -1.*t4965*t3094;
  t5069 = t342*t5013;
  t5086 = t4975 + t5069;
  t5102 = t252*t5086;
  t5103 = t342*t4965;
  t5105 = t3094*t5013;
  t5117 = t5103 + t5105;
  t5118 = -1.*t5117*t3675;
  t5121 = t5102 + t5118;
  t5123 = -1.*t3996*t5121;
  t5151 = t4932 + t5123;
  t5153 = -4.9936e-13*var1[10];
  t5180 = -0.038749*t2555;
  t5272 = 6.19984e-13*t380;
  t5289 = -0.281210000004*t1882;
  t5414 = 4.e-6*t2555*t5412;
  t5437 = t1882*t5433;
  t5508 = t379*t5479;
  t5564 = 0. + t5153 + t5180 + t5272 + t5289 + t5414 + t5437 + t5508;
  t5620 = 0.15121*t5615;
  t5655 = -1.*t3094*t5647;
  t5683 = t342*t5678;
  t5691 = t5620 + t5626 + t5655 + t5683;
  t5694 = t252*t5691;
  t5704 = -0.15121*t5615;
  t5725 = t342*t5647;
  t5727 = t3094*t5678;
  t5730 = t5704 + t5626 + t5725 + t5727;
  t5739 = -1.*t5730*t3675;
  t5756 = 0. + t5694 + t5739;
  t5806 = t3791*t5564;
  t5808 = -1.*t3996*t5756;
  t4294 = t1882*t4266;
  t4352 = 4.e-6*t2555*t4351;
  t4377 = t379*t4372;
  t4380 = 0. + t4294 + t4352 + t4377;
  t4503 = -1.*t3094*t4494;
  t4600 = t342*t4587;
  t4614 = 0. + t4503 + t4600;
  t4623 = t252*t4614;
  t4627 = t342*t4494;
  t4648 = t3094*t4587;
  t4660 = 0. + t4627 + t4648;
  t4693 = -1.*t4660*t3675;
  t4695 = 0. + t4623 + t4693;
  t5785 = t4920*t3996;
  t5795 = t3791*t5121;
  t5798 = t5785 + t5795;
  t5763 = t5564*t3996;
  t5769 = t3791*t5756;
  t5778 = 0. + t5763 + t5769;
  t5881 = 0. + t5806 + t5808;
  t5980 = t3791*t4380;
  t5999 = -1.*t3996*t4695;
  t5575 = -1.*t5564*t3996;
  t5758 = -1.*t3791*t5756;
  t5760 = t5575 + t5758;
  t6003 = t5980 + t5999;
  t4402 = t4380*t3996;
  t4736 = t3791*t4695;
  t4739 = 0. + t4402 + t4736;
  t5813 = t5806 + t5808;
  t6023 = t252*t5730;
  t6025 = t5691*t3675;
  t6026 = 0. + t6023 + t6025;
  t6063 = 0. + t5980 + t5999;
  t6205 = -1.*t252*t3555;
  t6209 = -1.*t3632*t3675;
  t6246 = t6205 + t6209;
  t6288 = t4011 + t4019;
  t6134 = t252*t4660;
  t6138 = t4614*t3675;
  t6140 = 0. + t6134 + t6138;
  t6013 = t252*t5117;
  t6020 = t5086*t3675;
  t6021 = t6013 + t6020;
  t6039 = t6021*t6026;
  t6397 = -1.*t252*t5730;
  t6400 = -1.*t5691*t3675;
  t6417 = t6397 + t6400;
  t6524 = t4623 + t4693;
  t6453 = t5694 + t5739;
  t6156 = -1.*t6140*t6026;
  t6445 = t5121*t6026;
  t6471 = t6021*t6453;
  t6502 = -1.*t252*t5117;
  t6503 = -1.*t5086*t3675;
  t6505 = t6502 + t6503;
  t6587 = -1.*t6524*t6026;
  t6590 = -1.*t6140*t6453;
  t6608 = -1.*t252*t4660;
  t6609 = -1.*t4614*t3675;
  t6615 = t6608 + t6609;
  t6040 = t5798*t5778;
  t6048 = t5151*t5881;
  t6053 = t6039 + t6040 + t6048;
  t6157 = -1.*t4739*t5778;
  t6169 = -1.*t6063*t5881;
  t6182 = t6156 + t6157 + t6169;
  t6924 = -0.15121*t342;
  t6944 = t6924 + t5626 + t5655 + t5683;
  t6964 = 0.15121*t3094;
  t6965 = -1.*t342*t5647;
  t6968 = -1.*t3094*t5678;
  t6969 = t6924 + t6964 + t6965 + t6968;
  t7063 = -1.*t342*t3066;
  t7067 = -1.*t3094*t3465;
  t7068 = t7063 + t7067;
  t7070 = t252*t7068;
  t7074 = t3573 + t3596;
  t7075 = -1.*t7074*t3675;
  t7087 = t7070 + t7075;
  t7091 = t252*t7074;
  t7092 = t7068*t3675;
  t7095 = t7091 + t7092;
  t6992 = -1.*t342*t4965;
  t7000 = -1.*t3094*t5013;
  t7004 = t6992 + t7000;
  t6971 = t4503 + t4600;
  t6896 = -1.*t342*t4494;
  t6913 = -1.*t3094*t4587;
  t6914 = t6896 + t6913;
  t6530 = t4920*t5564;
  t6564 = t5121*t5756;
  t6584 = t6530 + t6039 + t6564;
  t7198 = t252*t6971;
  t7199 = t6914*t3675;
  t7200 = t7198 + t7199;
  t7157 = t252*t6969;
  t7159 = -1.*t6944*t3675;
  t7160 = t7157 + t7159;
  t7174 = t252*t6944;
  t7178 = t6969*t3675;
  t7179 = t7174 + t7178;
  t7126 = t7004*t3675;
  t7130 = t5102 + t7126;
  t6635 = -1.*t4380*t5564;
  t6636 = -1.*t4695*t5756;
  t6642 = t6635 + t6156 + t6636;
  t7144 = t7130*t6026;
  t7183 = t6021*t7179;
  t7190 = t252*t7004;
  t7191 = t7190 + t6503;
  t7202 = -1.*t7200*t6026;
  t7211 = -1.*t6140*t7179;
  t7219 = t252*t6914;
  t7220 = -1.*t6971*t3675;
  t7221 = t7219 + t7220;
  t7351 = -1.000000000016*t1882*t4266;
  t7352 = 4.e-6*t379*t4351;
  t7358 = -1.*t379*t4372;
  t7359 = t7351 + t7352 + t7358;
  t7361 = -4.e-6*t379*t4266;
  t7362 = -1.6e-11*t1882*t4351;
  t7376 = 4.e-6*t1882*t4372;
  t7379 = t7361 + t7362 + t7376;
  t7424 = -0.03874900000062*t379;
  t7433 = 0.281210000008499*t1882;
  t7437 = 4.e-6*t379*t5412;
  t7442 = -1.000000000016*t1882*t5433;
  t7443 = -1.*t379*t5479;
  t7445 = t7424 + t7433 + t7437 + t7442 + t7443;
  t7451 = 1.124840000016e-6*t379;
  t7464 = 1.5499600000248e-7*t1882;
  t7466 = -1.6e-11*t1882*t5412;
  t7467 = -4.e-6*t379*t5433;
  t7468 = 4.e-6*t1882*t5479;
  t7469 = -1.2484e-7 + t7451 + t7464 + t7466 + t7467 + t7468;
  t7595 = 4.e-6*t379*t4749;
  t7604 = -1.*t379*t4838;
  t7608 = t7595 + t7604;
  t7611 = -1.6e-11*t4749*t1882;
  t7616 = 4.e-6*t4838*t1882;
  t7625 = t7611 + t7616;
  t7447 = t3094*t7445;
  t7472 = t342*t7469;
  t7473 = t7447 + t7472;
  t7475 = t342*t7445;
  t7481 = -1.*t3094*t7469;
  t7484 = t7475 + t7481;
  t7538 = -0.281210000004*t379;
  t7554 = t379*t5433;
  t7564 = -4.9936e-13 + t7538 + t5666 + t5668 + t7554 + t5674;
  t7509 = t379*t4266;
  t7518 = t7509 + t4553 + t4585;
  t7804 = t5153 + t5180 + t5272 + t5289 + t5414 + t5437 + t5508;
  t7574 = -1.*t4380*t7564;
  t7696 = t4920*t7564;
  t7996 = 4.e-6*t379*t1512;
  t7997 = -1.000000000016*t1882*t2290;
  t7998 = -1.*t379*t2796;
  t8009 = t7996 + t7997 + t7998;
  t8039 = -1.6e-11*t1882*t1512;
  t8065 = -4.e-6*t379*t2290;
  t8096 = 4.e-6*t1882*t2796;
  t8112 = t8039 + t8065 + t8096;
  t7387 = t3094*t7359;
  t7396 = t342*t7379;
  t7413 = t7387 + t7396;
  t7360 = t342*t7359;
  t7383 = -1.*t3094*t7379;
  t7384 = t7360 + t7383;
  t7666 = t7608*t3094;
  t7667 = t342*t7625;
  t7672 = t7666 + t7667;
  t7609 = t342*t7608;
  t7650 = -1.*t3094*t7625;
  t7663 = t7609 + t7650;
  t7686 = t5013*t5564;
  t8305 = t252*t7672;
  t8316 = t7663*t3675;
  t8334 = t8305 + t8316;
  t7528 = -1.*t7518*t5564;
  t8298 = t252*t7413;
  t8300 = t7384*t3675;
  t8301 = t8298 + t8300;
  t8492 = t252*t7484;
  t8608 = -1.*t7473*t3675;
  t8692 = t8492 + t8608;
  t8723 = t252*t7473;
  t8764 = t7484*t3675;
  t8802 = t8723 + t8764;
  t8240 = t3094*t8009;
  t8241 = t342*t8112;
  t8253 = t8240 + t8241;
  t8180 = t342*t8009;
  t8194 = -1.*t3094*t8112;
  t8206 = t8180 + t8194;
  t8149 = t379*t2290;
  t8150 = t3117 + t8149 + t3453;
  t8225 = t252*t8206;
  t8264 = -1.*t8253*t3675;
  t8279 = t8225 + t8264;
  t9154 = t252*t8253;
  t9159 = t8206*t3675;
  t9225 = t9154 + t9159;
  t9230 = t3791*t8150;
  t9231 = -1.*t3996*t8279;
  t9232 = t9230 + t9231;
  t9013 = t252*t7384;
  t9014 = -1.*t7413*t3675;
  t9015 = t9013 + t9014;
  t8428 = t252*t7663;
  t8451 = -1.*t7672*t3675;
  t8477 = t8428 + t8451;
  t8343 = t8334*t6026;
  t8938 = t6021*t8802;
  t9254 = t5013*t3996;
  t9255 = t3791*t8477;
  t9258 = t9254 + t9255;
  t9011 = -1.*t8301*t6026;
  t9078 = -1.*t6140*t8802;
  t9245 = t7518*t3996;
  t9249 = t3791*t9015;
  t9250 = t9245 + t9249;
  t9271 = t7564*t3996;
  t9275 = t3791*t8692;
  t9279 = t9271 + t9275;
  t9284 = t3791*t7564;
  t9285 = -1.*t3996*t8692;
  t9286 = t9284 + t9285;
  t9320 = 0.00130540515936178*t687;
  t9321 = -0.2999969999968001*t1056;
  t9322 = t9320 + t9321;
  t9324 = -1.199987999968e-6*t687;
  t9442 = -5.2216206374471e-9*t1056;
  t9458 = -1.26e-8 + t9324 + t9442;
  t9555 = 0.299996999992*t687;
  t9556 = -5.04e-14 + t9555 + t5432;
  t9323 = -4.e-6*t1882*t9322;
  t9476 = t591*t9458;
  t9558 = 4.e-6*t2555*t9556;
  t9560 = t9323 + t9476 + t9558;
  t9563 = t3377*t9322;
  t9568 = 4.e-6*t1882*t9458;
  t9585 = -1.*t1882*t9556;
  t9589 = t9563 + t9568 + t9585;
  t9617 = 0.004352*t687;
  t9618 = t9617 + t4257;
  t9621 = -0.9999910000159999*t687;
  t9622 = -0.00435200000006963*t1056;
  t9623 = t9621 + t9622;
  t9630 = -1.7408e-8*t687;
  t9631 = 3.999964000064e-6*t1056;
  t9648 = t9630 + t9631;
  t9620 = 4.e-6*t2555*t9618;
  t9625 = -4.e-6*t1882*t9623;
  t9649 = t591*t9648;
  t9650 = t9620 + t9625 + t9649;
  t9652 = -1.*t1882*t9618;
  t9653 = t3377*t9623;
  t9654 = 4.e-6*t1882*t9648;
  t9655 = t9652 + t9653 + t9654;
  t7713 = t5086*t5691;
  t7718 = t5117*t5730;
  t7728 = t7713 + t7718 + t6530;
  t9688 = t379*t9618;
  t9689 = t1882*t9623;
  t9691 = 4.e-6*t2555*t9648;
  t9692 = t9688 + t9689 + t9691;
  t9561 = -1.*t3094*t9560;
  t9595 = t342*t9589;
  t9602 = t9561 + t9595;
  t9612 = t342*t9560;
  t9613 = t3094*t9589;
  t9614 = t9612 + t9613;
  t9672 = t1882*t9322;
  t9676 = 4.e-6*t2555*t9458;
  t9681 = t379*t9556;
  t9684 = t9672 + t9676 + t9681;
  t9687 = -1.*t9684*t4380;
  t7978 = t4965*t5647;
  t7982 = t4920*t7804;
  t7983 = t5013*t5678;
  t7984 = t7978 + t7982 + t7983;
  t9717 = -3.999964e-6*t687;
  t9718 = t9717 + t4347;
  t9720 = t4357 + t2207;
  t9703 = t4920*t9684;
  t9961 = -1.*t4266*t9322;
  t9966 = -1.*t4351*t9458;
  t9967 = -1.*t5412*t9648;
  t9968 = -1.*t9623*t5433;
  t9969 = -1.*t9556*t4372;
  t9970 = -1.*t9618*t5479;
  t9971 = t9961 + t9966 + t9967 + t9968 + t9969 + t9970;
  t9977 = t4749*t9458;
  t9978 = t4838*t9556;
  t9979 = t9977 + t9978;
  t9973 = t4749*t5412;
  t9974 = t4838*t5479;
  t9975 = t9973 + t9974;
  t9716 = -4.e-6*t1882*t9618;
  t9719 = t591*t9718;
  t9721 = 4.e-6*t2555*t9720;
  t9722 = t9716 + t9719 + t9721;
  t9724 = t3377*t9618;
  t9725 = 4.e-6*t1882*t9718;
  t9726 = -1.*t1882*t9720;
  t9727 = t9724 + t9725 + t9726;
  t10085 = t342*t9722;
  t10092 = t3094*t9727;
  t10100 = t10085 + t10092;
  t10070 = -1.*t3094*t9722;
  t10074 = t342*t9727;
  t10076 = t10070 + t10074;
  t10058 = t1882*t9618;
  t10061 = 4.e-6*t2555*t9718;
  t10062 = t379*t9720;
  t10066 = t10058 + t10061 + t10062;
  t10077 = t252*t10076;
  t10101 = -1.*t10100*t3675;
  t10102 = t10077 + t10101;
  t10109 = t252*t10100;
  t10115 = t10076*t3675;
  t10116 = t10109 + t10115;
  t10119 = t3791*t10066;
  t10120 = -1.*t3996*t10102;
  t10121 = t10119 + t10120;
  t9662 = t342*t9650;
  t9663 = t3094*t9655;
  t9664 = t9662 + t9663;
  t9651 = -1.*t3094*t9650;
  t9659 = t342*t9655;
  t9660 = t9651 + t9659;
  t9696 = -1.*t9692*t5564;
  t10146 = t252*t9614;
  t10150 = t9602*t3675;
  t10154 = t10146 + t10150;
  t10159 = t252*t9602;
  t10160 = -1.*t9614*t3675;
  t10161 = t10159 + t10160;
  t10171 = t252*t9664;
  t10172 = t9660*t3675;
  t10173 = t10171 + t10172;
  t10158 = t6021*t10154;
  t10178 = t252*t9660;
  t10179 = -1.*t9664*t3675;
  t10183 = t10178 + t10179;
  t10175 = -1.*t10154*t6140;
  t10177 = -1.*t10173*t6026;
  t10192 = t9684*t3996;
  t10193 = t3791*t10161;
  t10197 = t10192 + t10193;
  t10203 = t3791*t9684;
  t10211 = -1.*t3996*t10161;
  t10216 = t10203 + t10211;
  t10223 = t9692*t3996;
  t10225 = t3791*t10183;
  t10228 = t10223 + t10225;
  t4113 = t3697*t3695;
  t4116 = -1.*t72*t4077;
  t7338 = -1.*t4614*t5691;
  t7339 = -1.*t4660*t5730;
  t7342 = t7338 + t7339 + t6635;
  t7801 = -1.*t4494*t5647;
  t7810 = -1.*t4380*t7804;
  t7817 = -1.*t4587*t5678;
  t7838 = t7801 + t7810 + t7817;
  t10494 = -1.*t5412*t4351;
  t10500 = -1.*t4266*t5433;
  t10501 = -1.*t4372*t5479;
  t10502 = t10494 + t10500 + t10501;
  t6082 = -1.*t4380*t3996;
  t6101 = -1.*t3791*t4695;
  t6109 = t6082 + t6101;
  t10257 = t3934*t3996;
  t10258 = t3791*t4044;
  t10259 = 0. + t10257 + t10258;
  t5831 = -1.*t4920*t3996;
  t5853 = -1.*t3791*t5121;
  t5876 = t5831 + t5853;
  t4188 = t3959 + t4075;
  t10589 = -1.*t6021*t6026;
  t10631 = t6026*t3695;
  t10664 = -1.*t5121*t6026;
  t10680 = -1.*t6021*t6453;
  t10592 = -1.*t5798*t5778;
  t10605 = -1.*t5151*t5881;
  t10615 = t10589 + t10592 + t10605;
  t10701 = t6453*t3695;
  t10702 = t6026*t6288;
  t10633 = t5778*t10259;
  t10634 = t5881*t4077;
  t10635 = t10631 + t10633 + t10634;
  t10690 = -1.*t4920*t5564;
  t10691 = -1.*t5121*t5756;
  t10692 = t10690 + t10589 + t10691;
  t10706 = t5564*t3934;
  t10707 = t5756*t4044;
  t10708 = t10706 + t10631 + t10707;
  t10788 = -1.*t7130*t6026;
  t10790 = -1.*t6021*t7179;
  t10796 = t7179*t3695;
  t10798 = t6026*t7095;
  t10854 = t7564*t3934;
  t10887 = -1.*t4920*t7564;
  t9297 = t3791*t7518;
  t9298 = -1.*t3996*t9015;
  t9299 = t9297 + t9298;
  t10882 = -1.*t5013*t5564;
  t10855 = t5564*t8150;
  t8172 = t8150*t3996;
  t8281 = t3791*t8279;
  t8290 = t8172 + t8281;
  t10999 = -1.*t8334*t6026;
  t11002 = -1.*t6021*t8802;
  t9264 = t3791*t5013;
  t9265 = -1.*t3996*t8477;
  t9266 = t9264 + t9265;
  t11006 = t8802*t3695;
  t11012 = t6026*t9225;
  t10890 = -1.*t5086*t5691;
  t10891 = -1.*t5117*t5730;
  t10892 = t10890 + t10891 + t10690;
  t11139 = t9684*t3934;
  t10964 = -1.*t4965*t5647;
  t10965 = -1.*t4920*t7804;
  t10966 = -1.*t5013*t5678;
  t10970 = t10964 + t10965 + t10966;
  t11228 = -1.*t4920*t9684;
  t11270 = t5412*t9718;
  t11271 = t1512*t9458;
  t11272 = t9618*t5433;
  t11273 = t9322*t2290;
  t11274 = t9720*t5479;
  t11275 = t9556*t2796;
  t11276 = t11270 + t11271 + t11272 + t11273 + t11274 + t11275;
  t11311 = -1.*t4749*t9458;
  t11385 = -1.*t4838*t9556;
  t11386 = t11311 + t11385;
  t11282 = -1.*t4749*t5412;
  t11284 = -1.*t4838*t5479;
  t11303 = t11282 + t11284;
  t10233 = t3791*t9692;
  t10237 = -1.*t3996*t10183;
  t10238 = t10233 + t10237;
  t11138 = t10066*t5564;
  t11413 = -1.*t6021*t10154;
  t10069 = t10066*t3996;
  t10103 = t3791*t10102;
  t10104 = t10069 + t10103;
  t11418 = t10116*t6026;
  t11420 = t10154*t3695;
  t10547 = t3697*t6140;
  t10552 = -1.*t72*t6063;
  t10833 = t5691*t3632;
  t10846 = t5730*t3555;
  t10847 = t10833 + t10846 + t10706;
  t10896 = t5647*t3066;
  t10897 = t7804*t3934;
  t10898 = t5678*t3465;
  t10899 = t10896 + t10897 + t10898;
  t11612 = t1512*t5412;
  t11613 = t5433*t2290;
  t11614 = t5479*t2796;
  t11615 = t11612 + t11613 + t11614;
  t11676 = t6140*t6026;
  t11687 = -1.*t6026*t3695;
  t11711 = t6524*t6026;
  t11712 = t6140*t6453;
  t11677 = t4739*t5778;
  t11678 = t6063*t5881;
  t11679 = t11676 + t11677 + t11678;
  t11721 = -1.*t6453*t3695;
  t11722 = -1.*t6026*t6288;
  t11688 = -1.*t5778*t10259;
  t11689 = -1.*t5881*t4077;
  t11690 = t11687 + t11688 + t11689;
  t11716 = t4380*t5564;
  t11717 = t4695*t5756;
  t11718 = t11716 + t11676 + t11717;
  t11726 = -1.*t5564*t3934;
  t11727 = -1.*t5756*t4044;
  t11728 = t11726 + t11687 + t11727;
  t11973 = t7200*t6026;
  t11998 = t6140*t7179;
  t12022 = -1.*t7179*t3695;
  t12023 = -1.*t6026*t7095;
  t12057 = -1.*t7564*t3934;
  t12070 = t4380*t7564;
  t12069 = t7518*t5564;
  t12058 = -1.*t5564*t8150;
  t12123 = t8301*t6026;
  t12126 = t6140*t8802;
  t12130 = -1.*t8802*t3695;
  t12133 = -1.*t6026*t9225;
  t12061 = -1.*t5691*t3632;
  t12062 = -1.*t5730*t3555;
  t12063 = t12061 + t12062 + t11726;
  t12073 = t4614*t5691;
  t12074 = t4660*t5730;
  t12075 = t12073 + t12074 + t11716;
  t12089 = -1.*t5647*t3066;
  t12090 = -1.*t7804*t3934;
  t12092 = -1.*t5678*t3465;
  t12094 = t12089 + t12090 + t12092;
  t12104 = t4494*t5647;
  t12107 = t4380*t7804;
  t12108 = t4587*t5678;
  t12109 = t12104 + t12107 + t12108;
  t12341 = -1.*t9684*t3934;
  t12354 = t9684*t4380;
  t12413 = t4266*t9322;
  t12414 = t4351*t9458;
  t12415 = t5412*t9648;
  t12416 = t9623*t5433;
  t12417 = t9556*t4372;
  t12418 = t9618*t5479;
  t12419 = t12413 + t12414 + t12415 + t12416 + t12417 + t12418;
  t12405 = -1.*t5412*t9718;
  t12406 = -1.*t1512*t9458;
  t12407 = -1.*t9618*t5433;
  t12408 = -1.*t9322*t2290;
  t12409 = -1.*t9720*t5479;
  t12410 = -1.*t9556*t2796;
  t12411 = t12405 + t12406 + t12407 + t12408 + t12409 + t12410;
  t12400 = t5412*t4351;
  t12401 = t4266*t5433;
  t12402 = t4372*t5479;
  t12403 = t12400 + t12401 + t12402;
  t12395 = -1.*t1512*t5412;
  t12396 = -1.*t5433*t2290;
  t12397 = -1.*t5479*t2796;
  t12398 = t12395 + t12396 + t12397;
  t12356 = t9692*t5564;
  t12339 = -1.*t10066*t5564;
  t12430 = t10154*t6140;
  t12432 = t10173*t6026;
  t12440 = -1.*t10116*t6026;
  t12442 = -1.*t10154*t3695;
  t11661 = t3697*t6021;
  t11663 = -1.*t72*t5151;
  t11664 = t11661 + t11663;
  p_output1[0]=(-1.*t3697*t4077 - 1.*t3695*t72)*var2[1] + (t4113 + t4116)*var2[2];
  p_output1[1]=t4188*var2[0] - 1.*t4127*t72*var2[1] + t3697*t4127*var2[2] + (t4739*(t5151*t5760 + t5151*t5778 + t5798*t5813 + t5876*t5881) + t6003*t6053 + t5798*(-1.*t4739*t5813 - 1.*t5778*t6003 - 1.*t5760*t6063 - 1.*t5881*t6109) + t5151*t6182)*var2[3];
  p_output1[2]=t3791*t6246*var2[0] + (t3697*t6288 + t3996*t6246*t72)*var2[1] + (-1.*t3697*t3996*t6246 + t6288*t72)*var2[2] + (t3791*t6182*t6505 + t4739*(-1.*t3996*t5151*t6417 + t3791*t5798*t6417 + t6445 + t6471 + t3791*t5778*t6505 - 1.*t3996*t5881*t6505) + t3791*t6053*t6615 + t5798*(-1.*t3791*t4739*t6417 + t3996*t6063*t6417 + t6587 + t6590 - 1.*t3791*t5778*t6615 + t3996*t5881*t6615))*var2[3] + (t6140*(t5121*t6417 + t6445 + t6471 + t5756*t6505) + t6524*t6584 + t6021*(-1.*t4695*t6417 + t6587 + t6590 - 1.*t5756*t6615) + t5121*t6642)*var2[4];
  p_output1[3]=t3791*t7087*var2[0] + (t3697*t7095 + t3996*t7087*t72)*var2[1] + (-1.*t3697*t3996*t7087 + t7095*t72)*var2[2] + (t3791*t6182*t7191 + t4739*(t7144 - 1.*t3996*t5151*t7160 + t3791*t5798*t7160 + t7183 + t3791*t5778*t7191 - 1.*t3996*t5881*t7191) + t3791*t6053*t7221 + t5798*(-1.*t3791*t4739*t7160 + t3996*t6063*t7160 + t7202 + t7211 - 1.*t3791*t5778*t7221 + t3996*t5881*t7221))*var2[3] + (t6642*t7130 + t6140*(t7144 + t5121*t7160 + t7183 + t5756*t7191) + t6584*t7200 + t6021*(-1.*t4695*t7160 + t7202 + t7211 - 1.*t5756*t7221))*var2[4] + (t4920*(-1.*t5691*t6914 - 1.*t4660*t6944 - 1.*t4614*t6969 - 1.*t5730*t6971) + t4380*(t5086*t5730 + t5117*t6944 + t5086*t6969 + t5691*t7004))*var2[5];
  p_output1[4]=t8290*var2[0] + (t3697*t9225 - 1.*t72*t9232)*var2[1] + (t72*t9225 + t3697*t9232)*var2[2] + (t6053*t9250 + t6182*t9258 + t4739*(t8343 + t8938 + t5778*t9258 + t5881*t9266 + t5798*t9279 + t5151*t9286) + t5798*(t9011 + t9078 - 1.*t5778*t9250 - 1.*t4739*t9279 - 1.*t6063*t9286 - 1.*t5881*t9299))*var2[3] + (t6584*t8301 + t6642*t8334 + t6140*(t7686 + t7696 + t8343 + t5756*t8477 + t5121*t8692 + t8938) + t6021*(t7528 + t7574 - 1.*t4695*t8692 + t9011 - 1.*t5756*t9015 + t9078))*var2[4] + (t5013*t7342 + t4920*(-1.*t5691*t7384 - 1.*t5730*t7413 - 1.*t4660*t7473 - 1.*t4614*t7484 + t7528 + t7574) + t4380*(t5117*t7473 + t5086*t7484 + t5691*t7663 + t5730*t7672 + t7686 + t7696) + t7518*t7728)*var2[5] + (t4380*(t5013*t7445 + t4965*t7469 + t5678*t7608 + t5647*t7625 + t7696 + t5013*t7804) + t4920*(-1.*t5678*t7359 - 1.*t5647*t7379 - 1.*t4587*t7445 - 1.*t4494*t7469 + t7574 - 1.*t7518*t7804) + t5013*t7838 + t7518*t7984 - 0.15121*t8009 - 0.15121*t8112)*var2[9];
  p_output1[5]=t10104*var2[0] + (t10116*t3697 - 1.*t10121*t72)*var2[1] + (t10121*t3697 + t10116*t72)*var2[2] + (t4739*(t10158 + t10216*t5151 + t10197*t5798) + t10228*t6053 + t5798*(t10175 + t10177 - 1.*t10197*t4739 - 1.*t10228*t5778 - 1.*t10238*t5881 - 1.*t10216*t6063))*var2[3] + (t10173*t6584 + t6021*(t10175 + t10177 - 1.*t10161*t4695 - 1.*t10183*t5756 + t9687 + t9696) + t6140*(t10158 + t10161*t5121 + t9703))*var2[4] + (t7728*t9692 + t4920*(-1.*t4614*t9602 - 1.*t4660*t9614 - 1.*t5691*t9660 - 1.*t5730*t9664 + t9687 + t9696) + t4380*(t5086*t9602 + t5117*t9614 + t9703))*var2[5] + (t7984*t9692 + t4920*(-1.*t4494*t9560 - 1.*t4587*t9589 - 1.*t5647*t9650 - 1.*t5678*t9655 + t9687 - 1.*t7804*t9692) + t4380*(t4965*t9560 + t5013*t9589 + t9703) - 0.15121*t9722 - 0.15121*t9727)*var2[9] + (-0.038749*t9618 + 1.e-6*t9718 - 0.28121*t9720 - 1.*t4749*t9971 - 1.*t9648*t9975 - 1.*t4351*t9979 + 4.e-6*(-1.*t4838*t9971 - 1.*t9618*t9975 - 1.*t4372*t9979))*var2[10];
  p_output1[6]=t10259;
  p_output1[7]=0. + t4113 + t4116;
  p_output1[8]=0. + t3697*t4077 + t3695*t72;
  p_output1[9]=t4739*t6053 + t5798*t6182;
  p_output1[10]=t6140*t6584 + t6021*t6642;
  p_output1[11]=t4920*t7342 + t4380*t7728;
  p_output1[12]=-0.15121*t3066 - 0.15121*t3465 + t4920*t7838 + t4380*t7984;
  p_output1[13]=1.e-6*t1512 - 0.038749*t2290 - 0.28121*t2796 - 1.*t10502*t4749 - 1.*t4351*t9975 + 4.e-6*(-1.*t10502*t4838 - 1.*t4372*t9975);
  p_output1[14]=-1.9353204325022392e-7;
  p_output1[15]=(-1.*t3697*t6063 - 1.*t6140*t72)*var2[1] + (t10547 + t10552)*var2[2];
  p_output1[16]=t6003*var2[0] - 1.*t6109*t72*var2[1] + t3697*t6109*var2[2] + (t10615*t4188 + t10635*t5151 + t5798*(t4077*t5760 + t4188*t5778 + t10259*t5813 + t4127*t5881) + t10259*(-1.*t5151*t5760 - 1.*t5151*t5778 - 1.*t5798*t5813 - 1.*t5876*t5881))*var2[3];
  p_output1[17]=t3791*t6615*var2[0] + (t3697*t6524 + t3996*t6615*t72)*var2[1] + (-1.*t3697*t3996*t6615 + t6524*t72)*var2[2] + (t10615*t3791*t6246 + t5798*(t10701 + t10702 + t3791*t5778*t6246 - 1.*t3996*t5881*t6246 + t10259*t3791*t6417 - 1.*t3996*t4077*t6417) + t10635*t3791*t6505 + t10259*(t10664 + t10680 + t3996*t5151*t6417 - 1.*t3791*t5798*t6417 - 1.*t3791*t5778*t6505 + t3996*t5881*t6505))*var2[3] + (t10708*t5121 + t10692*t6288 + t6021*(t10701 + t10702 + t5756*t6246 + t4044*t6417) + t3695*(t10664 + t10680 - 1.*t5121*t6417 - 1.*t5756*t6505))*var2[4];
  p_output1[18]=t3791*t7221*var2[0] + (t3697*t7200 + t3996*t72*t7221)*var2[1] + (t72*t7200 - 1.*t3697*t3996*t7221)*var2[2] + (t10615*t3791*t7087 + t5798*(t10796 + t10798 + t3791*t5778*t7087 - 1.*t3996*t5881*t7087 + t10259*t3791*t7160 - 1.*t3996*t4077*t7160) + t10635*t3791*t7191 + t10259*(t10788 + t10790 + t3996*t5151*t7160 - 1.*t3791*t5798*t7160 - 1.*t3791*t5778*t7191 + t3996*t5881*t7191))*var2[3] + (t10692*t7095 + t10708*t7130 + t6021*(t10796 + t10798 + t5756*t7087 + t4044*t7160) + t3695*(t10788 + t10790 - 1.*t5121*t7160 - 1.*t5756*t7191))*var2[4] + (t3934*(-1.*t5086*t5730 - 1.*t5117*t6944 - 1.*t5086*t6969 - 1.*t5691*t7004) + t4920*(t3555*t6944 + t3632*t6969 + t5691*t7068 + t5730*t7074))*var2[5];
  p_output1[19]=t9250*var2[0] + (t3697*t8301 - 1.*t72*t9299)*var2[1] + (t72*t8301 + t3697*t9299)*var2[2] + (t10615*t8290 + t10635*t9258 + t5798*(t11006 + t11012 + t5778*t8290 + t5881*t9232 + t10259*t9279 + t4077*t9286) + t10259*(t10999 + t11002 - 1.*t5778*t9258 - 1.*t5881*t9266 - 1.*t5798*t9279 - 1.*t5151*t9286))*var2[3] + (t10708*t8334 + t6021*(t10854 + t10855 + t11006 + t11012 + t5756*t8279 + t4044*t8692) + t3695*(t10882 + t10887 + t10999 + t11002 - 1.*t5756*t8477 - 1.*t5121*t8692) + t10692*t9225)*var2[4] + (t10847*t5013 + t3934*(t10882 + t10887 - 1.*t5117*t7473 - 1.*t5086*t7484 - 1.*t5691*t7663 - 1.*t5730*t7672) + t10892*t8150 + t4920*(t10854 + t10855 + t3555*t7473 + t3632*t7484 + t5691*t8206 + t5730*t8253))*var2[5] + (t10899*t5013 - 0.15121*t7359 - 0.15121*t7379 + t3934*(t10887 - 1.*t5013*t7445 - 1.*t4965*t7469 - 1.*t5678*t7608 - 1.*t5647*t7625 - 1.*t5013*t7804) + t10970*t8150 + t4920*(t10854 + t3465*t7445 + t3066*t7469 + t5678*t8009 + t5647*t8112 + t7804*t8150))*var2[9];
  p_output1[20]=t10228*var2[0] + (t10173*t3697 - 1.*t10238*t72)*var2[1] + (t10238*t3697 + t10173*t72)*var2[2] + (t10104*t10615 + t10259*(t11413 - 1.*t10216*t5151 - 1.*t10197*t5798) + t5798*(t10197*t10259 + t11418 + t11420 + t10216*t4077 + t10104*t5778 + t10121*t5881))*var2[3] + (t10116*t10692 + t3695*(t11228 + t11413 - 1.*t10161*t5121) + (t11138 + t11139 + t11418 + t11420 + t10161*t4044 + t10102*t5756)*t6021)*var2[4] + (t10066*t10892 + t4920*(t11138 + t11139 + t10076*t5691 + t10100*t5730 + t3632*t9602 + t3555*t9614) + t3934*(t11228 - 1.*t5086*t9602 - 1.*t5117*t9614))*var2[5] + (t10066*t10970 + t3934*(t11228 - 1.*t4965*t9560 - 1.*t5013*t9589) - 0.15121*t9650 - 0.15121*t9655 + t4920*(t11139 + t10066*t7804 + t3066*t9560 + t3465*t9589 + t5647*t9722 + t5678*t9727))*var2[9] + (-1.*t11386*t1512 - 1.*t11276*t4749 - 0.28121*t9618 - 0.038749*t9623 + 1.e-6*t9648 - 1.*t11303*t9718 + 4.e-6*(-1.*t11386*t2796 - 1.*t11276*t4838 - 1.*t11303*t9720))*var2[10];
  p_output1[21]=t4739;
  p_output1[22]=0. + t10547 + t10552;
  p_output1[23]=0. + t3697*t6063 + t6140*t72;
  p_output1[24]=t10259*t10615 + t10635*t5798;
  p_output1[25]=t10692*t3695 + t10708*t6021;
  p_output1[26]=t10892*t3934 + t10847*t4920;
  p_output1[27]=t10970*t3934 - 0.15121*t4494 - 0.15121*t4587 + t10899*t4920;
  p_output1[28]=-1.*t11303*t1512 - 0.038749*t4266 + 1.e-6*t4351 - 0.28121*t4372 - 1.*t11615*t4749 + 4.e-6*(-1.*t11303*t2796 - 1.*t11615*t4838);
  p_output1[29]=0.29999998115510645;
  p_output1[30]=(-1.*t3697*t5151 - 1.*t6021*t72)*var2[1] + t11664*var2[2];
  p_output1[31]=t5151*var2[0] - 1.*t5876*t72*var2[1] + t3697*t5876*var2[2] + (t11679*t4188 + t4739*(-1.*t4077*t5760 - 1.*t4188*t5778 - 1.*t10259*t5813 - 1.*t4127*t5881) + t11690*t6003 + t10259*(t4739*t5813 + t5778*t6003 + t5760*t6063 + t5881*t6109))*var2[3];
  p_output1[32]=t3791*t6505*var2[0] + (t3697*t5121 + t3996*t6505*t72)*var2[1] + (-1.*t3697*t3996*t6505 + t5121*t72)*var2[2] + (t11679*t3791*t6246 + t4739*(t11721 + t11722 - 1.*t3791*t5778*t6246 + t3996*t5881*t6246 - 1.*t10259*t3791*t6417 + t3996*t4077*t6417) + t11690*t3791*t6615 + t10259*(t11711 + t11712 + t3791*t4739*t6417 - 1.*t3996*t6063*t6417 + t3791*t5778*t6615 - 1.*t3996*t5881*t6615))*var2[3] + (t11718*t6288 + t6140*(t11721 + t11722 - 1.*t5756*t6246 - 1.*t4044*t6417) + t11728*t6524 + t3695*(t11711 + t11712 + t4695*t6417 + t5756*t6615))*var2[4];
  p_output1[33]=t3791*t7191*var2[0] + (t3697*t7130 + t3996*t7191*t72)*var2[1] + (-1.*t3697*t3996*t7191 + t7130*t72)*var2[2] + (t11679*t3791*t7087 + t4739*(t12022 + t12023 - 1.*t3791*t5778*t7087 + t3996*t5881*t7087 - 1.*t10259*t3791*t7160 + t3996*t4077*t7160) + t11690*t3791*t7221 + t10259*(t11973 + t11998 + t3791*t4739*t7160 - 1.*t3996*t6063*t7160 + t3791*t5778*t7221 - 1.*t3996*t5881*t7221))*var2[3] + (t11718*t7095 + t6140*(t12022 + t12023 - 1.*t5756*t7087 - 1.*t4044*t7160) + t11728*t7200 + t3695*(t11973 + t11998 + t4695*t7160 + t5756*t7221))*var2[4] + (t3934*(t5691*t6914 + t4660*t6944 + t4614*t6969 + t5730*t6971) + t4380*(-1.*t3555*t6944 - 1.*t3632*t6969 - 1.*t5691*t7068 - 1.*t5730*t7074))*var2[5];
  p_output1[34]=t9258*var2[0] + (t3697*t8334 - 1.*t72*t9266)*var2[1] + (t72*t8334 + t3697*t9266)*var2[2] + (t11679*t8290 + t11690*t9250 + t4739*(t12130 + t12133 - 1.*t5778*t8290 - 1.*t5881*t9232 - 1.*t10259*t9279 - 1.*t4077*t9286) + t10259*(t12123 + t12126 + t5778*t9250 + t4739*t9279 + t6063*t9286 + t5881*t9299))*var2[3] + (t11728*t8301 + t6140*(t12057 + t12058 + t12130 + t12133 - 1.*t5756*t8279 - 1.*t4044*t8692) + t3695*(t12069 + t12070 + t12123 + t12126 + t4695*t8692 + t5756*t9015) + t11718*t9225)*var2[4] + (t3934*(t12069 + t12070 + t5691*t7384 + t5730*t7413 + t4660*t7473 + t4614*t7484) + t12063*t7518 + t12075*t8150 + t4380*(t12057 + t12058 - 1.*t3555*t7473 - 1.*t3632*t7484 - 1.*t5691*t8206 - 1.*t5730*t8253))*var2[5] + (t12094*t7518 - 0.15121*t7608 - 0.15121*t7625 + t3934*(t12070 + t5678*t7359 + t5647*t7379 + t4587*t7445 + t4494*t7469 + t7518*t7804) + t12109*t8150 + t4380*(t12057 - 1.*t3465*t7445 - 1.*t3066*t7469 - 1.*t5678*t8009 - 1.*t5647*t8112 - 1.*t7804*t8150))*var2[9];
  p_output1[35]=(t10104*t11679 + t10228*t11690 + t4739*(-1.*t10197*t10259 + t12440 + t12442 - 1.*t10216*t4077 - 1.*t10104*t5778 - 1.*t10121*t5881) + t10259*(t12430 + t12432 + t10197*t4739 + t10228*t5778 + t10238*t5881 + t10216*t6063))*var2[3] + (t10116*t11718 + t10173*t11728 + t3695*(t12354 + t12356 + t12430 + t12432 + t10161*t4695 + t10183*t5756) + (t12339 + t12341 + t12440 + t12442 - 1.*t10161*t4044 - 1.*t10102*t5756)*t6140)*var2[4] + (t10066*t12075 + t4380*(t12339 + t12341 - 1.*t10076*t5691 - 1.*t10100*t5730 - 1.*t3632*t9602 - 1.*t3555*t9614) + t3934*(t12354 + t12356 + t4614*t9602 + t4660*t9614 + t5691*t9660 + t5730*t9664) + t12063*t9692)*var2[5] + (t10066*t12109 + t12094*t9692 + t3934*(t12354 + t4494*t9560 + t4587*t9589 + t5647*t9650 + t5678*t9655 + t7804*t9692) + t4380*(t12341 - 1.*t10066*t7804 - 1.*t3066*t9560 - 1.*t3465*t9589 - 1.*t5647*t9722 - 1.*t5678*t9727))*var2[9] + (-1.*t12419*t1512 - 1.*t12411*t4351 - 1.*t12398*t9648 - 1.*t12403*t9718 + 4.e-6*(-1.*t12419*t2796 - 1.*t12411*t4372 - 1.*t12398*t9618 - 1.*t12403*t9720))*var2[10];
  p_output1[36]=t5798;
  p_output1[37]=t11664;
  p_output1[38]=t3697*t5151 + t6021*t72;
  p_output1[39]=t10259*t11679 + t11690*t4739;
  p_output1[40]=t11718*t3695 + t11728*t6140;
  p_output1[41]=t12075*t3934 + t12063*t4380;
  p_output1[42]=t12109*t3934 + t12094*t4380 - 0.15121*t4965 - 0.15121*t5013;
  p_output1[43]=-1.*t12403*t1512 - 1.*t12398*t4351 + 4.e-6*(-1.*t12403*t2796 - 1.*t12398*t4372) + 1.e-6*t4749 - 0.28121*t4838;
  p_output1[44]=1.1914820871506078e-8;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 45, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_dh_FrFoot_QuadrupleStance.hh"

namespace QuadrupleStance
{

void J_dh_FrFoot_QuadrupleStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
