/*
 * Automatically Generated from Mathematica.
 * Sat 13 Nov 2021 17:51:54 GMT+01:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t712;
  double t733;
  double t1152;
  double t1181;
  double t134;
  double t1382;
  double t1154;
  double t1234;
  double t1283;
  double t1698;
  double t1776;
  double t1401;
  double t1415;
  double t1480;
  double t1561;
  double t1606;
  double t1984;
  double t1988;
  double t1995;
  double t2184;
  double t476;
  double t478;
  double t589;
  double t1291;
  double t1616;
  double t2119;
  double t2154;
  double t64;
  double t2208;
  double t2222;
  double t2289;
  double t2309;
  double t2320;
  double t2328;
  double t54;
  double t2398;
  double t2404;
  double t2405;
  double t2173;
  double t2354;
  double t2380;
  double t2447;
  double t2488;
  double t2388;
  double t2467;
  double t2471;
  double t27;
  double t2490;
  double t2492;
  double t2496;
  double t2497;
  double t2498;
  double t2503;
  double t2508;
  double t2510;
  double t2512;
  double t2513;
  double t2515;
  double t2522;
  double t2619;
  double t2625;
  double t2634;
  double t2676;
  double t2683;
  double t2684;
  double t2698;
  double t2700;
  double t2706;
  double t2713;
  double t2715;
  double t2717;
  double t2748;
  double t2769;
  double t2770;
  double t2790;
  double t2809;
  double t2824;
  double t2833;
  double t2837;
  double t2852;
  double t2859;
  double t2868;
  double t2881;
  double t3057;
  double t3088;
  double t3099;
  double t3113;
  double t3179;
  double t3218;
  double t3255;
  double t3273;
  double t3275;
  double t3276;
  double t3413;
  double t3433;
  double t3435;
  double t3436;
  double t3438;
  double t3442;
  double t3444;
  double t3448;
  double t3458;
  double t3463;
  double t3464;
  double t3467;
  double t3476;
  double t3479;
  double t3487;
  double t3488;
  double t3492;
  double t3501;
  double t3503;
  double t3508;
  double t3516;
  double t3517;
  double t3518;
  double t3519;
  double t3524;
  double t3527;
  double t3528;
  double t3531;
  double t3548;
  double t3566;
  double t3568;
  double t3577;
  double t3588;
  double t3592;
  double t3061;
  double t3117;
  double t3170;
  double t3176;
  double t3257;
  double t3280;
  double t3284;
  double t3291;
  double t3299;
  double t3304;
  double t3307;
  double t3309;
  double t3332;
  double t3375;
  double t3381;
  double t3382;
  double t3391;
  double t3397;
  double t3404;
  double t3447;
  double t3466;
  double t3493;
  double t3496;
  double t3505;
  double t3536;
  double t3640;
  double t3643;
  double t3658;
  double t3662;
  double t3671;
  double t3672;
  double t3677;
  double t3683;
  double t3685;
  double t3795;
  double t3812;
  double t2687;
  double t2743;
  double t2793;
  double t2807;
  double t2841;
  double t2914;
  double t2940;
  double t2991;
  double t3020;
  double t3021;
  double t3023;
  double t3029;
  double t3038;
  double t3747;
  double t3766;
  double t3790;
  double t3715;
  double t3719;
  double t3727;
  double t3878;
  double t3963;
  double t3990;
  double t3498;
  double t3686;
  double t3688;
  double t3992;
  double t2808;
  double t3042;
  double t3048;
  double t3819;
  double t4007;
  double t4011;
  double t4015;
  double t4039;
  double t4299;
  double t4305;
  double t4310;
  double t4331;
  double t4133;
  double t4151;
  double t4154;
  double t3994;
  double t4000;
  double t4002;
  double t4017;
  double t4421;
  double t4435;
  double t4450;
  double t4494;
  double t4464;
  double t4192;
  double t4459;
  double t4469;
  double t4479;
  double t4487;
  double t4488;
  double t4529;
  double t4537;
  double t4552;
  double t4554;
  double t4578;
  double t4020;
  double t4021;
  double t4033;
  double t4206;
  double t4208;
  double t4246;
  double t4741;
  double t4745;
  double t4757;
  double t4768;
  double t4772;
  double t4789;
  double t4864;
  double t4865;
  double t4878;
  double t4892;
  double t4895;
  double t4902;
  double t4903;
  double t4928;
  double t4929;
  double t4931;
  double t4816;
  double t4824;
  double t4827;
  double t4799;
  double t4709;
  double t4722;
  double t4736;
  double t4500;
  double t4507;
  double t4508;
  double t5093;
  double t5097;
  double t5131;
  double t5025;
  double t5032;
  double t5037;
  double t5041;
  double t5044;
  double t5053;
  double t5003;
  double t5004;
  double t4600;
  double t4616;
  double t4626;
  double t5009;
  double t5066;
  double t5078;
  double t5081;
  double t5143;
  double t5155;
  double t5163;
  double t5166;
  double t5188;
  double t5309;
  double t5310;
  double t5313;
  double t5314;
  double t5331;
  double t5338;
  double t5340;
  double t5343;
  double t5388;
  double t5391;
  double t5393;
  double t5397;
  double t5399;
  double t5400;
  double t5406;
  double t5409;
  double t5421;
  double t5427;
  double t5429;
  double t5430;
  double t5492;
  double t5495;
  double t5497;
  double t5504;
  double t5508;
  double t5512;
  double t5402;
  double t5431;
  double t5432;
  double t5447;
  double t5457;
  double t5460;
  double t5475;
  double t5476;
  double t5478;
  double t5470;
  double t5473;
  double t5618;
  double t5479;
  double t5538;
  double t5786;
  double t5791;
  double t5797;
  double t5799;
  double t5804;
  double t5808;
  double t5809;
  double t5810;
  double t5374;
  double t5375;
  double t5379;
  double t5315;
  double t5347;
  double t5359;
  double t5517;
  double t5519;
  double t5522;
  double t5501;
  double t5514;
  double t5515;
  double t5534;
  double t5975;
  double t5982;
  double t5991;
  double t5474;
  double t5960;
  double t5961;
  double t5962;
  double t6039;
  double t6040;
  double t6048;
  double t6064;
  double t6068;
  double t6073;
  double t5875;
  double t5877;
  double t5896;
  double t5854;
  double t5855;
  double t5858;
  double t5833;
  double t5835;
  double t5873;
  double t5907;
  double t5924;
  double t6182;
  double t6184;
  double t6190;
  double t6195;
  double t6196;
  double t6197;
  double t6095;
  double t6096;
  double t6103;
  double t6023;
  double t6026;
  double t6027;
  double t6018;
  double t6081;
  double t6242;
  double t6244;
  double t6246;
  double t6084;
  double t6151;
  double t6214;
  double t6229;
  double t6235;
  double t6265;
  double t6272;
  double t6277;
  double t6285;
  double t6289;
  double t6300;
  double t6375;
  double t6378;
  double t6385;
  double t6398;
  double t6404;
  double t6410;
  double t6422;
  double t6424;
  double t6387;
  double t6420;
  double t6451;
  double t6470;
  double t6485;
  double t6498;
  double t6502;
  double t6551;
  double t6602;
  double t6611;
  double t6614;
  double t6615;
  double t6620;
  double t6637;
  double t6642;
  double t6650;
  double t6613;
  double t6625;
  double t6654;
  double t6668;
  double t6684;
  double t6692;
  double t6696;
  double t6702;
  double t5546;
  double t5562;
  double t5563;
  double t6790;
  double t6793;
  double t6797;
  double t6802;
  double t6472;
  double t6559;
  double t6560;
  double t6571;
  double t6575;
  double t6577;
  double t6772;
  double t6773;
  double t6777;
  double t6780;
  double t6786;
  double t5772;
  double t5774;
  double t5778;
  double t5779;
  double t6863;
  double t6867;
  double t6879;
  double t6824;
  double t6942;
  double t6945;
  double t6955;
  double t6956;
  double t6959;
  double t6962;
  double t6995;
  double t7031;
  double t7041;
  double t7067;
  double t7011;
  double t7013;
  double t7015;
  double t6854;
  double t6871;
  double t6881;
  double t6883;
  double t6893;
  double t6895;
  double t6896;
  double t6922;
  double t7378;
  double t7379;
  double t7380;
  double t7361;
  double t7362;
  double t7368;
  double t7334;
  double t7338;
  double t7344;
  double t7349;
  double t7376;
  double t7382;
  double t7384;
  double t7396;
  double t7397;
  double t7399;
  double t7402;
  double t7403;
  double t7404;
  double t6718;
  double t6721;
  double t6724;
  double t6671;
  double t6706;
  double t6715;
  double t6807;
  double t7447;
  double t7460;
  double t7463;
  double t7475;
  double t7477;
  double t7478;
  double t7492;
  double t7497;
  double t7499;
  double t7470;
  double t7519;
  double t7551;
  double t7562;
  double t7505;
  double t7517;
  double t7600;
  double t7603;
  double t7605;
  double t7622;
  double t7624;
  double t7629;
  double t7669;
  double t7679;
  double t7680;
  double t2551;
  double t2553;
  double t5293;
  double t5294;
  double t5296;
  double t5597;
  double t5639;
  double t5647;
  double t5650;
  double t7893;
  double t7895;
  double t7896;
  double t7899;
  double t4052;
  double t4060;
  double t4068;
  double t7805;
  double t7807;
  double t7815;
  double t3863;
  double t3866;
  double t3867;
  double t2668;
  double t8074;
  double t8144;
  double t8321;
  double t8333;
  double t8081;
  double t8084;
  double t8101;
  double t8439;
  double t8442;
  double t8166;
  double t8176;
  double t8179;
  double t8387;
  double t8389;
  double t8411;
  double t8465;
  double t8467;
  double t8468;
  double t8691;
  double t8696;
  double t8739;
  double t8748;
  double t9012;
  double t9065;
  double t6313;
  double t6314;
  double t6321;
  double t9060;
  double t9024;
  double t5838;
  double t5938;
  double t5941;
  double t9366;
  double t9464;
  double t6252;
  double t6257;
  double t6259;
  double t9472;
  double t9494;
  double t9129;
  double t9150;
  double t9153;
  double t9760;
  double t9297;
  double t9298;
  double t9299;
  double t9321;
  double t9795;
  double t9908;
  double t9909;
  double t9910;
  double t9911;
  double t9912;
  double t9921;
  double t9927;
  double t9947;
  double t9949;
  double t9952;
  double t9933;
  double t9938;
  double t9942;
  double t7712;
  double t7728;
  double t7733;
  double t9736;
  double t10033;
  double t7350;
  double t7387;
  double t7392;
  double t10048;
  double t10055;
  double t7959;
  double t7966;
  double t8915;
  double t8920;
  double t8923;
  double t9213;
  double t9220;
  double t9221;
  double t9222;
  double t10247;
  double t10263;
  double t10265;
  double t10274;
  double t10508;
  double t10570;
  double t10637;
  double t10642;
  double t10510;
  double t10521;
  double t10524;
  double t10669;
  double t10671;
  double t10574;
  double t10576;
  double t10578;
  double t10655;
  double t10662;
  double t10666;
  double t10676;
  double t10677;
  double t10678;
  double t10801;
  double t10803;
  double t10810;
  double t10811;
  double t10856;
  double t11064;
  double t11033;
  double t10871;
  double t11257;
  double t11260;
  double t11269;
  double t11296;
  double t10930;
  double t10931;
  double t10969;
  double t11068;
  double t11077;
  double t11079;
  double t11169;
  double t11179;
  double t11181;
  double t11188;
  double t11217;
  double t11218;
  double t11220;
  double t11224;
  double t11421;
  double t11441;
  double t11597;
  double t11598;
  double t11599;
  double t11605;
  double t11610;
  double t11611;
  double t11612;
  double t11580;
  double t11585;
  double t11589;
  double t11592;
  double t11593;
  double t11594;
  double t11595;
  double t11559;
  double t11560;
  double t11563;
  double t11565;
  double t11522;
  double t11523;
  double t11532;
  double t11538;
  double t11444;
  double t11418;
  double t11629;
  double t11636;
  double t11653;
  double t11656;
  double t10372;
  double t10383;
  double t10406;
  t712 = Cos(var1[11]);
  t733 = -1.*t712;
  t1152 = 1. + t733;
  t1181 = Sin(var1[11]);
  t134 = Cos(var1[10]);
  t1382 = Sin(var1[10]);
  t1154 = -1.7408e-8*t1152;
  t1234 = -3.999964e-6*t1181;
  t1283 = t1154 + t1234;
  t1698 = -1.*t134;
  t1776 = 1. + t1698;
  t1401 = -1.000000000016*t1152;
  t1415 = 1. + t1401;
  t1480 = 0.999991*t1415;
  t1561 = 0.004352*t1181;
  t1606 = t1480 + t1561;
  t1984 = -0.004352*t712;
  t1988 = 0.999991*t1181;
  t1995 = t1984 + t1988;
  t2184 = Sin(var1[9]);
  t476 = -1. + t134;
  t478 = 1.6e-11*t476;
  t589 = 1. + t478;
  t1291 = t589*t1283;
  t1616 = -4.e-6*t1382*t1606;
  t2119 = 4.e-6*t1776*t1995;
  t2154 = 0. + t1291 + t1616 + t2119;
  t64 = Cos(var1[9]);
  t2208 = 4.e-6*t1382*t1283;
  t2222 = -1.000000000016*t1776;
  t2289 = 1. + t2222;
  t2309 = t2289*t1606;
  t2320 = -1.*t1382*t1995;
  t2328 = 0. + t2208 + t2309 + t2320;
  t54 = Cos(var1[5]);
  t2398 = -1.*t2184*t2154;
  t2404 = t64*t2328;
  t2405 = 0. + t2398 + t2404;
  t2173 = t64*t2154;
  t2354 = t2184*t2328;
  t2380 = 0. + t2173 + t2354;
  t2447 = Sin(var1[5]);
  t2488 = Cos(var1[3]);
  t2388 = t54*t2380;
  t2467 = t2405*t2447;
  t2471 = 0. + t2388 + t2467;
  t27 = Sin(var1[3]);
  t2490 = Cos(var1[4]);
  t2492 = 4.e-6*t1776*t1283;
  t2496 = t1382*t1606;
  t2497 = t134*t1995;
  t2498 = 0. + t2492 + t2496 + t2497;
  t2503 = t2490*t2498;
  t2508 = Sin(var1[4]);
  t2510 = t54*t2405;
  t2512 = -1.*t2380*t2447;
  t2513 = 0. + t2510 + t2512;
  t2515 = -1.*t2508*t2513;
  t2522 = 0. + t2503 + t2515;
  t2619 = -1.*t2498*t2508;
  t2625 = -1.*t2490*t2513;
  t2634 = t2619 + t2625;
  t2676 = 0.004352*t1415;
  t2683 = -0.9999910000159999*t1181;
  t2684 = t2676 + t2683;
  t2698 = 1.6e-11*t1152;
  t2700 = -1. + t2698;
  t2706 = 4.e-6*t2700;
  t2713 = 3.999964e-6*t1152;
  t2715 = -1.7408e-8*t1181;
  t2717 = t2706 + t2713 + t2715;
  t2748 = -1. + t712;
  t2769 = 1.6e-11*t2748;
  t2770 = 0.999991*t712;
  t2790 = t2769 + t2770 + t1561;
  t2809 = -4.e-6*t1382*t2684;
  t2824 = t589*t2717;
  t2833 = 4.e-6*t1776*t2790;
  t2837 = 0. + t2809 + t2824 + t2833;
  t2852 = t2289*t2684;
  t2859 = 4.e-6*t1382*t2717;
  t2868 = -1.*t1382*t2790;
  t2881 = 0. + t2852 + t2859 + t2868;
  t3057 = -1. + t2698 + t2769;
  t3088 = 4.e-6*t2748;
  t3099 = -4.e-6*t712;
  t3113 = t3088 + t3099;
  t3179 = t589*t3057;
  t3218 = 4.e-6*t1776*t3113;
  t3255 = t3179 + t3218;
  t3273 = 4.e-6*t3057*t1382;
  t3275 = -1.*t3113*t1382;
  t3276 = t3273 + t3275;
  t3413 = -1.26e-8*var1[11];
  t3433 = 1. + t2769;
  t3435 = -0.14871*t3433;
  t3436 = -1.64779999997447e-7*t1152;
  t3438 = -1.59556e-7*t2748;
  t3442 = -1.199987999968e-6*t1181;
  t3444 = t3413 + t3435 + t3436 + t3438 + t3442;
  t3448 = 0.803147*t1415;
  t3458 = 0.50315000001605*t1152;
  t3463 = 0.00130540515936178*t1181;
  t3464 = t3448 + t3458 + t3463;
  t3467 = -5.04e-14*var1[11];
  t3476 = -0.03988959484*t1152;
  t3479 = 6.38224e-13*t2748;
  t3487 = -0.041195*t712;
  t3488 = 0.299996999992*t1181;
  t3492 = t3467 + t3476 + t3479 + t3487 + t3488;
  t3501 = -1.*t64;
  t3503 = 1. + t3501;
  t3508 = -0.15121*t2184;
  t3516 = -1.2484e-7*var1[10];
  t3517 = 2.479936e-18*t1776;
  t3518 = -1.54996e-7*t476;
  t3519 = 1.124840000016e-6*t1382;
  t3524 = t589*t3444;
  t3527 = -4.e-6*t1382*t3464;
  t3528 = 4.e-6*t1776*t3492;
  t3531 = t3516 + t3517 + t3518 + t3519 + t3524 + t3527 + t3528;
  t3548 = 0.281210000008499*t1776;
  t3566 = -0.03874900000062*t1382;
  t3568 = 4.e-6*t1382*t3444;
  t3577 = t2289*t3464;
  t3588 = -1.*t1382*t3492;
  t3592 = t3548 + t3566 + t3568 + t3577 + t3588;
  t3061 = 4.e-6*t1776*t3057;
  t3117 = t134*t3113;
  t3170 = t3061 + t3117;
  t3176 = t3170*t2490;
  t3257 = -1.*t3255*t2184;
  t3280 = t64*t3276;
  t3284 = t3257 + t3280;
  t3291 = t54*t3284;
  t3299 = t64*t3255;
  t3304 = t2184*t3276;
  t3307 = t3299 + t3304;
  t3309 = -1.*t3307*t2447;
  t3332 = t3291 + t3309;
  t3375 = -1.*t2508*t3332;
  t3381 = t3176 + t3375;
  t3382 = -4.9936e-13*var1[10];
  t3391 = -0.038749*t1776;
  t3397 = 6.19984e-13*t476;
  t3404 = -0.281210000004*t1382;
  t3447 = 4.e-6*t1776*t3444;
  t3466 = t1382*t3464;
  t3493 = t134*t3492;
  t3496 = 0. + t3382 + t3391 + t3397 + t3404 + t3447 + t3466 + t3493;
  t3505 = 0.15121*t3503;
  t3536 = -1.*t2184*t3531;
  t3640 = t64*t3592;
  t3643 = t3505 + t3508 + t3536 + t3640;
  t3658 = t54*t3643;
  t3662 = -0.15121*t3503;
  t3671 = t64*t3531;
  t3672 = t2184*t3592;
  t3677 = t3662 + t3508 + t3671 + t3672;
  t3683 = -1.*t3677*t2447;
  t3685 = 0. + t3658 + t3683;
  t3795 = t2490*t3496;
  t3812 = -1.*t2508*t3685;
  t2687 = t1382*t2684;
  t2743 = 4.e-6*t1776*t2717;
  t2793 = t134*t2790;
  t2807 = 0. + t2687 + t2743 + t2793;
  t2841 = -1.*t2184*t2837;
  t2914 = t64*t2881;
  t2940 = 0. + t2841 + t2914;
  t2991 = t54*t2940;
  t3020 = t64*t2837;
  t3021 = t2184*t2881;
  t3023 = 0. + t3020 + t3021;
  t3029 = -1.*t3023*t2447;
  t3038 = 0. + t2991 + t3029;
  t3747 = t3170*t2508;
  t3766 = t2490*t3332;
  t3790 = t3747 + t3766;
  t3715 = t3496*t2508;
  t3719 = t2490*t3685;
  t3727 = 0. + t3715 + t3719;
  t3878 = 0. + t3795 + t3812;
  t3963 = t2490*t2807;
  t3990 = -1.*t2508*t3038;
  t3498 = -1.*t3496*t2508;
  t3686 = -1.*t2490*t3685;
  t3688 = t3498 + t3686;
  t3992 = t3963 + t3990;
  t2808 = t2807*t2508;
  t3042 = t2490*t3038;
  t3048 = 0. + t2808 + t3042;
  t3819 = t3795 + t3812;
  t4007 = t54*t3677;
  t4011 = t3643*t2447;
  t4015 = 0. + t4007 + t4011;
  t4039 = 0. + t3963 + t3990;
  t4299 = -1.*t54*t2380;
  t4305 = -1.*t2405*t2447;
  t4310 = t4299 + t4305;
  t4331 = t2510 + t2512;
  t4133 = t54*t3023;
  t4151 = t2940*t2447;
  t4154 = 0. + t4133 + t4151;
  t3994 = t54*t3307;
  t4000 = t3284*t2447;
  t4002 = t3994 + t4000;
  t4017 = t4002*t4015;
  t4421 = -1.*t54*t3677;
  t4435 = -1.*t3643*t2447;
  t4450 = t4421 + t4435;
  t4494 = t2991 + t3029;
  t4464 = t3658 + t3683;
  t4192 = -1.*t4154*t4015;
  t4459 = t3332*t4015;
  t4469 = t4002*t4464;
  t4479 = -1.*t54*t3307;
  t4487 = -1.*t3284*t2447;
  t4488 = t4479 + t4487;
  t4529 = -1.*t4494*t4015;
  t4537 = -1.*t4154*t4464;
  t4552 = -1.*t54*t3023;
  t4554 = -1.*t2940*t2447;
  t4578 = t4552 + t4554;
  t4020 = t3790*t3727;
  t4021 = t3381*t3878;
  t4033 = t4017 + t4020 + t4021;
  t4206 = -1.*t3048*t3727;
  t4208 = -1.*t4039*t3878;
  t4246 = t4192 + t4206 + t4208;
  t4741 = -0.15121*t64;
  t4745 = t4741 + t3508 + t3536 + t3640;
  t4757 = 0.15121*t2184;
  t4768 = -1.*t64*t3531;
  t4772 = -1.*t2184*t3592;
  t4789 = t4741 + t4757 + t4768 + t4772;
  t4864 = -1.*t64*t2154;
  t4865 = -1.*t2184*t2328;
  t4878 = t4864 + t4865;
  t4892 = t54*t4878;
  t4895 = t2398 + t2404;
  t4902 = -1.*t4895*t2447;
  t4903 = t4892 + t4902;
  t4928 = t54*t4895;
  t4929 = t4878*t2447;
  t4931 = t4928 + t4929;
  t4816 = -1.*t64*t3255;
  t4824 = -1.*t2184*t3276;
  t4827 = t4816 + t4824;
  t4799 = t2841 + t2914;
  t4709 = -1.*t64*t2837;
  t4722 = -1.*t2184*t2881;
  t4736 = t4709 + t4722;
  t4500 = t3170*t3496;
  t4507 = t3332*t3685;
  t4508 = t4500 + t4017 + t4507;
  t5093 = t54*t4799;
  t5097 = t4736*t2447;
  t5131 = t5093 + t5097;
  t5025 = t54*t4789;
  t5032 = -1.*t4745*t2447;
  t5037 = t5025 + t5032;
  t5041 = t54*t4745;
  t5044 = t4789*t2447;
  t5053 = t5041 + t5044;
  t5003 = t4827*t2447;
  t5004 = t3291 + t5003;
  t4600 = -1.*t2807*t3496;
  t4616 = -1.*t3038*t3685;
  t4626 = t4600 + t4192 + t4616;
  t5009 = t5004*t4015;
  t5066 = t4002*t5053;
  t5078 = t54*t4827;
  t5081 = t5078 + t4487;
  t5143 = -1.*t5131*t4015;
  t5155 = -1.*t4154*t5053;
  t5163 = t54*t4736;
  t5166 = -1.*t4799*t2447;
  t5188 = t5163 + t5166;
  t5309 = -1.000000000016*t1382*t2684;
  t5310 = 4.e-6*t134*t2717;
  t5313 = -1.*t134*t2790;
  t5314 = t5309 + t5310 + t5313;
  t5331 = -4.e-6*t134*t2684;
  t5338 = -1.6e-11*t1382*t2717;
  t5340 = 4.e-6*t1382*t2790;
  t5343 = t5331 + t5338 + t5340;
  t5388 = -0.03874900000062*t134;
  t5391 = 0.281210000008499*t1382;
  t5393 = 4.e-6*t134*t3444;
  t5397 = -1.000000000016*t1382*t3464;
  t5399 = -1.*t134*t3492;
  t5400 = t5388 + t5391 + t5393 + t5397 + t5399;
  t5406 = 1.124840000016e-6*t134;
  t5409 = 1.5499600000248e-7*t1382;
  t5421 = -1.6e-11*t1382*t3444;
  t5427 = -4.e-6*t134*t3464;
  t5429 = 4.e-6*t1382*t3492;
  t5430 = -1.2484e-7 + t5406 + t5409 + t5421 + t5427 + t5429;
  t5492 = 4.e-6*t134*t3057;
  t5495 = -1.*t134*t3113;
  t5497 = t5492 + t5495;
  t5504 = -1.6e-11*t3057*t1382;
  t5508 = 4.e-6*t3113*t1382;
  t5512 = t5504 + t5508;
  t5402 = t2184*t5400;
  t5431 = t64*t5430;
  t5432 = t5402 + t5431;
  t5447 = t64*t5400;
  t5457 = -1.*t2184*t5430;
  t5460 = t5447 + t5457;
  t5475 = -0.281210000004*t134;
  t5476 = t134*t3464;
  t5478 = -4.9936e-13 + t5475 + t3566 + t3568 + t5476 + t3588;
  t5470 = t134*t2684;
  t5473 = t5470 + t2859 + t2868;
  t5618 = t3382 + t3391 + t3397 + t3404 + t3447 + t3466 + t3493;
  t5479 = -1.*t2807*t5478;
  t5538 = t3170*t5478;
  t5786 = 4.e-6*t134*t1283;
  t5791 = -1.000000000016*t1382*t1606;
  t5797 = -1.*t134*t1995;
  t5799 = t5786 + t5791 + t5797;
  t5804 = -1.6e-11*t1382*t1283;
  t5808 = -4.e-6*t134*t1606;
  t5809 = 4.e-6*t1382*t1995;
  t5810 = t5804 + t5808 + t5809;
  t5374 = t2184*t5314;
  t5375 = t64*t5343;
  t5379 = t5374 + t5375;
  t5315 = t64*t5314;
  t5347 = -1.*t2184*t5343;
  t5359 = t5315 + t5347;
  t5517 = t5497*t2184;
  t5519 = t64*t5512;
  t5522 = t5517 + t5519;
  t5501 = t64*t5497;
  t5514 = -1.*t2184*t5512;
  t5515 = t5501 + t5514;
  t5534 = t3276*t3496;
  t5975 = t54*t5522;
  t5982 = t5515*t2447;
  t5991 = t5975 + t5982;
  t5474 = -1.*t5473*t3496;
  t5960 = t54*t5379;
  t5961 = t5359*t2447;
  t5962 = t5960 + t5961;
  t6039 = t54*t5460;
  t6040 = -1.*t5432*t2447;
  t6048 = t6039 + t6040;
  t6064 = t54*t5432;
  t6068 = t5460*t2447;
  t6073 = t6064 + t6068;
  t5875 = t2184*t5799;
  t5877 = t64*t5810;
  t5896 = t5875 + t5877;
  t5854 = t64*t5799;
  t5855 = -1.*t2184*t5810;
  t5858 = t5854 + t5855;
  t5833 = t134*t1606;
  t5835 = t2208 + t5833 + t2320;
  t5873 = t54*t5858;
  t5907 = -1.*t5896*t2447;
  t5924 = t5873 + t5907;
  t6182 = t54*t5896;
  t6184 = t5858*t2447;
  t6190 = t6182 + t6184;
  t6195 = t2490*t5835;
  t6196 = -1.*t2508*t5924;
  t6197 = t6195 + t6196;
  t6095 = t54*t5359;
  t6096 = -1.*t5379*t2447;
  t6103 = t6095 + t6096;
  t6023 = t54*t5515;
  t6026 = -1.*t5522*t2447;
  t6027 = t6023 + t6026;
  t6018 = t5991*t4015;
  t6081 = t4002*t6073;
  t6242 = t3276*t2508;
  t6244 = t2490*t6027;
  t6246 = t6242 + t6244;
  t6084 = -1.*t5962*t4015;
  t6151 = -1.*t4154*t6073;
  t6214 = t5473*t2508;
  t6229 = t2490*t6103;
  t6235 = t6214 + t6229;
  t6265 = t5478*t2508;
  t6272 = t2490*t6048;
  t6277 = t6265 + t6272;
  t6285 = t2490*t5478;
  t6289 = -1.*t2508*t6048;
  t6300 = t6285 + t6289;
  t6375 = 0.00130540515936178*t712;
  t6378 = -0.2999969999968001*t1181;
  t6385 = t6375 + t6378;
  t6398 = -1.199987999968e-6*t712;
  t6404 = -5.2216206374471e-9*t1181;
  t6410 = -1.26e-8 + t6398 + t6404;
  t6422 = 0.299996999992*t712;
  t6424 = -5.04e-14 + t6422 + t3463;
  t6387 = -4.e-6*t1382*t6385;
  t6420 = t589*t6410;
  t6451 = 4.e-6*t1776*t6424;
  t6470 = t6387 + t6420 + t6451;
  t6485 = t2289*t6385;
  t6498 = 4.e-6*t1382*t6410;
  t6502 = -1.*t1382*t6424;
  t6551 = t6485 + t6498 + t6502;
  t6602 = 0.004352*t712;
  t6611 = t6602 + t2683;
  t6614 = -0.9999910000159999*t712;
  t6615 = -0.00435200000006963*t1181;
  t6620 = t6614 + t6615;
  t6637 = -1.7408e-8*t712;
  t6642 = 3.999964000064e-6*t1181;
  t6650 = t6637 + t6642;
  t6613 = 4.e-6*t1776*t6611;
  t6625 = -4.e-6*t1382*t6620;
  t6654 = t589*t6650;
  t6668 = t6613 + t6625 + t6654;
  t6684 = -1.*t1382*t6611;
  t6692 = t2289*t6620;
  t6696 = 4.e-6*t1382*t6650;
  t6702 = t6684 + t6692 + t6696;
  t5546 = t3284*t3643;
  t5562 = t3307*t3677;
  t5563 = t5546 + t5562 + t4500;
  t6790 = t134*t6611;
  t6793 = t1382*t6620;
  t6797 = 4.e-6*t1776*t6650;
  t6802 = t6790 + t6793 + t6797;
  t6472 = -1.*t2184*t6470;
  t6559 = t64*t6551;
  t6560 = t6472 + t6559;
  t6571 = t64*t6470;
  t6575 = t2184*t6551;
  t6577 = t6571 + t6575;
  t6772 = t1382*t6385;
  t6773 = 4.e-6*t1776*t6410;
  t6777 = t134*t6424;
  t6780 = t6772 + t6773 + t6777;
  t6786 = -1.*t6780*t2807;
  t5772 = t3255*t3531;
  t5774 = t3170*t5618;
  t5778 = t3276*t3592;
  t5779 = t5772 + t5774 + t5778;
  t6863 = -3.999964e-6*t712;
  t6867 = t6863 + t2715;
  t6879 = t2770 + t1561;
  t6824 = t3170*t6780;
  t6942 = -1.*t2684*t6385;
  t6945 = -1.*t2717*t6410;
  t6955 = -1.*t3444*t6650;
  t6956 = -1.*t6620*t3464;
  t6959 = -1.*t6424*t2790;
  t6962 = -1.*t6611*t3492;
  t6995 = t6942 + t6945 + t6955 + t6956 + t6959 + t6962;
  t7031 = t3057*t6410;
  t7041 = t3113*t6424;
  t7067 = t7031 + t7041;
  t7011 = t3057*t3444;
  t7013 = t3113*t3492;
  t7015 = t7011 + t7013;
  t6854 = -4.e-6*t1382*t6611;
  t6871 = t589*t6867;
  t6881 = 4.e-6*t1776*t6879;
  t6883 = t6854 + t6871 + t6881;
  t6893 = t2289*t6611;
  t6895 = 4.e-6*t1382*t6867;
  t6896 = -1.*t1382*t6879;
  t6922 = t6893 + t6895 + t6896;
  t7378 = t64*t6883;
  t7379 = t2184*t6922;
  t7380 = t7378 + t7379;
  t7361 = -1.*t2184*t6883;
  t7362 = t64*t6922;
  t7368 = t7361 + t7362;
  t7334 = t1382*t6611;
  t7338 = 4.e-6*t1776*t6867;
  t7344 = t134*t6879;
  t7349 = t7334 + t7338 + t7344;
  t7376 = t54*t7368;
  t7382 = -1.*t7380*t2447;
  t7384 = t7376 + t7382;
  t7396 = t54*t7380;
  t7397 = t7368*t2447;
  t7399 = t7396 + t7397;
  t7402 = t2490*t7349;
  t7403 = -1.*t2508*t7384;
  t7404 = t7402 + t7403;
  t6718 = t64*t6668;
  t6721 = t2184*t6702;
  t6724 = t6718 + t6721;
  t6671 = -1.*t2184*t6668;
  t6706 = t64*t6702;
  t6715 = t6671 + t6706;
  t6807 = -1.*t6802*t3496;
  t7447 = t54*t6577;
  t7460 = t6560*t2447;
  t7463 = t7447 + t7460;
  t7475 = t54*t6560;
  t7477 = -1.*t6577*t2447;
  t7478 = t7475 + t7477;
  t7492 = t54*t6724;
  t7497 = t6715*t2447;
  t7499 = t7492 + t7497;
  t7470 = t4002*t7463;
  t7519 = t54*t6715;
  t7551 = -1.*t6724*t2447;
  t7562 = t7519 + t7551;
  t7505 = -1.*t7463*t4154;
  t7517 = -1.*t7499*t4015;
  t7600 = t6780*t2508;
  t7603 = t2490*t7478;
  t7605 = t7600 + t7603;
  t7622 = t2490*t6780;
  t7624 = -1.*t2508*t7478;
  t7629 = t7622 + t7624;
  t7669 = t6802*t2508;
  t7679 = t2490*t7562;
  t7680 = t7669 + t7679;
  t2551 = t2488*t2471;
  t2553 = -1.*t27*t2522;
  t5293 = -1.*t2940*t3643;
  t5294 = -1.*t3023*t3677;
  t5296 = t5293 + t5294 + t4600;
  t5597 = -1.*t2837*t3531;
  t5639 = -1.*t2807*t5618;
  t5647 = -1.*t2881*t3592;
  t5650 = t5597 + t5639 + t5647;
  t7893 = -1.*t3444*t2717;
  t7895 = -1.*t2684*t3464;
  t7896 = -1.*t2790*t3492;
  t7899 = t7893 + t7895 + t7896;
  t4052 = -1.*t2807*t2508;
  t4060 = -1.*t2490*t3038;
  t4068 = t4052 + t4060;
  t7805 = t2498*t2508;
  t7807 = t2490*t2513;
  t7815 = 0. + t7805 + t7807;
  t3863 = -1.*t3170*t2508;
  t3866 = -1.*t2490*t3332;
  t3867 = t3863 + t3866;
  t2668 = t2503 + t2515;
  t8074 = -1.*t4002*t4015;
  t8144 = t4015*t2471;
  t8321 = -1.*t3332*t4015;
  t8333 = -1.*t4002*t4464;
  t8081 = -1.*t3790*t3727;
  t8084 = -1.*t3381*t3878;
  t8101 = t8074 + t8081 + t8084;
  t8439 = t4464*t2471;
  t8442 = t4015*t4331;
  t8166 = t3727*t7815;
  t8176 = t3878*t2522;
  t8179 = t8144 + t8166 + t8176;
  t8387 = -1.*t3170*t3496;
  t8389 = -1.*t3332*t3685;
  t8411 = t8387 + t8074 + t8389;
  t8465 = t3496*t2498;
  t8467 = t3685*t2513;
  t8468 = t8465 + t8144 + t8467;
  t8691 = -1.*t5004*t4015;
  t8696 = -1.*t4002*t5053;
  t8739 = t5053*t2471;
  t8748 = t4015*t4931;
  t9012 = t5478*t2498;
  t9065 = -1.*t3170*t5478;
  t6313 = t2490*t5473;
  t6314 = -1.*t2508*t6103;
  t6321 = t6313 + t6314;
  t9060 = -1.*t3276*t3496;
  t9024 = t3496*t5835;
  t5838 = t5835*t2508;
  t5938 = t2490*t5924;
  t5941 = t5838 + t5938;
  t9366 = -1.*t5991*t4015;
  t9464 = -1.*t4002*t6073;
  t6252 = t2490*t3276;
  t6257 = -1.*t2508*t6027;
  t6259 = t6252 + t6257;
  t9472 = t6073*t2471;
  t9494 = t4015*t6190;
  t9129 = -1.*t3284*t3643;
  t9150 = -1.*t3307*t3677;
  t9153 = t9129 + t9150 + t8387;
  t9760 = t6780*t2498;
  t9297 = -1.*t3255*t3531;
  t9298 = -1.*t3170*t5618;
  t9299 = -1.*t3276*t3592;
  t9321 = t9297 + t9298 + t9299;
  t9795 = -1.*t3170*t6780;
  t9908 = t3444*t6867;
  t9909 = t1283*t6410;
  t9910 = t6611*t3464;
  t9911 = t6385*t1606;
  t9912 = t6879*t3492;
  t9921 = t6424*t1995;
  t9927 = t9908 + t9909 + t9910 + t9911 + t9912 + t9921;
  t9947 = -1.*t3057*t6410;
  t9949 = -1.*t3113*t6424;
  t9952 = t9947 + t9949;
  t9933 = -1.*t3057*t3444;
  t9938 = -1.*t3113*t3492;
  t9942 = t9933 + t9938;
  t7712 = t2490*t6802;
  t7728 = -1.*t2508*t7562;
  t7733 = t7712 + t7728;
  t9736 = t7349*t3496;
  t10033 = -1.*t4002*t7463;
  t7350 = t7349*t2508;
  t7387 = t2490*t7384;
  t7392 = t7350 + t7387;
  t10048 = t7399*t4015;
  t10055 = t7463*t2471;
  t7959 = t2488*t4154;
  t7966 = -1.*t27*t4039;
  t8915 = t3643*t2405;
  t8920 = t3677*t2380;
  t8923 = t8915 + t8920 + t8465;
  t9213 = t3531*t2154;
  t9220 = t5618*t2498;
  t9221 = t3592*t2328;
  t9222 = t9213 + t9220 + t9221;
  t10247 = t1283*t3444;
  t10263 = t3464*t1606;
  t10265 = t3492*t1995;
  t10274 = t10247 + t10263 + t10265;
  t10508 = t4154*t4015;
  t10570 = -1.*t4015*t2471;
  t10637 = t4494*t4015;
  t10642 = t4154*t4464;
  t10510 = t3048*t3727;
  t10521 = t4039*t3878;
  t10524 = t10508 + t10510 + t10521;
  t10669 = -1.*t4464*t2471;
  t10671 = -1.*t4015*t4331;
  t10574 = -1.*t3727*t7815;
  t10576 = -1.*t3878*t2522;
  t10578 = t10570 + t10574 + t10576;
  t10655 = t2807*t3496;
  t10662 = t3038*t3685;
  t10666 = t10655 + t10508 + t10662;
  t10676 = -1.*t3496*t2498;
  t10677 = -1.*t3685*t2513;
  t10678 = t10676 + t10570 + t10677;
  t10801 = t5131*t4015;
  t10803 = t4154*t5053;
  t10810 = -1.*t5053*t2471;
  t10811 = -1.*t4015*t4931;
  t10856 = -1.*t5478*t2498;
  t11064 = t2807*t5478;
  t11033 = t5473*t3496;
  t10871 = -1.*t3496*t5835;
  t11257 = t5962*t4015;
  t11260 = t4154*t6073;
  t11269 = -1.*t6073*t2471;
  t11296 = -1.*t4015*t6190;
  t10930 = -1.*t3643*t2405;
  t10931 = -1.*t3677*t2380;
  t10969 = t10930 + t10931 + t10676;
  t11068 = t2940*t3643;
  t11077 = t3023*t3677;
  t11079 = t11068 + t11077 + t10655;
  t11169 = -1.*t3531*t2154;
  t11179 = -1.*t5618*t2498;
  t11181 = -1.*t3592*t2328;
  t11188 = t11169 + t11179 + t11181;
  t11217 = t2837*t3531;
  t11218 = t2807*t5618;
  t11220 = t2881*t3592;
  t11224 = t11217 + t11218 + t11220;
  t11421 = -1.*t6780*t2498;
  t11441 = t6780*t2807;
  t11597 = t2684*t6385;
  t11598 = t2717*t6410;
  t11599 = t3444*t6650;
  t11605 = t6620*t3464;
  t11610 = t6424*t2790;
  t11611 = t6611*t3492;
  t11612 = t11597 + t11598 + t11599 + t11605 + t11610 + t11611;
  t11580 = -1.*t3444*t6867;
  t11585 = -1.*t1283*t6410;
  t11589 = -1.*t6611*t3464;
  t11592 = -1.*t6385*t1606;
  t11593 = -1.*t6879*t3492;
  t11594 = -1.*t6424*t1995;
  t11595 = t11580 + t11585 + t11589 + t11592 + t11593 + t11594;
  t11559 = t3444*t2717;
  t11560 = t2684*t3464;
  t11563 = t2790*t3492;
  t11565 = t11559 + t11560 + t11563;
  t11522 = -1.*t1283*t3444;
  t11523 = -1.*t3464*t1606;
  t11532 = -1.*t3492*t1995;
  t11538 = t11522 + t11523 + t11532;
  t11444 = t6802*t3496;
  t11418 = -1.*t7349*t3496;
  t11629 = t7463*t4154;
  t11636 = t7499*t4015;
  t11653 = -1.*t7399*t4015;
  t11656 = -1.*t7463*t2471;
  t10372 = t2488*t4002;
  t10383 = -1.*t27*t3381;
  t10406 = t10372 + t10383;
  p_output1[0]=(-1.*t2488*t2522 - 1.*t2471*t27)*var2[1] + (t2551 + t2553)*var2[2];
  p_output1[1]=t2668*var2[0] - 1.*t2634*t27*var2[1] + t2488*t2634*var2[2] + (t3048*(t3381*t3688 + t3381*t3727 + t3790*t3819 + t3867*t3878) + t3992*t4033 + t3790*(-1.*t3048*t3819 - 1.*t3727*t3992 - 1.*t3688*t4039 - 1.*t3878*t4068) + t3381*t4246)*var2[3];
  p_output1[2]=t2490*t4310*var2[0] + (t2508*t27*t4310 + t2488*t4331)*var2[1] + (-1.*t2488*t2508*t4310 + t27*t4331)*var2[2] + (t2490*t4246*t4488 + t3048*(-1.*t2508*t3381*t4450 + t2490*t3790*t4450 + t4459 + t4469 + t2490*t3727*t4488 - 1.*t2508*t3878*t4488) + t2490*t4033*t4578 + t3790*(-1.*t2490*t3048*t4450 + t2508*t4039*t4450 + t4529 + t4537 - 1.*t2490*t3727*t4578 + t2508*t3878*t4578))*var2[3] + (t4154*(t3332*t4450 + t4459 + t4469 + t3685*t4488) + t4494*t4508 + t4002*(-1.*t3038*t4450 + t4529 + t4537 - 1.*t3685*t4578) + t3332*t4626)*var2[4];
  p_output1[3]=t2490*t4903*var2[0] + (t2508*t27*t4903 + t2488*t4931)*var2[1] + (-1.*t2488*t2508*t4903 + t27*t4931)*var2[2] + (t2490*t4246*t5081 + t3048*(t5009 - 1.*t2508*t3381*t5037 + t2490*t3790*t5037 + t5066 + t2490*t3727*t5081 - 1.*t2508*t3878*t5081) + t2490*t4033*t5188 + t3790*(-1.*t2490*t3048*t5037 + t2508*t4039*t5037 + t5143 + t5155 - 1.*t2490*t3727*t5188 + t2508*t3878*t5188))*var2[3] + (t4626*t5004 + t4154*(t5009 + t3332*t5037 + t5066 + t3685*t5081) + t4508*t5131 + t4002*(-1.*t3038*t5037 + t5143 + t5155 - 1.*t3685*t5188))*var2[4] + (t3170*(-1.*t3643*t4736 - 1.*t3023*t4745 - 1.*t2940*t4789 - 1.*t3677*t4799) + t2807*(t3284*t3677 + t3307*t4745 + t3284*t4789 + t3643*t4827))*var2[5];
  p_output1[4]=t5941*var2[0] + (t2488*t6190 - 1.*t27*t6197)*var2[1] + (t27*t6190 + t2488*t6197)*var2[2] + (t4033*t6235 + t4246*t6246 + t3048*(t6018 + t6081 + t3727*t6246 + t3878*t6259 + t3790*t6277 + t3381*t6300) + t3790*(t6084 + t6151 - 1.*t3727*t6235 - 1.*t3048*t6277 - 1.*t4039*t6300 - 1.*t3878*t6321))*var2[3] + (t4508*t5962 + t4626*t5991 + t4154*(t5534 + t5538 + t6018 + t3685*t6027 + t3332*t6048 + t6081) + t4002*(t5474 + t5479 - 1.*t3038*t6048 + t6084 - 1.*t3685*t6103 + t6151))*var2[4] + (t3276*t5296 + t3170*(-1.*t3643*t5359 - 1.*t3677*t5379 - 1.*t3023*t5432 - 1.*t2940*t5460 + t5474 + t5479) + t2807*(t3307*t5432 + t3284*t5460 + t3643*t5515 + t3677*t5522 + t5534 + t5538) + t5473*t5563)*var2[5] + (t2807*(t3276*t5400 + t3255*t5430 + t3592*t5497 + t3531*t5512 + t5538 + t3276*t5618) + t3170*(-1.*t3592*t5314 - 1.*t3531*t5343 - 1.*t2881*t5400 - 1.*t2837*t5430 + t5479 - 1.*t5473*t5618) + t3276*t5650 + t5473*t5779 - 0.15121*t5799 - 0.15121*t5810)*var2[9];
  p_output1[5]=t7392*var2[0] + (t2488*t7399 - 1.*t27*t7404)*var2[1] + (t27*t7399 + t2488*t7404)*var2[2] + (t3048*(t7470 + t3790*t7605 + t3381*t7629) + t4033*t7680 + t3790*(t7505 + t7517 - 1.*t3048*t7605 - 1.*t4039*t7629 - 1.*t3727*t7680 - 1.*t3878*t7733))*var2[3] + (t4154*(t6824 + t7470 + t3332*t7478) + t4508*t7499 + t4002*(t6786 + t6807 - 1.*t3038*t7478 + t7505 + t7517 - 1.*t3685*t7562))*var2[4] + (t5563*t6802 + t3170*(-1.*t2940*t6560 - 1.*t3023*t6577 - 1.*t3643*t6715 - 1.*t3677*t6724 + t6786 + t6807) + t2807*(t3284*t6560 + t3307*t6577 + t6824))*var2[5] + (t5779*t6802 + t3170*(-1.*t2837*t6470 - 1.*t2881*t6551 - 1.*t3531*t6668 - 1.*t3592*t6702 + t6786 - 1.*t5618*t6802) + t2807*(t3255*t6470 + t3276*t6551 + t6824) - 0.15121*t6883 - 0.15121*t6922)*var2[9] + (-0.038749*t6611 + 1.e-6*t6867 - 0.28121*t6879 - 1.*t3057*t6995 - 1.*t6650*t7015 - 1.*t2717*t7067 + 4.e-6*(-1.*t3113*t6995 - 1.*t6611*t7015 - 1.*t2790*t7067))*var2[10];
  p_output1[6]=t7815;
  p_output1[7]=0. + t2551 + t2553;
  p_output1[8]=0. + t2488*t2522 + t2471*t27;
  p_output1[9]=t3048*t4033 + t3790*t4246;
  p_output1[10]=t4154*t4508 + t4002*t4626;
  p_output1[11]=t3170*t5296 + t2807*t5563;
  p_output1[12]=-0.15121*t2154 - 0.15121*t2328 + t3170*t5650 + t2807*t5779;
  p_output1[13]=1.e-6*t1283 - 0.038749*t1606 - 0.28121*t1995 - 1.*t2717*t7015 - 1.*t3057*t7899 + 4.e-6*(-1.*t2790*t7015 - 1.*t3113*t7899);
  p_output1[14]=-1.9353204325022392e-7;
  p_output1[15]=(-1.*t2488*t4039 - 1.*t27*t4154)*var2[1] + (t7959 + t7966)*var2[2];
  p_output1[16]=t3992*var2[0] - 1.*t27*t4068*var2[1] + t2488*t4068*var2[2] + ((-1.*t3381*t3688 - 1.*t3381*t3727 - 1.*t3790*t3819 - 1.*t3867*t3878)*t7815 + t3790*(t2522*t3688 + t2668*t3727 + t2634*t3878 + t3819*t7815) + t2668*t8101 + t3381*t8179)*var2[3];
  p_output1[17]=t2490*t4578*var2[0] + (t2488*t4494 + t2508*t27*t4578)*var2[1] + (t27*t4494 - 1.*t2488*t2508*t4578)*var2[2] + (t2490*t4310*t8101 + t2490*t4488*t8179 + t7815*(t2508*t3381*t4450 - 1.*t2490*t3790*t4450 - 1.*t2490*t3727*t4488 + t2508*t3878*t4488 + t8321 + t8333) + t3790*(t2490*t3727*t4310 - 1.*t2508*t3878*t4310 - 1.*t2508*t2522*t4450 + t2490*t4450*t7815 + t8439 + t8442))*var2[3] + (t2471*(-1.*t3332*t4450 - 1.*t3685*t4488 + t8321 + t8333) + t4331*t8411 + t4002*(t3685*t4310 + t2513*t4450 + t8439 + t8442) + t3332*t8468)*var2[4];
  p_output1[18]=t2490*t5188*var2[0] + (t2488*t5131 + t2508*t27*t5188)*var2[1] + (t27*t5131 - 1.*t2488*t2508*t5188)*var2[2] + (t2490*t4903*t8101 + t2490*t5081*t8179 + t7815*(t2508*t3381*t5037 - 1.*t2490*t3790*t5037 - 1.*t2490*t3727*t5081 + t2508*t3878*t5081 + t8691 + t8696) + t3790*(t2490*t3727*t4903 - 1.*t2508*t3878*t4903 - 1.*t2508*t2522*t5037 + t2490*t5037*t7815 + t8739 + t8748))*var2[3] + (t4931*t8411 + t5004*t8468 + t2471*(-1.*t3332*t5037 - 1.*t3685*t5081 + t8691 + t8696) + t4002*(t3685*t4903 + t2513*t5037 + t8739 + t8748))*var2[4] + (t2498*(-1.*t3284*t3677 - 1.*t3307*t4745 - 1.*t3284*t4789 - 1.*t3643*t4827) + t3170*(t2380*t4745 + t2405*t4789 + t3643*t4878 + t3677*t4895))*var2[5];
  p_output1[19]=t6235*var2[0] + (t2488*t5962 - 1.*t27*t6321)*var2[1] + (t27*t5962 + t2488*t6321)*var2[2] + (t5941*t8101 + t6246*t8179 + t7815*(-1.*t3727*t6246 - 1.*t3878*t6259 - 1.*t3790*t6277 - 1.*t3381*t6300 + t9366 + t9464) + t3790*(t3727*t5941 + t3878*t6197 + t2522*t6300 + t6277*t7815 + t9472 + t9494))*var2[3] + (t6190*t8411 + t5991*t8468 + t2471*(-1.*t3685*t6027 - 1.*t3332*t6048 + t9060 + t9065 + t9366 + t9464) + t4002*(t3685*t5924 + t2513*t6048 + t9012 + t9024 + t9472 + t9494))*var2[4] + (t3276*t8923 + t3170*(t2380*t5432 + t2405*t5460 + t3643*t5858 + t3677*t5896 + t9012 + t9024) + t2498*(-1.*t3307*t5432 - 1.*t3284*t5460 - 1.*t3643*t5515 - 1.*t3677*t5522 + t9060 + t9065) + t5835*t9153)*var2[5] + (-0.15121*t5314 - 0.15121*t5343 + t3170*(t2328*t5400 + t2154*t5430 + t3592*t5799 + t3531*t5810 + t5618*t5835 + t9012) + t2498*(-1.*t3276*t5400 - 1.*t3255*t5430 - 1.*t3592*t5497 - 1.*t3531*t5512 - 1.*t3276*t5618 + t9065) + t3276*t9222 + t5835*t9321)*var2[9];
  p_output1[20]=t7680*var2[0] + (t2488*t7499 - 1.*t27*t7733)*var2[1] + (t27*t7499 + t2488*t7733)*var2[2] + ((t10033 - 1.*t3790*t7605 - 1.*t3381*t7629)*t7815 + t3790*(t10048 + t10055 + t3727*t7392 + t3878*t7404 + t2522*t7629 + t7605*t7815) + t7392*t8101)*var2[3] + (t7399*t8411 + t4002*(t10048 + t10055 + t3685*t7384 + t2513*t7478 + t9736 + t9760) + t2471*(t10033 - 1.*t3332*t7478 + t9795))*var2[4] + (t7349*t9153 + t3170*(t2405*t6560 + t2380*t6577 + t3643*t7368 + t3677*t7380 + t9736 + t9760) + t2498*(-1.*t3284*t6560 - 1.*t3307*t6577 + t9795))*var2[5] + (-0.15121*t6668 - 0.15121*t6702 + t7349*t9321 + t3170*(t2154*t6470 + t2328*t6551 + t3531*t6883 + t3592*t6922 + t5618*t7349 + t9760) + t2498*(-1.*t3255*t6470 - 1.*t3276*t6551 + t9795))*var2[9] + (-0.28121*t6611 - 0.038749*t6620 + 1.e-6*t6650 - 1.*t3057*t9927 - 1.*t6867*t9942 - 1.*t1283*t9952 + 4.e-6*(-1.*t3113*t9927 - 1.*t6879*t9942 - 1.*t1995*t9952))*var2[10];
  p_output1[21]=t3048;
  p_output1[22]=0. + t7959 + t7966;
  p_output1[23]=0. + t2488*t4039 + t27*t4154;
  p_output1[24]=t7815*t8101 + t3790*t8179;
  p_output1[25]=t2471*t8411 + t4002*t8468;
  p_output1[26]=t3170*t8923 + t2498*t9153;
  p_output1[27]=-0.15121*t2837 - 0.15121*t2881 + t3170*t9222 + t2498*t9321;
  p_output1[28]=-0.038749*t2684 + 1.e-6*t2717 - 0.28121*t2790 - 1.*t10274*t3057 - 1.*t1283*t9942 + 4.e-6*(-1.*t10274*t3113 - 1.*t1995*t9942);
  p_output1[29]=0.29999998115510645;
  p_output1[30]=(-1.*t2488*t3381 - 1.*t27*t4002)*var2[1] + t10406*var2[2];
  p_output1[31]=t3381*var2[0] - 1.*t27*t3867*var2[1] + t2488*t3867*var2[2] + (t10524*t2668 + t10578*t3992 + (t3048*t3819 + t3727*t3992 + t3688*t4039 + t3878*t4068)*t7815 + t3048*(-1.*t2522*t3688 - 1.*t2668*t3727 - 1.*t2634*t3878 - 1.*t3819*t7815))*var2[3];
  p_output1[32]=t2490*t4488*var2[0] + (t2488*t3332 + t2508*t27*t4488)*var2[1] + (t27*t3332 - 1.*t2488*t2508*t4488)*var2[2] + (t10524*t2490*t4310 + t10578*t2490*t4578 + (t10637 + t10642 + t2490*t3048*t4450 - 1.*t2508*t4039*t4450 + t2490*t3727*t4578 - 1.*t2508*t3878*t4578)*t7815 + t3048*(t10669 + t10671 - 1.*t2490*t3727*t4310 + t2508*t3878*t4310 + t2508*t2522*t4450 - 1.*t2490*t4450*t7815))*var2[3] + (t10666*t4331 + t4154*(t10669 + t10671 - 1.*t3685*t4310 - 1.*t2513*t4450) + t10678*t4494 + t2471*(t10637 + t10642 + t3038*t4450 + t3685*t4578))*var2[4];
  p_output1[33]=t2490*t5081*var2[0] + (t2488*t5004 + t2508*t27*t5081)*var2[1] + (t27*t5004 - 1.*t2488*t2508*t5081)*var2[2] + (t10524*t2490*t4903 + t10578*t2490*t5188 + (t10801 + t10803 + t2490*t3048*t5037 - 1.*t2508*t4039*t5037 + t2490*t3727*t5188 - 1.*t2508*t3878*t5188)*t7815 + t3048*(t10810 + t10811 - 1.*t2490*t3727*t4903 + t2508*t3878*t4903 + t2508*t2522*t5037 - 1.*t2490*t5037*t7815))*var2[3] + (t10666*t4931 + t4154*(t10810 + t10811 - 1.*t3685*t4903 - 1.*t2513*t5037) + t10678*t5131 + t2471*(t10801 + t10803 + t3038*t5037 + t3685*t5188))*var2[4] + (t2498*(t3643*t4736 + t3023*t4745 + t2940*t4789 + t3677*t4799) + t2807*(-1.*t2380*t4745 - 1.*t2405*t4789 - 1.*t3643*t4878 - 1.*t3677*t4895))*var2[5];
  p_output1[34]=t6246*var2[0] + (t2488*t5991 - 1.*t27*t6259)*var2[1] + (t27*t5991 + t2488*t6259)*var2[2] + (t10524*t5941 + t10578*t6235 + (t11257 + t11260 + t3727*t6235 + t3048*t6277 + t4039*t6300 + t3878*t6321)*t7815 + t3048*(t11269 + t11296 - 1.*t3727*t5941 - 1.*t3878*t6197 - 1.*t2522*t6300 - 1.*t6277*t7815))*var2[3] + (t10678*t5962 + t4154*(t10856 + t10871 + t11269 + t11296 - 1.*t3685*t5924 - 1.*t2513*t6048) + t2471*(t11033 + t11064 + t11257 + t11260 + t3038*t6048 + t3685*t6103) + t10666*t6190)*var2[4] + (t2498*(t11033 + t11064 + t3643*t5359 + t3677*t5379 + t3023*t5432 + t2940*t5460) + t10969*t5473 + t11079*t5835 + t2807*(t10856 + t10871 - 1.*t2380*t5432 - 1.*t2405*t5460 - 1.*t3643*t5858 - 1.*t3677*t5896))*var2[5] + (t11188*t5473 - 0.15121*t5497 - 0.15121*t5512 + t2498*(t11064 + t3592*t5314 + t3531*t5343 + t2881*t5400 + t2837*t5430 + t5473*t5618) + t11224*t5835 + t2807*(t10856 - 1.*t2328*t5400 - 1.*t2154*t5430 - 1.*t3592*t5799 - 1.*t3531*t5810 - 1.*t5618*t5835))*var2[9];
  p_output1[35]=(t10524*t7392 + t10578*t7680 + (t11629 + t11636 + t3048*t7605 + t4039*t7629 + t3727*t7680 + t3878*t7733)*t7815 + t3048*(t11653 + t11656 - 1.*t3727*t7392 - 1.*t3878*t7404 - 1.*t2522*t7629 - 1.*t7605*t7815))*var2[3] + (t10666*t7399 + t4154*(t11418 + t11421 + t11653 + t11656 - 1.*t3685*t7384 - 1.*t2513*t7478) + t10678*t7499 + t2471*(t11441 + t11444 + t11629 + t11636 + t3038*t7478 + t3685*t7562))*var2[4] + (t2498*(t11441 + t11444 + t2940*t6560 + t3023*t6577 + t3643*t6715 + t3677*t6724) + t10969*t6802 + t11079*t7349 + t2807*(t11418 + t11421 - 1.*t2405*t6560 - 1.*t2380*t6577 - 1.*t3643*t7368 - 1.*t3677*t7380))*var2[5] + (t11188*t6802 + t2498*(t11441 + t2837*t6470 + t2881*t6551 + t3531*t6668 + t3592*t6702 + t5618*t6802) + t11224*t7349 + t2807*(t11421 - 1.*t2154*t6470 - 1.*t2328*t6551 - 1.*t3531*t6883 - 1.*t3592*t6922 - 1.*t5618*t7349))*var2[9] + (-1.*t11612*t1283 - 1.*t11595*t2717 - 1.*t11538*t6650 - 1.*t11565*t6867 + 4.e-6*(-1.*t11612*t1995 - 1.*t11595*t2790 - 1.*t11538*t6611 - 1.*t11565*t6879))*var2[10];
  p_output1[36]=t3790;
  p_output1[37]=t10406;
  p_output1[38]=t2488*t3381 + t27*t4002;
  p_output1[39]=t10578*t3048 + t10524*t7815;
  p_output1[40]=t10666*t2471 + t10678*t4154;
  p_output1[41]=t11079*t2498 + t10969*t2807;
  p_output1[42]=t11224*t2498 + t11188*t2807 - 0.15121*t3255 - 0.15121*t3276;
  p_output1[43]=-1.*t11565*t1283 - 1.*t11538*t2717 + 4.e-6*(-1.*t11565*t1995 - 1.*t11538*t2790) + 1.e-6*t3057 - 0.28121*t3113;
  p_output1[44]=1.1914820871506078e-8;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 45, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_dh_FrFoot_QuadrupleStance.hh"

namespace QuadrupleStance
{

void J_dh_FrFoot_QuadrupleStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
