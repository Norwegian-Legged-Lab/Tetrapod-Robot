/*
 * Automatically Generated from Mathematica.
 * Thu 12 May 2022 11:31:32 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t36092;
  double t48640;
  double t45473;
  double t45946;
  double t53233;
  double t4951;
  double t35648;
  double t54035;
  double t54045;
  double t54050;
  double t54057;
  double t45947;
  double t53628;
  double t53740;
  double t54131;
  double t54149;
  double t53915;
  double t54234;
  double t54237;
  double t37798;
  double t54040;
  double t54043;
  double t54062;
  double t54078;
  double t54091;
  double t54098;
  double t56772;
  double t56802;
  double t56810;
  double t56874;
  double t56875;
  double t54133;
  double t54151;
  double t54154;
  double t54161;
  double t54173;
  double t54175;
  double t54181;
  double t56962;
  double t56967;
  double t56968;
  double t56970;
  double t56971;
  double t54236;
  double t54238;
  double t54281;
  double t54926;
  double t55255;
  double t55371;
  double t56130;
  double t56979;
  double t56984;
  double t56985;
  double t56986;
  double t56988;
  double t56776;
  double t56783;
  double t56787;
  double t56797;
  double t56955;
  double t56956;
  double t56957;
  double t56958;
  double t56996;
  double t56997;
  double t56998;
  double t56999;
  double t57001;
  double t56963;
  double t56964;
  double t56965;
  double t56966;
  double t56972;
  double t56973;
  double t56974;
  double t56975;
  double t57012;
  double t57013;
  double t57014;
  double t57065;
  double t57242;
  double t56980;
  double t56981;
  double t56982;
  double t56983;
  double t56989;
  double t56990;
  double t56991;
  double t56992;
  double t57380;
  double t57381;
  double t57382;
  double t57383;
  double t57385;
  double t54143;
  double t57395;
  double t57400;
  double t57397;
  double t57398;
  double t57399;
  double t57401;
  double t57402;
  double t57403;
  double t57404;
  double t57408;
  double t57413;
  double t57415;
  double t57416;
  double t57417;
  double t57409;
  double t57410;
  double t57411;
  double t57412;
  double t57426;
  double t57427;
  double t57434;
  double t57447;
  double t57451;
  double t57456;
  double t57457;
  double t57458;
  double t57459;
  double t57581;
  double t57582;
  double t57583;
  double t57584;
  double t57586;
  double t57591;
  double t57979;
  double t57980;
  double t57981;
  double t57645;
  double t57646;
  double t57675;
  double t57718;
  double t57719;
  double t57992;
  double t57993;
  double t57994;
  double t57969;
  double t57970;
  double t57971;
  double t57972;
  double t57973;
  double t58005;
  double t58006;
  double t58007;
  double t57977;
  double t57978;
  double t57982;
  double t57002;
  double t57003;
  double t57983;
  double t57984;
  double t57985;
  double t58017;
  double t58018;
  double t58019;
  double t57990;
  double t57991;
  double t57995;
  double t57247;
  double t57257;
  double t57996;
  double t57997;
  double t57999;
  double t58028;
  double t58031;
  double t58033;
  double t58003;
  double t58004;
  double t58008;
  double t57386;
  double t57387;
  double t58009;
  double t58010;
  double t58011;
  double t58042;
  double t58043;
  double t58044;
  double t57632;
  double t58055;
  double t58056;
  double t58057;
  double t58058;
  double t58059;
  double t58066;
  double t58067;
  double t58068;
  double t58064;
  double t58065;
  double t58069;
  double t57452;
  double t57454;
  double t58071;
  double t58072;
  double t58073;
  double t58079;
  double t58080;
  double t58081;
  double t58130;
  double t58159;
  double t58182;
  double t58226;
  double t58227;
  double t67086;
  double t67175;
  double t68866;
  double t58209;
  double t68782;
  double t68109;
  double t68928;
  double t68931;
  double t68932;
  double t68936;
  double t68953;
  double t68954;
  double t70216;
  double t70218;
  double t70834;
  double t69525;
  double t69684;
  double t69782;
  double t70100;
  double t70133;
  double t70135;
  double t71796;
  double t71807;
  double t71818;
  double t70161;
  double t70165;
  double t70171;
  double t70175;
  double t70179;
  double t70181;
  double t71912;
  double t71914;
  double t71917;
  double t68920;
  double t71931;
  double t71932;
  double t71933;
  double t71934;
  double t71935;
  double t71937;
  double t71944;
  double t71946;
  double t71947;
  double t71959;
  double t71998;
  double t72036;
  double t72038;
  double t72041;
  double t72065;
  double t72087;
  double t72126;
  double t72127;
  double t72143;
  double t72145;
  double t72152;
  double t72142;
  double t72166;
  double t72168;
  double t72174;
  double t72269;
  double t72360;
  double t72365;
  double t72382;
  double t72450;
  double t72466;
  double t72530;
  double t72605;
  double t72607;
  double t72609;
  double t72611;
  double t72612;
  double t72623;
  double t72624;
  double t72626;
  double t72617;
  double t72643;
  double t72645;
  double t72646;
  double t72647;
  double t72649;
  double t72657;
  double t72659;
  double t72660;
  double t72677;
  double t72678;
  double t72679;
  double t72691;
  double t72693;
  double t72694;
  double t72697;
  double t72698;
  double t72709;
  double t72711;
  double t72712;
  double t72699;
  double t72736;
  double t72738;
  double t72739;
  double t72741;
  double t72742;
  double t72751;
  double t72752;
  double t72754;
  double t72816;
  double t72827;
  double t72828;
  double t72896;
  double t72897;
  double t72903;
  double t72904;
  double t72905;
  double t72913;
  double t72914;
  double t72915;
  double t72907;
  double t72926;
  double t72927;
  double t72928;
  double t72929;
  double t72931;
  double t72936;
  double t72937;
  double t72938;
  double t72951;
  double t72952;
  double t72954;
  t36092 = Sin(var1[3]);
  t48640 = Cos(var1[3]);
  t45473 = Cos(var1[5]);
  t45946 = Sin(var1[4]);
  t53233 = Sin(var1[5]);
  t4951 = Cos(var1[4]);
  t35648 = Sin(var1[9]);
  t54035 = Cos(var1[9]);
  t54045 = t48640*t45473;
  t54050 = -1.*t36092*t45946*t53233;
  t54057 = t54045 + t54050;
  t45947 = t45473*t36092*t45946;
  t53628 = t48640*t53233;
  t53740 = t45947 + t53628;
  t54131 = Sin(var1[12]);
  t54149 = Cos(var1[12]);
  t53915 = -0.325*t53740;
  t54234 = Sin(var1[15]);
  t54237 = Cos(var1[15]);
  t37798 = 0.1575*t4951*t35648*t36092;
  t54040 = -1.*t54035;
  t54043 = 1. + t54040;
  t54062 = 0.1575*t54043*t54057;
  t54078 = -1.*t4951*t35648*t36092;
  t54091 = t54035*t54057;
  t54098 = t54078 + t54091;
  t56772 = Cos(var1[10]);
  t56802 = Sin(var1[10]);
  t56810 = -1.*t54035*t4951*t36092;
  t56874 = -1.*t35648*t54057;
  t56875 = t56810 + t56874;
  t54133 = -0.1575*t4951*t54131*t36092;
  t54151 = -1.*t54149;
  t54154 = 1. + t54151;
  t54161 = -0.1575*t54154*t54057;
  t54173 = -1.*t4951*t54131*t36092;
  t54175 = t54149*t54057;
  t54181 = t54173 + t54175;
  t56962 = Cos(var1[13]);
  t56967 = Sin(var1[13]);
  t56968 = -1.*t54149*t4951*t36092;
  t56970 = -1.*t54131*t54057;
  t56971 = t56968 + t56970;
  t54236 = -0.1575*t4951*t54234*t36092;
  t54238 = -1.*t54237;
  t54281 = 1. + t54238;
  t54926 = -0.1575*t54281*t54057;
  t55255 = -1.*t4951*t54234*t36092;
  t55371 = t54237*t54057;
  t56130 = t55255 + t55371;
  t56979 = Cos(var1[16]);
  t56984 = Sin(var1[16]);
  t56985 = -1.*t54237*t4951*t36092;
  t56986 = -1.*t54234*t54057;
  t56988 = t56985 + t56986;
  t56776 = -1.*t56772;
  t56783 = 1. + t56776;
  t56787 = -0.325*t56783*t53740;
  t56797 = 0.2255*t54098;
  t56955 = 0.325*t56802*t56875;
  t56956 = t56772*t53740;
  t56957 = t56802*t56875;
  t56958 = t56956 + t56957;
  t56996 = Sin(var1[11]);
  t56997 = -1.*t56802*t53740;
  t56998 = t56772*t56875;
  t56999 = t56997 + t56998;
  t57001 = Cos(var1[11]);
  t56963 = -1.*t56962;
  t56964 = 1. + t56963;
  t56965 = 0.325*t56964*t53740;
  t56966 = -0.2255*t54181;
  t56972 = -0.325*t56967*t56971;
  t56973 = t56962*t53740;
  t56974 = t56967*t56971;
  t56975 = t56973 + t56974;
  t57012 = Sin(var1[14]);
  t57013 = -1.*t56967*t53740;
  t57014 = t56962*t56971;
  t57065 = t57013 + t57014;
  t57242 = Cos(var1[14]);
  t56980 = -1.*t56979;
  t56981 = 1. + t56980;
  t56982 = -0.325*t56981*t53740;
  t56983 = -0.2255*t56130;
  t56989 = 0.325*t56984*t56988;
  t56990 = t56979*t53740;
  t56991 = t56984*t56988;
  t56992 = t56990 + t56991;
  t57380 = Sin(var1[17]);
  t57381 = -1.*t56984*t53740;
  t57382 = t56979*t56988;
  t57383 = t57381 + t57382;
  t57385 = Cos(var1[17]);
  t54143 = 0.325*t53740;
  t57395 = Cos(var1[6]);
  t57400 = Sin(var1[6]);
  t57397 = -1.*t57395;
  t57398 = 1. + t57397;
  t57399 = 0.1575*t57398*t54057;
  t57401 = 0.1575*t4951*t36092*t57400;
  t57402 = t57395*t54057;
  t57403 = -1.*t4951*t36092*t57400;
  t57404 = t57402 + t57403;
  t57408 = Cos(var1[7]);
  t57413 = -1.*t4951*t57395*t36092;
  t57415 = -1.*t54057*t57400;
  t57416 = t57413 + t57415;
  t57417 = Sin(var1[7]);
  t57409 = -1.*t57408;
  t57410 = 1. + t57409;
  t57411 = 0.325*t57410*t53740;
  t57412 = 0.2255*t57404;
  t57426 = -0.325*t57416*t57417;
  t57427 = t57408*t53740;
  t57434 = t57416*t57417;
  t57447 = t57427 + t57434;
  t57451 = Cos(var1[8]);
  t57456 = t57408*t57416;
  t57457 = -1.*t53740*t57417;
  t57458 = t57456 + t57457;
  t57459 = Sin(var1[8]);
  t57581 = 0.325*t48640*t4951*t45473;
  t57582 = 0.1575*t48640*t35648*t45946;
  t57583 = 0.1575*t54043*t48640*t4951*t53233;
  t57584 = -1.*t48640*t35648*t45946;
  t57586 = t54035*t48640*t4951*t53233;
  t57591 = t57584 + t57586;
  t57979 = -1.*t54035*t48640*t45946;
  t57980 = -1.*t48640*t4951*t35648*t53233;
  t57981 = t57979 + t57980;
  t57645 = -0.1575*t48640*t54131*t45946;
  t57646 = -0.1575*t54154*t48640*t4951*t53233;
  t57675 = -1.*t48640*t54131*t45946;
  t57718 = t54149*t48640*t4951*t53233;
  t57719 = t57675 + t57718;
  t57992 = -1.*t54149*t48640*t45946;
  t57993 = -1.*t48640*t4951*t54131*t53233;
  t57994 = t57992 + t57993;
  t57969 = -0.1575*t48640*t54234*t45946;
  t57970 = -0.1575*t54281*t48640*t4951*t53233;
  t57971 = -1.*t48640*t54234*t45946;
  t57972 = t54237*t48640*t4951*t53233;
  t57973 = t57971 + t57972;
  t58005 = -1.*t54237*t48640*t45946;
  t58006 = -1.*t48640*t4951*t54234*t53233;
  t58007 = t58005 + t58006;
  t57977 = 0.325*t56783*t48640*t4951*t45473;
  t57978 = 0.2255*t57591;
  t57982 = 0.325*t56802*t57981;
  t57002 = -1.*t57001;
  t57003 = 1. + t57002;
  t57983 = -1.*t56772*t48640*t4951*t45473;
  t57984 = t56802*t57981;
  t57985 = t57983 + t57984;
  t58017 = t48640*t4951*t45473*t56802;
  t58018 = t56772*t57981;
  t58019 = t58017 + t58018;
  t57990 = -0.325*t56964*t48640*t4951*t45473;
  t57991 = -0.2255*t57719;
  t57995 = -0.325*t56967*t57994;
  t57247 = -1.*t57242;
  t57257 = 1. + t57247;
  t57996 = -1.*t56962*t48640*t4951*t45473;
  t57997 = t56967*t57994;
  t57999 = t57996 + t57997;
  t58028 = t48640*t4951*t45473*t56967;
  t58031 = t56962*t57994;
  t58033 = t58028 + t58031;
  t58003 = 0.325*t56981*t48640*t4951*t45473;
  t58004 = -0.2255*t57973;
  t58008 = 0.325*t56984*t58007;
  t57386 = -1.*t57385;
  t57387 = 1. + t57386;
  t58009 = -1.*t56979*t48640*t4951*t45473;
  t58010 = t56984*t58007;
  t58011 = t58009 + t58010;
  t58042 = t48640*t4951*t45473*t56984;
  t58043 = t56979*t58007;
  t58044 = t58042 + t58043;
  t57632 = -0.325*t48640*t4951*t45473;
  t58055 = 0.1575*t48640*t4951*t57398*t53233;
  t58056 = 0.1575*t48640*t45946*t57400;
  t58057 = t48640*t4951*t57395*t53233;
  t58058 = -1.*t48640*t45946*t57400;
  t58059 = t58057 + t58058;
  t58066 = -1.*t48640*t57395*t45946;
  t58067 = -1.*t48640*t4951*t53233*t57400;
  t58068 = t58066 + t58067;
  t58064 = -0.325*t48640*t4951*t45473*t57410;
  t58065 = 0.2255*t58059;
  t58069 = -0.325*t58068*t57417;
  t57452 = -1.*t57451;
  t57454 = 1. + t57452;
  t58071 = -1.*t48640*t4951*t45473*t57408;
  t58072 = t58068*t57417;
  t58073 = t58071 + t58072;
  t58079 = t57408*t58068;
  t58080 = t48640*t4951*t45473*t57417;
  t58081 = t58079 + t58080;
  t58130 = t48640*t45473*t45946;
  t58159 = -1.*t36092*t53233;
  t58182 = t58130 + t58159;
  t58226 = t45473*t36092;
  t58227 = t48640*t45946*t53233;
  t67086 = t58226 + t58227;
  t67175 = -0.325*t67086;
  t68866 = 0.325*t67086;
  t58209 = 0.1575*t54043*t58182;
  t68782 = -0.1575*t54154*t58182;
  t68109 = -0.1575*t54281*t58182;
  t68928 = 0.2255*t54035*t58182;
  t68931 = -0.325*t35648*t56802*t58182;
  t68932 = -0.325*t56783*t67086;
  t68936 = -1.*t35648*t56802*t58182;
  t68953 = t56772*t67086;
  t68954 = t68936 + t68953;
  t70216 = -1.*t56772*t35648*t58182;
  t70218 = -1.*t56802*t67086;
  t70834 = t70216 + t70218;
  t69525 = -0.2255*t54149*t58182;
  t69684 = 0.325*t54131*t56967*t58182;
  t69782 = 0.325*t56964*t67086;
  t70100 = -1.*t54131*t56967*t58182;
  t70133 = t56962*t67086;
  t70135 = t70100 + t70133;
  t71796 = -1.*t56962*t54131*t58182;
  t71807 = -1.*t56967*t67086;
  t71818 = t71796 + t71807;
  t70161 = -0.2255*t54237*t58182;
  t70165 = -0.325*t54234*t56984*t58182;
  t70171 = -0.325*t56981*t67086;
  t70175 = -1.*t54234*t56984*t58182;
  t70179 = t56979*t67086;
  t70181 = t70175 + t70179;
  t71912 = -1.*t56979*t54234*t58182;
  t71914 = -1.*t56984*t67086;
  t71917 = t71912 + t71914;
  t68920 = 0.1575*t57398*t58182;
  t71931 = 0.2255*t57395*t58182;
  t71932 = 0.325*t57410*t67086;
  t71933 = 0.325*t58182*t57400*t57417;
  t71934 = t57408*t67086;
  t71935 = -1.*t58182*t57400*t57417;
  t71937 = t71934 + t71935;
  t71944 = -1.*t57408*t58182*t57400;
  t71946 = -1.*t67086*t57417;
  t71947 = t71944 + t71946;
  t71959 = -0.1575*t48640*t4951*t57395;
  t71998 = 0.1575*t67086*t57400;
  t72036 = t48640*t4951*t57395;
  t72038 = -1.*t67086*t57400;
  t72041 = t72036 + t72038;
  t72065 = 0.2255*t72041;
  t72087 = -1.*t57395*t67086;
  t72126 = -1.*t48640*t4951*t57400;
  t72127 = t72087 + t72126;
  t72143 = -1.*t48640*t45473*t45946;
  t72145 = t36092*t53233;
  t72152 = t72143 + t72145;
  t72142 = -0.325*t57408*t72041;
  t72166 = 0.325*t72152*t57417;
  t72168 = t57408*t72041;
  t72174 = -1.*t72152*t57417;
  t72269 = t72168 + t72174;
  t72360 = -1.*t57408*t72152;
  t72365 = -1.*t72041*t57417;
  t72382 = t72360 + t72365;
  t72450 = t57408*t72152;
  t72466 = t72041*t57417;
  t72530 = t72450 + t72466;
  t72605 = -0.1575*t54035*t48640*t4951;
  t72607 = 0.1575*t35648*t67086;
  t72609 = t54035*t48640*t4951;
  t72611 = -1.*t35648*t67086;
  t72612 = t72609 + t72611;
  t72623 = -1.*t48640*t4951*t35648;
  t72624 = -1.*t54035*t67086;
  t72626 = t72623 + t72624;
  t72617 = 0.2255*t72612;
  t72643 = -0.325*t56802*t72152;
  t72645 = 0.325*t56772*t72612;
  t72646 = -1.*t56802*t72152;
  t72647 = t56772*t72612;
  t72649 = t72646 + t72647;
  t72657 = -1.*t56772*t72152;
  t72659 = -1.*t56802*t72612;
  t72660 = t72657 + t72659;
  t72677 = t56772*t72152;
  t72678 = t56802*t72612;
  t72679 = t72677 + t72678;
  t72691 = 0.1575*t54149*t48640*t4951;
  t72693 = -0.1575*t54131*t67086;
  t72694 = t54149*t48640*t4951;
  t72697 = -1.*t54131*t67086;
  t72698 = t72694 + t72697;
  t72709 = -1.*t48640*t4951*t54131;
  t72711 = -1.*t54149*t67086;
  t72712 = t72709 + t72711;
  t72699 = -0.2255*t72698;
  t72736 = 0.325*t56967*t72152;
  t72738 = -0.325*t56962*t72698;
  t72739 = -1.*t56967*t72152;
  t72741 = t56962*t72698;
  t72742 = t72739 + t72741;
  t72751 = -1.*t56962*t72152;
  t72752 = -1.*t56967*t72698;
  t72754 = t72751 + t72752;
  t72816 = t56962*t72152;
  t72827 = t56967*t72698;
  t72828 = t72816 + t72827;
  t72896 = 0.1575*t54237*t48640*t4951;
  t72897 = -0.1575*t54234*t67086;
  t72903 = t54237*t48640*t4951;
  t72904 = -1.*t54234*t67086;
  t72905 = t72903 + t72904;
  t72913 = -1.*t48640*t4951*t54234;
  t72914 = -1.*t54237*t67086;
  t72915 = t72913 + t72914;
  t72907 = -0.2255*t72905;
  t72926 = -0.325*t56984*t72152;
  t72927 = 0.325*t56979*t72905;
  t72928 = -1.*t56984*t72152;
  t72929 = t56979*t72905;
  t72931 = t72928 + t72929;
  t72936 = -1.*t56979*t72152;
  t72937 = -1.*t56984*t72905;
  t72938 = t72936 + t72937;
  t72951 = t56979*t72152;
  t72952 = t56984*t72905;
  t72954 = t72951 + t72952;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=-258.00300000000004;
  p_output1[3]=-26.977500000000003*(t37798 + t53915 + t54062 + 0.1575*t54098) - 26.977500000000003*(t54133 + t54143 + t54161 - 0.1575*t54181) - 26.977500000000003*(t53915 + t54236 + t54926 - 0.1575*t56130) - 6.1312500000000005*(t37798 + t54062 + t56787 + t56797 + t56955 - 0.325*t56958) - 6.1312500000000005*(t54133 + t54161 + t56965 + t56966 + t56972 + 0.325*t56975) - 6.1312500000000005*(t54236 + t54926 + t56982 + t56983 + t56989 - 0.325*t56992) - 1.9620000000000002*(t37798 + t54062 + t56787 + t56797 + t56955 - 0.575*t56996*t56999 - 0.575*(-1.*t56996*t56999 + t56958*t57001) - 0.575*t56958*t57003) - 1.9620000000000002*(t54133 + t54161 + t56965 + t56966 + t56972 + 0.075*t57012*t57065 + 0.075*(-1.*t57012*t57065 + t56975*t57242) + 0.075*t56975*t57257) - 1.9620000000000002*(t54236 + t54926 + t56982 + t56983 + t56989 - 0.575*t57380*t57383 - 0.575*(-1.*t57380*t57383 + t56992*t57385) - 0.575*t56992*t57387) - 26.977500000000003*(t54143 + t57399 + t57401 + 0.1575*t57404) - 6.1312500000000005*(t57399 + t57401 + t57411 + t57412 + t57426 + 0.325*t57447) - 1.9620000000000002*(t57399 + t57401 + t57411 + t57412 + t57426 + 0.075*t57447*t57454 + 0.075*t57458*t57459 + 0.075*(t57447*t57451 - 1.*t57458*t57459));
  p_output1[4]=-26.977500000000003*(t57581 + t57582 + t57583 + 0.1575*t57591) - 26.977500000000003*(t57632 + t57645 + t57646 - 0.1575*t57719) - 26.977500000000003*(t57581 + t57969 + t57970 - 0.1575*t57973) - 6.1312500000000005*(t57582 + t57583 + t57977 + t57978 + t57982 - 0.325*t57985) - 6.1312500000000005*(t57645 + t57646 + t57990 + t57991 + t57995 + 0.325*t57999) - 6.1312500000000005*(t57969 + t57970 + t58003 + t58004 + t58008 - 0.325*t58011) - 1.9620000000000002*(t57582 + t57583 + t57977 + t57978 + t57982 - 0.575*t57003*t57985 - 0.575*t56996*t58019 - 0.575*(t57001*t57985 - 1.*t56996*t58019)) - 1.9620000000000002*(t57645 + t57646 + t57990 + t57991 + t57995 + 0.075*t57257*t57999 + 0.075*t57012*t58033 + 0.075*(t57242*t57999 - 1.*t57012*t58033)) - 1.9620000000000002*(t57969 + t57970 + t58003 + t58004 + t58008 - 0.575*t57387*t58011 - 0.575*t57380*t58044 - 0.575*(t57385*t58011 - 1.*t57380*t58044)) - 26.977500000000003*(t57632 + t58055 + t58056 + 0.1575*t58059) - 6.1312500000000005*(t58055 + t58056 + t58064 + t58065 + t58069 + 0.325*t58073) - 1.9620000000000002*(t58055 + t58056 + t58064 + t58065 + t58069 + 0.075*t57454*t58073 + 0.075*t57459*t58081 + 0.075*(t57451*t58073 - 1.*t57459*t58081));
  p_output1[5]=-26.977500000000003*(0.1575*t54035*t58182 + t58209 + t67175) - 26.977500000000003*(-0.1575*t54237*t58182 + t67175 + t68109) - 26.977500000000003*(-0.1575*t54149*t58182 + t68782 + t68866) - 26.977500000000003*(0.1575*t57395*t58182 + t68866 + t68920) - 6.1312500000000005*(t58209 + t68928 + t68931 + t68932 - 0.325*t68954) - 6.1312500000000005*(t68782 + t69525 + t69684 + t69782 + 0.325*t70135) - 6.1312500000000005*(t68109 + t70161 + t70165 + t70171 - 0.325*t70181) - 1.9620000000000002*(t58209 + t68928 + t68931 + t68932 - 0.575*t57003*t68954 - 0.575*t56996*t70834 - 0.575*(t57001*t68954 - 1.*t56996*t70834)) - 1.9620000000000002*(t68782 + t69525 + t69684 + t69782 + 0.075*t57257*t70135 + 0.075*t57012*t71818 + 0.075*(t57242*t70135 - 1.*t57012*t71818)) - 1.9620000000000002*(t68109 + t70161 + t70165 + t70171 - 0.575*t57387*t70181 - 0.575*t57380*t71917 - 0.575*(t57385*t70181 - 1.*t57380*t71917)) - 6.1312500000000005*(t68920 + t71931 + t71932 + t71933 + 0.325*t71937) - 1.9620000000000002*(t68920 + t71931 + t71932 + t71933 + 0.075*t57454*t71937 + 0.075*t57459*t71947 + 0.075*(t57451*t71937 - 1.*t57459*t71947));
  p_output1[6]=-26.977500000000003*(t71959 + t71998 + 0.1575*t72041) - 6.1312500000000005*(t71959 + t71998 + t72065) - 1.9620000000000002*(t71959 + t71998 + t72065 - 0.325*t57417*t72127 + 0.075*t57417*t57454*t72127 + 0.075*t57408*t57459*t72127 + 0.075*(t57417*t57451*t72127 - 1.*t57408*t57459*t72127));
  p_output1[7]=-6.1312500000000005*(t72142 + t72166 + 0.325*t72269) - 1.9620000000000002*(t72142 + t72166 + 0.075*t57454*t72269 + 0.075*t57459*t72382 + 0.075*(t57451*t72269 - 1.*t57459*t72382));
  p_output1[8]=-1.9620000000000002*(0.075*t57451*t72269 + 0.075*t57459*t72530 + 0.075*(-1.*t57451*t72269 - 1.*t57459*t72530));
  p_output1[9]=-26.977500000000003*(t72605 + t72607 + 0.1575*t72612) - 6.1312500000000005*(t72605 + t72607 + t72617) - 1.9620000000000002*(t72605 + t72607 + t72617 + 0.325*t56802*t72626 - 0.575*t56772*t56996*t72626 - 0.575*t56802*t57003*t72626 - 0.575*(-1.*t56772*t56996*t72626 + t56802*t57001*t72626));
  p_output1[10]=-6.1312500000000005*(t72643 + t72645 - 0.325*t72649) - 1.9620000000000002*(t72643 + t72645 - 0.575*t57003*t72649 - 0.575*t56996*t72660 - 0.575*(t57001*t72649 - 1.*t56996*t72660));
  p_output1[11]=-1.9620000000000002*(-0.575*t57001*t72649 - 0.575*t56996*t72679 - 0.575*(-1.*t57001*t72649 - 1.*t56996*t72679));
  p_output1[12]=-26.977500000000003*(t72691 + t72693 - 0.1575*t72698) - 6.1312500000000005*(t72691 + t72693 + t72699) - 1.9620000000000002*(t72691 + t72693 + t72699 - 0.325*t56967*t72712 + 0.075*t56962*t57012*t72712 + 0.075*t56967*t57257*t72712 + 0.075*(-1.*t56962*t57012*t72712 + t56967*t57242*t72712));
  p_output1[13]=-6.1312500000000005*(t72736 + t72738 + 0.325*t72742) - 1.9620000000000002*(t72736 + t72738 + 0.075*t57257*t72742 + 0.075*t57012*t72754 + 0.075*(t57242*t72742 - 1.*t57012*t72754));
  p_output1[14]=-1.9620000000000002*(0.075*t57242*t72742 + 0.075*t57012*t72828 + 0.075*(-1.*t57242*t72742 - 1.*t57012*t72828));
  p_output1[15]=-26.977500000000003*(t72896 + t72897 - 0.1575*t72905) - 6.1312500000000005*(t72896 + t72897 + t72907) - 1.9620000000000002*(t72896 + t72897 + t72907 + 0.325*t56984*t72915 - 0.575*t56979*t57380*t72915 - 0.575*t56984*t57387*t72915 - 0.575*(-1.*t56979*t57380*t72915 + t56984*t57385*t72915));
  p_output1[16]=-6.1312500000000005*(t72926 + t72927 - 0.325*t72931) - 1.9620000000000002*(t72926 + t72927 - 0.575*t57387*t72931 - 0.575*t57380*t72938 - 0.575*(t57385*t72931 - 1.*t57380*t72938));
  p_output1[17]=-1.9620000000000002*(-0.575*t57385*t72931 - 0.575*t57380*t72954 - 0.575*(-1.*t57385*t72931 - 1.*t57380*t72954));
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ge_vec_vision60.hh"

namespace DiagonalStance
{

void Ge_vec_vision60_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
