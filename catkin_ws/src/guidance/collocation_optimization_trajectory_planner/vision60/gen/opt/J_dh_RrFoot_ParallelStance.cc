/*
 * Automatically Generated from Mathematica.
 * Tue 7 Jun 2022 14:07:50 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t19403;
  double t19125;
  double t19130;
  double t19438;
  double t19136;
  double t19441;
  double t19443;
  double t18127;
  double t19636;
  double t19641;
  double t19664;
  double t18885;
  double t19673;
  double t19694;
  double t19618;
  double t19679;
  double t19681;
  double t13004;
  double t19719;
  double t19740;
  double t19760;
  double t19761;
  double t19762;
  double t19763;
  double t19766;
  double t19767;
  double t19768;
  double t20071;
  double t20093;
  double t20097;
  double t20264;
  double t20266;
  double t20270;
  double t20276;
  double t20278;
  double t20281;
  double t20282;
  double t20283;
  double t20284;
  double t20263;
  double t20275;
  double t20285;
  double t20286;
  double t20246;
  double t20247;
  double t20248;
  double t20259;
  double t20291;
  double t20295;
  double t20297;
  double t20299;
  double t20301;
  double t20302;
  double t20304;
  double t20305;
  double t20307;
  double t20308;
  double t20309;
  double t20310;
  double t20315;
  double t20319;
  double t20324;
  double t20325;
  double t20326;
  double t20344;
  double t20350;
  double t20356;
  double t20201;
  double t20203;
  double t20208;
  double t20209;
  double t20235;
  double t20236;
  double t20336;
  double t20337;
  double t20339;
  double t20331;
  double t20332;
  double t20333;
  double t20197;
  double t20237;
  double t20244;
  double t20296;
  double t20327;
  double t20328;
  double t20369;
  double t20374;
  double t20394;
  double t20404;
  double t20414;
  double t20415;
  double t20491;
  double t20510;
  double t20547;
  double t20418;
  double t20463;
  double t20465;
  double t20469;
  double t20470;
  double t20689;
  double t20690;
  double t20691;
  double t20693;
  double t20708;
  double t20709;
  double t20711;
  double t20419;
  double t20420;
  double t20421;
  double t20714;
  double t20720;
  double t20472;
  double t20477;
  double t20481;
  double t20684;
  double t20696;
  double t20828;
  double t20862;
  double t20872;
  double t20880;
  double t20882;
  double t20911;
  double t20912;
  double t20913;
  double t20685;
  double t20686;
  double t20878;
  double t20883;
  double t20895;
  double t20897;
  double t20697;
  double t20698;
  double t20924;
  double t20926;
  double t20932;
  double t20949;
  double t20950;
  double t21027;
  double t21035;
  double t21047;
  double t21056;
  double t21060;
  double t21064;
  double t21072;
  double t21076;
  double t21080;
  double t21092;
  double t21096;
  double t21100;
  double t20791;
  double t20798;
  double t21209;
  double t21218;
  double t21224;
  double t21255;
  double t21256;
  double t21235;
  double t21242;
  double t21244;
  double t21245;
  double t21231;
  double t21253;
  double t21258;
  double t21294;
  double t21295;
  double t21296;
  double t21279;
  double t21281;
  double t21283;
  double t21287;
  double t21289;
  double t21290;
  double t21301;
  double t21302;
  double t21303;
  double t21297;
  double t21300;
  double t21305;
  double t21311;
  double t21312;
  double t21313;
  double t21316;
  double t21317;
  double t21318;
  double t21320;
  double t21321;
  double t21322;
  double t21625;
  double t21627;
  double t21628;
  double t21259;
  double t21660;
  double t21662;
  double t21668;
  double t21685;
  double t21688;
  double t21691;
  double t21707;
  double t21714;
  double t21724;
  double t21727;
  double t21728;
  double t21729;
  double t21655;
  double t21656;
  double t21643;
  double t21669;
  double t21756;
  double t21757;
  double t21758;
  double t21749;
  double t21753;
  double t21754;
  double t21759;
  double t21905;
  double t21917;
  double t21972;
  double t21973;
  double t21974;
  double t21987;
  double t21988;
  double t21991;
  double t21993;
  double t21994;
  double t21995;
  double t19994;
  double t19997;
  double t20013;
  double t20886;
  double t20887;
  double t20889;
  double t20358;
  double t20363;
  double t20365;
  double t22006;
  double t22007;
  double t20431;
  double t20442;
  double t20447;
  double t21898;
  double t22153;
  double t22178;
  double t22183;
  double t22145;
  double t22197;
  double t22200;
  double t22154;
  double t22155;
  double t22157;
  double t22192;
  double t21648;
  double t21659;
  double t21112;
  double t21116;
  double t21120;
  double t22326;
  double t22334;
  double t22190;
  double t22345;
  double t22347;
  double t22193;
  double t22194;
  double t22418;
  double t22705;
  double t20906;
  double t20907;
  double t20908;
  double t23243;
  double t23244;
  double t21140;
  double t21143;
  double t21166;
  double t22337;
  double t22340;
  double t22341;
  double t22357;
  double t23500;
  double t23517;
  double t23655;
  double t23649;
  double t23461;
  double t23532;
  double t23808;
  double t24191;
  double t24223;
  double t21567;
  double t21573;
  double t21590;
  double t23733;
  double t23746;
  double t23783;
  double t23787;
  double t24299;
  double t24300;
  double t24308;
  double t24317;
  double t24309;
  double t24314;
  double t24296;
  double t24302;
  double t24337;
  double t24341;
  double t21682;
  double t21692;
  double t21704;
  double t24346;
  double t24347;
  double t22120;
  double t22121;
  double t22123;
  double t21272;
  double t21273;
  double t21274;
  double t24508;
  double t24519;
  double t24607;
  double t24345;
  double t24660;
  double t24608;
  double t24609;
  double t24610;
  double t24666;
  double t24672;
  double t24626;
  double t24650;
  double t24298;
  double t24651;
  double t24654;
  double t24900;
  double t24903;
  double t20927;
  double t24910;
  double t24914;
  double t24678;
  double t24941;
  double t24944;
  double t24948;
  double t24950;
  double t24892;
  double t24893;
  double t25047;
  double t25071;
  double t25078;
  double t22101;
  double t22102;
  double t22021;
  double t22022;
  double t22027;
  double t25103;
  double t25107;
  double t25124;
  double t25128;
  double t25131;
  double t21267;
  double t21268;
  double t21270;
  double t24917;
  t19403 = Cos(var1[16]);
  t19125 = Cos(var1[17]);
  t19130 = Sin(var1[16]);
  t19438 = Sin(var1[17]);
  t19136 = t19125*t19130;
  t19441 = -1.*t19403*t19438;
  t19443 = t19136 + t19441;
  t18127 = Cos(var1[5]);
  t19636 = t19403*t19125;
  t19641 = t19130*t19438;
  t19664 = t19636 + t19641;
  t18885 = Sin(var1[15]);
  t19673 = Sin(var1[5]);
  t19694 = Cos(var1[3]);
  t19618 = -1.*t18127*t18885*t19443;
  t19679 = t19664*t19673;
  t19681 = t19618 + t19679;
  t13004 = Sin(var1[3]);
  t19719 = Cos(var1[15]);
  t19740 = Cos(var1[4]);
  t19760 = t19719*t19740*t19443;
  t19761 = Sin(var1[4]);
  t19762 = t18127*t19664;
  t19763 = t18885*t19443*t19673;
  t19766 = t19762 + t19763;
  t19767 = -1.*t19761*t19766;
  t19768 = t19760 + t19767;
  t20071 = -1.*t19719*t19443*t19761;
  t20093 = -1.*t19740*t19766;
  t20097 = t20071 + t20093;
  t20264 = -0.0641*t19125;
  t20266 = -0.28*t19438;
  t20270 = t20264 + t20266;
  t20276 = -1.*t19125;
  t20278 = 1. + t20276;
  t20281 = -0.575*t20278;
  t20282 = -0.295*t19125;
  t20283 = -0.0641*t19438;
  t20284 = t20281 + t20282 + t20283;
  t20263 = 0.325*t19130;
  t20275 = t19403*t20270;
  t20285 = t19130*t20284;
  t20286 = t20263 + t20275 + t20285;
  t20246 = t19740*t18885;
  t20247 = t19719*t19761*t19673;
  t20248 = t20246 + t20247;
  t20259 = -0.068*t18885;
  t20291 = t19719*t20286;
  t20295 = t20259 + t20291;
  t20297 = -1.*t19403;
  t20299 = 1. + t20297;
  t20301 = -0.325*t20299;
  t20302 = -1.*t19130*t20270;
  t20304 = t19403*t20284;
  t20305 = t20301 + t20302 + t20304;
  t20307 = t18127*t20305;
  t20308 = -1.*t19719;
  t20309 = 1. + t20308;
  t20310 = -0.1575*t20309;
  t20315 = -0.2255*t19719;
  t20319 = -1.*t18885*t20286;
  t20324 = t20310 + t20315 + t20319;
  t20325 = -1.*t20324*t19673;
  t20326 = t20307 + t20325;
  t20344 = t19740*t20295;
  t20350 = -1.*t19761*t20326;
  t20356 = t20344 + t20350;
  t20201 = -1.*t19125*t19130;
  t20203 = t19403*t19438;
  t20208 = t20201 + t20203;
  t20209 = t18127*t20208;
  t20235 = t18885*t19664*t19673;
  t20236 = t20209 + t20235;
  t20336 = t18885*t19761;
  t20337 = -1.*t19719*t19740*t19673;
  t20339 = t20336 + t20337;
  t20331 = t20295*t19761;
  t20332 = t19740*t20326;
  t20333 = t20331 + t20332;
  t20197 = t19719*t19664*t19761;
  t20237 = t19740*t20236;
  t20244 = t20197 + t20237;
  t20296 = -1.*t20295*t19761;
  t20327 = -1.*t19740*t20326;
  t20328 = t20296 + t20327;
  t20369 = t19719*t19740*t19664;
  t20374 = -1.*t19761*t20236;
  t20394 = t20369 + t20374;
  t20404 = t18127*t20324;
  t20414 = t20305*t19673;
  t20415 = t20404 + t20414;
  t20491 = t18127*t18885*t19443;
  t20510 = -1.*t19664*t19673;
  t20547 = t20491 + t20510;
  t20418 = -1.*t19719*t18127*t20415;
  t20463 = -1.*t18127*t18885*t19664;
  t20465 = t20208*t19673;
  t20469 = t20463 + t20465;
  t20470 = t20415*t20469;
  t20689 = -1.*t18127*t20324;
  t20690 = -1.*t20305*t19673;
  t20691 = t20689 + t20690;
  t20693 = t19719*t19673*t20415;
  t20708 = t18127*t18885*t19664;
  t20709 = -1.*t20208*t19673;
  t20711 = t20708 + t20709;
  t20419 = -1.*t20339*t20333;
  t20420 = -1.*t20248*t20356;
  t20421 = t20418 + t20419 + t20420;
  t20714 = t20326*t20469;
  t20720 = t20415*t20236;
  t20472 = t20333*t20244;
  t20477 = t20356*t20394;
  t20481 = t20470 + t20472 + t20477;
  t20684 = -1.*t18885*t20295;
  t20696 = t19719*t20295*t19664;
  t20828 = 0.068*t18885;
  t20862 = -1.*t19719*t20286;
  t20872 = t20828 + t20862;
  t20880 = -0.068*t19719;
  t20882 = t20880 + t20319;
  t20911 = -1.*t19740*t18885*t19443;
  t20912 = -1.*t19719*t19443*t19761*t19673;
  t20913 = t20911 + t20912;
  t20685 = t19719*t19673*t20326;
  t20686 = t20684 + t20685 + t20418;
  t20878 = -1.*t19719*t20295;
  t20883 = -1.*t18885*t20882;
  t20895 = -1.*t18885*t20295*t19664;
  t20897 = t19719*t20882*t19664;
  t20697 = t20326*t20236;
  t20698 = t20696 + t20470 + t20697;
  t20924 = Power(t18127,2);
  t20926 = -1.*t19719*t20924*t20872;
  t20932 = t18127*t18885*t20415;
  t20949 = -1.*t19719*t18127*t19664*t20415;
  t20950 = t18127*t20872*t20469;
  t21027 = -1.*t18885*t19664*t19761;
  t21035 = t19719*t19740*t19664*t19673;
  t21047 = t21027 + t21035;
  t21056 = t20882*t19761;
  t21060 = -1.*t19740*t20872*t19673;
  t21064 = t21056 + t21060;
  t21072 = t19740*t20882;
  t21076 = t20872*t19761*t19673;
  t21080 = t21072 + t21076;
  t21092 = t19719*t19761;
  t21096 = t19740*t18885*t19673;
  t21100 = t21092 + t21096;
  t20791 = -1.*t19719*t20324;
  t20798 = t20684 + t20791;
  t21209 = -1.*t19403*t19125;
  t21218 = -1.*t19130*t19438;
  t21224 = t21209 + t21218;
  t21255 = 0.325*t19403;
  t21256 = t21255 + t20302 + t20304;
  t21235 = -0.325*t19130;
  t21242 = -1.*t19403*t20270;
  t21244 = -1.*t19130*t20284;
  t21245 = t21235 + t21242 + t21244;
  t21231 = t19719*t20295*t20208;
  t21253 = Power(t19719,2);
  t21258 = t21253*t21256*t19664;
  t21294 = -1.*t18127*t18885*t21256;
  t21295 = t21245*t19673;
  t21296 = t21294 + t21295;
  t21279 = -1.*t18127*t18885*t20208;
  t21281 = t21224*t19673;
  t21283 = t21279 + t21281;
  t21287 = t18127*t21245;
  t21289 = t18885*t21256*t19673;
  t21290 = t21287 + t21289;
  t21301 = t18127*t21224;
  t21302 = t18885*t20208*t19673;
  t21303 = t21301 + t21302;
  t21297 = -1.*t19719*t18127*t21296;
  t21300 = t21296*t20469;
  t21305 = t20415*t21283;
  t21311 = t19719*t20208*t19761;
  t21312 = t19740*t21303;
  t21313 = t21311 + t21312;
  t21316 = t19719*t21256*t19761;
  t21317 = t19740*t21290;
  t21318 = t21316 + t21317;
  t21320 = t19719*t19740*t21256;
  t21321 = -1.*t19761*t21290;
  t21322 = t21320 + t21321;
  t21625 = -0.28*t19125;
  t21627 = 0.0641*t19438;
  t21628 = t21625 + t21627;
  t21259 = Power(t18885,2);
  t21660 = t19130*t20270;
  t21662 = t19403*t21628;
  t21668 = t21660 + t21662;
  t21685 = t18127*t19443;
  t21688 = t18885*t21224*t19673;
  t21691 = t21685 + t21688;
  t21707 = -1.*t18127*t18885*t21224;
  t21714 = t19443*t19673;
  t21724 = t21707 + t21714;
  t21727 = t19719*t19740*t21224;
  t21728 = -1.*t19761*t21691;
  t21729 = t21727 + t21728;
  t21655 = -1.*t19130*t21628;
  t21656 = t20275 + t21655;
  t21643 = t19719*t20295*t19443;
  t21669 = t21253*t21668*t19664;
  t21756 = -1.*t18127*t18885*t21668;
  t21757 = t21656*t19673;
  t21758 = t21756 + t21757;
  t21749 = t18127*t21656;
  t21753 = t18885*t21668*t19673;
  t21754 = t21749 + t21753;
  t21759 = -1.*t19719*t18127*t21758;
  t21905 = t21758*t20469;
  t21917 = t20415*t19681;
  t21972 = t19719*t19443*t19761;
  t21973 = t19740*t19766;
  t21974 = t21972 + t21973;
  t21987 = t19719*t21668*t19761;
  t21988 = t19740*t21754;
  t21991 = t21987 + t21988;
  t21993 = t19719*t19740*t21668;
  t21994 = -1.*t19761*t21754;
  t21995 = t21993 + t21994;
  t19994 = t19694*t19681;
  t19997 = -1.*t13004*t19768;
  t20013 = t19994 + t19997;
  t20886 = t20305*t20208;
  t20887 = -1.*t18885*t20324*t19664;
  t20889 = t20886 + t20696 + t20887;
  t20358 = -1.*t18885*t19761;
  t20363 = t19719*t19740*t19673;
  t20365 = t20358 + t20363;
  t22006 = t20333*t21974;
  t22007 = t20356*t19768;
  t20431 = -1.*t19719*t19664*t19761;
  t20442 = -1.*t19740*t20236;
  t20447 = t20431 + t20442;
  t21898 = t20326*t19766;
  t22153 = -1.*t20415*t20469;
  t22178 = t20415*t19766;
  t22183 = t20326*t19681;
  t22145 = t21917 + t22006 + t22007;
  t22197 = -1.*t20326*t20469;
  t22200 = -1.*t20415*t20236;
  t22154 = -1.*t20333*t20244;
  t22155 = -1.*t20356*t20394;
  t22157 = t22153 + t22154 + t22155;
  t22192 = -1.*t19719*t20295*t19664;
  t21648 = -1.*t18885*t20324*t19443;
  t21659 = t20305*t19664;
  t21112 = t19719*t19740;
  t21116 = -1.*t18885*t19761*t19673;
  t21120 = t21112 + t21116;
  t22326 = -1.*t18885*t20295*t19443;
  t22334 = t19719*t20882*t19443;
  t22190 = t21643 + t21898 + t21917;
  t22345 = t18885*t20295*t19664;
  t22347 = -1.*t19719*t20882*t19664;
  t22193 = -1.*t20326*t20236;
  t22194 = t22192 + t22153 + t22193;
  t22418 = -1.*t19719*t18127*t19443*t20415;
  t22705 = t18127*t20872*t19681;
  t20906 = -1.*t18885*t19443*t19761;
  t20907 = t19719*t19740*t19443*t19673;
  t20908 = t20906 + t20907;
  t23243 = t19719*t18127*t19664*t20415;
  t23244 = -1.*t18127*t20872*t20469;
  t21140 = -1.*t19740*t18885*t19664;
  t21143 = -1.*t19719*t19664*t19761*t19673;
  t21166 = t21140 + t21143;
  t22337 = -1.*t20305*t20208;
  t22340 = t18885*t20324*t19664;
  t22341 = t22337 + t22192 + t22340;
  t22357 = t21643 + t21648 + t21659;
  t23500 = -1.*t21245*t20208;
  t23517 = -1.*t20305*t21224;
  t23655 = t21245*t19664;
  t23649 = t21253*t21256*t19443;
  t23461 = -1.*t19719*t20295*t20208;
  t23532 = -1.*t21253*t21256*t19664;
  t23808 = t21296*t19681;
  t24191 = -1.*t21296*t20469;
  t24223 = -1.*t20415*t21283;
  t21567 = t19719*t19740*t20208;
  t21573 = -1.*t19761*t21303;
  t21590 = t21567 + t21573;
  t23733 = t20286*t19443;
  t23746 = t23733 + t21659;
  t23783 = -1.*t20286*t19664;
  t23787 = t22337 + t23783;
  t24299 = -1.*t21656*t20208;
  t24300 = -1.*t20305*t19664;
  t24308 = t20305*t19443;
  t24317 = t21656*t19664;
  t24309 = t21253*t21668*t19443;
  t24314 = t19719*t20295*t21224;
  t24296 = -1.*t19719*t20295*t19443;
  t24302 = -1.*t21253*t21668*t19664;
  t24337 = t20415*t21724;
  t24341 = t21758*t19681;
  t21682 = t19719*t21224*t19761;
  t21692 = t19740*t21691;
  t21704 = t21682 + t21692;
  t24346 = -1.*t21758*t20469;
  t24347 = -1.*t20415*t19681;
  t22120 = t19719*t19694*t18127;
  t22121 = -1.*t13004*t20248;
  t22123 = t22120 + t22121;
  t21272 = t19694*t20469;
  t21273 = -1.*t13004*t20394;
  t21274 = t21272 + t21273;
  t24508 = -1.*t20333*t21974;
  t24519 = -1.*t20356*t19768;
  t24607 = t19719*t18127*t20415;
  t24345 = -1.*t20326*t19766;
  t24660 = -1.*t19719*t19673*t20415;
  t24608 = t20339*t20333;
  t24609 = t20248*t20356;
  t24610 = t24607 + t24608 + t24609;
  t24666 = -1.*t20415*t19766;
  t24672 = -1.*t20326*t19681;
  t24626 = t24347 + t24508 + t24519;
  t24650 = t18885*t20295;
  t24298 = t18885*t20324*t19443;
  t24651 = -1.*t19719*t19673*t20326;
  t24654 = t24650 + t24651 + t24607;
  t24900 = t19719*t20295;
  t24903 = t18885*t20882;
  t20927 = Power(t19673,2);
  t24910 = t18885*t20295*t19443;
  t24914 = -1.*t19719*t20882*t19443;
  t24678 = t24296 + t24345 + t24347;
  t24941 = t19719*t20924*t20872;
  t24944 = -1.*t18127*t18885*t20415;
  t24948 = t19719*t18127*t19443*t20415;
  t24950 = -1.*t18127*t20872*t19681;
  t24892 = t19719*t20324;
  t24893 = t24650 + t24892;
  t25047 = -1.*t21253*t21256*t19443;
  t25071 = t19719*t18127*t21296;
  t25078 = -1.*t21296*t19681;
  t22101 = -0.325*t19438;
  t22102 = -1.*t20284*t19438;
  t22021 = t13004*t19681;
  t22022 = t19694*t19768;
  t22027 = t22021 + t22022;
  t25103 = -1.*t21253*t21668*t19443;
  t25107 = -1.*t19719*t20295*t21224;
  t25124 = t19719*t18127*t21758;
  t25128 = -1.*t20415*t21724;
  t25131 = -1.*t21758*t19681;
  t21267 = t13004*t20469;
  t21268 = t19694*t20394;
  t21270 = t21267 + t21268;
  t24917 = t24296 + t24298 + t24300;
  p_output1[0]=(-1.*t13004*t19681 - 1.*t19694*t19768)*var2[1] + t20013*var2[2];
  p_output1[1]=t19768*var2[0] - 1.*t13004*t20097*var2[1] + t19694*t20097*var2[2] + (t20244*(-1.*t20248*t20328 - 1.*t20248*t20333 - 1.*t20339*t20356 - 1.*t20356*t20365) + t20394*t20421 + t20339*(t20244*t20356 + t20328*t20394 + t20333*t20394 + t20356*t20447) + t20248*t20481)*var2[3];
  p_output1[2]=t19740*t20547*var2[0] + (t19694*t19766 + t13004*t19761*t20547)*var2[1] + (t13004*t19766 - 1.*t19694*t19761*t20547)*var2[2] + (-1.*t18127*t19719*t19740*t20481 + t20244*(-1.*t18127*t19719*t20326 + t18127*t19719*t19740*t20333 - 1.*t18127*t19719*t19761*t20356 + t19761*t20248*t20691 - 1.*t19740*t20339*t20691 + t20693) + t19740*t20421*t20711 + t20339*(t19740*t20244*t20691 - 1.*t19761*t20394*t20691 + t19740*t20333*t20711 - 1.*t19761*t20356*t20711 + t20714 + t20720))*var2[3] + (t20236*t20686 + t20469*(t19673*t19719*t20691 + t20693) - 1.*t19673*t19719*t20698 + t18127*t19719*(t20236*t20691 + t20326*t20711 + t20714 + t20720))*var2[4];
  p_output1[3]=t20908*var2[0] + (-1.*t18127*t19443*t19694*t19719 - 1.*t13004*t20913)*var2[1] + (-1.*t13004*t18127*t19443*t19719 + t19694*t20913)*var2[2] + (t20421*t21047 + t20481*t21100 + t20244*(t20926 + t20932 - 1.*t20339*t21064 - 1.*t20248*t21080 - 1.*t20333*t21100 - 1.*t20356*t21120) + t20339*(t20949 + t20950 + t20333*t21047 + t20244*t21064 + t20394*t21080 + t20356*t21166))*var2[3] + (-1.*t18127*t19664*t19719*t20686 - 1.*t18127*t18885*t20698 + t20469*(-1.*t18885*t19673*t20326 + t20878 + t20883 + t20926 - 1.*t19719*t20872*t20927 + t20932) + t18127*t19719*(t19664*t19673*t19719*t20326 - 1.*t19673*t20236*t20872 + t20895 + t20897 + t20949 + t20950))*var2[4] + (-1.*t18885*t19664*t20798 + t19664*t19719*(t18885*t20324 - 1.*t19719*t20872 + t20878 + t20883) + t19719*t20889 + t18885*(-1.*t19664*t19719*t20324 - 1.*t18885*t19664*t20872 + t20895 + t20897))*var2[5];
  p_output1[4]=t20244*var2[0] + t21274*var2[1] + t21270*var2[2] + (t20421*t21313 + t20244*(t21297 - 1.*t20339*t21318 - 1.*t20248*t21322) + t20339*(t21300 + t21305 + t20333*t21313 + t20244*t21318 + t20394*t21322 + t20356*t21590))*var2[3] + (t20686*t21283 + t20469*(-1.*t18885*t19719*t21256 + t19673*t19719*t21290 + t21297) + t18127*t19719*(t21231 + t21258 + t20236*t21290 + t21300 + t20326*t21303 + t21305))*var2[4] + (t19719*t20208*t20798 + t18885*(-1.*t18885*t20208*t20324 + t20305*t21224 + t21231 + t20208*t21245 + t21258 + t19664*t21256*t21259))*var2[5] + (0.1575*t19664 + 0.2255*t21224)*var2[15];
  p_output1[5]=t21704*var2[0] + (t19694*t21724 - 1.*t13004*t21729)*var2[1] + (t13004*t21724 + t19694*t21729)*var2[2] + (t20421*t21974 + t20244*(t21759 - 1.*t20339*t21991 - 1.*t20248*t21995) + t20339*(t21905 + t21917 + t20244*t21991 + t20394*t21995 + t22006 + t22007))*var2[3] + (t19681*t20686 + t20469*(-1.*t18885*t19719*t21668 + t19673*t19719*t21754 + t21759) + t18127*t19719*(t21643 + t21669 + t20236*t21754 + t21898 + t21905 + t21917))*var2[4] + (t19443*t19719*t20798 + t18885*(t21643 + t21648 + t20208*t21656 + t21659 + t19664*t21259*t21668 + t21669))*var2[5] + (0.2255*t19664 + 0.1575*t21224)*var2[15] + (-0.325*t19125 - 1.*t19125*t20284 - 1.*t19125*t21628)*var2[16];
  p_output1[6]=t21974;
  p_output1[7]=t20013;
  p_output1[8]=t22027;
  p_output1[9]=t20244*t20421 + t20339*t20481;
  p_output1[10]=t20469*t20686 + t18127*t19719*t20698;
  p_output1[11]=t19664*t19719*t20798 + t18885*t20889;
  p_output1[12]=0.1575*t19443 + 0.2255*t20208;
  p_output1[13]=-1.*t19125*t20270 + t22101 + t22102;
  p_output1[14]=-0.0641;
  p_output1[15]=(-1.*t13004*t18127*t19719 - 1.*t19694*t20248)*var2[1] + t22123*var2[2];
  p_output1[16]=t20248*var2[0] - 1.*t13004*t20365*var2[1] + t19694*t20365*var2[2] + ((-1.*t20244*t20356 - 1.*t20328*t20394 - 1.*t20333*t20394 - 1.*t20356*t20447)*t21974 + t20244*(t19768*t20328 + t19768*t20333 + t20097*t20356 + t20356*t21974) + t20394*t22145 + t19768*t22157)*var2[3];
  p_output1[17]=-1.*t18127*t19719*t19740*var2[0] + (-1.*t19673*t19694*t19719 - 1.*t13004*t18127*t19719*t19761)*var2[1] + (-1.*t13004*t19673*t19719 + t18127*t19694*t19719*t19761)*var2[2] + (t19740*t20711*t22145 + t19740*t20547*t22157 + t20244*(t19740*t20333*t20547 - 1.*t19761*t20356*t20547 - 1.*t19761*t19768*t20691 + t19740*t20691*t21974 + t22178 + t22183) + t21974*(-1.*t19740*t20244*t20691 + t19761*t20394*t20691 - 1.*t19740*t20333*t20711 + t19761*t20356*t20711 + t22197 + t22200))*var2[3] + (t20469*(t20326*t20547 + t19766*t20691 + t22178 + t22183) + t20236*t22190 + t19766*t22194 + t19681*(-1.*t20236*t20691 - 1.*t20326*t20711 + t22197 + t22200))*var2[4];
  p_output1[18]=t21100*var2[0] + (-1.*t18127*t18885*t19694 - 1.*t13004*t21120)*var2[1] + (-1.*t13004*t18127*t18885 + t19694*t21120)*var2[2] + (t21047*t22145 + t20908*t22157 + t20244*(t20333*t20908 + t20356*t20913 + t19768*t21080 + t21064*t21974 + t22418 + t22705) + t21974*(-1.*t20333*t21047 - 1.*t20244*t21064 - 1.*t20394*t21080 - 1.*t20356*t21166 + t23243 + t23244))*var2[3] + (-1.*t18127*t19664*t19719*t22190 - 1.*t18127*t19443*t19719*t22194 + t20469*(t19443*t19673*t19719*t20326 - 1.*t19673*t19766*t20872 + t22326 + t22334 + t22418 + t22705) + t19681*(-1.*t19664*t19673*t19719*t20326 + t19673*t20236*t20872 + t22345 + t22347 + t23243 + t23244))*var2[4] + (t19664*t19719*(-1.*t19443*t19719*t20324 - 1.*t18885*t19443*t20872 + t22326 + t22334) - 1.*t18885*t19443*t22341 + t19443*t19719*(t19664*t19719*t20324 + t18885*t19664*t20872 + t22345 + t22347) - 1.*t18885*t19664*t22357)*var2[5];
  p_output1[19]=(t21313*t22145 + t20244*t22157 + t20244*(t20470 + t20472 + t20477 + t19768*t21322 + t21318*t21974 + t23808) + t21974*(-1.*t20333*t21313 - 1.*t20244*t21318 - 1.*t20394*t21322 - 1.*t20356*t21590 + t24191 + t24223))*var2[3] + (t21283*t22190 + t20469*t22194 + t20469*(t20470 + t20696 + t20697 + t19766*t21290 + t23649 + t23808) + t19681*(-1.*t20236*t21290 - 1.*t20326*t21303 + t23461 + t23532 + t24191 + t24223))*var2[4] + (t19664*t19719*t22341 + t19719*t20208*t22357 + t19443*t19719*(t18885*t20208*t20324 - 1.*t19664*t21256*t21259 + t23461 + t23500 + t23517 + t23532) + t19664*t19719*(t20696 + t20886 + t20887 + t19443*t21256*t21259 + t23649 + t23655))*var2[5] + (t19664*(-1.*t20208*t20286 - 1.*t19664*t21256 + t23500 + t23517) + t20208*(t19664*t20286 + t20886 + t19443*t21256 + t23655) + t21224*t23746 + t20208*t23787)*var2[15];
  p_output1[20]=(t21974*t22145 + t21704*t22157 + t20244*(t20333*t21704 + t20356*t21729 + t21974*t21991 + t19768*t21995 + t24337 + t24341) + t21974*(-1.*t20244*t21991 - 1.*t20394*t21995 + t24346 + t24347 + t24508 + t24519))*var2[3] + (t19681*t22190 + t21724*t22194 + t20469*(t20326*t21691 + t19766*t21754 + t24309 + t24314 + t24337 + t24341) + t19681*(-1.*t20236*t21754 + t24296 + t24302 + t24345 + t24346 + t24347))*var2[4] + (t19719*t21224*t22341 + t19443*t19719*t22357 + t19443*t19719*(-1.*t19664*t21259*t21668 + t24296 + t24298 + t24299 + t24300 + t24302) + t19664*t19719*(-1.*t18885*t20324*t21224 + t19443*t21259*t21668 + t24308 + t24309 + t24314 + t24317))*var2[5] + (t19664*t23746 + t19443*t23787 + t19664*(-1.*t19443*t20286 - 1.*t19664*t21668 + t24299 + t24300) + t20208*(t20286*t21224 + t19443*t21668 + t24308 + t24317))*var2[15];
  p_output1[21]=t20339;
  p_output1[22]=t22123;
  p_output1[23]=t13004*t18127*t19719 + t19694*t20248;
  p_output1[24]=t20244*t22145 + t21974*t22157;
  p_output1[25]=t20469*t22190 + t19681*t22194;
  p_output1[26]=t19443*t19719*t22341 + t19664*t19719*t22357;
  p_output1[27]=t20208*t23746 + t19664*t23787;
  p_output1[28]=(-1.*t19694*t20394 - 1.*t13004*t20469)*var2[1] + t21274*var2[2];
  p_output1[29]=t20394*var2[0] - 1.*t13004*t20447*var2[1] + t19694*t20447*var2[2] + ((t20248*t20328 + t20248*t20333 + t20339*t20356 + t20356*t20365)*t21974 + t20339*(-1.*t19768*t20328 - 1.*t19768*t20333 - 1.*t20097*t20356 - 1.*t20356*t21974) + t19768*t24610 + t20248*t24626)*var2[3];
  p_output1[30]=t19740*t20711*var2[0] + (t19694*t20236 + t13004*t19761*t20711)*var2[1] + (t13004*t20236 - 1.*t19694*t19761*t20711)*var2[2] + (t19740*t20547*t24610 - 1.*t18127*t19719*t19740*t24626 + t21974*(t18127*t19719*t20326 - 1.*t18127*t19719*t19740*t20333 + t18127*t19719*t19761*t20356 - 1.*t19761*t20248*t20691 + t19740*t20339*t20691 + t24660) + t20339*(-1.*t19740*t20333*t20547 + t19761*t20356*t20547 + t19761*t19768*t20691 - 1.*t19740*t20691*t21974 + t24666 + t24672))*var2[3] + (t19766*t24654 + t19681*(-1.*t19673*t19719*t20691 + t24660) + t18127*t19719*(-1.*t20326*t20547 - 1.*t19766*t20691 + t24666 + t24672) - 1.*t19673*t19719*t24678)*var2[4];
  p_output1[31]=t21047*var2[0] + (-1.*t18127*t19664*t19694*t19719 - 1.*t13004*t21166)*var2[1] + (-1.*t13004*t18127*t19664*t19719 + t19694*t21166)*var2[2] + (t20908*t24610 + t21100*t24626 + t21974*(t20339*t21064 + t20248*t21080 + t20333*t21100 + t20356*t21120 + t24941 + t24944) + t20339*(-1.*t20333*t20908 - 1.*t20356*t20913 - 1.*t19768*t21080 - 1.*t21064*t21974 + t24948 + t24950))*var2[3] + (-1.*t18127*t19443*t19719*t24654 - 1.*t18127*t18885*t24678 + t19681*(t18885*t19673*t20326 + t19719*t20872*t20927 + t24900 + t24903 + t24941 + t24944) + t18127*t19719*(-1.*t19443*t19673*t19719*t20326 + t19673*t19766*t20872 + t24910 + t24914 + t24948 + t24950))*var2[4] + (-1.*t18885*t19443*t24893 + t19443*t19719*(-1.*t18885*t20324 + t19719*t20872 + t24900 + t24903) + t18885*(t19443*t19719*t20324 + t18885*t19443*t20872 + t24910 + t24914) + t19719*t24917)*var2[5];
  p_output1[32]=t21313*var2[0] + (t19694*t21283 - 1.*t13004*t21590)*var2[1] + (t13004*t21283 + t19694*t21590)*var2[2] + (t20244*t24610 + t21974*(t20339*t21318 + t20248*t21322 + t25071) + t20339*(-1.*t19768*t21322 - 1.*t21318*t21974 + t22153 + t22154 + t22155 + t25078))*var2[3] + (t20469*t24654 + t19681*(t18885*t19719*t21256 - 1.*t19673*t19719*t21290 + t25071) + t18127*t19719*(-1.*t19766*t21290 + t22153 + t22192 + t22193 + t25047 + t25078))*var2[4] + (t19664*t19719*t24893 + t18885*(-1.*t19664*t21245 - 1.*t19443*t21256*t21259 + t22192 + t22337 + t22340 + t25047))*var2[5] - 0.068*t20208*var2[15];
  p_output1[33]=t21974*var2[0] + t20013*var2[1] + t22027*var2[2] + (t21704*t24610 + t21974*(t20339*t21991 + t20248*t21995 + t25124) + t20339*(-1.*t20333*t21704 - 1.*t20356*t21729 - 1.*t21974*t21991 - 1.*t19768*t21995 + t25128 + t25131))*var2[3] + (t21724*t24654 + t19681*(t18885*t19719*t21668 - 1.*t19673*t19719*t21754 + t25124) + t18127*t19719*(-1.*t20326*t21691 - 1.*t19766*t21754 + t25103 + t25107 + t25128 + t25131))*var2[4] + (t19719*t21224*t24893 + t18885*(-1.*t19443*t20305 + t18885*t20324*t21224 - 1.*t19664*t21656 - 1.*t19443*t21259*t21668 + t25103 + t25107))*var2[5] - 0.068*t19443*var2[15] + (-1.*t19438*t21628 + t22101 + t22102)*var2[16];
  p_output1[34]=t20244;
  p_output1[35]=t21274;
  p_output1[36]=t21270;
  p_output1[37]=t21974*t24610 + t20339*t24626;
  p_output1[38]=t19681*t24654 + t18127*t19719*t24678;
  p_output1[39]=t19443*t19719*t24893 + t18885*t24917;
  p_output1[40]=-0.068*t19664;
  p_output1[41]=0.325*t19125 - 1.*t19438*t20270 + t19125*t20284;
  p_output1[42]=-0.28;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 43, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_dh_RrFoot_ParallelStance.hh"

namespace ParallelStance
{

void J_dh_RrFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
