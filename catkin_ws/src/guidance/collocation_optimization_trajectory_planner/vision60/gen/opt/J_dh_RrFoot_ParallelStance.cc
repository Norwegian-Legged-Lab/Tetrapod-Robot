/*
 * Automatically Generated from Mathematica.
 * Sun 3 Apr 2022 21:47:58 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t11202;
  double t3269;
  double t10842;
  double t13029;
  double t11190;
  double t13323;
  double t13331;
  double t67;
  double t18575;
  double t18628;
  double t20605;
  double t3035;
  double t20923;
  double t24095;
  double t13425;
  double t22232;
  double t22259;
  double t48;
  double t24179;
  double t24333;
  double t24393;
  double t24397;
  double t25017;
  double t25083;
  double t25559;
  double t26259;
  double t26346;
  double t27090;
  double t27094;
  double t27134;
  double t27738;
  double t28381;
  double t28479;
  double t28613;
  double t28672;
  double t28693;
  double t28724;
  double t28728;
  double t28729;
  double t27702;
  double t28523;
  double t28730;
  double t28731;
  double t27615;
  double t27627;
  double t27650;
  double t27696;
  double t28732;
  double t28741;
  double t28757;
  double t28767;
  double t28768;
  double t28769;
  double t28770;
  double t28772;
  double t28773;
  double t28774;
  double t28775;
  double t28783;
  double t28787;
  double t28792;
  double t28794;
  double t28798;
  double t28804;
  double t28868;
  double t28869;
  double t28872;
  double t27276;
  double t27388;
  double t27390;
  double t27391;
  double t27392;
  double t27475;
  double t28816;
  double t28840;
  double t28855;
  double t28809;
  double t28810;
  double t28814;
  double t27144;
  double t27553;
  double t27603;
  double t28749;
  double t28805;
  double t28807;
  double t28940;
  double t28969;
  double t28971;
  double t28975;
  double t28976;
  double t28977;
  double t29040;
  double t29042;
  double t29043;
  double t28978;
  double t29018;
  double t29021;
  double t29023;
  double t29025;
  double t29099;
  double t29103;
  double t29107;
  double t29116;
  double t29181;
  double t29203;
  double t29213;
  double t28979;
  double t28983;
  double t28984;
  double t29220;
  double t29223;
  double t29029;
  double t29034;
  double t29035;
  double t29079;
  double t29137;
  double t29309;
  double t29313;
  double t29316;
  double t29322;
  double t29323;
  double t29369;
  double t29372;
  double t29376;
  double t29085;
  double t29089;
  double t29320;
  double t29324;
  double t29346;
  double t29351;
  double t29141;
  double t29157;
  double t29389;
  double t29405;
  double t29473;
  double t29539;
  double t29569;
  double t29587;
  double t29589;
  double t29592;
  double t29595;
  double t29596;
  double t29597;
  double t29599;
  double t29600;
  double t29601;
  double t29605;
  double t29607;
  double t29609;
  double t29300;
  double t29303;
  double t29672;
  double t29673;
  double t29676;
  double t29706;
  double t29707;
  double t29696;
  double t29698;
  double t29699;
  double t29700;
  double t29689;
  double t29705;
  double t29708;
  double t29826;
  double t29827;
  double t29831;
  double t29816;
  double t29817;
  double t29818;
  double t29822;
  double t29823;
  double t29824;
  double t29847;
  double t29849;
  double t29850;
  double t29833;
  double t29842;
  double t29852;
  double t29862;
  double t29863;
  double t29865;
  double t29869;
  double t29873;
  double t29875;
  double t29877;
  double t29878;
  double t29879;
  double t29912;
  double t29913;
  double t29914;
  double t29709;
  double t29929;
  double t29930;
  double t29931;
  double t29939;
  double t29940;
  double t29941;
  double t29946;
  double t29947;
  double t29948;
  double t29950;
  double t29951;
  double t29952;
  double t29925;
  double t29926;
  double t29923;
  double t29932;
  double t29969;
  double t29971;
  double t29972;
  double t29964;
  double t29965;
  double t29966;
  double t29973;
  double t29977;
  double t29981;
  double t30005;
  double t30010;
  double t30013;
  double t30015;
  double t30019;
  double t30020;
  double t30023;
  double t30024;
  double t30025;
  double t26786;
  double t26870;
  double t26932;
  double t29327;
  double t29328;
  double t29336;
  double t28881;
  double t28885;
  double t28888;
  double t30035;
  double t30039;
  double t28989;
  double t28996;
  double t29006;
  double t29976;
  double t30273;
  double t30292;
  double t30294;
  double t30216;
  double t30313;
  double t30319;
  double t30274;
  double t30275;
  double t30276;
  double t30299;
  double t29924;
  double t29928;
  double t29617;
  double t29622;
  double t29623;
  double t30459;
  double t30461;
  double t30297;
  double t30472;
  double t30475;
  double t30304;
  double t30305;
  double t30501;
  double t30504;
  double t29362;
  double t29363;
  double t29366;
  double t30509;
  double t30510;
  double t29639;
  double t29640;
  double t29643;
  double t30465;
  double t30466;
  double t30469;
  double t30481;
  double t30699;
  double t30701;
  double t30727;
  double t30719;
  double t30694;
  double t30703;
  double t30771;
  double t30774;
  double t30776;
  double t29891;
  double t29892;
  double t29893;
  double t30732;
  double t30733;
  double t30753;
  double t30754;
  double t30811;
  double t30812;
  double t30821;
  double t30828;
  double t30822;
  double t30825;
  double t30808;
  double t30813;
  double t31072;
  double t31094;
  double t29938;
  double t29942;
  double t29943;
  double t31104;
  double t31106;
  double t30088;
  double t30089;
  double t30090;
  double t29800;
  double t29805;
  double t29810;
  double t31148;
  double t31149;
  double t31226;
  double t31103;
  double t31451;
  double t31227;
  double t31228;
  double t31229;
  double t31456;
  double t31458;
  double t31308;
  double t31438;
  double t30809;
  double t31443;
  double t31446;
  double t31519;
  double t31523;
  double t29423;
  double t31530;
  double t31534;
  double t31465;
  double t31556;
  double t31561;
  double t31566;
  double t31569;
  double t31511;
  double t31515;
  double t31603;
  double t31628;
  double t31649;
  double t30075;
  double t30079;
  double t30053;
  double t30054;
  double t30055;
  double t31692;
  double t31694;
  double t31716;
  double t31719;
  double t31722;
  double t29792;
  double t29793;
  double t29796;
  double t31538;
  t11202 = Cos(var1[16]);
  t3269 = Cos(var1[17]);
  t10842 = Sin(var1[16]);
  t13029 = Sin(var1[17]);
  t11190 = t3269*t10842;
  t13323 = -1.*t11202*t13029;
  t13331 = t11190 + t13323;
  t67 = Cos(var1[5]);
  t18575 = t11202*t3269;
  t18628 = t10842*t13029;
  t20605 = t18575 + t18628;
  t3035 = Sin(var1[15]);
  t20923 = Sin(var1[5]);
  t24095 = Cos(var1[3]);
  t13425 = -1.*t67*t3035*t13331;
  t22232 = t20605*t20923;
  t22259 = t13425 + t22232;
  t48 = Sin(var1[3]);
  t24179 = Cos(var1[15]);
  t24333 = Cos(var1[4]);
  t24393 = t24179*t24333*t13331;
  t24397 = Sin(var1[4]);
  t25017 = t67*t20605;
  t25083 = t3035*t13331*t20923;
  t25559 = t25017 + t25083;
  t26259 = -1.*t24397*t25559;
  t26346 = t24393 + t26259;
  t27090 = -1.*t24179*t13331*t24397;
  t27094 = -1.*t24333*t25559;
  t27134 = t27090 + t27094;
  t27738 = -0.0641*t3269;
  t28381 = -0.28*t13029;
  t28479 = t27738 + t28381;
  t28613 = -1.*t3269;
  t28672 = 1. + t28613;
  t28693 = -0.575*t28672;
  t28724 = -0.295*t3269;
  t28728 = -0.0641*t13029;
  t28729 = t28693 + t28724 + t28728;
  t27702 = 0.325*t10842;
  t28523 = t11202*t28479;
  t28730 = t10842*t28729;
  t28731 = t27702 + t28523 + t28730;
  t27615 = t24333*t3035;
  t27627 = t24179*t24397*t20923;
  t27650 = t27615 + t27627;
  t27696 = -0.068*t3035;
  t28732 = t24179*t28731;
  t28741 = t27696 + t28732;
  t28757 = -1.*t11202;
  t28767 = 1. + t28757;
  t28768 = -0.325*t28767;
  t28769 = -1.*t10842*t28479;
  t28770 = t11202*t28729;
  t28772 = t28768 + t28769 + t28770;
  t28773 = t67*t28772;
  t28774 = -1.*t24179;
  t28775 = 1. + t28774;
  t28783 = -0.1575*t28775;
  t28787 = -0.2255*t24179;
  t28792 = -1.*t3035*t28731;
  t28794 = t28783 + t28787 + t28792;
  t28798 = -1.*t28794*t20923;
  t28804 = t28773 + t28798;
  t28868 = t24333*t28741;
  t28869 = -1.*t24397*t28804;
  t28872 = t28868 + t28869;
  t27276 = -1.*t3269*t10842;
  t27388 = t11202*t13029;
  t27390 = t27276 + t27388;
  t27391 = t67*t27390;
  t27392 = t3035*t20605*t20923;
  t27475 = t27391 + t27392;
  t28816 = t3035*t24397;
  t28840 = -1.*t24179*t24333*t20923;
  t28855 = t28816 + t28840;
  t28809 = t28741*t24397;
  t28810 = t24333*t28804;
  t28814 = t28809 + t28810;
  t27144 = t24179*t20605*t24397;
  t27553 = t24333*t27475;
  t27603 = t27144 + t27553;
  t28749 = -1.*t28741*t24397;
  t28805 = -1.*t24333*t28804;
  t28807 = t28749 + t28805;
  t28940 = t24179*t24333*t20605;
  t28969 = -1.*t24397*t27475;
  t28971 = t28940 + t28969;
  t28975 = t67*t28794;
  t28976 = t28772*t20923;
  t28977 = t28975 + t28976;
  t29040 = t67*t3035*t13331;
  t29042 = -1.*t20605*t20923;
  t29043 = t29040 + t29042;
  t28978 = -1.*t24179*t67*t28977;
  t29018 = -1.*t67*t3035*t20605;
  t29021 = t27390*t20923;
  t29023 = t29018 + t29021;
  t29025 = t28977*t29023;
  t29099 = -1.*t67*t28794;
  t29103 = -1.*t28772*t20923;
  t29107 = t29099 + t29103;
  t29116 = t24179*t20923*t28977;
  t29181 = t67*t3035*t20605;
  t29203 = -1.*t27390*t20923;
  t29213 = t29181 + t29203;
  t28979 = -1.*t28855*t28814;
  t28983 = -1.*t27650*t28872;
  t28984 = t28978 + t28979 + t28983;
  t29220 = t28804*t29023;
  t29223 = t28977*t27475;
  t29029 = t28814*t27603;
  t29034 = t28872*t28971;
  t29035 = t29025 + t29029 + t29034;
  t29079 = -1.*t3035*t28741;
  t29137 = t24179*t28741*t20605;
  t29309 = 0.068*t3035;
  t29313 = -1.*t24179*t28731;
  t29316 = t29309 + t29313;
  t29322 = -0.068*t24179;
  t29323 = t29322 + t28792;
  t29369 = -1.*t24333*t3035*t13331;
  t29372 = -1.*t24179*t13331*t24397*t20923;
  t29376 = t29369 + t29372;
  t29085 = t24179*t20923*t28804;
  t29089 = t29079 + t29085 + t28978;
  t29320 = -1.*t24179*t28741;
  t29324 = -1.*t3035*t29323;
  t29346 = -1.*t3035*t28741*t20605;
  t29351 = t24179*t29323*t20605;
  t29141 = t28804*t27475;
  t29157 = t29137 + t29025 + t29141;
  t29389 = Power(t67,2);
  t29405 = -1.*t24179*t29389*t29316;
  t29473 = t67*t3035*t28977;
  t29539 = -1.*t24179*t67*t20605*t28977;
  t29569 = t67*t29316*t29023;
  t29587 = -1.*t3035*t20605*t24397;
  t29589 = t24179*t24333*t20605*t20923;
  t29592 = t29587 + t29589;
  t29595 = t29323*t24397;
  t29596 = -1.*t24333*t29316*t20923;
  t29597 = t29595 + t29596;
  t29599 = t24333*t29323;
  t29600 = t29316*t24397*t20923;
  t29601 = t29599 + t29600;
  t29605 = t24179*t24397;
  t29607 = t24333*t3035*t20923;
  t29609 = t29605 + t29607;
  t29300 = -1.*t24179*t28794;
  t29303 = t29079 + t29300;
  t29672 = -1.*t11202*t3269;
  t29673 = -1.*t10842*t13029;
  t29676 = t29672 + t29673;
  t29706 = 0.325*t11202;
  t29707 = t29706 + t28769 + t28770;
  t29696 = -0.325*t10842;
  t29698 = -1.*t11202*t28479;
  t29699 = -1.*t10842*t28729;
  t29700 = t29696 + t29698 + t29699;
  t29689 = t24179*t28741*t27390;
  t29705 = Power(t24179,2);
  t29708 = t29705*t29707*t20605;
  t29826 = -1.*t67*t3035*t29707;
  t29827 = t29700*t20923;
  t29831 = t29826 + t29827;
  t29816 = -1.*t67*t3035*t27390;
  t29817 = t29676*t20923;
  t29818 = t29816 + t29817;
  t29822 = t67*t29700;
  t29823 = t3035*t29707*t20923;
  t29824 = t29822 + t29823;
  t29847 = t67*t29676;
  t29849 = t3035*t27390*t20923;
  t29850 = t29847 + t29849;
  t29833 = -1.*t24179*t67*t29831;
  t29842 = t29831*t29023;
  t29852 = t28977*t29818;
  t29862 = t24179*t27390*t24397;
  t29863 = t24333*t29850;
  t29865 = t29862 + t29863;
  t29869 = t24179*t29707*t24397;
  t29873 = t24333*t29824;
  t29875 = t29869 + t29873;
  t29877 = t24179*t24333*t29707;
  t29878 = -1.*t24397*t29824;
  t29879 = t29877 + t29878;
  t29912 = -0.28*t3269;
  t29913 = 0.0641*t13029;
  t29914 = t29912 + t29913;
  t29709 = Power(t3035,2);
  t29929 = t10842*t28479;
  t29930 = t11202*t29914;
  t29931 = t29929 + t29930;
  t29939 = t67*t13331;
  t29940 = t3035*t29676*t20923;
  t29941 = t29939 + t29940;
  t29946 = -1.*t67*t3035*t29676;
  t29947 = t13331*t20923;
  t29948 = t29946 + t29947;
  t29950 = t24179*t24333*t29676;
  t29951 = -1.*t24397*t29941;
  t29952 = t29950 + t29951;
  t29925 = -1.*t10842*t29914;
  t29926 = t28523 + t29925;
  t29923 = t24179*t28741*t13331;
  t29932 = t29705*t29931*t20605;
  t29969 = -1.*t67*t3035*t29931;
  t29971 = t29926*t20923;
  t29972 = t29969 + t29971;
  t29964 = t67*t29926;
  t29965 = t3035*t29931*t20923;
  t29966 = t29964 + t29965;
  t29973 = -1.*t24179*t67*t29972;
  t29977 = t29972*t29023;
  t29981 = t28977*t22259;
  t30005 = t24179*t13331*t24397;
  t30010 = t24333*t25559;
  t30013 = t30005 + t30010;
  t30015 = t24179*t29931*t24397;
  t30019 = t24333*t29966;
  t30020 = t30015 + t30019;
  t30023 = t24179*t24333*t29931;
  t30024 = -1.*t24397*t29966;
  t30025 = t30023 + t30024;
  t26786 = t24095*t22259;
  t26870 = -1.*t48*t26346;
  t26932 = t26786 + t26870;
  t29327 = t28772*t27390;
  t29328 = -1.*t3035*t28794*t20605;
  t29336 = t29327 + t29137 + t29328;
  t28881 = -1.*t3035*t24397;
  t28885 = t24179*t24333*t20923;
  t28888 = t28881 + t28885;
  t30035 = t28814*t30013;
  t30039 = t28872*t26346;
  t28989 = -1.*t24179*t20605*t24397;
  t28996 = -1.*t24333*t27475;
  t29006 = t28989 + t28996;
  t29976 = t28804*t25559;
  t30273 = -1.*t28977*t29023;
  t30292 = t28977*t25559;
  t30294 = t28804*t22259;
  t30216 = t29981 + t30035 + t30039;
  t30313 = -1.*t28804*t29023;
  t30319 = -1.*t28977*t27475;
  t30274 = -1.*t28814*t27603;
  t30275 = -1.*t28872*t28971;
  t30276 = t30273 + t30274 + t30275;
  t30299 = -1.*t24179*t28741*t20605;
  t29924 = -1.*t3035*t28794*t13331;
  t29928 = t28772*t20605;
  t29617 = t24179*t24333;
  t29622 = -1.*t3035*t24397*t20923;
  t29623 = t29617 + t29622;
  t30459 = -1.*t3035*t28741*t13331;
  t30461 = t24179*t29323*t13331;
  t30297 = t29923 + t29976 + t29981;
  t30472 = t3035*t28741*t20605;
  t30475 = -1.*t24179*t29323*t20605;
  t30304 = -1.*t28804*t27475;
  t30305 = t30299 + t30273 + t30304;
  t30501 = -1.*t24179*t67*t13331*t28977;
  t30504 = t67*t29316*t22259;
  t29362 = -1.*t3035*t13331*t24397;
  t29363 = t24179*t24333*t13331*t20923;
  t29366 = t29362 + t29363;
  t30509 = t24179*t67*t20605*t28977;
  t30510 = -1.*t67*t29316*t29023;
  t29639 = -1.*t24333*t3035*t20605;
  t29640 = -1.*t24179*t20605*t24397*t20923;
  t29643 = t29639 + t29640;
  t30465 = -1.*t28772*t27390;
  t30466 = t3035*t28794*t20605;
  t30469 = t30465 + t30299 + t30466;
  t30481 = t29923 + t29924 + t29928;
  t30699 = -1.*t29700*t27390;
  t30701 = -1.*t28772*t29676;
  t30727 = t29700*t20605;
  t30719 = t29705*t29707*t13331;
  t30694 = -1.*t24179*t28741*t27390;
  t30703 = -1.*t29705*t29707*t20605;
  t30771 = t29831*t22259;
  t30774 = -1.*t29831*t29023;
  t30776 = -1.*t28977*t29818;
  t29891 = t24179*t24333*t27390;
  t29892 = -1.*t24397*t29850;
  t29893 = t29891 + t29892;
  t30732 = t28731*t13331;
  t30733 = t30732 + t29928;
  t30753 = -1.*t28731*t20605;
  t30754 = t30465 + t30753;
  t30811 = -1.*t29926*t27390;
  t30812 = -1.*t28772*t20605;
  t30821 = t28772*t13331;
  t30828 = t29926*t20605;
  t30822 = t29705*t29931*t13331;
  t30825 = t24179*t28741*t29676;
  t30808 = -1.*t24179*t28741*t13331;
  t30813 = -1.*t29705*t29931*t20605;
  t31072 = t28977*t29948;
  t31094 = t29972*t22259;
  t29938 = t24179*t29676*t24397;
  t29942 = t24333*t29941;
  t29943 = t29938 + t29942;
  t31104 = -1.*t29972*t29023;
  t31106 = -1.*t28977*t22259;
  t30088 = t24179*t24095*t67;
  t30089 = -1.*t48*t27650;
  t30090 = t30088 + t30089;
  t29800 = t24095*t29023;
  t29805 = -1.*t48*t28971;
  t29810 = t29800 + t29805;
  t31148 = -1.*t28814*t30013;
  t31149 = -1.*t28872*t26346;
  t31226 = t24179*t67*t28977;
  t31103 = -1.*t28804*t25559;
  t31451 = -1.*t24179*t20923*t28977;
  t31227 = t28855*t28814;
  t31228 = t27650*t28872;
  t31229 = t31226 + t31227 + t31228;
  t31456 = -1.*t28977*t25559;
  t31458 = -1.*t28804*t22259;
  t31308 = t31106 + t31148 + t31149;
  t31438 = t3035*t28741;
  t30809 = t3035*t28794*t13331;
  t31443 = -1.*t24179*t20923*t28804;
  t31446 = t31438 + t31443 + t31226;
  t31519 = t24179*t28741;
  t31523 = t3035*t29323;
  t29423 = Power(t20923,2);
  t31530 = t3035*t28741*t13331;
  t31534 = -1.*t24179*t29323*t13331;
  t31465 = t30808 + t31103 + t31106;
  t31556 = t24179*t29389*t29316;
  t31561 = -1.*t67*t3035*t28977;
  t31566 = t24179*t67*t13331*t28977;
  t31569 = -1.*t67*t29316*t22259;
  t31511 = t24179*t28794;
  t31515 = t31438 + t31511;
  t31603 = -1.*t29705*t29707*t13331;
  t31628 = t24179*t67*t29831;
  t31649 = -1.*t29831*t22259;
  t30075 = -0.325*t13029;
  t30079 = -1.*t28729*t13029;
  t30053 = t48*t22259;
  t30054 = t24095*t26346;
  t30055 = t30053 + t30054;
  t31692 = -1.*t29705*t29931*t13331;
  t31694 = -1.*t24179*t28741*t29676;
  t31716 = t24179*t67*t29972;
  t31719 = -1.*t28977*t29948;
  t31722 = -1.*t29972*t22259;
  t29792 = t48*t29023;
  t29793 = t24095*t28971;
  t29796 = t29792 + t29793;
  t31538 = t30808 + t30809 + t30812;
  p_output1[0]=(-1.*t24095*t26346 - 1.*t22259*t48)*var2[1] + t26932*var2[2];
  p_output1[1]=t26346*var2[0] - 1.*t27134*t48*var2[1] + t24095*t27134*var2[2] + (t27603*(-1.*t27650*t28807 - 1.*t27650*t28814 - 1.*t28855*t28872 - 1.*t28872*t28888) + t28971*t28984 + t28855*(t27603*t28872 + t28807*t28971 + t28814*t28971 + t28872*t29006) + t27650*t29035)*var2[3];
  p_output1[2]=t24333*t29043*var2[0] + (t24095*t25559 + t24397*t29043*t48)*var2[1] + (-1.*t24095*t24397*t29043 + t25559*t48)*var2[2] + (t24333*t28984*t29213 + t28855*(t24333*t27603*t29107 - 1.*t24397*t28971*t29107 + t24333*t28814*t29213 - 1.*t24397*t28872*t29213 + t29220 + t29223) - 1.*t24179*t24333*t29035*t67 + t27603*(t24397*t27650*t29107 - 1.*t24333*t28855*t29107 + t29116 - 1.*t24179*t28804*t67 + t24179*t24333*t28814*t67 - 1.*t24179*t24397*t28872*t67))*var2[3] + (t27475*t29089 + t29023*(t20923*t24179*t29107 + t29116) - 1.*t20923*t24179*t29157 + t24179*(t27475*t29107 + t28804*t29213 + t29220 + t29223)*t67)*var2[4];
  p_output1[3]=t29366*var2[0] + (-1.*t29376*t48 - 1.*t13331*t24095*t24179*t67)*var2[1] + (t24095*t29376 - 1.*t13331*t24179*t48*t67)*var2[2] + (t28984*t29592 + t29035*t29609 + t27603*(t29405 + t29473 - 1.*t28855*t29597 - 1.*t27650*t29601 - 1.*t28814*t29609 - 1.*t28872*t29623) + t28855*(t29539 + t29569 + t28814*t29592 + t27603*t29597 + t28971*t29601 + t28872*t29643))*var2[3] + (t29023*(t29320 + t29324 + t29405 - 1.*t24179*t29316*t29423 + t29473 - 1.*t20923*t28804*t3035) - 1.*t20605*t24179*t29089*t67 + t24179*(t20605*t20923*t24179*t28804 - 1.*t20923*t27475*t29316 + t29346 + t29351 + t29539 + t29569)*t67 - 1.*t29157*t3035*t67)*var2[4] + (t24179*t29336 - 1.*t20605*t29303*t3035 + t20605*t24179*(-1.*t24179*t29316 + t29320 + t29324 + t28794*t3035) + t3035*(-1.*t20605*t24179*t28794 + t29346 + t29351 - 1.*t20605*t29316*t3035))*var2[5];
  p_output1[4]=t27603*var2[0] + t29810*var2[1] + t29796*var2[2] + (t28984*t29865 + t27603*(t29833 - 1.*t28855*t29875 - 1.*t27650*t29879) + t28855*(t29842 + t29852 + t28814*t29865 + t27603*t29875 + t28971*t29879 + t28872*t29893))*var2[3] + (t29089*t29818 + t29023*(t20923*t24179*t29824 + t29833 - 1.*t24179*t29707*t3035) + t24179*(t29689 + t29708 + t27475*t29824 + t29842 + t28804*t29850 + t29852)*t67)*var2[4] + (t24179*t27390*t29303 + t3035*(t28772*t29676 + t29689 + t27390*t29700 + t29708 + t20605*t29707*t29709 - 1.*t27390*t28794*t3035))*var2[5] + (0.1575*t20605 + 0.2255*t29676)*var2[15];
  p_output1[5]=t29943*var2[0] + (t24095*t29948 - 1.*t29952*t48)*var2[1] + (t24095*t29952 + t29948*t48)*var2[2] + (t28984*t30013 + t27603*(t29973 - 1.*t28855*t30020 - 1.*t27650*t30025) + t28855*(t29977 + t29981 + t27603*t30020 + t28971*t30025 + t30035 + t30039))*var2[3] + (t22259*t29089 + t29023*(t20923*t24179*t29966 + t29973 - 1.*t24179*t29931*t3035) + t24179*(t29923 + t29932 + t27475*t29966 + t29976 + t29977 + t29981)*t67)*var2[4] + (t13331*t24179*t29303 + (t29923 + t29924 + t27390*t29926 + t29928 + t20605*t29709*t29931 + t29932)*t3035)*var2[5] + (0.2255*t20605 + 0.1575*t29676)*var2[15] + (-0.325*t3269 - 1.*t28729*t3269 - 1.*t29914*t3269)*var2[16];
  p_output1[6]=t30013;
  p_output1[7]=t26932;
  p_output1[8]=t30055;
  p_output1[9]=t27603*t28984 + t28855*t29035;
  p_output1[10]=t29023*t29089 + t24179*t29157*t67;
  p_output1[11]=t20605*t24179*t29303 + t29336*t3035;
  p_output1[12]=0.1575*t13331 + 0.2255*t27390;
  p_output1[13]=t30075 + t30079 - 1.*t28479*t3269;
  p_output1[14]=-0.0641;
  p_output1[15]=(-1.*t24095*t27650 - 1.*t24179*t48*t67)*var2[1] + t30090*var2[2];
  p_output1[16]=t27650*var2[0] - 1.*t28888*t48*var2[1] + t24095*t28888*var2[2] + ((-1.*t27603*t28872 - 1.*t28807*t28971 - 1.*t28814*t28971 - 1.*t28872*t29006)*t30013 + t27603*(t26346*t28807 + t26346*t28814 + t27134*t28872 + t28872*t30013) + t28971*t30216 + t26346*t30276)*var2[3];
  p_output1[17]=-1.*t24179*t24333*t67*var2[0] + (-1.*t20923*t24095*t24179 - 1.*t24179*t24397*t48*t67)*var2[1] + (-1.*t20923*t24179*t48 + t24095*t24179*t24397*t67)*var2[2] + (t24333*t29213*t30216 + t24333*t29043*t30276 + t27603*(t24333*t28814*t29043 - 1.*t24397*t28872*t29043 - 1.*t24397*t26346*t29107 + t24333*t29107*t30013 + t30292 + t30294) + t30013*(-1.*t24333*t27603*t29107 + t24397*t28971*t29107 - 1.*t24333*t28814*t29213 + t24397*t28872*t29213 + t30313 + t30319))*var2[3] + (t29023*(t28804*t29043 + t25559*t29107 + t30292 + t30294) + t27475*t30297 + t25559*t30305 + t22259*(-1.*t27475*t29107 - 1.*t28804*t29213 + t30313 + t30319))*var2[4];
  p_output1[18]=t29609*var2[0] + (-1.*t29623*t48 - 1.*t24095*t3035*t67)*var2[1] + (t24095*t29623 - 1.*t3035*t48*t67)*var2[2] + (t29592*t30216 + t29366*t30276 + t27603*(t28814*t29366 + t28872*t29376 + t26346*t29601 + t29597*t30013 + t30501 + t30504) + t30013*(-1.*t28814*t29592 - 1.*t27603*t29597 - 1.*t28971*t29601 - 1.*t28872*t29643 + t30509 + t30510))*var2[3] + (t29023*(t13331*t20923*t24179*t28804 - 1.*t20923*t25559*t29316 + t30459 + t30461 + t30501 + t30504) + t22259*(-1.*t20605*t20923*t24179*t28804 + t20923*t27475*t29316 + t30472 + t30475 + t30509 + t30510) - 1.*t20605*t24179*t30297*t67 - 1.*t13331*t24179*t30305*t67)*var2[4] + (t20605*t24179*(-1.*t13331*t24179*t28794 - 1.*t13331*t29316*t3035 + t30459 + t30461) - 1.*t13331*t3035*t30469 + t13331*t24179*(t20605*t24179*t28794 + t20605*t29316*t3035 + t30472 + t30475) - 1.*t20605*t3035*t30481)*var2[5];
  p_output1[19]=(t29865*t30216 + t27603*t30276 + t27603*(t29025 + t29029 + t29034 + t26346*t29879 + t29875*t30013 + t30771) + t30013*(-1.*t28814*t29865 - 1.*t27603*t29875 - 1.*t28971*t29879 - 1.*t28872*t29893 + t30774 + t30776))*var2[3] + (t29818*t30297 + t29023*t30305 + t29023*(t29025 + t29137 + t29141 + t25559*t29824 + t30719 + t30771) + t22259*(-1.*t27475*t29824 - 1.*t28804*t29850 + t30694 + t30703 + t30774 + t30776))*var2[4] + (t20605*t24179*t30469 + t24179*t27390*t30481 + t13331*t24179*(-1.*t20605*t29707*t29709 + t27390*t28794*t3035 + t30694 + t30699 + t30701 + t30703) + t20605*t24179*(t29137 + t29327 + t29328 + t13331*t29707*t29709 + t30719 + t30727))*var2[5] + (t20605*(-1.*t27390*t28731 - 1.*t20605*t29707 + t30699 + t30701) + t27390*(t20605*t28731 + t29327 + t13331*t29707 + t30727) + t29676*t30733 + t27390*t30754)*var2[15];
  p_output1[20]=(t30013*t30216 + t29943*t30276 + t27603*(t28814*t29943 + t28872*t29952 + t30013*t30020 + t26346*t30025 + t31072 + t31094) + t30013*(-1.*t27603*t30020 - 1.*t28971*t30025 + t31104 + t31106 + t31148 + t31149))*var2[3] + (t22259*t30297 + t29948*t30305 + t29023*(t28804*t29941 + t25559*t29966 + t30822 + t30825 + t31072 + t31094) + t22259*(-1.*t27475*t29966 + t30808 + t30813 + t31103 + t31104 + t31106))*var2[4] + (t24179*t29676*t30469 + t13331*t24179*t30481 + t13331*t24179*(-1.*t20605*t29709*t29931 + t30808 + t30809 + t30811 + t30812 + t30813) + t20605*t24179*(t13331*t29709*t29931 - 1.*t28794*t29676*t3035 + t30821 + t30822 + t30825 + t30828))*var2[5] + (t20605*t30733 + t13331*t30754 + t20605*(-1.*t13331*t28731 - 1.*t20605*t29931 + t30811 + t30812) + t27390*(t28731*t29676 + t13331*t29931 + t30821 + t30828))*var2[15];
  p_output1[21]=t28855;
  p_output1[22]=t30090;
  p_output1[23]=t24095*t27650 + t24179*t48*t67;
  p_output1[24]=t27603*t30216 + t30013*t30276;
  p_output1[25]=t29023*t30297 + t22259*t30305;
  p_output1[26]=t13331*t24179*t30469 + t20605*t24179*t30481;
  p_output1[27]=t27390*t30733 + t20605*t30754;
  p_output1[28]=(-1.*t24095*t28971 - 1.*t29023*t48)*var2[1] + t29810*var2[2];
  p_output1[29]=t28971*var2[0] - 1.*t29006*t48*var2[1] + t24095*t29006*var2[2] + ((t27650*t28807 + t27650*t28814 + t28855*t28872 + t28872*t28888)*t30013 + t28855*(-1.*t26346*t28807 - 1.*t26346*t28814 - 1.*t27134*t28872 - 1.*t28872*t30013) + t26346*t31229 + t27650*t31308)*var2[3];
  p_output1[30]=t24333*t29213*var2[0] + (t24095*t27475 + t24397*t29213*t48)*var2[1] + (-1.*t24095*t24397*t29213 + t27475*t48)*var2[2] + (t24333*t29043*t31229 + t28855*(-1.*t24333*t28814*t29043 + t24397*t28872*t29043 + t24397*t26346*t29107 - 1.*t24333*t29107*t30013 + t31456 + t31458) - 1.*t24179*t24333*t31308*t67 + t30013*(-1.*t24397*t27650*t29107 + t24333*t28855*t29107 + t31451 + t24179*t28804*t67 - 1.*t24179*t24333*t28814*t67 + t24179*t24397*t28872*t67))*var2[3] + (t25559*t31446 + t22259*(-1.*t20923*t24179*t29107 + t31451) - 1.*t20923*t24179*t31465 + t24179*(-1.*t28804*t29043 - 1.*t25559*t29107 + t31456 + t31458)*t67)*var2[4];
  p_output1[31]=t29592*var2[0] + (-1.*t29643*t48 - 1.*t20605*t24095*t24179*t67)*var2[1] + (t24095*t29643 - 1.*t20605*t24179*t48*t67)*var2[2] + (t29366*t31229 + t29609*t31308 + t30013*(t28855*t29597 + t27650*t29601 + t28814*t29609 + t28872*t29623 + t31556 + t31561) + t28855*(-1.*t28814*t29366 - 1.*t28872*t29376 - 1.*t26346*t29601 - 1.*t29597*t30013 + t31566 + t31569))*var2[3] + (t22259*(t24179*t29316*t29423 + t20923*t28804*t3035 + t31519 + t31523 + t31556 + t31561) - 1.*t13331*t24179*t31446*t67 - 1.*t3035*t31465*t67 + t24179*(-1.*t13331*t20923*t24179*t28804 + t20923*t25559*t29316 + t31530 + t31534 + t31566 + t31569)*t67)*var2[4] + (-1.*t13331*t3035*t31515 + t13331*t24179*(t24179*t29316 - 1.*t28794*t3035 + t31519 + t31523) + t3035*(t13331*t24179*t28794 + t13331*t29316*t3035 + t31530 + t31534) + t24179*t31538)*var2[5];
  p_output1[32]=t29865*var2[0] + (t24095*t29818 - 1.*t29893*t48)*var2[1] + (t24095*t29893 + t29818*t48)*var2[2] + (t27603*t31229 + t30013*(t28855*t29875 + t27650*t29879 + t31628) + t28855*(-1.*t26346*t29879 - 1.*t29875*t30013 + t30273 + t30274 + t30275 + t31649))*var2[3] + (t29023*t31446 + t22259*(-1.*t20923*t24179*t29824 + t24179*t29707*t3035 + t31628) + t24179*(-1.*t25559*t29824 + t30273 + t30299 + t30304 + t31603 + t31649)*t67)*var2[4] + (t20605*t24179*t31515 + t3035*(-1.*t20605*t29700 - 1.*t13331*t29707*t29709 + t30299 + t30465 + t30466 + t31603))*var2[5] - 0.068*t27390*var2[15];
  p_output1[33]=t30013*var2[0] + t26932*var2[1] + t30055*var2[2] + (t29943*t31229 + t30013*(t28855*t30020 + t27650*t30025 + t31716) + t28855*(-1.*t28814*t29943 - 1.*t28872*t29952 - 1.*t30013*t30020 - 1.*t26346*t30025 + t31719 + t31722))*var2[3] + (t29948*t31446 + t22259*(-1.*t20923*t24179*t29966 + t24179*t29931*t3035 + t31716) + t24179*(-1.*t28804*t29941 - 1.*t25559*t29966 + t31692 + t31694 + t31719 + t31722)*t67)*var2[4] + (t24179*t29676*t31515 + t3035*(-1.*t13331*t28772 - 1.*t20605*t29926 - 1.*t13331*t29709*t29931 + t28794*t29676*t3035 + t31692 + t31694))*var2[5] - 0.068*t13331*var2[15] + (-1.*t13029*t29914 + t30075 + t30079)*var2[16];
  p_output1[34]=t27603;
  p_output1[35]=t29810;
  p_output1[36]=t29796;
  p_output1[37]=t30013*t31229 + t28855*t31308;
  p_output1[38]=t22259*t31446 + t24179*t31465*t67;
  p_output1[39]=t13331*t24179*t31515 + t3035*t31538;
  p_output1[40]=-0.068*t20605;
  p_output1[41]=-1.*t13029*t28479 + 0.325*t3269 + t28729*t3269;
  p_output1[42]=-0.28;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 43, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_dh_RrFoot_ParallelStance.hh"

namespace ParallelStance
{

void J_dh_RrFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
