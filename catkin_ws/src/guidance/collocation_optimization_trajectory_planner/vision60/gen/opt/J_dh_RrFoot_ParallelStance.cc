/*
 * Automatically Generated from Mathematica.
 * Thu 12 May 2022 11:33:28 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t13378;
  double t13325;
  double t13363;
  double t13680;
  double t13364;
  double t13724;
  double t13728;
  double t2851;
  double t15317;
  double t15318;
  double t15329;
  double t2852;
  double t15339;
  double t15354;
  double t13730;
  double t15350;
  double t15351;
  double t2329;
  double t15355;
  double t15487;
  double t15501;
  double t15513;
  double t15514;
  double t15517;
  double t15525;
  double t15530;
  double t15532;
  double t15738;
  double t15768;
  double t15797;
  double t16022;
  double t16033;
  double t16037;
  double t16039;
  double t16040;
  double t16044;
  double t16052;
  double t16054;
  double t16059;
  double t16020;
  double t16038;
  double t16061;
  double t16062;
  double t15834;
  double t15836;
  double t15923;
  double t16009;
  double t16078;
  double t16083;
  double t16095;
  double t16096;
  double t16104;
  double t16106;
  double t16109;
  double t16113;
  double t16114;
  double t16115;
  double t16116;
  double t16121;
  double t16125;
  double t16129;
  double t16130;
  double t16131;
  double t16132;
  double t16241;
  double t16246;
  double t16247;
  double t15810;
  double t15814;
  double t15815;
  double t15821;
  double t15822;
  double t15830;
  double t16142;
  double t16143;
  double t16229;
  double t16138;
  double t16139;
  double t16140;
  double t15809;
  double t15831;
  double t15832;
  double t16084;
  double t16133;
  double t16136;
  double t16272;
  double t16273;
  double t16281;
  double t16286;
  double t16297;
  double t16298;
  double t16354;
  double t16355;
  double t16356;
  double t16299;
  double t16334;
  double t16335;
  double t16336;
  double t16337;
  double t16376;
  double t16377;
  double t16378;
  double t16380;
  double t16389;
  double t16390;
  double t16391;
  double t16301;
  double t16305;
  double t16310;
  double t16396;
  double t16404;
  double t16338;
  double t16339;
  double t16340;
  double t16371;
  double t16383;
  double t16467;
  double t16468;
  double t16469;
  double t16475;
  double t16476;
  double t16666;
  double t16667;
  double t16668;
  double t16372;
  double t16373;
  double t16472;
  double t16477;
  double t16495;
  double t16497;
  double t16386;
  double t16387;
  double t16677;
  double t16678;
  double t16682;
  double t16686;
  double t16687;
  double t16698;
  double t16699;
  double t16700;
  double t16710;
  double t16711;
  double t16715;
  double t16732;
  double t16734;
  double t16735;
  double t16737;
  double t16738;
  double t16739;
  double t16464;
  double t16465;
  double t16841;
  double t16843;
  double t16844;
  double t16861;
  double t16862;
  double t16852;
  double t16854;
  double t16855;
  double t16856;
  double t16850;
  double t16859;
  double t16863;
  double t17074;
  double t17078;
  double t17084;
  double t17044;
  double t17056;
  double t17058;
  double t17065;
  double t17067;
  double t17072;
  double t17091;
  double t17092;
  double t17094;
  double t17086;
  double t17090;
  double t17096;
  double t17111;
  double t17112;
  double t17113;
  double t17116;
  double t17117;
  double t17118;
  double t17120;
  double t17121;
  double t17122;
  double t17148;
  double t17149;
  double t17150;
  double t16865;
  double t17165;
  double t17166;
  double t17167;
  double t17182;
  double t17297;
  double t17446;
  double t17476;
  double t17478;
  double t17485;
  double t17495;
  double t17502;
  double t17504;
  double t17161;
  double t17162;
  double t17159;
  double t17168;
  double t17526;
  double t17527;
  double t17531;
  double t17518;
  double t17520;
  double t17524;
  double t17536;
  double t17540;
  double t17542;
  double t17552;
  double t17554;
  double t17555;
  double t17559;
  double t17560;
  double t17561;
  double t17565;
  double t17566;
  double t17569;
  double t15708;
  double t15717;
  double t15718;
  double t16484;
  double t16488;
  double t16492;
  double t16250;
  double t16254;
  double t16262;
  double t17575;
  double t17579;
  double t16312;
  double t16315;
  double t16316;
  double t17539;
  double t17915;
  double t17952;
  double t17963;
  double t17905;
  double t18019;
  double t18041;
  double t17917;
  double t17919;
  double t17920;
  double t17989;
  double t17160;
  double t17164;
  double t16741;
  double t16747;
  double t16817;
  double t18106;
  double t18108;
  double t17981;
  double t18143;
  double t18145;
  double t17993;
  double t17994;
  double t18167;
  double t18190;
  double t16550;
  double t16589;
  double t16622;
  double t18314;
  double t18321;
  double t16822;
  double t16823;
  double t16824;
  double t18111;
  double t18112;
  double t18118;
  double t18149;
  double t18800;
  double t18851;
  double t19040;
  double t18888;
  double t18771;
  double t18868;
  double t22573;
  double t22960;
  double t23066;
  double t17127;
  double t17130;
  double t17131;
  double t21811;
  double t21825;
  double t22124;
  double t22372;
  double t23892;
  double t23893;
  double t23972;
  double t24046;
  double t23990;
  double t24014;
  double t23858;
  double t23902;
  double t24284;
  double t24305;
  double t17181;
  double t17447;
  double t17454;
  double t24331;
  double t24333;
  double t17887;
  double t17888;
  double t17889;
  double t16877;
  double t16935;
  double t16969;
  double t29393;
  double t29410;
  double t32042;
  double t24329;
  double t33950;
  double t32057;
  double t32079;
  double t32091;
  double t34145;
  double t34164;
  double t32291;
  double t33881;
  double t23862;
  double t33894;
  double t33904;
  double t43824;
  double t43944;
  double t16679;
  double t45088;
  double t45643;
  double t35678;
  double t46741;
  double t47101;
  double t47127;
  double t47136;
  double t38931;
  double t38936;
  double t49249;
  double t49759;
  double t49810;
  double t17867;
  double t17871;
  double t17589;
  double t17590;
  double t17591;
  double t53483;
  double t53486;
  double t53615;
  double t53630;
  double t53650;
  double t16872;
  double t16873;
  double t16874;
  double t46518;
  t13378 = Cos(var1[16]);
  t13325 = Cos(var1[17]);
  t13363 = Sin(var1[16]);
  t13680 = Sin(var1[17]);
  t13364 = t13325*t13363;
  t13724 = -1.*t13378*t13680;
  t13728 = t13364 + t13724;
  t2851 = Cos(var1[5]);
  t15317 = t13378*t13325;
  t15318 = t13363*t13680;
  t15329 = t15317 + t15318;
  t2852 = Sin(var1[15]);
  t15339 = Sin(var1[5]);
  t15354 = Cos(var1[3]);
  t13730 = -1.*t2851*t2852*t13728;
  t15350 = t15329*t15339;
  t15351 = t13730 + t15350;
  t2329 = Sin(var1[3]);
  t15355 = Cos(var1[15]);
  t15487 = Cos(var1[4]);
  t15501 = t15355*t15487*t13728;
  t15513 = Sin(var1[4]);
  t15514 = t2851*t15329;
  t15517 = t2852*t13728*t15339;
  t15525 = t15514 + t15517;
  t15530 = -1.*t15513*t15525;
  t15532 = t15501 + t15530;
  t15738 = -1.*t15355*t13728*t15513;
  t15768 = -1.*t15487*t15525;
  t15797 = t15738 + t15768;
  t16022 = -0.0641*t13325;
  t16033 = -0.28*t13680;
  t16037 = t16022 + t16033;
  t16039 = -1.*t13325;
  t16040 = 1. + t16039;
  t16044 = -0.575*t16040;
  t16052 = -0.295*t13325;
  t16054 = -0.0641*t13680;
  t16059 = t16044 + t16052 + t16054;
  t16020 = 0.325*t13363;
  t16038 = t13378*t16037;
  t16061 = t13363*t16059;
  t16062 = t16020 + t16038 + t16061;
  t15834 = t15487*t2852;
  t15836 = t15355*t15513*t15339;
  t15923 = t15834 + t15836;
  t16009 = -0.068*t2852;
  t16078 = t15355*t16062;
  t16083 = t16009 + t16078;
  t16095 = -1.*t13378;
  t16096 = 1. + t16095;
  t16104 = -0.325*t16096;
  t16106 = -1.*t13363*t16037;
  t16109 = t13378*t16059;
  t16113 = t16104 + t16106 + t16109;
  t16114 = t2851*t16113;
  t16115 = -1.*t15355;
  t16116 = 1. + t16115;
  t16121 = -0.1575*t16116;
  t16125 = -0.2255*t15355;
  t16129 = -1.*t2852*t16062;
  t16130 = t16121 + t16125 + t16129;
  t16131 = -1.*t16130*t15339;
  t16132 = t16114 + t16131;
  t16241 = t15487*t16083;
  t16246 = -1.*t15513*t16132;
  t16247 = t16241 + t16246;
  t15810 = -1.*t13325*t13363;
  t15814 = t13378*t13680;
  t15815 = t15810 + t15814;
  t15821 = t2851*t15815;
  t15822 = t2852*t15329*t15339;
  t15830 = t15821 + t15822;
  t16142 = t2852*t15513;
  t16143 = -1.*t15355*t15487*t15339;
  t16229 = t16142 + t16143;
  t16138 = t16083*t15513;
  t16139 = t15487*t16132;
  t16140 = t16138 + t16139;
  t15809 = t15355*t15329*t15513;
  t15831 = t15487*t15830;
  t15832 = t15809 + t15831;
  t16084 = -1.*t16083*t15513;
  t16133 = -1.*t15487*t16132;
  t16136 = t16084 + t16133;
  t16272 = t15355*t15487*t15329;
  t16273 = -1.*t15513*t15830;
  t16281 = t16272 + t16273;
  t16286 = t2851*t16130;
  t16297 = t16113*t15339;
  t16298 = t16286 + t16297;
  t16354 = t2851*t2852*t13728;
  t16355 = -1.*t15329*t15339;
  t16356 = t16354 + t16355;
  t16299 = -1.*t15355*t2851*t16298;
  t16334 = -1.*t2851*t2852*t15329;
  t16335 = t15815*t15339;
  t16336 = t16334 + t16335;
  t16337 = t16298*t16336;
  t16376 = -1.*t2851*t16130;
  t16377 = -1.*t16113*t15339;
  t16378 = t16376 + t16377;
  t16380 = t15355*t15339*t16298;
  t16389 = t2851*t2852*t15329;
  t16390 = -1.*t15815*t15339;
  t16391 = t16389 + t16390;
  t16301 = -1.*t16229*t16140;
  t16305 = -1.*t15923*t16247;
  t16310 = t16299 + t16301 + t16305;
  t16396 = t16132*t16336;
  t16404 = t16298*t15830;
  t16338 = t16140*t15832;
  t16339 = t16247*t16281;
  t16340 = t16337 + t16338 + t16339;
  t16371 = -1.*t2852*t16083;
  t16383 = t15355*t16083*t15329;
  t16467 = 0.068*t2852;
  t16468 = -1.*t15355*t16062;
  t16469 = t16467 + t16468;
  t16475 = -0.068*t15355;
  t16476 = t16475 + t16129;
  t16666 = -1.*t15487*t2852*t13728;
  t16667 = -1.*t15355*t13728*t15513*t15339;
  t16668 = t16666 + t16667;
  t16372 = t15355*t15339*t16132;
  t16373 = t16371 + t16372 + t16299;
  t16472 = -1.*t15355*t16083;
  t16477 = -1.*t2852*t16476;
  t16495 = -1.*t2852*t16083*t15329;
  t16497 = t15355*t16476*t15329;
  t16386 = t16132*t15830;
  t16387 = t16383 + t16337 + t16386;
  t16677 = Power(t2851,2);
  t16678 = -1.*t15355*t16677*t16469;
  t16682 = t2851*t2852*t16298;
  t16686 = -1.*t15355*t2851*t15329*t16298;
  t16687 = t2851*t16469*t16336;
  t16698 = -1.*t2852*t15329*t15513;
  t16699 = t15355*t15487*t15329*t15339;
  t16700 = t16698 + t16699;
  t16710 = t16476*t15513;
  t16711 = -1.*t15487*t16469*t15339;
  t16715 = t16710 + t16711;
  t16732 = t15487*t16476;
  t16734 = t16469*t15513*t15339;
  t16735 = t16732 + t16734;
  t16737 = t15355*t15513;
  t16738 = t15487*t2852*t15339;
  t16739 = t16737 + t16738;
  t16464 = -1.*t15355*t16130;
  t16465 = t16371 + t16464;
  t16841 = -1.*t13378*t13325;
  t16843 = -1.*t13363*t13680;
  t16844 = t16841 + t16843;
  t16861 = 0.325*t13378;
  t16862 = t16861 + t16106 + t16109;
  t16852 = -0.325*t13363;
  t16854 = -1.*t13378*t16037;
  t16855 = -1.*t13363*t16059;
  t16856 = t16852 + t16854 + t16855;
  t16850 = t15355*t16083*t15815;
  t16859 = Power(t15355,2);
  t16863 = t16859*t16862*t15329;
  t17074 = -1.*t2851*t2852*t16862;
  t17078 = t16856*t15339;
  t17084 = t17074 + t17078;
  t17044 = -1.*t2851*t2852*t15815;
  t17056 = t16844*t15339;
  t17058 = t17044 + t17056;
  t17065 = t2851*t16856;
  t17067 = t2852*t16862*t15339;
  t17072 = t17065 + t17067;
  t17091 = t2851*t16844;
  t17092 = t2852*t15815*t15339;
  t17094 = t17091 + t17092;
  t17086 = -1.*t15355*t2851*t17084;
  t17090 = t17084*t16336;
  t17096 = t16298*t17058;
  t17111 = t15355*t15815*t15513;
  t17112 = t15487*t17094;
  t17113 = t17111 + t17112;
  t17116 = t15355*t16862*t15513;
  t17117 = t15487*t17072;
  t17118 = t17116 + t17117;
  t17120 = t15355*t15487*t16862;
  t17121 = -1.*t15513*t17072;
  t17122 = t17120 + t17121;
  t17148 = -0.28*t13325;
  t17149 = 0.0641*t13680;
  t17150 = t17148 + t17149;
  t16865 = Power(t2852,2);
  t17165 = t13363*t16037;
  t17166 = t13378*t17150;
  t17167 = t17165 + t17166;
  t17182 = t2851*t13728;
  t17297 = t2852*t16844*t15339;
  t17446 = t17182 + t17297;
  t17476 = -1.*t2851*t2852*t16844;
  t17478 = t13728*t15339;
  t17485 = t17476 + t17478;
  t17495 = t15355*t15487*t16844;
  t17502 = -1.*t15513*t17446;
  t17504 = t17495 + t17502;
  t17161 = -1.*t13363*t17150;
  t17162 = t16038 + t17161;
  t17159 = t15355*t16083*t13728;
  t17168 = t16859*t17167*t15329;
  t17526 = -1.*t2851*t2852*t17167;
  t17527 = t17162*t15339;
  t17531 = t17526 + t17527;
  t17518 = t2851*t17162;
  t17520 = t2852*t17167*t15339;
  t17524 = t17518 + t17520;
  t17536 = -1.*t15355*t2851*t17531;
  t17540 = t17531*t16336;
  t17542 = t16298*t15351;
  t17552 = t15355*t13728*t15513;
  t17554 = t15487*t15525;
  t17555 = t17552 + t17554;
  t17559 = t15355*t17167*t15513;
  t17560 = t15487*t17524;
  t17561 = t17559 + t17560;
  t17565 = t15355*t15487*t17167;
  t17566 = -1.*t15513*t17524;
  t17569 = t17565 + t17566;
  t15708 = t15354*t15351;
  t15717 = -1.*t2329*t15532;
  t15718 = t15708 + t15717;
  t16484 = t16113*t15815;
  t16488 = -1.*t2852*t16130*t15329;
  t16492 = t16484 + t16383 + t16488;
  t16250 = -1.*t2852*t15513;
  t16254 = t15355*t15487*t15339;
  t16262 = t16250 + t16254;
  t17575 = t16140*t17555;
  t17579 = t16247*t15532;
  t16312 = -1.*t15355*t15329*t15513;
  t16315 = -1.*t15487*t15830;
  t16316 = t16312 + t16315;
  t17539 = t16132*t15525;
  t17915 = -1.*t16298*t16336;
  t17952 = t16298*t15525;
  t17963 = t16132*t15351;
  t17905 = t17542 + t17575 + t17579;
  t18019 = -1.*t16132*t16336;
  t18041 = -1.*t16298*t15830;
  t17917 = -1.*t16140*t15832;
  t17919 = -1.*t16247*t16281;
  t17920 = t17915 + t17917 + t17919;
  t17989 = -1.*t15355*t16083*t15329;
  t17160 = -1.*t2852*t16130*t13728;
  t17164 = t16113*t15329;
  t16741 = t15355*t15487;
  t16747 = -1.*t2852*t15513*t15339;
  t16817 = t16741 + t16747;
  t18106 = -1.*t2852*t16083*t13728;
  t18108 = t15355*t16476*t13728;
  t17981 = t17159 + t17539 + t17542;
  t18143 = t2852*t16083*t15329;
  t18145 = -1.*t15355*t16476*t15329;
  t17993 = -1.*t16132*t15830;
  t17994 = t17989 + t17915 + t17993;
  t18167 = -1.*t15355*t2851*t13728*t16298;
  t18190 = t2851*t16469*t15351;
  t16550 = -1.*t2852*t13728*t15513;
  t16589 = t15355*t15487*t13728*t15339;
  t16622 = t16550 + t16589;
  t18314 = t15355*t2851*t15329*t16298;
  t18321 = -1.*t2851*t16469*t16336;
  t16822 = -1.*t15487*t2852*t15329;
  t16823 = -1.*t15355*t15329*t15513*t15339;
  t16824 = t16822 + t16823;
  t18111 = -1.*t16113*t15815;
  t18112 = t2852*t16130*t15329;
  t18118 = t18111 + t17989 + t18112;
  t18149 = t17159 + t17160 + t17164;
  t18800 = -1.*t16856*t15815;
  t18851 = -1.*t16113*t16844;
  t19040 = t16856*t15329;
  t18888 = t16859*t16862*t13728;
  t18771 = -1.*t15355*t16083*t15815;
  t18868 = -1.*t16859*t16862*t15329;
  t22573 = t17084*t15351;
  t22960 = -1.*t17084*t16336;
  t23066 = -1.*t16298*t17058;
  t17127 = t15355*t15487*t15815;
  t17130 = -1.*t15513*t17094;
  t17131 = t17127 + t17130;
  t21811 = t16062*t13728;
  t21825 = t21811 + t17164;
  t22124 = -1.*t16062*t15329;
  t22372 = t18111 + t22124;
  t23892 = -1.*t17162*t15815;
  t23893 = -1.*t16113*t15329;
  t23972 = t16113*t13728;
  t24046 = t17162*t15329;
  t23990 = t16859*t17167*t13728;
  t24014 = t15355*t16083*t16844;
  t23858 = -1.*t15355*t16083*t13728;
  t23902 = -1.*t16859*t17167*t15329;
  t24284 = t16298*t17485;
  t24305 = t17531*t15351;
  t17181 = t15355*t16844*t15513;
  t17447 = t15487*t17446;
  t17454 = t17181 + t17447;
  t24331 = -1.*t17531*t16336;
  t24333 = -1.*t16298*t15351;
  t17887 = t15355*t15354*t2851;
  t17888 = -1.*t2329*t15923;
  t17889 = t17887 + t17888;
  t16877 = t15354*t16336;
  t16935 = -1.*t2329*t16281;
  t16969 = t16877 + t16935;
  t29393 = -1.*t16140*t17555;
  t29410 = -1.*t16247*t15532;
  t32042 = t15355*t2851*t16298;
  t24329 = -1.*t16132*t15525;
  t33950 = -1.*t15355*t15339*t16298;
  t32057 = t16229*t16140;
  t32079 = t15923*t16247;
  t32091 = t32042 + t32057 + t32079;
  t34145 = -1.*t16298*t15525;
  t34164 = -1.*t16132*t15351;
  t32291 = t24333 + t29393 + t29410;
  t33881 = t2852*t16083;
  t23862 = t2852*t16130*t13728;
  t33894 = -1.*t15355*t15339*t16132;
  t33904 = t33881 + t33894 + t32042;
  t43824 = t15355*t16083;
  t43944 = t2852*t16476;
  t16679 = Power(t15339,2);
  t45088 = t2852*t16083*t13728;
  t45643 = -1.*t15355*t16476*t13728;
  t35678 = t23858 + t24329 + t24333;
  t46741 = t15355*t16677*t16469;
  t47101 = -1.*t2851*t2852*t16298;
  t47127 = t15355*t2851*t13728*t16298;
  t47136 = -1.*t2851*t16469*t15351;
  t38931 = t15355*t16130;
  t38936 = t33881 + t38931;
  t49249 = -1.*t16859*t16862*t13728;
  t49759 = t15355*t2851*t17084;
  t49810 = -1.*t17084*t15351;
  t17867 = -0.325*t13680;
  t17871 = -1.*t16059*t13680;
  t17589 = t2329*t15351;
  t17590 = t15354*t15532;
  t17591 = t17589 + t17590;
  t53483 = -1.*t16859*t17167*t13728;
  t53486 = -1.*t15355*t16083*t16844;
  t53615 = t15355*t2851*t17531;
  t53630 = -1.*t16298*t17485;
  t53650 = -1.*t17531*t15351;
  t16872 = t2329*t16336;
  t16873 = t15354*t16281;
  t16874 = t16872 + t16873;
  t46518 = t23858 + t23862 + t23893;
  p_output1[0]=(-1.*t15354*t15532 - 1.*t15351*t2329)*var2[1] + t15718*var2[2];
  p_output1[1]=t15532*var2[0] - 1.*t15797*t2329*var2[1] + t15354*t15797*var2[2] + (t15832*(-1.*t15923*t16136 - 1.*t15923*t16140 - 1.*t16229*t16247 - 1.*t16247*t16262) + t16281*t16310 + t16229*(t15832*t16247 + t16136*t16281 + t16140*t16281 + t16247*t16316) + t15923*t16340)*var2[3];
  p_output1[2]=t15487*t16356*var2[0] + (t15354*t15525 + t15513*t16356*t2329)*var2[1] + (-1.*t15354*t15513*t16356 + t15525*t2329)*var2[2] + (t15487*t16310*t16391 + t16229*(t15487*t15832*t16378 - 1.*t15513*t16281*t16378 + t15487*t16140*t16391 - 1.*t15513*t16247*t16391 + t16396 + t16404) - 1.*t15355*t15487*t16340*t2851 + t15832*(t15513*t15923*t16378 - 1.*t15487*t16229*t16378 + t16380 - 1.*t15355*t16132*t2851 + t15355*t15487*t16140*t2851 - 1.*t15355*t15513*t16247*t2851))*var2[3] + (t15830*t16373 + t16336*(t15339*t15355*t16378 + t16380) - 1.*t15339*t15355*t16387 + t15355*(t15830*t16378 + t16132*t16391 + t16396 + t16404)*t2851)*var2[4];
  p_output1[3]=t16622*var2[0] + (-1.*t16668*t2329 - 1.*t13728*t15354*t15355*t2851)*var2[1] + (t15354*t16668 - 1.*t13728*t15355*t2329*t2851)*var2[2] + (t16310*t16700 + t16340*t16739 + t15832*(t16678 + t16682 - 1.*t16229*t16715 - 1.*t15923*t16735 - 1.*t16140*t16739 - 1.*t16247*t16817) + t16229*(t16686 + t16687 + t16140*t16700 + t15832*t16715 + t16281*t16735 + t16247*t16824))*var2[3] + (-1.*t15329*t15355*t16373*t2851 + t15355*(t15329*t15339*t15355*t16132 - 1.*t15339*t15830*t16469 + t16495 + t16497 + t16686 + t16687)*t2851 - 1.*t16387*t2851*t2852 + t16336*(t16472 + t16477 + t16678 - 1.*t15355*t16469*t16679 + t16682 - 1.*t15339*t16132*t2852))*var2[4] + (t15355*t16492 - 1.*t15329*t16465*t2852 + t15329*t15355*(-1.*t15355*t16469 + t16472 + t16477 + t16130*t2852) + t2852*(-1.*t15329*t15355*t16130 + t16495 + t16497 - 1.*t15329*t16469*t2852))*var2[5];
  p_output1[4]=t15832*var2[0] + t16969*var2[1] + t16874*var2[2] + (t16310*t17113 + t15832*(t17086 - 1.*t16229*t17118 - 1.*t15923*t17122) + t16229*(t17090 + t17096 + t16140*t17113 + t15832*t17118 + t16281*t17122 + t16247*t17131))*var2[3] + (t16373*t17058 + t15355*(t16850 + t16863 + t15830*t17072 + t17090 + t16132*t17094 + t17096)*t2851 + t16336*(t15339*t15355*t17072 + t17086 - 1.*t15355*t16862*t2852))*var2[4] + (t15355*t15815*t16465 + t2852*(t16113*t16844 + t16850 + t15815*t16856 + t16863 + t15329*t16862*t16865 - 1.*t15815*t16130*t2852))*var2[5] + (0.1575*t15329 + 0.2255*t16844)*var2[15];
  p_output1[5]=t17454*var2[0] + (t15354*t17485 - 1.*t17504*t2329)*var2[1] + (t15354*t17504 + t17485*t2329)*var2[2] + (t16310*t17555 + t15832*(t17536 - 1.*t16229*t17561 - 1.*t15923*t17569) + t16229*(t17540 + t17542 + t15832*t17561 + t16281*t17569 + t17575 + t17579))*var2[3] + (t15351*t16373 + t15355*(t17159 + t17168 + t15830*t17524 + t17539 + t17540 + t17542)*t2851 + t16336*(t15339*t15355*t17524 + t17536 - 1.*t15355*t17167*t2852))*var2[4] + (t13728*t15355*t16465 + (t17159 + t17160 + t15815*t17162 + t17164 + t15329*t16865*t17167 + t17168)*t2852)*var2[5] + (0.2255*t15329 + 0.1575*t16844)*var2[15] + (-0.325*t13325 - 1.*t13325*t16059 - 1.*t13325*t17150)*var2[16];
  p_output1[6]=t17555;
  p_output1[7]=t15718;
  p_output1[8]=t17591;
  p_output1[9]=t15832*t16310 + t16229*t16340;
  p_output1[10]=t16336*t16373 + t15355*t16387*t2851;
  p_output1[11]=t15329*t15355*t16465 + t16492*t2852;
  p_output1[12]=0.1575*t13728 + 0.2255*t15815;
  p_output1[13]=-1.*t13325*t16037 + t17867 + t17871;
  p_output1[14]=-0.0641;
  p_output1[15]=(-1.*t15354*t15923 - 1.*t15355*t2329*t2851)*var2[1] + t17889*var2[2];
  p_output1[16]=t15923*var2[0] - 1.*t16262*t2329*var2[1] + t15354*t16262*var2[2] + ((-1.*t15832*t16247 - 1.*t16136*t16281 - 1.*t16140*t16281 - 1.*t16247*t16316)*t17555 + t15832*(t15532*t16136 + t15532*t16140 + t15797*t16247 + t16247*t17555) + t16281*t17905 + t15532*t17920)*var2[3];
  p_output1[17]=-1.*t15355*t15487*t2851*var2[0] + (-1.*t15339*t15354*t15355 - 1.*t15355*t15513*t2329*t2851)*var2[1] + (-1.*t15339*t15355*t2329 + t15354*t15355*t15513*t2851)*var2[2] + (t15487*t16391*t17905 + t15487*t16356*t17920 + t15832*(t15487*t16140*t16356 - 1.*t15513*t16247*t16356 - 1.*t15513*t15532*t16378 + t15487*t16378*t17555 + t17952 + t17963) + t17555*(-1.*t15487*t15832*t16378 + t15513*t16281*t16378 - 1.*t15487*t16140*t16391 + t15513*t16247*t16391 + t18019 + t18041))*var2[3] + (t16336*(t16132*t16356 + t15525*t16378 + t17952 + t17963) + t15830*t17981 + t15525*t17994 + t15351*(-1.*t15830*t16378 - 1.*t16132*t16391 + t18019 + t18041))*var2[4];
  p_output1[18]=t16739*var2[0] + (-1.*t16817*t2329 - 1.*t15354*t2851*t2852)*var2[1] + (t15354*t16817 - 1.*t2329*t2851*t2852)*var2[2] + (t16700*t17905 + t16622*t17920 + t15832*(t16140*t16622 + t16247*t16668 + t15532*t16735 + t16715*t17555 + t18167 + t18190) + t17555*(-1.*t16140*t16700 - 1.*t15832*t16715 - 1.*t16281*t16735 - 1.*t16247*t16824 + t18314 + t18321))*var2[3] + (t16336*(t13728*t15339*t15355*t16132 - 1.*t15339*t15525*t16469 + t18106 + t18108 + t18167 + t18190) + t15351*(-1.*t15329*t15339*t15355*t16132 + t15339*t15830*t16469 + t18143 + t18145 + t18314 + t18321) - 1.*t15329*t15355*t17981*t2851 - 1.*t13728*t15355*t17994*t2851)*var2[4] + (-1.*t13728*t18118*t2852 - 1.*t15329*t18149*t2852 + t15329*t15355*(-1.*t13728*t15355*t16130 + t18106 + t18108 - 1.*t13728*t16469*t2852) + t13728*t15355*(t15329*t15355*t16130 + t18143 + t18145 + t15329*t16469*t2852))*var2[5];
  p_output1[19]=(t17113*t17905 + t15832*t17920 + t15832*(t16337 + t16338 + t16339 + t15532*t17122 + t17118*t17555 + t22573) + t17555*(-1.*t16140*t17113 - 1.*t15832*t17118 - 1.*t16281*t17122 - 1.*t16247*t17131 + t22960 + t23066))*var2[3] + (t17058*t17981 + t16336*t17994 + t16336*(t16337 + t16383 + t16386 + t15525*t17072 + t18888 + t22573) + t15351*(-1.*t15830*t17072 - 1.*t16132*t17094 + t18771 + t18868 + t22960 + t23066))*var2[4] + (t15329*t15355*t18118 + t15355*t15815*t18149 + t15329*t15355*(t16383 + t16484 + t16488 + t13728*t16862*t16865 + t18888 + t19040) + t13728*t15355*(-1.*t15329*t16862*t16865 + t18771 + t18800 + t18851 + t18868 + t15815*t16130*t2852))*var2[5] + (t15329*(-1.*t15815*t16062 - 1.*t15329*t16862 + t18800 + t18851) + t15815*(t15329*t16062 + t16484 + t13728*t16862 + t19040) + t16844*t21825 + t15815*t22372)*var2[15];
  p_output1[20]=(t17555*t17905 + t17454*t17920 + t15832*(t16140*t17454 + t16247*t17504 + t17555*t17561 + t15532*t17569 + t24284 + t24305) + t17555*(-1.*t15832*t17561 - 1.*t16281*t17569 + t24331 + t24333 + t29393 + t29410))*var2[3] + (t15351*t17981 + t17485*t17994 + t16336*(t16132*t17446 + t15525*t17524 + t23990 + t24014 + t24284 + t24305) + t15351*(-1.*t15830*t17524 + t23858 + t23902 + t24329 + t24331 + t24333))*var2[4] + (t15355*t16844*t18118 + t13728*t15355*t18149 + t13728*t15355*(-1.*t15329*t16865*t17167 + t23858 + t23862 + t23892 + t23893 + t23902) + t15329*t15355*(t13728*t16865*t17167 + t23972 + t23990 + t24014 + t24046 - 1.*t16130*t16844*t2852))*var2[5] + (t15329*t21825 + t13728*t22372 + t15329*(-1.*t13728*t16062 - 1.*t15329*t17167 + t23892 + t23893) + t15815*(t16062*t16844 + t13728*t17167 + t23972 + t24046))*var2[15];
  p_output1[21]=t16229;
  p_output1[22]=t17889;
  p_output1[23]=t15354*t15923 + t15355*t2329*t2851;
  p_output1[24]=t15832*t17905 + t17555*t17920;
  p_output1[25]=t16336*t17981 + t15351*t17994;
  p_output1[26]=t13728*t15355*t18118 + t15329*t15355*t18149;
  p_output1[27]=t15815*t21825 + t15329*t22372;
  p_output1[28]=(-1.*t15354*t16281 - 1.*t16336*t2329)*var2[1] + t16969*var2[2];
  p_output1[29]=t16281*var2[0] - 1.*t16316*t2329*var2[1] + t15354*t16316*var2[2] + ((t15923*t16136 + t15923*t16140 + t16229*t16247 + t16247*t16262)*t17555 + t16229*(-1.*t15532*t16136 - 1.*t15532*t16140 - 1.*t15797*t16247 - 1.*t16247*t17555) + t15532*t32091 + t15923*t32291)*var2[3];
  p_output1[30]=t15487*t16391*var2[0] + (t15354*t15830 + t15513*t16391*t2329)*var2[1] + (-1.*t15354*t15513*t16391 + t15830*t2329)*var2[2] + (t15487*t16356*t32091 - 1.*t15355*t15487*t2851*t32291 + t17555*(-1.*t15513*t15923*t16378 + t15487*t16229*t16378 + t15355*t16132*t2851 - 1.*t15355*t15487*t16140*t2851 + t15355*t15513*t16247*t2851 + t33950) + t16229*(-1.*t15487*t16140*t16356 + t15513*t16247*t16356 + t15513*t15532*t16378 - 1.*t15487*t16378*t17555 + t34145 + t34164))*var2[3] + (t15525*t33904 + t15351*(-1.*t15339*t15355*t16378 + t33950) + t15355*t2851*(-1.*t16132*t16356 - 1.*t15525*t16378 + t34145 + t34164) - 1.*t15339*t15355*t35678)*var2[4];
  p_output1[31]=t16700*var2[0] + (-1.*t16824*t2329 - 1.*t15329*t15354*t15355*t2851)*var2[1] + (t15354*t16824 - 1.*t15329*t15355*t2329*t2851)*var2[2] + (t16622*t32091 + t16739*t32291 + t17555*(t16229*t16715 + t15923*t16735 + t16140*t16739 + t16247*t16817 + t46741 + t47101) + t16229*(-1.*t16140*t16622 - 1.*t16247*t16668 - 1.*t15532*t16735 - 1.*t16715*t17555 + t47127 + t47136))*var2[3] + (-1.*t13728*t15355*t2851*t33904 - 1.*t2851*t2852*t35678 + t15351*(t15355*t16469*t16679 + t15339*t16132*t2852 + t43824 + t43944 + t46741 + t47101) + t15355*t2851*(-1.*t13728*t15339*t15355*t16132 + t15339*t15525*t16469 + t45088 + t45643 + t47127 + t47136))*var2[4] + (-1.*t13728*t2852*t38936 + t13728*t15355*(t15355*t16469 - 1.*t16130*t2852 + t43824 + t43944) + t2852*(t13728*t15355*t16130 + t13728*t16469*t2852 + t45088 + t45643) + t15355*t46518)*var2[5];
  p_output1[32]=t17113*var2[0] + (t15354*t17058 - 1.*t17131*t2329)*var2[1] + (t15354*t17131 + t17058*t2329)*var2[2] + (t15832*t32091 + t17555*(t16229*t17118 + t15923*t17122 + t49759) + t16229*(-1.*t15532*t17122 - 1.*t17118*t17555 + t17915 + t17917 + t17919 + t49810))*var2[3] + (t16336*t33904 + t15351*(-1.*t15339*t15355*t17072 + t15355*t16862*t2852 + t49759) + t15355*t2851*(-1.*t15525*t17072 + t17915 + t17989 + t17993 + t49249 + t49810))*var2[4] + (t15329*t15355*t38936 + t2852*(-1.*t15329*t16856 - 1.*t13728*t16862*t16865 + t17989 + t18111 + t18112 + t49249))*var2[5] - 0.068*t15815*var2[15];
  p_output1[33]=t17555*var2[0] + t15718*var2[1] + t17591*var2[2] + (t17454*t32091 + t17555*(t16229*t17561 + t15923*t17569 + t53615) + t16229*(-1.*t16140*t17454 - 1.*t16247*t17504 - 1.*t17555*t17561 - 1.*t15532*t17569 + t53630 + t53650))*var2[3] + (t17485*t33904 + t15351*(-1.*t15339*t15355*t17524 + t15355*t17167*t2852 + t53615) + t15355*t2851*(-1.*t16132*t17446 - 1.*t15525*t17524 + t53483 + t53486 + t53630 + t53650))*var2[4] + (t15355*t16844*t38936 + t2852*(-1.*t13728*t16113 - 1.*t15329*t17162 - 1.*t13728*t16865*t17167 + t16130*t16844*t2852 + t53483 + t53486))*var2[5] - 0.068*t13728*var2[15] + (-1.*t13680*t17150 + t17867 + t17871)*var2[16];
  p_output1[34]=t15832;
  p_output1[35]=t16969;
  p_output1[36]=t16874;
  p_output1[37]=t17555*t32091 + t16229*t32291;
  p_output1[38]=t15351*t33904 + t15355*t2851*t35678;
  p_output1[39]=t13728*t15355*t38936 + t2852*t46518;
  p_output1[40]=-0.068*t15329;
  p_output1[41]=0.325*t13325 - 1.*t13680*t16037 + t13325*t16059;
  p_output1[42]=-0.28;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 43, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_dh_RrFoot_ParallelStance.hh"

namespace ParallelStance
{

void J_dh_RrFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
