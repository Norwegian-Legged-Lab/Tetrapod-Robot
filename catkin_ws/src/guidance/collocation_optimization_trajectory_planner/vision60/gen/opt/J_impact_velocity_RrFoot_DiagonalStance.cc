/*
 * Automatically Generated from Mathematica.
 * Thu 12 May 2022 11:32:36 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t3449;
  double t3949;
  double t3400;
  double t5602;
  double t10730;
  double t17727;
  double t17982;
  double t19052;
  double t20492;
  double t20511;
  double t21174;
  double t21803;
  double t24050;
  double t20598;
  double t20627;
  double t24757;
  double t24762;
  double t25098;
  double t25648;
  double t26143;
  double t26225;
  double t24585;
  double t24645;
  double t23979;
  double t23983;
  double t27206;
  double t27207;
  double t27259;
  double t27280;
  double t27478;
  double t27479;
  double t27491;
  double t27509;
  double t27522;
  double t21818;
  double t22325;
  double t22326;
  double t27935;
  double t29591;
  double t29651;
  double t29755;
  double t29775;
  double t30452;
  double t32333;
  double t32335;
  double t32365;
  double t34040;
  double t34056;
  double t34058;
  double t34083;
  double t34117;
  double t34165;
  double t34474;
  double t34482;
  double t34573;
  double t27189;
  double t27191;
  double t35274;
  double t35277;
  double t35289;
  double t35294;
  double t24254;
  double t24459;
  double t24527;
  double t24723;
  double t25110;
  double t26226;
  double t26278;
  double t26473;
  double t26530;
  double t26555;
  double t26577;
  double t26578;
  double t26592;
  double t27152;
  double t27160;
  double t32784;
  double t32988;
  double t32989;
  double t32993;
  double t32995;
  double t33171;
  double t33175;
  double t33484;
  double t33592;
  double t33761;
  double t33883;
  double t33926;
  double t33951;
  double t27192;
  double t27197;
  double t27198;
  double t27190;
  double t27204;
  double t27268;
  double t3576;
  double t17679;
  double t20493;
  double t20971;
  double t21805;
  double t22331;
  double t22572;
  double t22774;
  double t23133;
  double t23257;
  double t23619;
  double t23676;
  double t23806;
  double t23894;
  double t23930;
  double t36851;
  double t36852;
  double t36862;
  double t36865;
  double t36909;
  double t36913;
  double t36920;
  double t36940;
  double t36942;
  double t36943;
  double t36954;
  double t36956;
  double t34425;
  double t34460;
  double t34578;
  double t34593;
  double t34621;
  double t34650;
  double t34740;
  double t34757;
  double t34760;
  double t34766;
  double t34824;
  double t35225;
  double t35228;
  double t38257;
  double t38286;
  double t38294;
  double t38248;
  double t38395;
  double t38437;
  double t38452;
  double t38496;
  double t43037;
  double t43039;
  double t27601;
  double t27613;
  double t29693;
  double t30563;
  double t30944;
  double t30991;
  double t31256;
  double t31328;
  double t31423;
  double t31466;
  double t31819;
  double t32069;
  double t32145;
  double t35652;
  double t35653;
  double t35676;
  double t35677;
  double t35691;
  double t36117;
  double t36214;
  double t36242;
  double t36247;
  double t36755;
  double t36792;
  double t34062;
  double t34169;
  double t34206;
  double t34261;
  double t34294;
  double t34312;
  double t34354;
  double t34363;
  double t34415;
  double t34417;
  double t34418;
  double t38446;
  double t38848;
  double t38859;
  double t38878;
  double t38987;
  double t39283;
  double t39363;
  double t41406;
  double t42375;
  double t42473;
  double t42811;
  double t43145;
  double t43161;
  double t43163;
  double t32329;
  double t32494;
  double t32502;
  double t32508;
  double t32552;
  double t32555;
  double t32557;
  double t32558;
  double t32581;
  double t32631;
  double t32660;
  double t43196;
  double t43072;
  double t43263;
  double t43371;
  double t43375;
  double t44240;
  double t44263;
  double t44264;
  double t44266;
  double t44268;
  double t44269;
  double t44270;
  double t44279;
  double t44280;
  double t44281;
  double t44511;
  double t44512;
  double t44514;
  double t44524;
  double t44542;
  double t44543;
  double t44544;
  double t44567;
  double t44568;
  double t44570;
  double t44578;
  double t44579;
  double t44580;
  double t44583;
  double t44584;
  double t44587;
  double t44549;
  double t44550;
  double t44553;
  double t44660;
  double t44673;
  double t44677;
  double t44697;
  double t44701;
  double t44735;
  double t44777;
  double t44788;
  double t44813;
  double t44886;
  double t44892;
  double t44898;
  double t44938;
  double t44970;
  double t44982;
  double t44930;
  double t44933;
  double t44935;
  double t45101;
  double t45102;
  double t45103;
  double t45107;
  double t45109;
  double t45111;
  double t45126;
  double t45147;
  double t45237;
  double t45649;
  double t45650;
  double t45651;
  double t45823;
  double t45824;
  double t45829;
  double t45862;
  double t45872;
  double t45873;
  double t44241;
  double t44242;
  double t44243;
  double t44245;
  double t44247;
  double t44250;
  double t44251;
  double t44267;
  double t44274;
  double t44285;
  double t44286;
  double t44287;
  double t44359;
  double t44372;
  double t44394;
  double t44414;
  double t44444;
  double t44475;
  double t44476;
  double t45655;
  double t45709;
  double t45762;
  double t46247;
  double t46248;
  double t46249;
  double t46251;
  double t46252;
  double t46254;
  double t46272;
  double t46273;
  double t46274;
  double t44927;
  double t45039;
  double t46293;
  double t46294;
  double t46299;
  double t46300;
  double t46301;
  double t46368;
  double t46375;
  double t46398;
  double t45803;
  double t45804;
  double t45805;
  double t45816;
  double t45836;
  double t45876;
  double t45878;
  double t45879;
  double t45880;
  double t45881;
  double t45882;
  double t45885;
  double t45908;
  double t46016;
  double t46098;
  double t44572;
  double t44574;
  double t44575;
  double t44576;
  double t44581;
  double t44589;
  double t44590;
  double t44591;
  double t44607;
  double t44621;
  double t44627;
  double t44639;
  double t44644;
  double t44648;
  double t44652;
  double t46677;
  double t46678;
  double t46679;
  double t46673;
  double t46680;
  double t46681;
  double t46684;
  double t46685;
  double t46686;
  double t46705;
  double t46706;
  double t46707;
  double t44937;
  double t45036;
  double t46725;
  double t46726;
  double t46729;
  double t46730;
  double t46638;
  double t46639;
  double t46640;
  double t46644;
  double t46651;
  double t46653;
  double t46655;
  double t46656;
  double t46657;
  double t46658;
  double t46659;
  double t46660;
  double t46661;
  double t45647;
  double t45648;
  double t45652;
  double t45653;
  double t45654;
  double t45763;
  double t45765;
  double t45776;
  double t45778;
  double t45779;
  double t45783;
  double t45784;
  double t45785;
  double t45789;
  double t45790;
  double t44488;
  double t44526;
  double t44545;
  double t44546;
  double t44548;
  double t44554;
  double t44555;
  double t44556;
  double t44558;
  double t44559;
  double t44560;
  double t44561;
  double t44562;
  double t44563;
  double t44564;
  double t46874;
  double t46975;
  double t47099;
  double t47100;
  double t46245;
  double t46246;
  double t46250;
  double t46255;
  double t46258;
  double t46259;
  double t46260;
  double t46261;
  double t46262;
  double t46265;
  double t46267;
  double t46268;
  double t46269;
  double t47067;
  double t47068;
  double t47069;
  double t47071;
  double t47072;
  double t47073;
  double t47075;
  double t47076;
  double t47080;
  double t47082;
  double t47087;
  double t47088;
  double t46702;
  double t46704;
  double t46709;
  double t46710;
  double t46713;
  double t46714;
  double t46715;
  double t46716;
  double t46717;
  double t46718;
  double t46719;
  double t46720;
  double t46721;
  double t44678;
  double t44681;
  double t44755;
  double t44844;
  double t44848;
  double t44859;
  double t44862;
  double t44866;
  double t44871;
  double t44875;
  double t44876;
  double t44881;
  double t44882;
  double t47138;
  double t47143;
  double t47149;
  double t47152;
  double t47153;
  double t47154;
  double t47150;
  double t47159;
  double t47163;
  double t47170;
  double t47171;
  double t47172;
  double t47250;
  double t47347;
  double t47348;
  double t46271;
  double t46275;
  double t46276;
  double t46277;
  double t46278;
  double t46279;
  double t46280;
  double t46281;
  double t46282;
  double t46283;
  double t46284;
  double t47010;
  double t47011;
  double t47017;
  double t47035;
  double t47040;
  double t47041;
  double t47048;
  double t47053;
  double t47057;
  double t47063;
  double t47065;
  double t46683;
  double t46687;
  double t46688;
  double t46689;
  double t46690;
  double t46691;
  double t46692;
  double t46693;
  double t46694;
  double t46696;
  double t46699;
  double t44884;
  double t44914;
  double t44917;
  double t44918;
  double t44919;
  double t44920;
  double t44921;
  double t44922;
  double t44923;
  double t44924;
  double t44925;
  double t47169;
  double t47174;
  double t47176;
  double t47179;
  double t47180;
  double t47197;
  double t47202;
  double t47203;
  double t47206;
  double t47208;
  double t47213;
  double t47403;
  double t47404;
  double t47406;
  double t47409;
  double t47371;
  double t47415;
  double t47416;
  double t47418;
  double t47452;
  double t47453;
  double t47454;
  double t47455;
  double t47457;
  double t47459;
  double t47460;
  double t47462;
  double t47463;
  double t47464;
  double t47465;
  double t47466;
  double t47468;
  double t47474;
  double t47480;
  double t47499;
  double t47505;
  double t47507;
  double t47508;
  double t47514;
  double t47517;
  double t47522;
  double t47526;
  double t47527;
  double t47481;
  double t47483;
  double t47485;
  double t47486;
  double t47487;
  double t47492;
  double t47493;
  double t47494;
  double t47496;
  double t47497;
  double t47498;
  double t47427;
  double t47428;
  double t47430;
  double t47431;
  double t47432;
  double t47433;
  double t47435;
  double t47436;
  double t47439;
  double t47440;
  double t47441;
  double t47442;
  double t47448;
  double t47449;
  double t47450;
  double t47531;
  double t47532;
  double t47535;
  double t47536;
  double t47542;
  double t47543;
  double t47554;
  double t47555;
  double t47564;
  double t47565;
  double t47566;
  double t47567;
  double t47568;
  double t47569;
  double t47570;
  double t47625;
  double t47626;
  double t47627;
  double t47629;
  double t47630;
  double t47631;
  double t47585;
  double t47586;
  double t47587;
  double t47658;
  double t47659;
  double t47660;
  double t47662;
  double t47663;
  double t47947;
  double t47948;
  double t47949;
  double t48007;
  double t48063;
  double t48065;
  double t48066;
  double t48067;
  double t48072;
  double t48073;
  double t48074;
  double t47621;
  double t47622;
  double t47623;
  double t47624;
  double t47628;
  double t47633;
  double t47634;
  double t47635;
  double t47636;
  double t47638;
  double t47639;
  double t47640;
  double t47641;
  double t47642;
  double t47647;
  double t48219;
  double t48220;
  double t48243;
  double t48251;
  double t48298;
  double t48299;
  double t48300;
  double t48297;
  double t48301;
  double t48302;
  double t48305;
  double t48306;
  double t48307;
  double t48523;
  double t48524;
  double t48527;
  double t47580;
  double t47581;
  double t47582;
  double t47583;
  double t47584;
  double t47588;
  double t47589;
  double t47590;
  double t47594;
  double t47601;
  double t47602;
  double t47603;
  double t47610;
  double t47611;
  double t47612;
  double t48203;
  double t48204;
  double t48205;
  double t48206;
  double t48207;
  double t48208;
  double t48209;
  double t48210;
  double t48211;
  double t48212;
  double t48213;
  double t48214;
  double t48215;
  double t48561;
  double t48562;
  double t48598;
  double t48600;
  double t47656;
  double t47657;
  double t47661;
  double t47667;
  double t47668;
  double t47670;
  double t47671;
  double t47672;
  double t47695;
  double t47859;
  double t47942;
  double t47943;
  double t47944;
  double t48579;
  double t48580;
  double t48581;
  double t48582;
  double t48583;
  double t48584;
  double t48585;
  double t48586;
  double t48589;
  double t48590;
  double t48591;
  double t48592;
  double t48473;
  double t48521;
  double t48529;
  double t48530;
  double t48534;
  double t48536;
  double t48537;
  double t48543;
  double t48545;
  double t48546;
  double t48547;
  double t48548;
  double t48549;
  double t48624;
  double t48625;
  double t48626;
  double t48623;
  double t48627;
  double t48628;
  double t48630;
  double t48631;
  double t48763;
  double t49751;
  double t49965;
  double t49966;
  double t47946;
  double t47952;
  double t47953;
  double t47954;
  double t47955;
  double t47956;
  double t47959;
  double t47960;
  double t47961;
  double t47962;
  double t47964;
  double t48563;
  double t48565;
  double t48566;
  double t48567;
  double t48568;
  double t48570;
  double t48571;
  double t48573;
  double t48574;
  double t48575;
  double t48576;
  double t48304;
  double t48308;
  double t48309;
  double t48310;
  double t48311;
  double t48312;
  double t48314;
  double t48315;
  double t48371;
  double t48469;
  double t48470;
  double t48629;
  double t48998;
  double t49059;
  double t49060;
  double t49283;
  double t49301;
  double t49305;
  double t49307;
  double t49324;
  double t49395;
  double t49436;
  double t53494;
  double t53505;
  double t53511;
  double t53557;
  double t49972;
  double t53575;
  double t53587;
  double t53589;
  t3449 = Cos(var1[4]);
  t3949 = Sin(var1[15]);
  t3400 = Cos(var1[15]);
  t5602 = Sin(var1[4]);
  t10730 = Sin(var1[5]);
  t17727 = Sin(var1[16]);
  t17982 = -1.*t3449*t3949;
  t19052 = -1.*t3400*t5602*t10730;
  t20492 = t17982 + t19052;
  t20511 = Cos(var1[17]);
  t21174 = Cos(var1[16]);
  t21803 = Sin(var1[17]);
  t24050 = Cos(var1[5]);
  t20598 = -1.*t20511;
  t20627 = 1. + t20598;
  t24757 = -1.*t24050*t3949*t17727*t5602;
  t24762 = t21174*t5602*t10730;
  t25098 = t24757 + t24762;
  t25648 = -1.*t21174*t24050*t3949*t5602;
  t26143 = -1.*t17727*t5602*t10730;
  t26225 = t25648 + t26143;
  t24585 = -1.*t21174;
  t24645 = 1. + t24585;
  t23979 = -1.*t3400;
  t23983 = 1. + t23979;
  t27206 = -1.*t3400*t5602;
  t27207 = -1.*t3449*t3949*t10730;
  t27259 = t27206 + t27207;
  t27280 = t3449*t24050*t17727;
  t27478 = t21174*t27259;
  t27479 = t27280 + t27478;
  t27491 = -1.*t21174*t3449*t24050;
  t27509 = t17727*t27259;
  t27522 = t27491 + t27509;
  t21818 = t3400*t3449;
  t22325 = -1.*t3949*t5602*t10730;
  t22326 = t21818 + t22325;
  t27935 = t24050*t17727*t5602;
  t29591 = t21174*t22326;
  t29651 = t27935 + t29591;
  t29755 = t21174*t24050*t5602;
  t29775 = -1.*t17727*t22326;
  t30452 = t29755 + t29775;
  t32333 = -1.*t21174*t24050*t5602;
  t32335 = t17727*t22326;
  t32365 = t32333 + t32335;
  t34040 = t3449*t24050*t3949*t17727;
  t34056 = -1.*t21174*t3449*t10730;
  t34058 = t34040 + t34056;
  t34083 = t21174*t3449*t24050*t3949;
  t34117 = t3449*t17727*t10730;
  t34165 = t34083 + t34117;
  t34474 = -1.*t3449*t24050*t3949*t17727;
  t34482 = t21174*t3449*t10730;
  t34573 = t34474 + t34482;
  t27189 = 0.325*t24645*t3449*t24050;
  t27191 = -0.1575*t23983*t3449*t10730;
  t35274 = -1.*t21174*t3449*t3949*t10730;
  t35277 = t27280 + t35274;
  t35289 = -1.*t3449*t3949*t17727*t10730;
  t35294 = t27491 + t35289;
  t24254 = -0.1575*t23983*t24050*t5602;
  t24459 = -0.2255*t3400*t24050*t5602;
  t24527 = -0.325*t24050*t3949*t17727*t5602;
  t24723 = -0.325*t24645*t5602*t10730;
  t25110 = -0.575*t20627*t25098;
  t26226 = -0.575*t21803*t26225;
  t26278 = t21803*t25098;
  t26473 = t20511*t26225;
  t26530 = t26278 + t26473;
  t26555 = -0.0641*t26530;
  t26577 = t20511*t25098;
  t26578 = -1.*t21803*t26225;
  t26592 = t26577 + t26578;
  t27152 = -0.295*t26592;
  t27160 = t24254 + t24459 + t24527 + t24723 + t25110 + t26226 + t26555 + t27152;
  t32784 = -0.068*t3449*t24050*t3949;
  t32988 = 0.325*t3400*t3449*t24050*t17727;
  t32989 = -0.575*t3400*t20627*t3449*t24050*t17727;
  t32993 = -0.575*t3400*t21174*t3449*t24050*t21803;
  t32995 = t3400*t20511*t3449*t24050*t17727;
  t33171 = -1.*t3400*t21174*t3449*t24050*t21803;
  t33175 = t32995 + t33171;
  t33484 = -0.295*t33175;
  t33592 = t3400*t21174*t20511*t3449*t24050;
  t33761 = t3400*t3449*t24050*t17727*t21803;
  t33883 = t33592 + t33761;
  t33926 = -0.0641*t33883;
  t33951 = t32784 + t32988 + t32989 + t32993 + t33484 + t33926;
  t27192 = -1.*t3949*t5602;
  t27197 = t3400*t3449*t10730;
  t27198 = t27192 + t27197;
  t27190 = -0.1575*t3949*t5602;
  t27204 = -0.2255*t27198;
  t27268 = 0.325*t17727*t27259;
  t3576 = 0.1575*t3400*t3449;
  t17679 = -0.1575*t3949*t5602*t10730;
  t20493 = 0.325*t17727*t20492;
  t20971 = -0.575*t20627*t17727*t20492;
  t21805 = -0.575*t21174*t21803*t20492;
  t22331 = -0.2255*t22326;
  t22572 = t20511*t17727*t20492;
  t22774 = -1.*t21174*t21803*t20492;
  t23133 = t22572 + t22774;
  t23257 = -0.295*t23133;
  t23619 = t21174*t20511*t20492;
  t23676 = t17727*t21803*t20492;
  t23806 = t23619 + t23676;
  t23894 = -0.0641*t23806;
  t23930 = t3576 + t17679 + t20493 + t20971 + t21805 + t22331 + t23257 + t23894;
  t36851 = 0.325*t21174*t27198;
  t36852 = -0.575*t21174*t20627*t27198;
  t36862 = 0.575*t17727*t21803*t27198;
  t36865 = -1.*t20511*t17727*t27198;
  t36909 = t21174*t21803*t27198;
  t36913 = t36865 + t36909;
  t36920 = -0.0641*t36913;
  t36940 = t21174*t20511*t27198;
  t36942 = t17727*t21803*t27198;
  t36943 = t36940 + t36942;
  t36954 = -0.295*t36943;
  t36956 = t36851 + t36852 + t36862 + t36920 + t36954;
  t34425 = 0.325*t21174*t3449*t24050*t3949;
  t34460 = 0.325*t3449*t17727*t10730;
  t34578 = -0.575*t21803*t34573;
  t34593 = -0.575*t20627*t34165;
  t34621 = -1.*t21803*t34573;
  t34650 = t20511*t34165;
  t34740 = t34621 + t34650;
  t34757 = -0.295*t34740;
  t34760 = t20511*t34573;
  t34766 = t21803*t34165;
  t34824 = t34760 + t34766;
  t35225 = -0.0641*t34824;
  t35228 = t34425 + t34460 + t34578 + t34593 + t34757 + t35225;
  t38257 = t3400*t5602;
  t38286 = t3449*t3949*t10730;
  t38294 = t38257 + t38286;
  t38248 = -1.*t3449*t24050*t17727;
  t38395 = t21174*t38294;
  t38437 = t38248 + t38395;
  t38452 = -1.*t17727*t38294;
  t38496 = t27491 + t38452;
  t43037 = -1.*t21174*t38294;
  t43039 = t27280 + t43037;
  t27601 = 0.325*t24050*t17727*t5602;
  t27613 = 0.325*t21174*t22326;
  t29693 = -0.575*t20627*t29651;
  t30563 = -0.575*t21803*t30452;
  t30944 = t21803*t29651;
  t30991 = t20511*t30452;
  t31256 = t30944 + t30991;
  t31328 = -0.0641*t31256;
  t31423 = t20511*t29651;
  t31466 = -1.*t21803*t30452;
  t31819 = t31423 + t31466;
  t32069 = -0.295*t31819;
  t32145 = t27601 + t27613 + t29693 + t30563 + t31328 + t32069;
  t35652 = -0.575*t21174*t20511*t27198;
  t35653 = -0.575*t17727*t21803*t27198;
  t35676 = t20511*t17727*t27198;
  t35677 = -1.*t21174*t21803*t27198;
  t35691 = t35676 + t35677;
  t36117 = -0.0641*t35691;
  t36214 = -1.*t21174*t20511*t27198;
  t36242 = -1.*t17727*t21803*t27198;
  t36247 = t36214 + t36242;
  t36755 = -0.295*t36247;
  t36792 = t35652 + t35653 + t36117 + t36755;
  t34062 = -0.575*t21803*t34058;
  t34169 = -0.575*t20511*t34165;
  t34206 = -1.*t21803*t34058;
  t34261 = -1.*t20511*t34165;
  t34294 = t34206 + t34261;
  t34312 = -0.295*t34294;
  t34354 = t20511*t34058;
  t34363 = -1.*t21803*t34165;
  t34415 = t34354 + t34363;
  t34417 = -0.0641*t34415;
  t34418 = t34062 + t34169 + t34312 + t34417;
  t38446 = -0.575*t21803*t38437;
  t38848 = -0.575*t20511*t38496;
  t38859 = -1.*t21803*t38437;
  t38878 = -1.*t20511*t38496;
  t38987 = t38859 + t38878;
  t39283 = -0.295*t38987;
  t39363 = t20511*t38437;
  t41406 = -1.*t21803*t38496;
  t42375 = t39363 + t41406;
  t42473 = -0.0641*t42375;
  t42811 = t38446 + t38848 + t39283 + t42473;
  t43145 = t21174*t3449*t24050;
  t43161 = t17727*t38294;
  t43163 = t43145 + t43161;
  t32329 = -0.575*t20511*t29651;
  t32494 = -0.575*t21803*t32365;
  t32502 = -1.*t21803*t29651;
  t32508 = t20511*t32365;
  t32552 = t32502 + t32508;
  t32555 = -0.0641*t32552;
  t32557 = -1.*t20511*t29651;
  t32558 = -1.*t21803*t32365;
  t32581 = t32557 + t32558;
  t32631 = -0.295*t32581;
  t32660 = t32329 + t32494 + t32555 + t32631;
  t43196 = t21803*t38437;
  t43072 = t20511*t38496;
  t43263 = -1.*t20511*t38437;
  t43371 = -1.*t21803*t43163;
  t43375 = t43263 + t43371;
  t44240 = Cos(var1[3]);
  t44263 = t3400*t44240*t5602;
  t44264 = t44240*t3449*t3949*t10730;
  t44266 = t44263 + t44264;
  t44268 = -1.*t44240*t3449*t24050*t17727;
  t44269 = t21174*t44266;
  t44270 = t44268 + t44269;
  t44279 = t21174*t44240*t3449*t24050;
  t44280 = t17727*t44266;
  t44281 = t44279 + t44280;
  t44511 = Sin(var1[3]);
  t44512 = -1.*t24050*t44511;
  t44514 = -1.*t44240*t5602*t10730;
  t44524 = t44512 + t44514;
  t44542 = t44240*t3449*t3949;
  t44543 = -1.*t3400*t44524;
  t44544 = t44542 + t44543;
  t44567 = -1.*t44240*t24050*t5602;
  t44568 = t44511*t10730;
  t44570 = t44567 + t44568;
  t44578 = -1.*t3949*t17727*t44570;
  t44579 = t21174*t44524;
  t44580 = t44578 + t44579;
  t44583 = -1.*t21174*t3949*t44570;
  t44584 = -1.*t17727*t44524;
  t44587 = t44583 + t44584;
  t44549 = -1.*t3400*t44240*t3449;
  t44550 = -1.*t3949*t44524;
  t44553 = t44549 + t44550;
  t44660 = t44240*t24050*t5602;
  t44673 = -1.*t44511*t10730;
  t44677 = t44660 + t44673;
  t44697 = -1.*t17727*t44677;
  t44701 = t21174*t44553;
  t44735 = t44697 + t44701;
  t44777 = -1.*t21174*t44677;
  t44788 = -1.*t17727*t44553;
  t44813 = t44777 + t44788;
  t44886 = t21174*t44677;
  t44892 = t17727*t44553;
  t44898 = t44886 + t44892;
  t44938 = -1.*t44240*t24050;
  t44970 = t44511*t5602*t10730;
  t44982 = t44938 + t44970;
  t44930 = -1.*t24050*t44511*t5602;
  t44933 = -1.*t44240*t10730;
  t44935 = t44930 + t44933;
  t45101 = t3400*t3449*t44511;
  t45102 = -1.*t3949*t44982;
  t45103 = t45101 + t45102;
  t45107 = -1.*t17727*t44935;
  t45109 = t21174*t45103;
  t45111 = t45107 + t45109;
  t45126 = t21174*t44935;
  t45147 = t17727*t45103;
  t45237 = t45126 + t45147;
  t45649 = -1.*t3949*t44511*t5602;
  t45650 = t3400*t3449*t44511*t10730;
  t45651 = t45649 + t45650;
  t45823 = t3449*t24050*t3949*t17727*t44511;
  t45824 = -1.*t21174*t3449*t44511*t10730;
  t45829 = t45823 + t45824;
  t45862 = t21174*t3449*t24050*t3949*t44511;
  t45872 = t3449*t17727*t44511*t10730;
  t45873 = t45862 + t45872;
  t44241 = -0.325*t24645*t44240*t3449*t24050;
  t44242 = 0.1575*t44240*t3949*t5602;
  t44243 = 0.1575*t23983*t44240*t3449*t10730;
  t44245 = t44240*t3949*t5602;
  t44247 = -1.*t3400*t44240*t3449*t10730;
  t44250 = t44245 + t44247;
  t44251 = -0.2255*t44250;
  t44267 = 0.325*t17727*t44266;
  t44274 = -0.575*t21803*t44270;
  t44285 = -0.575*t20627*t44281;
  t44286 = -1.*t21803*t44270;
  t44287 = t20511*t44281;
  t44359 = t44286 + t44287;
  t44372 = -0.295*t44359;
  t44394 = t20511*t44270;
  t44414 = t21803*t44281;
  t44444 = t44394 + t44414;
  t44475 = -0.0641*t44444;
  t44476 = t44241 + t44242 + t44243 + t44251 + t44267 + t44274 + t44285 + t44372 + t44475;
  t45655 = t3400*t44511*t5602;
  t45709 = t3449*t3949*t44511*t10730;
  t45762 = t45655 + t45709;
  t46247 = -1.*t3449*t24050*t17727*t44511;
  t46248 = t21174*t45762;
  t46249 = t46247 + t46248;
  t46251 = -1.*t21174*t3449*t24050*t44511;
  t46252 = -1.*t17727*t45762;
  t46254 = t46251 + t46252;
  t46272 = t21174*t3449*t24050*t44511;
  t46273 = t17727*t45762;
  t46274 = t46272 + t46273;
  t44927 = 0.1575*t3449*t3949*t44511;
  t45039 = t3449*t3949*t44511;
  t46293 = -1.*t3949*t44511*t5602*t10730;
  t46294 = t45101 + t46293;
  t46299 = t24050*t17727*t44511*t5602;
  t46300 = t21174*t46294;
  t46301 = t46299 + t46300;
  t46368 = -1.*t21174*t24050*t44511*t5602;
  t46375 = t17727*t46294;
  t46398 = t46368 + t46375;
  t45803 = 0.1575*t23983*t3449*t24050*t44511;
  t45804 = 0.2255*t3400*t3449*t24050*t44511;
  t45805 = 0.325*t3449*t24050*t3949*t17727*t44511;
  t45816 = 0.325*t24645*t3449*t44511*t10730;
  t45836 = -0.575*t20627*t45829;
  t45876 = -0.575*t21803*t45873;
  t45878 = t21803*t45829;
  t45879 = t20511*t45873;
  t45880 = t45878 + t45879;
  t45881 = -0.0641*t45880;
  t45882 = t20511*t45829;
  t45885 = -1.*t21803*t45873;
  t45908 = t45882 + t45885;
  t46016 = -0.295*t45908;
  t46098 = t45803 + t45804 + t45805 + t45816 + t45836 + t45876 + t45881 + t46016;
  t44572 = -0.1575*t23983*t44570;
  t44574 = -0.2255*t3400*t44570;
  t44575 = -0.325*t3949*t17727*t44570;
  t44576 = -0.325*t24645*t44524;
  t44581 = -0.575*t20627*t44580;
  t44589 = -0.575*t21803*t44587;
  t44590 = t21803*t44580;
  t44591 = t20511*t44587;
  t44607 = t44590 + t44591;
  t44621 = -0.0641*t44607;
  t44627 = t20511*t44580;
  t44639 = -1.*t21803*t44587;
  t44644 = t44627 + t44639;
  t44648 = -0.295*t44644;
  t44652 = t44572 + t44574 + t44575 + t44576 + t44581 + t44589 + t44621 + t44648;
  t46677 = t44240*t24050;
  t46678 = -1.*t44511*t5602*t10730;
  t46679 = t46677 + t46678;
  t46673 = -1.*t3949*t17727*t44935;
  t46680 = t21174*t46679;
  t46681 = t46673 + t46680;
  t46684 = -1.*t21174*t3949*t44935;
  t46685 = -1.*t17727*t46679;
  t46686 = t46684 + t46685;
  t46705 = t3949*t17727*t44935;
  t46706 = -1.*t21174*t46679;
  t46707 = t46705 + t46706;
  t44937 = -0.325*t24645*t44935;
  t45036 = -0.1575*t23983*t44982;
  t46725 = -1.*t21174*t3949*t44982;
  t46726 = t45107 + t46725;
  t46729 = -1.*t3949*t17727*t44982;
  t46730 = t45126 + t46729;
  t46638 = 0.068*t3949*t44935;
  t46639 = -0.325*t3400*t17727*t44935;
  t46640 = 0.575*t3400*t20627*t17727*t44935;
  t46644 = 0.575*t3400*t21174*t21803*t44935;
  t46651 = -1.*t3400*t20511*t17727*t44935;
  t46653 = t3400*t21174*t21803*t44935;
  t46655 = t46651 + t46653;
  t46656 = -0.295*t46655;
  t46657 = -1.*t3400*t21174*t20511*t44935;
  t46658 = -1.*t3400*t17727*t21803*t44935;
  t46659 = t46657 + t46658;
  t46660 = -0.0641*t46659;
  t46661 = t46638 + t46639 + t46640 + t46644 + t46656 + t46660;
  t45647 = 0.1575*t3400*t44511*t5602;
  t45648 = 0.1575*t3449*t3949*t44511*t10730;
  t45652 = 0.325*t17727*t45651;
  t45653 = -0.575*t20627*t17727*t45651;
  t45654 = -0.575*t21174*t21803*t45651;
  t45763 = -0.2255*t45762;
  t45765 = t20511*t17727*t45651;
  t45776 = -1.*t21174*t21803*t45651;
  t45778 = t45765 + t45776;
  t45779 = -0.295*t45778;
  t45783 = t21174*t20511*t45651;
  t45784 = t17727*t21803*t45651;
  t45785 = t45783 + t45784;
  t45789 = -0.0641*t45785;
  t45790 = t45647 + t45648 + t45652 + t45653 + t45654 + t45763 + t45779 + t45789;
  t44488 = -0.1575*t3400*t44240*t3449;
  t44526 = -0.1575*t3949*t44524;
  t44545 = 0.325*t17727*t44544;
  t44546 = -0.575*t20627*t17727*t44544;
  t44548 = -0.575*t21174*t21803*t44544;
  t44554 = -0.2255*t44553;
  t44555 = t20511*t17727*t44544;
  t44556 = -1.*t21174*t21803*t44544;
  t44558 = t44555 + t44556;
  t44559 = -0.295*t44558;
  t44560 = t21174*t20511*t44544;
  t44561 = t17727*t21803*t44544;
  t44562 = t44560 + t44561;
  t44563 = -0.0641*t44562;
  t44564 = t44488 + t44526 + t44545 + t44546 + t44548 + t44554 + t44559 + t44563;
  t46874 = -1.*t3400*t46679;
  t46975 = t45039 + t46874;
  t47099 = t3949*t46679;
  t47100 = t45101 + t47099;
  t46245 = -0.325*t3449*t24050*t17727*t44511;
  t46246 = 0.325*t21174*t45762;
  t46250 = -0.575*t20627*t46249;
  t46255 = -0.575*t21803*t46254;
  t46258 = t21803*t46249;
  t46259 = t20511*t46254;
  t46260 = t46258 + t46259;
  t46261 = -0.0641*t46260;
  t46262 = t20511*t46249;
  t46265 = -1.*t21803*t46254;
  t46267 = t46262 + t46265;
  t46268 = -0.295*t46267;
  t46269 = t46245 + t46246 + t46250 + t46255 + t46261 + t46268;
  t47067 = 0.325*t21174*t46975;
  t47068 = -0.575*t21174*t20627*t46975;
  t47069 = 0.575*t17727*t21803*t46975;
  t47071 = -1.*t20511*t17727*t46975;
  t47072 = t21174*t21803*t46975;
  t47073 = t47071 + t47072;
  t47075 = -0.0641*t47073;
  t47076 = t21174*t20511*t46975;
  t47080 = t17727*t21803*t46975;
  t47082 = t47076 + t47080;
  t47087 = -0.295*t47082;
  t47088 = t47067 + t47068 + t47069 + t47075 + t47087;
  t46702 = -0.325*t21174*t3949*t44935;
  t46704 = -0.325*t17727*t46679;
  t46709 = -0.575*t21803*t46707;
  t46710 = -0.575*t20627*t46686;
  t46713 = -1.*t21803*t46707;
  t46714 = t20511*t46686;
  t46715 = t46713 + t46714;
  t46716 = -0.295*t46715;
  t46717 = t20511*t46707;
  t46718 = t21803*t46686;
  t46719 = t46717 + t46718;
  t46720 = -0.0641*t46719;
  t46721 = t46702 + t46704 + t46709 + t46710 + t46716 + t46720;
  t44678 = -0.325*t17727*t44677;
  t44681 = 0.325*t21174*t44553;
  t44755 = -0.575*t20627*t44735;
  t44844 = -0.575*t21803*t44813;
  t44848 = t21803*t44735;
  t44859 = t20511*t44813;
  t44862 = t44848 + t44859;
  t44866 = -0.0641*t44862;
  t44871 = t20511*t44735;
  t44875 = -1.*t21803*t44813;
  t44876 = t44871 + t44875;
  t44881 = -0.295*t44876;
  t44882 = t44678 + t44681 + t44755 + t44844 + t44866 + t44881;
  t47138 = t24050*t44511*t5602;
  t47143 = t44240*t10730;
  t47149 = t47138 + t47143;
  t47152 = -1.*t3400*t3449*t44511;
  t47153 = -1.*t3949*t46679;
  t47154 = t47152 + t47153;
  t47150 = -1.*t17727*t47149;
  t47159 = t21174*t47154;
  t47163 = t47150 + t47159;
  t47170 = -1.*t21174*t47149;
  t47171 = -1.*t17727*t47154;
  t47172 = t47170 + t47171;
  t47250 = t17727*t47149;
  t47347 = -1.*t21174*t47154;
  t47348 = t47250 + t47347;
  t46271 = -0.575*t20511*t46249;
  t46275 = -0.575*t21803*t46274;
  t46276 = -1.*t21803*t46249;
  t46277 = t20511*t46274;
  t46278 = t46276 + t46277;
  t46279 = -0.0641*t46278;
  t46280 = -1.*t20511*t46249;
  t46281 = -1.*t21803*t46274;
  t46282 = t46280 + t46281;
  t46283 = -0.295*t46282;
  t46284 = t46271 + t46275 + t46279 + t46283;
  t47010 = -0.575*t21174*t20511*t46975;
  t47011 = -0.575*t17727*t21803*t46975;
  t47017 = t20511*t17727*t46975;
  t47035 = -1.*t21174*t21803*t46975;
  t47040 = t47017 + t47035;
  t47041 = -0.0641*t47040;
  t47048 = -1.*t21174*t20511*t46975;
  t47053 = -1.*t17727*t21803*t46975;
  t47057 = t47048 + t47053;
  t47063 = -0.295*t47057;
  t47065 = t47010 + t47011 + t47041 + t47063;
  t46683 = -0.575*t21803*t46681;
  t46687 = -0.575*t20511*t46686;
  t46688 = -1.*t21803*t46681;
  t46689 = -1.*t20511*t46686;
  t46690 = t46688 + t46689;
  t46691 = -0.295*t46690;
  t46692 = t20511*t46681;
  t46693 = -1.*t21803*t46686;
  t46694 = t46692 + t46693;
  t46696 = -0.0641*t46694;
  t46699 = t46683 + t46687 + t46691 + t46696;
  t44884 = -0.575*t20511*t44735;
  t44914 = -0.575*t21803*t44898;
  t44917 = -1.*t21803*t44735;
  t44918 = t20511*t44898;
  t44919 = t44917 + t44918;
  t44920 = -0.0641*t44919;
  t44921 = -1.*t20511*t44735;
  t44922 = -1.*t21803*t44898;
  t44923 = t44921 + t44922;
  t44924 = -0.295*t44923;
  t44925 = t44884 + t44914 + t44920 + t44924;
  t47169 = -0.575*t21803*t47163;
  t47174 = -0.575*t20511*t47172;
  t47176 = -1.*t21803*t47163;
  t47179 = -1.*t20511*t47172;
  t47180 = t47176 + t47179;
  t47197 = -0.295*t47180;
  t47202 = t20511*t47163;
  t47203 = -1.*t21803*t47172;
  t47206 = t47202 + t47203;
  t47208 = -0.0641*t47206;
  t47213 = t47169 + t47174 + t47197 + t47208;
  t47403 = t21174*t47149;
  t47404 = t17727*t47154;
  t47406 = t47403 + t47404;
  t47409 = t21803*t47163;
  t47371 = t20511*t47172;
  t47415 = -1.*t20511*t47163;
  t47416 = -1.*t21803*t47406;
  t47418 = t47415 + t47416;
  t47452 = -0.325*t24645*t3449*t24050*t44511;
  t47453 = 0.1575*t3949*t44511*t5602;
  t47454 = 0.1575*t23983*t3449*t44511*t10730;
  t47455 = t3949*t44511*t5602;
  t47457 = -1.*t3400*t3449*t44511*t10730;
  t47459 = t47455 + t47457;
  t47460 = -0.2255*t47459;
  t47462 = 0.325*t17727*t45762;
  t47463 = -0.575*t21803*t46249;
  t47464 = -0.575*t20627*t46274;
  t47465 = -0.295*t46278;
  t47466 = t21803*t46274;
  t47468 = t46262 + t47466;
  t47474 = -0.0641*t47468;
  t47480 = t47452 + t47453 + t47454 + t47460 + t47462 + t47463 + t47464 + t47465 + t47474;
  t47499 = -0.1575*t3400*t3449*t44511;
  t47505 = -0.1575*t3949*t46679;
  t47507 = 0.325*t17727*t46975;
  t47508 = -0.575*t20627*t17727*t46975;
  t47514 = -0.575*t21174*t21803*t46975;
  t47517 = -0.2255*t47154;
  t47522 = -0.295*t47040;
  t47526 = -0.0641*t47082;
  t47527 = t47499 + t47505 + t47507 + t47508 + t47514 + t47517 + t47522 + t47526;
  t47481 = -0.1575*t23983*t44935;
  t47483 = -0.2255*t3400*t44935;
  t47485 = -0.325*t3949*t17727*t44935;
  t47486 = -0.325*t24645*t46679;
  t47487 = -0.575*t20627*t46681;
  t47492 = -0.575*t21803*t46686;
  t47493 = t21803*t46681;
  t47494 = t47493 + t46714;
  t47496 = -0.0641*t47494;
  t47497 = -0.295*t46694;
  t47498 = t47481 + t47483 + t47485 + t47486 + t47487 + t47492 + t47496 + t47497;
  t47427 = -0.1575*t44240*t3449*t3949;
  t47428 = -0.325*t24645*t44677;
  t47430 = -0.1575*t23983*t44524;
  t47431 = -1.*t44240*t3449*t3949;
  t47432 = t3400*t44524;
  t47433 = t47431 + t47432;
  t47435 = -0.2255*t47433;
  t47436 = 0.325*t17727*t44553;
  t47439 = -0.575*t21803*t44735;
  t47440 = -0.575*t20627*t44898;
  t47441 = -0.295*t44919;
  t47442 = t21803*t44898;
  t47448 = t44871 + t47442;
  t47449 = -0.0641*t47448;
  t47450 = t47427 + t47428 + t47430 + t47435 + t47436 + t47439 + t47440 + t47441 + t47449;
  t47531 = -0.325*t17727*t47149;
  t47532 = 0.325*t21174*t47154;
  t47535 = -0.575*t20627*t47163;
  t47536 = -0.575*t21803*t47172;
  t47542 = t47409 + t47371;
  t47543 = -0.0641*t47542;
  t47554 = -0.295*t47206;
  t47555 = t47531 + t47532 + t47535 + t47536 + t47543 + t47554;
  t47564 = -0.575*t20511*t47163;
  t47565 = -0.575*t21803*t47406;
  t47566 = t20511*t47406;
  t47567 = t47176 + t47566;
  t47568 = -0.0641*t47567;
  t47569 = -0.295*t47418;
  t47570 = t47564 + t47565 + t47568 + t47569;
  t47625 = -1.*t44240*t3449*t24050*t3949*t17727;
  t47626 = t21174*t44240*t3449*t10730;
  t47627 = t47625 + t47626;
  t47629 = -1.*t21174*t44240*t3449*t24050*t3949;
  t47630 = -1.*t44240*t3449*t17727*t10730;
  t47631 = t47629 + t47630;
  t47585 = -1.*t3400*t44240*t5602;
  t47586 = -1.*t44240*t3449*t3949*t10730;
  t47587 = t47585 + t47586;
  t47658 = t44240*t3449*t24050*t17727;
  t47659 = t21174*t47587;
  t47660 = t47658 + t47659;
  t47662 = -1.*t17727*t47587;
  t47663 = t44279 + t47662;
  t47947 = -1.*t21174*t44240*t3449*t24050;
  t47948 = t17727*t47587;
  t47949 = t47947 + t47948;
  t48007 = t44240*t3949*t5602*t10730;
  t48063 = t44549 + t48007;
  t48065 = -1.*t44240*t24050*t17727*t5602;
  t48066 = t21174*t48063;
  t48067 = t48065 + t48066;
  t48072 = t21174*t44240*t24050*t5602;
  t48073 = t17727*t48063;
  t48074 = t48072 + t48073;
  t47621 = -0.1575*t23983*t44240*t3449*t24050;
  t47622 = -0.2255*t3400*t44240*t3449*t24050;
  t47623 = -0.325*t44240*t3449*t24050*t3949*t17727;
  t47624 = -0.325*t24645*t44240*t3449*t10730;
  t47628 = -0.575*t20627*t47627;
  t47633 = -0.575*t21803*t47631;
  t47634 = t21803*t47627;
  t47635 = t20511*t47631;
  t47636 = t47634 + t47635;
  t47638 = -0.0641*t47636;
  t47639 = t20511*t47627;
  t47640 = -1.*t21803*t47631;
  t47641 = t47639 + t47640;
  t47642 = -0.295*t47641;
  t47647 = t47621 + t47622 + t47623 + t47624 + t47628 + t47633 + t47638 + t47642;
  t48219 = -1.*t21174*t3949*t44524;
  t48220 = t44697 + t48219;
  t48243 = -1.*t3949*t17727*t44524;
  t48251 = t44886 + t48243;
  t48298 = t24050*t44511;
  t48299 = t44240*t5602*t10730;
  t48300 = t48298 + t48299;
  t48297 = -1.*t3949*t17727*t44677;
  t48301 = t21174*t48300;
  t48302 = t48297 + t48301;
  t48305 = -1.*t21174*t3949*t44677;
  t48306 = -1.*t17727*t48300;
  t48307 = t48305 + t48306;
  t48523 = t3949*t17727*t44677;
  t48524 = -1.*t21174*t48300;
  t48527 = t48523 + t48524;
  t47580 = -0.1575*t3400*t44240*t5602;
  t47581 = -0.1575*t44240*t3449*t3949*t10730;
  t47582 = 0.325*t17727*t44250;
  t47583 = -0.575*t20627*t17727*t44250;
  t47584 = -0.575*t21174*t21803*t44250;
  t47588 = -0.2255*t47587;
  t47589 = t20511*t17727*t44250;
  t47590 = -1.*t21174*t21803*t44250;
  t47594 = t47589 + t47590;
  t47601 = -0.295*t47594;
  t47602 = t21174*t20511*t44250;
  t47603 = t17727*t21803*t44250;
  t47610 = t47602 + t47603;
  t47611 = -0.0641*t47610;
  t47612 = t47580 + t47581 + t47582 + t47583 + t47584 + t47588 + t47601 + t47611;
  t48203 = 0.068*t3949*t44677;
  t48204 = -0.325*t3400*t17727*t44677;
  t48205 = 0.575*t3400*t20627*t17727*t44677;
  t48206 = 0.575*t3400*t21174*t21803*t44677;
  t48207 = -1.*t3400*t20511*t17727*t44677;
  t48208 = t3400*t21174*t21803*t44677;
  t48209 = t48207 + t48208;
  t48210 = -0.295*t48209;
  t48211 = -1.*t3400*t21174*t20511*t44677;
  t48212 = -1.*t3400*t17727*t21803*t44677;
  t48213 = t48211 + t48212;
  t48214 = -0.0641*t48213;
  t48215 = t48203 + t48204 + t48205 + t48206 + t48210 + t48214;
  t48561 = -1.*t3400*t48300;
  t48562 = t47431 + t48561;
  t48598 = t3949*t48300;
  t48600 = t44549 + t48598;
  t47656 = 0.325*t44240*t3449*t24050*t17727;
  t47657 = 0.325*t21174*t47587;
  t47661 = -0.575*t20627*t47660;
  t47667 = -0.575*t21803*t47663;
  t47668 = t21803*t47660;
  t47670 = t20511*t47663;
  t47671 = t47668 + t47670;
  t47672 = -0.0641*t47671;
  t47695 = t20511*t47660;
  t47859 = -1.*t21803*t47663;
  t47942 = t47695 + t47859;
  t47943 = -0.295*t47942;
  t47944 = t47656 + t47657 + t47661 + t47667 + t47672 + t47943;
  t48579 = 0.325*t21174*t48562;
  t48580 = -0.575*t21174*t20627*t48562;
  t48581 = 0.575*t17727*t21803*t48562;
  t48582 = -1.*t20511*t17727*t48562;
  t48583 = t21174*t21803*t48562;
  t48584 = t48582 + t48583;
  t48585 = -0.0641*t48584;
  t48586 = t21174*t20511*t48562;
  t48589 = t17727*t21803*t48562;
  t48590 = t48586 + t48589;
  t48591 = -0.295*t48590;
  t48592 = t48579 + t48580 + t48581 + t48585 + t48591;
  t48473 = -0.325*t21174*t3949*t44677;
  t48521 = -0.325*t17727*t48300;
  t48529 = -0.575*t21803*t48527;
  t48530 = -0.575*t20627*t48307;
  t48534 = -1.*t21803*t48527;
  t48536 = t20511*t48307;
  t48537 = t48534 + t48536;
  t48543 = -0.295*t48537;
  t48545 = t20511*t48527;
  t48546 = t21803*t48307;
  t48547 = t48545 + t48546;
  t48548 = -0.0641*t48547;
  t48549 = t48473 + t48521 + t48529 + t48530 + t48543 + t48548;
  t48624 = t3400*t44240*t3449;
  t48625 = -1.*t3949*t48300;
  t48626 = t48624 + t48625;
  t48623 = -1.*t17727*t44570;
  t48627 = t21174*t48626;
  t48628 = t48623 + t48627;
  t48630 = -1.*t21174*t44570;
  t48631 = -1.*t17727*t48626;
  t48763 = t48630 + t48631;
  t49751 = t17727*t44570;
  t49965 = -1.*t21174*t48626;
  t49966 = t49751 + t49965;
  t47946 = -0.575*t20511*t47660;
  t47952 = -0.575*t21803*t47949;
  t47953 = -1.*t21803*t47660;
  t47954 = t20511*t47949;
  t47955 = t47953 + t47954;
  t47956 = -0.0641*t47955;
  t47959 = -1.*t20511*t47660;
  t47960 = -1.*t21803*t47949;
  t47961 = t47959 + t47960;
  t47962 = -0.295*t47961;
  t47964 = t47946 + t47952 + t47956 + t47962;
  t48563 = -0.575*t21174*t20511*t48562;
  t48565 = -0.575*t17727*t21803*t48562;
  t48566 = t20511*t17727*t48562;
  t48567 = -1.*t21174*t21803*t48562;
  t48568 = t48566 + t48567;
  t48570 = -0.0641*t48568;
  t48571 = -1.*t21174*t20511*t48562;
  t48573 = -1.*t17727*t21803*t48562;
  t48574 = t48571 + t48573;
  t48575 = -0.295*t48574;
  t48576 = t48563 + t48565 + t48570 + t48575;
  t48304 = -0.575*t21803*t48302;
  t48308 = -0.575*t20511*t48307;
  t48309 = -1.*t21803*t48302;
  t48310 = -1.*t20511*t48307;
  t48311 = t48309 + t48310;
  t48312 = -0.295*t48311;
  t48314 = t20511*t48302;
  t48315 = -1.*t21803*t48307;
  t48371 = t48314 + t48315;
  t48469 = -0.0641*t48371;
  t48470 = t48304 + t48308 + t48312 + t48469;
  t48629 = -0.575*t21803*t48628;
  t48998 = -0.575*t20511*t48763;
  t49059 = -1.*t21803*t48628;
  t49060 = -1.*t20511*t48763;
  t49283 = t49059 + t49060;
  t49301 = -0.295*t49283;
  t49305 = t20511*t48628;
  t49307 = -1.*t21803*t48763;
  t49324 = t49305 + t49307;
  t49395 = -0.0641*t49324;
  t49436 = t48629 + t48998 + t49301 + t49395;
  t53494 = t21174*t44570;
  t53505 = t17727*t48626;
  t53511 = t53494 + t53505;
  t53557 = t21803*t48628;
  t49972 = t20511*t48763;
  t53575 = -1.*t20511*t48628;
  t53587 = -1.*t21803*t53511;
  t53589 = t53575 + t53587;
  p_output1[0]=(t27189 + t27190 + t27191 + t27204 + t27268 - 0.575*t21803*t27479 - 0.575*t20627*t27522 - 0.295*(-1.*t21803*t27479 + t20511*t27522) - 0.0641*(t20511*t27479 + t21803*t27522))*var2[4] + t27160*var2[5] + t23930*var2[15] + t32145*var2[16] + t32660*var2[17];
  p_output1[1]=t27160*var2[4] + (t27189 + t27191 - 0.2255*t10730*t3400*t3449 - 0.575*t21803*t35277 - 0.575*t20627*t35294 - 0.295*(-1.*t21803*t35277 + t20511*t35294) - 0.0641*(t20511*t35277 + t21803*t35294) - 0.325*t10730*t17727*t3449*t3949)*var2[5] + t33951*var2[15] + t35228*var2[16] + t34418*var2[17];
  p_output1[2]=t23930*var2[4] + t33951*var2[5] + (t27190 + t27204 - 0.575*t17727*t20627*t27259 - 0.575*t21174*t21803*t27259 - 0.0641*(t20511*t21174*t27259 + t17727*t21803*t27259) - 0.295*(t17727*t20511*t27259 - 1.*t21174*t21803*t27259) + t27268 + 0.1575*t10730*t3400*t3449)*var2[15] + t36956*var2[16] + t36792*var2[17];
  p_output1[3]=t32145*var2[4] + t35228*var2[5] + t36956*var2[15] + (-0.325*t21174*t24050*t3449 - 0.325*t17727*t38294 - 0.575*t20627*t38496 - 0.575*t21803*t43039 - 0.0641*(t21803*t38496 + t20511*t43039) - 0.295*(-1.*t21803*t43039 + t43072))*var2[16] + t42811*var2[17];
  p_output1[4]=t32660*var2[4] + t34418*var2[5] + t36792*var2[15] + t42811*var2[16] + (0.575*t21803*t38437 - 0.575*t20511*t43163 - 0.295*(-1.*t20511*t43163 + t43196) - 0.0641*t43375)*var2[17];
  p_output1[5]=1.;
  p_output1[6]=0.325*t17727*t22326 - 0.575*t21803*t29651 - 0.575*t20627*t32365 - 0.0641*(t31423 + t21803*t32365) - 0.295*t32552 + 0.1575*t3449*t3949 - 0.1575*t10730*t23983*t5602 + 0.325*t24050*t24645*t5602 - 0.2255*(t3449*t3949 + t10730*t3400*t5602);
  p_output1[7]=-0.575*t20627*t34058 - 0.575*t21803*t34165 - 0.295*t34415 + 0.1575*t23983*t24050*t3449 + 0.325*t10730*t24645*t3449 + 0.2255*t24050*t3400*t3449 - 0.0641*(t21803*t34058 + t34650) + 0.325*t17727*t24050*t3449*t3949;
  p_output1[8]=0.325*t17727*t27198 - 0.575*t17727*t20627*t27198 - 0.575*t21174*t21803*t27198 - 0.295*t35691 - 0.0641*t36943 - 0.2255*t38294 + 0.1575*t10730*t3449*t3949 + 0.1575*t3400*t5602;
  p_output1[9]=-0.325*t17727*t24050*t3449 + 0.325*t21174*t38294 - 0.575*t20627*t38437 - 0.575*t21803*t38496 - 0.295*t42375 - 0.0641*(t43072 + t43196);
  p_output1[10]=-0.575*t20511*t38437 - 0.575*t21803*t43163 - 0.0641*(t38859 + t20511*t43163) - 0.295*t43375;
  p_output1[11]=(t44927 + t44937 + t45036 - 0.2255*(t3400*t44982 + t45039) + 0.325*t17727*t45103 - 0.575*t21803*t45111 - 0.575*t20627*t45237 - 0.295*(-1.*t21803*t45111 + t20511*t45237) - 0.0641*(t20511*t45111 + t21803*t45237))*var2[3] + t44476*var2[4] + t44652*var2[5] + t44564*var2[15] + t44882*var2[16] + t44925*var2[17];
  p_output1[12]=t44476*var2[3] + (t44927 + 0.325*t17727*t46294 - 0.575*t21803*t46301 - 0.575*t20627*t46398 - 0.295*(-1.*t21803*t46301 + t20511*t46398) - 0.0641*(t20511*t46301 + t21803*t46398) - 0.1575*t10730*t23983*t44511*t5602 + 0.325*t24050*t24645*t44511*t5602 - 0.2255*(t45039 + t10730*t3400*t44511*t5602))*var2[4] + t46098*var2[5] + t45790*var2[15] + t46269*var2[16] + t46284*var2[17];
  p_output1[13]=t44652*var2[3] + t46098*var2[4] + (t44937 - 0.2255*t3400*t44982 - 0.325*t17727*t3949*t44982 + t45036 - 0.575*t21803*t46726 - 0.575*t20627*t46730 - 0.295*(-1.*t21803*t46726 + t20511*t46730) - 0.0641*(t20511*t46726 + t21803*t46730))*var2[5] + t46661*var2[15] + t46721*var2[16] + t46699*var2[17];
  p_output1[14]=t44564*var2[3] + t45790*var2[4] + t46661*var2[5] + (t44927 - 0.1575*t3400*t46679 - 0.2255*t46975 + 0.325*t17727*t47100 - 0.575*t17727*t20627*t47100 - 0.575*t21174*t21803*t47100 - 0.0641*(t20511*t21174*t47100 + t17727*t21803*t47100) - 0.295*(t17727*t20511*t47100 - 1.*t21174*t21803*t47100))*var2[15] + t47088*var2[16] + t47065*var2[17];
  p_output1[15]=t44882*var2[3] + t46269*var2[4] + t46721*var2[5] + t47088*var2[15] + (-0.325*t21174*t47149 - 0.325*t17727*t47154 - 0.575*t20627*t47172 - 0.575*t21803*t47348 - 0.0641*(t21803*t47172 + t20511*t47348) - 0.295*(-1.*t21803*t47348 + t47371))*var2[16] + t47213*var2[17];
  p_output1[16]=t44925*var2[3] + t46284*var2[4] + t46699*var2[5] + t47065*var2[15] + t47213*var2[16] + (0.575*t21803*t47163 - 0.575*t20511*t47406 - 0.295*(-1.*t20511*t47406 + t47409) - 0.0641*t47418)*var2[17];
  p_output1[17]=1.;
  p_output1[18]=t47450;
  p_output1[19]=t47480;
  p_output1[20]=t47498;
  p_output1[21]=t47527;
  p_output1[22]=t47555;
  p_output1[23]=t47570;
  p_output1[24]=t47450*var2[3] + t47480*var2[4] + t47498*var2[5] + t47527*var2[15] + t47555*var2[16] + t47570*var2[17];
  p_output1[25]=t47480*var2[3] + (t47427 + 0.325*t17727*t48063 - 0.575*t21803*t48067 - 0.575*t20627*t48074 - 0.295*(-1.*t21803*t48067 + t20511*t48074) - 0.0641*(t20511*t48067 + t21803*t48074) + 0.1575*t10730*t23983*t44240*t5602 - 0.325*t24050*t24645*t44240*t5602 - 0.2255*(t47431 - 1.*t10730*t3400*t44240*t5602))*var2[4] + t47647*var2[5] + t47612*var2[15] + t47944*var2[16] + t47964*var2[17];
  p_output1[26]=t47498*var2[3] + t47647*var2[4] + (-0.2255*t3400*t44524 - 0.325*t17727*t3949*t44524 + t47428 + t47430 - 0.575*t21803*t48220 - 0.575*t20627*t48251 - 0.295*(-1.*t21803*t48220 + t20511*t48251) - 0.0641*(t20511*t48220 + t21803*t48251))*var2[5] + t48215*var2[15] + t48549*var2[16] + t48470*var2[17];
  p_output1[27]=t47527*var2[3] + t47612*var2[4] + t48215*var2[5] + (t47427 - 0.1575*t3400*t48300 - 0.2255*t48562 + 0.325*t17727*t48600 - 0.575*t17727*t20627*t48600 - 0.575*t21174*t21803*t48600 - 0.0641*(t20511*t21174*t48600 + t17727*t21803*t48600) - 0.295*(t17727*t20511*t48600 - 1.*t21174*t21803*t48600))*var2[15] + t48592*var2[16] + t48576*var2[17];
  p_output1[28]=t47555*var2[3] + t47944*var2[4] + t48549*var2[5] + t48592*var2[15] + (-0.325*t21174*t44570 - 0.325*t17727*t48626 - 0.575*t20627*t48763 - 0.575*t21803*t49966 - 0.0641*(t21803*t48763 + t20511*t49966) - 0.295*(-1.*t21803*t49966 + t49972))*var2[16] + t49436*var2[17];
  p_output1[29]=t47570*var2[3] + t47964*var2[4] + t48470*var2[5] + t48576*var2[15] + t49436*var2[16] + (0.575*t21803*t48628 - 0.575*t20511*t53511 - 0.295*(-1.*t20511*t53511 + t53557) - 0.0641*t53589)*var2[17];
  p_output1[30]=1.;
  p_output1[31]=-0.1575*t3449*t3949*t44511 - 0.1575*t23983*t46679 - 0.2255*(-1.*t3449*t3949*t44511 + t3400*t46679) - 0.325*t24645*t47149 + 0.325*t17727*t47154 + t47169 - 0.575*t20627*t47406 - 0.0641*(t47202 + t21803*t47406) - 0.295*t47567;
  p_output1[32]=-0.1575*t10730*t23983*t3449*t44240 + 0.325*t24050*t24645*t3449*t44240 + 0.325*t17727*t47587 - 0.575*t21803*t47660 - 0.575*t20627*t47949 - 0.0641*(t47695 + t21803*t47949) - 0.295*t47955 - 0.1575*t3949*t44240*t5602 - 0.2255*(t10730*t3400*t3449*t44240 - 1.*t3949*t44240*t5602);
  p_output1[33]=-0.1575*t23983*t44677 - 0.2255*t3400*t44677 - 0.325*t17727*t3949*t44677 - 0.325*t24645*t48300 - 0.575*t20627*t48302 - 0.575*t21803*t48307 - 0.295*t48371 - 0.0641*(t21803*t48302 + t48536);
  p_output1[34]=0.1575*t3400*t3449*t44240 - 0.1575*t3949*t48300 + 0.325*t17727*t48562 - 0.575*t17727*t20627*t48562 - 0.575*t21174*t21803*t48562 - 0.295*t48568 - 0.0641*t48590 - 0.2255*t48626;
  p_output1[35]=-0.325*t17727*t44570 + 0.325*t21174*t48626 - 0.575*t20627*t48628 - 0.575*t21803*t48763 - 0.295*t49324 - 0.0641*(t49972 + t53557);
  p_output1[36]=-0.575*t20511*t48628 - 0.575*t21803*t53511 - 0.0641*(t49059 + t20511*t53511) - 0.295*t53589;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 37, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_impact_velocity_RrFoot_DiagonalStance.hh"

namespace DiagonalStance
{

void J_impact_velocity_RrFoot_DiagonalStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
