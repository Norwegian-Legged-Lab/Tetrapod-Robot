/*
 * Automatically Generated from Mathematica.
 * Tue 7 Jun 2022 14:07:00 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t454;
  double t1294;
  double t428;
  double t1389;
  double t1572;
  double t2369;
  double t2924;
  double t3391;
  double t3432;
  double t3473;
  double t3520;
  double t3527;
  double t4666;
  double t3477;
  double t3497;
  double t5134;
  double t5135;
  double t5179;
  double t5188;
  double t5190;
  double t5196;
  double t5067;
  double t5109;
  double t4660;
  double t4665;
  double t6618;
  double t6635;
  double t6673;
  double t6687;
  double t6691;
  double t6701;
  double t6717;
  double t6721;
  double t6731;
  double t4014;
  double t4015;
  double t4100;
  double t6926;
  double t6951;
  double t6958;
  double t6964;
  double t6968;
  double t6969;
  double t7403;
  double t7404;
  double t7412;
  double t7701;
  double t7928;
  double t7954;
  double t7985;
  double t7996;
  double t8022;
  double t8594;
  double t8595;
  double t8613;
  double t6217;
  double t6232;
  double t8761;
  double t8762;
  double t8883;
  double t8996;
  double t4923;
  double t4974;
  double t4991;
  double t5115;
  double t5187;
  double t5344;
  double t5381;
  double t5650;
  double t5898;
  double t5910;
  double t5924;
  double t5926;
  double t5928;
  double t5958;
  double t5959;
  double t7568;
  double t7570;
  double t7574;
  double t7577;
  double t7582;
  double t7601;
  double t7605;
  double t7609;
  double t7611;
  double t7626;
  double t7646;
  double t7658;
  double t7659;
  double t6479;
  double t6519;
  double t6547;
  double t6222;
  double t6568;
  double t6685;
  double t906;
  double t1642;
  double t3469;
  double t3513;
  double t3941;
  double t4216;
  double t4370;
  double t4390;
  double t4452;
  double t4574;
  double t4621;
  double t4631;
  double t4632;
  double t4633;
  double t4638;
  double t9905;
  double t9908;
  double t9915;
  double t9922;
  double t9923;
  double t9935;
  double t9945;
  double t9959;
  double t9964;
  double t10045;
  double t10099;
  double t10121;
  double t8563;
  double t8590;
  double t8619;
  double t8633;
  double t8644;
  double t8646;
  double t8662;
  double t8681;
  double t8728;
  double t8735;
  double t8742;
  double t8743;
  double t8747;
  double t10526;
  double t10527;
  double t10528;
  double t10525;
  double t10530;
  double t10531;
  double t10573;
  double t10574;
  double t10655;
  double t10668;
  double t6912;
  double t6924;
  double t6963;
  double t7041;
  double t7226;
  double t7268;
  double t7270;
  double t7309;
  double t7331;
  double t7356;
  double t7364;
  double t7394;
  double t7395;
  double t9321;
  double t9362;
  double t9440;
  double t9629;
  double t9750;
  double t9763;
  double t9808;
  double t9820;
  double t9826;
  double t9840;
  double t9842;
  double t7978;
  double t8033;
  double t8038;
  double t8040;
  double t8045;
  double t8047;
  double t8055;
  double t8134;
  double t8168;
  double t8185;
  double t8512;
  double t10536;
  double t10578;
  double t10582;
  double t10587;
  double t10589;
  double t10593;
  double t10606;
  double t10619;
  double t10620;
  double t10627;
  double t10638;
  double t10691;
  double t10692;
  double t10693;
  double t7399;
  double t7414;
  double t7419;
  double t7424;
  double t7425;
  double t7502;
  double t7505;
  double t7509;
  double t7514;
  double t7531;
  double t7564;
  double t10697;
  double t10672;
  double t10709;
  double t10710;
  double t10720;
  double t11062;
  double t11132;
  double t11158;
  double t11165;
  double t11168;
  double t11174;
  double t11181;
  double t11191;
  double t11194;
  double t11195;
  double t11245;
  double t11249;
  double t11253;
  double t11255;
  double t11258;
  double t11259;
  double t11261;
  double t11425;
  double t11426;
  double t11429;
  double t11487;
  double t11492;
  double t11493;
  double t11506;
  double t11507;
  double t11518;
  double t11327;
  double t11341;
  double t11343;
  double t11649;
  double t11662;
  double t11680;
  double t11750;
  double t11753;
  double t11757;
  double t11766;
  double t11771;
  double t11773;
  double t11804;
  double t11808;
  double t11820;
  double t12123;
  double t12141;
  double t12231;
  double t12009;
  double t12076;
  double t12104;
  double t12393;
  double t12395;
  double t12401;
  double t12403;
  double t12406;
  double t12407;
  double t12417;
  double t12423;
  double t12428;
  double t12535;
  double t12537;
  double t12538;
  double t12867;
  double t12869;
  double t12880;
  double t12900;
  double t12903;
  double t13005;
  double t11064;
  double t11066;
  double t11070;
  double t11094;
  double t11098;
  double t11106;
  double t11122;
  double t11167;
  double t11183;
  double t11199;
  double t11204;
  double t11209;
  double t11215;
  double t11216;
  double t11217;
  double t11226;
  double t11230;
  double t11234;
  double t11237;
  double t12547;
  double t12549;
  double t12556;
  double t13286;
  double t13287;
  double t13289;
  double t13292;
  double t13293;
  double t13297;
  double t13341;
  double t13348;
  double t13359;
  double t11961;
  double t12384;
  double t13392;
  double t13397;
  double t13408;
  double t13411;
  double t13412;
  double t13419;
  double t13422;
  double t13423;
  double t12581;
  double t12593;
  double t12632;
  double t12758;
  double t12882;
  double t13016;
  double t13110;
  double t13245;
  double t13246;
  double t13269;
  double t13271;
  double t13273;
  double t13274;
  double t13275;
  double t13277;
  double t11460;
  double t11470;
  double t11481;
  double t11485;
  double t11494;
  double t11524;
  double t11540;
  double t11541;
  double t11542;
  double t11547;
  double t11549;
  double t11571;
  double t11586;
  double t11591;
  double t11595;
  double t13678;
  double t13679;
  double t13976;
  double t13677;
  double t13991;
  double t14181;
  double t14183;
  double t14241;
  double t14261;
  double t14311;
  double t14319;
  double t14321;
  double t12109;
  double t12235;
  double t14441;
  double t14443;
  double t14448;
  double t14451;
  double t13584;
  double t13585;
  double t13590;
  double t13593;
  double t13598;
  double t13599;
  double t13600;
  double t13601;
  double t13602;
  double t13605;
  double t13606;
  double t13607;
  double t13608;
  double t12501;
  double t12518;
  double t12539;
  double t12544;
  double t12545;
  double t12557;
  double t12559;
  double t12560;
  double t12563;
  double t12564;
  double t12565;
  double t12567;
  double t12568;
  double t12572;
  double t12575;
  double t11239;
  double t11256;
  double t11266;
  double t11268;
  double t11285;
  double t11345;
  double t11354;
  double t11356;
  double t11370;
  double t11372;
  double t11377;
  double t11389;
  double t11391;
  double t11398;
  double t11399;
  double t14509;
  double t14511;
  double t14652;
  double t14653;
  double t13284;
  double t13285;
  double t13290;
  double t13299;
  double t13308;
  double t13310;
  double t13321;
  double t13322;
  double t13324;
  double t13325;
  double t13326;
  double t13334;
  double t13335;
  double t14622;
  double t14623;
  double t14624;
  double t14625;
  double t14626;
  double t14627;
  double t14628;
  double t14629;
  double t14633;
  double t14635;
  double t14641;
  double t14643;
  double t14301;
  double t14308;
  double t14328;
  double t14331;
  double t14332;
  double t14333;
  double t14343;
  double t14345;
  double t14392;
  double t14401;
  double t14403;
  double t14404;
  double t14405;
  double t11726;
  double t11747;
  double t11765;
  double t11775;
  double t11788;
  double t11789;
  double t11790;
  double t11792;
  double t11794;
  double t11795;
  double t11796;
  double t11798;
  double t11799;
  double t14690;
  double t14691;
  double t14694;
  double t14696;
  double t14697;
  double t14698;
  double t14695;
  double t14699;
  double t14703;
  double t14708;
  double t14710;
  double t14711;
  double t14736;
  double t14737;
  double t14738;
  double t13340;
  double t13360;
  double t13362;
  double t13369;
  double t13370;
  double t13371;
  double t13373;
  double t13375;
  double t13376;
  double t13380;
  double t13381;
  double t14512;
  double t14513;
  double t14514;
  double t14515;
  double t14597;
  double t14598;
  double t14603;
  double t14608;
  double t14613;
  double t14615;
  double t14619;
  double t14182;
  double t14267;
  double t14275;
  double t14290;
  double t14292;
  double t14294;
  double t14295;
  double t14296;
  double t14297;
  double t14298;
  double t14299;
  double t11801;
  double t11821;
  double t11826;
  double t11835;
  double t11837;
  double t11838;
  double t11859;
  double t11860;
  double t11877;
  double t11890;
  double t11947;
  double t14707;
  double t14712;
  double t14713;
  double t14715;
  double t14717;
  double t14720;
  double t14725;
  double t14729;
  double t14730;
  double t14731;
  double t14732;
  double t14773;
  double t14775;
  double t14778;
  double t14780;
  double t14743;
  double t14785;
  double t14786;
  double t14787;
  double t14839;
  double t14840;
  double t14842;
  double t14843;
  double t14844;
  double t14845;
  double t14846;
  double t14850;
  double t14854;
  double t14864;
  double t14865;
  double t14866;
  double t14867;
  double t14868;
  double t14869;
  double t14883;
  double t14884;
  double t14888;
  double t14889;
  double t14891;
  double t14895;
  double t14899;
  double t14900;
  double t14901;
  double t14870;
  double t14871;
  double t14872;
  double t14873;
  double t14874;
  double t14875;
  double t14876;
  double t14877;
  double t14879;
  double t14881;
  double t14882;
  double t14794;
  double t14795;
  double t14796;
  double t14797;
  double t14798;
  double t14799;
  double t14803;
  double t14807;
  double t14811;
  double t14821;
  double t14825;
  double t14830;
  double t14833;
  double t14834;
  double t14835;
  double t14902;
  double t14903;
  double t14904;
  double t14905;
  double t14906;
  double t14907;
  double t14924;
  double t14957;
  double t14959;
  double t15013;
  double t15059;
  double t15100;
  double t15102;
  double t15103;
  double t15104;
  double t15147;
  double t15148;
  double t15152;
  double t15169;
  double t15171;
  double t15172;
  double t15117;
  double t15118;
  double t15119;
  double t15278;
  double t15279;
  double t15280;
  double t15287;
  double t15288;
  double t15316;
  double t15317;
  double t15318;
  double t15336;
  double t15337;
  double t15339;
  double t15340;
  double t15396;
  double t15463;
  double t15475;
  double t15477;
  double t15135;
  double t15136;
  double t15137;
  double t15142;
  double t15156;
  double t15173;
  double t15174;
  double t15175;
  double t15176;
  double t15177;
  double t15178;
  double t15184;
  double t15270;
  double t15271;
  double t15272;
  double t15566;
  double t15567;
  double t15569;
  double t15570;
  double t15599;
  double t15601;
  double t15603;
  double t15595;
  double t15608;
  double t15609;
  double t15612;
  double t15613;
  double t15614;
  double t15628;
  double t15629;
  double t15630;
  double t15112;
  double t15113;
  double t15114;
  double t15115;
  double t15116;
  double t15120;
  double t15121;
  double t15122;
  double t15123;
  double t15124;
  double t15125;
  double t15126;
  double t15127;
  double t15128;
  double t15129;
  double t15519;
  double t15523;
  double t15526;
  double t15528;
  double t15529;
  double t15536;
  double t15538;
  double t15539;
  double t15545;
  double t15547;
  double t15548;
  double t15549;
  double t15551;
  double t15859;
  double t15860;
  double t15949;
  double t15950;
  double t15274;
  double t15276;
  double t15283;
  double t15297;
  double t15298;
  double t15299;
  double t15300;
  double t15302;
  double t15308;
  double t15310;
  double t15311;
  double t15312;
  double t15313;
  double t15899;
  double t15902;
  double t15906;
  double t15910;
  double t15914;
  double t15915;
  double t15916;
  double t15917;
  double t15923;
  double t15930;
  double t15935;
  double t15939;
  double t15626;
  double t15627;
  double t15631;
  double t15632;
  double t15633;
  double t15634;
  double t15635;
  double t15636;
  double t15637;
  double t15638;
  double t15639;
  double t15712;
  double t15746;
  double t16012;
  double t16016;
  double t16017;
  double t16011;
  double t16018;
  double t16020;
  double t16025;
  double t16026;
  double t16030;
  double t16145;
  double t16152;
  double t16159;
  double t15315;
  double t15319;
  double t15320;
  double t15321;
  double t15322;
  double t15323;
  double t15324;
  double t15325;
  double t15326;
  double t15327;
  double t15328;
  double t15867;
  double t15872;
  double t15877;
  double t15884;
  double t15887;
  double t15888;
  double t15889;
  double t15890;
  double t15891;
  double t15895;
  double t15897;
  double t15610;
  double t15615;
  double t15616;
  double t15617;
  double t15618;
  double t15619;
  double t15620;
  double t15621;
  double t15622;
  double t15623;
  double t15624;
  double t16022;
  double t16031;
  double t16032;
  double t16033;
  double t16036;
  double t16037;
  double t16038;
  double t16039;
  double t16040;
  double t16041;
  double t16042;
  double t16206;
  double t16209;
  double t16211;
  double t16213;
  double t16173;
  double t16239;
  double t16240;
  double t16244;
  t454 = Cos(var1[4]);
  t1294 = Sin(var1[15]);
  t428 = Cos(var1[15]);
  t1389 = Sin(var1[4]);
  t1572 = Sin(var1[5]);
  t2369 = Sin(var1[16]);
  t2924 = -1.*t454*t1294;
  t3391 = -1.*t428*t1389*t1572;
  t3432 = t2924 + t3391;
  t3473 = Cos(var1[17]);
  t3520 = Cos(var1[16]);
  t3527 = Sin(var1[17]);
  t4666 = Cos(var1[5]);
  t3477 = -1.*t3473;
  t3497 = 1. + t3477;
  t5134 = -1.*t4666*t1294*t2369*t1389;
  t5135 = t3520*t1389*t1572;
  t5179 = t5134 + t5135;
  t5188 = -1.*t3520*t4666*t1294*t1389;
  t5190 = -1.*t2369*t1389*t1572;
  t5196 = t5188 + t5190;
  t5067 = -1.*t3520;
  t5109 = 1. + t5067;
  t4660 = -1.*t428;
  t4665 = 1. + t4660;
  t6618 = -1.*t428*t1389;
  t6635 = -1.*t454*t1294*t1572;
  t6673 = t6618 + t6635;
  t6687 = t454*t4666*t2369;
  t6691 = t3520*t6673;
  t6701 = t6687 + t6691;
  t6717 = -1.*t3520*t454*t4666;
  t6721 = t2369*t6673;
  t6731 = t6717 + t6721;
  t4014 = t428*t454;
  t4015 = -1.*t1294*t1389*t1572;
  t4100 = t4014 + t4015;
  t6926 = t4666*t2369*t1389;
  t6951 = t3520*t4100;
  t6958 = t6926 + t6951;
  t6964 = t3520*t4666*t1389;
  t6968 = -1.*t2369*t4100;
  t6969 = t6964 + t6968;
  t7403 = -1.*t3520*t4666*t1389;
  t7404 = t2369*t4100;
  t7412 = t7403 + t7404;
  t7701 = t454*t4666*t1294*t2369;
  t7928 = -1.*t3520*t454*t1572;
  t7954 = t7701 + t7928;
  t7985 = t3520*t454*t4666*t1294;
  t7996 = t454*t2369*t1572;
  t8022 = t7985 + t7996;
  t8594 = -1.*t454*t4666*t1294*t2369;
  t8595 = t3520*t454*t1572;
  t8613 = t8594 + t8595;
  t6217 = 0.325*t5109*t454*t4666;
  t6232 = -0.1575*t4665*t454*t1572;
  t8761 = -1.*t3520*t454*t1294*t1572;
  t8762 = t6687 + t8761;
  t8883 = -1.*t454*t1294*t2369*t1572;
  t8996 = t6717 + t8883;
  t4923 = -0.1575*t4665*t4666*t1389;
  t4974 = -0.2255*t428*t4666*t1389;
  t4991 = -0.325*t4666*t1294*t2369*t1389;
  t5115 = -0.325*t5109*t1389*t1572;
  t5187 = -0.575*t3497*t5179;
  t5344 = -0.575*t3527*t5196;
  t5381 = t3527*t5179;
  t5650 = t3473*t5196;
  t5898 = t5381 + t5650;
  t5910 = -0.0641*t5898;
  t5924 = t3473*t5179;
  t5926 = -1.*t3527*t5196;
  t5928 = t5924 + t5926;
  t5958 = -0.295*t5928;
  t5959 = t4923 + t4974 + t4991 + t5115 + t5187 + t5344 + t5910 + t5958;
  t7568 = -0.068*t454*t4666*t1294;
  t7570 = 0.325*t428*t454*t4666*t2369;
  t7574 = -0.575*t428*t3497*t454*t4666*t2369;
  t7577 = -0.575*t428*t3520*t454*t4666*t3527;
  t7582 = t428*t3473*t454*t4666*t2369;
  t7601 = -1.*t428*t3520*t454*t4666*t3527;
  t7605 = t7582 + t7601;
  t7609 = -0.295*t7605;
  t7611 = t428*t3520*t3473*t454*t4666;
  t7626 = t428*t454*t4666*t2369*t3527;
  t7646 = t7611 + t7626;
  t7658 = -0.0641*t7646;
  t7659 = t7568 + t7570 + t7574 + t7577 + t7609 + t7658;
  t6479 = -1.*t1294*t1389;
  t6519 = t428*t454*t1572;
  t6547 = t6479 + t6519;
  t6222 = -0.1575*t1294*t1389;
  t6568 = -0.2255*t6547;
  t6685 = 0.325*t2369*t6673;
  t906 = 0.1575*t428*t454;
  t1642 = -0.1575*t1294*t1389*t1572;
  t3469 = 0.325*t2369*t3432;
  t3513 = -0.575*t3497*t2369*t3432;
  t3941 = -0.575*t3520*t3527*t3432;
  t4216 = -0.2255*t4100;
  t4370 = t3473*t2369*t3432;
  t4390 = -1.*t3520*t3527*t3432;
  t4452 = t4370 + t4390;
  t4574 = -0.295*t4452;
  t4621 = t3520*t3473*t3432;
  t4631 = t2369*t3527*t3432;
  t4632 = t4621 + t4631;
  t4633 = -0.0641*t4632;
  t4638 = t906 + t1642 + t3469 + t3513 + t3941 + t4216 + t4574 + t4633;
  t9905 = 0.325*t3520*t6547;
  t9908 = -0.575*t3520*t3497*t6547;
  t9915 = 0.575*t2369*t3527*t6547;
  t9922 = -1.*t3473*t2369*t6547;
  t9923 = t3520*t3527*t6547;
  t9935 = t9922 + t9923;
  t9945 = -0.0641*t9935;
  t9959 = t3520*t3473*t6547;
  t9964 = t2369*t3527*t6547;
  t10045 = t9959 + t9964;
  t10099 = -0.295*t10045;
  t10121 = t9905 + t9908 + t9915 + t9945 + t10099;
  t8563 = 0.325*t3520*t454*t4666*t1294;
  t8590 = 0.325*t454*t2369*t1572;
  t8619 = -0.575*t3527*t8613;
  t8633 = -0.575*t3497*t8022;
  t8644 = -1.*t3527*t8613;
  t8646 = t3473*t8022;
  t8662 = t8644 + t8646;
  t8681 = -0.295*t8662;
  t8728 = t3473*t8613;
  t8735 = t3527*t8022;
  t8742 = t8728 + t8735;
  t8743 = -0.0641*t8742;
  t8747 = t8563 + t8590 + t8619 + t8633 + t8681 + t8743;
  t10526 = t428*t1389;
  t10527 = t454*t1294*t1572;
  t10528 = t10526 + t10527;
  t10525 = -1.*t454*t4666*t2369;
  t10530 = t3520*t10528;
  t10531 = t10525 + t10530;
  t10573 = -1.*t2369*t10528;
  t10574 = t6717 + t10573;
  t10655 = -1.*t3520*t10528;
  t10668 = t6687 + t10655;
  t6912 = 0.325*t4666*t2369*t1389;
  t6924 = 0.325*t3520*t4100;
  t6963 = -0.575*t3497*t6958;
  t7041 = -0.575*t3527*t6969;
  t7226 = t3527*t6958;
  t7268 = t3473*t6969;
  t7270 = t7226 + t7268;
  t7309 = -0.0641*t7270;
  t7331 = t3473*t6958;
  t7356 = -1.*t3527*t6969;
  t7364 = t7331 + t7356;
  t7394 = -0.295*t7364;
  t7395 = t6912 + t6924 + t6963 + t7041 + t7309 + t7394;
  t9321 = -0.575*t3520*t3473*t6547;
  t9362 = -0.575*t2369*t3527*t6547;
  t9440 = t3473*t2369*t6547;
  t9629 = -1.*t3520*t3527*t6547;
  t9750 = t9440 + t9629;
  t9763 = -0.0641*t9750;
  t9808 = -1.*t3520*t3473*t6547;
  t9820 = -1.*t2369*t3527*t6547;
  t9826 = t9808 + t9820;
  t9840 = -0.295*t9826;
  t9842 = t9321 + t9362 + t9763 + t9840;
  t7978 = -0.575*t3527*t7954;
  t8033 = -0.575*t3473*t8022;
  t8038 = -1.*t3527*t7954;
  t8040 = -1.*t3473*t8022;
  t8045 = t8038 + t8040;
  t8047 = -0.295*t8045;
  t8055 = t3473*t7954;
  t8134 = -1.*t3527*t8022;
  t8168 = t8055 + t8134;
  t8185 = -0.0641*t8168;
  t8512 = t7978 + t8033 + t8047 + t8185;
  t10536 = -0.575*t3527*t10531;
  t10578 = -0.575*t3473*t10574;
  t10582 = -1.*t3527*t10531;
  t10587 = -1.*t3473*t10574;
  t10589 = t10582 + t10587;
  t10593 = -0.295*t10589;
  t10606 = t3473*t10531;
  t10619 = -1.*t3527*t10574;
  t10620 = t10606 + t10619;
  t10627 = -0.0641*t10620;
  t10638 = t10536 + t10578 + t10593 + t10627;
  t10691 = t3520*t454*t4666;
  t10692 = t2369*t10528;
  t10693 = t10691 + t10692;
  t7399 = -0.575*t3473*t6958;
  t7414 = -0.575*t3527*t7412;
  t7419 = -1.*t3527*t6958;
  t7424 = t3473*t7412;
  t7425 = t7419 + t7424;
  t7502 = -0.0641*t7425;
  t7505 = -1.*t3473*t6958;
  t7509 = -1.*t3527*t7412;
  t7514 = t7505 + t7509;
  t7531 = -0.295*t7514;
  t7564 = t7399 + t7414 + t7502 + t7531;
  t10697 = t3527*t10531;
  t10672 = t3473*t10574;
  t10709 = -1.*t3473*t10531;
  t10710 = -1.*t3527*t10693;
  t10720 = t10709 + t10710;
  t11062 = Cos(var1[3]);
  t11132 = t428*t11062*t1389;
  t11158 = t11062*t454*t1294*t1572;
  t11165 = t11132 + t11158;
  t11168 = -1.*t11062*t454*t4666*t2369;
  t11174 = t3520*t11165;
  t11181 = t11168 + t11174;
  t11191 = t3520*t11062*t454*t4666;
  t11194 = t2369*t11165;
  t11195 = t11191 + t11194;
  t11245 = Sin(var1[3]);
  t11249 = -1.*t4666*t11245;
  t11253 = -1.*t11062*t1389*t1572;
  t11255 = t11249 + t11253;
  t11258 = t11062*t454*t1294;
  t11259 = -1.*t428*t11255;
  t11261 = t11258 + t11259;
  t11425 = -1.*t11062*t4666*t1389;
  t11426 = t11245*t1572;
  t11429 = t11425 + t11426;
  t11487 = -1.*t1294*t2369*t11429;
  t11492 = t3520*t11255;
  t11493 = t11487 + t11492;
  t11506 = -1.*t3520*t1294*t11429;
  t11507 = -1.*t2369*t11255;
  t11518 = t11506 + t11507;
  t11327 = -1.*t428*t11062*t454;
  t11341 = -1.*t1294*t11255;
  t11343 = t11327 + t11341;
  t11649 = t11062*t4666*t1389;
  t11662 = -1.*t11245*t1572;
  t11680 = t11649 + t11662;
  t11750 = -1.*t2369*t11680;
  t11753 = t3520*t11343;
  t11757 = t11750 + t11753;
  t11766 = -1.*t3520*t11680;
  t11771 = -1.*t2369*t11343;
  t11773 = t11766 + t11771;
  t11804 = t3520*t11680;
  t11808 = t2369*t11343;
  t11820 = t11804 + t11808;
  t12123 = -1.*t11062*t4666;
  t12141 = t11245*t1389*t1572;
  t12231 = t12123 + t12141;
  t12009 = -1.*t4666*t11245*t1389;
  t12076 = -1.*t11062*t1572;
  t12104 = t12009 + t12076;
  t12393 = t428*t454*t11245;
  t12395 = -1.*t1294*t12231;
  t12401 = t12393 + t12395;
  t12403 = -1.*t2369*t12104;
  t12406 = t3520*t12401;
  t12407 = t12403 + t12406;
  t12417 = t3520*t12104;
  t12423 = t2369*t12401;
  t12428 = t12417 + t12423;
  t12535 = -1.*t1294*t11245*t1389;
  t12537 = t428*t454*t11245*t1572;
  t12538 = t12535 + t12537;
  t12867 = t454*t4666*t1294*t2369*t11245;
  t12869 = -1.*t3520*t454*t11245*t1572;
  t12880 = t12867 + t12869;
  t12900 = t3520*t454*t4666*t1294*t11245;
  t12903 = t454*t2369*t11245*t1572;
  t13005 = t12900 + t12903;
  t11064 = -0.325*t5109*t11062*t454*t4666;
  t11066 = 0.1575*t11062*t1294*t1389;
  t11070 = 0.1575*t4665*t11062*t454*t1572;
  t11094 = t11062*t1294*t1389;
  t11098 = -1.*t428*t11062*t454*t1572;
  t11106 = t11094 + t11098;
  t11122 = -0.2255*t11106;
  t11167 = 0.325*t2369*t11165;
  t11183 = -0.575*t3527*t11181;
  t11199 = -0.575*t3497*t11195;
  t11204 = -1.*t3527*t11181;
  t11209 = t3473*t11195;
  t11215 = t11204 + t11209;
  t11216 = -0.295*t11215;
  t11217 = t3473*t11181;
  t11226 = t3527*t11195;
  t11230 = t11217 + t11226;
  t11234 = -0.0641*t11230;
  t11237 = t11064 + t11066 + t11070 + t11122 + t11167 + t11183 + t11199 + t11216 + t11234;
  t12547 = t428*t11245*t1389;
  t12549 = t454*t1294*t11245*t1572;
  t12556 = t12547 + t12549;
  t13286 = -1.*t454*t4666*t2369*t11245;
  t13287 = t3520*t12556;
  t13289 = t13286 + t13287;
  t13292 = -1.*t3520*t454*t4666*t11245;
  t13293 = -1.*t2369*t12556;
  t13297 = t13292 + t13293;
  t13341 = t3520*t454*t4666*t11245;
  t13348 = t2369*t12556;
  t13359 = t13341 + t13348;
  t11961 = 0.1575*t454*t1294*t11245;
  t12384 = t454*t1294*t11245;
  t13392 = -1.*t1294*t11245*t1389*t1572;
  t13397 = t12393 + t13392;
  t13408 = t4666*t2369*t11245*t1389;
  t13411 = t3520*t13397;
  t13412 = t13408 + t13411;
  t13419 = -1.*t3520*t4666*t11245*t1389;
  t13422 = t2369*t13397;
  t13423 = t13419 + t13422;
  t12581 = 0.1575*t4665*t454*t4666*t11245;
  t12593 = 0.2255*t428*t454*t4666*t11245;
  t12632 = 0.325*t454*t4666*t1294*t2369*t11245;
  t12758 = 0.325*t5109*t454*t11245*t1572;
  t12882 = -0.575*t3497*t12880;
  t13016 = -0.575*t3527*t13005;
  t13110 = t3527*t12880;
  t13245 = t3473*t13005;
  t13246 = t13110 + t13245;
  t13269 = -0.0641*t13246;
  t13271 = t3473*t12880;
  t13273 = -1.*t3527*t13005;
  t13274 = t13271 + t13273;
  t13275 = -0.295*t13274;
  t13277 = t12581 + t12593 + t12632 + t12758 + t12882 + t13016 + t13269 + t13275;
  t11460 = -0.1575*t4665*t11429;
  t11470 = -0.2255*t428*t11429;
  t11481 = -0.325*t1294*t2369*t11429;
  t11485 = -0.325*t5109*t11255;
  t11494 = -0.575*t3497*t11493;
  t11524 = -0.575*t3527*t11518;
  t11540 = t3527*t11493;
  t11541 = t3473*t11518;
  t11542 = t11540 + t11541;
  t11547 = -0.0641*t11542;
  t11549 = t3473*t11493;
  t11571 = -1.*t3527*t11518;
  t11586 = t11549 + t11571;
  t11591 = -0.295*t11586;
  t11595 = t11460 + t11470 + t11481 + t11485 + t11494 + t11524 + t11547 + t11591;
  t13678 = t11062*t4666;
  t13679 = -1.*t11245*t1389*t1572;
  t13976 = t13678 + t13679;
  t13677 = -1.*t1294*t2369*t12104;
  t13991 = t3520*t13976;
  t14181 = t13677 + t13991;
  t14183 = -1.*t3520*t1294*t12104;
  t14241 = -1.*t2369*t13976;
  t14261 = t14183 + t14241;
  t14311 = t1294*t2369*t12104;
  t14319 = -1.*t3520*t13976;
  t14321 = t14311 + t14319;
  t12109 = -0.325*t5109*t12104;
  t12235 = -0.1575*t4665*t12231;
  t14441 = -1.*t3520*t1294*t12231;
  t14443 = t12403 + t14441;
  t14448 = -1.*t1294*t2369*t12231;
  t14451 = t12417 + t14448;
  t13584 = 0.068*t1294*t12104;
  t13585 = -0.325*t428*t2369*t12104;
  t13590 = 0.575*t428*t3497*t2369*t12104;
  t13593 = 0.575*t428*t3520*t3527*t12104;
  t13598 = -1.*t428*t3473*t2369*t12104;
  t13599 = t428*t3520*t3527*t12104;
  t13600 = t13598 + t13599;
  t13601 = -0.295*t13600;
  t13602 = -1.*t428*t3520*t3473*t12104;
  t13605 = -1.*t428*t2369*t3527*t12104;
  t13606 = t13602 + t13605;
  t13607 = -0.0641*t13606;
  t13608 = t13584 + t13585 + t13590 + t13593 + t13601 + t13607;
  t12501 = 0.1575*t428*t11245*t1389;
  t12518 = 0.1575*t454*t1294*t11245*t1572;
  t12539 = 0.325*t2369*t12538;
  t12544 = -0.575*t3497*t2369*t12538;
  t12545 = -0.575*t3520*t3527*t12538;
  t12557 = -0.2255*t12556;
  t12559 = t3473*t2369*t12538;
  t12560 = -1.*t3520*t3527*t12538;
  t12563 = t12559 + t12560;
  t12564 = -0.295*t12563;
  t12565 = t3520*t3473*t12538;
  t12567 = t2369*t3527*t12538;
  t12568 = t12565 + t12567;
  t12572 = -0.0641*t12568;
  t12575 = t12501 + t12518 + t12539 + t12544 + t12545 + t12557 + t12564 + t12572;
  t11239 = -0.1575*t428*t11062*t454;
  t11256 = -0.1575*t1294*t11255;
  t11266 = 0.325*t2369*t11261;
  t11268 = -0.575*t3497*t2369*t11261;
  t11285 = -0.575*t3520*t3527*t11261;
  t11345 = -0.2255*t11343;
  t11354 = t3473*t2369*t11261;
  t11356 = -1.*t3520*t3527*t11261;
  t11370 = t11354 + t11356;
  t11372 = -0.295*t11370;
  t11377 = t3520*t3473*t11261;
  t11389 = t2369*t3527*t11261;
  t11391 = t11377 + t11389;
  t11398 = -0.0641*t11391;
  t11399 = t11239 + t11256 + t11266 + t11268 + t11285 + t11345 + t11372 + t11398;
  t14509 = -1.*t428*t13976;
  t14511 = t12384 + t14509;
  t14652 = t1294*t13976;
  t14653 = t12393 + t14652;
  t13284 = -0.325*t454*t4666*t2369*t11245;
  t13285 = 0.325*t3520*t12556;
  t13290 = -0.575*t3497*t13289;
  t13299 = -0.575*t3527*t13297;
  t13308 = t3527*t13289;
  t13310 = t3473*t13297;
  t13321 = t13308 + t13310;
  t13322 = -0.0641*t13321;
  t13324 = t3473*t13289;
  t13325 = -1.*t3527*t13297;
  t13326 = t13324 + t13325;
  t13334 = -0.295*t13326;
  t13335 = t13284 + t13285 + t13290 + t13299 + t13322 + t13334;
  t14622 = 0.325*t3520*t14511;
  t14623 = -0.575*t3520*t3497*t14511;
  t14624 = 0.575*t2369*t3527*t14511;
  t14625 = -1.*t3473*t2369*t14511;
  t14626 = t3520*t3527*t14511;
  t14627 = t14625 + t14626;
  t14628 = -0.0641*t14627;
  t14629 = t3520*t3473*t14511;
  t14633 = t2369*t3527*t14511;
  t14635 = t14629 + t14633;
  t14641 = -0.295*t14635;
  t14643 = t14622 + t14623 + t14624 + t14628 + t14641;
  t14301 = -0.325*t3520*t1294*t12104;
  t14308 = -0.325*t2369*t13976;
  t14328 = -0.575*t3527*t14321;
  t14331 = -0.575*t3497*t14261;
  t14332 = -1.*t3527*t14321;
  t14333 = t3473*t14261;
  t14343 = t14332 + t14333;
  t14345 = -0.295*t14343;
  t14392 = t3473*t14321;
  t14401 = t3527*t14261;
  t14403 = t14392 + t14401;
  t14404 = -0.0641*t14403;
  t14405 = t14301 + t14308 + t14328 + t14331 + t14345 + t14404;
  t11726 = -0.325*t2369*t11680;
  t11747 = 0.325*t3520*t11343;
  t11765 = -0.575*t3497*t11757;
  t11775 = -0.575*t3527*t11773;
  t11788 = t3527*t11757;
  t11789 = t3473*t11773;
  t11790 = t11788 + t11789;
  t11792 = -0.0641*t11790;
  t11794 = t3473*t11757;
  t11795 = -1.*t3527*t11773;
  t11796 = t11794 + t11795;
  t11798 = -0.295*t11796;
  t11799 = t11726 + t11747 + t11765 + t11775 + t11792 + t11798;
  t14690 = t4666*t11245*t1389;
  t14691 = t11062*t1572;
  t14694 = t14690 + t14691;
  t14696 = -1.*t428*t454*t11245;
  t14697 = -1.*t1294*t13976;
  t14698 = t14696 + t14697;
  t14695 = -1.*t2369*t14694;
  t14699 = t3520*t14698;
  t14703 = t14695 + t14699;
  t14708 = -1.*t3520*t14694;
  t14710 = -1.*t2369*t14698;
  t14711 = t14708 + t14710;
  t14736 = t2369*t14694;
  t14737 = -1.*t3520*t14698;
  t14738 = t14736 + t14737;
  t13340 = -0.575*t3473*t13289;
  t13360 = -0.575*t3527*t13359;
  t13362 = -1.*t3527*t13289;
  t13369 = t3473*t13359;
  t13370 = t13362 + t13369;
  t13371 = -0.0641*t13370;
  t13373 = -1.*t3473*t13289;
  t13375 = -1.*t3527*t13359;
  t13376 = t13373 + t13375;
  t13380 = -0.295*t13376;
  t13381 = t13340 + t13360 + t13371 + t13380;
  t14512 = -0.575*t3520*t3473*t14511;
  t14513 = -0.575*t2369*t3527*t14511;
  t14514 = t3473*t2369*t14511;
  t14515 = -1.*t3520*t3527*t14511;
  t14597 = t14514 + t14515;
  t14598 = -0.0641*t14597;
  t14603 = -1.*t3520*t3473*t14511;
  t14608 = -1.*t2369*t3527*t14511;
  t14613 = t14603 + t14608;
  t14615 = -0.295*t14613;
  t14619 = t14512 + t14513 + t14598 + t14615;
  t14182 = -0.575*t3527*t14181;
  t14267 = -0.575*t3473*t14261;
  t14275 = -1.*t3527*t14181;
  t14290 = -1.*t3473*t14261;
  t14292 = t14275 + t14290;
  t14294 = -0.295*t14292;
  t14295 = t3473*t14181;
  t14296 = -1.*t3527*t14261;
  t14297 = t14295 + t14296;
  t14298 = -0.0641*t14297;
  t14299 = t14182 + t14267 + t14294 + t14298;
  t11801 = -0.575*t3473*t11757;
  t11821 = -0.575*t3527*t11820;
  t11826 = -1.*t3527*t11757;
  t11835 = t3473*t11820;
  t11837 = t11826 + t11835;
  t11838 = -0.0641*t11837;
  t11859 = -1.*t3473*t11757;
  t11860 = -1.*t3527*t11820;
  t11877 = t11859 + t11860;
  t11890 = -0.295*t11877;
  t11947 = t11801 + t11821 + t11838 + t11890;
  t14707 = -0.575*t3527*t14703;
  t14712 = -0.575*t3473*t14711;
  t14713 = -1.*t3527*t14703;
  t14715 = -1.*t3473*t14711;
  t14717 = t14713 + t14715;
  t14720 = -0.295*t14717;
  t14725 = t3473*t14703;
  t14729 = -1.*t3527*t14711;
  t14730 = t14725 + t14729;
  t14731 = -0.0641*t14730;
  t14732 = t14707 + t14712 + t14720 + t14731;
  t14773 = t3520*t14694;
  t14775 = t2369*t14698;
  t14778 = t14773 + t14775;
  t14780 = t3527*t14703;
  t14743 = t3473*t14711;
  t14785 = -1.*t3473*t14703;
  t14786 = -1.*t3527*t14778;
  t14787 = t14785 + t14786;
  t14839 = -0.325*t5109*t454*t4666*t11245;
  t14840 = 0.1575*t1294*t11245*t1389;
  t14842 = 0.1575*t4665*t454*t11245*t1572;
  t14843 = t1294*t11245*t1389;
  t14844 = -1.*t428*t454*t11245*t1572;
  t14845 = t14843 + t14844;
  t14846 = -0.2255*t14845;
  t14850 = 0.325*t2369*t12556;
  t14854 = -0.575*t3527*t13289;
  t14864 = -0.575*t3497*t13359;
  t14865 = -0.295*t13370;
  t14866 = t3527*t13359;
  t14867 = t13324 + t14866;
  t14868 = -0.0641*t14867;
  t14869 = t14839 + t14840 + t14842 + t14846 + t14850 + t14854 + t14864 + t14865 + t14868;
  t14883 = -0.1575*t428*t454*t11245;
  t14884 = -0.1575*t1294*t13976;
  t14888 = 0.325*t2369*t14511;
  t14889 = -0.575*t3497*t2369*t14511;
  t14891 = -0.575*t3520*t3527*t14511;
  t14895 = -0.2255*t14698;
  t14899 = -0.295*t14597;
  t14900 = -0.0641*t14635;
  t14901 = t14883 + t14884 + t14888 + t14889 + t14891 + t14895 + t14899 + t14900;
  t14870 = -0.1575*t4665*t12104;
  t14871 = -0.2255*t428*t12104;
  t14872 = -0.325*t1294*t2369*t12104;
  t14873 = -0.325*t5109*t13976;
  t14874 = -0.575*t3497*t14181;
  t14875 = -0.575*t3527*t14261;
  t14876 = t3527*t14181;
  t14877 = t14876 + t14333;
  t14879 = -0.0641*t14877;
  t14881 = -0.295*t14297;
  t14882 = t14870 + t14871 + t14872 + t14873 + t14874 + t14875 + t14879 + t14881;
  t14794 = -0.1575*t11062*t454*t1294;
  t14795 = -0.325*t5109*t11680;
  t14796 = -0.1575*t4665*t11255;
  t14797 = -1.*t11062*t454*t1294;
  t14798 = t428*t11255;
  t14799 = t14797 + t14798;
  t14803 = -0.2255*t14799;
  t14807 = 0.325*t2369*t11343;
  t14811 = -0.575*t3527*t11757;
  t14821 = -0.575*t3497*t11820;
  t14825 = -0.295*t11837;
  t14830 = t3527*t11820;
  t14833 = t11794 + t14830;
  t14834 = -0.0641*t14833;
  t14835 = t14794 + t14795 + t14796 + t14803 + t14807 + t14811 + t14821 + t14825 + t14834;
  t14902 = -0.325*t2369*t14694;
  t14903 = 0.325*t3520*t14698;
  t14904 = -0.575*t3497*t14703;
  t14905 = -0.575*t3527*t14711;
  t14906 = t14780 + t14743;
  t14907 = -0.0641*t14906;
  t14924 = -0.295*t14730;
  t14957 = t14902 + t14903 + t14904 + t14905 + t14907 + t14924;
  t14959 = -0.575*t3473*t14703;
  t15013 = -0.575*t3527*t14778;
  t15059 = t3473*t14778;
  t15100 = t14713 + t15059;
  t15102 = -0.0641*t15100;
  t15103 = -0.295*t14787;
  t15104 = t14959 + t15013 + t15102 + t15103;
  t15147 = -1.*t11062*t454*t4666*t1294*t2369;
  t15148 = t3520*t11062*t454*t1572;
  t15152 = t15147 + t15148;
  t15169 = -1.*t3520*t11062*t454*t4666*t1294;
  t15171 = -1.*t11062*t454*t2369*t1572;
  t15172 = t15169 + t15171;
  t15117 = -1.*t428*t11062*t1389;
  t15118 = -1.*t11062*t454*t1294*t1572;
  t15119 = t15117 + t15118;
  t15278 = t11062*t454*t4666*t2369;
  t15279 = t3520*t15119;
  t15280 = t15278 + t15279;
  t15287 = -1.*t2369*t15119;
  t15288 = t11191 + t15287;
  t15316 = -1.*t3520*t11062*t454*t4666;
  t15317 = t2369*t15119;
  t15318 = t15316 + t15317;
  t15336 = t11062*t1294*t1389*t1572;
  t15337 = t11327 + t15336;
  t15339 = -1.*t11062*t4666*t2369*t1389;
  t15340 = t3520*t15337;
  t15396 = t15339 + t15340;
  t15463 = t3520*t11062*t4666*t1389;
  t15475 = t2369*t15337;
  t15477 = t15463 + t15475;
  t15135 = -0.1575*t4665*t11062*t454*t4666;
  t15136 = -0.2255*t428*t11062*t454*t4666;
  t15137 = -0.325*t11062*t454*t4666*t1294*t2369;
  t15142 = -0.325*t5109*t11062*t454*t1572;
  t15156 = -0.575*t3497*t15152;
  t15173 = -0.575*t3527*t15172;
  t15174 = t3527*t15152;
  t15175 = t3473*t15172;
  t15176 = t15174 + t15175;
  t15177 = -0.0641*t15176;
  t15178 = t3473*t15152;
  t15184 = -1.*t3527*t15172;
  t15270 = t15178 + t15184;
  t15271 = -0.295*t15270;
  t15272 = t15135 + t15136 + t15137 + t15142 + t15156 + t15173 + t15177 + t15271;
  t15566 = -1.*t3520*t1294*t11255;
  t15567 = t11750 + t15566;
  t15569 = -1.*t1294*t2369*t11255;
  t15570 = t11804 + t15569;
  t15599 = t4666*t11245;
  t15601 = t11062*t1389*t1572;
  t15603 = t15599 + t15601;
  t15595 = -1.*t1294*t2369*t11680;
  t15608 = t3520*t15603;
  t15609 = t15595 + t15608;
  t15612 = -1.*t3520*t1294*t11680;
  t15613 = -1.*t2369*t15603;
  t15614 = t15612 + t15613;
  t15628 = t1294*t2369*t11680;
  t15629 = -1.*t3520*t15603;
  t15630 = t15628 + t15629;
  t15112 = -0.1575*t428*t11062*t1389;
  t15113 = -0.1575*t11062*t454*t1294*t1572;
  t15114 = 0.325*t2369*t11106;
  t15115 = -0.575*t3497*t2369*t11106;
  t15116 = -0.575*t3520*t3527*t11106;
  t15120 = -0.2255*t15119;
  t15121 = t3473*t2369*t11106;
  t15122 = -1.*t3520*t3527*t11106;
  t15123 = t15121 + t15122;
  t15124 = -0.295*t15123;
  t15125 = t3520*t3473*t11106;
  t15126 = t2369*t3527*t11106;
  t15127 = t15125 + t15126;
  t15128 = -0.0641*t15127;
  t15129 = t15112 + t15113 + t15114 + t15115 + t15116 + t15120 + t15124 + t15128;
  t15519 = 0.068*t1294*t11680;
  t15523 = -0.325*t428*t2369*t11680;
  t15526 = 0.575*t428*t3497*t2369*t11680;
  t15528 = 0.575*t428*t3520*t3527*t11680;
  t15529 = -1.*t428*t3473*t2369*t11680;
  t15536 = t428*t3520*t3527*t11680;
  t15538 = t15529 + t15536;
  t15539 = -0.295*t15538;
  t15545 = -1.*t428*t3520*t3473*t11680;
  t15547 = -1.*t428*t2369*t3527*t11680;
  t15548 = t15545 + t15547;
  t15549 = -0.0641*t15548;
  t15551 = t15519 + t15523 + t15526 + t15528 + t15539 + t15549;
  t15859 = -1.*t428*t15603;
  t15860 = t14797 + t15859;
  t15949 = t1294*t15603;
  t15950 = t11327 + t15949;
  t15274 = 0.325*t11062*t454*t4666*t2369;
  t15276 = 0.325*t3520*t15119;
  t15283 = -0.575*t3497*t15280;
  t15297 = -0.575*t3527*t15288;
  t15298 = t3527*t15280;
  t15299 = t3473*t15288;
  t15300 = t15298 + t15299;
  t15302 = -0.0641*t15300;
  t15308 = t3473*t15280;
  t15310 = -1.*t3527*t15288;
  t15311 = t15308 + t15310;
  t15312 = -0.295*t15311;
  t15313 = t15274 + t15276 + t15283 + t15297 + t15302 + t15312;
  t15899 = 0.325*t3520*t15860;
  t15902 = -0.575*t3520*t3497*t15860;
  t15906 = 0.575*t2369*t3527*t15860;
  t15910 = -1.*t3473*t2369*t15860;
  t15914 = t3520*t3527*t15860;
  t15915 = t15910 + t15914;
  t15916 = -0.0641*t15915;
  t15917 = t3520*t3473*t15860;
  t15923 = t2369*t3527*t15860;
  t15930 = t15917 + t15923;
  t15935 = -0.295*t15930;
  t15939 = t15899 + t15902 + t15906 + t15916 + t15935;
  t15626 = -0.325*t3520*t1294*t11680;
  t15627 = -0.325*t2369*t15603;
  t15631 = -0.575*t3527*t15630;
  t15632 = -0.575*t3497*t15614;
  t15633 = -1.*t3527*t15630;
  t15634 = t3473*t15614;
  t15635 = t15633 + t15634;
  t15636 = -0.295*t15635;
  t15637 = t3473*t15630;
  t15638 = t3527*t15614;
  t15639 = t15637 + t15638;
  t15712 = -0.0641*t15639;
  t15746 = t15626 + t15627 + t15631 + t15632 + t15636 + t15712;
  t16012 = t428*t11062*t454;
  t16016 = -1.*t1294*t15603;
  t16017 = t16012 + t16016;
  t16011 = -1.*t2369*t11429;
  t16018 = t3520*t16017;
  t16020 = t16011 + t16018;
  t16025 = -1.*t3520*t11429;
  t16026 = -1.*t2369*t16017;
  t16030 = t16025 + t16026;
  t16145 = t2369*t11429;
  t16152 = -1.*t3520*t16017;
  t16159 = t16145 + t16152;
  t15315 = -0.575*t3473*t15280;
  t15319 = -0.575*t3527*t15318;
  t15320 = -1.*t3527*t15280;
  t15321 = t3473*t15318;
  t15322 = t15320 + t15321;
  t15323 = -0.0641*t15322;
  t15324 = -1.*t3473*t15280;
  t15325 = -1.*t3527*t15318;
  t15326 = t15324 + t15325;
  t15327 = -0.295*t15326;
  t15328 = t15315 + t15319 + t15323 + t15327;
  t15867 = -0.575*t3520*t3473*t15860;
  t15872 = -0.575*t2369*t3527*t15860;
  t15877 = t3473*t2369*t15860;
  t15884 = -1.*t3520*t3527*t15860;
  t15887 = t15877 + t15884;
  t15888 = -0.0641*t15887;
  t15889 = -1.*t3520*t3473*t15860;
  t15890 = -1.*t2369*t3527*t15860;
  t15891 = t15889 + t15890;
  t15895 = -0.295*t15891;
  t15897 = t15867 + t15872 + t15888 + t15895;
  t15610 = -0.575*t3527*t15609;
  t15615 = -0.575*t3473*t15614;
  t15616 = -1.*t3527*t15609;
  t15617 = -1.*t3473*t15614;
  t15618 = t15616 + t15617;
  t15619 = -0.295*t15618;
  t15620 = t3473*t15609;
  t15621 = -1.*t3527*t15614;
  t15622 = t15620 + t15621;
  t15623 = -0.0641*t15622;
  t15624 = t15610 + t15615 + t15619 + t15623;
  t16022 = -0.575*t3527*t16020;
  t16031 = -0.575*t3473*t16030;
  t16032 = -1.*t3527*t16020;
  t16033 = -1.*t3473*t16030;
  t16036 = t16032 + t16033;
  t16037 = -0.295*t16036;
  t16038 = t3473*t16020;
  t16039 = -1.*t3527*t16030;
  t16040 = t16038 + t16039;
  t16041 = -0.0641*t16040;
  t16042 = t16022 + t16031 + t16037 + t16041;
  t16206 = t3520*t11429;
  t16209 = t2369*t16017;
  t16211 = t16206 + t16209;
  t16213 = t3527*t16020;
  t16173 = t3473*t16030;
  t16239 = -1.*t3473*t16020;
  t16240 = -1.*t3527*t16211;
  t16244 = t16239 + t16240;
  p_output1[0]=(t6217 + t6222 + t6232 + t6568 + t6685 - 0.575*t3527*t6701 - 0.575*t3497*t6731 - 0.295*(-1.*t3527*t6701 + t3473*t6731) - 0.0641*(t3473*t6701 + t3527*t6731))*var2[4] + t5959*var2[5] + t4638*var2[15] + t7395*var2[16] + t7564*var2[17];
  p_output1[1]=t5959*var2[4] + (-0.325*t1294*t1572*t2369*t454 - 0.2255*t1572*t428*t454 + t6217 + t6232 - 0.575*t3527*t8762 - 0.575*t3497*t8996 - 0.295*(-1.*t3527*t8762 + t3473*t8996) - 0.0641*(t3473*t8762 + t3527*t8996))*var2[5] + t7659*var2[15] + t8747*var2[16] + t8512*var2[17];
  p_output1[2]=t4638*var2[4] + t7659*var2[5] + (0.1575*t1572*t428*t454 + t6222 + t6568 - 0.575*t2369*t3497*t6673 - 0.575*t3520*t3527*t6673 - 0.0641*(t3473*t3520*t6673 + t2369*t3527*t6673) - 0.295*(t2369*t3473*t6673 - 1.*t3520*t3527*t6673) + t6685)*var2[15] + t10121*var2[16] + t9842*var2[17];
  p_output1[3]=t7395*var2[4] + t8747*var2[5] + t10121*var2[15] + (-0.325*t10528*t2369 - 0.575*t10574*t3497 - 0.575*t10668*t3527 - 0.0641*(t10668*t3473 + t10574*t3527) - 0.295*(t10672 - 1.*t10668*t3527) - 0.325*t3520*t454*t4666)*var2[16] + t10638*var2[17];
  p_output1[4]=t7564*var2[4] + t8512*var2[5] + t9842*var2[15] + t10638*var2[16] + (-0.0641*t10720 - 0.575*t10693*t3473 - 0.295*(t10697 - 1.*t10693*t3473) + 0.575*t10531*t3527)*var2[17];
  p_output1[5]=1.;
  p_output1[6]=0.325*t2369*t4100 + 0.1575*t1294*t454 - 0.2255*(t1389*t1572*t428 + t1294*t454) - 0.1575*t1389*t1572*t4665 + 0.325*t1389*t4666*t5109 - 0.575*t3527*t6958 - 0.575*t3497*t7412 - 0.0641*(t7331 + t3527*t7412) - 0.295*t7425;
  p_output1[7]=0.325*t1294*t2369*t454*t4666 + 0.2255*t428*t454*t4666 + 0.1575*t454*t4665*t4666 + 0.325*t1572*t454*t5109 - 0.575*t3497*t7954 - 0.575*t3527*t8022 - 0.295*t8168 - 0.0641*(t3527*t7954 + t8646);
  p_output1[8]=-0.0641*t10045 - 0.2255*t10528 + 0.1575*t1389*t428 + 0.1575*t1294*t1572*t454 + 0.325*t2369*t6547 - 0.575*t2369*t3497*t6547 - 0.575*t3520*t3527*t6547 - 0.295*t9750;
  p_output1[9]=-0.295*t10620 - 0.0641*(t10672 + t10697) - 0.575*t10531*t3497 + 0.325*t10528*t3520 - 0.575*t10574*t3527 - 0.325*t2369*t454*t4666;
  p_output1[10]=-0.295*t10720 - 0.575*t10531*t3473 - 0.0641*(t10582 + t10693*t3473) - 0.575*t10693*t3527;
  p_output1[11]=(t11961 + t12109 + t12235 + 0.325*t12401*t2369 - 0.575*t12428*t3497 - 0.575*t12407*t3527 - 0.295*(t12428*t3473 - 1.*t12407*t3527) - 0.0641*(t12407*t3473 + t12428*t3527) - 0.2255*(t12384 + t12231*t428))*var2[3] + t11237*var2[4] + t11595*var2[5] + t11399*var2[15] + t11799*var2[16] + t11947*var2[17];
  p_output1[12]=t11237*var2[3] + (t11961 + 0.325*t13397*t2369 - 0.575*t13423*t3497 - 0.575*t13412*t3527 - 0.295*(t13423*t3473 - 1.*t13412*t3527) - 0.0641*(t13412*t3473 + t13423*t3527) - 0.2255*(t12384 + t11245*t1389*t1572*t428) - 0.1575*t11245*t1389*t1572*t4665 + 0.325*t11245*t1389*t4666*t5109)*var2[4] + t13277*var2[5] + t12575*var2[15] + t13335*var2[16] + t13381*var2[17];
  p_output1[13]=t11595*var2[3] + t13277*var2[4] + (t12109 + t12235 - 0.325*t12231*t1294*t2369 - 0.575*t14451*t3497 - 0.575*t14443*t3527 - 0.295*(t14451*t3473 - 1.*t14443*t3527) - 0.0641*(t14443*t3473 + t14451*t3527) - 0.2255*t12231*t428)*var2[5] + t13608*var2[15] + t14405*var2[16] + t14299*var2[17];
  p_output1[14]=t11399*var2[3] + t12575*var2[4] + t13608*var2[5] + (t11961 - 0.2255*t14511 + 0.325*t14653*t2369 - 0.575*t14653*t2369*t3497 - 0.575*t14653*t3520*t3527 - 0.0641*(t14653*t3473*t3520 + t14653*t2369*t3527) - 0.295*(t14653*t2369*t3473 - 1.*t14653*t3520*t3527) - 0.1575*t13976*t428)*var2[15] + t14643*var2[16] + t14619*var2[17];
  p_output1[15]=t11799*var2[3] + t13335*var2[4] + t14405*var2[5] + t14643*var2[15] + (-0.325*t14698*t2369 - 0.575*t14711*t3497 - 0.325*t14694*t3520 - 0.575*t14738*t3527 - 0.0641*(t14738*t3473 + t14711*t3527) - 0.295*(t14743 - 1.*t14738*t3527))*var2[16] + t14732*var2[17];
  p_output1[16]=t11947*var2[3] + t13381*var2[4] + t14299*var2[5] + t14619*var2[15] + t14732*var2[16] + (-0.0641*t14787 - 0.575*t14778*t3473 - 0.295*(t14780 - 1.*t14778*t3473) + 0.575*t14703*t3527)*var2[17];
  p_output1[17]=1.;
  p_output1[18]=t14835;
  p_output1[19]=t14869;
  p_output1[20]=t14882;
  p_output1[21]=t14901;
  p_output1[22]=t14957;
  p_output1[23]=t15104;
  p_output1[24]=t14835*var2[3] + t14869*var2[4] + t14882*var2[5] + t14901*var2[15] + t14957*var2[16] + t15104*var2[17];
  p_output1[25]=t14869*var2[3] + (t14794 + 0.325*t15337*t2369 - 0.575*t15477*t3497 - 0.575*t15396*t3527 - 0.295*(t15477*t3473 - 1.*t15396*t3527) - 0.0641*(t15396*t3473 + t15477*t3527) - 0.2255*(t14797 - 1.*t11062*t1389*t1572*t428) + 0.1575*t11062*t1389*t1572*t4665 - 0.325*t11062*t1389*t4666*t5109)*var2[4] + t15272*var2[5] + t15129*var2[15] + t15313*var2[16] + t15328*var2[17];
  p_output1[26]=t14882*var2[3] + t15272*var2[4] + (t14795 + t14796 - 0.325*t11255*t1294*t2369 - 0.575*t15570*t3497 - 0.575*t15567*t3527 - 0.295*(t15570*t3473 - 1.*t15567*t3527) - 0.0641*(t15567*t3473 + t15570*t3527) - 0.2255*t11255*t428)*var2[5] + t15551*var2[15] + t15746*var2[16] + t15624*var2[17];
  p_output1[27]=t14901*var2[3] + t15129*var2[4] + t15551*var2[5] + (t14794 - 0.2255*t15860 + 0.325*t15950*t2369 - 0.575*t15950*t2369*t3497 - 0.575*t15950*t3520*t3527 - 0.0641*(t15950*t3473*t3520 + t15950*t2369*t3527) - 0.295*(t15950*t2369*t3473 - 1.*t15950*t3520*t3527) - 0.1575*t15603*t428)*var2[15] + t15939*var2[16] + t15897*var2[17];
  p_output1[28]=t14957*var2[3] + t15313*var2[4] + t15746*var2[5] + t15939*var2[15] + (-0.325*t16017*t2369 - 0.575*t16030*t3497 - 0.325*t11429*t3520 - 0.575*t16159*t3527 - 0.0641*(t16159*t3473 + t16030*t3527) - 0.295*(t16173 - 1.*t16159*t3527))*var2[16] + t16042*var2[17];
  p_output1[29]=t15104*var2[3] + t15328*var2[4] + t15624*var2[5] + t15897*var2[15] + t16042*var2[16] + (-0.0641*t16244 - 0.575*t16211*t3473 - 0.295*(t16213 - 1.*t16211*t3473) + 0.575*t16020*t3527)*var2[17];
  p_output1[30]=1.;
  p_output1[31]=t14707 - 0.295*t15100 + 0.325*t14698*t2369 - 0.575*t14778*t3497 - 0.0641*(t14725 + t14778*t3527) - 0.1575*t11245*t1294*t454 - 0.2255*(t13976*t428 - 1.*t11245*t1294*t454) - 0.1575*t13976*t4665 - 0.325*t14694*t5109;
  p_output1[32]=-0.1575*t11062*t1294*t1389 - 0.295*t15322 + 0.325*t15119*t2369 - 0.575*t15318*t3497 - 0.575*t15280*t3527 - 0.0641*(t15308 + t15318*t3527) - 0.2255*(-1.*t11062*t1294*t1389 + t11062*t1572*t428*t454) - 0.1575*t11062*t1572*t454*t4665 + 0.325*t11062*t454*t4666*t5109;
  p_output1[33]=-0.295*t15622 - 0.325*t11680*t1294*t2369 - 0.575*t15609*t3497 - 0.575*t15614*t3527 - 0.0641*(t15634 + t15609*t3527) - 0.2255*t11680*t428 - 0.1575*t11680*t4665 - 0.325*t15603*t5109;
  p_output1[34]=-0.1575*t1294*t15603 - 0.295*t15887 - 0.0641*t15930 - 0.2255*t16017 + 0.325*t15860*t2369 - 0.575*t15860*t2369*t3497 - 0.575*t15860*t3520*t3527 + 0.1575*t11062*t428*t454;
  p_output1[35]=-0.295*t16040 - 0.0641*(t16173 + t16213) - 0.325*t11429*t2369 - 0.575*t16020*t3497 + 0.325*t16017*t3520 - 0.575*t16030*t3527;
  p_output1[36]=-0.295*t16244 - 0.575*t16020*t3473 - 0.0641*(t16032 + t16211*t3473) - 0.575*t16211*t3527;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 37, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_impact_velocity_RrFoot_DiagonalStance.hh"

namespace DiagonalStance
{

void J_impact_velocity_RrFoot_DiagonalStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
