/*
 * Automatically Generated from Mathematica.
 * Sun 3 Apr 2022 21:47:11 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t1889;
  double t2286;
  double t1255;
  double t2325;
  double t2391;
  double t2448;
  double t2455;
  double t2461;
  double t2462;
  double t2464;
  double t2491;
  double t2528;
  double t2831;
  double t2470;
  double t2471;
  double t2946;
  double t3007;
  double t3017;
  double t3025;
  double t3026;
  double t3027;
  double t2851;
  double t2854;
  double t2823;
  double t2824;
  double t3192;
  double t3193;
  double t3199;
  double t3201;
  double t3218;
  double t3221;
  double t3253;
  double t3290;
  double t3291;
  double t2602;
  double t2603;
  double t2608;
  double t3463;
  double t3464;
  double t3477;
  double t3569;
  double t3594;
  double t3624;
  double t3859;
  double t3866;
  double t3867;
  double t5002;
  double t5015;
  double t5024;
  double t5049;
  double t5061;
  double t5065;
  double t13567;
  double t13568;
  double t13675;
  double t3059;
  double t3103;
  double t14143;
  double t14144;
  double t14153;
  double t14163;
  double t2833;
  double t2834;
  double t2849;
  double t2922;
  double t3019;
  double t3028;
  double t3029;
  double t3030;
  double t3031;
  double t3032;
  double t3033;
  double t3034;
  double t3040;
  double t3046;
  double t3055;
  double t4630;
  double t4652;
  double t4654;
  double t4721;
  double t4797;
  double t4924;
  double t4962;
  double t4963;
  double t4965;
  double t4966;
  double t4969;
  double t4976;
  double t4988;
  double t3121;
  double t3124;
  double t3152;
  double t3099;
  double t3175;
  double t3200;
  double t2194;
  double t2399;
  double t2463;
  double t2472;
  double t2595;
  double t2611;
  double t2654;
  double t2678;
  double t2776;
  double t2777;
  double t2778;
  double t2796;
  double t2812;
  double t2817;
  double t2818;
  double t17563;
  double t17602;
  double t17603;
  double t17608;
  double t17610;
  double t17620;
  double t17631;
  double t17635;
  double t17768;
  double t17769;
  double t17834;
  double t17841;
  double t13563;
  double t13565;
  double t13717;
  double t13735;
  double t13741;
  double t13745;
  double t13754;
  double t13775;
  double t13779;
  double t13852;
  double t13980;
  double t13981;
  double t14080;
  double t18533;
  double t18570;
  double t18587;
  double t18516;
  double t18588;
  double t18590;
  double t18593;
  double t18594;
  double t18664;
  double t18665;
  double t3447;
  double t3459;
  double t3479;
  double t3654;
  double t3669;
  double t3672;
  double t3686;
  double t3688;
  double t3710;
  double t3740;
  double t3742;
  double t3743;
  double t3747;
  double t14428;
  double t14461;
  double t14462;
  double t14463;
  double t14471;
  double t15315;
  double t15418;
  double t15430;
  double t16178;
  double t17044;
  double t17374;
  double t5027;
  double t5145;
  double t5155;
  double t5257;
  double t5501;
  double t5545;
  double t5631;
  double t12469;
  double t13140;
  double t13338;
  double t13530;
  double t18591;
  double t18595;
  double t18600;
  double t18605;
  double t18622;
  double t18626;
  double t18627;
  double t18641;
  double t18652;
  double t18653;
  double t18654;
  double t19069;
  double t19073;
  double t19082;
  double t3796;
  double t3928;
  double t3942;
  double t4055;
  double t4080;
  double t4199;
  double t4203;
  double t4365;
  double t4368;
  double t4452;
  double t4468;
  double t19110;
  double t18700;
  double t19176;
  double t19203;
  double t19204;
  double t19505;
  double t19522;
  double t19523;
  double t19525;
  double t19531;
  double t19532;
  double t19533;
  double t19537;
  double t19538;
  double t19539;
  double t19556;
  double t19557;
  double t19558;
  double t19559;
  double t19561;
  double t19563;
  double t19565;
  double t19583;
  double t19584;
  double t19585;
  double t19595;
  double t19597;
  double t19599;
  double t19603;
  double t19604;
  double t19605;
  double t19569;
  double t19570;
  double t19571;
  double t19617;
  double t19618;
  double t19619;
  double t19622;
  double t19623;
  double t19624;
  double t19626;
  double t19627;
  double t19628;
  double t19657;
  double t19658;
  double t19660;
  double t19695;
  double t19699;
  double t19700;
  double t19686;
  double t19687;
  double t19690;
  double t19706;
  double t19707;
  double t19711;
  double t19720;
  double t19721;
  double t19722;
  double t19724;
  double t19725;
  double t19726;
  double t19742;
  double t19760;
  double t19761;
  double t19864;
  double t19865;
  double t19866;
  double t19868;
  double t19869;
  double t19894;
  double t19506;
  double t19509;
  double t19511;
  double t19512;
  double t19513;
  double t19515;
  double t19517;
  double t19529;
  double t19535;
  double t19540;
  double t19541;
  double t19542;
  double t19544;
  double t19545;
  double t19547;
  double t19548;
  double t19549;
  double t19550;
  double t19552;
  double t19843;
  double t19844;
  double t19845;
  double t19946;
  double t19948;
  double t19949;
  double t19951;
  double t19952;
  double t19953;
  double t19987;
  double t19988;
  double t19989;
  double t19685;
  double t19702;
  double t20082;
  double t20083;
  double t20086;
  double t20087;
  double t20088;
  double t20090;
  double t20092;
  double t20093;
  double t19860;
  double t19861;
  double t19862;
  double t19863;
  double t19867;
  double t19897;
  double t19904;
  double t19923;
  double t19925;
  double t19927;
  double t19929;
  double t19933;
  double t19935;
  double t19936;
  double t19941;
  double t19586;
  double t19587;
  double t19588;
  double t19594;
  double t19601;
  double t19606;
  double t19607;
  double t19608;
  double t19609;
  double t19610;
  double t19611;
  double t19612;
  double t19613;
  double t19614;
  double t19615;
  double t20127;
  double t20136;
  double t20181;
  double t20126;
  double t20189;
  double t20193;
  double t20209;
  double t20210;
  double t20226;
  double t20280;
  double t20281;
  double t20282;
  double t19691;
  double t19701;
  double t20314;
  double t20316;
  double t20318;
  double t20319;
  double t20110;
  double t20111;
  double t20112;
  double t20113;
  double t20114;
  double t20115;
  double t20116;
  double t20117;
  double t20118;
  double t20119;
  double t20120;
  double t20121;
  double t20122;
  double t19740;
  double t19741;
  double t19796;
  double t19802;
  double t19842;
  double t19846;
  double t19847;
  double t19848;
  double t19849;
  double t19852;
  double t19853;
  double t19854;
  double t19855;
  double t19856;
  double t19858;
  double t19555;
  double t19560;
  double t19566;
  double t19567;
  double t19568;
  double t19572;
  double t19573;
  double t19574;
  double t19575;
  double t19576;
  double t19577;
  double t19578;
  double t19579;
  double t19580;
  double t19581;
  double t20346;
  double t20347;
  double t20385;
  double t20386;
  double t19944;
  double t19945;
  double t19950;
  double t19954;
  double t19955;
  double t19956;
  double t19957;
  double t19958;
  double t19962;
  double t19963;
  double t19964;
  double t19968;
  double t19972;
  double t20364;
  double t20365;
  double t20366;
  double t20368;
  double t20369;
  double t20370;
  double t20373;
  double t20374;
  double t20376;
  double t20378;
  double t20380;
  double t20381;
  double t20274;
  double t20275;
  double t20283;
  double t20284;
  double t20285;
  double t20291;
  double t20293;
  double t20295;
  double t20296;
  double t20297;
  double t20300;
  double t20301;
  double t20302;
  double t19620;
  double t19621;
  double t19625;
  double t19629;
  double t19630;
  double t19631;
  double t19632;
  double t19633;
  double t19634;
  double t19635;
  double t19639;
  double t19646;
  double t19648;
  double t20455;
  double t20480;
  double t20518;
  double t20533;
  double t20534;
  double t20536;
  double t20525;
  double t20537;
  double t20541;
  double t20543;
  double t20546;
  double t20547;
  double t20580;
  double t20582;
  double t20588;
  double t19986;
  double t19990;
  double t19991;
  double t19992;
  double t19993;
  double t19994;
  double t20000;
  double t20070;
  double t20072;
  double t20073;
  double t20074;
  double t20348;
  double t20349;
  double t20350;
  double t20351;
  double t20352;
  double t20353;
  double t20354;
  double t20355;
  double t20357;
  double t20358;
  double t20359;
  double t20197;
  double t20227;
  double t20246;
  double t20252;
  double t20253;
  double t20254;
  double t20258;
  double t20264;
  double t20265;
  double t20270;
  double t20272;
  double t19656;
  double t19673;
  double t19674;
  double t19675;
  double t19676;
  double t19677;
  double t19678;
  double t19679;
  double t19680;
  double t19682;
  double t19683;
  double t20542;
  double t20548;
  double t20549;
  double t20550;
  double t20555;
  double t20556;
  double t20557;
  double t20562;
  double t20563;
  double t20564;
  double t20565;
  double t20614;
  double t20615;
  double t20617;
  double t20620;
  double t20593;
  double t20626;
  double t20627;
  double t20628;
  double t20649;
  double t20650;
  double t20651;
  double t20652;
  double t20654;
  double t20699;
  double t20700;
  double t20701;
  double t20705;
  double t20710;
  double t20713;
  double t20714;
  double t20715;
  double t20720;
  double t20722;
  double t20743;
  double t20744;
  double t20745;
  double t20746;
  double t20747;
  double t20749;
  double t20750;
  double t20751;
  double t20752;
  double t20726;
  double t20727;
  double t20732;
  double t20734;
  double t20735;
  double t20736;
  double t20737;
  double t20738;
  double t20739;
  double t20740;
  double t20741;
  double t20634;
  double t20635;
  double t20636;
  double t20637;
  double t20638;
  double t20639;
  double t20640;
  double t20641;
  double t20642;
  double t20643;
  double t20644;
  double t20645;
  double t20646;
  double t20647;
  double t20648;
  double t20754;
  double t20756;
  double t20757;
  double t20760;
  double t20761;
  double t20762;
  double t20763;
  double t20764;
  double t20765;
  double t20766;
  double t20767;
  double t20768;
  double t20770;
  double t20772;
  double t20773;
  double t20808;
  double t20809;
  double t20810;
  double t20812;
  double t20813;
  double t20814;
  double t20788;
  double t20789;
  double t20790;
  double t20832;
  double t20835;
  double t20836;
  double t20839;
  double t20840;
  double t20868;
  double t20870;
  double t20871;
  double t20905;
  double t20907;
  double t20909;
  double t20911;
  double t20912;
  double t20914;
  double t20918;
  double t20919;
  double t20804;
  double t20805;
  double t20806;
  double t20807;
  double t20811;
  double t20815;
  double t20816;
  double t20817;
  double t20818;
  double t20819;
  double t20820;
  double t20821;
  double t20822;
  double t20823;
  double t20824;
  double t20970;
  double t20971;
  double t20974;
  double t20975;
  double t20992;
  double t20993;
  double t20994;
  double t20991;
  double t20995;
  double t20996;
  double t20998;
  double t20999;
  double t21000;
  double t21016;
  double t21017;
  double t21018;
  double t20783;
  double t20784;
  double t20785;
  double t20786;
  double t20787;
  double t20793;
  double t20794;
  double t20795;
  double t20796;
  double t20797;
  double t20798;
  double t20799;
  double t20800;
  double t20801;
  double t20802;
  double t20942;
  double t20943;
  double t20945;
  double t20951;
  double t20952;
  double t20953;
  double t20955;
  double t20959;
  double t20960;
  double t20961;
  double t20962;
  double t20963;
  double t20966;
  double t21035;
  double t21036;
  double t21065;
  double t21066;
  double t20827;
  double t20829;
  double t20837;
  double t20844;
  double t20846;
  double t20848;
  double t20850;
  double t20851;
  double t20852;
  double t20858;
  double t20860;
  double t20861;
  double t20862;
  double t21050;
  double t21051;
  double t21052;
  double t21053;
  double t21054;
  double t21055;
  double t21056;
  double t21057;
  double t21058;
  double t21059;
  double t21060;
  double t21061;
  double t21014;
  double t21015;
  double t21019;
  double t21020;
  double t21021;
  double t21022;
  double t21023;
  double t21024;
  double t21025;
  double t21026;
  double t21027;
  double t21028;
  double t21029;
  double t21086;
  double t21087;
  double t21088;
  double t21085;
  double t21089;
  double t21090;
  double t21092;
  double t21093;
  double t21094;
  double t21114;
  double t21122;
  double t21124;
  double t20866;
  double t20872;
  double t20876;
  double t20878;
  double t20880;
  double t20886;
  double t20888;
  double t20891;
  double t20892;
  double t20893;
  double t20896;
  double t21037;
  double t21038;
  double t21040;
  double t21041;
  double t21042;
  double t21043;
  double t21044;
  double t21045;
  double t21046;
  double t21047;
  double t21048;
  double t20997;
  double t21001;
  double t21003;
  double t21004;
  double t21005;
  double t21006;
  double t21007;
  double t21009;
  double t21010;
  double t21011;
  double t21012;
  double t21091;
  double t21095;
  double t21096;
  double t21097;
  double t21098;
  double t21099;
  double t21100;
  double t21101;
  double t21102;
  double t21103;
  double t21108;
  double t21160;
  double t21163;
  double t21164;
  double t21167;
  double t21135;
  double t21175;
  double t21176;
  double t21177;
  t1889 = Cos(var1[4]);
  t2286 = Sin(var1[15]);
  t1255 = Cos(var1[15]);
  t2325 = Sin(var1[4]);
  t2391 = Sin(var1[5]);
  t2448 = Sin(var1[16]);
  t2455 = -1.*t1889*t2286;
  t2461 = -1.*t1255*t2325*t2391;
  t2462 = t2455 + t2461;
  t2464 = Cos(var1[17]);
  t2491 = Cos(var1[16]);
  t2528 = Sin(var1[17]);
  t2831 = Cos(var1[5]);
  t2470 = -1.*t2464;
  t2471 = 1. + t2470;
  t2946 = -1.*t2831*t2286*t2448*t2325;
  t3007 = t2491*t2325*t2391;
  t3017 = t2946 + t3007;
  t3025 = -1.*t2491*t2831*t2286*t2325;
  t3026 = -1.*t2448*t2325*t2391;
  t3027 = t3025 + t3026;
  t2851 = -1.*t2491;
  t2854 = 1. + t2851;
  t2823 = -1.*t1255;
  t2824 = 1. + t2823;
  t3192 = -1.*t1255*t2325;
  t3193 = -1.*t1889*t2286*t2391;
  t3199 = t3192 + t3193;
  t3201 = t1889*t2831*t2448;
  t3218 = t2491*t3199;
  t3221 = t3201 + t3218;
  t3253 = -1.*t2491*t1889*t2831;
  t3290 = t2448*t3199;
  t3291 = t3253 + t3290;
  t2602 = t1255*t1889;
  t2603 = -1.*t2286*t2325*t2391;
  t2608 = t2602 + t2603;
  t3463 = t2831*t2448*t2325;
  t3464 = t2491*t2608;
  t3477 = t3463 + t3464;
  t3569 = t2491*t2831*t2325;
  t3594 = -1.*t2448*t2608;
  t3624 = t3569 + t3594;
  t3859 = -1.*t2491*t2831*t2325;
  t3866 = t2448*t2608;
  t3867 = t3859 + t3866;
  t5002 = t1889*t2831*t2286*t2448;
  t5015 = -1.*t2491*t1889*t2391;
  t5024 = t5002 + t5015;
  t5049 = t2491*t1889*t2831*t2286;
  t5061 = t1889*t2448*t2391;
  t5065 = t5049 + t5061;
  t13567 = -1.*t1889*t2831*t2286*t2448;
  t13568 = t2491*t1889*t2391;
  t13675 = t13567 + t13568;
  t3059 = 0.325*t2854*t1889*t2831;
  t3103 = -0.1575*t2824*t1889*t2391;
  t14143 = -1.*t2491*t1889*t2286*t2391;
  t14144 = t3201 + t14143;
  t14153 = -1.*t1889*t2286*t2448*t2391;
  t14163 = t3253 + t14153;
  t2833 = -0.1575*t2824*t2831*t2325;
  t2834 = -0.2255*t1255*t2831*t2325;
  t2849 = -0.325*t2831*t2286*t2448*t2325;
  t2922 = -0.325*t2854*t2325*t2391;
  t3019 = -0.575*t2471*t3017;
  t3028 = -0.575*t2528*t3027;
  t3029 = t2528*t3017;
  t3030 = t2464*t3027;
  t3031 = t3029 + t3030;
  t3032 = -0.0641*t3031;
  t3033 = t2464*t3017;
  t3034 = -1.*t2528*t3027;
  t3040 = t3033 + t3034;
  t3046 = -0.295*t3040;
  t3055 = t2833 + t2834 + t2849 + t2922 + t3019 + t3028 + t3032 + t3046;
  t4630 = -0.068*t1889*t2831*t2286;
  t4652 = 0.325*t1255*t1889*t2831*t2448;
  t4654 = -0.575*t1255*t2471*t1889*t2831*t2448;
  t4721 = -0.575*t1255*t2491*t1889*t2831*t2528;
  t4797 = t1255*t2464*t1889*t2831*t2448;
  t4924 = -1.*t1255*t2491*t1889*t2831*t2528;
  t4962 = t4797 + t4924;
  t4963 = -0.295*t4962;
  t4965 = t1255*t2491*t2464*t1889*t2831;
  t4966 = t1255*t1889*t2831*t2448*t2528;
  t4969 = t4965 + t4966;
  t4976 = -0.0641*t4969;
  t4988 = t4630 + t4652 + t4654 + t4721 + t4963 + t4976;
  t3121 = -1.*t2286*t2325;
  t3124 = t1255*t1889*t2391;
  t3152 = t3121 + t3124;
  t3099 = -0.1575*t2286*t2325;
  t3175 = -0.2255*t3152;
  t3200 = 0.325*t2448*t3199;
  t2194 = 0.1575*t1255*t1889;
  t2399 = -0.1575*t2286*t2325*t2391;
  t2463 = 0.325*t2448*t2462;
  t2472 = -0.575*t2471*t2448*t2462;
  t2595 = -0.575*t2491*t2528*t2462;
  t2611 = -0.2255*t2608;
  t2654 = t2464*t2448*t2462;
  t2678 = -1.*t2491*t2528*t2462;
  t2776 = t2654 + t2678;
  t2777 = -0.295*t2776;
  t2778 = t2491*t2464*t2462;
  t2796 = t2448*t2528*t2462;
  t2812 = t2778 + t2796;
  t2817 = -0.0641*t2812;
  t2818 = t2194 + t2399 + t2463 + t2472 + t2595 + t2611 + t2777 + t2817;
  t17563 = 0.325*t2491*t3152;
  t17602 = -0.575*t2491*t2471*t3152;
  t17603 = 0.575*t2448*t2528*t3152;
  t17608 = -1.*t2464*t2448*t3152;
  t17610 = t2491*t2528*t3152;
  t17620 = t17608 + t17610;
  t17631 = -0.0641*t17620;
  t17635 = t2491*t2464*t3152;
  t17768 = t2448*t2528*t3152;
  t17769 = t17635 + t17768;
  t17834 = -0.295*t17769;
  t17841 = t17563 + t17602 + t17603 + t17631 + t17834;
  t13563 = 0.325*t2491*t1889*t2831*t2286;
  t13565 = 0.325*t1889*t2448*t2391;
  t13717 = -0.575*t2528*t13675;
  t13735 = -0.575*t2471*t5065;
  t13741 = -1.*t2528*t13675;
  t13745 = t2464*t5065;
  t13754 = t13741 + t13745;
  t13775 = -0.295*t13754;
  t13779 = t2464*t13675;
  t13852 = t2528*t5065;
  t13980 = t13779 + t13852;
  t13981 = -0.0641*t13980;
  t14080 = t13563 + t13565 + t13717 + t13735 + t13775 + t13981;
  t18533 = t1255*t2325;
  t18570 = t1889*t2286*t2391;
  t18587 = t18533 + t18570;
  t18516 = -1.*t1889*t2831*t2448;
  t18588 = t2491*t18587;
  t18590 = t18516 + t18588;
  t18593 = -1.*t2448*t18587;
  t18594 = t3253 + t18593;
  t18664 = -1.*t2491*t18587;
  t18665 = t3201 + t18664;
  t3447 = 0.325*t2831*t2448*t2325;
  t3459 = 0.325*t2491*t2608;
  t3479 = -0.575*t2471*t3477;
  t3654 = -0.575*t2528*t3624;
  t3669 = t2528*t3477;
  t3672 = t2464*t3624;
  t3686 = t3669 + t3672;
  t3688 = -0.0641*t3686;
  t3710 = t2464*t3477;
  t3740 = -1.*t2528*t3624;
  t3742 = t3710 + t3740;
  t3743 = -0.295*t3742;
  t3747 = t3447 + t3459 + t3479 + t3654 + t3688 + t3743;
  t14428 = -0.575*t2491*t2464*t3152;
  t14461 = -0.575*t2448*t2528*t3152;
  t14462 = t2464*t2448*t3152;
  t14463 = -1.*t2491*t2528*t3152;
  t14471 = t14462 + t14463;
  t15315 = -0.0641*t14471;
  t15418 = -1.*t2491*t2464*t3152;
  t15430 = -1.*t2448*t2528*t3152;
  t16178 = t15418 + t15430;
  t17044 = -0.295*t16178;
  t17374 = t14428 + t14461 + t15315 + t17044;
  t5027 = -0.575*t2528*t5024;
  t5145 = -0.575*t2464*t5065;
  t5155 = -1.*t2528*t5024;
  t5257 = -1.*t2464*t5065;
  t5501 = t5155 + t5257;
  t5545 = -0.295*t5501;
  t5631 = t2464*t5024;
  t12469 = -1.*t2528*t5065;
  t13140 = t5631 + t12469;
  t13338 = -0.0641*t13140;
  t13530 = t5027 + t5145 + t5545 + t13338;
  t18591 = -0.575*t2528*t18590;
  t18595 = -0.575*t2464*t18594;
  t18600 = -1.*t2528*t18590;
  t18605 = -1.*t2464*t18594;
  t18622 = t18600 + t18605;
  t18626 = -0.295*t18622;
  t18627 = t2464*t18590;
  t18641 = -1.*t2528*t18594;
  t18652 = t18627 + t18641;
  t18653 = -0.0641*t18652;
  t18654 = t18591 + t18595 + t18626 + t18653;
  t19069 = t2491*t1889*t2831;
  t19073 = t2448*t18587;
  t19082 = t19069 + t19073;
  t3796 = -0.575*t2464*t3477;
  t3928 = -0.575*t2528*t3867;
  t3942 = -1.*t2528*t3477;
  t4055 = t2464*t3867;
  t4080 = t3942 + t4055;
  t4199 = -0.0641*t4080;
  t4203 = -1.*t2464*t3477;
  t4365 = -1.*t2528*t3867;
  t4368 = t4203 + t4365;
  t4452 = -0.295*t4368;
  t4468 = t3796 + t3928 + t4199 + t4452;
  t19110 = t2528*t18590;
  t18700 = t2464*t18594;
  t19176 = -1.*t2464*t18590;
  t19203 = -1.*t2528*t19082;
  t19204 = t19176 + t19203;
  t19505 = Cos(var1[3]);
  t19522 = t1255*t19505*t2325;
  t19523 = t19505*t1889*t2286*t2391;
  t19525 = t19522 + t19523;
  t19531 = -1.*t19505*t1889*t2831*t2448;
  t19532 = t2491*t19525;
  t19533 = t19531 + t19532;
  t19537 = t2491*t19505*t1889*t2831;
  t19538 = t2448*t19525;
  t19539 = t19537 + t19538;
  t19556 = Sin(var1[3]);
  t19557 = -1.*t2831*t19556;
  t19558 = -1.*t19505*t2325*t2391;
  t19559 = t19557 + t19558;
  t19561 = t19505*t1889*t2286;
  t19563 = -1.*t1255*t19559;
  t19565 = t19561 + t19563;
  t19583 = -1.*t19505*t2831*t2325;
  t19584 = t19556*t2391;
  t19585 = t19583 + t19584;
  t19595 = -1.*t2286*t2448*t19585;
  t19597 = t2491*t19559;
  t19599 = t19595 + t19597;
  t19603 = -1.*t2491*t2286*t19585;
  t19604 = -1.*t2448*t19559;
  t19605 = t19603 + t19604;
  t19569 = -1.*t1255*t19505*t1889;
  t19570 = -1.*t2286*t19559;
  t19571 = t19569 + t19570;
  t19617 = t19505*t2831*t2325;
  t19618 = -1.*t19556*t2391;
  t19619 = t19617 + t19618;
  t19622 = -1.*t2448*t19619;
  t19623 = t2491*t19571;
  t19624 = t19622 + t19623;
  t19626 = -1.*t2491*t19619;
  t19627 = -1.*t2448*t19571;
  t19628 = t19626 + t19627;
  t19657 = t2491*t19619;
  t19658 = t2448*t19571;
  t19660 = t19657 + t19658;
  t19695 = -1.*t19505*t2831;
  t19699 = t19556*t2325*t2391;
  t19700 = t19695 + t19699;
  t19686 = -1.*t2831*t19556*t2325;
  t19687 = -1.*t19505*t2391;
  t19690 = t19686 + t19687;
  t19706 = t1255*t1889*t19556;
  t19707 = -1.*t2286*t19700;
  t19711 = t19706 + t19707;
  t19720 = -1.*t2448*t19690;
  t19721 = t2491*t19711;
  t19722 = t19720 + t19721;
  t19724 = t2491*t19690;
  t19725 = t2448*t19711;
  t19726 = t19724 + t19725;
  t19742 = -1.*t2286*t19556*t2325;
  t19760 = t1255*t1889*t19556*t2391;
  t19761 = t19742 + t19760;
  t19864 = t1889*t2831*t2286*t2448*t19556;
  t19865 = -1.*t2491*t1889*t19556*t2391;
  t19866 = t19864 + t19865;
  t19868 = t2491*t1889*t2831*t2286*t19556;
  t19869 = t1889*t2448*t19556*t2391;
  t19894 = t19868 + t19869;
  t19506 = -0.325*t2854*t19505*t1889*t2831;
  t19509 = 0.1575*t19505*t2286*t2325;
  t19511 = 0.1575*t2824*t19505*t1889*t2391;
  t19512 = t19505*t2286*t2325;
  t19513 = -1.*t1255*t19505*t1889*t2391;
  t19515 = t19512 + t19513;
  t19517 = -0.2255*t19515;
  t19529 = 0.325*t2448*t19525;
  t19535 = -0.575*t2528*t19533;
  t19540 = -0.575*t2471*t19539;
  t19541 = -1.*t2528*t19533;
  t19542 = t2464*t19539;
  t19544 = t19541 + t19542;
  t19545 = -0.295*t19544;
  t19547 = t2464*t19533;
  t19548 = t2528*t19539;
  t19549 = t19547 + t19548;
  t19550 = -0.0641*t19549;
  t19552 = t19506 + t19509 + t19511 + t19517 + t19529 + t19535 + t19540 + t19545 + t19550;
  t19843 = t1255*t19556*t2325;
  t19844 = t1889*t2286*t19556*t2391;
  t19845 = t19843 + t19844;
  t19946 = -1.*t1889*t2831*t2448*t19556;
  t19948 = t2491*t19845;
  t19949 = t19946 + t19948;
  t19951 = -1.*t2491*t1889*t2831*t19556;
  t19952 = -1.*t2448*t19845;
  t19953 = t19951 + t19952;
  t19987 = t2491*t1889*t2831*t19556;
  t19988 = t2448*t19845;
  t19989 = t19987 + t19988;
  t19685 = 0.1575*t1889*t2286*t19556;
  t19702 = t1889*t2286*t19556;
  t20082 = -1.*t2286*t19556*t2325*t2391;
  t20083 = t19706 + t20082;
  t20086 = t2831*t2448*t19556*t2325;
  t20087 = t2491*t20083;
  t20088 = t20086 + t20087;
  t20090 = -1.*t2491*t2831*t19556*t2325;
  t20092 = t2448*t20083;
  t20093 = t20090 + t20092;
  t19860 = 0.1575*t2824*t1889*t2831*t19556;
  t19861 = 0.2255*t1255*t1889*t2831*t19556;
  t19862 = 0.325*t1889*t2831*t2286*t2448*t19556;
  t19863 = 0.325*t2854*t1889*t19556*t2391;
  t19867 = -0.575*t2471*t19866;
  t19897 = -0.575*t2528*t19894;
  t19904 = t2528*t19866;
  t19923 = t2464*t19894;
  t19925 = t19904 + t19923;
  t19927 = -0.0641*t19925;
  t19929 = t2464*t19866;
  t19933 = -1.*t2528*t19894;
  t19935 = t19929 + t19933;
  t19936 = -0.295*t19935;
  t19941 = t19860 + t19861 + t19862 + t19863 + t19867 + t19897 + t19927 + t19936;
  t19586 = -0.1575*t2824*t19585;
  t19587 = -0.2255*t1255*t19585;
  t19588 = -0.325*t2286*t2448*t19585;
  t19594 = -0.325*t2854*t19559;
  t19601 = -0.575*t2471*t19599;
  t19606 = -0.575*t2528*t19605;
  t19607 = t2528*t19599;
  t19608 = t2464*t19605;
  t19609 = t19607 + t19608;
  t19610 = -0.0641*t19609;
  t19611 = t2464*t19599;
  t19612 = -1.*t2528*t19605;
  t19613 = t19611 + t19612;
  t19614 = -0.295*t19613;
  t19615 = t19586 + t19587 + t19588 + t19594 + t19601 + t19606 + t19610 + t19614;
  t20127 = t19505*t2831;
  t20136 = -1.*t19556*t2325*t2391;
  t20181 = t20127 + t20136;
  t20126 = -1.*t2286*t2448*t19690;
  t20189 = t2491*t20181;
  t20193 = t20126 + t20189;
  t20209 = -1.*t2491*t2286*t19690;
  t20210 = -1.*t2448*t20181;
  t20226 = t20209 + t20210;
  t20280 = t2286*t2448*t19690;
  t20281 = -1.*t2491*t20181;
  t20282 = t20280 + t20281;
  t19691 = -0.325*t2854*t19690;
  t19701 = -0.1575*t2824*t19700;
  t20314 = -1.*t2491*t2286*t19700;
  t20316 = t19720 + t20314;
  t20318 = -1.*t2286*t2448*t19700;
  t20319 = t19724 + t20318;
  t20110 = 0.068*t2286*t19690;
  t20111 = -0.325*t1255*t2448*t19690;
  t20112 = 0.575*t1255*t2471*t2448*t19690;
  t20113 = 0.575*t1255*t2491*t2528*t19690;
  t20114 = -1.*t1255*t2464*t2448*t19690;
  t20115 = t1255*t2491*t2528*t19690;
  t20116 = t20114 + t20115;
  t20117 = -0.295*t20116;
  t20118 = -1.*t1255*t2491*t2464*t19690;
  t20119 = -1.*t1255*t2448*t2528*t19690;
  t20120 = t20118 + t20119;
  t20121 = -0.0641*t20120;
  t20122 = t20110 + t20111 + t20112 + t20113 + t20117 + t20121;
  t19740 = 0.1575*t1255*t19556*t2325;
  t19741 = 0.1575*t1889*t2286*t19556*t2391;
  t19796 = 0.325*t2448*t19761;
  t19802 = -0.575*t2471*t2448*t19761;
  t19842 = -0.575*t2491*t2528*t19761;
  t19846 = -0.2255*t19845;
  t19847 = t2464*t2448*t19761;
  t19848 = -1.*t2491*t2528*t19761;
  t19849 = t19847 + t19848;
  t19852 = -0.295*t19849;
  t19853 = t2491*t2464*t19761;
  t19854 = t2448*t2528*t19761;
  t19855 = t19853 + t19854;
  t19856 = -0.0641*t19855;
  t19858 = t19740 + t19741 + t19796 + t19802 + t19842 + t19846 + t19852 + t19856;
  t19555 = -0.1575*t1255*t19505*t1889;
  t19560 = -0.1575*t2286*t19559;
  t19566 = 0.325*t2448*t19565;
  t19567 = -0.575*t2471*t2448*t19565;
  t19568 = -0.575*t2491*t2528*t19565;
  t19572 = -0.2255*t19571;
  t19573 = t2464*t2448*t19565;
  t19574 = -1.*t2491*t2528*t19565;
  t19575 = t19573 + t19574;
  t19576 = -0.295*t19575;
  t19577 = t2491*t2464*t19565;
  t19578 = t2448*t2528*t19565;
  t19579 = t19577 + t19578;
  t19580 = -0.0641*t19579;
  t19581 = t19555 + t19560 + t19566 + t19567 + t19568 + t19572 + t19576 + t19580;
  t20346 = -1.*t1255*t20181;
  t20347 = t19702 + t20346;
  t20385 = t2286*t20181;
  t20386 = t19706 + t20385;
  t19944 = -0.325*t1889*t2831*t2448*t19556;
  t19945 = 0.325*t2491*t19845;
  t19950 = -0.575*t2471*t19949;
  t19954 = -0.575*t2528*t19953;
  t19955 = t2528*t19949;
  t19956 = t2464*t19953;
  t19957 = t19955 + t19956;
  t19958 = -0.0641*t19957;
  t19962 = t2464*t19949;
  t19963 = -1.*t2528*t19953;
  t19964 = t19962 + t19963;
  t19968 = -0.295*t19964;
  t19972 = t19944 + t19945 + t19950 + t19954 + t19958 + t19968;
  t20364 = 0.325*t2491*t20347;
  t20365 = -0.575*t2491*t2471*t20347;
  t20366 = 0.575*t2448*t2528*t20347;
  t20368 = -1.*t2464*t2448*t20347;
  t20369 = t2491*t2528*t20347;
  t20370 = t20368 + t20369;
  t20373 = -0.0641*t20370;
  t20374 = t2491*t2464*t20347;
  t20376 = t2448*t2528*t20347;
  t20378 = t20374 + t20376;
  t20380 = -0.295*t20378;
  t20381 = t20364 + t20365 + t20366 + t20373 + t20380;
  t20274 = -0.325*t2491*t2286*t19690;
  t20275 = -0.325*t2448*t20181;
  t20283 = -0.575*t2528*t20282;
  t20284 = -0.575*t2471*t20226;
  t20285 = -1.*t2528*t20282;
  t20291 = t2464*t20226;
  t20293 = t20285 + t20291;
  t20295 = -0.295*t20293;
  t20296 = t2464*t20282;
  t20297 = t2528*t20226;
  t20300 = t20296 + t20297;
  t20301 = -0.0641*t20300;
  t20302 = t20274 + t20275 + t20283 + t20284 + t20295 + t20301;
  t19620 = -0.325*t2448*t19619;
  t19621 = 0.325*t2491*t19571;
  t19625 = -0.575*t2471*t19624;
  t19629 = -0.575*t2528*t19628;
  t19630 = t2528*t19624;
  t19631 = t2464*t19628;
  t19632 = t19630 + t19631;
  t19633 = -0.0641*t19632;
  t19634 = t2464*t19624;
  t19635 = -1.*t2528*t19628;
  t19639 = t19634 + t19635;
  t19646 = -0.295*t19639;
  t19648 = t19620 + t19621 + t19625 + t19629 + t19633 + t19646;
  t20455 = t2831*t19556*t2325;
  t20480 = t19505*t2391;
  t20518 = t20455 + t20480;
  t20533 = -1.*t1255*t1889*t19556;
  t20534 = -1.*t2286*t20181;
  t20536 = t20533 + t20534;
  t20525 = -1.*t2448*t20518;
  t20537 = t2491*t20536;
  t20541 = t20525 + t20537;
  t20543 = -1.*t2491*t20518;
  t20546 = -1.*t2448*t20536;
  t20547 = t20543 + t20546;
  t20580 = t2448*t20518;
  t20582 = -1.*t2491*t20536;
  t20588 = t20580 + t20582;
  t19986 = -0.575*t2464*t19949;
  t19990 = -0.575*t2528*t19989;
  t19991 = -1.*t2528*t19949;
  t19992 = t2464*t19989;
  t19993 = t19991 + t19992;
  t19994 = -0.0641*t19993;
  t20000 = -1.*t2464*t19949;
  t20070 = -1.*t2528*t19989;
  t20072 = t20000 + t20070;
  t20073 = -0.295*t20072;
  t20074 = t19986 + t19990 + t19994 + t20073;
  t20348 = -0.575*t2491*t2464*t20347;
  t20349 = -0.575*t2448*t2528*t20347;
  t20350 = t2464*t2448*t20347;
  t20351 = -1.*t2491*t2528*t20347;
  t20352 = t20350 + t20351;
  t20353 = -0.0641*t20352;
  t20354 = -1.*t2491*t2464*t20347;
  t20355 = -1.*t2448*t2528*t20347;
  t20357 = t20354 + t20355;
  t20358 = -0.295*t20357;
  t20359 = t20348 + t20349 + t20353 + t20358;
  t20197 = -0.575*t2528*t20193;
  t20227 = -0.575*t2464*t20226;
  t20246 = -1.*t2528*t20193;
  t20252 = -1.*t2464*t20226;
  t20253 = t20246 + t20252;
  t20254 = -0.295*t20253;
  t20258 = t2464*t20193;
  t20264 = -1.*t2528*t20226;
  t20265 = t20258 + t20264;
  t20270 = -0.0641*t20265;
  t20272 = t20197 + t20227 + t20254 + t20270;
  t19656 = -0.575*t2464*t19624;
  t19673 = -0.575*t2528*t19660;
  t19674 = -1.*t2528*t19624;
  t19675 = t2464*t19660;
  t19676 = t19674 + t19675;
  t19677 = -0.0641*t19676;
  t19678 = -1.*t2464*t19624;
  t19679 = -1.*t2528*t19660;
  t19680 = t19678 + t19679;
  t19682 = -0.295*t19680;
  t19683 = t19656 + t19673 + t19677 + t19682;
  t20542 = -0.575*t2528*t20541;
  t20548 = -0.575*t2464*t20547;
  t20549 = -1.*t2528*t20541;
  t20550 = -1.*t2464*t20547;
  t20555 = t20549 + t20550;
  t20556 = -0.295*t20555;
  t20557 = t2464*t20541;
  t20562 = -1.*t2528*t20547;
  t20563 = t20557 + t20562;
  t20564 = -0.0641*t20563;
  t20565 = t20542 + t20548 + t20556 + t20564;
  t20614 = t2491*t20518;
  t20615 = t2448*t20536;
  t20617 = t20614 + t20615;
  t20620 = t2528*t20541;
  t20593 = t2464*t20547;
  t20626 = -1.*t2464*t20541;
  t20627 = -1.*t2528*t20617;
  t20628 = t20626 + t20627;
  t20649 = -0.325*t2854*t1889*t2831*t19556;
  t20650 = 0.1575*t2286*t19556*t2325;
  t20651 = 0.1575*t2824*t1889*t19556*t2391;
  t20652 = t2286*t19556*t2325;
  t20654 = -1.*t1255*t1889*t19556*t2391;
  t20699 = t20652 + t20654;
  t20700 = -0.2255*t20699;
  t20701 = 0.325*t2448*t19845;
  t20705 = -0.575*t2528*t19949;
  t20710 = -0.575*t2471*t19989;
  t20713 = -0.295*t19993;
  t20714 = t2528*t19989;
  t20715 = t19962 + t20714;
  t20720 = -0.0641*t20715;
  t20722 = t20649 + t20650 + t20651 + t20700 + t20701 + t20705 + t20710 + t20713 + t20720;
  t20743 = -0.1575*t1255*t1889*t19556;
  t20744 = -0.1575*t2286*t20181;
  t20745 = 0.325*t2448*t20347;
  t20746 = -0.575*t2471*t2448*t20347;
  t20747 = -0.575*t2491*t2528*t20347;
  t20749 = -0.2255*t20536;
  t20750 = -0.295*t20352;
  t20751 = -0.0641*t20378;
  t20752 = t20743 + t20744 + t20745 + t20746 + t20747 + t20749 + t20750 + t20751;
  t20726 = -0.1575*t2824*t19690;
  t20727 = -0.2255*t1255*t19690;
  t20732 = -0.325*t2286*t2448*t19690;
  t20734 = -0.325*t2854*t20181;
  t20735 = -0.575*t2471*t20193;
  t20736 = -0.575*t2528*t20226;
  t20737 = t2528*t20193;
  t20738 = t20737 + t20291;
  t20739 = -0.0641*t20738;
  t20740 = -0.295*t20265;
  t20741 = t20726 + t20727 + t20732 + t20734 + t20735 + t20736 + t20739 + t20740;
  t20634 = -0.1575*t19505*t1889*t2286;
  t20635 = -0.325*t2854*t19619;
  t20636 = -0.1575*t2824*t19559;
  t20637 = -1.*t19505*t1889*t2286;
  t20638 = t1255*t19559;
  t20639 = t20637 + t20638;
  t20640 = -0.2255*t20639;
  t20641 = 0.325*t2448*t19571;
  t20642 = -0.575*t2528*t19624;
  t20643 = -0.575*t2471*t19660;
  t20644 = -0.295*t19676;
  t20645 = t2528*t19660;
  t20646 = t19634 + t20645;
  t20647 = -0.0641*t20646;
  t20648 = t20634 + t20635 + t20636 + t20640 + t20641 + t20642 + t20643 + t20644 + t20647;
  t20754 = -0.325*t2448*t20518;
  t20756 = 0.325*t2491*t20536;
  t20757 = -0.575*t2471*t20541;
  t20760 = -0.575*t2528*t20547;
  t20761 = t20620 + t20593;
  t20762 = -0.0641*t20761;
  t20763 = -0.295*t20563;
  t20764 = t20754 + t20756 + t20757 + t20760 + t20762 + t20763;
  t20765 = -0.575*t2464*t20541;
  t20766 = -0.575*t2528*t20617;
  t20767 = t2464*t20617;
  t20768 = t20549 + t20767;
  t20770 = -0.0641*t20768;
  t20772 = -0.295*t20628;
  t20773 = t20765 + t20766 + t20770 + t20772;
  t20808 = -1.*t19505*t1889*t2831*t2286*t2448;
  t20809 = t2491*t19505*t1889*t2391;
  t20810 = t20808 + t20809;
  t20812 = -1.*t2491*t19505*t1889*t2831*t2286;
  t20813 = -1.*t19505*t1889*t2448*t2391;
  t20814 = t20812 + t20813;
  t20788 = -1.*t1255*t19505*t2325;
  t20789 = -1.*t19505*t1889*t2286*t2391;
  t20790 = t20788 + t20789;
  t20832 = t19505*t1889*t2831*t2448;
  t20835 = t2491*t20790;
  t20836 = t20832 + t20835;
  t20839 = -1.*t2448*t20790;
  t20840 = t19537 + t20839;
  t20868 = -1.*t2491*t19505*t1889*t2831;
  t20870 = t2448*t20790;
  t20871 = t20868 + t20870;
  t20905 = t19505*t2286*t2325*t2391;
  t20907 = t19569 + t20905;
  t20909 = -1.*t19505*t2831*t2448*t2325;
  t20911 = t2491*t20907;
  t20912 = t20909 + t20911;
  t20914 = t2491*t19505*t2831*t2325;
  t20918 = t2448*t20907;
  t20919 = t20914 + t20918;
  t20804 = -0.1575*t2824*t19505*t1889*t2831;
  t20805 = -0.2255*t1255*t19505*t1889*t2831;
  t20806 = -0.325*t19505*t1889*t2831*t2286*t2448;
  t20807 = -0.325*t2854*t19505*t1889*t2391;
  t20811 = -0.575*t2471*t20810;
  t20815 = -0.575*t2528*t20814;
  t20816 = t2528*t20810;
  t20817 = t2464*t20814;
  t20818 = t20816 + t20817;
  t20819 = -0.0641*t20818;
  t20820 = t2464*t20810;
  t20821 = -1.*t2528*t20814;
  t20822 = t20820 + t20821;
  t20823 = -0.295*t20822;
  t20824 = t20804 + t20805 + t20806 + t20807 + t20811 + t20815 + t20819 + t20823;
  t20970 = -1.*t2491*t2286*t19559;
  t20971 = t19622 + t20970;
  t20974 = -1.*t2286*t2448*t19559;
  t20975 = t19657 + t20974;
  t20992 = t2831*t19556;
  t20993 = t19505*t2325*t2391;
  t20994 = t20992 + t20993;
  t20991 = -1.*t2286*t2448*t19619;
  t20995 = t2491*t20994;
  t20996 = t20991 + t20995;
  t20998 = -1.*t2491*t2286*t19619;
  t20999 = -1.*t2448*t20994;
  t21000 = t20998 + t20999;
  t21016 = t2286*t2448*t19619;
  t21017 = -1.*t2491*t20994;
  t21018 = t21016 + t21017;
  t20783 = -0.1575*t1255*t19505*t2325;
  t20784 = -0.1575*t19505*t1889*t2286*t2391;
  t20785 = 0.325*t2448*t19515;
  t20786 = -0.575*t2471*t2448*t19515;
  t20787 = -0.575*t2491*t2528*t19515;
  t20793 = -0.2255*t20790;
  t20794 = t2464*t2448*t19515;
  t20795 = -1.*t2491*t2528*t19515;
  t20796 = t20794 + t20795;
  t20797 = -0.295*t20796;
  t20798 = t2491*t2464*t19515;
  t20799 = t2448*t2528*t19515;
  t20800 = t20798 + t20799;
  t20801 = -0.0641*t20800;
  t20802 = t20783 + t20784 + t20785 + t20786 + t20787 + t20793 + t20797 + t20801;
  t20942 = 0.068*t2286*t19619;
  t20943 = -0.325*t1255*t2448*t19619;
  t20945 = 0.575*t1255*t2471*t2448*t19619;
  t20951 = 0.575*t1255*t2491*t2528*t19619;
  t20952 = -1.*t1255*t2464*t2448*t19619;
  t20953 = t1255*t2491*t2528*t19619;
  t20955 = t20952 + t20953;
  t20959 = -0.295*t20955;
  t20960 = -1.*t1255*t2491*t2464*t19619;
  t20961 = -1.*t1255*t2448*t2528*t19619;
  t20962 = t20960 + t20961;
  t20963 = -0.0641*t20962;
  t20966 = t20942 + t20943 + t20945 + t20951 + t20959 + t20963;
  t21035 = -1.*t1255*t20994;
  t21036 = t20637 + t21035;
  t21065 = t2286*t20994;
  t21066 = t19569 + t21065;
  t20827 = 0.325*t19505*t1889*t2831*t2448;
  t20829 = 0.325*t2491*t20790;
  t20837 = -0.575*t2471*t20836;
  t20844 = -0.575*t2528*t20840;
  t20846 = t2528*t20836;
  t20848 = t2464*t20840;
  t20850 = t20846 + t20848;
  t20851 = -0.0641*t20850;
  t20852 = t2464*t20836;
  t20858 = -1.*t2528*t20840;
  t20860 = t20852 + t20858;
  t20861 = -0.295*t20860;
  t20862 = t20827 + t20829 + t20837 + t20844 + t20851 + t20861;
  t21050 = 0.325*t2491*t21036;
  t21051 = -0.575*t2491*t2471*t21036;
  t21052 = 0.575*t2448*t2528*t21036;
  t21053 = -1.*t2464*t2448*t21036;
  t21054 = t2491*t2528*t21036;
  t21055 = t21053 + t21054;
  t21056 = -0.0641*t21055;
  t21057 = t2491*t2464*t21036;
  t21058 = t2448*t2528*t21036;
  t21059 = t21057 + t21058;
  t21060 = -0.295*t21059;
  t21061 = t21050 + t21051 + t21052 + t21056 + t21060;
  t21014 = -0.325*t2491*t2286*t19619;
  t21015 = -0.325*t2448*t20994;
  t21019 = -0.575*t2528*t21018;
  t21020 = -0.575*t2471*t21000;
  t21021 = -1.*t2528*t21018;
  t21022 = t2464*t21000;
  t21023 = t21021 + t21022;
  t21024 = -0.295*t21023;
  t21025 = t2464*t21018;
  t21026 = t2528*t21000;
  t21027 = t21025 + t21026;
  t21028 = -0.0641*t21027;
  t21029 = t21014 + t21015 + t21019 + t21020 + t21024 + t21028;
  t21086 = t1255*t19505*t1889;
  t21087 = -1.*t2286*t20994;
  t21088 = t21086 + t21087;
  t21085 = -1.*t2448*t19585;
  t21089 = t2491*t21088;
  t21090 = t21085 + t21089;
  t21092 = -1.*t2491*t19585;
  t21093 = -1.*t2448*t21088;
  t21094 = t21092 + t21093;
  t21114 = t2448*t19585;
  t21122 = -1.*t2491*t21088;
  t21124 = t21114 + t21122;
  t20866 = -0.575*t2464*t20836;
  t20872 = -0.575*t2528*t20871;
  t20876 = -1.*t2528*t20836;
  t20878 = t2464*t20871;
  t20880 = t20876 + t20878;
  t20886 = -0.0641*t20880;
  t20888 = -1.*t2464*t20836;
  t20891 = -1.*t2528*t20871;
  t20892 = t20888 + t20891;
  t20893 = -0.295*t20892;
  t20896 = t20866 + t20872 + t20886 + t20893;
  t21037 = -0.575*t2491*t2464*t21036;
  t21038 = -0.575*t2448*t2528*t21036;
  t21040 = t2464*t2448*t21036;
  t21041 = -1.*t2491*t2528*t21036;
  t21042 = t21040 + t21041;
  t21043 = -0.0641*t21042;
  t21044 = -1.*t2491*t2464*t21036;
  t21045 = -1.*t2448*t2528*t21036;
  t21046 = t21044 + t21045;
  t21047 = -0.295*t21046;
  t21048 = t21037 + t21038 + t21043 + t21047;
  t20997 = -0.575*t2528*t20996;
  t21001 = -0.575*t2464*t21000;
  t21003 = -1.*t2528*t20996;
  t21004 = -1.*t2464*t21000;
  t21005 = t21003 + t21004;
  t21006 = -0.295*t21005;
  t21007 = t2464*t20996;
  t21009 = -1.*t2528*t21000;
  t21010 = t21007 + t21009;
  t21011 = -0.0641*t21010;
  t21012 = t20997 + t21001 + t21006 + t21011;
  t21091 = -0.575*t2528*t21090;
  t21095 = -0.575*t2464*t21094;
  t21096 = -1.*t2528*t21090;
  t21097 = -1.*t2464*t21094;
  t21098 = t21096 + t21097;
  t21099 = -0.295*t21098;
  t21100 = t2464*t21090;
  t21101 = -1.*t2528*t21094;
  t21102 = t21100 + t21101;
  t21103 = -0.0641*t21102;
  t21108 = t21091 + t21095 + t21099 + t21103;
  t21160 = t2491*t19585;
  t21163 = t2448*t21088;
  t21164 = t21160 + t21163;
  t21167 = t2528*t21090;
  t21135 = t2464*t21094;
  t21175 = -1.*t2464*t21090;
  t21176 = -1.*t2528*t21164;
  t21177 = t21175 + t21176;
  p_output1[0]=(t3059 + t3099 + t3103 + t3175 + t3200 - 0.575*t2528*t3221 - 0.575*t2471*t3291 - 0.295*(-1.*t2528*t3221 + t2464*t3291) - 0.0641*(t2464*t3221 + t2528*t3291))*var2[4] + t3055*var2[5] + t2818*var2[15] + t3747*var2[16] + t4468*var2[17];
  p_output1[1]=t3055*var2[4] + (-0.2255*t1255*t1889*t2391 - 0.325*t1889*t2286*t2391*t2448 - 0.575*t14163*t2471 - 0.575*t14144*t2528 - 0.295*(t14163*t2464 - 1.*t14144*t2528) - 0.0641*(t14144*t2464 + t14163*t2528) + t3059 + t3103)*var2[5] + t4988*var2[15] + t14080*var2[16] + t13530*var2[17];
  p_output1[2]=t2818*var2[4] + t4988*var2[5] + (0.1575*t1255*t1889*t2391 + t3099 + t3175 - 0.575*t2448*t2471*t3199 - 0.575*t2491*t2528*t3199 - 0.0641*(t2464*t2491*t3199 + t2448*t2528*t3199) - 0.295*(t2448*t2464*t3199 - 1.*t2491*t2528*t3199) + t3200)*var2[15] + t17841*var2[16] + t17374*var2[17];
  p_output1[3]=t3747*var2[4] + t14080*var2[5] + t17841*var2[15] + (-0.325*t18587*t2448 - 0.575*t18594*t2471 - 0.575*t18665*t2528 - 0.0641*(t18665*t2464 + t18594*t2528) - 0.295*(t18700 - 1.*t18665*t2528) - 0.325*t1889*t2491*t2831)*var2[16] + t18654*var2[17];
  p_output1[4]=t4468*var2[4] + t13530*var2[5] + t17374*var2[15] + t18654*var2[16] + (-0.0641*t19204 - 0.575*t19082*t2464 - 0.295*(t19110 - 1.*t19082*t2464) + 0.575*t18590*t2528)*var2[17];
  p_output1[5]=1.;
  p_output1[6]=0.1575*t1889*t2286 - 0.2255*(t1889*t2286 + t1255*t2325*t2391) + 0.325*t2448*t2608 - 0.1575*t2325*t2391*t2824 + 0.325*t2325*t2831*t2854 - 0.575*t2528*t3477 - 0.575*t2471*t3867 - 0.0641*(t3710 + t2528*t3867) - 0.295*t4080;
  p_output1[7]=-0.295*t13140 + 0.2255*t1255*t1889*t2831 + 0.325*t1889*t2286*t2448*t2831 + 0.1575*t1889*t2824*t2831 + 0.325*t1889*t2391*t2854 - 0.575*t2471*t5024 - 0.0641*(t13745 + t2528*t5024) - 0.575*t2528*t5065;
  p_output1[8]=-0.295*t14471 - 0.0641*t17769 - 0.2255*t18587 + 0.1575*t1255*t2325 + 0.1575*t1889*t2286*t2391 + 0.325*t2448*t3152 - 0.575*t2448*t2471*t3152 - 0.575*t2491*t2528*t3152;
  p_output1[9]=-0.295*t18652 - 0.0641*(t18700 + t19110) - 0.575*t18590*t2471 + 0.325*t18587*t2491 - 0.575*t18594*t2528 - 0.325*t1889*t2448*t2831;
  p_output1[10]=-0.295*t19204 - 0.575*t18590*t2464 - 0.0641*(t18600 + t19082*t2464) - 0.575*t19082*t2528;
  p_output1[11]=(t19685 + t19691 + t19701 - 0.2255*(t1255*t19700 + t19702) + 0.325*t19711*t2448 - 0.575*t19726*t2471 - 0.575*t19722*t2528 - 0.295*(t19726*t2464 - 1.*t19722*t2528) - 0.0641*(t19722*t2464 + t19726*t2528))*var2[3] + t19552*var2[4] + t19615*var2[5] + t19581*var2[15] + t19648*var2[16] + t19683*var2[17];
  p_output1[12]=t19552*var2[3] + (t19685 - 0.2255*(t19702 + t1255*t19556*t2325*t2391) + 0.325*t20083*t2448 - 0.575*t20093*t2471 - 0.575*t20088*t2528 - 0.295*(t20093*t2464 - 1.*t20088*t2528) - 0.0641*(t20088*t2464 + t20093*t2528) - 0.1575*t19556*t2325*t2391*t2824 + 0.325*t19556*t2325*t2831*t2854)*var2[4] + t19941*var2[5] + t19858*var2[15] + t19972*var2[16] + t20074*var2[17];
  p_output1[13]=t19615*var2[3] + t19941*var2[4] + (t19691 - 0.2255*t1255*t19700 + t19701 - 0.325*t19700*t2286*t2448 - 0.575*t20319*t2471 - 0.575*t20316*t2528 - 0.295*(t20319*t2464 - 1.*t20316*t2528) - 0.0641*(t20316*t2464 + t20319*t2528))*var2[5] + t20122*var2[15] + t20302*var2[16] + t20272*var2[17];
  p_output1[14]=t19581*var2[3] + t19858*var2[4] + t20122*var2[5] + (t19685 - 0.1575*t1255*t20181 - 0.2255*t20347 + 0.325*t20386*t2448 - 0.575*t20386*t2448*t2471 - 0.575*t20386*t2491*t2528 - 0.0641*(t20386*t2464*t2491 + t20386*t2448*t2528) - 0.295*(t20386*t2448*t2464 - 1.*t20386*t2491*t2528))*var2[15] + t20381*var2[16] + t20359*var2[17];
  p_output1[15]=t19648*var2[3] + t19972*var2[4] + t20302*var2[5] + t20381*var2[15] + (-0.325*t20536*t2448 - 0.575*t20547*t2471 - 0.325*t20518*t2491 - 0.575*t20588*t2528 - 0.0641*(t20588*t2464 + t20547*t2528) - 0.295*(t20593 - 1.*t20588*t2528))*var2[16] + t20565*var2[17];
  p_output1[16]=t19683*var2[3] + t20074*var2[4] + t20272*var2[5] + t20359*var2[15] + t20565*var2[16] + (-0.0641*t20628 - 0.575*t20617*t2464 - 0.295*(t20620 - 1.*t20617*t2464) + 0.575*t20541*t2528)*var2[17];
  p_output1[17]=1.;
  p_output1[18]=t20648;
  p_output1[19]=t20722;
  p_output1[20]=t20741;
  p_output1[21]=t20752;
  p_output1[22]=t20764;
  p_output1[23]=t20773;
  p_output1[24]=t20648*var2[3] + t20722*var2[4] + t20741*var2[5] + t20752*var2[15] + t20764*var2[16] + t20773*var2[17];
  p_output1[25]=t20722*var2[3] + (t20634 - 0.2255*(t20637 - 1.*t1255*t19505*t2325*t2391) + 0.325*t20907*t2448 - 0.575*t20919*t2471 - 0.575*t20912*t2528 - 0.295*(t20919*t2464 - 1.*t20912*t2528) - 0.0641*(t20912*t2464 + t20919*t2528) + 0.1575*t19505*t2325*t2391*t2824 - 0.325*t19505*t2325*t2831*t2854)*var2[4] + t20824*var2[5] + t20802*var2[15] + t20862*var2[16] + t20896*var2[17];
  p_output1[26]=t20741*var2[3] + t20824*var2[4] + (-0.2255*t1255*t19559 + t20635 + t20636 - 0.325*t19559*t2286*t2448 - 0.575*t20975*t2471 - 0.575*t20971*t2528 - 0.295*(t20975*t2464 - 1.*t20971*t2528) - 0.0641*(t20971*t2464 + t20975*t2528))*var2[5] + t20966*var2[15] + t21029*var2[16] + t21012*var2[17];
  p_output1[27]=t20752*var2[3] + t20802*var2[4] + t20966*var2[5] + (t20634 - 0.1575*t1255*t20994 - 0.2255*t21036 + 0.325*t21066*t2448 - 0.575*t21066*t2448*t2471 - 0.575*t21066*t2491*t2528 - 0.0641*(t21066*t2464*t2491 + t21066*t2448*t2528) - 0.295*(t21066*t2448*t2464 - 1.*t21066*t2491*t2528))*var2[15] + t21061*var2[16] + t21048*var2[17];
  p_output1[28]=t20764*var2[3] + t20862*var2[4] + t21029*var2[5] + t21061*var2[15] + (-0.325*t21088*t2448 - 0.575*t21094*t2471 - 0.325*t19585*t2491 - 0.575*t21124*t2528 - 0.0641*(t21124*t2464 + t21094*t2528) - 0.295*(t21135 - 1.*t21124*t2528))*var2[16] + t21108*var2[17];
  p_output1[29]=t20773*var2[3] + t20896*var2[4] + t21012*var2[5] + t21048*var2[15] + t21108*var2[16] + (-0.0641*t21177 - 0.575*t21164*t2464 - 0.295*(t21167 - 1.*t21164*t2464) + 0.575*t21090*t2528)*var2[17];
  p_output1[30]=1.;
  p_output1[31]=t20542 - 0.295*t20768 - 0.1575*t1889*t19556*t2286 - 0.2255*(t1255*t20181 - 1.*t1889*t19556*t2286) + 0.325*t20536*t2448 - 0.575*t20617*t2471 - 0.0641*(t20557 + t20617*t2528) - 0.1575*t20181*t2824 - 0.325*t20518*t2854;
  p_output1[32]=-0.295*t20880 - 0.1575*t19505*t2286*t2325 - 0.2255*(-1.*t19505*t2286*t2325 + t1255*t1889*t19505*t2391) + 0.325*t20790*t2448 - 0.575*t20871*t2471 - 0.575*t20836*t2528 - 0.0641*(t20852 + t20871*t2528) - 0.1575*t1889*t19505*t2391*t2824 + 0.325*t1889*t19505*t2831*t2854;
  p_output1[33]=-0.2255*t1255*t19619 - 0.295*t21010 - 0.325*t19619*t2286*t2448 - 0.575*t20996*t2471 - 0.575*t21000*t2528 - 0.0641*(t21022 + t20996*t2528) - 0.1575*t19619*t2824 - 0.325*t20994*t2854;
  p_output1[34]=0.1575*t1255*t1889*t19505 - 0.295*t21042 - 0.0641*t21059 - 0.2255*t21088 - 0.1575*t20994*t2286 + 0.325*t21036*t2448 - 0.575*t21036*t2448*t2471 - 0.575*t21036*t2491*t2528;
  p_output1[35]=-0.295*t21102 - 0.0641*(t21135 + t21167) - 0.325*t19585*t2448 - 0.575*t21090*t2471 + 0.325*t21088*t2491 - 0.575*t21094*t2528;
  p_output1[36]=-0.295*t21177 - 0.575*t21090*t2464 - 0.0641*(t21096 + t21164*t2464) - 0.575*t21164*t2528;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 37, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_impact_velocity_RrFoot_DiagonalStance.hh"

namespace DiagonalStance
{

void J_impact_velocity_RrFoot_DiagonalStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
