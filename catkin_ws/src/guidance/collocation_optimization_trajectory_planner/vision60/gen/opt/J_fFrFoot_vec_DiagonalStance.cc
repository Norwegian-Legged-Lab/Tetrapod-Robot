/*
 * Automatically Generated from Mathematica.
 * Thu 12 May 2022 11:31:43 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t3553;
  double t2891;
  double t3564;
  double t4660;
  double t4536;
  double t4610;
  double t5321;
  double t3518;
  double t4652;
  double t5325;
  double t5641;
  double t3814;
  double t6057;
  double t6073;
  double t6118;
  double t5776;
  double t6699;
  double t6755;
  double t6947;
  double t7057;
  double t7058;
  double t7312;
  double t6159;
  double t6163;
  double t6588;
  double t10049;
  double t10070;
  double t10114;
  double t10851;
  double t10882;
  double t11176;
  double t10770;
  double t10773;
  double t10801;
  double t3543;
  double t3864;
  double t4057;
  double t11662;
  double t11686;
  double t5720;
  double t6601;
  double t6623;
  double t6663;
  double t7421;
  double t7847;
  double t8806;
  double t8910;
  double t8937;
  double t8679;
  double t8686;
  double t8695;
  double t10117;
  double t10715;
  double t10725;
  double t11743;
  double t11755;
  double t11809;
  double t11696;
  double t11700;
  double t11713;
  double t11364;
  double t11365;
  double t11399;
  double t17720;
  double t17727;
  double t17732;
  double t17678;
  double t17679;
  double t17682;
  double t17979;
  double t17982;
  double t17989;
  double t12091;
  double t12108;
  double t12120;
  double t12125;
  double t12126;
  double t12150;
  double t12161;
  double t12163;
  double t12172;
  double t15007;
  double t15073;
  double t15074;
  double t16975;
  double t16976;
  double t16998;
  double t17201;
  double t17208;
  double t17217;
  double t17356;
  double t17411;
  double t17419;
  double t17437;
  double t17443;
  double t17643;
  double t17736;
  double t17738;
  double t17786;
  double t17846;
  double t17857;
  double t17936;
  double t18414;
  double t18415;
  double t18418;
  double t18314;
  double t18343;
  double t18362;
  double t18586;
  double t18590;
  double t18596;
  double t18661;
  double t18663;
  double t18664;
  double t18673;
  double t18691;
  double t18701;
  double t18566;
  double t18617;
  double t18704;
  double t18729;
  double t18556;
  double t18730;
  double t18733;
  double t18765;
  double t18769;
  double t18800;
  double t18822;
  double t18827;
  double t18851;
  double t18855;
  double t18861;
  double t18868;
  double t18872;
  double t18875;
  double t18880;
  double t18936;
  double t18963;
  double t19012;
  double t11527;
  double t11643;
  double t11645;
  double t19133;
  double t19138;
  double t19309;
  double t19048;
  double t19052;
  double t19056;
  double t18742;
  double t19020;
  double t19024;
  double t20064;
  double t20099;
  double t20181;
  double t23979;
  double t23983;
  double t23990;
  double t20598;
  double t20627;
  double t20971;
  double t21174;
  double t21803;
  double t21805;
  double t21818;
  double t21845;
  double t22244;
  double t22325;
  double t22326;
  double t22553;
  double t22965;
  double t23012;
  double t23051;
  double t23052;
  double t23506;
  double t23511;
  double t23512;
  double t23546;
  double t23806;
  double t23858;
  double t23892;
  double t23894;
  double t9181;
  double t9182;
  double t9205;
  double t26343;
  double t26530;
  double t26555;
  double t26578;
  double t26592;
  double t9117;
  double t9164;
  double t9176;
  double t26594;
  double t26599;
  double t26704;
  double t27150;
  double t27155;
  double t27160;
  double t9562;
  double t9577;
  double t9578;
  double t26278;
  double t33484;
  double t33492;
  double t33894;
  double t33904;
  double t33938;
  double t34040;
  double t34206;
  double t34221;
  double t34294;
  double t33770;
  double t34096;
  double t34097;
  double t34205;
  double t34303;
  double t34304;
  double t34354;
  double t34494;
  double t34596;
  double t9725;
  double t10729;
  double t10730;
  double t11237;
  double t11425;
  double t11429;
  double t35730;
  double t35830;
  double t35960;
  double t35716;
  double t36188;
  double t36214;
  double t36920;
  double t36940;
  double t38170;
  double t38171;
  double t38228;
  double t36909;
  double t36967;
  double t37770;
  double t38166;
  double t38237;
  double t38238;
  double t38244;
  double t38248;
  double t38257;
  double t24023;
  double t24251;
  double t24254;
  double t24423;
  double t24459;
  double t24585;
  double t24645;
  double t25110;
  double t25732;
  double t25764;
  double t41406;
  double t42375;
  double t42473;
  double t26577;
  double t26783;
  double t29410;
  double t29520;
  double t44414;
  double t45237;
  double t45367;
  double t29977;
  double t30026;
  double t46518;
  double t46850;
  double t46975;
  double t30413;
  double t30622;
  double t47197;
  double t47235;
  double t48473;
  double t54818;
  double t54962;
  double t55055;
  double t30944;
  double t55657;
  double t31136;
  double t31403;
  double t31433;
  double t55147;
  double t55172;
  double t55175;
  double t34101;
  double t34824;
  double t56150;
  double t35193;
  double t35282;
  double t35303;
  double t35386;
  double t35439;
  double t35440;
  double t38080;
  double t38395;
  double t38437;
  double t38496;
  double t38525;
  double t38677;
  double t38859;
  double t38987;
  double t55833;
  double t55837;
  double t55883;
  double t55884;
  double t55607;
  double t55638;
  double t55703;
  double t55719;
  double t55742;
  double t55748;
  double t55762;
  double t55774;
  double t56842;
  double t56848;
  double t56338;
  double t56347;
  double t56913;
  double t56914;
  double t56151;
  double t57144;
  double t57081;
  double t57085;
  double t57092;
  double t57116;
  double t57119;
  double t57121;
  double t56306;
  double t56307;
  double t56225;
  double t56870;
  double t56871;
  double t56613;
  double t56534;
  double t56535;
  double t56948;
  double t56968;
  double t56589;
  double t56560;
  double t56562;
  double t56873;
  double t56970;
  double t57216;
  double t57226;
  double t57273;
  double t57958;
  double t57959;
  double t58033;
  double t58047;
  double t57666;
  double t57682;
  double t57690;
  double t58465;
  double t58697;
  t3553 = Cos(var1[12]);
  t2891 = Cos(var1[4]);
  t3564 = Sin(var1[4]);
  t4660 = Cos(var1[13]);
  t4536 = Cos(var1[14]);
  t4610 = Sin(var1[13]);
  t5321 = Sin(var1[14]);
  t3518 = Sin(var1[12]);
  t4652 = t4536*t4610;
  t5325 = -1.*t4660*t5321;
  t5641 = t4652 + t5325;
  t3814 = Sin(var1[5]);
  t6057 = t4660*t4536;
  t6073 = t4610*t5321;
  t6118 = t6057 + t6073;
  t5776 = Cos(var1[5]);
  t6699 = -1.*t4536*t4610;
  t6755 = t4660*t5321;
  t6947 = t6699 + t6755;
  t7057 = t5776*t6947;
  t7058 = t3518*t6118*t3814;
  t7312 = t7057 + t7058;
  t6159 = t5776*t6118;
  t6163 = t3518*t5641*t3814;
  t6588 = t6159 + t6163;
  t10049 = -1.*t4660*t4536;
  t10070 = -1.*t4610*t5321;
  t10114 = t10049 + t10070;
  t10851 = t3553*t5641*t3564;
  t10882 = t2891*t6588;
  t11176 = t10851 + t10882;
  t10770 = t3553*t6118*t3564;
  t10773 = t2891*t7312;
  t10801 = t10770 + t10773;
  t3543 = t2891*t3518;
  t3864 = t3553*t3564*t3814;
  t4057 = t3543 + t3864;
  t11662 = Sin(var1[3]);
  t11686 = Cos(var1[3]);
  t5720 = t3553*t2891*t5641;
  t6601 = -1.*t3564*t6588;
  t6623 = t5720 + t6601;
  t6663 = t3553*t2891*t6118;
  t7421 = -1.*t3564*t7312;
  t7847 = t6663 + t7421;
  t8806 = t5776*t3518*t5641;
  t8910 = -1.*t6118*t3814;
  t8937 = t8806 + t8910;
  t8679 = t5776*t3518*t6118;
  t8686 = -1.*t6947*t3814;
  t8695 = t8679 + t8686;
  t10117 = t5776*t10114;
  t10715 = t3518*t6947*t3814;
  t10725 = t10117 + t10715;
  t11743 = -1.*t5776*t3518*t6118;
  t11755 = t6947*t3814;
  t11809 = t11743 + t11755;
  t11696 = -1.*t5776*t3518*t5641;
  t11700 = t6118*t3814;
  t11713 = t11696 + t11700;
  t11364 = t5776*t5641;
  t11365 = t3518*t10114*t3814;
  t11399 = t11364 + t11365;
  t17720 = t11686*t11713;
  t17727 = -1.*t11662*t6623;
  t17732 = t17720 + t17727;
  t17678 = t11686*t11809;
  t17679 = -1.*t11662*t7847;
  t17682 = t17678 + t17679;
  t17979 = t3553*t11686*t5776;
  t17982 = -1.*t11662*t4057;
  t17989 = t17979 + t17982;
  t12091 = -1.*t3518*t3564;
  t12108 = t3553*t2891*t3814;
  t12120 = t12091 + t12108;
  t12125 = -1.*t3553*t5641*t3564;
  t12126 = -1.*t2891*t6588;
  t12150 = t12125 + t12126;
  t12161 = -1.*t3553*t6118*t3564;
  t12163 = -1.*t2891*t7312;
  t12172 = t12161 + t12163;
  t15007 = t3553*t2891;
  t15073 = -1.*t3518*t3564*t3814;
  t15074 = t15007 + t15073;
  t16975 = -1.*t2891*t3518*t5641;
  t16976 = -1.*t3553*t5641*t3564*t3814;
  t16998 = t16975 + t16976;
  t17201 = -1.*t2891*t3518*t6118;
  t17208 = -1.*t3553*t6118*t3564*t3814;
  t17217 = t17201 + t17208;
  t17356 = -1.*t5776*t3518*t6947;
  t17411 = t10114*t3814;
  t17419 = t17356 + t17411;
  t17437 = t3553*t2891*t6947;
  t17443 = -1.*t3564*t10725;
  t17643 = t17437 + t17443;
  t17736 = -1.*t5776*t3518*t10114;
  t17738 = t5641*t3814;
  t17786 = t17736 + t17738;
  t17846 = t3553*t2891*t10114;
  t17857 = -1.*t3564*t11399;
  t17936 = t17846 + t17857;
  t18414 = t11662*t11713;
  t18415 = t11686*t6623;
  t18418 = t18414 + t18415;
  t18314 = t11662*t11809;
  t18343 = t11686*t7847;
  t18362 = t18314 + t18343;
  t18586 = -0.0641*t4536;
  t18590 = -0.28*t5321;
  t18596 = t18586 + t18590;
  t18661 = -1.*t4536;
  t18663 = 1. + t18661;
  t18664 = 0.075*t18663;
  t18673 = 0.355*t4536;
  t18691 = -0.0641*t5321;
  t18701 = t18664 + t18673 + t18691;
  t18566 = -0.325*t4610;
  t18617 = t4660*t18596;
  t18704 = t4610*t18701;
  t18729 = t18566 + t18617 + t18704;
  t18556 = -0.068*t3518;
  t18730 = t3553*t18729;
  t18733 = t18556 + t18730;
  t18765 = -1.*t4660;
  t18769 = 1. + t18765;
  t18800 = 0.325*t18769;
  t18822 = -1.*t4610*t18596;
  t18827 = t4660*t18701;
  t18851 = t18800 + t18822 + t18827;
  t18855 = t5776*t18851;
  t18861 = -1.*t3553;
  t18868 = 1. + t18861;
  t18872 = -0.1575*t18868;
  t18875 = -0.2255*t3553;
  t18880 = -1.*t3518*t18729;
  t18936 = t18872 + t18875 + t18880;
  t18963 = -1.*t18936*t3814;
  t19012 = t18855 + t18963;
  t11527 = t3518*t3564;
  t11643 = -1.*t3553*t2891*t3814;
  t11645 = t11527 + t11643;
  t19133 = t2891*t18733;
  t19138 = -1.*t3564*t19012;
  t19309 = t19133 + t19138;
  t19048 = t18733*t3564;
  t19052 = t2891*t19012;
  t19056 = t19048 + t19052;
  t18742 = -1.*t18733*t3564;
  t19020 = -1.*t2891*t19012;
  t19024 = t18742 + t19020;
  t20064 = t5776*t18936;
  t20099 = t18851*t3814;
  t20181 = t20064 + t20099;
  t23979 = -1.*t5776*t18936;
  t23983 = -1.*t18851*t3814;
  t23990 = t23979 + t23983;
  t20598 = t3553*t5776*t20181;
  t20627 = t11645*t19056;
  t20971 = t4057*t19309;
  t21174 = t20598 + t20627 + t20971;
  t21803 = -1.*t20181*t11713;
  t21805 = -1.*t19056*t11176;
  t21818 = -1.*t19309*t6623;
  t21845 = t21803 + t21805 + t21818;
  t22244 = t20181*t11713;
  t22325 = t19056*t11176;
  t22326 = t19309*t6623;
  t22553 = t22244 + t22325 + t22326;
  t22965 = -1.*t20181*t11809;
  t23012 = -1.*t19056*t10801;
  t23051 = -1.*t19309*t7847;
  t23052 = t22965 + t23012 + t23051;
  t23506 = -1.*t3553*t5776*t20181;
  t23511 = -1.*t11645*t19056;
  t23512 = -1.*t4057*t19309;
  t23546 = t23506 + t23511 + t23512;
  t23806 = t20181*t11809;
  t23858 = t19056*t10801;
  t23892 = t19309*t7847;
  t23894 = t23806 + t23858 + t23892;
  t9181 = -1.*t3518*t5641*t3564;
  t9182 = t3553*t2891*t5641*t3814;
  t9205 = t9181 + t9182;
  t26343 = 0.068*t3518;
  t26530 = -1.*t3553*t18729;
  t26555 = t26343 + t26530;
  t26578 = -0.068*t3553;
  t26592 = t26578 + t18880;
  t9117 = t3553*t3564;
  t9164 = t2891*t3518*t3814;
  t9176 = t9117 + t9164;
  t26594 = t26592*t3564;
  t26599 = -1.*t2891*t26555*t3814;
  t26704 = t26594 + t26599;
  t27150 = t2891*t26592;
  t27155 = t26555*t3564*t3814;
  t27160 = t27150 + t27155;
  t9562 = -1.*t3518*t6118*t3564;
  t9577 = t3553*t2891*t6118*t3814;
  t9578 = t9562 + t9577;
  t26278 = Power(t5776,2);
  t33484 = -0.325*t4660;
  t33492 = t33484 + t18822 + t18827;
  t33894 = 0.325*t4610;
  t33904 = -1.*t4660*t18596;
  t33938 = -1.*t4610*t18701;
  t34040 = t33894 + t33904 + t33938;
  t34206 = t5776*t34040;
  t34221 = t3518*t33492*t3814;
  t34294 = t34206 + t34221;
  t33770 = -1.*t5776*t3518*t33492;
  t34096 = t34040*t3814;
  t34097 = t33770 + t34096;
  t34205 = t3553*t33492*t3564;
  t34303 = t2891*t34294;
  t34304 = t34205 + t34303;
  t34354 = t3553*t2891*t33492;
  t34494 = -1.*t3564*t34294;
  t34596 = t34354 + t34494;
  t9725 = t3553*t6947*t3564;
  t10729 = t2891*t10725;
  t10730 = t9725 + t10729;
  t11237 = t3553*t10114*t3564;
  t11425 = t2891*t11399;
  t11429 = t11237 + t11425;
  t35730 = -0.28*t4536;
  t35830 = 0.0641*t5321;
  t35960 = t35730 + t35830;
  t35716 = t4610*t18596;
  t36188 = t4660*t35960;
  t36214 = t35716 + t36188;
  t36920 = -1.*t4610*t35960;
  t36940 = t18617 + t36920;
  t38170 = t5776*t36940;
  t38171 = t3518*t36214*t3814;
  t38228 = t38170 + t38171;
  t36909 = -1.*t5776*t3518*t36214;
  t36967 = t36940*t3814;
  t37770 = t36909 + t36967;
  t38166 = t3553*t36214*t3564;
  t38237 = t2891*t38228;
  t38238 = t38166 + t38237;
  t38244 = t3553*t2891*t36214;
  t38248 = -1.*t3564*t38228;
  t38257 = t38244 + t38248;
  t24023 = -1.*t3553*t3814*t20181;
  t24251 = -1.*t20181*t6588;
  t24254 = -1.*t19012*t11713;
  t24423 = t20181*t6588;
  t24459 = t19012*t11713;
  t24585 = -1.*t19012*t11809;
  t24645 = -1.*t20181*t7312;
  t25110 = t3553*t3814*t20181;
  t25732 = t19012*t11809;
  t25764 = t20181*t7312;
  t41406 = t3518*t18733;
  t42375 = -1.*t3553*t3814*t19012;
  t42473 = t41406 + t42375 + t20598;
  t26577 = t3553*t26278*t26555;
  t26783 = -1.*t5776*t3518*t20181;
  t29410 = t3553*t5776*t5641*t20181;
  t29520 = -1.*t5776*t26555*t11713;
  t44414 = -1.*t3553*t18733*t5641;
  t45237 = -1.*t19012*t6588;
  t45367 = t44414 + t45237 + t21803;
  t29977 = -1.*t3553*t5776*t5641*t20181;
  t30026 = t5776*t26555*t11713;
  t46518 = t3553*t18733*t5641;
  t46850 = t19012*t6588;
  t46975 = t46518 + t46850 + t22244;
  t30413 = t3553*t5776*t6118*t20181;
  t30622 = -1.*t5776*t26555*t11809;
  t47197 = -1.*t3553*t18733*t6118;
  t47235 = -1.*t19012*t7312;
  t48473 = t47197 + t22965 + t47235;
  t54818 = -1.*t3518*t18733;
  t54962 = t3553*t3814*t19012;
  t55055 = t54818 + t54962 + t23506;
  t30944 = -1.*t3553*t26278*t26555;
  t55657 = Power(t3814,2);
  t31136 = t5776*t3518*t20181;
  t31403 = -1.*t3553*t5776*t6118*t20181;
  t31433 = t5776*t26555*t11809;
  t55147 = t3553*t18733*t6118;
  t55172 = t19012*t7312;
  t55175 = t55147 + t23806 + t55172;
  t34101 = t3553*t5776*t34097;
  t34824 = -1.*t34097*t11713;
  t56150 = Power(t3553,2);
  t35193 = t34097*t11713;
  t35282 = -1.*t34097*t11809;
  t35303 = -1.*t20181*t17419;
  t35386 = -1.*t3553*t5776*t34097;
  t35439 = t34097*t11809;
  t35440 = t20181*t17419;
  t38080 = t3553*t5776*t37770;
  t38395 = -1.*t20181*t17786;
  t38437 = -1.*t37770*t11713;
  t38496 = t20181*t17786;
  t38525 = t37770*t11713;
  t38677 = -1.*t37770*t11809;
  t38859 = -1.*t3553*t5776*t37770;
  t38987 = t37770*t11809;
  t55833 = -1.*t3553*t18733;
  t55837 = -1.*t3518*t26592;
  t55883 = -1.*t3518*t18733*t6118;
  t55884 = t3553*t26592*t6118;
  t55607 = t3553*t18733;
  t55638 = t3518*t26592;
  t55703 = t3518*t18733*t5641;
  t55719 = -1.*t3553*t26592*t5641;
  t55742 = -1.*t3518*t18733*t5641;
  t55748 = t3553*t26592*t5641;
  t55762 = t3518*t18733*t6118;
  t55774 = -1.*t3553*t26592*t6118;
  t56842 = -1.*t3553*t18936;
  t56848 = t54818 + t56842;
  t56338 = t3553*t18733*t6947;
  t56347 = t56150*t33492*t6118;
  t56913 = t3553*t18936;
  t56914 = t41406 + t56913;
  t56151 = -1.*t56150*t33492*t5641;
  t57144 = Power(t3518,2);
  t57081 = -1.*t18851*t6947;
  t57085 = t3518*t18936*t6118;
  t57092 = t57081 + t47197 + t57085;
  t57116 = -1.*t3518*t18936*t5641;
  t57119 = t18851*t6118;
  t57121 = t46518 + t57116 + t57119;
  t56306 = -1.*t3553*t18733*t6947;
  t56307 = -1.*t56150*t33492*t6118;
  t56225 = t56150*t33492*t5641;
  t56870 = t18851*t6947;
  t56871 = -1.*t3518*t18936*t6118;
  t56613 = t56150*t36214*t6118;
  t56534 = -1.*t56150*t36214*t5641;
  t56535 = -1.*t3553*t18733*t10114;
  t56948 = t3518*t18936*t5641;
  t56968 = -1.*t18851*t6118;
  t56589 = -1.*t56150*t36214*t6118;
  t56560 = t56150*t36214*t5641;
  t56562 = t3553*t18733*t10114;
  t56873 = t56870 + t55147 + t56871;
  t56970 = t44414 + t56948 + t56968;
  t57216 = -1.*t34040*t6947;
  t57226 = -1.*t18851*t10114;
  t57273 = t34040*t6118;
  t57958 = t18729*t5641;
  t57959 = t57958 + t57119;
  t58033 = -1.*t18729*t6118;
  t58047 = t57081 + t58033;
  t57666 = -1.*t36940*t6947;
  t57682 = t18851*t5641;
  t57690 = t36940*t6118;
  t58465 = 0.325*t5321;
  t58697 = -1.*t18701*t5321;
  p_output1[0]=t6623*var2[0] + t4057*var2[1] + t7847*var2[2];
  p_output1[1]=t2891*t8937*var2[0] - 1.*t2891*t3553*t5776*var2[1] + t2891*t8695*var2[2];
  p_output1[2]=t9205*var2[0] + t9176*var2[1] + t9578*var2[2];
  p_output1[3]=t10801*var2[0] + t10730*var2[2];
  p_output1[4]=t11429*var2[0] + t11176*var2[2];
  p_output1[5]=t11176;
  p_output1[6]=t11645;
  p_output1[7]=t10801;
  p_output1[8]=(-1.*t11662*t11713 - 1.*t11686*t6623)*var2[0] + (-1.*t11686*t4057 - 1.*t11662*t3553*t5776)*var2[1] + (-1.*t11662*t11809 - 1.*t11686*t7847)*var2[2];
  p_output1[9]=-1.*t11662*t12150*var2[0] - 1.*t11662*t12120*var2[1] - 1.*t11662*t12172*var2[2];
  p_output1[10]=(t11686*t6588 + t11662*t3564*t8937)*var2[0] + (-1.*t11686*t3553*t3814 - 1.*t11662*t3553*t3564*t5776)*var2[1] + (t11686*t7312 + t11662*t3564*t8695)*var2[2];
  p_output1[11]=(-1.*t11662*t16998 - 1.*t11686*t3553*t5641*t5776)*var2[0] + (-1.*t11662*t15074 - 1.*t11686*t3518*t5776)*var2[1] + (-1.*t11662*t17217 - 1.*t11686*t3553*t5776*t6118)*var2[2];
  p_output1[12]=t17682*var2[0] + (t11686*t17419 - 1.*t11662*t17643)*var2[2];
  p_output1[13]=(t11686*t17786 - 1.*t11662*t17936)*var2[0] + t17732*var2[2];
  p_output1[14]=t17732;
  p_output1[15]=t17989;
  p_output1[16]=t17682;
  p_output1[17]=t17732*var2[0] + t17989*var2[1] + t17682*var2[2];
  p_output1[18]=t11686*t12150*var2[0] + t11686*t12120*var2[1] + t11686*t12172*var2[2];
  p_output1[19]=(t11662*t6588 - 1.*t11686*t3564*t8937)*var2[0] + (-1.*t11662*t3553*t3814 + t11686*t3553*t3564*t5776)*var2[1] + (t11662*t7312 - 1.*t11686*t3564*t8695)*var2[2];
  p_output1[20]=(t11686*t16998 - 1.*t11662*t3553*t5641*t5776)*var2[0] + (t11686*t15074 - 1.*t11662*t3518*t5776)*var2[1] + (t11686*t17217 - 1.*t11662*t3553*t5776*t6118)*var2[2];
  p_output1[21]=t18362*var2[0] + (t11662*t17419 + t11686*t17643)*var2[2];
  p_output1[22]=(t11662*t17786 + t11686*t17936)*var2[0] + t18418*var2[2];
  p_output1[23]=t18418;
  p_output1[24]=t11686*t4057 + t11662*t3553*t5776;
  p_output1[25]=t18362;
  p_output1[26]=(t23894*t4057 + t10801*(-1.*t11645*t19309 - 1.*t12120*t19309 - 1.*t19024*t4057 - 1.*t19056*t4057) + t23546*t7847 + t11645*(t10801*t19309 + t12172*t19309 + t19024*t7847 + t19056*t7847))*var2[0] + (t23052*t6623 + t10801*(t11176*t19309 + t12150*t19309 + t19024*t6623 + t19056*t6623) + t22553*t7847 + t11176*(-1.*t10801*t19309 - 1.*t12172*t19309 - 1.*t19024*t7847 - 1.*t19056*t7847))*var2[1] + (t21845*t4057 + t11176*(t11645*t19309 + t12120*t19309 + t19024*t4057 + t19056*t4057) + t21174*t6623 + t11645*(-1.*t11176*t19309 - 1.*t12150*t19309 - 1.*t19024*t6623 - 1.*t19056*t6623))*var2[2];
  p_output1[27]=(-1.*t23894*t2891*t3553*t5776 + t10801*(t25110 - 1.*t11645*t23990*t2891 + t23990*t3564*t4057 - 1.*t19012*t3553*t5776 + t19056*t2891*t3553*t5776 - 1.*t19309*t3553*t3564*t5776) + t23546*t2891*t8695 + t11645*(t25732 + t25764 + t10801*t23990*t2891 - 1.*t23990*t3564*t7847 + t19056*t2891*t8695 - 1.*t19309*t3564*t8695))*var2[0] + (t22553*t2891*t8695 + t11176*(t24585 + t24645 - 1.*t10801*t23990*t2891 + t23990*t3564*t7847 - 1.*t19056*t2891*t8695 + t19309*t3564*t8695) + t23052*t2891*t8937 + t10801*(t24423 + t24459 + t11176*t23990*t2891 - 1.*t23990*t3564*t6623 + t19056*t2891*t8937 - 1.*t19309*t3564*t8937))*var2[1] + (-1.*t21845*t2891*t3553*t5776 + t11176*(t24023 + t11645*t23990*t2891 - 1.*t23990*t3564*t4057 + t19012*t3553*t5776 - 1.*t19056*t2891*t3553*t5776 + t19309*t3553*t3564*t5776) + t21174*t2891*t8937 + t11645*(t24251 + t24254 - 1.*t11176*t23990*t2891 + t23990*t3564*t6623 - 1.*t19056*t2891*t8937 + t19309*t3564*t8937))*var2[2];
  p_output1[28]=(t23894*t9176 + t10801*(-1.*t15074*t19309 - 1.*t11645*t26704 + t30944 + t31136 - 1.*t27160*t4057 - 1.*t19056*t9176) + t23546*t9578 + t11645*(t17217*t19309 + t10801*t26704 + t31403 + t31433 + t27160*t7847 + t19056*t9578))*var2[0] + (t23052*t9205 + t10801*(t16998*t19309 + t11176*t26704 + t29977 + t30026 + t27160*t6623 + t19056*t9205) + t22553*t9578 + t11176*(-1.*t17217*t19309 - 1.*t10801*t26704 + t30413 + t30622 - 1.*t27160*t7847 - 1.*t19056*t9578))*var2[1] + (t21845*t9176 + t11176*(t15074*t19309 + t26577 + t11645*t26704 + t26783 + t27160*t4057 + t19056*t9176) + t21174*t9205 + t11645*(-1.*t16998*t19309 - 1.*t11176*t26704 + t29410 + t29520 - 1.*t27160*t6623 - 1.*t19056*t9205))*var2[2];
  p_output1[29]=(t10730*t23546 + t10801*(-1.*t11645*t34304 + t35386 - 1.*t34596*t4057) + t11645*(t10730*t19056 + t17643*t19309 + t10801*t34304 + t35439 + t35440 + t34596*t7847))*var2[0] + (t10730*t22553 + t10801*t23052 + t10801*(t23806 + t23858 + t23892 + t11176*t34304 + t35193 + t34596*t6623) + t11176*(-1.*t10730*t19056 - 1.*t17643*t19309 - 1.*t10801*t34304 + t35282 + t35303 - 1.*t34596*t7847))*var2[1] + (t10801*t21174 + t11176*(t34101 + t11645*t34304 + t34596*t4057) + t11645*(t22965 + t23012 + t23051 - 1.*t11176*t34304 + t34824 - 1.*t34596*t6623))*var2[2];
  p_output1[30]=(t11176*t23546 + t10801*(-1.*t11645*t38238 + t38859 - 1.*t38257*t4057) + t11645*(t22244 + t22325 + t22326 + t10801*t38238 + t38987 + t38257*t7847))*var2[0] + (t11176*t22553 + t11429*t23052 + t10801*(t11429*t19056 + t17936*t19309 + t11176*t38238 + t38496 + t38525 + t38257*t6623) + t11176*(t21803 + t21805 + t21818 - 1.*t10801*t38238 + t38677 - 1.*t38257*t7847))*var2[1] + (t11429*t21174 + t11176*(t38080 + t11645*t38238 + t38257*t4057) + t11645*(-1.*t11429*t19056 - 1.*t17936*t19309 - 1.*t11176*t38238 + t38395 + t38437 - 1.*t38257*t6623))*var2[2];
  p_output1[31]=t10801*t23546 + t11645*t23894;
  p_output1[32]=t10801*t22553 + t11176*t23052;
  p_output1[33]=t11176*t21174 + t11645*t21845;
  p_output1[34]=(t11809*(t25110 + t23990*t3553*t3814) - 1.*t3553*t3814*t55175 + t55055*t7312 + t3553*t5776*(t25732 + t25764 + t23990*t7312 + t19012*t8695))*var2[0] + (t48473*t6588 + t46975*t7312 + t11713*(t24585 + t24645 - 1.*t23990*t7312 - 1.*t19012*t8695) + t11809*(t24423 + t24459 + t23990*t6588 + t19012*t8937))*var2[1] + (t11713*(t24023 - 1.*t23990*t3553*t3814) - 1.*t3553*t3814*t45367 + t42473*t6588 + t3553*t5776*(t24251 + t24254 - 1.*t23990*t6588 - 1.*t19012*t8937))*var2[2];
  p_output1[35]=(t11809*(t30944 + t31136 - 1.*t19012*t3518*t3814 - 1.*t26555*t3553*t55657 + t55833 + t55837) - 1.*t3518*t55175*t5776 - 1.*t3553*t55055*t5776*t6118 + t3553*t5776*(t31403 + t31433 + t55883 + t55884 + t19012*t3553*t3814*t6118 - 1.*t26555*t3814*t7312))*var2[0] + (-1.*t3553*t48473*t5641*t5776 - 1.*t3553*t46975*t5776*t6118 + t11809*(t29977 + t30026 + t55742 + t55748 + t19012*t3553*t3814*t5641 - 1.*t26555*t3814*t6588) + t11713*(t30413 + t30622 + t55762 + t55774 - 1.*t19012*t3553*t3814*t6118 + t26555*t3814*t7312))*var2[1] + (t11713*(t26577 + t26783 + t19012*t3518*t3814 + t55607 + t55638 + t26555*t3553*t55657) - 1.*t3518*t45367*t5776 - 1.*t3553*t42473*t5641*t5776 + t3553*t5776*(t29410 + t29520 + t55703 + t55719 - 1.*t19012*t3553*t3814*t5641 + t26555*t3814*t6588))*var2[2];
  p_output1[36]=(t11809*(t35386 - 1.*t33492*t3518*t3553 + t34294*t3553*t3814) + t17419*t55055 + t3553*t5776*(t10725*t19012 + t35439 + t35440 + t56338 + t56347 + t34294*t7312))*var2[0] + (t17419*t46975 + t11809*t48473 + t11809*(t23806 + t35193 + t55147 + t55172 + t56225 + t34294*t6588) + t11713*(-1.*t10725*t19012 + t35282 + t35303 + t56306 + t56307 - 1.*t34294*t7312))*var2[1] + (t11713*(t34101 + t33492*t3518*t3553 - 1.*t34294*t3553*t3814) + t11809*t42473 + t3553*t5776*(t22965 + t34824 + t47197 + t47235 + t56151 - 1.*t34294*t6588))*var2[2];
  p_output1[37]=(t11809*(-1.*t3518*t3553*t36214 + t3553*t3814*t38228 + t38859) + t11713*t55055 + t3553*t5776*(t22244 + t38987 + t46518 + t46850 + t56613 + t38228*t7312))*var2[0] + (t11713*t46975 + t17786*t48473 + t11809*(t11399*t19012 + t38496 + t38525 + t56560 + t56562 + t38228*t6588) + t11713*(t21803 + t38677 + t44414 + t45237 + t56589 - 1.*t38228*t7312))*var2[1] + (t11713*(t3518*t3553*t36214 + t38080 - 1.*t3553*t3814*t38228) + t17786*t42473 + t3553*t5776*(-1.*t11399*t19012 + t38395 + t38437 + t56534 + t56535 - 1.*t38228*t6588))*var2[2];
  p_output1[38]=t11809*t55055 + t3553*t55175*t5776;
  p_output1[39]=t11809*t46975 + t11713*t48473;
  p_output1[40]=t11713*t42473 + t3553*t45367*t5776;
  p_output1[41]=(t3553*t56873 + t3553*(t18936*t3518 - 1.*t26555*t3553 + t55833 + t55837)*t6118 - 1.*t3518*t56848*t6118 + t3518*(t55883 + t55884 - 1.*t26555*t3518*t6118 - 1.*t18936*t3553*t6118))*var2[0] + (-1.*t3518*t5641*t57092 + t3553*(t55742 + t55748 - 1.*t26555*t3518*t5641 - 1.*t18936*t3553*t5641)*t6118 - 1.*t3518*t57121*t6118 + t3553*t5641*(t55762 + t55774 + t26555*t3518*t6118 + t18936*t3553*t6118))*var2[1] + (t3553*(-1.*t18936*t3518 + t26555*t3553 + t55607 + t55638)*t5641 + t3518*(t55703 + t55719 + t26555*t3518*t5641 + t18936*t3553*t5641) - 1.*t3518*t5641*t56914 + t3553*t56970)*var2[2];
  p_output1[42]=(t3553*t56848*t6947 + t3518*(t10114*t18851 + t56338 + t56347 + t33492*t57144*t6118 + t34040*t6947 - 1.*t18936*t3518*t6947))*var2[0] + (t3553*t57092*t6118 + t3553*(t55147 + t56225 + t56870 + t56871 + t33492*t5641*t57144 + t57273)*t6118 + t3553*t57121*t6947 + t3553*t5641*(t56306 + t56307 + t57216 + t57226 - 1.*t33492*t57144*t6118 + t18936*t3518*t6947))*var2[1] + (t3553*t56914*t6118 + t3518*(t47197 + t56151 + t57081 + t57085 - 1.*t33492*t5641*t57144 - 1.*t34040*t6118))*var2[2];
  p_output1[43]=(t3553*t5641*t56848 + t3518*(t46518 + t56613 + t57116 + t57119 + t36214*t57144*t6118 + t36940*t6947))*var2[0] + (t10114*t3553*t57092 + t3553*t5641*t57121 + t3553*(-1.*t10114*t18936*t3518 + t56560 + t56562 + t36214*t5641*t57144 + t57682 + t57690)*t6118 + t3553*t5641*(t44414 + t56589 + t56948 + t56968 + t57666 - 1.*t36214*t57144*t6118))*var2[1] + (t10114*t3553*t56914 + t3518*(t10114*t18936*t3518 - 1.*t18851*t5641 + t56534 + t56535 - 1.*t36214*t5641*t57144 - 1.*t36940*t6118))*var2[2];
  p_output1[44]=t3518*t56873 + t3553*t56848*t6118;
  p_output1[45]=t3553*t5641*t57092 + t3553*t57121*t6118;
  p_output1[46]=t3553*t5641*t56914 + t3518*t56970;
  p_output1[47]=(0.2255*t10114 + 0.1575*t6118)*var2[0] + (t10114*t57959 + t58047*t6947 + (t33492*t5641 + t56870 + t57273 + t18729*t6118)*t6947 + t6118*(t57216 + t57226 - 1.*t33492*t6118 - 1.*t18729*t6947))*var2[1] - 0.068*t6947*var2[2];
  p_output1[48]=(0.1575*t10114 + 0.2255*t6118)*var2[0] + (t5641*t58047 + t57959*t6118 + t6118*(-1.*t18729*t5641 + t56968 + t57666 - 1.*t36214*t6118) + (t10114*t18729 + t36214*t5641 + t57682 + t57690)*t6947)*var2[1] - 0.068*t5641*var2[2];
  p_output1[49]=0.1575*t5641 + 0.2255*t6947;
  p_output1[50]=t58047*t6118 + t57959*t6947;
  p_output1[51]=-0.068*t6118;
  p_output1[52]=(0.325*t4536 - 1.*t18701*t4536 - 1.*t35960*t4536)*var2[0] + (-1.*t35960*t5321 + t58465 + t58697)*var2[2];
  p_output1[53]=-1.*t18596*t4536 + t58465 + t58697;
  p_output1[54]=-0.325*t4536 + t18701*t4536 - 1.*t18596*t5321;
  p_output1[55]=-0.0641;
  p_output1[56]=-0.28;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 57, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_fFrFoot_vec_DiagonalStance.hh"

namespace DiagonalStance
{

void J_fFrFoot_vec_DiagonalStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
