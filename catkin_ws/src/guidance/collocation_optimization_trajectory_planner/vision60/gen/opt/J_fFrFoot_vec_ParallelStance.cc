/*
 * Automatically Generated from Mathematica.
 * Sun 3 Apr 2022 21:47:45 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t24168;
  double t17869;
  double t24173;
  double t24392;
  double t24337;
  double t24386;
  double t24403;
  double t22185;
  double t24387;
  double t24405;
  double t24406;
  double t24186;
  double t24412;
  double t24413;
  double t24415;
  double t24409;
  double t24432;
  double t24436;
  double t24675;
  double t24684;
  double t24686;
  double t24687;
  double t24419;
  double t24420;
  double t24421;
  double t25016;
  double t25018;
  double t25021;
  double t25041;
  double t25043;
  double t25045;
  double t25032;
  double t25035;
  double t25036;
  double t24167;
  double t24188;
  double t24283;
  double t25067;
  double t25070;
  double t24407;
  double t24424;
  double t24427;
  double t24430;
  double t24693;
  double t24694;
  double t24764;
  double t24772;
  double t24791;
  double t24703;
  double t24726;
  double t24734;
  double t25022;
  double t25024;
  double t25025;
  double t25087;
  double t25088;
  double t25090;
  double t25076;
  double t25077;
  double t25078;
  double t25050;
  double t25053;
  double t25056;
  double t25337;
  double t25340;
  double t25341;
  double t25330;
  double t25331;
  double t25332;
  double t25360;
  double t25361;
  double t25362;
  double t25102;
  double t25105;
  double t25106;
  double t25110;
  double t25111;
  double t25112;
  double t25117;
  double t25119;
  double t25121;
  double t25149;
  double t25151;
  double t25152;
  double t25162;
  double t25163;
  double t25164;
  double t25226;
  double t25239;
  double t25309;
  double t25315;
  double t25317;
  double t25318;
  double t25321;
  double t25322;
  double t25323;
  double t25344;
  double t25346;
  double t25348;
  double t25350;
  double t25352;
  double t25353;
  double t25422;
  double t25423;
  double t25424;
  double t25417;
  double t25418;
  double t25419;
  double t25436;
  double t25438;
  double t25439;
  double t25441;
  double t25442;
  double t25443;
  double t25444;
  double t25445;
  double t25446;
  double t25435;
  double t25440;
  double t25447;
  double t25452;
  double t25434;
  double t25463;
  double t25464;
  double t25466;
  double t25467;
  double t25468;
  double t25469;
  double t25470;
  double t25471;
  double t25472;
  double t25473;
  double t25475;
  double t25476;
  double t25477;
  double t25478;
  double t25479;
  double t25480;
  double t25481;
  double t25062;
  double t25064;
  double t25066;
  double t25497;
  double t25507;
  double t25508;
  double t25486;
  double t25489;
  double t25490;
  double t25465;
  double t25483;
  double t25484;
  double t25513;
  double t25516;
  double t25517;
  double t25648;
  double t25654;
  double t25655;
  double t25518;
  double t25519;
  double t25520;
  double t25522;
  double t25532;
  double t25533;
  double t25535;
  double t25536;
  double t25574;
  double t25576;
  double t25577;
  double t25579;
  double t25596;
  double t25600;
  double t25601;
  double t25602;
  double t25614;
  double t25615;
  double t25617;
  double t25619;
  double t25631;
  double t25635;
  double t25637;
  double t25639;
  double t24996;
  double t24999;
  double t25003;
  double t25734;
  double t25735;
  double t25736;
  double t25738;
  double t25739;
  double t24985;
  double t24987;
  double t24989;
  double t25740;
  double t25741;
  double t25742;
  double t25746;
  double t25747;
  double t25748;
  double t25005;
  double t25008;
  double t25010;
  double t25732;
  double t25818;
  double t25819;
  double t25821;
  double t25822;
  double t25823;
  double t25825;
  double t25830;
  double t25831;
  double t25832;
  double t25820;
  double t25826;
  double t25827;
  double t25829;
  double t25833;
  double t25834;
  double t25837;
  double t25838;
  double t25839;
  double t25015;
  double t25026;
  double t25030;
  double t25049;
  double t25057;
  double t25058;
  double t25900;
  double t25901;
  double t25902;
  double t25899;
  double t25904;
  double t25905;
  double t25907;
  double t25909;
  double t25916;
  double t25917;
  double t25919;
  double t25906;
  double t25910;
  double t25911;
  double t25915;
  double t25921;
  double t25922;
  double t25924;
  double t25925;
  double t25926;
  double t25660;
  double t25668;
  double t25669;
  double t25681;
  double t25682;
  double t25691;
  double t25692;
  double t25709;
  double t25716;
  double t25717;
  double t26010;
  double t26012;
  double t26013;
  double t25737;
  double t25745;
  double t25757;
  double t25758;
  double t26023;
  double t26024;
  double t26025;
  double t25770;
  double t25771;
  double t26033;
  double t26034;
  double t26035;
  double t25779;
  double t25781;
  double t26038;
  double t26039;
  double t26040;
  double t26049;
  double t26050;
  double t26051;
  double t25793;
  double t26073;
  double t25798;
  double t25804;
  double t25805;
  double t26057;
  double t26058;
  double t26059;
  double t25828;
  double t25843;
  double t26137;
  double t25853;
  double t25860;
  double t25861;
  double t25876;
  double t25884;
  double t25885;
  double t25912;
  double t25930;
  double t25932;
  double t25942;
  double t25943;
  double t25969;
  double t25986;
  double t25991;
  double t26109;
  double t26110;
  double t26115;
  double t26117;
  double t26070;
  double t26072;
  double t26080;
  double t26081;
  double t26090;
  double t26091;
  double t26098;
  double t26099;
  double t26282;
  double t26284;
  double t26182;
  double t26185;
  double t26303;
  double t26304;
  double t26140;
  double t26350;
  double t26329;
  double t26330;
  double t26331;
  double t26338;
  double t26339;
  double t26340;
  double t26162;
  double t26166;
  double t26155;
  double t26291;
  double t26293;
  double t26264;
  double t26210;
  double t26211;
  double t26315;
  double t26317;
  double t26249;
  double t26238;
  double t26241;
  double t26294;
  double t26319;
  double t26368;
  double t26369;
  double t26374;
  double t26432;
  double t26433;
  double t26440;
  double t26441;
  double t26402;
  double t26406;
  double t26410;
  double t26487;
  double t26488;
  t24168 = Cos(var1[12]);
  t17869 = Cos(var1[4]);
  t24173 = Sin(var1[4]);
  t24392 = Cos(var1[13]);
  t24337 = Cos(var1[14]);
  t24386 = Sin(var1[13]);
  t24403 = Sin(var1[14]);
  t22185 = Sin(var1[12]);
  t24387 = t24337*t24386;
  t24405 = -1.*t24392*t24403;
  t24406 = t24387 + t24405;
  t24186 = Sin(var1[5]);
  t24412 = t24392*t24337;
  t24413 = t24386*t24403;
  t24415 = t24412 + t24413;
  t24409 = Cos(var1[5]);
  t24432 = -1.*t24337*t24386;
  t24436 = t24392*t24403;
  t24675 = t24432 + t24436;
  t24684 = t24409*t24675;
  t24686 = t22185*t24415*t24186;
  t24687 = t24684 + t24686;
  t24419 = t24409*t24415;
  t24420 = t22185*t24406*t24186;
  t24421 = t24419 + t24420;
  t25016 = -1.*t24392*t24337;
  t25018 = -1.*t24386*t24403;
  t25021 = t25016 + t25018;
  t25041 = t24168*t24406*t24173;
  t25043 = t17869*t24421;
  t25045 = t25041 + t25043;
  t25032 = t24168*t24415*t24173;
  t25035 = t17869*t24687;
  t25036 = t25032 + t25035;
  t24167 = t17869*t22185;
  t24188 = t24168*t24173*t24186;
  t24283 = t24167 + t24188;
  t25067 = Sin(var1[3]);
  t25070 = Cos(var1[3]);
  t24407 = t24168*t17869*t24406;
  t24424 = -1.*t24173*t24421;
  t24427 = t24407 + t24424;
  t24430 = t24168*t17869*t24415;
  t24693 = -1.*t24173*t24687;
  t24694 = t24430 + t24693;
  t24764 = t24409*t22185*t24406;
  t24772 = -1.*t24415*t24186;
  t24791 = t24764 + t24772;
  t24703 = t24409*t22185*t24415;
  t24726 = -1.*t24675*t24186;
  t24734 = t24703 + t24726;
  t25022 = t24409*t25021;
  t25024 = t22185*t24675*t24186;
  t25025 = t25022 + t25024;
  t25087 = -1.*t24409*t22185*t24415;
  t25088 = t24675*t24186;
  t25090 = t25087 + t25088;
  t25076 = -1.*t24409*t22185*t24406;
  t25077 = t24415*t24186;
  t25078 = t25076 + t25077;
  t25050 = t24409*t24406;
  t25053 = t22185*t25021*t24186;
  t25056 = t25050 + t25053;
  t25337 = t25070*t25078;
  t25340 = -1.*t25067*t24427;
  t25341 = t25337 + t25340;
  t25330 = t25070*t25090;
  t25331 = -1.*t25067*t24694;
  t25332 = t25330 + t25331;
  t25360 = t24168*t25070*t24409;
  t25361 = -1.*t25067*t24283;
  t25362 = t25360 + t25361;
  t25102 = -1.*t22185*t24173;
  t25105 = t24168*t17869*t24186;
  t25106 = t25102 + t25105;
  t25110 = -1.*t24168*t24406*t24173;
  t25111 = -1.*t17869*t24421;
  t25112 = t25110 + t25111;
  t25117 = -1.*t24168*t24415*t24173;
  t25119 = -1.*t17869*t24687;
  t25121 = t25117 + t25119;
  t25149 = t24168*t17869;
  t25151 = -1.*t22185*t24173*t24186;
  t25152 = t25149 + t25151;
  t25162 = -1.*t17869*t22185*t24406;
  t25163 = -1.*t24168*t24406*t24173*t24186;
  t25164 = t25162 + t25163;
  t25226 = -1.*t17869*t22185*t24415;
  t25239 = -1.*t24168*t24415*t24173*t24186;
  t25309 = t25226 + t25239;
  t25315 = -1.*t24409*t22185*t24675;
  t25317 = t25021*t24186;
  t25318 = t25315 + t25317;
  t25321 = t24168*t17869*t24675;
  t25322 = -1.*t24173*t25025;
  t25323 = t25321 + t25322;
  t25344 = -1.*t24409*t22185*t25021;
  t25346 = t24406*t24186;
  t25348 = t25344 + t25346;
  t25350 = t24168*t17869*t25021;
  t25352 = -1.*t24173*t25056;
  t25353 = t25350 + t25352;
  t25422 = t25067*t25078;
  t25423 = t25070*t24427;
  t25424 = t25422 + t25423;
  t25417 = t25067*t25090;
  t25418 = t25070*t24694;
  t25419 = t25417 + t25418;
  t25436 = -0.0641*t24337;
  t25438 = -0.28*t24403;
  t25439 = t25436 + t25438;
  t25441 = -1.*t24337;
  t25442 = 1. + t25441;
  t25443 = 0.075*t25442;
  t25444 = 0.355*t24337;
  t25445 = -0.0641*t24403;
  t25446 = t25443 + t25444 + t25445;
  t25435 = -0.325*t24386;
  t25440 = t24392*t25439;
  t25447 = t24386*t25446;
  t25452 = t25435 + t25440 + t25447;
  t25434 = -0.068*t22185;
  t25463 = t24168*t25452;
  t25464 = t25434 + t25463;
  t25466 = -1.*t24392;
  t25467 = 1. + t25466;
  t25468 = 0.325*t25467;
  t25469 = -1.*t24386*t25439;
  t25470 = t24392*t25446;
  t25471 = t25468 + t25469 + t25470;
  t25472 = t24409*t25471;
  t25473 = -1.*t24168;
  t25475 = 1. + t25473;
  t25476 = -0.1575*t25475;
  t25477 = -0.2255*t24168;
  t25478 = -1.*t22185*t25452;
  t25479 = t25476 + t25477 + t25478;
  t25480 = -1.*t25479*t24186;
  t25481 = t25472 + t25480;
  t25062 = t22185*t24173;
  t25064 = -1.*t24168*t17869*t24186;
  t25066 = t25062 + t25064;
  t25497 = t17869*t25464;
  t25507 = -1.*t24173*t25481;
  t25508 = t25497 + t25507;
  t25486 = t25464*t24173;
  t25489 = t17869*t25481;
  t25490 = t25486 + t25489;
  t25465 = -1.*t25464*t24173;
  t25483 = -1.*t17869*t25481;
  t25484 = t25465 + t25483;
  t25513 = t24409*t25479;
  t25516 = t25471*t24186;
  t25517 = t25513 + t25516;
  t25648 = -1.*t24409*t25479;
  t25654 = -1.*t25471*t24186;
  t25655 = t25648 + t25654;
  t25518 = t24168*t24409*t25517;
  t25519 = t25066*t25490;
  t25520 = t24283*t25508;
  t25522 = t25518 + t25519 + t25520;
  t25532 = -1.*t25517*t25078;
  t25533 = -1.*t25490*t25045;
  t25535 = -1.*t25508*t24427;
  t25536 = t25532 + t25533 + t25535;
  t25574 = t25517*t25078;
  t25576 = t25490*t25045;
  t25577 = t25508*t24427;
  t25579 = t25574 + t25576 + t25577;
  t25596 = -1.*t25517*t25090;
  t25600 = -1.*t25490*t25036;
  t25601 = -1.*t25508*t24694;
  t25602 = t25596 + t25600 + t25601;
  t25614 = -1.*t24168*t24409*t25517;
  t25615 = -1.*t25066*t25490;
  t25617 = -1.*t24283*t25508;
  t25619 = t25614 + t25615 + t25617;
  t25631 = t25517*t25090;
  t25635 = t25490*t25036;
  t25637 = t25508*t24694;
  t25639 = t25631 + t25635 + t25637;
  t24996 = -1.*t22185*t24406*t24173;
  t24999 = t24168*t17869*t24406*t24186;
  t25003 = t24996 + t24999;
  t25734 = 0.068*t22185;
  t25735 = -1.*t24168*t25452;
  t25736 = t25734 + t25735;
  t25738 = -0.068*t24168;
  t25739 = t25738 + t25478;
  t24985 = t24168*t24173;
  t24987 = t17869*t22185*t24186;
  t24989 = t24985 + t24987;
  t25740 = t25739*t24173;
  t25741 = -1.*t17869*t25736*t24186;
  t25742 = t25740 + t25741;
  t25746 = t17869*t25739;
  t25747 = t25736*t24173*t24186;
  t25748 = t25746 + t25747;
  t25005 = -1.*t22185*t24415*t24173;
  t25008 = t24168*t17869*t24415*t24186;
  t25010 = t25005 + t25008;
  t25732 = Power(t24409,2);
  t25818 = -0.325*t24392;
  t25819 = t25818 + t25469 + t25470;
  t25821 = 0.325*t24386;
  t25822 = -1.*t24392*t25439;
  t25823 = -1.*t24386*t25446;
  t25825 = t25821 + t25822 + t25823;
  t25830 = t24409*t25825;
  t25831 = t22185*t25819*t24186;
  t25832 = t25830 + t25831;
  t25820 = -1.*t24409*t22185*t25819;
  t25826 = t25825*t24186;
  t25827 = t25820 + t25826;
  t25829 = t24168*t25819*t24173;
  t25833 = t17869*t25832;
  t25834 = t25829 + t25833;
  t25837 = t24168*t17869*t25819;
  t25838 = -1.*t24173*t25832;
  t25839 = t25837 + t25838;
  t25015 = t24168*t24675*t24173;
  t25026 = t17869*t25025;
  t25030 = t25015 + t25026;
  t25049 = t24168*t25021*t24173;
  t25057 = t17869*t25056;
  t25058 = t25049 + t25057;
  t25900 = -0.28*t24337;
  t25901 = 0.0641*t24403;
  t25902 = t25900 + t25901;
  t25899 = t24386*t25439;
  t25904 = t24392*t25902;
  t25905 = t25899 + t25904;
  t25907 = -1.*t24386*t25902;
  t25909 = t25440 + t25907;
  t25916 = t24409*t25909;
  t25917 = t22185*t25905*t24186;
  t25919 = t25916 + t25917;
  t25906 = -1.*t24409*t22185*t25905;
  t25910 = t25909*t24186;
  t25911 = t25906 + t25910;
  t25915 = t24168*t25905*t24173;
  t25921 = t17869*t25919;
  t25922 = t25915 + t25921;
  t25924 = t24168*t17869*t25905;
  t25925 = -1.*t24173*t25919;
  t25926 = t25924 + t25925;
  t25660 = -1.*t24168*t24186*t25517;
  t25668 = -1.*t25517*t24421;
  t25669 = -1.*t25481*t25078;
  t25681 = t25517*t24421;
  t25682 = t25481*t25078;
  t25691 = -1.*t25481*t25090;
  t25692 = -1.*t25517*t24687;
  t25709 = t24168*t24186*t25517;
  t25716 = t25481*t25090;
  t25717 = t25517*t24687;
  t26010 = t22185*t25464;
  t26012 = -1.*t24168*t24186*t25481;
  t26013 = t26010 + t26012 + t25518;
  t25737 = t24168*t25732*t25736;
  t25745 = -1.*t24409*t22185*t25517;
  t25757 = t24168*t24409*t24406*t25517;
  t25758 = -1.*t24409*t25736*t25078;
  t26023 = -1.*t24168*t25464*t24406;
  t26024 = -1.*t25481*t24421;
  t26025 = t26023 + t26024 + t25532;
  t25770 = -1.*t24168*t24409*t24406*t25517;
  t25771 = t24409*t25736*t25078;
  t26033 = t24168*t25464*t24406;
  t26034 = t25481*t24421;
  t26035 = t26033 + t26034 + t25574;
  t25779 = t24168*t24409*t24415*t25517;
  t25781 = -1.*t24409*t25736*t25090;
  t26038 = -1.*t24168*t25464*t24415;
  t26039 = -1.*t25481*t24687;
  t26040 = t26038 + t25596 + t26039;
  t26049 = -1.*t22185*t25464;
  t26050 = t24168*t24186*t25481;
  t26051 = t26049 + t26050 + t25614;
  t25793 = -1.*t24168*t25732*t25736;
  t26073 = Power(t24186,2);
  t25798 = t24409*t22185*t25517;
  t25804 = -1.*t24168*t24409*t24415*t25517;
  t25805 = t24409*t25736*t25090;
  t26057 = t24168*t25464*t24415;
  t26058 = t25481*t24687;
  t26059 = t26057 + t25631 + t26058;
  t25828 = t24168*t24409*t25827;
  t25843 = -1.*t25827*t25078;
  t26137 = Power(t24168,2);
  t25853 = t25827*t25078;
  t25860 = -1.*t25827*t25090;
  t25861 = -1.*t25517*t25318;
  t25876 = -1.*t24168*t24409*t25827;
  t25884 = t25827*t25090;
  t25885 = t25517*t25318;
  t25912 = t24168*t24409*t25911;
  t25930 = -1.*t25517*t25348;
  t25932 = -1.*t25911*t25078;
  t25942 = t25517*t25348;
  t25943 = t25911*t25078;
  t25969 = -1.*t25911*t25090;
  t25986 = -1.*t24168*t24409*t25911;
  t25991 = t25911*t25090;
  t26109 = -1.*t24168*t25464;
  t26110 = -1.*t22185*t25739;
  t26115 = -1.*t22185*t25464*t24415;
  t26117 = t24168*t25739*t24415;
  t26070 = t24168*t25464;
  t26072 = t22185*t25739;
  t26080 = t22185*t25464*t24406;
  t26081 = -1.*t24168*t25739*t24406;
  t26090 = -1.*t22185*t25464*t24406;
  t26091 = t24168*t25739*t24406;
  t26098 = t22185*t25464*t24415;
  t26099 = -1.*t24168*t25739*t24415;
  t26282 = -1.*t24168*t25479;
  t26284 = t26049 + t26282;
  t26182 = t24168*t25464*t24675;
  t26185 = t26137*t25819*t24415;
  t26303 = t24168*t25479;
  t26304 = t26010 + t26303;
  t26140 = -1.*t26137*t25819*t24406;
  t26350 = Power(t22185,2);
  t26329 = -1.*t25471*t24675;
  t26330 = t22185*t25479*t24415;
  t26331 = t26329 + t26038 + t26330;
  t26338 = -1.*t22185*t25479*t24406;
  t26339 = t25471*t24415;
  t26340 = t26033 + t26338 + t26339;
  t26162 = -1.*t24168*t25464*t24675;
  t26166 = -1.*t26137*t25819*t24415;
  t26155 = t26137*t25819*t24406;
  t26291 = t25471*t24675;
  t26293 = -1.*t22185*t25479*t24415;
  t26264 = t26137*t25905*t24415;
  t26210 = -1.*t26137*t25905*t24406;
  t26211 = -1.*t24168*t25464*t25021;
  t26315 = t22185*t25479*t24406;
  t26317 = -1.*t25471*t24415;
  t26249 = -1.*t26137*t25905*t24415;
  t26238 = t26137*t25905*t24406;
  t26241 = t24168*t25464*t25021;
  t26294 = t26291 + t26057 + t26293;
  t26319 = t26023 + t26315 + t26317;
  t26368 = -1.*t25825*t24675;
  t26369 = -1.*t25471*t25021;
  t26374 = t25825*t24415;
  t26432 = t25452*t24406;
  t26433 = t26432 + t26339;
  t26440 = -1.*t25452*t24415;
  t26441 = t26329 + t26440;
  t26402 = -1.*t25909*t24675;
  t26406 = t25471*t24406;
  t26410 = t25909*t24415;
  t26487 = 0.325*t24403;
  t26488 = -1.*t25446*t24403;
  p_output1[0]=t24427*var2[0] + t24283*var2[1] + t24694*var2[2];
  p_output1[1]=t17869*t24791*var2[0] - 1.*t17869*t24168*t24409*var2[1] + t17869*t24734*var2[2];
  p_output1[2]=t25003*var2[0] + t24989*var2[1] + t25010*var2[2];
  p_output1[3]=t25036*var2[0] + t25030*var2[2];
  p_output1[4]=t25058*var2[0] + t25045*var2[2];
  p_output1[5]=t25045;
  p_output1[6]=t25066;
  p_output1[7]=t25036;
  p_output1[8]=(-1.*t24427*t25070 - 1.*t25067*t25078)*var2[0] + (-1.*t24168*t24409*t25067 - 1.*t24283*t25070)*var2[1] + (-1.*t24694*t25070 - 1.*t25067*t25090)*var2[2];
  p_output1[9]=-1.*t25067*t25112*var2[0] - 1.*t25067*t25106*var2[1] - 1.*t25067*t25121*var2[2];
  p_output1[10]=(t24173*t24791*t25067 + t24421*t25070)*var2[0] + (-1.*t24168*t24173*t24409*t25067 - 1.*t24168*t24186*t25070)*var2[1] + (t24173*t24734*t25067 + t24687*t25070)*var2[2];
  p_output1[11]=(-1.*t24168*t24406*t24409*t25070 - 1.*t25067*t25164)*var2[0] + (-1.*t22185*t24409*t25070 - 1.*t25067*t25152)*var2[1] + (-1.*t24168*t24409*t24415*t25070 - 1.*t25067*t25309)*var2[2];
  p_output1[12]=t25332*var2[0] + (t25070*t25318 - 1.*t25067*t25323)*var2[2];
  p_output1[13]=(t25070*t25348 - 1.*t25067*t25353)*var2[0] + t25341*var2[2];
  p_output1[14]=t25341;
  p_output1[15]=t25362;
  p_output1[16]=t25332;
  p_output1[17]=t25341*var2[0] + t25362*var2[1] + t25332*var2[2];
  p_output1[18]=t25070*t25112*var2[0] + t25070*t25106*var2[1] + t25070*t25121*var2[2];
  p_output1[19]=(t24421*t25067 - 1.*t24173*t24791*t25070)*var2[0] + (-1.*t24168*t24186*t25067 + t24168*t24173*t24409*t25070)*var2[1] + (t24687*t25067 - 1.*t24173*t24734*t25070)*var2[2];
  p_output1[20]=(-1.*t24168*t24406*t24409*t25067 + t25070*t25164)*var2[0] + (-1.*t22185*t24409*t25067 + t25070*t25152)*var2[1] + (-1.*t24168*t24409*t24415*t25067 + t25070*t25309)*var2[2];
  p_output1[21]=t25419*var2[0] + (t25067*t25318 + t25070*t25323)*var2[2];
  p_output1[22]=(t25067*t25348 + t25070*t25353)*var2[0] + t25424*var2[2];
  p_output1[23]=t25424;
  p_output1[24]=t24168*t24409*t25067 + t24283*t25070;
  p_output1[25]=t25419;
  p_output1[26]=(t25036*(-1.*t24283*t25484 - 1.*t24283*t25490 - 1.*t25066*t25508 - 1.*t25106*t25508) + t25066*(t24694*t25484 + t24694*t25490 + t25036*t25508 + t25121*t25508) + t24694*t25619 + t24283*t25639)*var2[0] + (t25036*(t24427*t25484 + t24427*t25490 + t25045*t25508 + t25112*t25508) + t25045*(-1.*t24694*t25484 - 1.*t24694*t25490 - 1.*t25036*t25508 - 1.*t25121*t25508) + t24694*t25579 + t24427*t25602)*var2[1] + (t25045*(t24283*t25484 + t24283*t25490 + t25066*t25508 + t25106*t25508) + t25066*(-1.*t24427*t25484 - 1.*t24427*t25490 - 1.*t25045*t25508 - 1.*t25112*t25508) + t24427*t25522 + t24283*t25536)*var2[2];
  p_output1[27]=(t17869*t24734*t25619 - 1.*t17869*t24168*t24409*t25639 + t25036*(-1.*t24168*t24409*t25481 + t17869*t24168*t24409*t25490 - 1.*t24168*t24173*t24409*t25508 + t24173*t24283*t25655 - 1.*t17869*t25066*t25655 + t25709) + t25066*(t17869*t24734*t25490 - 1.*t24173*t24734*t25508 - 1.*t24173*t24694*t25655 + t17869*t25036*t25655 + t25716 + t25717))*var2[0] + (t17869*t24734*t25579 + t17869*t24791*t25602 + t25036*(t17869*t24791*t25490 - 1.*t24173*t24791*t25508 - 1.*t24173*t24427*t25655 + t17869*t25045*t25655 + t25681 + t25682) + t25045*(-1.*t17869*t24734*t25490 + t24173*t24734*t25508 + t24173*t24694*t25655 - 1.*t17869*t25036*t25655 + t25691 + t25692))*var2[1] + (t17869*t24791*t25522 - 1.*t17869*t24168*t24409*t25536 + t25045*(t24168*t24409*t25481 - 1.*t17869*t24168*t24409*t25490 + t24168*t24173*t24409*t25508 - 1.*t24173*t24283*t25655 + t17869*t25066*t25655 + t25660) + t25066*(-1.*t17869*t24791*t25490 + t24173*t24791*t25508 + t24173*t24427*t25655 - 1.*t17869*t25045*t25655 + t25668 + t25669))*var2[2];
  p_output1[28]=(t25010*t25619 + t24989*t25639 + t25036*(-1.*t24989*t25490 - 1.*t25152*t25508 - 1.*t25066*t25742 - 1.*t24283*t25748 + t25793 + t25798) + t25066*(t25010*t25490 + t25309*t25508 + t25036*t25742 + t24694*t25748 + t25804 + t25805))*var2[0] + (t25010*t25579 + t25003*t25602 + t25036*(t25003*t25490 + t25164*t25508 + t25045*t25742 + t24427*t25748 + t25770 + t25771) + t25045*(-1.*t25010*t25490 - 1.*t25309*t25508 - 1.*t25036*t25742 - 1.*t24694*t25748 + t25779 + t25781))*var2[1] + (t25003*t25522 + t24989*t25536 + t25045*(t24989*t25490 + t25152*t25508 + t25737 + t25066*t25742 + t25745 + t24283*t25748) + t25066*(-1.*t25003*t25490 - 1.*t25164*t25508 - 1.*t25045*t25742 - 1.*t24427*t25748 + t25757 + t25758))*var2[2];
  p_output1[29]=(t25030*t25619 + t25036*(-1.*t25066*t25834 - 1.*t24283*t25839 + t25876) + t25066*(t25030*t25490 + t25323*t25508 + t25036*t25834 + t24694*t25839 + t25884 + t25885))*var2[0] + (t25030*t25579 + t25036*t25602 + t25036*(t25631 + t25635 + t25637 + t25045*t25834 + t24427*t25839 + t25853) + t25045*(-1.*t25030*t25490 - 1.*t25323*t25508 - 1.*t25036*t25834 - 1.*t24694*t25839 + t25860 + t25861))*var2[1] + (t25036*t25522 + t25045*(t25828 + t25066*t25834 + t24283*t25839) + t25066*(t25596 + t25600 + t25601 - 1.*t25045*t25834 - 1.*t24427*t25839 + t25843))*var2[2];
  p_output1[30]=(t25045*t25619 + t25036*(-1.*t25066*t25922 - 1.*t24283*t25926 + t25986) + t25066*(t25574 + t25576 + t25577 + t25036*t25922 + t24694*t25926 + t25991))*var2[0] + (t25045*t25579 + t25058*t25602 + t25036*(t25058*t25490 + t25353*t25508 + t25045*t25922 + t24427*t25926 + t25942 + t25943) + t25045*(t25532 + t25533 + t25535 - 1.*t25036*t25922 - 1.*t24694*t25926 + t25969))*var2[1] + (t25058*t25522 + t25045*(t25912 + t25066*t25922 + t24283*t25926) + t25066*(-1.*t25058*t25490 - 1.*t25353*t25508 - 1.*t25045*t25922 - 1.*t24427*t25926 + t25930 + t25932))*var2[2];
  p_output1[31]=t25036*t25619 + t25066*t25639;
  p_output1[32]=t25036*t25579 + t25045*t25602;
  p_output1[33]=t25045*t25522 + t25066*t25536;
  p_output1[34]=(t25090*(t24168*t24186*t25655 + t25709) + t24168*t24409*(t24734*t25481 + t24687*t25655 + t25716 + t25717) + t24687*t26051 - 1.*t24168*t24186*t26059)*var2[0] + (t25090*(t24791*t25481 + t24421*t25655 + t25681 + t25682) + t25078*(-1.*t24734*t25481 - 1.*t24687*t25655 + t25691 + t25692) + t24687*t26035 + t24421*t26040)*var2[1] + (t25078*(-1.*t24168*t24186*t25655 + t25660) + t24168*t24409*(-1.*t24791*t25481 - 1.*t24421*t25655 + t25668 + t25669) + t24421*t26013 - 1.*t24168*t24186*t26025)*var2[2];
  p_output1[35]=(-1.*t24168*t24409*t24415*t26051 - 1.*t22185*t24409*t26059 + t25090*(-1.*t22185*t24186*t25481 + t25793 + t25798 - 1.*t24168*t25736*t26073 + t26109 + t26110) + t24168*t24409*(t24168*t24186*t24415*t25481 - 1.*t24186*t24687*t25736 + t25804 + t25805 + t26115 + t26117))*var2[0] + (-1.*t24168*t24409*t24415*t26035 - 1.*t24168*t24406*t24409*t26040 + t25090*(t24168*t24186*t24406*t25481 - 1.*t24186*t24421*t25736 + t25770 + t25771 + t26090 + t26091) + t25078*(-1.*t24168*t24186*t24415*t25481 + t24186*t24687*t25736 + t25779 + t25781 + t26098 + t26099))*var2[1] + (-1.*t24168*t24406*t24409*t26013 - 1.*t22185*t24409*t26025 + t25078*(t22185*t24186*t25481 + t25737 + t25745 + t26070 + t26072 + t24168*t25736*t26073) + t24168*t24409*(-1.*t24168*t24186*t24406*t25481 + t24186*t24421*t25736 + t25757 + t25758 + t26080 + t26081))*var2[2];
  p_output1[36]=(t25090*(-1.*t22185*t24168*t25819 + t24168*t24186*t25832 + t25876) + t25318*t26051 + t24168*t24409*(t25025*t25481 + t24687*t25832 + t25884 + t25885 + t26182 + t26185))*var2[0] + (t25318*t26035 + t25090*t26040 + t25090*(t25631 + t24421*t25832 + t25853 + t26057 + t26058 + t26155) + t25078*(-1.*t25025*t25481 - 1.*t24687*t25832 + t25860 + t25861 + t26162 + t26166))*var2[1] + (t25078*(t22185*t24168*t25819 + t25828 - 1.*t24168*t24186*t25832) + t25090*t26013 + t24168*t24409*(t25596 - 1.*t24421*t25832 + t25843 + t26038 + t26039 + t26140))*var2[2];
  p_output1[37]=(t25090*(-1.*t22185*t24168*t25905 + t24168*t24186*t25919 + t25986) + t25078*t26051 + t24168*t24409*(t25574 + t24687*t25919 + t25991 + t26033 + t26034 + t26264))*var2[0] + (t25078*t26035 + t25348*t26040 + t25090*(t25056*t25481 + t24421*t25919 + t25942 + t25943 + t26238 + t26241) + t25078*(t25532 - 1.*t24687*t25919 + t25969 + t26023 + t26024 + t26249))*var2[1] + (t25078*(t22185*t24168*t25905 + t25912 - 1.*t24168*t24186*t25919) + t25348*t26013 + t24168*t24409*(-1.*t25056*t25481 - 1.*t24421*t25919 + t25930 + t25932 + t26210 + t26211))*var2[2];
  p_output1[38]=t25090*t26051 + t24168*t24409*t26059;
  p_output1[39]=t25090*t26035 + t25078*t26040;
  p_output1[40]=t25078*t26013 + t24168*t24409*t26025;
  p_output1[41]=(t24168*t24415*(t22185*t25479 - 1.*t24168*t25736 + t26109 + t26110) + t22185*(-1.*t24168*t24415*t25479 - 1.*t22185*t24415*t25736 + t26115 + t26117) - 1.*t22185*t24415*t26284 + t24168*t26294)*var2[0] + (t24168*t24415*(-1.*t24168*t24406*t25479 - 1.*t22185*t24406*t25736 + t26090 + t26091) + t24168*t24406*(t24168*t24415*t25479 + t22185*t24415*t25736 + t26098 + t26099) - 1.*t22185*t24406*t26331 - 1.*t22185*t24415*t26340)*var2[1] + (t24168*t24406*(-1.*t22185*t25479 + t24168*t25736 + t26070 + t26072) + t22185*(t24168*t24406*t25479 + t22185*t24406*t25736 + t26080 + t26081) - 1.*t22185*t24406*t26304 + t24168*t26319)*var2[2];
  p_output1[42]=(t24168*t24675*t26284 + t22185*(t25021*t25471 - 1.*t22185*t24675*t25479 + t24675*t25825 + t26182 + t26185 + t24415*t25819*t26350))*var2[0] + (t24168*t24415*t26331 + t24168*t24675*t26340 + t24168*t24406*(t22185*t24675*t25479 + t26162 + t26166 - 1.*t24415*t25819*t26350 + t26368 + t26369) + t24168*t24415*(t26057 + t26155 + t26291 + t26293 + t24406*t25819*t26350 + t26374))*var2[1] + (t24168*t24415*t26304 + t22185*(-1.*t24415*t25825 + t26038 + t26140 + t26329 + t26330 - 1.*t24406*t25819*t26350))*var2[2];
  p_output1[43]=(t24168*t24406*t26284 + t22185*(t24675*t25909 + t26033 + t26264 + t26338 + t26339 + t24415*t25905*t26350))*var2[0] + (t24168*t25021*t26331 + t24168*t24406*t26340 + t24168*t24406*(t26023 + t26249 + t26315 + t26317 - 1.*t24415*t25905*t26350 + t26402) + t24168*t24415*(-1.*t22185*t25021*t25479 + t26238 + t26241 + t24406*t25905*t26350 + t26406 + t26410))*var2[1] + (t24168*t25021*t26304 + t22185*(-1.*t24406*t25471 + t22185*t25021*t25479 - 1.*t24415*t25909 + t26210 + t26211 - 1.*t24406*t25905*t26350))*var2[2];
  p_output1[44]=t24168*t24415*t26284 + t22185*t26294;
  p_output1[45]=t24168*t24406*t26331 + t24168*t24415*t26340;
  p_output1[46]=t24168*t24406*t26304 + t22185*t26319;
  p_output1[47]=(0.1575*t24415 + 0.2255*t25021)*var2[0] + (t24415*(-1.*t24675*t25452 - 1.*t24415*t25819 + t26368 + t26369) + t24675*(t24415*t25452 + t24406*t25819 + t26291 + t26374) + t25021*t26433 + t24675*t26441)*var2[1] - 0.068*t24675*var2[2];
  p_output1[48]=(0.2255*t24415 + 0.1575*t25021)*var2[0] + (t24415*(-1.*t24406*t25452 - 1.*t24415*t25905 + t26317 + t26402) + t24675*(t25021*t25452 + t24406*t25905 + t26406 + t26410) + t24415*t26433 + t24406*t26441)*var2[1] - 0.068*t24406*var2[2];
  p_output1[49]=0.1575*t24406 + 0.2255*t24675;
  p_output1[50]=t24675*t26433 + t24415*t26441;
  p_output1[51]=-0.068*t24415;
  p_output1[52]=(0.325*t24337 - 1.*t24337*t25446 - 1.*t24337*t25902)*var2[0] + (-1.*t24403*t25902 + t26487 + t26488)*var2[2];
  p_output1[53]=-1.*t24337*t25439 + t26487 + t26488;
  p_output1[54]=-0.325*t24337 - 1.*t24403*t25439 + t24337*t25446;
  p_output1[55]=-0.0641;
  p_output1[56]=-0.28;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 57, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_fFrFoot_vec_ParallelStance.hh"

namespace ParallelStance
{

void J_fFrFoot_vec_ParallelStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
