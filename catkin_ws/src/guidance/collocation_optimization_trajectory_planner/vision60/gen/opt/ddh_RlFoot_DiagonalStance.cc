/*
 * Automatically Generated from Mathematica.
 * Thu 12 May 2022 11:32:00 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t5104;
  double t5115;
  double t5107;
  double t5980;
  double t6024;
  double t6309;
  double t6466;
  double t6482;
  double t6529;
  double t6698;
  double t7530;
  double t7771;
  double t7818;
  double t7825;
  double t7829;
  double t4781;
  double t7910;
  double t7912;
  double t7925;
  double t7935;
  double t7944;
  double t7947;
  double t7963;
  double t7965;
  double t7966;
  double t7988;
  double t8115;
  double t8082;
  double t8152;
  double t8153;
  double t8256;
  double t8335;
  double t4817;
  double t4822;
  double t8147;
  double t8339;
  double t8374;
  double t8930;
  double t8975;
  double t8978;
  double t8433;
  double t8444;
  double t8512;
  double t8561;
  double t8717;
  double t8790;
  double t8416;
  double t8802;
  double t8811;
  double t8985;
  double t8988;
  double t8989;
  double t8992;
  double t8997;
  double t9031;
  double t9038;
  double t9056;
  double t9311;
  double t9439;
  double t9607;
  double t4960;
  double t10309;
  double t10345;
  double t4963;
  double t11035;
  double t11043;
  double t11235;
  double t12051;
  double t12079;
  double t12089;
  double t12090;
  double t12095;
  double t12107;
  double t11331;
  double t11340;
  double t11361;
  double t11432;
  double t11711;
  double t11754;
  double t12263;
  double t12283;
  double t12288;
  double t12292;
  double t12298;
  double t12302;
  double t12304;
  double t12309;
  double t12313;
  double t12324;
  double t12325;
  double t12542;
  double t12545;
  double t12548;
  double t12685;
  double t12686;
  double t12771;
  double t12555;
  double t12566;
  double t12582;
  double t12679;
  double t12682;
  double t12683;
  double t12684;
  double t12783;
  double t12817;
  double t12818;
  double t13049;
  double t13165;
  double t13263;
  double t13694;
  double t13925;
  double t13930;
  double t13935;
  double t13940;
  double t10631;
  double t10662;
  double t10881;
  double t14939;
  double t14971;
  double t14972;
  double t14906;
  double t14920;
  double t14934;
  double t15055;
  double t15064;
  double t15069;
  double t14973;
  double t14974;
  double t14982;
  double t15046;
  double t15076;
  double t15126;
  double t15143;
  double t15149;
  double t15202;
  double t17002;
  double t17173;
  double t17215;
  double t17222;
  double t17224;
  double t17477;
  double t17700;
  double t17713;
  double t17715;
  double t20197;
  double t20218;
  double t20309;
  double t20422;
  double t20808;
  double t20809;
  double t20987;
  double t21181;
  double t21260;
  double t22564;
  double t22571;
  double t22577;
  double t22598;
  double t22621;
  double t23099;
  double t23100;
  double t23102;
  double t22595;
  double t22698;
  double t22805;
  double t22831;
  double t23217;
  double t23218;
  double t23272;
  double t23304;
  double t23340;
  double t23452;
  double t23453;
  double t23456;
  double t23479;
  double t23480;
  double t23503;
  double t23509;
  double t23510;
  double t23633;
  double t24267;
  double t24285;
  double t24319;
  double t24500;
  double t24501;
  double t24502;
  double t24623;
  double t24639;
  double t24641;
  double t24691;
  double t24696;
  double t24672;
  double t24673;
  double t24682;
  double t24683;
  double t24668;
  double t24687;
  double t24700;
  double t25147;
  double t25153;
  double t25197;
  double t25062;
  double t25063;
  double t25080;
  double t25106;
  double t25114;
  double t25130;
  double t25428;
  double t25431;
  double t25432;
  double t25357;
  double t25426;
  double t25453;
  double t25516;
  double t25518;
  double t25519;
  double t25522;
  double t25523;
  double t25524;
  double t25549;
  double t25571;
  double t25633;
  double t26018;
  double t26073;
  double t26078;
  double t24764;
  double t26157;
  double t26158;
  double t26159;
  double t26180;
  double t26182;
  double t26183;
  double t26207;
  double t26232;
  double t26238;
  double t26241;
  double t26243;
  double t26245;
  double t26136;
  double t26141;
  double t26131;
  double t26163;
  double t26499;
  double t26500;
  double t26505;
  double t26464;
  double t26496;
  double t26497;
  double t26507;
  double t26516;
  double t26518;
  double t26529;
  double t26532;
  double t26533;
  double t26535;
  double t26536;
  double t26537;
  double t26135;
  double t26152;
  double t26580;
  double t26584;
  double t26585;
  double t26600;
  double t26602;
  double t26603;
  double t26627;
  double t26657;
  double t26674;
  double t26699;
  double t26711;
  double t26716;
  double t26730;
  double t26732;
  double t26742;
  double t26786;
  double t26788;
  double t26789;
  double t26792;
  double t26793;
  double t26794;
  double t26780;
  double t26781;
  double t26782;
  double t26514;
  double t26807;
  double t26808;
  double t26809;
  double t26810;
  double t26811;
  double t26812;
  double t26813;
  double t26765;
  double t26772;
  double t26775;
  double t26802;
  double t26803;
  double t26805;
  double t26541;
  double t26542;
  double t26868;
  double t26869;
  double t26870;
  double t26871;
  double t26872;
  double t26873;
  double t26874;
  double t26829;
  double t26830;
  double t26831;
  double t26835;
  double t26837;
  double t26838;
  double t23720;
  double t23843;
  double t23850;
  double t26893;
  double t26896;
  double t26904;
  double t26905;
  double t26943;
  double t26973;
  double t23072;
  double t23074;
  double t23090;
  double t26980;
  double t26981;
  double t23966;
  double t24031;
  double t24035;
  double t27055;
  double t27058;
  double t27066;
  double t27068;
  double t24511;
  double t24513;
  double t24515;
  double t24537;
  double t24538;
  double t24540;
  double t27146;
  double t27149;
  double t27158;
  double t27156;
  double t27143;
  double t27151;
  double t27200;
  double t27203;
  double t27205;
  double t25758;
  double t25768;
  double t25770;
  double t27263;
  double t27264;
  double t27269;
  double t27275;
  double t27270;
  double t27272;
  double t27261;
  double t27265;
  double t27293;
  double t27296;
  double t26179;
  double t26185;
  double t26186;
  double t27301;
  double t27302;
  double t27340;
  double t27341;
  double t27342;
  double t27343;
  double t27262;
  double t27348;
  double t27349;
  double t27350;
  double t27351;
  double t27352;
  double t27353;
  double t27354;
  double t24886;
  double t27361;
  double t27362;
  double t27363;
  double t27300;
  double t27375;
  double t27376;
  double t27377;
  double t27378;
  double t27379;
  double t27380;
  double t27381;
  double t24888;
  double t24892;
  double t24977;
  double t25019;
  double t25043;
  double t25044;
  double t25051;
  double t25059;
  double t27357;
  double t27358;
  double t27359;
  double t27371;
  double t27372;
  double t27373;
  double t27316;
  double t27317;
  double t27396;
  double t27397;
  double t27398;
  double t27399;
  double t27400;
  double t27401;
  double t27409;
  double t27387;
  double t27388;
  double t27389;
  double t27392;
  double t27393;
  double t27394;
  double t27455;
  double t27459;
  double t27461;
  double t27507;
  double t27508;
  double t23219;
  double t27513;
  double t27514;
  double t27537;
  double t27556;
  double t27560;
  double t27562;
  double t12122;
  double t12330;
  double t12550;
  double t30434;
  double t30447;
  double t30941;
  double t30984;
  double t31043;
  double t31220;
  double t31406;
  double t31436;
  t5104 = Cos(var1[11]);
  t5115 = Sin(var1[11]);
  t5107 = -0.0641*t5104;
  t5980 = -0.28*t5115;
  t6024 = t5107 + t5980;
  t6309 = -1.*t5104*t6024;
  t6466 = -0.325*t5115;
  t6482 = -1.*t5104;
  t6529 = 1. + t6482;
  t6698 = -0.575*t6529;
  t7530 = -0.295*t5104;
  t7771 = -0.0641*t5115;
  t7818 = t6698 + t7530 + t7771;
  t7825 = -1.*t7818*t5115;
  t7829 = t6309 + t6466 + t7825;
  t4781 = Cos(var1[10]);
  t7910 = Sin(var1[10]);
  t7912 = t5104*t7910;
  t7925 = -1.*t4781*t5115;
  t7935 = t7912 + t7925;
  t7944 = -0.1575*t7935;
  t7947 = -1.*t5104*t7910;
  t7963 = t4781*t5115;
  t7965 = t7947 + t7963;
  t7966 = -0.2255*t7965;
  t7988 = t7944 + t7966;
  t8115 = Sin(var1[9]);
  t8082 = Cos(var1[9]);
  t8152 = 0.325*t7910;
  t8153 = t4781*t6024;
  t8256 = t7910*t7818;
  t8335 = t8152 + t8153 + t8256;
  t4817 = -1.*t4781;
  t4822 = 1. + t4817;
  t8147 = 0.068*t8115;
  t8339 = t8082*t8335;
  t8374 = t8147 + t8339;
  t8930 = t4781*t5104;
  t8975 = t7910*t5115;
  t8978 = t8930 + t8975;
  t8433 = -1.*t8082;
  t8444 = 1. + t8433;
  t8512 = 0.1575*t8444;
  t8561 = 0.2255*t8082;
  t8717 = -1.*t8115*t8335;
  t8790 = t8512 + t8561 + t8717;
  t8416 = -1.*t8115*t8374;
  t8802 = -1.*t8082*t8790;
  t8811 = t8416 + t8802;
  t8985 = t8082*t8811*t8978;
  t8988 = -0.325*t4822;
  t8989 = -1.*t7910*t6024;
  t8992 = t4781*t7818;
  t8997 = t8988 + t8989 + t8992;
  t9031 = t8997*t7965;
  t9038 = t8082*t8374*t8978;
  t9056 = -1.*t8115*t8790*t8978;
  t9311 = t9031 + t9038 + t9056;
  t9439 = t8115*t9311;
  t9607 = t8985 + t9439;
  t4960 = Cos(var1[4]);
  t10309 = Sin(var1[4]);
  t10345 = Sin(var1[5]);
  t4963 = Cos(var1[5]);
  t11035 = t8082*t10309;
  t11043 = t4960*t8115*t10345;
  t11235 = t11035 + t11043;
  t12051 = t8082*t7935*t10309;
  t12079 = t4963*t8978;
  t12089 = t8115*t7935*t10345;
  t12090 = t12079 + t12089;
  t12095 = t4960*t12090;
  t12107 = t12051 + t12095;
  t11331 = -1.*t4960*t4963*t7910;
  t11340 = t4781*t11235;
  t11361 = t11331 + t11340;
  t11432 = t4781*t4960*t4963;
  t11711 = t7910*t11235;
  t11754 = t11432 + t11711;
  t12263 = Sin(var1[3]);
  t12283 = -1.*t4963*t8115*t7935;
  t12288 = t8978*t10345;
  t12292 = t12283 + t12288;
  t12298 = t12263*t12292;
  t12302 = Cos(var1[3]);
  t12304 = t8082*t4960*t7935;
  t12309 = -1.*t10309*t12090;
  t12313 = t12304 + t12309;
  t12324 = t12302*t12313;
  t12325 = t12298 + t12324;
  t12542 = t12302*t12292;
  t12545 = -1.*t12263*t12313;
  t12548 = t12542 + t12545;
  t12685 = t4963*t8790;
  t12686 = t8997*t10345;
  t12771 = t12685 + t12686;
  t12555 = -1.*t4963*t8115*t8978;
  t12566 = t7965*t10345;
  t12582 = t12555 + t12566;
  t12679 = t4963*t8997;
  t12682 = -1.*t8790*t10345;
  t12683 = t12679 + t12682;
  t12684 = t8082*t10345*t12683;
  t12783 = -1.*t8082*t4963*t12771;
  t12817 = t8416 + t12684 + t12783;
  t12818 = t12582*t12817;
  t13049 = t12771*t12582;
  t13165 = t4963*t7965;
  t13263 = t8115*t8978*t10345;
  t13694 = t13165 + t13263;
  t13925 = t12683*t13694;
  t13930 = t9038 + t13049 + t13925;
  t13935 = t8082*t4963*t13930;
  t13940 = t12818 + t13935;
  t10631 = t8115*t10309;
  t10662 = -1.*t8082*t4960*t10345;
  t10881 = t10631 + t10662;
  t14939 = t8374*t10309;
  t14971 = t4960*t12683;
  t14972 = t14939 + t14971;
  t14906 = t8082*t8978*t10309;
  t14920 = t4960*t13694;
  t14934 = t14906 + t14920;
  t15055 = t4960*t8374;
  t15064 = -1.*t10309*t12683;
  t15069 = t15055 + t15064;
  t14973 = -1.*t10881*t14972;
  t14974 = t4960*t8115;
  t14982 = t8082*t10309*t10345;
  t15046 = t14974 + t14982;
  t15076 = -1.*t15046*t15069;
  t15126 = t12783 + t14973 + t15076;
  t15143 = t14934*t15126;
  t15149 = t14972*t14934;
  t15202 = t8082*t4960*t8978;
  t17002 = -1.*t10309*t13694;
  t17173 = t15202 + t17002;
  t17215 = t15069*t17173;
  t17222 = t13049 + t15149 + t17215;
  t17224 = t10881*t17222;
  t17477 = t15143 + t17224;
  t17700 = t4963*t8115*t7935;
  t17713 = -1.*t8978*t10345;
  t17715 = t17700 + t17713;
  t20197 = -1.*t4963*t8790;
  t20218 = -1.*t8997*t10345;
  t20309 = t20197 + t20218;
  t20422 = t8082*t10345*t12771;
  t20808 = t4963*t8115*t8978;
  t20809 = -1.*t7965*t10345;
  t20987 = t20808 + t20809;
  t21181 = t12683*t12582;
  t21260 = t12771*t13694;
  t22564 = -0.068*t8115;
  t22571 = -1.*t8082*t8335;
  t22577 = t22564 + t22571;
  t22598 = 0.068*t8082;
  t22621 = t22598 + t8717;
  t23099 = -1.*t4960*t8115*t7935;
  t23100 = -1.*t8082*t7935*t10309*t10345;
  t23102 = t23099 + t23100;
  t22595 = -1.*t8082*t8374;
  t22698 = -1.*t8115*t22621;
  t22805 = -1.*t8115*t8374*t8978;
  t22831 = t8082*t22621*t8978;
  t23217 = Power(t4963,2);
  t23218 = -1.*t8082*t23217*t22577;
  t23272 = t4963*t8115*t12771;
  t23304 = -1.*t8082*t4963*t8978*t12771;
  t23340 = t4963*t22577*t12582;
  t23452 = -1.*t8115*t8978*t10309;
  t23453 = t8082*t4960*t8978*t10345;
  t23456 = t23452 + t23453;
  t23479 = t22621*t10309;
  t23480 = -1.*t4960*t22577*t10345;
  t23503 = t23479 + t23480;
  t23509 = t4960*t22621;
  t23510 = t22577*t10309*t10345;
  t23633 = t23509 + t23510;
  t24267 = -1.*t8082*t7935*t10309;
  t24285 = -1.*t4960*t12090;
  t24319 = t24267 + t24285;
  t24500 = -1.*t8374*t10309;
  t24501 = -1.*t4960*t12683;
  t24502 = t24500 + t24501;
  t24623 = -1.*t4781*t5104;
  t24639 = -1.*t7910*t5115;
  t24641 = t24623 + t24639;
  t24691 = 0.325*t4781;
  t24696 = t24691 + t8989 + t8992;
  t24672 = -0.325*t7910;
  t24673 = -1.*t4781*t6024;
  t24682 = -1.*t7910*t7818;
  t24683 = t24672 + t24673 + t24682;
  t24668 = t8082*t8374*t7965;
  t24687 = Power(t8082,2);
  t24700 = t24687*t24696*t8978;
  t25147 = -1.*t4963*t8115*t24696;
  t25153 = t24683*t10345;
  t25197 = t25147 + t25153;
  t25062 = -1.*t4963*t8115*t7965;
  t25063 = t24641*t10345;
  t25080 = t25062 + t25063;
  t25106 = t4963*t24683;
  t25114 = t8115*t24696*t10345;
  t25130 = t25106 + t25114;
  t25428 = t4963*t24641;
  t25431 = t8115*t7965*t10345;
  t25432 = t25428 + t25431;
  t25357 = -1.*t8082*t4963*t25197;
  t25426 = t25197*t12582;
  t25453 = t12771*t25080;
  t25516 = t8082*t7965*t10309;
  t25518 = t4960*t25432;
  t25519 = t25516 + t25518;
  t25522 = t8082*t24696*t10309;
  t25523 = t4960*t25130;
  t25524 = t25522 + t25523;
  t25549 = t8082*t4960*t24696;
  t25571 = -1.*t10309*t25130;
  t25633 = t25549 + t25571;
  t26018 = -0.28*t5104;
  t26073 = 0.0641*t5115;
  t26078 = t26018 + t26073;
  t24764 = Power(t8115,2);
  t26157 = t7910*t6024;
  t26158 = t4781*t26078;
  t26159 = t26157 + t26158;
  t26180 = t4963*t7935;
  t26182 = t8115*t24641*t10345;
  t26183 = t26180 + t26182;
  t26207 = -1.*t4963*t8115*t24641;
  t26232 = t7935*t10345;
  t26238 = t26207 + t26232;
  t26241 = t8082*t4960*t24641;
  t26243 = -1.*t10309*t26183;
  t26245 = t26241 + t26243;
  t26136 = -1.*t7910*t26078;
  t26141 = t8153 + t26136;
  t26131 = t8082*t8374*t7935;
  t26163 = t24687*t26159*t8978;
  t26499 = -1.*t4963*t8115*t26159;
  t26500 = t26141*t10345;
  t26505 = t26499 + t26500;
  t26464 = t4963*t26141;
  t26496 = t8115*t26159*t10345;
  t26497 = t26464 + t26496;
  t26507 = -1.*t8082*t4963*t26505;
  t26516 = t26505*t12582;
  t26518 = t12771*t12292;
  t26529 = t8082*t26159*t10309;
  t26532 = t4960*t26497;
  t26533 = t26529 + t26532;
  t26535 = t8082*t4960*t26159;
  t26536 = -1.*t10309*t26497;
  t26537 = t26535 + t26536;
  t26135 = -1.*t8115*t8790*t7935;
  t26152 = t8997*t8978;
  t26580 = -1.*t8997*t7965;
  t26584 = -1.*t8082*t8374*t8978;
  t26585 = t8115*t8790*t8978;
  t26600 = t26580 + t26584 + t26585;
  t26602 = t8082*t7935*t26600;
  t26603 = t26131 + t26135 + t26152;
  t26627 = t8082*t8978*t26603;
  t26657 = t26602 + t26627;
  t26674 = t8335*t7935;
  t26699 = t26674 + t26152;
  t26711 = t7965*t26699;
  t26716 = -1.*t8335*t8978;
  t26730 = t26580 + t26716;
  t26732 = t8978*t26730;
  t26742 = t26711 + t26732;
  t26786 = t8082*t4963*t12263;
  t26788 = t12302*t15046;
  t26789 = t26786 + t26788;
  t26792 = t8082*t12302*t4963;
  t26793 = -1.*t12263*t15046;
  t26794 = t26792 + t26793;
  t26780 = t12302*t4963;
  t26781 = -1.*t12263*t10309*t10345;
  t26782 = t26780 + t26781;
  t26514 = t12683*t12090;
  t26807 = t26131 + t26514 + t26518;
  t26808 = t12582*t26807;
  t26809 = -1.*t12771*t12582;
  t26810 = -1.*t12683*t13694;
  t26811 = t26584 + t26809 + t26810;
  t26812 = t12292*t26811;
  t26813 = t26808 + t26812;
  t26765 = t4963*t12263*t10309;
  t26772 = t12302*t10345;
  t26775 = t26765 + t26772;
  t26802 = -1.*t8082*t4960*t12263;
  t26803 = -1.*t8115*t26782;
  t26805 = t26802 + t26803;
  t26541 = t14972*t12107;
  t26542 = t15069*t12313;
  t26868 = t26518 + t26541 + t26542;
  t26869 = t14934*t26868;
  t26870 = -1.*t14972*t14934;
  t26871 = -1.*t15069*t17173;
  t26872 = t26809 + t26870 + t26871;
  t26873 = t12107*t26872;
  t26874 = t26869 + t26873;
  t26829 = -1.*t7910*t26775;
  t26830 = t4781*t26805;
  t26831 = t26829 + t26830;
  t26835 = t4781*t26775;
  t26837 = t7910*t26805;
  t26838 = t26835 + t26837;
  t23720 = t8082*t4960;
  t23843 = -1.*t8115*t10309*t10345;
  t23850 = t23720 + t23843;
  t26893 = -1.*t8115*t8374*t7935;
  t26896 = t8082*t22621*t7935;
  t26904 = t8115*t8374*t8978;
  t26905 = -1.*t8082*t22621*t8978;
  t26943 = -1.*t8082*t4963*t7935*t12771;
  t26973 = t4963*t22577*t12292;
  t23072 = -1.*t8115*t7935*t10309;
  t23074 = t8082*t4960*t7935*t10345;
  t23090 = t23072 + t23074;
  t26980 = t8082*t4963*t8978*t12771;
  t26981 = -1.*t4963*t22577*t12582;
  t23966 = -1.*t4960*t8115*t8978;
  t24031 = -1.*t8082*t8978*t10309*t10345;
  t24035 = t23966 + t24031;
  t27055 = t12771*t12090;
  t27058 = t12683*t12292;
  t27066 = -1.*t12683*t12582;
  t27068 = -1.*t12771*t13694;
  t24511 = -1.*t8115*t10309;
  t24513 = t8082*t4960*t10345;
  t24515 = t24511 + t24513;
  t24537 = -1.*t8082*t8978*t10309;
  t24538 = -1.*t4960*t13694;
  t24540 = t24537 + t24538;
  t27146 = -1.*t24683*t7965;
  t27149 = -1.*t8997*t24641;
  t27158 = t24683*t8978;
  t27156 = t24687*t24696*t7935;
  t27143 = -1.*t8082*t8374*t7965;
  t27151 = -1.*t24687*t24696*t8978;
  t27200 = t25197*t12292;
  t27203 = -1.*t25197*t12582;
  t27205 = -1.*t12771*t25080;
  t25758 = t8082*t4960*t7965;
  t25768 = -1.*t10309*t25432;
  t25770 = t25758 + t25768;
  t27263 = -1.*t26141*t7965;
  t27264 = -1.*t8997*t8978;
  t27269 = t8997*t7935;
  t27275 = t26141*t8978;
  t27270 = t24687*t26159*t7935;
  t27272 = t8082*t8374*t24641;
  t27261 = -1.*t8082*t8374*t7935;
  t27265 = -1.*t24687*t26159*t8978;
  t27293 = t12771*t26238;
  t27296 = t26505*t12292;
  t26179 = t8082*t24641*t10309;
  t26185 = t4960*t26183;
  t26186 = t26179 + t26185;
  t27301 = -1.*t26505*t12582;
  t27302 = -1.*t12771*t12292;
  t27340 = 0.325*t5104;
  t27341 = t5104*t7818;
  t27342 = -1.*t6024*t5115;
  t27343 = t27340 + t27341 + t27342;
  t27262 = t8115*t8790*t7935;
  t27348 = t8115*t8374;
  t27349 = t8082*t8790;
  t27350 = t27348 + t27349;
  t27351 = t8082*t27350*t7935;
  t27352 = t27261 + t27262 + t27264;
  t27353 = t8115*t27352;
  t27354 = t27351 + t27353;
  t24886 = var2[0]*t14934;
  t27361 = t4963*t12263;
  t27362 = t12302*t10309*t10345;
  t27363 = t27361 + t27362;
  t27300 = -1.*t12683*t12090;
  t27375 = -1.*t8082*t10345*t12683;
  t27376 = t8082*t4963*t12771;
  t27377 = t27348 + t27375 + t27376;
  t27378 = t12292*t27377;
  t27379 = t27261 + t27300 + t27302;
  t27380 = t8082*t4963*t27379;
  t27381 = t27378 + t27380;
  t24888 = t12263*t12582;
  t24892 = t12302*t17173;
  t24977 = t24888 + t24892;
  t25019 = var2[2]*t24977;
  t25043 = t12302*t12582;
  t25044 = -1.*t12263*t17173;
  t25051 = t25043 + t25044;
  t25059 = var2[1]*t25051;
  t27357 = -1.*t12302*t4963*t10309;
  t27358 = t12263*t10345;
  t27359 = t27357 + t27358;
  t27371 = t8082*t12302*t4960;
  t27372 = -1.*t8115*t27363;
  t27373 = t27371 + t27372;
  t27316 = -1.*t14972*t12107;
  t27317 = -1.*t15069*t12313;
  t27396 = t10881*t14972;
  t27397 = t15046*t15069;
  t27398 = t27376 + t27396 + t27397;
  t27399 = t12107*t27398;
  t27400 = t27302 + t27316 + t27317;
  t27401 = t10881*t27400;
  t27409 = t27399 + t27401;
  t27387 = -1.*t7910*t27359;
  t27388 = t4781*t27373;
  t27389 = t27387 + t27388;
  t27392 = t4781*t27359;
  t27393 = t7910*t27373;
  t27394 = t27392 + t27393;
  t27455 = -1.*t8082*t10345*t12771;
  t27459 = -1.*t12771*t12090;
  t27461 = -1.*t12683*t12292;
  t27507 = t8082*t8374;
  t27508 = t8115*t22621;
  t23219 = Power(t10345,2);
  t27513 = t8115*t8374*t7935;
  t27514 = -1.*t8082*t22621*t7935;
  t27537 = t8082*t23217*t22577;
  t27556 = -1.*t4963*t8115*t12771;
  t27560 = t8082*t4963*t7935*t12771;
  t27562 = -1.*t4963*t22577*t12292;
  t12122 = var2[0]*t12107;
  t12330 = var2[2]*t12325;
  t12550 = var2[1]*t12548;
  t30434 = -1.*t24687*t26159*t7935;
  t30447 = -1.*t8082*t8374*t24641;
  t30941 = t8082*t4963*t26505;
  t30984 = -1.*t12771*t26238;
  t31043 = -1.*t26505*t12292;
  t31220 = -1.*t24687*t24696*t7935;
  t31406 = t8082*t4963*t25197;
  t31436 = -1.*t25197*t12292;
  p_output1[0]=0.2255*t10881 + t12122 + t12330 + t12550 - 0.325*t4822*t4960*t4963 - 0.575*t11361*t5115 - 0.295*(t11754*t5104 - 1.*t11361*t5115) - 0.0641*(t11361*t5104 + t11754*t5115) - 0.575*t11754*t6529 + 0.325*t11235*t7910 - 0.1575*t10309*t8115 - 0.1575*t10345*t4960*t8444 + var1[0] + t17477*var2[3] + ((-1.*t12263*t12292 - 1.*t12302*t12313)*var2[1] + t12548*var2[2])*var2[3] + t13940*var2[4] + (t12313*var2[0] - 1.*t12263*t24319*var2[1] + t12302*t24319*var2[2] + (t15126*t17173 + t15046*t17222 + t14934*(-1.*t14972*t15046 - 1.*t10881*t15069 - 1.*t15046*t24502 - 1.*t15069*t24515) + t10881*(t14934*t15069 + t14972*t17173 + t17173*t24502 + t15069*t24540))*var2[3])*var2[4] + t9607*var2[5] + (t17715*t4960*var2[0] + (t12090*t12302 + t10309*t12263*t17715)*var2[1] + (t12090*t12263 - 1.*t10309*t12302*t17715)*var2[2] + (t15126*t20987*t4960 + t10881*(-1.*t10309*t17173*t20309 - 1.*t10309*t15069*t20987 + t21181 + t21260 + t14934*t20309*t4960 + t14972*t20987*t4960) - 1.*t17222*t4960*t4963*t8082 + t14934*(t10309*t15046*t20309 + t20422 - 1.*t10881*t20309*t4960 - 1.*t12683*t4963*t8082 - 1.*t10309*t15069*t4963*t8082 + t14972*t4960*t4963*t8082))*var2[3] + (t12817*t13694 - 1.*t10345*t13930*t8082 + (t13694*t20309 + t12683*t20987 + t21181 + t21260)*t4963*t8082 + t12582*(t20422 + t10345*t20309*t8082))*var2[4])*var2[5] + t7988*var2[9] + (t23090*var2[0] + (-1.*t12263*t23102 - 1.*t12302*t4963*t7935*t8082)*var2[1] + (t12302*t23102 - 1.*t12263*t4963*t7935*t8082)*var2[2] + (t11235*t17222 + t15126*t23456 + t14934*(-1.*t11235*t14972 + t23218 + t23272 - 1.*t10881*t23503 - 1.*t15046*t23633 - 1.*t15069*t23850) + t10881*(t23304 + t23340 + t14972*t23456 + t14934*t23503 + t17173*t23633 + t15069*t24035))*var2[3] + (-1.*t13930*t4963*t8115 + t12582*(t22595 + t22698 + t23218 + t23272 - 1.*t22577*t23219*t8082 - 1.*t10345*t12683*t8115) - 1.*t12817*t4963*t8082*t8978 + t4963*t8082*(-1.*t10345*t13694*t22577 + t22805 + t22831 + t23304 + t23340 + t10345*t12683*t8082*t8978))*var2[4] + (t8082*(t22595 + t22698 - 1.*t22577*t8082 + t8115*t8790)*t8978 - 1.*t8115*t8811*t8978 + t8115*(t22805 + t22831 - 1.*t22577*t8115*t8978 - 1.*t8082*t8790*t8978) + t8082*t9311)*var2[5])*var2[9] + t7829*var2[10] + (t24886 + t25019 + t25059 + (t15126*t25519 + t14934*(t25357 - 1.*t10881*t25524 - 1.*t15046*t25633) + t10881*(t25426 + t25453 + t14972*t25519 + t14934*t25524 + t17173*t25633 + t15069*t25770))*var2[3] + (t12817*t25080 + (t24668 + t24700 + t13694*t25130 + t25426 + t12683*t25432 + t25453)*t4963*t8082 + t12582*(t25357 + t10345*t25130*t8082 - 1.*t24696*t8082*t8115))*var2[4] + (t7965*t8082*t8811 + t8115*(t24668 + t24700 + t24683*t7965 - 1.*t7965*t8115*t8790 + t24696*t24764*t8978 + t24641*t8997))*var2[5] + (-0.2255*t24641 - 0.1575*t8978)*var2[9])*var2[10] - 0.0641*var2[11] + (t26186*var2[0] + (t12302*t26238 - 1.*t12263*t26245)*var2[1] + (t12263*t26238 + t12302*t26245)*var2[2] + (t12107*t15126 + t14934*(t26507 - 1.*t10881*t26533 - 1.*t15046*t26537) + t10881*(t26516 + t26518 + t14934*t26533 + t17173*t26537 + t26541 + t26542))*var2[3] + (t12292*t12817 + (t26131 + t26163 + t13694*t26497 + t26514 + t26516 + t26518)*t4963*t8082 + t12582*(t26507 + t10345*t26497*t8082 - 1.*t26159*t8082*t8115))*var2[4] + (t7935*t8082*t8811 + t8115*(t26131 + t26135 + t26152 + t26163 + t26141*t7965 + t24764*t26159*t8978))*var2[5] + (-0.1575*t24641 - 0.2255*t8978)*var2[9] + (-0.325*t5104 - 1.*t26078*t5104 - 1.*t5104*t7818)*var2[10])*var2[11] + t12107*var3[0] + t12548*var3[1] + t12325*var3[2] + t17477*var3[3] + t13940*var3[4] + t9607*var3[5] + t7988*var3[9] + t7829*var3[10] - 0.0641*var3[11] - 1.*var4[0];
  p_output1[1]=-0.325*t26775*t4822 - 0.575*t26831*t5115 - 0.295*(t26838*t5104 - 1.*t26831*t5115) - 0.0641*(t26831*t5104 + t26838*t5115) - 0.575*t26838*t6529 + 0.325*t26805*t7910 + 0.1575*t12263*t4960*t8115 + 0.2255*(t26782*t8082 - 1.*t12263*t4960*t8115) + 0.1575*t26782*t8444 + var1[1] + t10881*var2[0] + t26794*var2[1] + t26789*var2[2] + t26874*var2[3] + ((-1.*t12302*t15046 - 1.*t12263*t4963*t8082)*var2[1] + t26794*var2[2])*var2[3] + t26813*var2[4] + (t15046*var2[0] - 1.*t12263*t24515*var2[1] + t12302*t24515*var2[2] + (t14934*(t12313*t14972 + t12107*t15069 + t15069*t24319 + t12313*t24502) + t12107*(-1.*t14934*t15069 - 1.*t14972*t17173 - 1.*t17173*t24502 - 1.*t15069*t24540) + t17173*t26868 + t12313*t26872)*var2[3])*var2[4] + t26657*var2[5] + (-1.*t4960*t4963*t8082*var2[0] + (-1.*t10345*t12302*t8082 - 1.*t10309*t12263*t4963*t8082)*var2[1] + (-1.*t10345*t12263*t8082 + t10309*t12302*t4963*t8082)*var2[2] + (t20987*t26868*t4960 + t17715*t26872*t4960 + t14934*(-1.*t10309*t15069*t17715 - 1.*t10309*t12313*t20309 + t27055 + t27058 + t14972*t17715*t4960 + t12107*t20309*t4960) + t12107*(t10309*t17173*t20309 + t10309*t15069*t20987 + t27066 + t27068 - 1.*t14934*t20309*t4960 - 1.*t14972*t20987*t4960))*var2[3] + (t13694*t26807 + t12090*t26811 + t12582*(t12683*t17715 + t12090*t20309 + t27055 + t27058) + t12292*(-1.*t13694*t20309 - 1.*t12683*t20987 + t27066 + t27068))*var2[4])*var2[5] + t26742*var2[9] + (t11235*var2[0] + (-1.*t12263*t23850 - 1.*t12302*t4963*t8115)*var2[1] + (t12302*t23850 - 1.*t12263*t4963*t8115)*var2[2] + (t23456*t26868 + t23090*t26872 + t14934*(t14972*t23090 + t15069*t23102 + t12107*t23503 + t12313*t23633 + t26943 + t26973) + t12107*(-1.*t14972*t23456 - 1.*t14934*t23503 - 1.*t17173*t23633 - 1.*t15069*t24035 + t26980 + t26981))*var2[3] + (-1.*t26811*t4963*t7935*t8082 + t12582*(-1.*t10345*t12090*t22577 + t26893 + t26896 + t26943 + t26973 + t10345*t12683*t7935*t8082) - 1.*t26807*t4963*t8082*t8978 + t12292*(t10345*t13694*t22577 + t26904 + t26905 + t26980 + t26981 - 1.*t10345*t12683*t8082*t8978))*var2[4] + (-1.*t26600*t7935*t8115 - 1.*t26603*t8115*t8978 + t8082*(t26893 + t26896 - 1.*t22577*t7935*t8115 - 1.*t7935*t8082*t8790)*t8978 + t7935*t8082*(t26904 + t26905 + t22577*t8115*t8978 + t8082*t8790*t8978))*var2[5])*var2[9] + ((t25519*t26868 + t14934*t26872 + t14934*(t13049 + t15149 + t17215 + t12107*t25524 + t12313*t25633 + t27200) + t12107*(-1.*t14972*t25519 - 1.*t14934*t25524 - 1.*t17173*t25633 - 1.*t15069*t25770 + t27203 + t27205))*var2[3] + (t25080*t26807 + t12582*t26811 + t12292*(-1.*t13694*t25130 - 1.*t12683*t25432 + t27143 + t27151 + t27203 + t27205) + t12582*(t13049 + t13925 + t12090*t25130 + t27156 + t27200 + t9038))*var2[4] + (t26603*t7965*t8082 + t26600*t8082*t8978 + t7935*t8082*(t27143 + t27146 + t27149 + t27151 + t7965*t8115*t8790 - 1.*t24696*t24764*t8978) + t8082*t8978*(t27156 + t27158 + t24696*t24764*t7935 + t9031 + t9038 + t9056))*var2[5] + (t24641*t26699 + t26730*t7965 + t8978*(t27146 + t27149 - 1.*t7965*t8335 - 1.*t24696*t8978) + t7965*(t27158 + t24696*t7935 + t8335*t8978 + t9031))*var2[9])*var2[10] + ((t12107*t26868 + t26186*t26872 + t14934*(t14972*t26186 + t15069*t26245 + t12107*t26533 + t12313*t26537 + t27293 + t27296) + t12107*(-1.*t14934*t26533 - 1.*t17173*t26537 + t27301 + t27302 + t27316 + t27317))*var2[3] + (t12292*t26807 + t26238*t26811 + t12582*(t12683*t26183 + t12090*t26497 + t27270 + t27272 + t27293 + t27296) + t12292*(-1.*t13694*t26497 + t27261 + t27265 + t27300 + t27301 + t27302))*var2[4] + (t24641*t26600*t8082 + t26603*t7935*t8082 + t8082*(t27269 + t27270 + t27272 + t27275 + t24764*t26159*t7935 - 1.*t24641*t8115*t8790)*t8978 + t7935*t8082*(t27261 + t27262 + t27263 + t27264 + t27265 - 1.*t24764*t26159*t8978))*var2[5] + (t26730*t7935 + t7965*(t27269 + t27275 + t26159*t7935 + t24641*t8335) + t26699*t8978 + t8978*(t27263 + t27264 - 1.*t7935*t8335 - 1.*t26159*t8978))*var2[9])*var2[11] + t10881*var3[0] + t26794*var3[1] + t26789*var3[2] + t26874*var3[3] + t26813*var3[4] + t26657*var3[5] + t26742*var3[9] - 1.*var4[1];
  p_output1[2]=t24886 + t25019 + t25059 - 0.325*t27359*t4822 - 0.575*t27389*t5115 - 0.295*(t27394*t5104 - 1.*t27389*t5115) - 0.0641*(t27389*t5104 + t27394*t5115) - 0.575*t27394*t6529 + 0.325*t27373*t7910 - 0.1575*t12302*t4960*t8115 + 0.2255*(t27363*t8082 + t12302*t4960*t8115) + 0.1575*t27363*t8444 + var1[2] + t27409*var2[3] + ((-1.*t12263*t12582 - 1.*t12302*t17173)*var2[1] + t25051*var2[2])*var2[3] + t27381*var2[4] + (t17173*var2[0] - 1.*t12263*t24540*var2[1] + t12302*t24540*var2[2] + (t10881*(-1.*t12313*t14972 - 1.*t12107*t15069 - 1.*t15069*t24319 - 1.*t12313*t24502) + t12107*(t14972*t15046 + t10881*t15069 + t15046*t24502 + t15069*t24515) + t12313*t27398 + t15046*t27400)*var2[3])*var2[4] + t27354*var2[5] + (t20987*t4960*var2[0] + (t12302*t13694 + t10309*t12263*t20987)*var2[1] + (t12263*t13694 - 1.*t10309*t12302*t20987)*var2[2] + (t17715*t27398*t4960 + t10881*(t10309*t15069*t17715 + t10309*t12313*t20309 + t27459 + t27461 - 1.*t14972*t17715*t4960 - 1.*t12107*t20309*t4960) - 1.*t27400*t4960*t4963*t8082 + t12107*(-1.*t10309*t15046*t20309 + t27455 + t10881*t20309*t4960 + t12683*t4963*t8082 + t10309*t15069*t4963*t8082 - 1.*t14972*t4960*t4963*t8082))*var2[3] + (t12090*t27377 - 1.*t10345*t27379*t8082 + (-1.*t12683*t17715 - 1.*t12090*t20309 + t27459 + t27461)*t4963*t8082 + t12292*(t27455 - 1.*t10345*t20309*t8082))*var2[4])*var2[5] + 0.068*t8978*var2[9] + (t23456*var2[0] + (-1.*t12263*t24035 - 1.*t12302*t4963*t8082*t8978)*var2[1] + (t12302*t24035 - 1.*t12263*t4963*t8082*t8978)*var2[2] + (t23090*t27398 + t11235*t27400 + t12107*(t11235*t14972 + t10881*t23503 + t15046*t23633 + t15069*t23850 + t27537 + t27556) + t10881*(-1.*t14972*t23090 - 1.*t15069*t23102 - 1.*t12107*t23503 - 1.*t12313*t23633 + t27560 + t27562))*var2[3] + (-1.*t27377*t4963*t7935*t8082 + t4963*t8082*(t10345*t12090*t22577 + t27513 + t27514 + t27560 + t27562 - 1.*t10345*t12683*t7935*t8082) - 1.*t27379*t4963*t8115 + t12292*(t27507 + t27508 + t27537 + t27556 + t22577*t23219*t8082 + t10345*t12683*t8115))*var2[4] + (t27352*t8082 - 1.*t27350*t7935*t8115 + t8115*(t27513 + t27514 + t22577*t7935*t8115 + t7935*t8082*t8790) + t7935*t8082*(t27507 + t27508 + t22577*t8082 - 1.*t8115*t8790))*var2[5])*var2[9] + t27343*var2[10] + (t25519*var2[0] + (t12302*t25080 - 1.*t12263*t25770)*var2[1] + (t12263*t25080 + t12302*t25770)*var2[2] + (t14934*t27398 + t12107*(t10881*t25524 + t15046*t25633 + t31406) + t10881*(-1.*t12107*t25524 - 1.*t12313*t25633 + t26809 + t26870 + t26871 + t31436))*var2[3] + (t12582*t27377 + (-1.*t12090*t25130 + t26584 + t26809 + t26810 + t31220 + t31436)*t4963*t8082 + t12292*(t31406 - 1.*t10345*t25130*t8082 + t24696*t8082*t8115))*var2[4] + (t27350*t8082*t8978 + t8115*(t26580 + t26584 + t26585 + t31220 - 1.*t24696*t24764*t7935 - 1.*t24683*t8978))*var2[5] + 0.068*t7965*var2[9])*var2[10] - 0.28*var2[11] + (t12122 + t12330 + t12550 + (t26186*t27398 + t12107*(t10881*t26533 + t15046*t26537 + t30941) + t10881*(-1.*t14972*t26186 - 1.*t15069*t26245 - 1.*t12107*t26533 - 1.*t12313*t26537 + t30984 + t31043))*var2[3] + (t26238*t27377 + (-1.*t12683*t26183 - 1.*t12090*t26497 + t30434 + t30447 + t30984 + t31043)*t4963*t8082 + t12292*(t30941 - 1.*t10345*t26497*t8082 + t26159*t8082*t8115))*var2[4] + (t24641*t27350*t8082 + t8115*(t30434 + t30447 - 1.*t24764*t26159*t7935 + t24641*t8115*t8790 - 1.*t26141*t8978 - 1.*t7935*t8997))*var2[5] + 0.068*t7935*var2[9] + (-1.*t26078*t5115 + t6466 + t7825)*var2[10])*var2[11] + t14934*var3[0] + t25051*var3[1] + t24977*var3[2] + t27409*var3[3] + t27381*var3[4] + t27354*var3[5] + 0.068*t8978*var3[9] + t27343*var3[10] - 0.28*var3[11] - 1.*var4[2];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "ddh_RlFoot_DiagonalStance.hh"

namespace DiagonalStance
{

void ddh_RlFoot_DiagonalStance_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
