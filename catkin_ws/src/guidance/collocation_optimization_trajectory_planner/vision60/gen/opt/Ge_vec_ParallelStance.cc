/*
 * Automatically Generated from Mathematica.
 * Sun 3 Apr 2022 20:57:04 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t17149;
  double t17914;
  double t17498;
  double t17632;
  double t17935;
  double t3987;
  double t12288;
  double t17950;
  double t17965;
  double t17972;
  double t17981;
  double t17875;
  double t17940;
  double t17942;
  double t18052;
  double t18127;
  double t17946;
  double t18167;
  double t18551;
  double t17366;
  double t17952;
  double t17956;
  double t17985;
  double t17987;
  double t17991;
  double t17995;
  double t19477;
  double t19518;
  double t19526;
  double t19527;
  double t19529;
  double t18122;
  double t18130;
  double t18137;
  double t18143;
  double t18146;
  double t18153;
  double t18161;
  double t19577;
  double t19737;
  double t19741;
  double t19743;
  double t19748;
  double t18196;
  double t18652;
  double t18883;
  double t18896;
  double t19019;
  double t19047;
  double t19224;
  double t19767;
  double t19831;
  double t19853;
  double t19981;
  double t20037;
  double t19493;
  double t19502;
  double t19512;
  double t19516;
  double t19537;
  double t19542;
  double t19543;
  double t19552;
  double t20096;
  double t20104;
  double t20109;
  double t20116;
  double t20159;
  double t19726;
  double t19728;
  double t19732;
  double t19734;
  double t19750;
  double t19751;
  double t19752;
  double t19758;
  double t20200;
  double t20201;
  double t20202;
  double t20203;
  double t20205;
  double t19772;
  double t19773;
  double t19813;
  double t19827;
  double t20065;
  double t20066;
  double t20071;
  double t20077;
  double t20216;
  double t20217;
  double t20218;
  double t20219;
  double t20221;
  double t18125;
  double t20232;
  double t20236;
  double t20233;
  double t20234;
  double t20235;
  double t20237;
  double t20238;
  double t20239;
  double t20240;
  double t20244;
  double t20250;
  double t20251;
  double t20291;
  double t20331;
  double t20245;
  double t20247;
  double t20248;
  double t20249;
  double t20332;
  double t20337;
  double t20344;
  double t20348;
  double t20372;
  double t20421;
  double t20422;
  double t20423;
  double t20424;
  double t20434;
  double t20435;
  double t20436;
  double t20437;
  double t20438;
  double t20439;
  double t20464;
  double t20465;
  double t20466;
  double t20445;
  double t20446;
  double t20447;
  double t20448;
  double t20449;
  double t20476;
  double t20477;
  double t20478;
  double t20453;
  double t20454;
  double t20455;
  double t20456;
  double t20457;
  double t20585;
  double t20590;
  double t20602;
  double t20461;
  double t20463;
  double t20467;
  double t20160;
  double t20191;
  double t20468;
  double t20469;
  double t20470;
  double t20681;
  double t20682;
  double t20689;
  double t20474;
  double t20475;
  double t20480;
  double t20206;
  double t20207;
  double t20481;
  double t20522;
  double t20562;
  double t20759;
  double t20767;
  double t20773;
  double t20567;
  double t20572;
  double t20607;
  double t20222;
  double t20223;
  double t20619;
  double t20620;
  double t20625;
  double t20833;
  double t20834;
  double t20835;
  double t20444;
  double t20847;
  double t20849;
  double t20850;
  double t20851;
  double t20853;
  double t20861;
  double t20862;
  double t20863;
  double t20858;
  double t20859;
  double t20865;
  double t20379;
  double t20419;
  double t20866;
  double t20867;
  double t20869;
  double t20875;
  double t20877;
  double t20878;
  double t20887;
  double t20888;
  double t20889;
  double t20892;
  double t20893;
  double t20894;
  double t20895;
  double t20906;
  double t20890;
  double t20904;
  double t20899;
  double t20915;
  double t20916;
  double t20917;
  double t20919;
  double t20920;
  double t20921;
  double t20952;
  double t20953;
  double t20954;
  double t20927;
  double t20928;
  double t20929;
  double t20931;
  double t20932;
  double t20933;
  double t21019;
  double t21024;
  double t21038;
  double t20938;
  double t20940;
  double t20941;
  double t20942;
  double t20944;
  double t20945;
  double t21112;
  double t21113;
  double t21114;
  double t20910;
  double t21123;
  double t21124;
  double t21125;
  double t21126;
  double t21127;
  double t21128;
  double t21133;
  double t21134;
  double t21135;
  double t21145;
  double t21146;
  double t21147;
  double t21148;
  double t21149;
  double t21154;
  double t21157;
  double t21158;
  double t21159;
  double t21172;
  double t21173;
  double t21174;
  double t21171;
  double t21175;
  double t21176;
  double t21178;
  double t21179;
  double t21184;
  double t21185;
  double t21186;
  double t21197;
  double t21198;
  double t21199;
  double t21207;
  double t21208;
  double t21209;
  double t21210;
  double t21212;
  double t21219;
  double t21220;
  double t21221;
  double t21216;
  double t21233;
  double t21234;
  double t21235;
  double t21240;
  double t21251;
  double t21274;
  double t21285;
  double t21286;
  double t21314;
  double t21316;
  double t21317;
  double t21326;
  double t21328;
  double t21329;
  double t21330;
  double t21332;
  double t21339;
  double t21340;
  double t21341;
  double t21333;
  double t21355;
  double t21356;
  double t21357;
  double t21358;
  double t21359;
  double t21366;
  double t21367;
  double t21368;
  double t21380;
  double t21381;
  double t21382;
  double t21391;
  double t21392;
  double t21393;
  double t21394;
  double t21396;
  double t21404;
  double t21405;
  double t21406;
  double t21397;
  double t21421;
  double t21422;
  double t21423;
  double t21424;
  double t21425;
  double t21431;
  double t21432;
  double t21433;
  double t21443;
  double t21444;
  double t21446;
  t17149 = Sin(var1[3]);
  t17914 = Cos(var1[3]);
  t17498 = Cos(var1[5]);
  t17632 = Sin(var1[4]);
  t17935 = Sin(var1[5]);
  t3987 = Cos(var1[4]);
  t12288 = Sin(var1[9]);
  t17950 = Cos(var1[9]);
  t17965 = t17914*t17498;
  t17972 = -1.*t17149*t17632*t17935;
  t17981 = t17965 + t17972;
  t17875 = t17498*t17149*t17632;
  t17940 = t17914*t17935;
  t17942 = t17875 + t17940;
  t18052 = Sin(var1[12]);
  t18127 = Cos(var1[12]);
  t17946 = -0.325*t17942;
  t18167 = Sin(var1[15]);
  t18551 = Cos(var1[15]);
  t17366 = 0.1575*t3987*t12288*t17149;
  t17952 = -1.*t17950;
  t17956 = 1. + t17952;
  t17985 = 0.1575*t17956*t17981;
  t17987 = -1.*t3987*t12288*t17149;
  t17991 = t17950*t17981;
  t17995 = t17987 + t17991;
  t19477 = Cos(var1[10]);
  t19518 = Sin(var1[10]);
  t19526 = -1.*t17950*t3987*t17149;
  t19527 = -1.*t12288*t17981;
  t19529 = t19526 + t19527;
  t18122 = -0.1575*t3987*t18052*t17149;
  t18130 = -1.*t18127;
  t18137 = 1. + t18130;
  t18143 = -0.1575*t18137*t17981;
  t18146 = -1.*t3987*t18052*t17149;
  t18153 = t18127*t17981;
  t18161 = t18146 + t18153;
  t19577 = Cos(var1[13]);
  t19737 = Sin(var1[13]);
  t19741 = -1.*t18127*t3987*t17149;
  t19743 = -1.*t18052*t17981;
  t19748 = t19741 + t19743;
  t18196 = -0.1575*t3987*t18167*t17149;
  t18652 = -1.*t18551;
  t18883 = 1. + t18652;
  t18896 = -0.1575*t18883*t17981;
  t19019 = -1.*t3987*t18167*t17149;
  t19047 = t18551*t17981;
  t19224 = t19019 + t19047;
  t19767 = Cos(var1[16]);
  t19831 = Sin(var1[16]);
  t19853 = -1.*t18551*t3987*t17149;
  t19981 = -1.*t18167*t17981;
  t20037 = t19853 + t19981;
  t19493 = -1.*t19477;
  t19502 = 1. + t19493;
  t19512 = -0.325*t19502*t17942;
  t19516 = 0.2255*t17995;
  t19537 = 0.325*t19518*t19529;
  t19542 = t19477*t17942;
  t19543 = t19518*t19529;
  t19552 = t19542 + t19543;
  t20096 = Sin(var1[11]);
  t20104 = -1.*t19518*t17942;
  t20109 = t19477*t19529;
  t20116 = t20104 + t20109;
  t20159 = Cos(var1[11]);
  t19726 = -1.*t19577;
  t19728 = 1. + t19726;
  t19732 = 0.325*t19728*t17942;
  t19734 = -0.2255*t18161;
  t19750 = -0.325*t19737*t19748;
  t19751 = t19577*t17942;
  t19752 = t19737*t19748;
  t19758 = t19751 + t19752;
  t20200 = Sin(var1[14]);
  t20201 = -1.*t19737*t17942;
  t20202 = t19577*t19748;
  t20203 = t20201 + t20202;
  t20205 = Cos(var1[14]);
  t19772 = -1.*t19767;
  t19773 = 1. + t19772;
  t19813 = -0.325*t19773*t17942;
  t19827 = -0.2255*t19224;
  t20065 = 0.325*t19831*t20037;
  t20066 = t19767*t17942;
  t20071 = t19831*t20037;
  t20077 = t20066 + t20071;
  t20216 = Sin(var1[17]);
  t20217 = -1.*t19831*t17942;
  t20218 = t19767*t20037;
  t20219 = t20217 + t20218;
  t20221 = Cos(var1[17]);
  t18125 = 0.325*t17942;
  t20232 = Cos(var1[6]);
  t20236 = Sin(var1[6]);
  t20233 = -1.*t20232;
  t20234 = 1. + t20233;
  t20235 = 0.1575*t20234*t17981;
  t20237 = 0.1575*t3987*t17149*t20236;
  t20238 = t20232*t17981;
  t20239 = -1.*t3987*t17149*t20236;
  t20240 = t20238 + t20239;
  t20244 = Cos(var1[7]);
  t20250 = -1.*t3987*t20232*t17149;
  t20251 = -1.*t17981*t20236;
  t20291 = t20250 + t20251;
  t20331 = Sin(var1[7]);
  t20245 = -1.*t20244;
  t20247 = 1. + t20245;
  t20248 = 0.325*t20247*t17942;
  t20249 = 0.2255*t20240;
  t20332 = -0.325*t20291*t20331;
  t20337 = t20244*t17942;
  t20344 = t20291*t20331;
  t20348 = t20337 + t20344;
  t20372 = Cos(var1[8]);
  t20421 = t20244*t20291;
  t20422 = -1.*t17942*t20331;
  t20423 = t20421 + t20422;
  t20424 = Sin(var1[8]);
  t20434 = 0.325*t17914*t3987*t17498;
  t20435 = 0.1575*t17914*t12288*t17632;
  t20436 = 0.1575*t17956*t17914*t3987*t17935;
  t20437 = -1.*t17914*t12288*t17632;
  t20438 = t17950*t17914*t3987*t17935;
  t20439 = t20437 + t20438;
  t20464 = -1.*t17950*t17914*t17632;
  t20465 = -1.*t17914*t3987*t12288*t17935;
  t20466 = t20464 + t20465;
  t20445 = -0.1575*t17914*t18052*t17632;
  t20446 = -0.1575*t18137*t17914*t3987*t17935;
  t20447 = -1.*t17914*t18052*t17632;
  t20448 = t18127*t17914*t3987*t17935;
  t20449 = t20447 + t20448;
  t20476 = -1.*t18127*t17914*t17632;
  t20477 = -1.*t17914*t3987*t18052*t17935;
  t20478 = t20476 + t20477;
  t20453 = -0.1575*t17914*t18167*t17632;
  t20454 = -0.1575*t18883*t17914*t3987*t17935;
  t20455 = -1.*t17914*t18167*t17632;
  t20456 = t18551*t17914*t3987*t17935;
  t20457 = t20455 + t20456;
  t20585 = -1.*t18551*t17914*t17632;
  t20590 = -1.*t17914*t3987*t18167*t17935;
  t20602 = t20585 + t20590;
  t20461 = 0.325*t19502*t17914*t3987*t17498;
  t20463 = 0.2255*t20439;
  t20467 = 0.325*t19518*t20466;
  t20160 = -1.*t20159;
  t20191 = 1. + t20160;
  t20468 = -1.*t19477*t17914*t3987*t17498;
  t20469 = t19518*t20466;
  t20470 = t20468 + t20469;
  t20681 = t17914*t3987*t17498*t19518;
  t20682 = t19477*t20466;
  t20689 = t20681 + t20682;
  t20474 = -0.325*t19728*t17914*t3987*t17498;
  t20475 = -0.2255*t20449;
  t20480 = -0.325*t19737*t20478;
  t20206 = -1.*t20205;
  t20207 = 1. + t20206;
  t20481 = -1.*t19577*t17914*t3987*t17498;
  t20522 = t19737*t20478;
  t20562 = t20481 + t20522;
  t20759 = t17914*t3987*t17498*t19737;
  t20767 = t19577*t20478;
  t20773 = t20759 + t20767;
  t20567 = 0.325*t19773*t17914*t3987*t17498;
  t20572 = -0.2255*t20457;
  t20607 = 0.325*t19831*t20602;
  t20222 = -1.*t20221;
  t20223 = 1. + t20222;
  t20619 = -1.*t19767*t17914*t3987*t17498;
  t20620 = t19831*t20602;
  t20625 = t20619 + t20620;
  t20833 = t17914*t3987*t17498*t19831;
  t20834 = t19767*t20602;
  t20835 = t20833 + t20834;
  t20444 = -0.325*t17914*t3987*t17498;
  t20847 = 0.1575*t17914*t3987*t20234*t17935;
  t20849 = 0.1575*t17914*t17632*t20236;
  t20850 = t17914*t3987*t20232*t17935;
  t20851 = -1.*t17914*t17632*t20236;
  t20853 = t20850 + t20851;
  t20861 = -1.*t17914*t20232*t17632;
  t20862 = -1.*t17914*t3987*t17935*t20236;
  t20863 = t20861 + t20862;
  t20858 = -0.325*t17914*t3987*t17498*t20247;
  t20859 = 0.2255*t20853;
  t20865 = -0.325*t20863*t20331;
  t20379 = -1.*t20372;
  t20419 = 1. + t20379;
  t20866 = -1.*t17914*t3987*t17498*t20244;
  t20867 = t20863*t20331;
  t20869 = t20866 + t20867;
  t20875 = t20244*t20863;
  t20877 = t17914*t3987*t17498*t20331;
  t20878 = t20875 + t20877;
  t20887 = t17914*t17498*t17632;
  t20888 = -1.*t17149*t17935;
  t20889 = t20887 + t20888;
  t20892 = t17498*t17149;
  t20893 = t17914*t17632*t17935;
  t20894 = t20892 + t20893;
  t20895 = -0.325*t20894;
  t20906 = 0.325*t20894;
  t20890 = 0.1575*t17956*t20889;
  t20904 = -0.1575*t18137*t20889;
  t20899 = -0.1575*t18883*t20889;
  t20915 = 0.2255*t17950*t20889;
  t20916 = -0.325*t12288*t19518*t20889;
  t20917 = -0.325*t19502*t20894;
  t20919 = -1.*t12288*t19518*t20889;
  t20920 = t19477*t20894;
  t20921 = t20919 + t20920;
  t20952 = -1.*t19477*t12288*t20889;
  t20953 = -1.*t19518*t20894;
  t20954 = t20952 + t20953;
  t20927 = -0.2255*t18127*t20889;
  t20928 = 0.325*t18052*t19737*t20889;
  t20929 = 0.325*t19728*t20894;
  t20931 = -1.*t18052*t19737*t20889;
  t20932 = t19577*t20894;
  t20933 = t20931 + t20932;
  t21019 = -1.*t19577*t18052*t20889;
  t21024 = -1.*t19737*t20894;
  t21038 = t21019 + t21024;
  t20938 = -0.2255*t18551*t20889;
  t20940 = -0.325*t18167*t19831*t20889;
  t20941 = -0.325*t19773*t20894;
  t20942 = -1.*t18167*t19831*t20889;
  t20944 = t19767*t20894;
  t20945 = t20942 + t20944;
  t21112 = -1.*t19767*t18167*t20889;
  t21113 = -1.*t19831*t20894;
  t21114 = t21112 + t21113;
  t20910 = 0.1575*t20234*t20889;
  t21123 = 0.2255*t20232*t20889;
  t21124 = 0.325*t20247*t20894;
  t21125 = 0.325*t20889*t20236*t20331;
  t21126 = t20244*t20894;
  t21127 = -1.*t20889*t20236*t20331;
  t21128 = t21126 + t21127;
  t21133 = -1.*t20244*t20889*t20236;
  t21134 = -1.*t20894*t20331;
  t21135 = t21133 + t21134;
  t21145 = -0.1575*t17914*t3987*t20232;
  t21146 = 0.1575*t20894*t20236;
  t21147 = t17914*t3987*t20232;
  t21148 = -1.*t20894*t20236;
  t21149 = t21147 + t21148;
  t21154 = 0.2255*t21149;
  t21157 = -1.*t20232*t20894;
  t21158 = -1.*t17914*t3987*t20236;
  t21159 = t21157 + t21158;
  t21172 = -1.*t17914*t17498*t17632;
  t21173 = t17149*t17935;
  t21174 = t21172 + t21173;
  t21171 = -0.325*t20244*t21149;
  t21175 = 0.325*t21174*t20331;
  t21176 = t20244*t21149;
  t21178 = -1.*t21174*t20331;
  t21179 = t21176 + t21178;
  t21184 = -1.*t20244*t21174;
  t21185 = -1.*t21149*t20331;
  t21186 = t21184 + t21185;
  t21197 = t20244*t21174;
  t21198 = t21149*t20331;
  t21199 = t21197 + t21198;
  t21207 = -0.1575*t17950*t17914*t3987;
  t21208 = 0.1575*t12288*t20894;
  t21209 = t17950*t17914*t3987;
  t21210 = -1.*t12288*t20894;
  t21212 = t21209 + t21210;
  t21219 = -1.*t17914*t3987*t12288;
  t21220 = -1.*t17950*t20894;
  t21221 = t21219 + t21220;
  t21216 = 0.2255*t21212;
  t21233 = -0.325*t19518*t21174;
  t21234 = 0.325*t19477*t21212;
  t21235 = -1.*t19518*t21174;
  t21240 = t19477*t21212;
  t21251 = t21235 + t21240;
  t21274 = -1.*t19477*t21174;
  t21285 = -1.*t19518*t21212;
  t21286 = t21274 + t21285;
  t21314 = t19477*t21174;
  t21316 = t19518*t21212;
  t21317 = t21314 + t21316;
  t21326 = 0.1575*t18127*t17914*t3987;
  t21328 = -0.1575*t18052*t20894;
  t21329 = t18127*t17914*t3987;
  t21330 = -1.*t18052*t20894;
  t21332 = t21329 + t21330;
  t21339 = -1.*t17914*t3987*t18052;
  t21340 = -1.*t18127*t20894;
  t21341 = t21339 + t21340;
  t21333 = -0.2255*t21332;
  t21355 = 0.325*t19737*t21174;
  t21356 = -0.325*t19577*t21332;
  t21357 = -1.*t19737*t21174;
  t21358 = t19577*t21332;
  t21359 = t21357 + t21358;
  t21366 = -1.*t19577*t21174;
  t21367 = -1.*t19737*t21332;
  t21368 = t21366 + t21367;
  t21380 = t19577*t21174;
  t21381 = t19737*t21332;
  t21382 = t21380 + t21381;
  t21391 = 0.1575*t18551*t17914*t3987;
  t21392 = -0.1575*t18167*t20894;
  t21393 = t18551*t17914*t3987;
  t21394 = -1.*t18167*t20894;
  t21396 = t21393 + t21394;
  t21404 = -1.*t17914*t3987*t18167;
  t21405 = -1.*t18551*t20894;
  t21406 = t21404 + t21405;
  t21397 = -0.2255*t21396;
  t21421 = -0.325*t19831*t21174;
  t21422 = 0.325*t19767*t21396;
  t21423 = -1.*t19831*t21174;
  t21424 = t19767*t21396;
  t21425 = t21423 + t21424;
  t21431 = -1.*t19767*t21174;
  t21432 = -1.*t19831*t21396;
  t21433 = t21431 + t21432;
  t21443 = t19767*t21174;
  t21444 = t19831*t21396;
  t21446 = t21443 + t21444;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=-258.00300000000004;
  p_output1[3]=-26.977500000000003*(t17366 + t17946 + t17985 + 0.1575*t17995) - 26.977500000000003*(t18122 + t18125 + t18143 - 0.1575*t18161) - 26.977500000000003*(t17946 + t18196 + t18896 - 0.1575*t19224) - 6.1312500000000005*(t17366 + t17985 + t19512 + t19516 + t19537 - 0.325*t19552) - 6.1312500000000005*(t18122 + t18143 + t19732 + t19734 + t19750 + 0.325*t19758) - 6.1312500000000005*(t18196 + t18896 + t19813 + t19827 + t20065 - 0.325*t20077) - 1.9620000000000002*(t17366 + t17985 + t19512 + t19516 + t19537 - 0.575*t20096*t20116 - 0.575*(-1.*t20096*t20116 + t19552*t20159) - 0.575*t19552*t20191) - 1.9620000000000002*(t18122 + t18143 + t19732 + t19734 + t19750 + 0.075*t20200*t20203 + 0.075*(-1.*t20200*t20203 + t19758*t20205) + 0.075*t19758*t20207) - 1.9620000000000002*(t18196 + t18896 + t19813 + t19827 + t20065 - 0.575*t20216*t20219 - 0.575*(-1.*t20216*t20219 + t20077*t20221) - 0.575*t20077*t20223) - 26.977500000000003*(t18125 + t20235 + t20237 + 0.1575*t20240) - 6.1312500000000005*(t20235 + t20237 + t20248 + t20249 + t20332 + 0.325*t20348) - 1.9620000000000002*(t20235 + t20237 + t20248 + t20249 + t20332 + 0.075*t20348*t20419 + 0.075*t20423*t20424 + 0.075*(t20348*t20372 - 1.*t20423*t20424));
  p_output1[4]=-26.977500000000003*(t20434 + t20435 + t20436 + 0.1575*t20439) - 26.977500000000003*(t20444 + t20445 + t20446 - 0.1575*t20449) - 26.977500000000003*(t20434 + t20453 + t20454 - 0.1575*t20457) - 6.1312500000000005*(t20435 + t20436 + t20461 + t20463 + t20467 - 0.325*t20470) - 6.1312500000000005*(t20445 + t20446 + t20474 + t20475 + t20480 + 0.325*t20562) - 6.1312500000000005*(t20453 + t20454 + t20567 + t20572 + t20607 - 0.325*t20625) - 1.9620000000000002*(t20435 + t20436 + t20461 + t20463 + t20467 - 0.575*t20191*t20470 - 0.575*t20096*t20689 - 0.575*(t20159*t20470 - 1.*t20096*t20689)) - 1.9620000000000002*(t20445 + t20446 + t20474 + t20475 + t20480 + 0.075*t20207*t20562 + 0.075*t20200*t20773 + 0.075*(t20205*t20562 - 1.*t20200*t20773)) - 1.9620000000000002*(t20453 + t20454 + t20567 + t20572 + t20607 - 0.575*t20223*t20625 - 0.575*t20216*t20835 - 0.575*(t20221*t20625 - 1.*t20216*t20835)) - 26.977500000000003*(t20444 + t20847 + t20849 + 0.1575*t20853) - 6.1312500000000005*(t20847 + t20849 + t20858 + t20859 + t20865 + 0.325*t20869) - 1.9620000000000002*(t20847 + t20849 + t20858 + t20859 + t20865 + 0.075*t20419*t20869 + 0.075*t20424*t20878 + 0.075*(t20372*t20869 - 1.*t20424*t20878));
  p_output1[5]=-26.977500000000003*(0.1575*t17950*t20889 + t20890 + t20895) - 26.977500000000003*(-0.1575*t18551*t20889 + t20895 + t20899) - 26.977500000000003*(-0.1575*t18127*t20889 + t20904 + t20906) - 26.977500000000003*(0.1575*t20232*t20889 + t20906 + t20910) - 6.1312500000000005*(t20890 + t20915 + t20916 + t20917 - 0.325*t20921) - 6.1312500000000005*(t20904 + t20927 + t20928 + t20929 + 0.325*t20933) - 6.1312500000000005*(t20899 + t20938 + t20940 + t20941 - 0.325*t20945) - 1.9620000000000002*(t20890 + t20915 + t20916 + t20917 - 0.575*t20191*t20921 - 0.575*t20096*t20954 - 0.575*(t20159*t20921 - 1.*t20096*t20954)) - 1.9620000000000002*(t20904 + t20927 + t20928 + t20929 + 0.075*t20207*t20933 + 0.075*t20200*t21038 + 0.075*(t20205*t20933 - 1.*t20200*t21038)) - 1.9620000000000002*(t20899 + t20938 + t20940 + t20941 - 0.575*t20223*t20945 - 0.575*t20216*t21114 - 0.575*(t20221*t20945 - 1.*t20216*t21114)) - 6.1312500000000005*(t20910 + t21123 + t21124 + t21125 + 0.325*t21128) - 1.9620000000000002*(t20910 + t21123 + t21124 + t21125 + 0.075*t20419*t21128 + 0.075*t20424*t21135 + 0.075*(t20372*t21128 - 1.*t20424*t21135));
  p_output1[6]=-26.977500000000003*(t21145 + t21146 + 0.1575*t21149) - 6.1312500000000005*(t21145 + t21146 + t21154) - 1.9620000000000002*(t21145 + t21146 + t21154 - 0.325*t20331*t21159 + 0.075*t20331*t20419*t21159 + 0.075*t20244*t20424*t21159 + 0.075*(t20331*t20372*t21159 - 1.*t20244*t20424*t21159));
  p_output1[7]=-6.1312500000000005*(t21171 + t21175 + 0.325*t21179) - 1.9620000000000002*(t21171 + t21175 + 0.075*t20419*t21179 + 0.075*t20424*t21186 + 0.075*(t20372*t21179 - 1.*t20424*t21186));
  p_output1[8]=-1.9620000000000002*(0.075*t20372*t21179 + 0.075*t20424*t21199 + 0.075*(-1.*t20372*t21179 - 1.*t20424*t21199));
  p_output1[9]=-26.977500000000003*(t21207 + t21208 + 0.1575*t21212) - 6.1312500000000005*(t21207 + t21208 + t21216) - 1.9620000000000002*(t21207 + t21208 + t21216 + 0.325*t19518*t21221 - 0.575*t19477*t20096*t21221 - 0.575*t19518*t20191*t21221 - 0.575*(-1.*t19477*t20096*t21221 + t19518*t20159*t21221));
  p_output1[10]=-6.1312500000000005*(t21233 + t21234 - 0.325*t21251) - 1.9620000000000002*(t21233 + t21234 - 0.575*t20191*t21251 - 0.575*t20096*t21286 - 0.575*(t20159*t21251 - 1.*t20096*t21286));
  p_output1[11]=-1.9620000000000002*(-0.575*t20159*t21251 - 0.575*t20096*t21317 - 0.575*(-1.*t20159*t21251 - 1.*t20096*t21317));
  p_output1[12]=-26.977500000000003*(t21326 + t21328 - 0.1575*t21332) - 6.1312500000000005*(t21326 + t21328 + t21333) - 1.9620000000000002*(t21326 + t21328 + t21333 - 0.325*t19737*t21341 + 0.075*t19577*t20200*t21341 + 0.075*t19737*t20207*t21341 + 0.075*(-1.*t19577*t20200*t21341 + t19737*t20205*t21341));
  p_output1[13]=-6.1312500000000005*(t21355 + t21356 + 0.325*t21359) - 1.9620000000000002*(t21355 + t21356 + 0.075*t20207*t21359 + 0.075*t20200*t21368 + 0.075*(t20205*t21359 - 1.*t20200*t21368));
  p_output1[14]=-1.9620000000000002*(0.075*t20205*t21359 + 0.075*t20200*t21382 + 0.075*(-1.*t20205*t21359 - 1.*t20200*t21382));
  p_output1[15]=-26.977500000000003*(t21391 + t21392 - 0.1575*t21396) - 6.1312500000000005*(t21391 + t21392 + t21397) - 1.9620000000000002*(t21391 + t21392 + t21397 + 0.325*t19831*t21406 - 0.575*t19767*t20216*t21406 - 0.575*t19831*t20223*t21406 - 0.575*(-1.*t19767*t20216*t21406 + t19831*t20221*t21406));
  p_output1[16]=-6.1312500000000005*(t21421 + t21422 - 0.325*t21425) - 1.9620000000000002*(t21421 + t21422 - 0.575*t20223*t21425 - 0.575*t20216*t21433 - 0.575*(t20221*t21425 - 1.*t20216*t21433));
  p_output1[17]=-1.9620000000000002*(-0.575*t20221*t21425 - 0.575*t20216*t21446 - 0.575*(-1.*t20221*t21425 - 1.*t20216*t21446));
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ge_vec_ParallelStance.hh"

namespace ParallelStance
{

void Ge_vec_ParallelStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
