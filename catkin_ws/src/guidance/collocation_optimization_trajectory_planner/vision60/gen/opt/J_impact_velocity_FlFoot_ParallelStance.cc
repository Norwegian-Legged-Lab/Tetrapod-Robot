/*
 * Automatically Generated from Mathematica.
 * Thu 12 May 2022 11:34:05 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t6892;
  double t6896;
  double t6937;
  double t6941;
  double t7138;
  double t8316;
  double t9032;
  double t9117;
  double t9229;
  double t9752;
  double t10113;
  double t10209;
  double t10437;
  double t9756;
  double t9922;
  double t10886;
  double t10890;
  double t10899;
  double t10927;
  double t10934;
  double t10941;
  double t10658;
  double t10810;
  double t10439;
  double t10442;
  double t11256;
  double t11263;
  double t11275;
  double t11293;
  double t11294;
  double t11296;
  double t11301;
  double t11319;
  double t11367;
  double t7436;
  double t7441;
  double t7504;
  double t11595;
  double t11598;
  double t11601;
  double t11543;
  double t11567;
  double t11589;
  double t11700;
  double t11753;
  double t11774;
  double t12210;
  double t12219;
  double t12229;
  double t11993;
  double t12034;
  double t12082;
  double t12415;
  double t12417;
  double t12646;
  double t10444;
  double t10527;
  double t10860;
  double t10871;
  double t10923;
  double t10945;
  double t10948;
  double t10954;
  double t10968;
  double t10970;
  double t10997;
  double t11008;
  double t11017;
  double t11069;
  double t11089;
  double t11117;
  double t11122;
  double t12811;
  double t12813;
  double t12843;
  double t12844;
  double t11881;
  double t11883;
  double t11887;
  double t11888;
  double t11896;
  double t11918;
  double t11922;
  double t11925;
  double t11929;
  double t11930;
  double t11942;
  double t11943;
  double t11948;
  double t6911;
  double t7163;
  double t8150;
  double t9737;
  double t9970;
  double t10262;
  double t10268;
  double t10273;
  double t10278;
  double t10280;
  double t10301;
  double t10303;
  double t10315;
  double t10317;
  double t10326;
  double t11142;
  double t11154;
  double t11155;
  double t11133;
  double t11255;
  double t11285;
  double t12979;
  double t12980;
  double t12984;
  double t12985;
  double t12989;
  double t13015;
  double t13027;
  double t13028;
  double t13033;
  double t13045;
  double t13091;
  double t13098;
  double t11957;
  double t11987;
  double t12206;
  double t12365;
  double t12372;
  double t12379;
  double t12380;
  double t12381;
  double t12382;
  double t12385;
  double t12386;
  double t12394;
  double t12398;
  double t13185;
  double t13189;
  double t13194;
  double t13195;
  double t13196;
  double t13198;
  double t13199;
  double t13200;
  double t13222;
  double t13223;
  double t11505;
  double t11524;
  double t11592;
  double t11604;
  double t11606;
  double t11608;
  double t11609;
  double t11610;
  double t11612;
  double t11621;
  double t11622;
  double t11644;
  double t11647;
  double t12943;
  double t12944;
  double t12946;
  double t12947;
  double t12951;
  double t12952;
  double t12953;
  double t12961;
  double t12972;
  double t12976;
  double t12977;
  double t12414;
  double t12656;
  double t12660;
  double t12661;
  double t12662;
  double t12663;
  double t12664;
  double t12666;
  double t12667;
  double t12668;
  double t12669;
  double t13197;
  double t13201;
  double t13202;
  double t13203;
  double t13204;
  double t13205;
  double t13209;
  double t13210;
  double t13211;
  double t13212;
  double t13213;
  double t13241;
  double t13242;
  double t13243;
  double t11649;
  double t11775;
  double t11783;
  double t11785;
  double t11786;
  double t11795;
  double t11804;
  double t11809;
  double t11828;
  double t11842;
  double t11854;
  double t13225;
  double t13247;
  double t13250;
  double t13251;
  double t13273;
  double t13465;
  double t13474;
  double t13479;
  double t13507;
  double t13508;
  double t13522;
  double t13526;
  double t13530;
  double t13636;
  double t13637;
  double t13638;
  double t13648;
  double t13649;
  double t13650;
  double t13652;
  double t13653;
  double t13654;
  double t13797;
  double t13798;
  double t13799;
  double t13804;
  double t13805;
  double t13811;
  double t13814;
  double t13815;
  double t13816;
  double t13510;
  double t13511;
  double t13512;
  double t13856;
  double t13860;
  double t13861;
  double t13878;
  double t13879;
  double t13880;
  double t13865;
  double t13871;
  double t13872;
  double t13893;
  double t13894;
  double t13895;
  double t14035;
  double t14036;
  double t14037;
  double t14023;
  double t14028;
  double t14033;
  double t14059;
  double t14061;
  double t14062;
  double t14064;
  double t14065;
  double t14066;
  double t14068;
  double t14069;
  double t14070;
  double t14105;
  double t14106;
  double t14107;
  double t14177;
  double t14179;
  double t14180;
  double t14186;
  double t14188;
  double t14190;
  double t13755;
  double t13772;
  double t13782;
  double t13790;
  double t13792;
  double t13793;
  double t13796;
  double t13803;
  double t13813;
  double t13817;
  double t13818;
  double t13819;
  double t13820;
  double t13821;
  double t13825;
  double t13828;
  double t13830;
  double t13835;
  double t13836;
  double t14100;
  double t14101;
  double t14102;
  double t14218;
  double t14220;
  double t14222;
  double t14213;
  double t14215;
  double t14216;
  double t14239;
  double t14240;
  double t14241;
  double t14043;
  double t14049;
  double t14280;
  double t14281;
  double t14284;
  double t14285;
  double t14286;
  double t14288;
  double t14293;
  double t14294;
  double t14166;
  double t14167;
  double t14171;
  double t14172;
  double t14181;
  double t14193;
  double t14194;
  double t14199;
  double t14201;
  double t14202;
  double t14203;
  double t14204;
  double t14206;
  double t14207;
  double t14208;
  double t14340;
  double t14341;
  double t14342;
  double t14346;
  double t14347;
  double t14348;
  double t14339;
  double t14343;
  double t14344;
  double t14369;
  double t14370;
  double t14371;
  double t13640;
  double t13641;
  double t13645;
  double t13647;
  double t13651;
  double t13655;
  double t13656;
  double t13657;
  double t13661;
  double t13662;
  double t13703;
  double t13715;
  double t13716;
  double t13751;
  double t13753;
  double t14034;
  double t14038;
  double t14407;
  double t14408;
  double t14410;
  double t14411;
  double t14323;
  double t14324;
  double t14325;
  double t14326;
  double t14327;
  double t14328;
  double t14329;
  double t14330;
  double t14331;
  double t14332;
  double t14334;
  double t14335;
  double t14336;
  double t13470;
  double t13509;
  double t13516;
  double t13539;
  double t13540;
  double t13583;
  double t13598;
  double t13605;
  double t13628;
  double t13629;
  double t13630;
  double t13631;
  double t13632;
  double t13633;
  double t13634;
  double t14429;
  double t14433;
  double t14088;
  double t14099;
  double t14104;
  double t14108;
  double t14109;
  double t14110;
  double t14111;
  double t14112;
  double t14113;
  double t14114;
  double t14115;
  double t14116;
  double t14117;
  double t14119;
  double t14120;
  double t15478;
  double t15479;
  double t15280;
  double t15284;
  double t15304;
  double t15315;
  double t15316;
  double t15320;
  double t15321;
  double t15328;
  double t15335;
  double t15336;
  double t15337;
  double t15338;
  double t14365;
  double t14366;
  double t14367;
  double t14372;
  double t14373;
  double t14374;
  double t14375;
  double t14376;
  double t14377;
  double t14378;
  double t14379;
  double t14380;
  double t14384;
  double t14211;
  double t14212;
  double t14217;
  double t14223;
  double t14224;
  double t14225;
  double t14226;
  double t14228;
  double t14229;
  double t14230;
  double t14232;
  double t14233;
  double t14235;
  double t13842;
  double t13862;
  double t13873;
  double t13881;
  double t13882;
  double t13883;
  double t13884;
  double t13885;
  double t13886;
  double t13887;
  double t13888;
  double t13889;
  double t13890;
  double t15757;
  double t15758;
  double t15759;
  double t15710;
  double t15714;
  double t15748;
  double t15756;
  double t15760;
  double t15765;
  double t15767;
  double t15776;
  double t15777;
  double t16981;
  double t23080;
  double t23122;
  double t14449;
  double t14450;
  double t14451;
  double t14453;
  double t14457;
  double t14458;
  double t14459;
  double t14537;
  double t15112;
  double t15118;
  double t15278;
  double t14345;
  double t14349;
  double t14355;
  double t14356;
  double t14357;
  double t14358;
  double t14359;
  double t14360;
  double t14361;
  double t14362;
  double t14363;
  double t14237;
  double t14242;
  double t14243;
  double t14244;
  double t14252;
  double t14253;
  double t14255;
  double t14256;
  double t14257;
  double t14259;
  double t14260;
  double t13892;
  double t13896;
  double t13902;
  double t13906;
  double t13946;
  double t13953;
  double t13961;
  double t13969;
  double t13998;
  double t14017;
  double t14021;
  double t15766;
  double t15778;
  double t15782;
  double t15790;
  double t15796;
  double t15803;
  double t15804;
  double t15805;
  double t15823;
  double t15835;
  double t16248;
  double t32151;
  double t32320;
  double t32524;
  double t23719;
  double t34726;
  double t34978;
  double t34983;
  double t34988;
  double t42898;
  double t42930;
  double t43234;
  double t43278;
  double t43288;
  double t43321;
  double t43322;
  double t43323;
  double t43798;
  double t38143;
  double t38149;
  double t38179;
  double t38180;
  double t38455;
  double t38486;
  double t38489;
  double t38493;
  double t38504;
  double t38505;
  double t42884;
  double t35922;
  double t35928;
  double t36182;
  double t36183;
  double t36184;
  double t36542;
  double t36609;
  double t36619;
  double t36704;
  double t36713;
  double t36714;
  double t36718;
  double t36726;
  double t36771;
  double t38133;
  double t35395;
  double t35398;
  double t35399;
  double t35414;
  double t35415;
  double t35448;
  double t35449;
  double t35450;
  double t35483;
  double t35502;
  double t35503;
  double t35849;
  double t35850;
  double t35863;
  double t35914;
  double t43799;
  double t43800;
  double t43863;
  double t43901;
  double t43904;
  double t44020;
  double t44221;
  double t44383;
  double t44996;
  double t45362;
  double t45382;
  double t45539;
  double t45554;
  double t45560;
  double t45571;
  double t49144;
  double t49149;
  double t49161;
  double t49269;
  double t49273;
  double t49275;
  double t45967;
  double t45999;
  double t46011;
  double t49356;
  double t49368;
  double t49339;
  double t49341;
  double t49342;
  double t55742;
  double t55748;
  double t55751;
  double t56211;
  double t56306;
  double t57535;
  double t57554;
  double t57559;
  double t57586;
  double t57606;
  double t57612;
  double t49051;
  double t49107;
  double t49113;
  double t49121;
  double t49252;
  double t49276;
  double t49277;
  double t49309;
  double t49310;
  double t49311;
  double t49314;
  double t49315;
  double t49316;
  double t49318;
  double t49320;
  double t58085;
  double t58088;
  double t58122;
  double t58134;
  double t58148;
  double t58150;
  double t58084;
  double t58123;
  double t58129;
  double t58940;
  double t58945;
  double t58947;
  double t59275;
  double t59276;
  double t59303;
  double t59304;
  double t57980;
  double t57990;
  double t57992;
  double t57994;
  double t58015;
  double t58029;
  double t58033;
  double t58051;
  double t58062;
  double t58066;
  double t58068;
  double t58070;
  double t58071;
  double t59663;
  double t59669;
  double t45772;
  double t45798;
  double t46053;
  double t46070;
  double t46128;
  double t46168;
  double t46173;
  double t46186;
  double t46397;
  double t47572;
  double t47573;
  double t47702;
  double t47719;
  double t47720;
  double t47888;
  double t60202;
  double t60204;
  double t60138;
  double t60139;
  double t60144;
  double t60146;
  double t60153;
  double t60166;
  double t60175;
  double t60181;
  double t60182;
  double t60183;
  double t60185;
  double t60190;
  double t58226;
  double t58227;
  double t58640;
  double t58952;
  double t58973;
  double t59007;
  double t59169;
  double t59186;
  double t59201;
  double t59202;
  double t59204;
  double t59221;
  double t59227;
  double t49337;
  double t49338;
  double t49348;
  double t49371;
  double t49407;
  double t49423;
  double t49435;
  double t54791;
  double t55055;
  double t55066;
  double t55147;
  double t55399;
  double t55407;
  double t60321;
  double t60323;
  double t60324;
  double t60320;
  double t60329;
  double t60336;
  double t60349;
  double t60354;
  double t60358;
  double t60540;
  double t60609;
  double t60639;
  double t59675;
  double t59693;
  double t60093;
  double t60119;
  double t60124;
  double t60125;
  double t60128;
  double t60129;
  double t60132;
  double t60133;
  double t60134;
  double t58133;
  double t58161;
  double t58162;
  double t58164;
  double t58168;
  double t58171;
  double t58180;
  double t58187;
  double t58188;
  double t58195;
  double t58199;
  double t55552;
  double t55763;
  double t55777;
  double t55781;
  double t55784;
  double t55786;
  double t55787;
  double t55833;
  double t55901;
  double t55955;
  double t55996;
  double t60345;
  double t60378;
  double t60460;
  double t60461;
  double t60463;
  double t60464;
  double t60465;
  double t60474;
  double t60478;
  double t60523;
  double t60528;
  double t61023;
  double t61025;
  double t61027;
  double t60841;
  double t61079;
  double t61105;
  double t61115;
  double t61116;
  t6892 = Cos(var1[4]);
  t6896 = Cos(var1[6]);
  t6937 = Sin(var1[4]);
  t6941 = Sin(var1[5]);
  t7138 = Sin(var1[6]);
  t8316 = -1.*t6896*t6937*t6941;
  t9032 = -1.*t6892*t7138;
  t9117 = t8316 + t9032;
  t9229 = Sin(var1[7]);
  t9752 = Cos(var1[8]);
  t10113 = Cos(var1[7]);
  t10209 = Sin(var1[8]);
  t10437 = Cos(var1[5]);
  t9756 = -1.*t9752;
  t9922 = 1. + t9756;
  t10886 = t10113*t6937*t6941;
  t10890 = -1.*t10437*t6937*t7138*t9229;
  t10899 = t10886 + t10890;
  t10927 = -1.*t10437*t10113*t6937*t7138;
  t10934 = -1.*t6937*t6941*t9229;
  t10941 = t10927 + t10934;
  t10658 = -1.*t10113;
  t10810 = 1. + t10658;
  t10439 = -1.*t6896;
  t10442 = 1. + t10439;
  t11256 = -1.*t6896*t6937;
  t11263 = -1.*t6892*t6941*t7138;
  t11275 = t11256 + t11263;
  t11293 = -1.*t6892*t10437*t10113;
  t11294 = t11275*t9229;
  t11296 = t11293 + t11294;
  t11301 = t10113*t11275;
  t11319 = t6892*t10437*t9229;
  t11367 = t11301 + t11319;
  t7436 = t6892*t6896;
  t7441 = -1.*t6937*t6941*t7138;
  t7504 = t7436 + t7441;
  t11595 = t10437*t10113*t6937;
  t11598 = -1.*t7504*t9229;
  t11601 = t11595 + t11598;
  t11543 = t10113*t7504;
  t11567 = t10437*t6937*t9229;
  t11589 = t11543 + t11567;
  t11700 = -1.*t10437*t10113*t6937;
  t11753 = t7504*t9229;
  t11774 = t11700 + t11753;
  t12210 = t6892*t10113*t6941;
  t12219 = -1.*t6892*t10437*t7138*t9229;
  t12229 = t12210 + t12219;
  t11993 = t6892*t10437*t10113*t7138;
  t12034 = t6892*t6941*t9229;
  t12082 = t11993 + t12034;
  t12415 = -1.*t6892*t10113*t6941;
  t12417 = t6892*t10437*t7138*t9229;
  t12646 = t12415 + t12417;
  t10444 = 0.1575*t10437*t10442*t6937;
  t10527 = 0.2255*t10437*t6896*t6937;
  t10860 = 0.325*t10810*t6937*t6941;
  t10871 = 0.325*t10437*t6937*t7138*t9229;
  t10923 = 0.075*t9922*t10899;
  t10945 = 0.075*t10941*t10209;
  t10948 = t9752*t10899;
  t10954 = -1.*t10941*t10209;
  t10968 = t10948 + t10954;
  t10970 = 0.355*t10968;
  t10997 = t9752*t10941;
  t11008 = t10899*t10209;
  t11017 = t10997 + t11008;
  t11069 = -0.0641*t11017;
  t11089 = t10444 + t10527 + t10860 + t10871 + t10923 + t10945 + t10970 + t11069;
  t11117 = -0.325*t6892*t10437*t10810;
  t11122 = 0.1575*t6892*t10442*t6941;
  t12811 = -1.*t6892*t6941*t7138*t9229;
  t12813 = t11293 + t12811;
  t12843 = -1.*t6892*t10113*t6941*t7138;
  t12844 = t12843 + t11319;
  t11881 = 0.068*t6892*t10437*t7138;
  t11883 = -0.325*t6892*t10437*t6896*t9229;
  t11887 = 0.075*t6892*t10437*t6896*t9922*t9229;
  t11888 = 0.075*t6892*t10437*t6896*t10113*t10209;
  t11896 = t6892*t10437*t6896*t9752*t9229;
  t11918 = -1.*t6892*t10437*t6896*t10113*t10209;
  t11922 = t11896 + t11918;
  t11925 = 0.355*t11922;
  t11929 = t6892*t10437*t6896*t10113*t9752;
  t11930 = t6892*t10437*t6896*t9229*t10209;
  t11942 = t11929 + t11930;
  t11943 = -0.0641*t11942;
  t11948 = t11881 + t11883 + t11887 + t11888 + t11925 + t11943;
  t6911 = -0.1575*t6892*t6896;
  t7163 = 0.1575*t6937*t6941*t7138;
  t8150 = 0.2255*t7504;
  t9737 = -0.325*t9117*t9229;
  t9970 = 0.075*t9922*t9117*t9229;
  t10262 = 0.075*t10113*t9117*t10209;
  t10268 = t9752*t9117*t9229;
  t10273 = -1.*t10113*t9117*t10209;
  t10278 = t10268 + t10273;
  t10280 = 0.355*t10278;
  t10301 = t10113*t9752*t9117;
  t10303 = t9117*t9229*t10209;
  t10315 = t10301 + t10303;
  t10317 = -0.0641*t10315;
  t10326 = t6911 + t7163 + t8150 + t9737 + t9970 + t10262 + t10280 + t10317;
  t11142 = t6892*t6896*t6941;
  t11154 = -1.*t6937*t7138;
  t11155 = t11142 + t11154;
  t11133 = 0.1575*t6937*t7138;
  t11255 = 0.2255*t11155;
  t11285 = -0.325*t11275*t9229;
  t12979 = -0.325*t10113*t11155;
  t12980 = 0.075*t10113*t9922*t11155;
  t12984 = -0.075*t11155*t9229*t10209;
  t12985 = -1.*t9752*t11155*t9229;
  t12989 = t10113*t11155*t10209;
  t13015 = t12985 + t12989;
  t13027 = -0.0641*t13015;
  t13028 = t10113*t9752*t11155;
  t13033 = t11155*t9229*t10209;
  t13045 = t13028 + t13033;
  t13091 = 0.355*t13045;
  t13098 = t12979 + t12980 + t12984 + t13027 + t13091;
  t11957 = -0.325*t6892*t10437*t10113*t7138;
  t11987 = -0.325*t6892*t6941*t9229;
  t12206 = 0.075*t9922*t12082;
  t12365 = 0.075*t12229*t10209;
  t12372 = t9752*t12229;
  t12379 = t12082*t10209;
  t12380 = t12372 + t12379;
  t12381 = -0.0641*t12380;
  t12382 = t9752*t12082;
  t12385 = -1.*t12229*t10209;
  t12386 = t12382 + t12385;
  t12394 = 0.355*t12386;
  t12398 = t11957 + t11987 + t12206 + t12365 + t12381 + t12394;
  t13185 = t6896*t6937;
  t13189 = t6892*t6941*t7138;
  t13194 = t13185 + t13189;
  t13195 = -1.*t13194*t9229;
  t13196 = t11293 + t13195;
  t13198 = t10113*t13194;
  t13199 = -1.*t6892*t10437*t9229;
  t13200 = t13198 + t13199;
  t13222 = -1.*t10113*t13194;
  t13223 = t13222 + t11319;
  t11505 = -0.325*t10113*t7504;
  t11524 = -0.325*t10437*t6937*t9229;
  t11592 = 0.075*t9922*t11589;
  t11604 = 0.075*t11601*t10209;
  t11606 = t9752*t11601;
  t11608 = t11589*t10209;
  t11609 = t11606 + t11608;
  t11610 = -0.0641*t11609;
  t11612 = t9752*t11589;
  t11621 = -1.*t11601*t10209;
  t11622 = t11612 + t11621;
  t11644 = 0.355*t11622;
  t11647 = t11505 + t11524 + t11592 + t11604 + t11610 + t11644;
  t12943 = 0.075*t10113*t9752*t11155;
  t12944 = 0.075*t11155*t9229*t10209;
  t12946 = t9752*t11155*t9229;
  t12947 = -1.*t10113*t11155*t10209;
  t12951 = t12946 + t12947;
  t12952 = -0.0641*t12951;
  t12953 = -1.*t10113*t9752*t11155;
  t12961 = -1.*t11155*t9229*t10209;
  t12972 = t12953 + t12961;
  t12976 = 0.355*t12972;
  t12977 = t12943 + t12944 + t12952 + t12976;
  t12414 = 0.075*t9752*t12082;
  t12656 = 0.075*t12646*t10209;
  t12660 = t9752*t12646;
  t12661 = -1.*t12082*t10209;
  t12662 = t12660 + t12661;
  t12663 = -0.0641*t12662;
  t12664 = -1.*t9752*t12082;
  t12666 = -1.*t12646*t10209;
  t12667 = t12664 + t12666;
  t12668 = 0.355*t12667;
  t12669 = t12414 + t12656 + t12663 + t12668;
  t13197 = 0.075*t9752*t13196;
  t13201 = 0.075*t13200*t10209;
  t13202 = -1.*t9752*t13196;
  t13203 = -1.*t13200*t10209;
  t13204 = t13202 + t13203;
  t13205 = 0.355*t13204;
  t13209 = t9752*t13200;
  t13210 = -1.*t13196*t10209;
  t13211 = t13209 + t13210;
  t13212 = -0.0641*t13211;
  t13213 = t13197 + t13201 + t13205 + t13212;
  t13241 = t6892*t10437*t10113;
  t13242 = t13194*t9229;
  t13243 = t13241 + t13242;
  t11649 = 0.075*t9752*t11589;
  t11775 = 0.075*t11774*t10209;
  t11783 = t9752*t11774;
  t11785 = -1.*t11589*t10209;
  t11786 = t11783 + t11785;
  t11795 = -0.0641*t11786;
  t11804 = -1.*t9752*t11589;
  t11809 = -1.*t11774*t10209;
  t11828 = t11804 + t11809;
  t11842 = 0.355*t11828;
  t11854 = t11649 + t11775 + t11795 + t11842;
  t13225 = t9752*t13196;
  t13247 = t13200*t10209;
  t13250 = -1.*t9752*t13200;
  t13251 = -1.*t13243*t10209;
  t13273 = t13250 + t13251;
  t13465 = Cos(var1[3]);
  t13474 = Sin(var1[3]);
  t13479 = -1.*t10437*t13474;
  t13507 = -1.*t13465*t6937*t6941;
  t13508 = t13479 + t13507;
  t13522 = -1.*t6896*t13508;
  t13526 = t13465*t6892*t7138;
  t13530 = t13522 + t13526;
  t13636 = -1.*t13465*t10437*t6937;
  t13637 = t13474*t6941;
  t13638 = t13636 + t13637;
  t13648 = t10113*t13508;
  t13649 = -1.*t13638*t7138*t9229;
  t13650 = t13648 + t13649;
  t13652 = -1.*t10113*t13638*t7138;
  t13653 = -1.*t13508*t9229;
  t13654 = t13652 + t13653;
  t13797 = t13465*t6896*t6937;
  t13798 = t13465*t6892*t6941*t7138;
  t13799 = t13797 + t13798;
  t13804 = t13465*t6892*t10437*t10113;
  t13805 = t13799*t9229;
  t13811 = t13804 + t13805;
  t13814 = t10113*t13799;
  t13815 = -1.*t13465*t6892*t10437*t9229;
  t13816 = t13814 + t13815;
  t13510 = -1.*t13465*t6892*t6896;
  t13511 = -1.*t13508*t7138;
  t13512 = t13510 + t13511;
  t13856 = t13465*t10437*t6937;
  t13860 = -1.*t13474*t6941;
  t13861 = t13856 + t13860;
  t13878 = -1.*t10113*t13861;
  t13879 = -1.*t13512*t9229;
  t13880 = t13878 + t13879;
  t13865 = t10113*t13512;
  t13871 = -1.*t13861*t9229;
  t13872 = t13865 + t13871;
  t13893 = t10113*t13861;
  t13894 = t13512*t9229;
  t13895 = t13893 + t13894;
  t14035 = -1.*t13465*t10437;
  t14036 = t13474*t6937*t6941;
  t14037 = t14035 + t14036;
  t14023 = -1.*t10437*t13474*t6937;
  t14028 = -1.*t13465*t6941;
  t14033 = t14023 + t14028;
  t14059 = t6892*t6896*t13474;
  t14061 = -1.*t14037*t7138;
  t14062 = t14059 + t14061;
  t14064 = t10113*t14033;
  t14065 = t14062*t9229;
  t14066 = t14064 + t14065;
  t14068 = t10113*t14062;
  t14069 = -1.*t14033*t9229;
  t14070 = t14068 + t14069;
  t14105 = t6892*t6896*t13474*t6941;
  t14106 = -1.*t13474*t6937*t7138;
  t14107 = t14105 + t14106;
  t14177 = -1.*t6892*t10113*t13474*t6941;
  t14179 = t6892*t10437*t13474*t7138*t9229;
  t14180 = t14177 + t14179;
  t14186 = t6892*t10437*t10113*t13474*t7138;
  t14188 = t6892*t13474*t6941*t9229;
  t14190 = t14186 + t14188;
  t13755 = 0.325*t13465*t6892*t10437*t10810;
  t13772 = -0.1575*t13465*t6892*t10442*t6941;
  t13782 = -0.1575*t13465*t6937*t7138;
  t13790 = -1.*t13465*t6892*t6896*t6941;
  t13792 = t13465*t6937*t7138;
  t13793 = t13790 + t13792;
  t13796 = 0.2255*t13793;
  t13803 = -0.325*t13799*t9229;
  t13813 = 0.075*t9922*t13811;
  t13817 = 0.075*t13816*t10209;
  t13818 = t9752*t13811;
  t13819 = -1.*t13816*t10209;
  t13820 = t13818 + t13819;
  t13821 = 0.355*t13820;
  t13825 = t9752*t13816;
  t13828 = t13811*t10209;
  t13830 = t13825 + t13828;
  t13835 = -0.0641*t13830;
  t13836 = t13755 + t13772 + t13782 + t13796 + t13803 + t13813 + t13817 + t13821 + t13835;
  t14100 = t6896*t13474*t6937;
  t14101 = t6892*t13474*t6941*t7138;
  t14102 = t14100 + t14101;
  t14218 = -1.*t6892*t10437*t10113*t13474;
  t14220 = -1.*t14102*t9229;
  t14222 = t14218 + t14220;
  t14213 = t10113*t14102;
  t14215 = -1.*t6892*t10437*t13474*t9229;
  t14216 = t14213 + t14215;
  t14239 = t6892*t10437*t10113*t13474;
  t14240 = t14102*t9229;
  t14241 = t14239 + t14240;
  t14043 = -0.1575*t6892*t13474*t7138;
  t14049 = t6892*t13474*t7138;
  t14280 = -1.*t13474*t6937*t6941*t7138;
  t14281 = t14059 + t14280;
  t14284 = -1.*t10437*t10113*t13474*t6937;
  t14285 = t14281*t9229;
  t14286 = t14284 + t14285;
  t14288 = t10113*t14281;
  t14293 = t10437*t13474*t6937*t9229;
  t14294 = t14288 + t14293;
  t14166 = -0.1575*t6892*t10437*t10442*t13474;
  t14167 = -0.2255*t6892*t10437*t6896*t13474;
  t14171 = -0.325*t6892*t10810*t13474*t6941;
  t14172 = -0.325*t6892*t10437*t13474*t7138*t9229;
  t14181 = 0.075*t9922*t14180;
  t14193 = 0.075*t14190*t10209;
  t14194 = t9752*t14180;
  t14199 = -1.*t14190*t10209;
  t14201 = t14194 + t14199;
  t14202 = 0.355*t14201;
  t14203 = t9752*t14190;
  t14204 = t14180*t10209;
  t14206 = t14203 + t14204;
  t14207 = -0.0641*t14206;
  t14208 = t14166 + t14167 + t14171 + t14172 + t14181 + t14193 + t14202 + t14207;
  t14340 = t13465*t10437;
  t14341 = -1.*t13474*t6937*t6941;
  t14342 = t14340 + t14341;
  t14346 = t10113*t14342;
  t14347 = -1.*t14033*t7138*t9229;
  t14348 = t14346 + t14347;
  t14339 = -1.*t10113*t14033*t7138;
  t14343 = -1.*t14342*t9229;
  t14344 = t14339 + t14343;
  t14369 = -1.*t10113*t14342;
  t14370 = t14033*t7138*t9229;
  t14371 = t14369 + t14370;
  t13640 = 0.1575*t10442*t13638;
  t13641 = 0.2255*t6896*t13638;
  t13645 = 0.325*t10810*t13508;
  t13647 = 0.325*t13638*t7138*t9229;
  t13651 = 0.075*t9922*t13650;
  t13655 = 0.075*t13654*t10209;
  t13656 = t9752*t13650;
  t13657 = -1.*t13654*t10209;
  t13661 = t13656 + t13657;
  t13662 = 0.355*t13661;
  t13703 = t9752*t13654;
  t13715 = t13650*t10209;
  t13716 = t13703 + t13715;
  t13751 = -0.0641*t13716;
  t13753 = t13640 + t13641 + t13645 + t13647 + t13651 + t13655 + t13662 + t13751;
  t14034 = 0.325*t10810*t14033;
  t14038 = 0.1575*t10442*t14037;
  t14407 = -1.*t14037*t7138*t9229;
  t14408 = t14064 + t14407;
  t14410 = -1.*t10113*t14037*t7138;
  t14411 = t14410 + t14069;
  t14323 = -0.068*t14033*t7138;
  t14324 = 0.325*t6896*t14033*t9229;
  t14325 = -0.075*t6896*t9922*t14033*t9229;
  t14326 = -0.075*t6896*t10113*t14033*t10209;
  t14327 = -1.*t6896*t9752*t14033*t9229;
  t14328 = t6896*t10113*t14033*t10209;
  t14329 = t14327 + t14328;
  t14330 = 0.355*t14329;
  t14331 = -1.*t6896*t10113*t9752*t14033;
  t14332 = -1.*t6896*t14033*t9229*t10209;
  t14334 = t14331 + t14332;
  t14335 = -0.0641*t14334;
  t14336 = t14323 + t14324 + t14325 + t14326 + t14330 + t14335;
  t13470 = 0.1575*t13465*t6892*t6896;
  t13509 = 0.1575*t13508*t7138;
  t13516 = 0.2255*t13512;
  t13539 = -0.325*t13530*t9229;
  t13540 = 0.075*t9922*t13530*t9229;
  t13583 = 0.075*t10113*t13530*t10209;
  t13598 = t9752*t13530*t9229;
  t13605 = -1.*t10113*t13530*t10209;
  t13628 = t13598 + t13605;
  t13629 = 0.355*t13628;
  t13630 = t10113*t9752*t13530;
  t13631 = t13530*t9229*t10209;
  t13632 = t13630 + t13631;
  t13633 = -0.0641*t13632;
  t13634 = t13470 + t13509 + t13516 + t13539 + t13540 + t13583 + t13629 + t13633;
  t14429 = -1.*t6896*t14342;
  t14433 = t14429 + t14049;
  t14088 = -0.1575*t6896*t13474*t6937;
  t14099 = -0.1575*t6892*t13474*t6941*t7138;
  t14104 = 0.2255*t14102;
  t14108 = -0.325*t14107*t9229;
  t14109 = 0.075*t9922*t14107*t9229;
  t14110 = 0.075*t10113*t14107*t10209;
  t14111 = t9752*t14107*t9229;
  t14112 = -1.*t10113*t14107*t10209;
  t14113 = t14111 + t14112;
  t14114 = 0.355*t14113;
  t14115 = t10113*t9752*t14107;
  t14116 = t14107*t9229*t10209;
  t14117 = t14115 + t14116;
  t14119 = -0.0641*t14117;
  t14120 = t14088 + t14099 + t14104 + t14108 + t14109 + t14110 + t14114 + t14119;
  t15478 = t14342*t7138;
  t15479 = t14059 + t15478;
  t15280 = -0.325*t10113*t14433;
  t15284 = 0.075*t10113*t9922*t14433;
  t15304 = -0.075*t14433*t9229*t10209;
  t15315 = -1.*t9752*t14433*t9229;
  t15316 = t10113*t14433*t10209;
  t15320 = t15315 + t15316;
  t15321 = -0.0641*t15320;
  t15328 = t10113*t9752*t14433;
  t15335 = t14433*t9229*t10209;
  t15336 = t15328 + t15335;
  t15337 = 0.355*t15336;
  t15338 = t15280 + t15284 + t15304 + t15321 + t15337;
  t14365 = 0.325*t10113*t14033*t7138;
  t14366 = 0.325*t14342*t9229;
  t14367 = 0.075*t9922*t14344;
  t14372 = 0.075*t14371*t10209;
  t14373 = t9752*t14371;
  t14374 = t14344*t10209;
  t14375 = t14373 + t14374;
  t14376 = -0.0641*t14375;
  t14377 = t9752*t14344;
  t14378 = -1.*t14371*t10209;
  t14379 = t14377 + t14378;
  t14380 = 0.355*t14379;
  t14384 = t14365 + t14366 + t14367 + t14372 + t14376 + t14380;
  t14211 = -0.325*t10113*t14102;
  t14212 = 0.325*t6892*t10437*t13474*t9229;
  t14217 = 0.075*t9922*t14216;
  t14223 = 0.075*t14222*t10209;
  t14224 = t9752*t14222;
  t14225 = t14216*t10209;
  t14226 = t14224 + t14225;
  t14228 = -0.0641*t14226;
  t14229 = t9752*t14216;
  t14230 = -1.*t14222*t10209;
  t14232 = t14229 + t14230;
  t14233 = 0.355*t14232;
  t14235 = t14211 + t14212 + t14217 + t14223 + t14228 + t14233;
  t13842 = -0.325*t10113*t13512;
  t13862 = 0.325*t13861*t9229;
  t13873 = 0.075*t9922*t13872;
  t13881 = 0.075*t13880*t10209;
  t13882 = t9752*t13880;
  t13883 = t13872*t10209;
  t13884 = t13882 + t13883;
  t13885 = -0.0641*t13884;
  t13886 = t9752*t13872;
  t13887 = -1.*t13880*t10209;
  t13888 = t13886 + t13887;
  t13889 = 0.355*t13888;
  t13890 = t13842 + t13862 + t13873 + t13881 + t13885 + t13889;
  t15757 = -1.*t6892*t6896*t13474;
  t15758 = -1.*t14342*t7138;
  t15759 = t15757 + t15758;
  t15710 = t10437*t13474*t6937;
  t15714 = t13465*t6941;
  t15748 = t15710 + t15714;
  t15756 = -1.*t10113*t15748;
  t15760 = -1.*t15759*t9229;
  t15765 = t15756 + t15760;
  t15767 = t10113*t15759;
  t15776 = -1.*t15748*t9229;
  t15777 = t15767 + t15776;
  t16981 = -1.*t10113*t15759;
  t23080 = t15748*t9229;
  t23122 = t16981 + t23080;
  t14449 = 0.075*t10113*t9752*t14433;
  t14450 = 0.075*t14433*t9229*t10209;
  t14451 = t9752*t14433*t9229;
  t14453 = -1.*t10113*t14433*t10209;
  t14457 = t14451 + t14453;
  t14458 = -0.0641*t14457;
  t14459 = -1.*t10113*t9752*t14433;
  t14537 = -1.*t14433*t9229*t10209;
  t15112 = t14459 + t14537;
  t15118 = 0.355*t15112;
  t15278 = t14449 + t14450 + t14458 + t15118;
  t14345 = 0.075*t9752*t14344;
  t14349 = 0.075*t14348*t10209;
  t14355 = t9752*t14348;
  t14356 = -1.*t14344*t10209;
  t14357 = t14355 + t14356;
  t14358 = -0.0641*t14357;
  t14359 = -1.*t9752*t14344;
  t14360 = -1.*t14348*t10209;
  t14361 = t14359 + t14360;
  t14362 = 0.355*t14361;
  t14363 = t14345 + t14349 + t14358 + t14362;
  t14237 = 0.075*t9752*t14216;
  t14242 = 0.075*t14241*t10209;
  t14243 = t9752*t14241;
  t14244 = -1.*t14216*t10209;
  t14252 = t14243 + t14244;
  t14253 = -0.0641*t14252;
  t14255 = -1.*t9752*t14216;
  t14256 = -1.*t14241*t10209;
  t14257 = t14255 + t14256;
  t14259 = 0.355*t14257;
  t14260 = t14237 + t14242 + t14253 + t14259;
  t13892 = 0.075*t9752*t13872;
  t13896 = 0.075*t13895*t10209;
  t13902 = t9752*t13895;
  t13906 = -1.*t13872*t10209;
  t13946 = t13902 + t13906;
  t13953 = -0.0641*t13946;
  t13961 = -1.*t9752*t13872;
  t13969 = -1.*t13895*t10209;
  t13998 = t13961 + t13969;
  t14017 = 0.355*t13998;
  t14021 = t13892 + t13896 + t13953 + t14017;
  t15766 = 0.075*t9752*t15765;
  t15778 = 0.075*t15777*t10209;
  t15782 = -1.*t9752*t15765;
  t15790 = -1.*t15777*t10209;
  t15796 = t15782 + t15790;
  t15803 = 0.355*t15796;
  t15804 = t9752*t15777;
  t15805 = -1.*t15765*t10209;
  t15823 = t15804 + t15805;
  t15835 = -0.0641*t15823;
  t16248 = t15766 + t15778 + t15803 + t15835;
  t32151 = t10113*t15748;
  t32320 = t15759*t9229;
  t32524 = t32151 + t32320;
  t23719 = t9752*t15765;
  t34726 = t15777*t10209;
  t34978 = -1.*t9752*t15777;
  t34983 = -1.*t32524*t10209;
  t34988 = t34978 + t34983;
  t42898 = 0.1575*t6892*t6896*t13474;
  t42930 = 0.1575*t14342*t7138;
  t43234 = 0.2255*t15759;
  t43278 = -0.325*t14433*t9229;
  t43288 = 0.075*t9922*t14433*t9229;
  t43321 = 0.075*t10113*t14433*t10209;
  t43322 = 0.355*t14457;
  t43323 = -0.0641*t15336;
  t43798 = t42898 + t42930 + t43234 + t43278 + t43288 + t43321 + t43322 + t43323;
  t38143 = 0.1575*t10442*t14033;
  t38149 = 0.2255*t6896*t14033;
  t38179 = 0.325*t10810*t14342;
  t38180 = 0.325*t14033*t7138*t9229;
  t38455 = 0.075*t9922*t14348;
  t38486 = 0.075*t14344*t10209;
  t38489 = 0.355*t14357;
  t38493 = t14348*t10209;
  t38504 = t14377 + t38493;
  t38505 = -0.0641*t38504;
  t42884 = t38143 + t38149 + t38179 + t38180 + t38455 + t38486 + t38489 + t38505;
  t35922 = 0.325*t6892*t10437*t10810*t13474;
  t35928 = -0.1575*t6892*t10442*t13474*t6941;
  t36182 = -0.1575*t13474*t6937*t7138;
  t36183 = -1.*t6892*t6896*t13474*t6941;
  t36184 = t13474*t6937*t7138;
  t36542 = t36183 + t36184;
  t36609 = 0.2255*t36542;
  t36619 = -0.325*t14102*t9229;
  t36704 = 0.075*t9922*t14241;
  t36713 = 0.075*t14216*t10209;
  t36714 = 0.355*t14252;
  t36718 = t14241*t10209;
  t36726 = t14229 + t36718;
  t36771 = -0.0641*t36726;
  t38133 = t35922 + t35928 + t36182 + t36609 + t36619 + t36704 + t36713 + t36714 + t36771;
  t35395 = 0.325*t10810*t13861;
  t35398 = 0.1575*t10442*t13508;
  t35399 = 0.1575*t13465*t6892*t7138;
  t35414 = t6896*t13508;
  t35415 = -1.*t13465*t6892*t7138;
  t35448 = t35414 + t35415;
  t35449 = 0.2255*t35448;
  t35450 = -0.325*t13512*t9229;
  t35483 = 0.075*t9922*t13895;
  t35502 = 0.075*t13872*t10209;
  t35503 = 0.355*t13946;
  t35849 = t13895*t10209;
  t35850 = t13886 + t35849;
  t35863 = -0.0641*t35850;
  t35914 = t35395 + t35398 + t35399 + t35449 + t35450 + t35483 + t35502 + t35503 + t35863;
  t43799 = -0.325*t10113*t15759;
  t43800 = 0.325*t15748*t9229;
  t43863 = 0.075*t9922*t15777;
  t43901 = 0.075*t15765*t10209;
  t43904 = t23719 + t34726;
  t44020 = -0.0641*t43904;
  t44221 = 0.355*t15823;
  t44383 = t43799 + t43800 + t43863 + t43901 + t44020 + t44221;
  t44996 = 0.075*t9752*t15777;
  t45362 = 0.075*t32524*t10209;
  t45382 = t9752*t32524;
  t45539 = t45382 + t15790;
  t45554 = -0.0641*t45539;
  t45560 = 0.355*t34988;
  t45571 = t44996 + t45362 + t45554 + t45560;
  t49144 = t13465*t6892*t10113*t6941;
  t49149 = -1.*t13465*t6892*t10437*t7138*t9229;
  t49161 = t49144 + t49149;
  t49269 = -1.*t13465*t6892*t10437*t10113*t7138;
  t49273 = -1.*t13465*t6892*t6941*t9229;
  t49275 = t49269 + t49273;
  t45967 = -1.*t13465*t6896*t6937;
  t45999 = -1.*t13465*t6892*t6941*t7138;
  t46011 = t45967 + t45999;
  t49356 = -1.*t46011*t9229;
  t49368 = t13804 + t49356;
  t49339 = t10113*t46011;
  t49341 = t13465*t6892*t10437*t9229;
  t49342 = t49339 + t49341;
  t55742 = -1.*t13465*t6892*t10437*t10113;
  t55748 = t46011*t9229;
  t55751 = t55742 + t55748;
  t56211 = t13465*t6937*t6941*t7138;
  t56306 = t13510 + t56211;
  t57535 = t13465*t10437*t10113*t6937;
  t57554 = t56306*t9229;
  t57559 = t57535 + t57554;
  t57586 = t10113*t56306;
  t57606 = -1.*t13465*t10437*t6937*t9229;
  t57612 = t57586 + t57606;
  t49051 = 0.1575*t13465*t6892*t10437*t10442;
  t49107 = 0.2255*t13465*t6892*t10437*t6896;
  t49113 = 0.325*t13465*t6892*t10810*t6941;
  t49121 = 0.325*t13465*t6892*t10437*t7138*t9229;
  t49252 = 0.075*t9922*t49161;
  t49276 = 0.075*t49275*t10209;
  t49277 = t9752*t49161;
  t49309 = -1.*t49275*t10209;
  t49310 = t49277 + t49309;
  t49311 = 0.355*t49310;
  t49314 = t9752*t49275;
  t49315 = t49161*t10209;
  t49316 = t49314 + t49315;
  t49318 = -0.0641*t49316;
  t49320 = t49051 + t49107 + t49113 + t49121 + t49252 + t49276 + t49311 + t49318;
  t58085 = t10437*t13474;
  t58088 = t13465*t6937*t6941;
  t58122 = t58085 + t58088;
  t58134 = t10113*t58122;
  t58148 = -1.*t13861*t7138*t9229;
  t58150 = t58134 + t58148;
  t58084 = -1.*t10113*t13861*t7138;
  t58123 = -1.*t58122*t9229;
  t58129 = t58084 + t58123;
  t58940 = -1.*t10113*t58122;
  t58945 = t13861*t7138*t9229;
  t58947 = t58940 + t58945;
  t59275 = -1.*t13508*t7138*t9229;
  t59276 = t13893 + t59275;
  t59303 = -1.*t10113*t13508*t7138;
  t59304 = t59303 + t13871;
  t57980 = -0.068*t13861*t7138;
  t57990 = 0.325*t6896*t13861*t9229;
  t57992 = -0.075*t6896*t9922*t13861*t9229;
  t57994 = -0.075*t6896*t10113*t13861*t10209;
  t58015 = -1.*t6896*t9752*t13861*t9229;
  t58029 = t6896*t10113*t13861*t10209;
  t58033 = t58015 + t58029;
  t58051 = 0.355*t58033;
  t58062 = -1.*t6896*t10113*t9752*t13861;
  t58066 = -1.*t6896*t13861*t9229*t10209;
  t58068 = t58062 + t58066;
  t58070 = -0.0641*t58068;
  t58071 = t57980 + t57990 + t57992 + t57994 + t58051 + t58070;
  t59663 = -1.*t6896*t58122;
  t59669 = t59663 + t35415;
  t45772 = 0.1575*t13465*t6896*t6937;
  t45798 = 0.1575*t13465*t6892*t6941*t7138;
  t46053 = 0.2255*t46011;
  t46070 = -0.325*t13793*t9229;
  t46128 = 0.075*t9922*t13793*t9229;
  t46168 = 0.075*t10113*t13793*t10209;
  t46173 = t9752*t13793*t9229;
  t46186 = -1.*t10113*t13793*t10209;
  t46397 = t46173 + t46186;
  t47572 = 0.355*t46397;
  t47573 = t10113*t9752*t13793;
  t47702 = t13793*t9229*t10209;
  t47719 = t47573 + t47702;
  t47720 = -0.0641*t47719;
  t47888 = t45772 + t45798 + t46053 + t46070 + t46128 + t46168 + t47572 + t47720;
  t60202 = t58122*t7138;
  t60204 = t13510 + t60202;
  t60138 = -0.325*t10113*t59669;
  t60139 = 0.075*t10113*t9922*t59669;
  t60144 = -0.075*t59669*t9229*t10209;
  t60146 = -1.*t9752*t59669*t9229;
  t60153 = t10113*t59669*t10209;
  t60166 = t60146 + t60153;
  t60175 = -0.0641*t60166;
  t60181 = t10113*t9752*t59669;
  t60182 = t59669*t9229*t10209;
  t60183 = t60181 + t60182;
  t60185 = 0.355*t60183;
  t60190 = t60138 + t60139 + t60144 + t60175 + t60185;
  t58226 = 0.325*t10113*t13861*t7138;
  t58227 = 0.325*t58122*t9229;
  t58640 = 0.075*t9922*t58129;
  t58952 = 0.075*t58947*t10209;
  t58973 = t9752*t58947;
  t59007 = t58129*t10209;
  t59169 = t58973 + t59007;
  t59186 = -0.0641*t59169;
  t59201 = t9752*t58129;
  t59202 = -1.*t58947*t10209;
  t59204 = t59201 + t59202;
  t59221 = 0.355*t59204;
  t59227 = t58226 + t58227 + t58640 + t58952 + t59186 + t59221;
  t49337 = -0.325*t10113*t46011;
  t49338 = -0.325*t13465*t6892*t10437*t9229;
  t49348 = 0.075*t9922*t49342;
  t49371 = 0.075*t49368*t10209;
  t49407 = t9752*t49368;
  t49423 = t49342*t10209;
  t49435 = t49407 + t49423;
  t54791 = -0.0641*t49435;
  t55055 = t9752*t49342;
  t55066 = -1.*t49368*t10209;
  t55147 = t55055 + t55066;
  t55399 = 0.355*t55147;
  t55407 = t49337 + t49338 + t49348 + t49371 + t54791 + t55399;
  t60321 = t13465*t6892*t6896;
  t60323 = -1.*t58122*t7138;
  t60324 = t60321 + t60323;
  t60320 = -1.*t10113*t13638;
  t60329 = -1.*t60324*t9229;
  t60336 = t60320 + t60329;
  t60349 = t10113*t60324;
  t60354 = -1.*t13638*t9229;
  t60358 = t60349 + t60354;
  t60540 = -1.*t10113*t60324;
  t60609 = t13638*t9229;
  t60639 = t60540 + t60609;
  t59675 = 0.075*t10113*t9752*t59669;
  t59693 = 0.075*t59669*t9229*t10209;
  t60093 = t9752*t59669*t9229;
  t60119 = -1.*t10113*t59669*t10209;
  t60124 = t60093 + t60119;
  t60125 = -0.0641*t60124;
  t60128 = -1.*t10113*t9752*t59669;
  t60129 = -1.*t59669*t9229*t10209;
  t60132 = t60128 + t60129;
  t60133 = 0.355*t60132;
  t60134 = t59675 + t59693 + t60125 + t60133;
  t58133 = 0.075*t9752*t58129;
  t58161 = 0.075*t58150*t10209;
  t58162 = t9752*t58150;
  t58164 = -1.*t58129*t10209;
  t58168 = t58162 + t58164;
  t58171 = -0.0641*t58168;
  t58180 = -1.*t9752*t58129;
  t58187 = -1.*t58150*t10209;
  t58188 = t58180 + t58187;
  t58195 = 0.355*t58188;
  t58199 = t58133 + t58161 + t58171 + t58195;
  t55552 = 0.075*t9752*t49342;
  t55763 = 0.075*t55751*t10209;
  t55777 = t9752*t55751;
  t55781 = -1.*t49342*t10209;
  t55784 = t55777 + t55781;
  t55786 = -0.0641*t55784;
  t55787 = -1.*t9752*t49342;
  t55833 = -1.*t55751*t10209;
  t55901 = t55787 + t55833;
  t55955 = 0.355*t55901;
  t55996 = t55552 + t55763 + t55786 + t55955;
  t60345 = 0.075*t9752*t60336;
  t60378 = 0.075*t60358*t10209;
  t60460 = -1.*t9752*t60336;
  t60461 = -1.*t60358*t10209;
  t60463 = t60460 + t60461;
  t60464 = 0.355*t60463;
  t60465 = t9752*t60358;
  t60474 = -1.*t60336*t10209;
  t60478 = t60465 + t60474;
  t60523 = -0.0641*t60478;
  t60528 = t60345 + t60378 + t60464 + t60523;
  t61023 = t10113*t13638;
  t61025 = t60324*t9229;
  t61027 = t61023 + t61025;
  t60841 = t9752*t60336;
  t61079 = t60358*t10209;
  t61105 = -1.*t9752*t60358;
  t61115 = -1.*t61027*t10209;
  t61116 = t61105 + t61115;
  p_output1[0]=(t11117 + t11122 + t11133 + t11255 + t11285 + 0.075*t10209*t11367 + 0.355*(-1.*t10209*t11367 + t11296*t9752) - 0.0641*(t10209*t11296 + t11367*t9752) + 0.075*t11296*t9922)*var2[4] + t11089*var2[5] + t10326*var2[6] + t11647*var2[7] + t11854*var2[8];
  p_output1[1]=t11089*var2[4] + (t11117 + t11122 + 0.075*t10209*t12844 + 0.2255*t6892*t6896*t6941 + 0.325*t6892*t6941*t7138*t9229 + 0.355*(-1.*t10209*t12844 + t12813*t9752) - 0.0641*(t10209*t12813 + t12844*t9752) + 0.075*t12813*t9922)*var2[5] + t11948*var2[6] + t12398*var2[7] + t12669*var2[8];
  p_output1[2]=t10326*var2[4] + t11948*var2[5] + (t11133 + t11255 + 0.075*t10113*t10209*t11275 + t11285 - 0.1575*t6892*t6896*t6941 - 0.0641*(t10209*t11275*t9229 + t10113*t11275*t9752) + 0.355*(-1.*t10113*t10209*t11275 + t11275*t9229*t9752) + 0.075*t11275*t9229*t9922)*var2[6] + t13098*var2[7] + t12977*var2[8];
  p_output1[3]=t11647*var2[4] + t12398*var2[5] + t13098*var2[6] + (0.075*t10209*t13223 + 0.355*(-1.*t10209*t13223 + t13225) + 0.325*t10113*t10437*t6892 + 0.325*t13194*t9229 - 0.0641*(t10209*t13196 + t13223*t9752) + 0.075*t13196*t9922)*var2[7] + t13213*var2[8];
  p_output1[4]=t11854*var2[4] + t12669*var2[5] + t12977*var2[6] + t13213*var2[7] + (-0.075*t10209*t13200 - 0.0641*t13273 + 0.075*t13243*t9752 + 0.355*(t13247 - 1.*t13243*t9752))*var2[8];
  p_output1[5]=1.;
  p_output1[6]=0.075*t10209*t11589 - 0.0641*(t11612 + t10209*t11774) + 0.355*t11786 - 0.325*t10437*t10810*t6937 + 0.1575*t10442*t6937*t6941 - 0.1575*t6892*t7138 + 0.2255*(t6896*t6937*t6941 + t6892*t7138) - 0.325*t7504*t9229 + 0.075*t11774*t9922;
  p_output1[7]=0.075*t10209*t12082 - 0.0641*(t12382 + t10209*t12646) + 0.355*t12662 - 0.1575*t10437*t10442*t6892 - 0.2255*t10437*t6892*t6896 - 0.325*t10810*t6892*t6941 - 0.325*t10437*t6892*t7138*t9229 + 0.075*t12646*t9922;
  p_output1[8]=0.075*t10113*t10209*t11155 + 0.355*t12951 - 0.0641*t13045 + 0.2255*t13194 - 0.1575*t6896*t6937 - 0.1575*t6892*t6941*t7138 - 0.325*t11155*t9229 + 0.075*t11155*t9229*t9922;
  p_output1[9]=-0.325*t10113*t13194 + 0.075*t10209*t13196 + 0.355*t13211 - 0.0641*(t13225 + t13247) + 0.325*t10437*t6892*t9229 + 0.075*t13200*t9922;
  p_output1[10]=0.075*t10209*t13243 + 0.355*t13273 + 0.075*t13200*t9752 - 0.0641*(t13203 + t13243*t9752);
  p_output1[11]=(t14034 + t14038 + t14043 + 0.075*t10209*t14070 + 0.2255*(t14049 + t14037*t6896) - 0.325*t14062*t9229 + 0.355*(-1.*t10209*t14070 + t14066*t9752) - 0.0641*(t10209*t14066 + t14070*t9752) + 0.075*t14066*t9922)*var2[3] + t13836*var2[4] + t13753*var2[5] + t13634*var2[6] + t13890*var2[7] + t14021*var2[8];
  p_output1[12]=t13836*var2[3] + (t14043 + 0.075*t10209*t14294 - 0.325*t10437*t10810*t13474*t6937 + 0.1575*t10442*t13474*t6937*t6941 + 0.2255*(t14049 + t13474*t6896*t6937*t6941) - 0.325*t14281*t9229 + 0.355*(-1.*t10209*t14294 + t14286*t9752) - 0.0641*(t10209*t14286 + t14294*t9752) + 0.075*t14286*t9922)*var2[4] + t14208*var2[5] + t14120*var2[6] + t14235*var2[7] + t14260*var2[8];
  p_output1[13]=t13753*var2[3] + t14208*var2[4] + (t14034 + t14038 + 0.075*t10209*t14411 + 0.2255*t14037*t6896 + 0.325*t14037*t7138*t9229 + 0.355*(-1.*t10209*t14411 + t14408*t9752) - 0.0641*(t10209*t14408 + t14411*t9752) + 0.075*t14408*t9922)*var2[5] + t14336*var2[6] + t14384*var2[7] + t14363*var2[8];
  p_output1[14]=t13634*var2[3] + t14120*var2[4] + t14336*var2[5] + (t14043 + 0.2255*t14433 + 0.075*t10113*t10209*t15479 + 0.1575*t14342*t6896 - 0.325*t15479*t9229 - 0.0641*(t10209*t15479*t9229 + t10113*t15479*t9752) + 0.355*(-1.*t10113*t10209*t15479 + t15479*t9229*t9752) + 0.075*t15479*t9229*t9922)*var2[6] + t15338*var2[7] + t15278*var2[8];
  p_output1[15]=t13890*var2[3] + t14235*var2[4] + t14384*var2[5] + t15338*var2[6] + (0.325*t10113*t15748 + 0.075*t10209*t23122 + 0.355*(-1.*t10209*t23122 + t23719) + 0.325*t15759*t9229 - 0.0641*(t10209*t15765 + t23122*t9752) + 0.075*t15765*t9922)*var2[7] + t16248*var2[8];
  p_output1[16]=t14021*var2[3] + t14260*var2[4] + t14363*var2[5] + t15278*var2[6] + t16248*var2[7] + (-0.075*t10209*t15777 - 0.0641*t34988 + 0.075*t32524*t9752 + 0.355*(t34726 - 1.*t32524*t9752))*var2[8];
  p_output1[17]=1.;
  p_output1[18]=t35914;
  p_output1[19]=t38133;
  p_output1[20]=t42884;
  p_output1[21]=t43798;
  p_output1[22]=t44383;
  p_output1[23]=t45571;
  p_output1[24]=t35914*var2[3] + t38133*var2[4] + t42884*var2[5] + t43798*var2[6] + t44383*var2[7] + t45571*var2[8];
  p_output1[25]=t38133*var2[3] + (t35399 + 0.075*t10209*t57612 + 0.325*t10437*t10810*t13465*t6937 - 0.1575*t10442*t13465*t6937*t6941 + 0.2255*(t35415 - 1.*t13465*t6896*t6937*t6941) - 0.325*t56306*t9229 + 0.355*(-1.*t10209*t57612 + t57559*t9752) - 0.0641*(t10209*t57559 + t57612*t9752) + 0.075*t57559*t9922)*var2[4] + t49320*var2[5] + t47888*var2[6] + t55407*var2[7] + t55996*var2[8];
  p_output1[26]=t42884*var2[3] + t49320*var2[4] + (t35395 + t35398 + 0.075*t10209*t59304 + 0.2255*t13508*t6896 + 0.325*t13508*t7138*t9229 + 0.355*(-1.*t10209*t59304 + t59276*t9752) - 0.0641*(t10209*t59276 + t59304*t9752) + 0.075*t59276*t9922)*var2[5] + t58071*var2[6] + t59227*var2[7] + t58199*var2[8];
  p_output1[27]=t43798*var2[3] + t47888*var2[4] + t58071*var2[5] + (t35399 + 0.2255*t59669 + 0.075*t10113*t10209*t60204 + 0.1575*t58122*t6896 - 0.325*t60204*t9229 - 0.0641*(t10209*t60204*t9229 + t10113*t60204*t9752) + 0.355*(-1.*t10113*t10209*t60204 + t60204*t9229*t9752) + 0.075*t60204*t9229*t9922)*var2[6] + t60190*var2[7] + t60134*var2[8];
  p_output1[28]=t44383*var2[3] + t55407*var2[4] + t59227*var2[5] + t60190*var2[6] + (0.325*t10113*t13638 + 0.075*t10209*t60639 + 0.355*(-1.*t10209*t60639 + t60841) + 0.325*t60324*t9229 - 0.0641*(t10209*t60336 + t60639*t9752) + 0.075*t60336*t9922)*var2[7] + t60528*var2[8];
  p_output1[29]=t45571*var2[3] + t55996*var2[4] + t58199*var2[5] + t60134*var2[6] + t60528*var2[7] + (-0.075*t10209*t60358 - 0.0641*t61116 + 0.075*t61027*t9752 + 0.355*(t61079 - 1.*t61027*t9752))*var2[8];
  p_output1[30]=1.;
  p_output1[31]=0.1575*t10442*t14342 + 0.325*t10810*t15748 + t15778 - 0.0641*(t15804 + t10209*t32524) + 0.355*t45539 + 0.1575*t13474*t6892*t7138 + 0.2255*(t14342*t6896 - 1.*t13474*t6892*t7138) - 0.325*t15759*t9229 + 0.075*t32524*t9922;
  p_output1[32]=0.075*t10209*t49342 - 0.0641*(t55055 + t10209*t55751) + 0.355*t55784 - 0.325*t10437*t10810*t13465*t6892 + 0.1575*t10442*t13465*t6892*t6941 + 0.1575*t13465*t6937*t7138 + 0.2255*(t13465*t6892*t6896*t6941 - 1.*t13465*t6937*t7138) - 0.325*t46011*t9229 + 0.075*t55751*t9922;
  p_output1[33]=0.1575*t10442*t13861 + 0.325*t10810*t58122 + 0.075*t10209*t58129 + 0.355*t58168 - 0.0641*(t10209*t58150 + t59201) + 0.2255*t13861*t6896 + 0.325*t13861*t7138*t9229 + 0.075*t58150*t9922;
  p_output1[34]=0.075*t10113*t10209*t59669 + 0.355*t60124 - 0.0641*t60183 + 0.2255*t60324 - 0.1575*t13465*t6892*t6896 + 0.1575*t58122*t7138 - 0.325*t59669*t9229 + 0.075*t59669*t9229*t9922;
  p_output1[35]=-0.325*t10113*t60324 + 0.075*t10209*t60336 + 0.355*t60478 - 0.0641*(t60841 + t61079) + 0.325*t13638*t9229 + 0.075*t60358*t9922;
  p_output1[36]=0.075*t10209*t61027 + 0.355*t61116 + 0.075*t60358*t9752 - 0.0641*(t60461 + t61027*t9752);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 37, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_impact_velocity_FlFoot_ParallelStance.hh"

namespace ParallelStance
{

void J_impact_velocity_FlFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
