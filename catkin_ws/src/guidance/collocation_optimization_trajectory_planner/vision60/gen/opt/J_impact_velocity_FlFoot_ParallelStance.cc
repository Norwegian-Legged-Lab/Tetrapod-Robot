/*
 * Automatically Generated from Mathematica.
 * Sun 3 Apr 2022 21:48:34 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t769;
  double t805;
  double t951;
  double t960;
  double t967;
  double t26083;
  double t26335;
  double t26352;
  double t26462;
  double t26475;
  double t26746;
  double t26754;
  double t26947;
  double t26513;
  double t26532;
  double t27522;
  double t27565;
  double t27568;
  double t29075;
  double t29361;
  double t29960;
  double t27486;
  double t27487;
  double t27170;
  double t27470;
  double t30470;
  double t30471;
  double t30483;
  double t30486;
  double t30490;
  double t30492;
  double t30498;
  double t30499;
  double t30506;
  double t1073;
  double t9279;
  double t18560;
  double t30762;
  double t30804;
  double t30853;
  double t30734;
  double t30737;
  double t30742;
  double t31098;
  double t31130;
  double t31204;
  double t31608;
  double t31619;
  double t31623;
  double t31592;
  double t31594;
  double t31595;
  double t31766;
  double t31772;
  double t31776;
  double t27479;
  double t27482;
  double t27488;
  double t27521;
  double t27612;
  double t29961;
  double t30027;
  double t30049;
  double t30050;
  double t30058;
  double t30060;
  double t30066;
  double t30071;
  double t30072;
  double t30083;
  double t30087;
  double t30127;
  double t32131;
  double t32192;
  double t32199;
  double t32203;
  double t31422;
  double t31455;
  double t31460;
  double t31474;
  double t31486;
  double t31517;
  double t31536;
  double t31542;
  double t31547;
  double t31555;
  double t31557;
  double t31571;
  double t31582;
  double t950;
  double t968;
  double t25866;
  double t26471;
  double t26626;
  double t26779;
  double t26782;
  double t26783;
  double t26788;
  double t26794;
  double t26885;
  double t26888;
  double t26897;
  double t26918;
  double t26923;
  double t30221;
  double t30279;
  double t30457;
  double t30186;
  double t30463;
  double t30484;
  double t32522;
  double t32523;
  double t32524;
  double t32531;
  double t32540;
  double t32561;
  double t32607;
  double t32631;
  double t32644;
  double t32657;
  double t32658;
  double t32714;
  double t31588;
  double t31591;
  double t31600;
  double t31624;
  double t31630;
  double t31686;
  double t31701;
  double t31715;
  double t31720;
  double t31732;
  double t31739;
  double t31743;
  double t31745;
  double t32791;
  double t32796;
  double t32803;
  double t32805;
  double t32811;
  double t32845;
  double t32856;
  double t32860;
  double t32925;
  double t32931;
  double t30714;
  double t30718;
  double t30746;
  double t30930;
  double t30953;
  double t30988;
  double t31010;
  double t31014;
  double t31058;
  double t31059;
  double t31062;
  double t31068;
  double t31078;
  double t32354;
  double t32408;
  double t32410;
  double t32415;
  double t32453;
  double t32454;
  double t32464;
  double t32475;
  double t32476;
  double t32477;
  double t32495;
  double t31762;
  double t31824;
  double t31840;
  double t31842;
  double t31843;
  double t31847;
  double t31848;
  double t31927;
  double t32042;
  double t32049;
  double t32050;
  double t32834;
  double t32880;
  double t32890;
  double t32894;
  double t32896;
  double t32898;
  double t32900;
  double t32901;
  double t32902;
  double t32903;
  double t32904;
  double t32979;
  double t32980;
  double t32981;
  double t31084;
  double t31211;
  double t31212;
  double t31213;
  double t31215;
  double t31219;
  double t31231;
  double t31323;
  double t31375;
  double t31396;
  double t31402;
  double t32933;
  double t33001;
  double t33010;
  double t33011;
  double t33013;
  double t33084;
  double t33086;
  double t33087;
  double t33088;
  double t33089;
  double t33097;
  double t33098;
  double t33099;
  double t33115;
  double t33116;
  double t33117;
  double t33122;
  double t33124;
  double t33125;
  double t33127;
  double t33128;
  double t33129;
  double t33157;
  double t33158;
  double t33159;
  double t33163;
  double t33165;
  double t33169;
  double t33171;
  double t33173;
  double t33175;
  double t33092;
  double t33093;
  double t33094;
  double t33204;
  double t33205;
  double t33206;
  double t33214;
  double t33219;
  double t33220;
  double t33208;
  double t33210;
  double t33212;
  double t33246;
  double t33247;
  double t33248;
  double t33279;
  double t33280;
  double t33281;
  double t33274;
  double t33275;
  double t33276;
  double t33300;
  double t33301;
  double t33302;
  double t33304;
  double t33305;
  double t33306;
  double t33308;
  double t33309;
  double t33310;
  double t33339;
  double t33340;
  double t33341;
  double t33360;
  double t33361;
  double t33362;
  double t33364;
  double t33365;
  double t33366;
  double t33144;
  double t33145;
  double t33149;
  double t33150;
  double t33152;
  double t33153;
  double t33156;
  double t33161;
  double t33170;
  double t33176;
  double t33181;
  double t33182;
  double t33186;
  double t33187;
  double t33188;
  double t33196;
  double t33197;
  double t33198;
  double t33200;
  double t33330;
  double t33333;
  double t33335;
  double t33388;
  double t33389;
  double t33390;
  double t33383;
  double t33384;
  double t33386;
  double t33405;
  double t33406;
  double t33408;
  double t33284;
  double t33290;
  double t33427;
  double t33428;
  double t33430;
  double t33431;
  double t33432;
  double t33434;
  double t33435;
  double t33436;
  double t33356;
  double t33357;
  double t33358;
  double t33359;
  double t33363;
  double t33367;
  double t33368;
  double t33369;
  double t33370;
  double t33372;
  double t33373;
  double t33374;
  double t33376;
  double t33377;
  double t33378;
  double t33467;
  double t33468;
  double t33469;
  double t33476;
  double t33477;
  double t33478;
  double t33466;
  double t33470;
  double t33471;
  double t33494;
  double t33495;
  double t33496;
  double t33118;
  double t33119;
  double t33120;
  double t33121;
  double t33126;
  double t33130;
  double t33132;
  double t33133;
  double t33134;
  double t33135;
  double t33136;
  double t33137;
  double t33138;
  double t33139;
  double t33141;
  double t33277;
  double t33282;
  double t33530;
  double t33532;
  double t33535;
  double t33536;
  double t33450;
  double t33452;
  double t33453;
  double t33454;
  double t33455;
  double t33456;
  double t33457;
  double t33458;
  double t33459;
  double t33460;
  double t33461;
  double t33462;
  double t33463;
  double t33085;
  double t33090;
  double t33096;
  double t33101;
  double t33102;
  double t33103;
  double t33105;
  double t33106;
  double t33107;
  double t33108;
  double t33109;
  double t33110;
  double t33111;
  double t33112;
  double t33113;
  double t33569;
  double t33570;
  double t33327;
  double t33329;
  double t33338;
  double t33342;
  double t33343;
  double t33344;
  double t33345;
  double t33346;
  double t33347;
  double t33348;
  double t33350;
  double t33351;
  double t33352;
  double t33353;
  double t33354;
  double t33619;
  double t33620;
  double t33592;
  double t33593;
  double t33594;
  double t33597;
  double t33603;
  double t33604;
  double t33605;
  double t33606;
  double t33609;
  double t33610;
  double t33611;
  double t33613;
  double t33490;
  double t33491;
  double t33492;
  double t33499;
  double t33503;
  double t33504;
  double t33508;
  double t33509;
  double t33510;
  double t33512;
  double t33516;
  double t33521;
  double t33522;
  double t33381;
  double t33382;
  double t33387;
  double t33391;
  double t33392;
  double t33393;
  double t33394;
  double t33395;
  double t33396;
  double t33397;
  double t33400;
  double t33401;
  double t33402;
  double t33203;
  double t33207;
  double t33213;
  double t33222;
  double t33223;
  double t33227;
  double t33235;
  double t33236;
  double t33237;
  double t33239;
  double t33240;
  double t33241;
  double t33243;
  double t33651;
  double t33659;
  double t33660;
  double t33647;
  double t33648;
  double t33649;
  double t33650;
  double t33661;
  double t33662;
  double t33665;
  double t33666;
  double t33667;
  double t33684;
  double t33685;
  double t33686;
  double t33571;
  double t33572;
  double t33574;
  double t33575;
  double t33578;
  double t33579;
  double t33583;
  double t33584;
  double t33585;
  double t33586;
  double t33589;
  double t33475;
  double t33479;
  double t33480;
  double t33481;
  double t33482;
  double t33483;
  double t33484;
  double t33485;
  double t33486;
  double t33487;
  double t33488;
  double t33404;
  double t33410;
  double t33411;
  double t33412;
  double t33413;
  double t33414;
  double t33415;
  double t33416;
  double t33417;
  double t33418;
  double t33419;
  double t33245;
  double t33249;
  double t33250;
  double t33258;
  double t33262;
  double t33265;
  double t33266;
  double t33269;
  double t33270;
  double t33271;
  double t33272;
  double t33663;
  double t33669;
  double t33670;
  double t33671;
  double t33672;
  double t33673;
  double t33674;
  double t33675;
  double t33676;
  double t33677;
  double t33678;
  double t33706;
  double t33707;
  double t33712;
  double t33688;
  double t33722;
  double t33726;
  double t33728;
  double t33729;
  double t33789;
  double t33790;
  double t33791;
  double t33793;
  double t33795;
  double t33798;
  double t33799;
  double t33800;
  double t33803;
  double t33775;
  double t33777;
  double t33778;
  double t33779;
  double t33780;
  double t33783;
  double t33784;
  double t33785;
  double t33786;
  double t33787;
  double t33788;
  double t33755;
  double t33757;
  double t33759;
  double t33760;
  double t33761;
  double t33762;
  double t33764;
  double t33765;
  double t33767;
  double t33768;
  double t33769;
  double t33770;
  double t33771;
  double t33772;
  double t33774;
  double t33735;
  double t33736;
  double t33737;
  double t33738;
  double t33739;
  double t33740;
  double t33742;
  double t33744;
  double t33746;
  double t33747;
  double t33748;
  double t33750;
  double t33752;
  double t33753;
  double t33754;
  double t33804;
  double t33805;
  double t33806;
  double t33807;
  double t33808;
  double t33809;
  double t33810;
  double t33812;
  double t33813;
  double t33814;
  double t33816;
  double t33817;
  double t33818;
  double t33819;
  double t33820;
  double t33852;
  double t33853;
  double t33854;
  double t33856;
  double t33858;
  double t33859;
  double t33830;
  double t33831;
  double t33832;
  double t33880;
  double t33881;
  double t33876;
  double t33877;
  double t33878;
  double t33898;
  double t33899;
  double t33900;
  double t33931;
  double t33932;
  double t33934;
  double t33936;
  double t33937;
  double t33939;
  double t33940;
  double t33941;
  double t33847;
  double t33848;
  double t33849;
  double t33851;
  double t33855;
  double t33860;
  double t33861;
  double t33862;
  double t33864;
  double t33865;
  double t33866;
  double t33867;
  double t33868;
  double t33869;
  double t33870;
  double t33978;
  double t33979;
  double t33981;
  double t33985;
  double t33986;
  double t33987;
  double t33977;
  double t33982;
  double t33983;
  double t34008;
  double t34010;
  double t34011;
  double t34026;
  double t34028;
  double t34031;
  double t34032;
  double t33956;
  double t33957;
  double t33958;
  double t33959;
  double t33961;
  double t33963;
  double t33964;
  double t33965;
  double t33966;
  double t33967;
  double t33968;
  double t33970;
  double t33971;
  double t34052;
  double t34053;
  double t33828;
  double t33829;
  double t33833;
  double t33834;
  double t33835;
  double t33836;
  double t33837;
  double t33838;
  double t33839;
  double t33840;
  double t33841;
  double t33842;
  double t33843;
  double t33844;
  double t33845;
  double t34094;
  double t34095;
  double t34067;
  double t34070;
  double t34071;
  double t34073;
  double t34077;
  double t34079;
  double t34081;
  double t34082;
  double t34083;
  double t34084;
  double t34086;
  double t34087;
  double t34003;
  double t34004;
  double t34006;
  double t34012;
  double t34013;
  double t34014;
  double t34015;
  double t34016;
  double t34017;
  double t34018;
  double t34019;
  double t34021;
  double t34022;
  double t33874;
  double t33875;
  double t33879;
  double t33882;
  double t33884;
  double t33885;
  double t33886;
  double t33888;
  double t33889;
  double t33890;
  double t33892;
  double t33893;
  double t33894;
  double t34118;
  double t34119;
  double t34120;
  double t34117;
  double t34121;
  double t34122;
  double t34124;
  double t34125;
  double t34126;
  double t34143;
  double t34144;
  double t34145;
  double t34054;
  double t34055;
  double t34056;
  double t34057;
  double t34059;
  double t34060;
  double t34061;
  double t34062;
  double t34063;
  double t34064;
  double t34065;
  double t33984;
  double t33988;
  double t33989;
  double t33991;
  double t33993;
  double t33994;
  double t33995;
  double t33996;
  double t33998;
  double t34000;
  double t34001;
  double t33897;
  double t33902;
  double t33904;
  double t33906;
  double t33911;
  double t33914;
  double t33915;
  double t33916;
  double t33918;
  double t33920;
  double t33921;
  double t34123;
  double t34127;
  double t34128;
  double t34130;
  double t34131;
  double t34132;
  double t34133;
  double t34134;
  double t34135;
  double t34137;
  double t34138;
  double t34166;
  double t34167;
  double t34168;
  double t34147;
  double t34172;
  double t34175;
  double t34176;
  double t34177;
  t769 = Cos(var1[4]);
  t805 = Cos(var1[6]);
  t951 = Sin(var1[4]);
  t960 = Sin(var1[5]);
  t967 = Sin(var1[6]);
  t26083 = -1.*t805*t951*t960;
  t26335 = -1.*t769*t967;
  t26352 = t26083 + t26335;
  t26462 = Sin(var1[7]);
  t26475 = Cos(var1[8]);
  t26746 = Cos(var1[7]);
  t26754 = Sin(var1[8]);
  t26947 = Cos(var1[5]);
  t26513 = -1.*t26475;
  t26532 = 1. + t26513;
  t27522 = t26746*t951*t960;
  t27565 = -1.*t26947*t951*t967*t26462;
  t27568 = t27522 + t27565;
  t29075 = -1.*t26947*t26746*t951*t967;
  t29361 = -1.*t951*t960*t26462;
  t29960 = t29075 + t29361;
  t27486 = -1.*t26746;
  t27487 = 1. + t27486;
  t27170 = -1.*t805;
  t27470 = 1. + t27170;
  t30470 = -1.*t805*t951;
  t30471 = -1.*t769*t960*t967;
  t30483 = t30470 + t30471;
  t30486 = -1.*t769*t26947*t26746;
  t30490 = t30483*t26462;
  t30492 = t30486 + t30490;
  t30498 = t26746*t30483;
  t30499 = t769*t26947*t26462;
  t30506 = t30498 + t30499;
  t1073 = t769*t805;
  t9279 = -1.*t951*t960*t967;
  t18560 = t1073 + t9279;
  t30762 = t26947*t26746*t951;
  t30804 = -1.*t18560*t26462;
  t30853 = t30762 + t30804;
  t30734 = t26746*t18560;
  t30737 = t26947*t951*t26462;
  t30742 = t30734 + t30737;
  t31098 = -1.*t26947*t26746*t951;
  t31130 = t18560*t26462;
  t31204 = t31098 + t31130;
  t31608 = t769*t26746*t960;
  t31619 = -1.*t769*t26947*t967*t26462;
  t31623 = t31608 + t31619;
  t31592 = t769*t26947*t26746*t967;
  t31594 = t769*t960*t26462;
  t31595 = t31592 + t31594;
  t31766 = -1.*t769*t26746*t960;
  t31772 = t769*t26947*t967*t26462;
  t31776 = t31766 + t31772;
  t27479 = 0.1575*t26947*t27470*t951;
  t27482 = 0.2255*t26947*t805*t951;
  t27488 = 0.325*t27487*t951*t960;
  t27521 = 0.325*t26947*t951*t967*t26462;
  t27612 = 0.075*t26532*t27568;
  t29961 = 0.075*t29960*t26754;
  t30027 = t26475*t27568;
  t30049 = -1.*t29960*t26754;
  t30050 = t30027 + t30049;
  t30058 = 0.355*t30050;
  t30060 = t26475*t29960;
  t30066 = t27568*t26754;
  t30071 = t30060 + t30066;
  t30072 = -0.0641*t30071;
  t30083 = t27479 + t27482 + t27488 + t27521 + t27612 + t29961 + t30058 + t30072;
  t30087 = -0.325*t769*t26947*t27487;
  t30127 = 0.1575*t769*t27470*t960;
  t32131 = -1.*t769*t960*t967*t26462;
  t32192 = t30486 + t32131;
  t32199 = -1.*t769*t26746*t960*t967;
  t32203 = t32199 + t30499;
  t31422 = 0.068*t769*t26947*t967;
  t31455 = -0.325*t769*t26947*t805*t26462;
  t31460 = 0.075*t769*t26947*t805*t26532*t26462;
  t31474 = 0.075*t769*t26947*t805*t26746*t26754;
  t31486 = t769*t26947*t805*t26475*t26462;
  t31517 = -1.*t769*t26947*t805*t26746*t26754;
  t31536 = t31486 + t31517;
  t31542 = 0.355*t31536;
  t31547 = t769*t26947*t805*t26746*t26475;
  t31555 = t769*t26947*t805*t26462*t26754;
  t31557 = t31547 + t31555;
  t31571 = -0.0641*t31557;
  t31582 = t31422 + t31455 + t31460 + t31474 + t31542 + t31571;
  t950 = -0.1575*t769*t805;
  t968 = 0.1575*t951*t960*t967;
  t25866 = 0.2255*t18560;
  t26471 = -0.325*t26352*t26462;
  t26626 = 0.075*t26532*t26352*t26462;
  t26779 = 0.075*t26746*t26352*t26754;
  t26782 = t26475*t26352*t26462;
  t26783 = -1.*t26746*t26352*t26754;
  t26788 = t26782 + t26783;
  t26794 = 0.355*t26788;
  t26885 = t26746*t26475*t26352;
  t26888 = t26352*t26462*t26754;
  t26897 = t26885 + t26888;
  t26918 = -0.0641*t26897;
  t26923 = t950 + t968 + t25866 + t26471 + t26626 + t26779 + t26794 + t26918;
  t30221 = t769*t805*t960;
  t30279 = -1.*t951*t967;
  t30457 = t30221 + t30279;
  t30186 = 0.1575*t951*t967;
  t30463 = 0.2255*t30457;
  t30484 = -0.325*t30483*t26462;
  t32522 = -0.325*t26746*t30457;
  t32523 = 0.075*t26746*t26532*t30457;
  t32524 = -0.075*t30457*t26462*t26754;
  t32531 = -1.*t26475*t30457*t26462;
  t32540 = t26746*t30457*t26754;
  t32561 = t32531 + t32540;
  t32607 = -0.0641*t32561;
  t32631 = t26746*t26475*t30457;
  t32644 = t30457*t26462*t26754;
  t32657 = t32631 + t32644;
  t32658 = 0.355*t32657;
  t32714 = t32522 + t32523 + t32524 + t32607 + t32658;
  t31588 = -0.325*t769*t26947*t26746*t967;
  t31591 = -0.325*t769*t960*t26462;
  t31600 = 0.075*t26532*t31595;
  t31624 = 0.075*t31623*t26754;
  t31630 = t26475*t31623;
  t31686 = t31595*t26754;
  t31701 = t31630 + t31686;
  t31715 = -0.0641*t31701;
  t31720 = t26475*t31595;
  t31732 = -1.*t31623*t26754;
  t31739 = t31720 + t31732;
  t31743 = 0.355*t31739;
  t31745 = t31588 + t31591 + t31600 + t31624 + t31715 + t31743;
  t32791 = t805*t951;
  t32796 = t769*t960*t967;
  t32803 = t32791 + t32796;
  t32805 = -1.*t32803*t26462;
  t32811 = t30486 + t32805;
  t32845 = t26746*t32803;
  t32856 = -1.*t769*t26947*t26462;
  t32860 = t32845 + t32856;
  t32925 = -1.*t26746*t32803;
  t32931 = t32925 + t30499;
  t30714 = -0.325*t26746*t18560;
  t30718 = -0.325*t26947*t951*t26462;
  t30746 = 0.075*t26532*t30742;
  t30930 = 0.075*t30853*t26754;
  t30953 = t26475*t30853;
  t30988 = t30742*t26754;
  t31010 = t30953 + t30988;
  t31014 = -0.0641*t31010;
  t31058 = t26475*t30742;
  t31059 = -1.*t30853*t26754;
  t31062 = t31058 + t31059;
  t31068 = 0.355*t31062;
  t31078 = t30714 + t30718 + t30746 + t30930 + t31014 + t31068;
  t32354 = 0.075*t26746*t26475*t30457;
  t32408 = 0.075*t30457*t26462*t26754;
  t32410 = t26475*t30457*t26462;
  t32415 = -1.*t26746*t30457*t26754;
  t32453 = t32410 + t32415;
  t32454 = -0.0641*t32453;
  t32464 = -1.*t26746*t26475*t30457;
  t32475 = -1.*t30457*t26462*t26754;
  t32476 = t32464 + t32475;
  t32477 = 0.355*t32476;
  t32495 = t32354 + t32408 + t32454 + t32477;
  t31762 = 0.075*t26475*t31595;
  t31824 = 0.075*t31776*t26754;
  t31840 = t26475*t31776;
  t31842 = -1.*t31595*t26754;
  t31843 = t31840 + t31842;
  t31847 = -0.0641*t31843;
  t31848 = -1.*t26475*t31595;
  t31927 = -1.*t31776*t26754;
  t32042 = t31848 + t31927;
  t32049 = 0.355*t32042;
  t32050 = t31762 + t31824 + t31847 + t32049;
  t32834 = 0.075*t26475*t32811;
  t32880 = 0.075*t32860*t26754;
  t32890 = -1.*t26475*t32811;
  t32894 = -1.*t32860*t26754;
  t32896 = t32890 + t32894;
  t32898 = 0.355*t32896;
  t32900 = t26475*t32860;
  t32901 = -1.*t32811*t26754;
  t32902 = t32900 + t32901;
  t32903 = -0.0641*t32902;
  t32904 = t32834 + t32880 + t32898 + t32903;
  t32979 = t769*t26947*t26746;
  t32980 = t32803*t26462;
  t32981 = t32979 + t32980;
  t31084 = 0.075*t26475*t30742;
  t31211 = 0.075*t31204*t26754;
  t31212 = t26475*t31204;
  t31213 = -1.*t30742*t26754;
  t31215 = t31212 + t31213;
  t31219 = -0.0641*t31215;
  t31231 = -1.*t26475*t30742;
  t31323 = -1.*t31204*t26754;
  t31375 = t31231 + t31323;
  t31396 = 0.355*t31375;
  t31402 = t31084 + t31211 + t31219 + t31396;
  t32933 = t26475*t32811;
  t33001 = t32860*t26754;
  t33010 = -1.*t26475*t32860;
  t33011 = -1.*t32981*t26754;
  t33013 = t33010 + t33011;
  t33084 = Cos(var1[3]);
  t33086 = Sin(var1[3]);
  t33087 = -1.*t26947*t33086;
  t33088 = -1.*t33084*t951*t960;
  t33089 = t33087 + t33088;
  t33097 = -1.*t805*t33089;
  t33098 = t33084*t769*t967;
  t33099 = t33097 + t33098;
  t33115 = -1.*t33084*t26947*t951;
  t33116 = t33086*t960;
  t33117 = t33115 + t33116;
  t33122 = t26746*t33089;
  t33124 = -1.*t33117*t967*t26462;
  t33125 = t33122 + t33124;
  t33127 = -1.*t26746*t33117*t967;
  t33128 = -1.*t33089*t26462;
  t33129 = t33127 + t33128;
  t33157 = t33084*t805*t951;
  t33158 = t33084*t769*t960*t967;
  t33159 = t33157 + t33158;
  t33163 = t33084*t769*t26947*t26746;
  t33165 = t33159*t26462;
  t33169 = t33163 + t33165;
  t33171 = t26746*t33159;
  t33173 = -1.*t33084*t769*t26947*t26462;
  t33175 = t33171 + t33173;
  t33092 = -1.*t33084*t769*t805;
  t33093 = -1.*t33089*t967;
  t33094 = t33092 + t33093;
  t33204 = t33084*t26947*t951;
  t33205 = -1.*t33086*t960;
  t33206 = t33204 + t33205;
  t33214 = -1.*t26746*t33206;
  t33219 = -1.*t33094*t26462;
  t33220 = t33214 + t33219;
  t33208 = t26746*t33094;
  t33210 = -1.*t33206*t26462;
  t33212 = t33208 + t33210;
  t33246 = t26746*t33206;
  t33247 = t33094*t26462;
  t33248 = t33246 + t33247;
  t33279 = -1.*t33084*t26947;
  t33280 = t33086*t951*t960;
  t33281 = t33279 + t33280;
  t33274 = -1.*t26947*t33086*t951;
  t33275 = -1.*t33084*t960;
  t33276 = t33274 + t33275;
  t33300 = t769*t805*t33086;
  t33301 = -1.*t33281*t967;
  t33302 = t33300 + t33301;
  t33304 = t26746*t33276;
  t33305 = t33302*t26462;
  t33306 = t33304 + t33305;
  t33308 = t26746*t33302;
  t33309 = -1.*t33276*t26462;
  t33310 = t33308 + t33309;
  t33339 = t769*t805*t33086*t960;
  t33340 = -1.*t33086*t951*t967;
  t33341 = t33339 + t33340;
  t33360 = -1.*t769*t26746*t33086*t960;
  t33361 = t769*t26947*t33086*t967*t26462;
  t33362 = t33360 + t33361;
  t33364 = t769*t26947*t26746*t33086*t967;
  t33365 = t769*t33086*t960*t26462;
  t33366 = t33364 + t33365;
  t33144 = 0.325*t33084*t769*t26947*t27487;
  t33145 = -0.1575*t33084*t769*t27470*t960;
  t33149 = -0.1575*t33084*t951*t967;
  t33150 = -1.*t33084*t769*t805*t960;
  t33152 = t33084*t951*t967;
  t33153 = t33150 + t33152;
  t33156 = 0.2255*t33153;
  t33161 = -0.325*t33159*t26462;
  t33170 = 0.075*t26532*t33169;
  t33176 = 0.075*t33175*t26754;
  t33181 = t26475*t33169;
  t33182 = -1.*t33175*t26754;
  t33186 = t33181 + t33182;
  t33187 = 0.355*t33186;
  t33188 = t26475*t33175;
  t33196 = t33169*t26754;
  t33197 = t33188 + t33196;
  t33198 = -0.0641*t33197;
  t33200 = t33144 + t33145 + t33149 + t33156 + t33161 + t33170 + t33176 + t33187 + t33198;
  t33330 = t805*t33086*t951;
  t33333 = t769*t33086*t960*t967;
  t33335 = t33330 + t33333;
  t33388 = -1.*t769*t26947*t26746*t33086;
  t33389 = -1.*t33335*t26462;
  t33390 = t33388 + t33389;
  t33383 = t26746*t33335;
  t33384 = -1.*t769*t26947*t33086*t26462;
  t33386 = t33383 + t33384;
  t33405 = t769*t26947*t26746*t33086;
  t33406 = t33335*t26462;
  t33408 = t33405 + t33406;
  t33284 = -0.1575*t769*t33086*t967;
  t33290 = t769*t33086*t967;
  t33427 = -1.*t33086*t951*t960*t967;
  t33428 = t33300 + t33427;
  t33430 = -1.*t26947*t26746*t33086*t951;
  t33431 = t33428*t26462;
  t33432 = t33430 + t33431;
  t33434 = t26746*t33428;
  t33435 = t26947*t33086*t951*t26462;
  t33436 = t33434 + t33435;
  t33356 = -0.1575*t769*t26947*t27470*t33086;
  t33357 = -0.2255*t769*t26947*t805*t33086;
  t33358 = -0.325*t769*t27487*t33086*t960;
  t33359 = -0.325*t769*t26947*t33086*t967*t26462;
  t33363 = 0.075*t26532*t33362;
  t33367 = 0.075*t33366*t26754;
  t33368 = t26475*t33362;
  t33369 = -1.*t33366*t26754;
  t33370 = t33368 + t33369;
  t33372 = 0.355*t33370;
  t33373 = t26475*t33366;
  t33374 = t33362*t26754;
  t33376 = t33373 + t33374;
  t33377 = -0.0641*t33376;
  t33378 = t33356 + t33357 + t33358 + t33359 + t33363 + t33367 + t33372 + t33377;
  t33467 = t33084*t26947;
  t33468 = -1.*t33086*t951*t960;
  t33469 = t33467 + t33468;
  t33476 = t26746*t33469;
  t33477 = -1.*t33276*t967*t26462;
  t33478 = t33476 + t33477;
  t33466 = -1.*t26746*t33276*t967;
  t33470 = -1.*t33469*t26462;
  t33471 = t33466 + t33470;
  t33494 = -1.*t26746*t33469;
  t33495 = t33276*t967*t26462;
  t33496 = t33494 + t33495;
  t33118 = 0.1575*t27470*t33117;
  t33119 = 0.2255*t805*t33117;
  t33120 = 0.325*t27487*t33089;
  t33121 = 0.325*t33117*t967*t26462;
  t33126 = 0.075*t26532*t33125;
  t33130 = 0.075*t33129*t26754;
  t33132 = t26475*t33125;
  t33133 = -1.*t33129*t26754;
  t33134 = t33132 + t33133;
  t33135 = 0.355*t33134;
  t33136 = t26475*t33129;
  t33137 = t33125*t26754;
  t33138 = t33136 + t33137;
  t33139 = -0.0641*t33138;
  t33141 = t33118 + t33119 + t33120 + t33121 + t33126 + t33130 + t33135 + t33139;
  t33277 = 0.325*t27487*t33276;
  t33282 = 0.1575*t27470*t33281;
  t33530 = -1.*t33281*t967*t26462;
  t33532 = t33304 + t33530;
  t33535 = -1.*t26746*t33281*t967;
  t33536 = t33535 + t33309;
  t33450 = -0.068*t33276*t967;
  t33452 = 0.325*t805*t33276*t26462;
  t33453 = -0.075*t805*t26532*t33276*t26462;
  t33454 = -0.075*t805*t26746*t33276*t26754;
  t33455 = -1.*t805*t26475*t33276*t26462;
  t33456 = t805*t26746*t33276*t26754;
  t33457 = t33455 + t33456;
  t33458 = 0.355*t33457;
  t33459 = -1.*t805*t26746*t26475*t33276;
  t33460 = -1.*t805*t33276*t26462*t26754;
  t33461 = t33459 + t33460;
  t33462 = -0.0641*t33461;
  t33463 = t33450 + t33452 + t33453 + t33454 + t33458 + t33462;
  t33085 = 0.1575*t33084*t769*t805;
  t33090 = 0.1575*t33089*t967;
  t33096 = 0.2255*t33094;
  t33101 = -0.325*t33099*t26462;
  t33102 = 0.075*t26532*t33099*t26462;
  t33103 = 0.075*t26746*t33099*t26754;
  t33105 = t26475*t33099*t26462;
  t33106 = -1.*t26746*t33099*t26754;
  t33107 = t33105 + t33106;
  t33108 = 0.355*t33107;
  t33109 = t26746*t26475*t33099;
  t33110 = t33099*t26462*t26754;
  t33111 = t33109 + t33110;
  t33112 = -0.0641*t33111;
  t33113 = t33085 + t33090 + t33096 + t33101 + t33102 + t33103 + t33108 + t33112;
  t33569 = -1.*t805*t33469;
  t33570 = t33569 + t33290;
  t33327 = -0.1575*t805*t33086*t951;
  t33329 = -0.1575*t769*t33086*t960*t967;
  t33338 = 0.2255*t33335;
  t33342 = -0.325*t33341*t26462;
  t33343 = 0.075*t26532*t33341*t26462;
  t33344 = 0.075*t26746*t33341*t26754;
  t33345 = t26475*t33341*t26462;
  t33346 = -1.*t26746*t33341*t26754;
  t33347 = t33345 + t33346;
  t33348 = 0.355*t33347;
  t33350 = t26746*t26475*t33341;
  t33351 = t33341*t26462*t26754;
  t33352 = t33350 + t33351;
  t33353 = -0.0641*t33352;
  t33354 = t33327 + t33329 + t33338 + t33342 + t33343 + t33344 + t33348 + t33353;
  t33619 = t33469*t967;
  t33620 = t33300 + t33619;
  t33592 = -0.325*t26746*t33570;
  t33593 = 0.075*t26746*t26532*t33570;
  t33594 = -0.075*t33570*t26462*t26754;
  t33597 = -1.*t26475*t33570*t26462;
  t33603 = t26746*t33570*t26754;
  t33604 = t33597 + t33603;
  t33605 = -0.0641*t33604;
  t33606 = t26746*t26475*t33570;
  t33609 = t33570*t26462*t26754;
  t33610 = t33606 + t33609;
  t33611 = 0.355*t33610;
  t33613 = t33592 + t33593 + t33594 + t33605 + t33611;
  t33490 = 0.325*t26746*t33276*t967;
  t33491 = 0.325*t33469*t26462;
  t33492 = 0.075*t26532*t33471;
  t33499 = 0.075*t33496*t26754;
  t33503 = t26475*t33496;
  t33504 = t33471*t26754;
  t33508 = t33503 + t33504;
  t33509 = -0.0641*t33508;
  t33510 = t26475*t33471;
  t33512 = -1.*t33496*t26754;
  t33516 = t33510 + t33512;
  t33521 = 0.355*t33516;
  t33522 = t33490 + t33491 + t33492 + t33499 + t33509 + t33521;
  t33381 = -0.325*t26746*t33335;
  t33382 = 0.325*t769*t26947*t33086*t26462;
  t33387 = 0.075*t26532*t33386;
  t33391 = 0.075*t33390*t26754;
  t33392 = t26475*t33390;
  t33393 = t33386*t26754;
  t33394 = t33392 + t33393;
  t33395 = -0.0641*t33394;
  t33396 = t26475*t33386;
  t33397 = -1.*t33390*t26754;
  t33400 = t33396 + t33397;
  t33401 = 0.355*t33400;
  t33402 = t33381 + t33382 + t33387 + t33391 + t33395 + t33401;
  t33203 = -0.325*t26746*t33094;
  t33207 = 0.325*t33206*t26462;
  t33213 = 0.075*t26532*t33212;
  t33222 = 0.075*t33220*t26754;
  t33223 = t26475*t33220;
  t33227 = t33212*t26754;
  t33235 = t33223 + t33227;
  t33236 = -0.0641*t33235;
  t33237 = t26475*t33212;
  t33239 = -1.*t33220*t26754;
  t33240 = t33237 + t33239;
  t33241 = 0.355*t33240;
  t33243 = t33203 + t33207 + t33213 + t33222 + t33236 + t33241;
  t33651 = -1.*t769*t805*t33086;
  t33659 = -1.*t33469*t967;
  t33660 = t33651 + t33659;
  t33647 = t26947*t33086*t951;
  t33648 = t33084*t960;
  t33649 = t33647 + t33648;
  t33650 = -1.*t26746*t33649;
  t33661 = -1.*t33660*t26462;
  t33662 = t33650 + t33661;
  t33665 = t26746*t33660;
  t33666 = -1.*t33649*t26462;
  t33667 = t33665 + t33666;
  t33684 = -1.*t26746*t33660;
  t33685 = t33649*t26462;
  t33686 = t33684 + t33685;
  t33571 = 0.075*t26746*t26475*t33570;
  t33572 = 0.075*t33570*t26462*t26754;
  t33574 = t26475*t33570*t26462;
  t33575 = -1.*t26746*t33570*t26754;
  t33578 = t33574 + t33575;
  t33579 = -0.0641*t33578;
  t33583 = -1.*t26746*t26475*t33570;
  t33584 = -1.*t33570*t26462*t26754;
  t33585 = t33583 + t33584;
  t33586 = 0.355*t33585;
  t33589 = t33571 + t33572 + t33579 + t33586;
  t33475 = 0.075*t26475*t33471;
  t33479 = 0.075*t33478*t26754;
  t33480 = t26475*t33478;
  t33481 = -1.*t33471*t26754;
  t33482 = t33480 + t33481;
  t33483 = -0.0641*t33482;
  t33484 = -1.*t26475*t33471;
  t33485 = -1.*t33478*t26754;
  t33486 = t33484 + t33485;
  t33487 = 0.355*t33486;
  t33488 = t33475 + t33479 + t33483 + t33487;
  t33404 = 0.075*t26475*t33386;
  t33410 = 0.075*t33408*t26754;
  t33411 = t26475*t33408;
  t33412 = -1.*t33386*t26754;
  t33413 = t33411 + t33412;
  t33414 = -0.0641*t33413;
  t33415 = -1.*t26475*t33386;
  t33416 = -1.*t33408*t26754;
  t33417 = t33415 + t33416;
  t33418 = 0.355*t33417;
  t33419 = t33404 + t33410 + t33414 + t33418;
  t33245 = 0.075*t26475*t33212;
  t33249 = 0.075*t33248*t26754;
  t33250 = t26475*t33248;
  t33258 = -1.*t33212*t26754;
  t33262 = t33250 + t33258;
  t33265 = -0.0641*t33262;
  t33266 = -1.*t26475*t33212;
  t33269 = -1.*t33248*t26754;
  t33270 = t33266 + t33269;
  t33271 = 0.355*t33270;
  t33272 = t33245 + t33249 + t33265 + t33271;
  t33663 = 0.075*t26475*t33662;
  t33669 = 0.075*t33667*t26754;
  t33670 = -1.*t26475*t33662;
  t33671 = -1.*t33667*t26754;
  t33672 = t33670 + t33671;
  t33673 = 0.355*t33672;
  t33674 = t26475*t33667;
  t33675 = -1.*t33662*t26754;
  t33676 = t33674 + t33675;
  t33677 = -0.0641*t33676;
  t33678 = t33663 + t33669 + t33673 + t33677;
  t33706 = t26746*t33649;
  t33707 = t33660*t26462;
  t33712 = t33706 + t33707;
  t33688 = t26475*t33662;
  t33722 = t33667*t26754;
  t33726 = -1.*t26475*t33667;
  t33728 = -1.*t33712*t26754;
  t33729 = t33726 + t33728;
  t33789 = 0.1575*t769*t805*t33086;
  t33790 = 0.1575*t33469*t967;
  t33791 = 0.2255*t33660;
  t33793 = -0.325*t33570*t26462;
  t33795 = 0.075*t26532*t33570*t26462;
  t33798 = 0.075*t26746*t33570*t26754;
  t33799 = 0.355*t33578;
  t33800 = -0.0641*t33610;
  t33803 = t33789 + t33790 + t33791 + t33793 + t33795 + t33798 + t33799 + t33800;
  t33775 = 0.1575*t27470*t33276;
  t33777 = 0.2255*t805*t33276;
  t33778 = 0.325*t27487*t33469;
  t33779 = 0.325*t33276*t967*t26462;
  t33780 = 0.075*t26532*t33478;
  t33783 = 0.075*t33471*t26754;
  t33784 = 0.355*t33482;
  t33785 = t33478*t26754;
  t33786 = t33510 + t33785;
  t33787 = -0.0641*t33786;
  t33788 = t33775 + t33777 + t33778 + t33779 + t33780 + t33783 + t33784 + t33787;
  t33755 = 0.325*t769*t26947*t27487*t33086;
  t33757 = -0.1575*t769*t27470*t33086*t960;
  t33759 = -0.1575*t33086*t951*t967;
  t33760 = -1.*t769*t805*t33086*t960;
  t33761 = t33086*t951*t967;
  t33762 = t33760 + t33761;
  t33764 = 0.2255*t33762;
  t33765 = -0.325*t33335*t26462;
  t33767 = 0.075*t26532*t33408;
  t33768 = 0.075*t33386*t26754;
  t33769 = 0.355*t33413;
  t33770 = t33408*t26754;
  t33771 = t33396 + t33770;
  t33772 = -0.0641*t33771;
  t33774 = t33755 + t33757 + t33759 + t33764 + t33765 + t33767 + t33768 + t33769 + t33772;
  t33735 = 0.325*t27487*t33206;
  t33736 = 0.1575*t27470*t33089;
  t33737 = 0.1575*t33084*t769*t967;
  t33738 = t805*t33089;
  t33739 = -1.*t33084*t769*t967;
  t33740 = t33738 + t33739;
  t33742 = 0.2255*t33740;
  t33744 = -0.325*t33094*t26462;
  t33746 = 0.075*t26532*t33248;
  t33747 = 0.075*t33212*t26754;
  t33748 = 0.355*t33262;
  t33750 = t33248*t26754;
  t33752 = t33237 + t33750;
  t33753 = -0.0641*t33752;
  t33754 = t33735 + t33736 + t33737 + t33742 + t33744 + t33746 + t33747 + t33748 + t33753;
  t33804 = -0.325*t26746*t33660;
  t33805 = 0.325*t33649*t26462;
  t33806 = 0.075*t26532*t33667;
  t33807 = 0.075*t33662*t26754;
  t33808 = t33688 + t33722;
  t33809 = -0.0641*t33808;
  t33810 = 0.355*t33676;
  t33812 = t33804 + t33805 + t33806 + t33807 + t33809 + t33810;
  t33813 = 0.075*t26475*t33667;
  t33814 = 0.075*t33712*t26754;
  t33816 = t26475*t33712;
  t33817 = t33816 + t33671;
  t33818 = -0.0641*t33817;
  t33819 = 0.355*t33729;
  t33820 = t33813 + t33814 + t33818 + t33819;
  t33852 = t33084*t769*t26746*t960;
  t33853 = -1.*t33084*t769*t26947*t967*t26462;
  t33854 = t33852 + t33853;
  t33856 = -1.*t33084*t769*t26947*t26746*t967;
  t33858 = -1.*t33084*t769*t960*t26462;
  t33859 = t33856 + t33858;
  t33830 = -1.*t33084*t805*t951;
  t33831 = -1.*t33084*t769*t960*t967;
  t33832 = t33830 + t33831;
  t33880 = -1.*t33832*t26462;
  t33881 = t33163 + t33880;
  t33876 = t26746*t33832;
  t33877 = t33084*t769*t26947*t26462;
  t33878 = t33876 + t33877;
  t33898 = -1.*t33084*t769*t26947*t26746;
  t33899 = t33832*t26462;
  t33900 = t33898 + t33899;
  t33931 = t33084*t951*t960*t967;
  t33932 = t33092 + t33931;
  t33934 = t33084*t26947*t26746*t951;
  t33936 = t33932*t26462;
  t33937 = t33934 + t33936;
  t33939 = t26746*t33932;
  t33940 = -1.*t33084*t26947*t951*t26462;
  t33941 = t33939 + t33940;
  t33847 = 0.1575*t33084*t769*t26947*t27470;
  t33848 = 0.2255*t33084*t769*t26947*t805;
  t33849 = 0.325*t33084*t769*t27487*t960;
  t33851 = 0.325*t33084*t769*t26947*t967*t26462;
  t33855 = 0.075*t26532*t33854;
  t33860 = 0.075*t33859*t26754;
  t33861 = t26475*t33854;
  t33862 = -1.*t33859*t26754;
  t33864 = t33861 + t33862;
  t33865 = 0.355*t33864;
  t33866 = t26475*t33859;
  t33867 = t33854*t26754;
  t33868 = t33866 + t33867;
  t33869 = -0.0641*t33868;
  t33870 = t33847 + t33848 + t33849 + t33851 + t33855 + t33860 + t33865 + t33869;
  t33978 = t26947*t33086;
  t33979 = t33084*t951*t960;
  t33981 = t33978 + t33979;
  t33985 = t26746*t33981;
  t33986 = -1.*t33206*t967*t26462;
  t33987 = t33985 + t33986;
  t33977 = -1.*t26746*t33206*t967;
  t33982 = -1.*t33981*t26462;
  t33983 = t33977 + t33982;
  t34008 = -1.*t26746*t33981;
  t34010 = t33206*t967*t26462;
  t34011 = t34008 + t34010;
  t34026 = -1.*t33089*t967*t26462;
  t34028 = t33246 + t34026;
  t34031 = -1.*t26746*t33089*t967;
  t34032 = t34031 + t33210;
  t33956 = -0.068*t33206*t967;
  t33957 = 0.325*t805*t33206*t26462;
  t33958 = -0.075*t805*t26532*t33206*t26462;
  t33959 = -0.075*t805*t26746*t33206*t26754;
  t33961 = -1.*t805*t26475*t33206*t26462;
  t33963 = t805*t26746*t33206*t26754;
  t33964 = t33961 + t33963;
  t33965 = 0.355*t33964;
  t33966 = -1.*t805*t26746*t26475*t33206;
  t33967 = -1.*t805*t33206*t26462*t26754;
  t33968 = t33966 + t33967;
  t33970 = -0.0641*t33968;
  t33971 = t33956 + t33957 + t33958 + t33959 + t33965 + t33970;
  t34052 = -1.*t805*t33981;
  t34053 = t34052 + t33739;
  t33828 = 0.1575*t33084*t805*t951;
  t33829 = 0.1575*t33084*t769*t960*t967;
  t33833 = 0.2255*t33832;
  t33834 = -0.325*t33153*t26462;
  t33835 = 0.075*t26532*t33153*t26462;
  t33836 = 0.075*t26746*t33153*t26754;
  t33837 = t26475*t33153*t26462;
  t33838 = -1.*t26746*t33153*t26754;
  t33839 = t33837 + t33838;
  t33840 = 0.355*t33839;
  t33841 = t26746*t26475*t33153;
  t33842 = t33153*t26462*t26754;
  t33843 = t33841 + t33842;
  t33844 = -0.0641*t33843;
  t33845 = t33828 + t33829 + t33833 + t33834 + t33835 + t33836 + t33840 + t33844;
  t34094 = t33981*t967;
  t34095 = t33092 + t34094;
  t34067 = -0.325*t26746*t34053;
  t34070 = 0.075*t26746*t26532*t34053;
  t34071 = -0.075*t34053*t26462*t26754;
  t34073 = -1.*t26475*t34053*t26462;
  t34077 = t26746*t34053*t26754;
  t34079 = t34073 + t34077;
  t34081 = -0.0641*t34079;
  t34082 = t26746*t26475*t34053;
  t34083 = t34053*t26462*t26754;
  t34084 = t34082 + t34083;
  t34086 = 0.355*t34084;
  t34087 = t34067 + t34070 + t34071 + t34081 + t34086;
  t34003 = 0.325*t26746*t33206*t967;
  t34004 = 0.325*t33981*t26462;
  t34006 = 0.075*t26532*t33983;
  t34012 = 0.075*t34011*t26754;
  t34013 = t26475*t34011;
  t34014 = t33983*t26754;
  t34015 = t34013 + t34014;
  t34016 = -0.0641*t34015;
  t34017 = t26475*t33983;
  t34018 = -1.*t34011*t26754;
  t34019 = t34017 + t34018;
  t34021 = 0.355*t34019;
  t34022 = t34003 + t34004 + t34006 + t34012 + t34016 + t34021;
  t33874 = -0.325*t26746*t33832;
  t33875 = -0.325*t33084*t769*t26947*t26462;
  t33879 = 0.075*t26532*t33878;
  t33882 = 0.075*t33881*t26754;
  t33884 = t26475*t33881;
  t33885 = t33878*t26754;
  t33886 = t33884 + t33885;
  t33888 = -0.0641*t33886;
  t33889 = t26475*t33878;
  t33890 = -1.*t33881*t26754;
  t33892 = t33889 + t33890;
  t33893 = 0.355*t33892;
  t33894 = t33874 + t33875 + t33879 + t33882 + t33888 + t33893;
  t34118 = t33084*t769*t805;
  t34119 = -1.*t33981*t967;
  t34120 = t34118 + t34119;
  t34117 = -1.*t26746*t33117;
  t34121 = -1.*t34120*t26462;
  t34122 = t34117 + t34121;
  t34124 = t26746*t34120;
  t34125 = -1.*t33117*t26462;
  t34126 = t34124 + t34125;
  t34143 = -1.*t26746*t34120;
  t34144 = t33117*t26462;
  t34145 = t34143 + t34144;
  t34054 = 0.075*t26746*t26475*t34053;
  t34055 = 0.075*t34053*t26462*t26754;
  t34056 = t26475*t34053*t26462;
  t34057 = -1.*t26746*t34053*t26754;
  t34059 = t34056 + t34057;
  t34060 = -0.0641*t34059;
  t34061 = -1.*t26746*t26475*t34053;
  t34062 = -1.*t34053*t26462*t26754;
  t34063 = t34061 + t34062;
  t34064 = 0.355*t34063;
  t34065 = t34054 + t34055 + t34060 + t34064;
  t33984 = 0.075*t26475*t33983;
  t33988 = 0.075*t33987*t26754;
  t33989 = t26475*t33987;
  t33991 = -1.*t33983*t26754;
  t33993 = t33989 + t33991;
  t33994 = -0.0641*t33993;
  t33995 = -1.*t26475*t33983;
  t33996 = -1.*t33987*t26754;
  t33998 = t33995 + t33996;
  t34000 = 0.355*t33998;
  t34001 = t33984 + t33988 + t33994 + t34000;
  t33897 = 0.075*t26475*t33878;
  t33902 = 0.075*t33900*t26754;
  t33904 = t26475*t33900;
  t33906 = -1.*t33878*t26754;
  t33911 = t33904 + t33906;
  t33914 = -0.0641*t33911;
  t33915 = -1.*t26475*t33878;
  t33916 = -1.*t33900*t26754;
  t33918 = t33915 + t33916;
  t33920 = 0.355*t33918;
  t33921 = t33897 + t33902 + t33914 + t33920;
  t34123 = 0.075*t26475*t34122;
  t34127 = 0.075*t34126*t26754;
  t34128 = -1.*t26475*t34122;
  t34130 = -1.*t34126*t26754;
  t34131 = t34128 + t34130;
  t34132 = 0.355*t34131;
  t34133 = t26475*t34126;
  t34134 = -1.*t34122*t26754;
  t34135 = t34133 + t34134;
  t34137 = -0.0641*t34135;
  t34138 = t34123 + t34127 + t34132 + t34137;
  t34166 = t26746*t33117;
  t34167 = t34120*t26462;
  t34168 = t34166 + t34167;
  t34147 = t26475*t34122;
  t34172 = t34126*t26754;
  t34175 = -1.*t26475*t34126;
  t34176 = -1.*t34168*t26754;
  t34177 = t34175 + t34176;
  p_output1[0]=(t30087 + t30127 + t30186 + t30463 + t30484 + 0.075*t26532*t30492 + 0.075*t26754*t30506 - 0.0641*(t26754*t30492 + t26475*t30506) + 0.355*(t26475*t30492 - 1.*t26754*t30506))*var2[4] + t30083*var2[5] + t26923*var2[6] + t31078*var2[7] + t31402*var2[8];
  p_output1[1]=t30083*var2[4] + (t30087 + t30127 + 0.075*t26532*t32192 + 0.075*t26754*t32203 - 0.0641*(t26754*t32192 + t26475*t32203) + 0.355*(t26475*t32192 - 1.*t26754*t32203) + 0.2255*t769*t805*t960 + 0.325*t26462*t769*t960*t967)*var2[5] + t31582*var2[6] + t31745*var2[7] + t32050*var2[8];
  p_output1[2]=t26923*var2[4] + t31582*var2[5] + (t30186 + t30463 + 0.075*t26462*t26532*t30483 + 0.075*t26746*t26754*t30483 - 0.0641*(t26475*t26746*t30483 + t26462*t26754*t30483) + 0.355*(t26462*t26475*t30483 - 1.*t26746*t26754*t30483) + t30484 - 0.1575*t769*t805*t960)*var2[6] + t32714*var2[7] + t32495*var2[8];
  p_output1[3]=t31078*var2[4] + t31745*var2[5] + t32714*var2[6] + (0.325*t26462*t32803 + 0.075*t26532*t32811 + 0.075*t26754*t32931 - 0.0641*(t26754*t32811 + t26475*t32931) + 0.355*(-1.*t26754*t32931 + t32933) + 0.325*t26746*t26947*t769)*var2[7] + t32904*var2[8];
  p_output1[4]=t31402*var2[4] + t32050*var2[5] + t32495*var2[6] + t32904*var2[7] + (-0.075*t26754*t32860 + 0.075*t26475*t32981 + 0.355*(-1.*t26475*t32981 + t33001) - 0.0641*t33013)*var2[8];
  p_output1[5]=1.;
  p_output1[6]=-0.325*t18560*t26462 + 0.075*t26754*t30742 + 0.075*t26532*t31204 - 0.0641*(t31058 + t26754*t31204) + 0.355*t31215 - 0.325*t26947*t27487*t951 + 0.1575*t27470*t951*t960 - 0.1575*t769*t967 + 0.2255*(t805*t951*t960 + t769*t967);
  p_output1[7]=0.075*t26754*t31595 + 0.075*t26532*t31776 - 0.0641*(t31720 + t26754*t31776) + 0.355*t31843 - 0.1575*t26947*t27470*t769 - 0.2255*t26947*t769*t805 - 0.325*t27487*t769*t960 - 0.325*t26462*t26947*t769*t967;
  p_output1[8]=-0.325*t26462*t30457 + 0.075*t26462*t26532*t30457 + 0.075*t26746*t26754*t30457 + 0.355*t32453 - 0.0641*t32657 + 0.2255*t32803 - 0.1575*t805*t951 - 0.1575*t769*t960*t967;
  p_output1[9]=-0.325*t26746*t32803 + 0.075*t26754*t32811 + 0.075*t26532*t32860 + 0.355*t32902 - 0.0641*(t32933 + t33001) + 0.325*t26462*t26947*t769;
  p_output1[10]=0.075*t26475*t32860 + 0.075*t26754*t32981 - 0.0641*(t32894 + t26475*t32981) + 0.355*t33013;
  p_output1[11]=(t33277 + t33282 + t33284 - 0.325*t26462*t33302 + 0.075*t26532*t33306 + 0.075*t26754*t33310 - 0.0641*(t26754*t33306 + t26475*t33310) + 0.355*(t26475*t33306 - 1.*t26754*t33310) + 0.2255*(t33290 + t33281*t805))*var2[3] + t33200*var2[4] + t33141*var2[5] + t33113*var2[6] + t33243*var2[7] + t33272*var2[8];
  p_output1[12]=t33200*var2[3] + (t33284 - 0.325*t26462*t33428 + 0.075*t26532*t33432 + 0.075*t26754*t33436 - 0.0641*(t26754*t33432 + t26475*t33436) + 0.355*(t26475*t33432 - 1.*t26754*t33436) - 0.325*t26947*t27487*t33086*t951 + 0.1575*t27470*t33086*t951*t960 + 0.2255*(t33290 + t33086*t805*t951*t960))*var2[4] + t33378*var2[5] + t33354*var2[6] + t33402*var2[7] + t33419*var2[8];
  p_output1[13]=t33141*var2[3] + t33378*var2[4] + (t33277 + t33282 + 0.075*t26532*t33532 + 0.075*t26754*t33536 - 0.0641*(t26754*t33532 + t26475*t33536) + 0.355*(t26475*t33532 - 1.*t26754*t33536) + 0.2255*t33281*t805 + 0.325*t26462*t33281*t967)*var2[5] + t33463*var2[6] + t33522*var2[7] + t33488*var2[8];
  p_output1[14]=t33113*var2[3] + t33354*var2[4] + t33463*var2[5] + (t33284 + 0.2255*t33570 - 0.325*t26462*t33620 + 0.075*t26462*t26532*t33620 + 0.075*t26746*t26754*t33620 - 0.0641*(t26475*t26746*t33620 + t26462*t26754*t33620) + 0.355*(t26462*t26475*t33620 - 1.*t26746*t26754*t33620) + 0.1575*t33469*t805)*var2[6] + t33613*var2[7] + t33589*var2[8];
  p_output1[15]=t33243*var2[3] + t33402*var2[4] + t33522*var2[5] + t33613*var2[6] + (0.325*t26746*t33649 + 0.325*t26462*t33660 + 0.075*t26532*t33662 + 0.075*t26754*t33686 - 0.0641*(t26754*t33662 + t26475*t33686) + 0.355*(-1.*t26754*t33686 + t33688))*var2[7] + t33678*var2[8];
  p_output1[16]=t33272*var2[3] + t33419*var2[4] + t33488*var2[5] + t33589*var2[6] + t33678*var2[7] + (-0.075*t26754*t33667 + 0.075*t26475*t33712 + 0.355*(-1.*t26475*t33712 + t33722) - 0.0641*t33729)*var2[8];
  p_output1[17]=1.;
  p_output1[18]=t33754;
  p_output1[19]=t33774;
  p_output1[20]=t33788;
  p_output1[21]=t33803;
  p_output1[22]=t33812;
  p_output1[23]=t33820;
  p_output1[24]=t33754*var2[3] + t33774*var2[4] + t33788*var2[5] + t33803*var2[6] + t33812*var2[7] + t33820*var2[8];
  p_output1[25]=t33774*var2[3] + (t33737 - 0.325*t26462*t33932 + 0.075*t26532*t33937 + 0.075*t26754*t33941 - 0.0641*(t26754*t33937 + t26475*t33941) + 0.355*(t26475*t33937 - 1.*t26754*t33941) + 0.325*t26947*t27487*t33084*t951 - 0.1575*t27470*t33084*t951*t960 + 0.2255*(t33739 - 1.*t33084*t805*t951*t960))*var2[4] + t33870*var2[5] + t33845*var2[6] + t33894*var2[7] + t33921*var2[8];
  p_output1[26]=t33788*var2[3] + t33870*var2[4] + (t33735 + t33736 + 0.075*t26532*t34028 + 0.075*t26754*t34032 - 0.0641*(t26754*t34028 + t26475*t34032) + 0.355*(t26475*t34028 - 1.*t26754*t34032) + 0.2255*t33089*t805 + 0.325*t26462*t33089*t967)*var2[5] + t33971*var2[6] + t34022*var2[7] + t34001*var2[8];
  p_output1[27]=t33803*var2[3] + t33845*var2[4] + t33971*var2[5] + (t33737 + 0.2255*t34053 - 0.325*t26462*t34095 + 0.075*t26462*t26532*t34095 + 0.075*t26746*t26754*t34095 - 0.0641*(t26475*t26746*t34095 + t26462*t26754*t34095) + 0.355*(t26462*t26475*t34095 - 1.*t26746*t26754*t34095) + 0.1575*t33981*t805)*var2[6] + t34087*var2[7] + t34065*var2[8];
  p_output1[28]=t33812*var2[3] + t33894*var2[4] + t34022*var2[5] + t34087*var2[6] + (0.325*t26746*t33117 + 0.325*t26462*t34120 + 0.075*t26532*t34122 + 0.075*t26754*t34145 - 0.0641*(t26754*t34122 + t26475*t34145) + 0.355*(-1.*t26754*t34145 + t34147))*var2[7] + t34138*var2[8];
  p_output1[29]=t33820*var2[3] + t33921*var2[4] + t34001*var2[5] + t34065*var2[6] + t34138*var2[7] + (-0.075*t26754*t34126 + 0.075*t26475*t34168 + 0.355*(-1.*t26475*t34168 + t34172) - 0.0641*t34177)*var2[8];
  p_output1[30]=1.;
  p_output1[31]=0.1575*t27470*t33469 + 0.325*t27487*t33649 - 0.325*t26462*t33660 + t33669 + 0.075*t26532*t33712 - 0.0641*(t33674 + t26754*t33712) + 0.355*t33817 + 0.1575*t33086*t769*t967 + 0.2255*(t33469*t805 - 1.*t33086*t769*t967);
  p_output1[32]=-0.325*t26462*t33832 + 0.075*t26754*t33878 + 0.075*t26532*t33900 - 0.0641*(t33889 + t26754*t33900) + 0.355*t33911 - 0.325*t26947*t27487*t33084*t769 + 0.1575*t27470*t33084*t769*t960 + 0.1575*t33084*t951*t967 + 0.2255*(t33084*t769*t805*t960 - 1.*t33084*t951*t967);
  p_output1[33]=0.1575*t27470*t33206 + 0.325*t27487*t33981 + 0.075*t26754*t33983 + 0.075*t26532*t33987 + 0.355*t33993 - 0.0641*(t26754*t33987 + t34017) + 0.2255*t33206*t805 + 0.325*t26462*t33206*t967;
  p_output1[34]=-0.325*t26462*t34053 + 0.075*t26462*t26532*t34053 + 0.075*t26746*t26754*t34053 + 0.355*t34059 - 0.0641*t34084 + 0.2255*t34120 - 0.1575*t33084*t769*t805 + 0.1575*t33981*t967;
  p_output1[35]=0.325*t26462*t33117 - 0.325*t26746*t34120 + 0.075*t26754*t34122 + 0.075*t26532*t34126 + 0.355*t34135 - 0.0641*(t34147 + t34172);
  p_output1[36]=0.075*t26475*t34126 + 0.075*t26754*t34168 - 0.0641*(t34130 + t26475*t34168) + 0.355*t34177;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 37, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_impact_velocity_FlFoot_ParallelStance.hh"

namespace ParallelStance
{

void J_impact_velocity_FlFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
