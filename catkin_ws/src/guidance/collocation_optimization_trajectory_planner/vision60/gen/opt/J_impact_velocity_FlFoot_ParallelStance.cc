/*
 * Automatically Generated from Mathematica.
 * Tue 7 Jun 2022 14:08:18 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t13001;
  double t13550;
  double t19251;
  double t19398;
  double t19406;
  double t19725;
  double t19728;
  double t19739;
  double t19754;
  double t20051;
  double t20202;
  double t20205;
  double t20362;
  double t20094;
  double t20114;
  double t20444;
  double t20445;
  double t20454;
  double t20464;
  double t20484;
  double t20545;
  double t20407;
  double t20408;
  double t20382;
  double t20383;
  double t20987;
  double t21000;
  double t21006;
  double t21016;
  double t21025;
  double t21026;
  double t21045;
  double t21052;
  double t21108;
  double t19429;
  double t19693;
  double t19718;
  double t21541;
  double t21545;
  double t21604;
  double t21407;
  double t21415;
  double t21443;
  double t21794;
  double t21819;
  double t21901;
  double t23374;
  double t23399;
  double t23494;
  double t23262;
  double t23263;
  double t23274;
  double t23852;
  double t23853;
  double t23854;
  double t20393;
  double t20403;
  double t20413;
  double t20443;
  double t20455;
  double t20553;
  double t20590;
  double t20630;
  double t20633;
  double t20638;
  double t20643;
  double t20657;
  double t20678;
  double t20688;
  double t20699;
  double t20916;
  double t20918;
  double t23907;
  double t23912;
  double t23921;
  double t23924;
  double t22208;
  double t22209;
  double t22237;
  double t22242;
  double t22311;
  double t22314;
  double t22344;
  double t22430;
  double t22900;
  double t23227;
  double t23245;
  double t23252;
  double t23256;
  double t18826;
  double t19416;
  double t19724;
  double t20003;
  double t20171;
  double t20206;
  double t20214;
  double t20228;
  double t20254;
  double t20260;
  double t20261;
  double t20262;
  double t20298;
  double t20306;
  double t20318;
  double t20931;
  double t20941;
  double t20962;
  double t20925;
  double t20970;
  double t21012;
  double t24563;
  double t24581;
  double t24599;
  double t24606;
  double t24616;
  double t24636;
  double t24658;
  double t24681;
  double t24698;
  double t24716;
  double t24739;
  double t24761;
  double t23260;
  double t23261;
  double t23307;
  double t23628;
  double t23629;
  double t23638;
  double t23820;
  double t23832;
  double t23833;
  double t23834;
  double t23836;
  double t23838;
  double t23840;
  double t25229;
  double t25305;
  double t25412;
  double t25420;
  double t25443;
  double t25447;
  double t25448;
  double t25454;
  double t25517;
  double t25519;
  double t21399;
  double t21403;
  double t21510;
  double t21644;
  double t21653;
  double t21664;
  double t21674;
  double t21696;
  double t21722;
  double t21738;
  double t21742;
  double t21747;
  double t21748;
  double t23968;
  double t23969;
  double t23970;
  double t23975;
  double t23981;
  double t24008;
  double t24014;
  double t24021;
  double t24025;
  double t24030;
  double t24066;
  double t23843;
  double t23855;
  double t23859;
  double t23863;
  double t23870;
  double t23871;
  double t23873;
  double t23874;
  double t23875;
  double t23880;
  double t23885;
  double t25444;
  double t25455;
  double t25463;
  double t25473;
  double t25474;
  double t25475;
  double t25476;
  double t25477;
  double t25491;
  double t25492;
  double t25496;
  double t25661;
  double t25662;
  double t25664;
  double t21774;
  double t21971;
  double t22003;
  double t22028;
  double t22083;
  double t22113;
  double t22139;
  double t22156;
  double t22176;
  double t22179;
  double t22180;
  double t25521;
  double t25668;
  double t25676;
  double t25679;
  double t25680;
  double t25924;
  double t25933;
  double t25935;
  double t25946;
  double t25948;
  double t25962;
  double t25963;
  double t25971;
  double t25990;
  double t25995;
  double t25996;
  double t26008;
  double t26009;
  double t26012;
  double t26014;
  double t26015;
  double t26016;
  double t26045;
  double t26046;
  double t26047;
  double t26054;
  double t26137;
  double t26154;
  double t26265;
  double t26266;
  double t26267;
  double t25950;
  double t25959;
  double t25960;
  double t26295;
  double t26296;
  double t26300;
  double t26318;
  double t26319;
  double t26329;
  double t26308;
  double t26310;
  double t26315;
  double t26365;
  double t26368;
  double t26369;
  double t26397;
  double t26398;
  double t26399;
  double t26393;
  double t26394;
  double t26395;
  double t26534;
  double t26535;
  double t26537;
  double t26539;
  double t26540;
  double t26541;
  double t26543;
  double t26544;
  double t26548;
  double t26590;
  double t26591;
  double t26592;
  double t26625;
  double t26626;
  double t26627;
  double t26629;
  double t26630;
  double t26631;
  double t26036;
  double t26039;
  double t26040;
  double t26041;
  double t26042;
  double t26043;
  double t26044;
  double t26048;
  double t26155;
  double t26271;
  double t26276;
  double t26278;
  double t26282;
  double t26286;
  double t26287;
  double t26289;
  double t26290;
  double t26291;
  double t26292;
  double t26579;
  double t26581;
  double t26584;
  double t26652;
  double t26656;
  double t26657;
  double t26646;
  double t26647;
  double t26648;
  double t26678;
  double t26679;
  double t26680;
  double t26512;
  double t26522;
  double t26708;
  double t26712;
  double t26726;
  double t26731;
  double t26734;
  double t26736;
  double t26740;
  double t26741;
  double t26615;
  double t26619;
  double t26623;
  double t26624;
  double t26628;
  double t26632;
  double t26633;
  double t26634;
  double t26635;
  double t26636;
  double t26637;
  double t26638;
  double t26639;
  double t26640;
  double t26641;
  double t26792;
  double t26796;
  double t26800;
  double t26804;
  double t26805;
  double t26806;
  double t26790;
  double t26801;
  double t26802;
  double t27018;
  double t27020;
  double t27021;
  double t25998;
  double t25999;
  double t26000;
  double t26005;
  double t26013;
  double t26017;
  double t26021;
  double t26022;
  double t26026;
  double t26027;
  double t26028;
  double t26031;
  double t26032;
  double t26033;
  double t26034;
  double t26396;
  double t26511;
  double t27036;
  double t27037;
  double t27039;
  double t27040;
  double t26770;
  double t26771;
  double t26772;
  double t26773;
  double t26774;
  double t26775;
  double t26776;
  double t26777;
  double t26778;
  double t26780;
  double t26782;
  double t26783;
  double t26784;
  double t25926;
  double t25949;
  double t25961;
  double t25973;
  double t25974;
  double t25975;
  double t25976;
  double t25979;
  double t25980;
  double t25983;
  double t25984;
  double t25985;
  double t25986;
  double t25987;
  double t25988;
  double t27070;
  double t27074;
  double t26577;
  double t26578;
  double t26585;
  double t26593;
  double t26594;
  double t26595;
  double t26596;
  double t26600;
  double t26605;
  double t26606;
  double t26607;
  double t26610;
  double t26611;
  double t26612;
  double t26613;
  double t27213;
  double t27214;
  double t27128;
  double t27135;
  double t27144;
  double t27191;
  double t27192;
  double t27193;
  double t27194;
  double t27195;
  double t27198;
  double t27201;
  double t27202;
  double t27204;
  double t26989;
  double t26991;
  double t26994;
  double t27022;
  double t27023;
  double t27024;
  double t27025;
  double t27026;
  double t27027;
  double t27028;
  double t27029;
  double t27030;
  double t27031;
  double t26644;
  double t26645;
  double t26649;
  double t26662;
  double t26663;
  double t26664;
  double t26665;
  double t26668;
  double t26669;
  double t26670;
  double t26671;
  double t26673;
  double t26674;
  double t26294;
  double t26302;
  double t26317;
  double t26331;
  double t26334;
  double t26336;
  double t26337;
  double t26338;
  double t26339;
  double t26340;
  double t26351;
  double t26352;
  double t26360;
  double t27244;
  double t27245;
  double t27246;
  double t27239;
  double t27240;
  double t27241;
  double t27242;
  double t27247;
  double t27248;
  double t27250;
  double t27251;
  double t27252;
  double t27409;
  double t27411;
  double t27416;
  double t27087;
  double t27089;
  double t27090;
  double t27091;
  double t27092;
  double t27093;
  double t27094;
  double t27095;
  double t27096;
  double t27102;
  double t27111;
  double t26803;
  double t26807;
  double t26808;
  double t26812;
  double t26816;
  double t26827;
  double t26864;
  double t26871;
  double t26933;
  double t26972;
  double t26979;
  double t26677;
  double t26682;
  double t26684;
  double t26685;
  double t26686;
  double t26687;
  double t26688;
  double t26689;
  double t26690;
  double t26693;
  double t26695;
  double t26362;
  double t26370;
  double t26371;
  double t26372;
  double t26377;
  double t26381;
  double t26385;
  double t26386;
  double t26387;
  double t26388;
  double t26389;
  double t27249;
  double t27253;
  double t27254;
  double t27255;
  double t27311;
  double t27331;
  double t27336;
  double t27346;
  double t27369;
  double t27384;
  double t27385;
  double t27466;
  double t27468;
  double t27469;
  double t27425;
  double t27476;
  double t27480;
  double t27481;
  double t27482;
  double t27546;
  double t27547;
  double t27548;
  double t27549;
  double t27550;
  double t27659;
  double t27832;
  double t27874;
  double t27884;
  double t27525;
  double t27529;
  double t27531;
  double t27532;
  double t27533;
  double t27535;
  double t27536;
  double t27537;
  double t27541;
  double t27544;
  double t27545;
  double t27509;
  double t27510;
  double t27511;
  double t27512;
  double t27513;
  double t27514;
  double t27515;
  double t27516;
  double t27517;
  double t27518;
  double t27519;
  double t27520;
  double t27521;
  double t27523;
  double t27524;
  double t27487;
  double t27488;
  double t27489;
  double t27490;
  double t27491;
  double t27492;
  double t27495;
  double t27496;
  double t27498;
  double t27500;
  double t27501;
  double t27502;
  double t27503;
  double t27505;
  double t27506;
  double t27895;
  double t27930;
  double t27935;
  double t27939;
  double t27946;
  double t27955;
  double t27962;
  double t27969;
  double t27971;
  double t27972;
  double t27973;
  double t27979;
  double t27980;
  double t27985;
  double t27986;
  double t28057;
  double t28058;
  double t28059;
  double t28066;
  double t28067;
  double t28068;
  double t28012;
  double t28018;
  double t28019;
  double t28099;
  double t28100;
  double t28095;
  double t28096;
  double t28097;
  double t28844;
  double t28852;
  double t28853;
  double t28918;
  double t28919;
  double t28922;
  double t28924;
  double t28925;
  double t28928;
  double t28930;
  double t28931;
  double t28047;
  double t28051;
  double t28052;
  double t28053;
  double t28062;
  double t28069;
  double t28070;
  double t28074;
  double t28075;
  double t28077;
  double t28078;
  double t28079;
  double t28083;
  double t28086;
  double t28087;
  double t29009;
  double t29017;
  double t29021;
  double t29064;
  double t29176;
  double t29178;
  double t29003;
  double t29026;
  double t29030;
  double t29491;
  double t29505;
  double t29507;
  double t29548;
  double t29549;
  double t29553;
  double t29554;
  double t28948;
  double t28949;
  double t28951;
  double t28953;
  double t28954;
  double t28958;
  double t28963;
  double t28965;
  double t28967;
  double t28971;
  double t28977;
  double t28982;
  double t28985;
  double t29634;
  double t29636;
  double t28004;
  double t28005;
  double t28020;
  double t28025;
  double t28026;
  double t28027;
  double t28030;
  double t28031;
  double t28035;
  double t28036;
  double t28037;
  double t28038;
  double t28041;
  double t28042;
  double t28045;
  double t29734;
  double t29737;
  double t29672;
  double t29673;
  double t29674;
  double t29676;
  double t29678;
  double t29679;
  double t29682;
  double t29683;
  double t29686;
  double t29687;
  double t29689;
  double t29691;
  double t29444;
  double t29459;
  double t29464;
  double t29512;
  double t29516;
  double t29518;
  double t29522;
  double t29523;
  double t29531;
  double t29532;
  double t29535;
  double t29537;
  double t29539;
  double t28090;
  double t28094;
  double t28098;
  double t28101;
  double t28153;
  double t28262;
  double t28719;
  double t28720;
  double t28721;
  double t28779;
  double t28811;
  double t28822;
  double t28824;
  double t30080;
  double t30081;
  double t30086;
  double t30078;
  double t30087;
  double t30089;
  double t30115;
  double t30125;
  double t30130;
  double t30247;
  double t30254;
  double t30259;
  double t29637;
  double t29646;
  double t29648;
  double t29649;
  double t29651;
  double t29660;
  double t29661;
  double t29663;
  double t29664;
  double t29667;
  double t29668;
  double t29055;
  double t29238;
  double t29254;
  double t29259;
  double t29260;
  double t29263;
  double t29311;
  double t29343;
  double t29354;
  double t29355;
  double t29356;
  double t28842;
  double t28854;
  double t28858;
  double t28859;
  double t28860;
  double t28861;
  double t28862;
  double t28863;
  double t28864;
  double t28869;
  double t28873;
  double t30110;
  double t30133;
  double t30135;
  double t30138;
  double t30139;
  double t30143;
  double t30145;
  double t30146;
  double t30147;
  double t30149;
  double t30152;
  double t30349;
  double t30355;
  double t30356;
  double t30289;
  double t30437;
  double t30440;
  double t30441;
  double t30442;
  t13001 = Cos(var1[4]);
  t13550 = Cos(var1[6]);
  t19251 = Sin(var1[4]);
  t19398 = Sin(var1[5]);
  t19406 = Sin(var1[6]);
  t19725 = -1.*t13550*t19251*t19398;
  t19728 = -1.*t13001*t19406;
  t19739 = t19725 + t19728;
  t19754 = Sin(var1[7]);
  t20051 = Cos(var1[8]);
  t20202 = Cos(var1[7]);
  t20205 = Sin(var1[8]);
  t20362 = Cos(var1[5]);
  t20094 = -1.*t20051;
  t20114 = 1. + t20094;
  t20444 = t20202*t19251*t19398;
  t20445 = -1.*t20362*t19251*t19406*t19754;
  t20454 = t20444 + t20445;
  t20464 = -1.*t20362*t20202*t19251*t19406;
  t20484 = -1.*t19251*t19398*t19754;
  t20545 = t20464 + t20484;
  t20407 = -1.*t20202;
  t20408 = 1. + t20407;
  t20382 = -1.*t13550;
  t20383 = 1. + t20382;
  t20987 = -1.*t13550*t19251;
  t21000 = -1.*t13001*t19398*t19406;
  t21006 = t20987 + t21000;
  t21016 = -1.*t13001*t20362*t20202;
  t21025 = t21006*t19754;
  t21026 = t21016 + t21025;
  t21045 = t20202*t21006;
  t21052 = t13001*t20362*t19754;
  t21108 = t21045 + t21052;
  t19429 = t13001*t13550;
  t19693 = -1.*t19251*t19398*t19406;
  t19718 = t19429 + t19693;
  t21541 = t20362*t20202*t19251;
  t21545 = -1.*t19718*t19754;
  t21604 = t21541 + t21545;
  t21407 = t20202*t19718;
  t21415 = t20362*t19251*t19754;
  t21443 = t21407 + t21415;
  t21794 = -1.*t20362*t20202*t19251;
  t21819 = t19718*t19754;
  t21901 = t21794 + t21819;
  t23374 = t13001*t20202*t19398;
  t23399 = -1.*t13001*t20362*t19406*t19754;
  t23494 = t23374 + t23399;
  t23262 = t13001*t20362*t20202*t19406;
  t23263 = t13001*t19398*t19754;
  t23274 = t23262 + t23263;
  t23852 = -1.*t13001*t20202*t19398;
  t23853 = t13001*t20362*t19406*t19754;
  t23854 = t23852 + t23853;
  t20393 = 0.1575*t20362*t20383*t19251;
  t20403 = 0.2255*t20362*t13550*t19251;
  t20413 = 0.325*t20408*t19251*t19398;
  t20443 = 0.325*t20362*t19251*t19406*t19754;
  t20455 = 0.075*t20114*t20454;
  t20553 = 0.075*t20545*t20205;
  t20590 = t20051*t20454;
  t20630 = -1.*t20545*t20205;
  t20633 = t20590 + t20630;
  t20638 = 0.355*t20633;
  t20643 = t20051*t20545;
  t20657 = t20454*t20205;
  t20678 = t20643 + t20657;
  t20688 = -0.0641*t20678;
  t20699 = t20393 + t20403 + t20413 + t20443 + t20455 + t20553 + t20638 + t20688;
  t20916 = -0.325*t13001*t20362*t20408;
  t20918 = 0.1575*t13001*t20383*t19398;
  t23907 = -1.*t13001*t19398*t19406*t19754;
  t23912 = t21016 + t23907;
  t23921 = -1.*t13001*t20202*t19398*t19406;
  t23924 = t23921 + t21052;
  t22208 = 0.068*t13001*t20362*t19406;
  t22209 = -0.325*t13001*t20362*t13550*t19754;
  t22237 = 0.075*t13001*t20362*t13550*t20114*t19754;
  t22242 = 0.075*t13001*t20362*t13550*t20202*t20205;
  t22311 = t13001*t20362*t13550*t20051*t19754;
  t22314 = -1.*t13001*t20362*t13550*t20202*t20205;
  t22344 = t22311 + t22314;
  t22430 = 0.355*t22344;
  t22900 = t13001*t20362*t13550*t20202*t20051;
  t23227 = t13001*t20362*t13550*t19754*t20205;
  t23245 = t22900 + t23227;
  t23252 = -0.0641*t23245;
  t23256 = t22208 + t22209 + t22237 + t22242 + t22430 + t23252;
  t18826 = -0.1575*t13001*t13550;
  t19416 = 0.1575*t19251*t19398*t19406;
  t19724 = 0.2255*t19718;
  t20003 = -0.325*t19739*t19754;
  t20171 = 0.075*t20114*t19739*t19754;
  t20206 = 0.075*t20202*t19739*t20205;
  t20214 = t20051*t19739*t19754;
  t20228 = -1.*t20202*t19739*t20205;
  t20254 = t20214 + t20228;
  t20260 = 0.355*t20254;
  t20261 = t20202*t20051*t19739;
  t20262 = t19739*t19754*t20205;
  t20298 = t20261 + t20262;
  t20306 = -0.0641*t20298;
  t20318 = t18826 + t19416 + t19724 + t20003 + t20171 + t20206 + t20260 + t20306;
  t20931 = t13001*t13550*t19398;
  t20941 = -1.*t19251*t19406;
  t20962 = t20931 + t20941;
  t20925 = 0.1575*t19251*t19406;
  t20970 = 0.2255*t20962;
  t21012 = -0.325*t21006*t19754;
  t24563 = -0.325*t20202*t20962;
  t24581 = 0.075*t20202*t20114*t20962;
  t24599 = -0.075*t20962*t19754*t20205;
  t24606 = -1.*t20051*t20962*t19754;
  t24616 = t20202*t20962*t20205;
  t24636 = t24606 + t24616;
  t24658 = -0.0641*t24636;
  t24681 = t20202*t20051*t20962;
  t24698 = t20962*t19754*t20205;
  t24716 = t24681 + t24698;
  t24739 = 0.355*t24716;
  t24761 = t24563 + t24581 + t24599 + t24658 + t24739;
  t23260 = -0.325*t13001*t20362*t20202*t19406;
  t23261 = -0.325*t13001*t19398*t19754;
  t23307 = 0.075*t20114*t23274;
  t23628 = 0.075*t23494*t20205;
  t23629 = t20051*t23494;
  t23638 = t23274*t20205;
  t23820 = t23629 + t23638;
  t23832 = -0.0641*t23820;
  t23833 = t20051*t23274;
  t23834 = -1.*t23494*t20205;
  t23836 = t23833 + t23834;
  t23838 = 0.355*t23836;
  t23840 = t23260 + t23261 + t23307 + t23628 + t23832 + t23838;
  t25229 = t13550*t19251;
  t25305 = t13001*t19398*t19406;
  t25412 = t25229 + t25305;
  t25420 = -1.*t25412*t19754;
  t25443 = t21016 + t25420;
  t25447 = t20202*t25412;
  t25448 = -1.*t13001*t20362*t19754;
  t25454 = t25447 + t25448;
  t25517 = -1.*t20202*t25412;
  t25519 = t25517 + t21052;
  t21399 = -0.325*t20202*t19718;
  t21403 = -0.325*t20362*t19251*t19754;
  t21510 = 0.075*t20114*t21443;
  t21644 = 0.075*t21604*t20205;
  t21653 = t20051*t21604;
  t21664 = t21443*t20205;
  t21674 = t21653 + t21664;
  t21696 = -0.0641*t21674;
  t21722 = t20051*t21443;
  t21738 = -1.*t21604*t20205;
  t21742 = t21722 + t21738;
  t21747 = 0.355*t21742;
  t21748 = t21399 + t21403 + t21510 + t21644 + t21696 + t21747;
  t23968 = 0.075*t20202*t20051*t20962;
  t23969 = 0.075*t20962*t19754*t20205;
  t23970 = t20051*t20962*t19754;
  t23975 = -1.*t20202*t20962*t20205;
  t23981 = t23970 + t23975;
  t24008 = -0.0641*t23981;
  t24014 = -1.*t20202*t20051*t20962;
  t24021 = -1.*t20962*t19754*t20205;
  t24025 = t24014 + t24021;
  t24030 = 0.355*t24025;
  t24066 = t23968 + t23969 + t24008 + t24030;
  t23843 = 0.075*t20051*t23274;
  t23855 = 0.075*t23854*t20205;
  t23859 = t20051*t23854;
  t23863 = -1.*t23274*t20205;
  t23870 = t23859 + t23863;
  t23871 = -0.0641*t23870;
  t23873 = -1.*t20051*t23274;
  t23874 = -1.*t23854*t20205;
  t23875 = t23873 + t23874;
  t23880 = 0.355*t23875;
  t23885 = t23843 + t23855 + t23871 + t23880;
  t25444 = 0.075*t20051*t25443;
  t25455 = 0.075*t25454*t20205;
  t25463 = -1.*t20051*t25443;
  t25473 = -1.*t25454*t20205;
  t25474 = t25463 + t25473;
  t25475 = 0.355*t25474;
  t25476 = t20051*t25454;
  t25477 = -1.*t25443*t20205;
  t25491 = t25476 + t25477;
  t25492 = -0.0641*t25491;
  t25496 = t25444 + t25455 + t25475 + t25492;
  t25661 = t13001*t20362*t20202;
  t25662 = t25412*t19754;
  t25664 = t25661 + t25662;
  t21774 = 0.075*t20051*t21443;
  t21971 = 0.075*t21901*t20205;
  t22003 = t20051*t21901;
  t22028 = -1.*t21443*t20205;
  t22083 = t22003 + t22028;
  t22113 = -0.0641*t22083;
  t22139 = -1.*t20051*t21443;
  t22156 = -1.*t21901*t20205;
  t22176 = t22139 + t22156;
  t22179 = 0.355*t22176;
  t22180 = t21774 + t21971 + t22113 + t22179;
  t25521 = t20051*t25443;
  t25668 = t25454*t20205;
  t25676 = -1.*t20051*t25454;
  t25679 = -1.*t25664*t20205;
  t25680 = t25676 + t25679;
  t25924 = Cos(var1[3]);
  t25933 = Sin(var1[3]);
  t25935 = -1.*t20362*t25933;
  t25946 = -1.*t25924*t19251*t19398;
  t25948 = t25935 + t25946;
  t25962 = -1.*t13550*t25948;
  t25963 = t25924*t13001*t19406;
  t25971 = t25962 + t25963;
  t25990 = -1.*t25924*t20362*t19251;
  t25995 = t25933*t19398;
  t25996 = t25990 + t25995;
  t26008 = t20202*t25948;
  t26009 = -1.*t25996*t19406*t19754;
  t26012 = t26008 + t26009;
  t26014 = -1.*t20202*t25996*t19406;
  t26015 = -1.*t25948*t19754;
  t26016 = t26014 + t26015;
  t26045 = t25924*t13550*t19251;
  t26046 = t25924*t13001*t19398*t19406;
  t26047 = t26045 + t26046;
  t26054 = t25924*t13001*t20362*t20202;
  t26137 = t26047*t19754;
  t26154 = t26054 + t26137;
  t26265 = t20202*t26047;
  t26266 = -1.*t25924*t13001*t20362*t19754;
  t26267 = t26265 + t26266;
  t25950 = -1.*t25924*t13001*t13550;
  t25959 = -1.*t25948*t19406;
  t25960 = t25950 + t25959;
  t26295 = t25924*t20362*t19251;
  t26296 = -1.*t25933*t19398;
  t26300 = t26295 + t26296;
  t26318 = -1.*t20202*t26300;
  t26319 = -1.*t25960*t19754;
  t26329 = t26318 + t26319;
  t26308 = t20202*t25960;
  t26310 = -1.*t26300*t19754;
  t26315 = t26308 + t26310;
  t26365 = t20202*t26300;
  t26368 = t25960*t19754;
  t26369 = t26365 + t26368;
  t26397 = -1.*t25924*t20362;
  t26398 = t25933*t19251*t19398;
  t26399 = t26397 + t26398;
  t26393 = -1.*t20362*t25933*t19251;
  t26394 = -1.*t25924*t19398;
  t26395 = t26393 + t26394;
  t26534 = t13001*t13550*t25933;
  t26535 = -1.*t26399*t19406;
  t26537 = t26534 + t26535;
  t26539 = t20202*t26395;
  t26540 = t26537*t19754;
  t26541 = t26539 + t26540;
  t26543 = t20202*t26537;
  t26544 = -1.*t26395*t19754;
  t26548 = t26543 + t26544;
  t26590 = t13001*t13550*t25933*t19398;
  t26591 = -1.*t25933*t19251*t19406;
  t26592 = t26590 + t26591;
  t26625 = -1.*t13001*t20202*t25933*t19398;
  t26626 = t13001*t20362*t25933*t19406*t19754;
  t26627 = t26625 + t26626;
  t26629 = t13001*t20362*t20202*t25933*t19406;
  t26630 = t13001*t25933*t19398*t19754;
  t26631 = t26629 + t26630;
  t26036 = 0.325*t25924*t13001*t20362*t20408;
  t26039 = -0.1575*t25924*t13001*t20383*t19398;
  t26040 = -0.1575*t25924*t19251*t19406;
  t26041 = -1.*t25924*t13001*t13550*t19398;
  t26042 = t25924*t19251*t19406;
  t26043 = t26041 + t26042;
  t26044 = 0.2255*t26043;
  t26048 = -0.325*t26047*t19754;
  t26155 = 0.075*t20114*t26154;
  t26271 = 0.075*t26267*t20205;
  t26276 = t20051*t26154;
  t26278 = -1.*t26267*t20205;
  t26282 = t26276 + t26278;
  t26286 = 0.355*t26282;
  t26287 = t20051*t26267;
  t26289 = t26154*t20205;
  t26290 = t26287 + t26289;
  t26291 = -0.0641*t26290;
  t26292 = t26036 + t26039 + t26040 + t26044 + t26048 + t26155 + t26271 + t26286 + t26291;
  t26579 = t13550*t25933*t19251;
  t26581 = t13001*t25933*t19398*t19406;
  t26584 = t26579 + t26581;
  t26652 = -1.*t13001*t20362*t20202*t25933;
  t26656 = -1.*t26584*t19754;
  t26657 = t26652 + t26656;
  t26646 = t20202*t26584;
  t26647 = -1.*t13001*t20362*t25933*t19754;
  t26648 = t26646 + t26647;
  t26678 = t13001*t20362*t20202*t25933;
  t26679 = t26584*t19754;
  t26680 = t26678 + t26679;
  t26512 = -0.1575*t13001*t25933*t19406;
  t26522 = t13001*t25933*t19406;
  t26708 = -1.*t25933*t19251*t19398*t19406;
  t26712 = t26534 + t26708;
  t26726 = -1.*t20362*t20202*t25933*t19251;
  t26731 = t26712*t19754;
  t26734 = t26726 + t26731;
  t26736 = t20202*t26712;
  t26740 = t20362*t25933*t19251*t19754;
  t26741 = t26736 + t26740;
  t26615 = -0.1575*t13001*t20362*t20383*t25933;
  t26619 = -0.2255*t13001*t20362*t13550*t25933;
  t26623 = -0.325*t13001*t20408*t25933*t19398;
  t26624 = -0.325*t13001*t20362*t25933*t19406*t19754;
  t26628 = 0.075*t20114*t26627;
  t26632 = 0.075*t26631*t20205;
  t26633 = t20051*t26627;
  t26634 = -1.*t26631*t20205;
  t26635 = t26633 + t26634;
  t26636 = 0.355*t26635;
  t26637 = t20051*t26631;
  t26638 = t26627*t20205;
  t26639 = t26637 + t26638;
  t26640 = -0.0641*t26639;
  t26641 = t26615 + t26619 + t26623 + t26624 + t26628 + t26632 + t26636 + t26640;
  t26792 = t25924*t20362;
  t26796 = -1.*t25933*t19251*t19398;
  t26800 = t26792 + t26796;
  t26804 = t20202*t26800;
  t26805 = -1.*t26395*t19406*t19754;
  t26806 = t26804 + t26805;
  t26790 = -1.*t20202*t26395*t19406;
  t26801 = -1.*t26800*t19754;
  t26802 = t26790 + t26801;
  t27018 = -1.*t20202*t26800;
  t27020 = t26395*t19406*t19754;
  t27021 = t27018 + t27020;
  t25998 = 0.1575*t20383*t25996;
  t25999 = 0.2255*t13550*t25996;
  t26000 = 0.325*t20408*t25948;
  t26005 = 0.325*t25996*t19406*t19754;
  t26013 = 0.075*t20114*t26012;
  t26017 = 0.075*t26016*t20205;
  t26021 = t20051*t26012;
  t26022 = -1.*t26016*t20205;
  t26026 = t26021 + t26022;
  t26027 = 0.355*t26026;
  t26028 = t20051*t26016;
  t26031 = t26012*t20205;
  t26032 = t26028 + t26031;
  t26033 = -0.0641*t26032;
  t26034 = t25998 + t25999 + t26000 + t26005 + t26013 + t26017 + t26027 + t26033;
  t26396 = 0.325*t20408*t26395;
  t26511 = 0.1575*t20383*t26399;
  t27036 = -1.*t26399*t19406*t19754;
  t27037 = t26539 + t27036;
  t27039 = -1.*t20202*t26399*t19406;
  t27040 = t27039 + t26544;
  t26770 = -0.068*t26395*t19406;
  t26771 = 0.325*t13550*t26395*t19754;
  t26772 = -0.075*t13550*t20114*t26395*t19754;
  t26773 = -0.075*t13550*t20202*t26395*t20205;
  t26774 = -1.*t13550*t20051*t26395*t19754;
  t26775 = t13550*t20202*t26395*t20205;
  t26776 = t26774 + t26775;
  t26777 = 0.355*t26776;
  t26778 = -1.*t13550*t20202*t20051*t26395;
  t26780 = -1.*t13550*t26395*t19754*t20205;
  t26782 = t26778 + t26780;
  t26783 = -0.0641*t26782;
  t26784 = t26770 + t26771 + t26772 + t26773 + t26777 + t26783;
  t25926 = 0.1575*t25924*t13001*t13550;
  t25949 = 0.1575*t25948*t19406;
  t25961 = 0.2255*t25960;
  t25973 = -0.325*t25971*t19754;
  t25974 = 0.075*t20114*t25971*t19754;
  t25975 = 0.075*t20202*t25971*t20205;
  t25976 = t20051*t25971*t19754;
  t25979 = -1.*t20202*t25971*t20205;
  t25980 = t25976 + t25979;
  t25983 = 0.355*t25980;
  t25984 = t20202*t20051*t25971;
  t25985 = t25971*t19754*t20205;
  t25986 = t25984 + t25985;
  t25987 = -0.0641*t25986;
  t25988 = t25926 + t25949 + t25961 + t25973 + t25974 + t25975 + t25983 + t25987;
  t27070 = -1.*t13550*t26800;
  t27074 = t27070 + t26522;
  t26577 = -0.1575*t13550*t25933*t19251;
  t26578 = -0.1575*t13001*t25933*t19398*t19406;
  t26585 = 0.2255*t26584;
  t26593 = -0.325*t26592*t19754;
  t26594 = 0.075*t20114*t26592*t19754;
  t26595 = 0.075*t20202*t26592*t20205;
  t26596 = t20051*t26592*t19754;
  t26600 = -1.*t20202*t26592*t20205;
  t26605 = t26596 + t26600;
  t26606 = 0.355*t26605;
  t26607 = t20202*t20051*t26592;
  t26610 = t26592*t19754*t20205;
  t26611 = t26607 + t26610;
  t26612 = -0.0641*t26611;
  t26613 = t26577 + t26578 + t26585 + t26593 + t26594 + t26595 + t26606 + t26612;
  t27213 = t26800*t19406;
  t27214 = t26534 + t27213;
  t27128 = -0.325*t20202*t27074;
  t27135 = 0.075*t20202*t20114*t27074;
  t27144 = -0.075*t27074*t19754*t20205;
  t27191 = -1.*t20051*t27074*t19754;
  t27192 = t20202*t27074*t20205;
  t27193 = t27191 + t27192;
  t27194 = -0.0641*t27193;
  t27195 = t20202*t20051*t27074;
  t27198 = t27074*t19754*t20205;
  t27201 = t27195 + t27198;
  t27202 = 0.355*t27201;
  t27204 = t27128 + t27135 + t27144 + t27194 + t27202;
  t26989 = 0.325*t20202*t26395*t19406;
  t26991 = 0.325*t26800*t19754;
  t26994 = 0.075*t20114*t26802;
  t27022 = 0.075*t27021*t20205;
  t27023 = t20051*t27021;
  t27024 = t26802*t20205;
  t27025 = t27023 + t27024;
  t27026 = -0.0641*t27025;
  t27027 = t20051*t26802;
  t27028 = -1.*t27021*t20205;
  t27029 = t27027 + t27028;
  t27030 = 0.355*t27029;
  t27031 = t26989 + t26991 + t26994 + t27022 + t27026 + t27030;
  t26644 = -0.325*t20202*t26584;
  t26645 = 0.325*t13001*t20362*t25933*t19754;
  t26649 = 0.075*t20114*t26648;
  t26662 = 0.075*t26657*t20205;
  t26663 = t20051*t26657;
  t26664 = t26648*t20205;
  t26665 = t26663 + t26664;
  t26668 = -0.0641*t26665;
  t26669 = t20051*t26648;
  t26670 = -1.*t26657*t20205;
  t26671 = t26669 + t26670;
  t26673 = 0.355*t26671;
  t26674 = t26644 + t26645 + t26649 + t26662 + t26668 + t26673;
  t26294 = -0.325*t20202*t25960;
  t26302 = 0.325*t26300*t19754;
  t26317 = 0.075*t20114*t26315;
  t26331 = 0.075*t26329*t20205;
  t26334 = t20051*t26329;
  t26336 = t26315*t20205;
  t26337 = t26334 + t26336;
  t26338 = -0.0641*t26337;
  t26339 = t20051*t26315;
  t26340 = -1.*t26329*t20205;
  t26351 = t26339 + t26340;
  t26352 = 0.355*t26351;
  t26360 = t26294 + t26302 + t26317 + t26331 + t26338 + t26352;
  t27244 = -1.*t13001*t13550*t25933;
  t27245 = -1.*t26800*t19406;
  t27246 = t27244 + t27245;
  t27239 = t20362*t25933*t19251;
  t27240 = t25924*t19398;
  t27241 = t27239 + t27240;
  t27242 = -1.*t20202*t27241;
  t27247 = -1.*t27246*t19754;
  t27248 = t27242 + t27247;
  t27250 = t20202*t27246;
  t27251 = -1.*t27241*t19754;
  t27252 = t27250 + t27251;
  t27409 = -1.*t20202*t27246;
  t27411 = t27241*t19754;
  t27416 = t27409 + t27411;
  t27087 = 0.075*t20202*t20051*t27074;
  t27089 = 0.075*t27074*t19754*t20205;
  t27090 = t20051*t27074*t19754;
  t27091 = -1.*t20202*t27074*t20205;
  t27092 = t27090 + t27091;
  t27093 = -0.0641*t27092;
  t27094 = -1.*t20202*t20051*t27074;
  t27095 = -1.*t27074*t19754*t20205;
  t27096 = t27094 + t27095;
  t27102 = 0.355*t27096;
  t27111 = t27087 + t27089 + t27093 + t27102;
  t26803 = 0.075*t20051*t26802;
  t26807 = 0.075*t26806*t20205;
  t26808 = t20051*t26806;
  t26812 = -1.*t26802*t20205;
  t26816 = t26808 + t26812;
  t26827 = -0.0641*t26816;
  t26864 = -1.*t20051*t26802;
  t26871 = -1.*t26806*t20205;
  t26933 = t26864 + t26871;
  t26972 = 0.355*t26933;
  t26979 = t26803 + t26807 + t26827 + t26972;
  t26677 = 0.075*t20051*t26648;
  t26682 = 0.075*t26680*t20205;
  t26684 = t20051*t26680;
  t26685 = -1.*t26648*t20205;
  t26686 = t26684 + t26685;
  t26687 = -0.0641*t26686;
  t26688 = -1.*t20051*t26648;
  t26689 = -1.*t26680*t20205;
  t26690 = t26688 + t26689;
  t26693 = 0.355*t26690;
  t26695 = t26677 + t26682 + t26687 + t26693;
  t26362 = 0.075*t20051*t26315;
  t26370 = 0.075*t26369*t20205;
  t26371 = t20051*t26369;
  t26372 = -1.*t26315*t20205;
  t26377 = t26371 + t26372;
  t26381 = -0.0641*t26377;
  t26385 = -1.*t20051*t26315;
  t26386 = -1.*t26369*t20205;
  t26387 = t26385 + t26386;
  t26388 = 0.355*t26387;
  t26389 = t26362 + t26370 + t26381 + t26388;
  t27249 = 0.075*t20051*t27248;
  t27253 = 0.075*t27252*t20205;
  t27254 = -1.*t20051*t27248;
  t27255 = -1.*t27252*t20205;
  t27311 = t27254 + t27255;
  t27331 = 0.355*t27311;
  t27336 = t20051*t27252;
  t27346 = -1.*t27248*t20205;
  t27369 = t27336 + t27346;
  t27384 = -0.0641*t27369;
  t27385 = t27249 + t27253 + t27331 + t27384;
  t27466 = t20202*t27241;
  t27468 = t27246*t19754;
  t27469 = t27466 + t27468;
  t27425 = t20051*t27248;
  t27476 = t27252*t20205;
  t27480 = -1.*t20051*t27252;
  t27481 = -1.*t27469*t20205;
  t27482 = t27480 + t27481;
  t27546 = 0.1575*t13001*t13550*t25933;
  t27547 = 0.1575*t26800*t19406;
  t27548 = 0.2255*t27246;
  t27549 = -0.325*t27074*t19754;
  t27550 = 0.075*t20114*t27074*t19754;
  t27659 = 0.075*t20202*t27074*t20205;
  t27832 = 0.355*t27092;
  t27874 = -0.0641*t27201;
  t27884 = t27546 + t27547 + t27548 + t27549 + t27550 + t27659 + t27832 + t27874;
  t27525 = 0.1575*t20383*t26395;
  t27529 = 0.2255*t13550*t26395;
  t27531 = 0.325*t20408*t26800;
  t27532 = 0.325*t26395*t19406*t19754;
  t27533 = 0.075*t20114*t26806;
  t27535 = 0.075*t26802*t20205;
  t27536 = 0.355*t26816;
  t27537 = t26806*t20205;
  t27541 = t27027 + t27537;
  t27544 = -0.0641*t27541;
  t27545 = t27525 + t27529 + t27531 + t27532 + t27533 + t27535 + t27536 + t27544;
  t27509 = 0.325*t13001*t20362*t20408*t25933;
  t27510 = -0.1575*t13001*t20383*t25933*t19398;
  t27511 = -0.1575*t25933*t19251*t19406;
  t27512 = -1.*t13001*t13550*t25933*t19398;
  t27513 = t25933*t19251*t19406;
  t27514 = t27512 + t27513;
  t27515 = 0.2255*t27514;
  t27516 = -0.325*t26584*t19754;
  t27517 = 0.075*t20114*t26680;
  t27518 = 0.075*t26648*t20205;
  t27519 = 0.355*t26686;
  t27520 = t26680*t20205;
  t27521 = t26669 + t27520;
  t27523 = -0.0641*t27521;
  t27524 = t27509 + t27510 + t27511 + t27515 + t27516 + t27517 + t27518 + t27519 + t27523;
  t27487 = 0.325*t20408*t26300;
  t27488 = 0.1575*t20383*t25948;
  t27489 = 0.1575*t25924*t13001*t19406;
  t27490 = t13550*t25948;
  t27491 = -1.*t25924*t13001*t19406;
  t27492 = t27490 + t27491;
  t27495 = 0.2255*t27492;
  t27496 = -0.325*t25960*t19754;
  t27498 = 0.075*t20114*t26369;
  t27500 = 0.075*t26315*t20205;
  t27501 = 0.355*t26377;
  t27502 = t26369*t20205;
  t27503 = t26339 + t27502;
  t27505 = -0.0641*t27503;
  t27506 = t27487 + t27488 + t27489 + t27495 + t27496 + t27498 + t27500 + t27501 + t27505;
  t27895 = -0.325*t20202*t27246;
  t27930 = 0.325*t27241*t19754;
  t27935 = 0.075*t20114*t27252;
  t27939 = 0.075*t27248*t20205;
  t27946 = t27425 + t27476;
  t27955 = -0.0641*t27946;
  t27962 = 0.355*t27369;
  t27969 = t27895 + t27930 + t27935 + t27939 + t27955 + t27962;
  t27971 = 0.075*t20051*t27252;
  t27972 = 0.075*t27469*t20205;
  t27973 = t20051*t27469;
  t27979 = t27973 + t27255;
  t27980 = -0.0641*t27979;
  t27985 = 0.355*t27482;
  t27986 = t27971 + t27972 + t27980 + t27985;
  t28057 = t25924*t13001*t20202*t19398;
  t28058 = -1.*t25924*t13001*t20362*t19406*t19754;
  t28059 = t28057 + t28058;
  t28066 = -1.*t25924*t13001*t20362*t20202*t19406;
  t28067 = -1.*t25924*t13001*t19398*t19754;
  t28068 = t28066 + t28067;
  t28012 = -1.*t25924*t13550*t19251;
  t28018 = -1.*t25924*t13001*t19398*t19406;
  t28019 = t28012 + t28018;
  t28099 = -1.*t28019*t19754;
  t28100 = t26054 + t28099;
  t28095 = t20202*t28019;
  t28096 = t25924*t13001*t20362*t19754;
  t28097 = t28095 + t28096;
  t28844 = -1.*t25924*t13001*t20362*t20202;
  t28852 = t28019*t19754;
  t28853 = t28844 + t28852;
  t28918 = t25924*t19251*t19398*t19406;
  t28919 = t25950 + t28918;
  t28922 = t25924*t20362*t20202*t19251;
  t28924 = t28919*t19754;
  t28925 = t28922 + t28924;
  t28928 = t20202*t28919;
  t28930 = -1.*t25924*t20362*t19251*t19754;
  t28931 = t28928 + t28930;
  t28047 = 0.1575*t25924*t13001*t20362*t20383;
  t28051 = 0.2255*t25924*t13001*t20362*t13550;
  t28052 = 0.325*t25924*t13001*t20408*t19398;
  t28053 = 0.325*t25924*t13001*t20362*t19406*t19754;
  t28062 = 0.075*t20114*t28059;
  t28069 = 0.075*t28068*t20205;
  t28070 = t20051*t28059;
  t28074 = -1.*t28068*t20205;
  t28075 = t28070 + t28074;
  t28077 = 0.355*t28075;
  t28078 = t20051*t28068;
  t28079 = t28059*t20205;
  t28083 = t28078 + t28079;
  t28086 = -0.0641*t28083;
  t28087 = t28047 + t28051 + t28052 + t28053 + t28062 + t28069 + t28077 + t28086;
  t29009 = t20362*t25933;
  t29017 = t25924*t19251*t19398;
  t29021 = t29009 + t29017;
  t29064 = t20202*t29021;
  t29176 = -1.*t26300*t19406*t19754;
  t29178 = t29064 + t29176;
  t29003 = -1.*t20202*t26300*t19406;
  t29026 = -1.*t29021*t19754;
  t29030 = t29003 + t29026;
  t29491 = -1.*t20202*t29021;
  t29505 = t26300*t19406*t19754;
  t29507 = t29491 + t29505;
  t29548 = -1.*t25948*t19406*t19754;
  t29549 = t26365 + t29548;
  t29553 = -1.*t20202*t25948*t19406;
  t29554 = t29553 + t26310;
  t28948 = -0.068*t26300*t19406;
  t28949 = 0.325*t13550*t26300*t19754;
  t28951 = -0.075*t13550*t20114*t26300*t19754;
  t28953 = -0.075*t13550*t20202*t26300*t20205;
  t28954 = -1.*t13550*t20051*t26300*t19754;
  t28958 = t13550*t20202*t26300*t20205;
  t28963 = t28954 + t28958;
  t28965 = 0.355*t28963;
  t28967 = -1.*t13550*t20202*t20051*t26300;
  t28971 = -1.*t13550*t26300*t19754*t20205;
  t28977 = t28967 + t28971;
  t28982 = -0.0641*t28977;
  t28985 = t28948 + t28949 + t28951 + t28953 + t28965 + t28982;
  t29634 = -1.*t13550*t29021;
  t29636 = t29634 + t27491;
  t28004 = 0.1575*t25924*t13550*t19251;
  t28005 = 0.1575*t25924*t13001*t19398*t19406;
  t28020 = 0.2255*t28019;
  t28025 = -0.325*t26043*t19754;
  t28026 = 0.075*t20114*t26043*t19754;
  t28027 = 0.075*t20202*t26043*t20205;
  t28030 = t20051*t26043*t19754;
  t28031 = -1.*t20202*t26043*t20205;
  t28035 = t28030 + t28031;
  t28036 = 0.355*t28035;
  t28037 = t20202*t20051*t26043;
  t28038 = t26043*t19754*t20205;
  t28041 = t28037 + t28038;
  t28042 = -0.0641*t28041;
  t28045 = t28004 + t28005 + t28020 + t28025 + t28026 + t28027 + t28036 + t28042;
  t29734 = t29021*t19406;
  t29737 = t25950 + t29734;
  t29672 = -0.325*t20202*t29636;
  t29673 = 0.075*t20202*t20114*t29636;
  t29674 = -0.075*t29636*t19754*t20205;
  t29676 = -1.*t20051*t29636*t19754;
  t29678 = t20202*t29636*t20205;
  t29679 = t29676 + t29678;
  t29682 = -0.0641*t29679;
  t29683 = t20202*t20051*t29636;
  t29686 = t29636*t19754*t20205;
  t29687 = t29683 + t29686;
  t29689 = 0.355*t29687;
  t29691 = t29672 + t29673 + t29674 + t29682 + t29689;
  t29444 = 0.325*t20202*t26300*t19406;
  t29459 = 0.325*t29021*t19754;
  t29464 = 0.075*t20114*t29030;
  t29512 = 0.075*t29507*t20205;
  t29516 = t20051*t29507;
  t29518 = t29030*t20205;
  t29522 = t29516 + t29518;
  t29523 = -0.0641*t29522;
  t29531 = t20051*t29030;
  t29532 = -1.*t29507*t20205;
  t29535 = t29531 + t29532;
  t29537 = 0.355*t29535;
  t29539 = t29444 + t29459 + t29464 + t29512 + t29523 + t29537;
  t28090 = -0.325*t20202*t28019;
  t28094 = -0.325*t25924*t13001*t20362*t19754;
  t28098 = 0.075*t20114*t28097;
  t28101 = 0.075*t28100*t20205;
  t28153 = t20051*t28100;
  t28262 = t28097*t20205;
  t28719 = t28153 + t28262;
  t28720 = -0.0641*t28719;
  t28721 = t20051*t28097;
  t28779 = -1.*t28100*t20205;
  t28811 = t28721 + t28779;
  t28822 = 0.355*t28811;
  t28824 = t28090 + t28094 + t28098 + t28101 + t28720 + t28822;
  t30080 = t25924*t13001*t13550;
  t30081 = -1.*t29021*t19406;
  t30086 = t30080 + t30081;
  t30078 = -1.*t20202*t25996;
  t30087 = -1.*t30086*t19754;
  t30089 = t30078 + t30087;
  t30115 = t20202*t30086;
  t30125 = -1.*t25996*t19754;
  t30130 = t30115 + t30125;
  t30247 = -1.*t20202*t30086;
  t30254 = t25996*t19754;
  t30259 = t30247 + t30254;
  t29637 = 0.075*t20202*t20051*t29636;
  t29646 = 0.075*t29636*t19754*t20205;
  t29648 = t20051*t29636*t19754;
  t29649 = -1.*t20202*t29636*t20205;
  t29651 = t29648 + t29649;
  t29660 = -0.0641*t29651;
  t29661 = -1.*t20202*t20051*t29636;
  t29663 = -1.*t29636*t19754*t20205;
  t29664 = t29661 + t29663;
  t29667 = 0.355*t29664;
  t29668 = t29637 + t29646 + t29660 + t29667;
  t29055 = 0.075*t20051*t29030;
  t29238 = 0.075*t29178*t20205;
  t29254 = t20051*t29178;
  t29259 = -1.*t29030*t20205;
  t29260 = t29254 + t29259;
  t29263 = -0.0641*t29260;
  t29311 = -1.*t20051*t29030;
  t29343 = -1.*t29178*t20205;
  t29354 = t29311 + t29343;
  t29355 = 0.355*t29354;
  t29356 = t29055 + t29238 + t29263 + t29355;
  t28842 = 0.075*t20051*t28097;
  t28854 = 0.075*t28853*t20205;
  t28858 = t20051*t28853;
  t28859 = -1.*t28097*t20205;
  t28860 = t28858 + t28859;
  t28861 = -0.0641*t28860;
  t28862 = -1.*t20051*t28097;
  t28863 = -1.*t28853*t20205;
  t28864 = t28862 + t28863;
  t28869 = 0.355*t28864;
  t28873 = t28842 + t28854 + t28861 + t28869;
  t30110 = 0.075*t20051*t30089;
  t30133 = 0.075*t30130*t20205;
  t30135 = -1.*t20051*t30089;
  t30138 = -1.*t30130*t20205;
  t30139 = t30135 + t30138;
  t30143 = 0.355*t30139;
  t30145 = t20051*t30130;
  t30146 = -1.*t30089*t20205;
  t30147 = t30145 + t30146;
  t30149 = -0.0641*t30147;
  t30152 = t30110 + t30133 + t30143 + t30149;
  t30349 = t20202*t25996;
  t30355 = t30086*t19754;
  t30356 = t30349 + t30355;
  t30289 = t20051*t30089;
  t30437 = t30130*t20205;
  t30440 = -1.*t20051*t30130;
  t30441 = -1.*t30356*t20205;
  t30442 = t30440 + t30441;
  p_output1[0]=(t20916 + t20918 + t20925 + t20970 + t21012 + 0.075*t20114*t21026 + 0.075*t20205*t21108 - 0.0641*(t20205*t21026 + t20051*t21108) + 0.355*(t20051*t21026 - 1.*t20205*t21108))*var2[4] + t20699*var2[5] + t20318*var2[6] + t21748*var2[7] + t22180*var2[8];
  p_output1[1]=t20699*var2[4] + (0.2255*t13001*t13550*t19398 + 0.325*t13001*t19398*t19406*t19754 + t20916 + t20918 + 0.075*t20114*t23912 + 0.075*t20205*t23924 - 0.0641*(t20205*t23912 + t20051*t23924) + 0.355*(t20051*t23912 - 1.*t20205*t23924))*var2[5] + t23256*var2[6] + t23840*var2[7] + t23885*var2[8];
  p_output1[2]=t20318*var2[4] + t23256*var2[5] + (-0.1575*t13001*t13550*t19398 + t20925 + t20970 + 0.075*t19754*t20114*t21006 + 0.075*t20202*t20205*t21006 - 0.0641*(t20051*t20202*t21006 + t19754*t20205*t21006) + 0.355*(t19754*t20051*t21006 - 1.*t20202*t20205*t21006) + t21012)*var2[6] + t24761*var2[7] + t24066*var2[8];
  p_output1[3]=t21748*var2[4] + t23840*var2[5] + t24761*var2[6] + (0.325*t13001*t20202*t20362 + 0.325*t19754*t25412 + 0.075*t20114*t25443 + 0.075*t20205*t25519 - 0.0641*(t20205*t25443 + t20051*t25519) + 0.355*(-1.*t20205*t25519 + t25521))*var2[7] + t25496*var2[8];
  p_output1[4]=t22180*var2[4] + t23885*var2[5] + t24066*var2[6] + t25496*var2[7] + (-0.075*t20205*t25454 + 0.075*t20051*t25664 + 0.355*(-1.*t20051*t25664 + t25668) - 0.0641*t25680)*var2[8];
  p_output1[5]=1.;
  p_output1[6]=-0.1575*t13001*t19406 + 0.2255*(t13550*t19251*t19398 + t13001*t19406) - 0.325*t19718*t19754 + 0.1575*t19251*t19398*t20383 - 0.325*t19251*t20362*t20408 + 0.075*t20205*t21443 + 0.075*t20114*t21901 - 0.0641*(t21722 + t20205*t21901) + 0.355*t22083;
  p_output1[7]=-0.2255*t13001*t13550*t20362 - 0.325*t13001*t19406*t19754*t20362 - 0.1575*t13001*t20362*t20383 - 0.325*t13001*t19398*t20408 + 0.075*t20205*t23274 + 0.075*t20114*t23854 - 0.0641*(t23833 + t20205*t23854) + 0.355*t23870;
  p_output1[8]=-0.1575*t13550*t19251 - 0.1575*t13001*t19398*t19406 - 0.325*t19754*t20962 + 0.075*t19754*t20114*t20962 + 0.075*t20202*t20205*t20962 + 0.355*t23981 - 0.0641*t24716 + 0.2255*t25412;
  p_output1[9]=0.325*t13001*t19754*t20362 - 0.325*t20202*t25412 + 0.075*t20205*t25443 + 0.075*t20114*t25454 + 0.355*t25491 - 0.0641*(t25521 + t25668);
  p_output1[10]=0.075*t20051*t25454 + 0.075*t20205*t25664 - 0.0641*(t25473 + t20051*t25664) + 0.355*t25680;
  p_output1[11]=(t26396 + t26511 + t26512 + 0.2255*(t13550*t26399 + t26522) - 0.325*t19754*t26537 + 0.075*t20114*t26541 + 0.075*t20205*t26548 - 0.0641*(t20205*t26541 + t20051*t26548) + 0.355*(t20051*t26541 - 1.*t20205*t26548))*var2[3] + t26292*var2[4] + t26034*var2[5] + t25988*var2[6] + t26360*var2[7] + t26389*var2[8];
  p_output1[12]=t26292*var2[3] + (0.1575*t19251*t19398*t20383*t25933 - 0.325*t19251*t20362*t20408*t25933 + t26512 + 0.2255*(t13550*t19251*t19398*t25933 + t26522) - 0.325*t19754*t26712 + 0.075*t20114*t26734 + 0.075*t20205*t26741 - 0.0641*(t20205*t26734 + t20051*t26741) + 0.355*(t20051*t26734 - 1.*t20205*t26741))*var2[4] + t26641*var2[5] + t26613*var2[6] + t26674*var2[7] + t26695*var2[8];
  p_output1[13]=t26034*var2[3] + t26641*var2[4] + (t26396 + 0.2255*t13550*t26399 + 0.325*t19406*t19754*t26399 + t26511 + 0.075*t20114*t27037 + 0.075*t20205*t27040 - 0.0641*(t20205*t27037 + t20051*t27040) + 0.355*(t20051*t27037 - 1.*t20205*t27040))*var2[5] + t26784*var2[6] + t27031*var2[7] + t26979*var2[8];
  p_output1[14]=t25988*var2[3] + t26613*var2[4] + t26784*var2[5] + (t26512 + 0.1575*t13550*t26800 + 0.2255*t27074 - 0.325*t19754*t27214 + 0.075*t19754*t20114*t27214 + 0.075*t20202*t20205*t27214 - 0.0641*(t20051*t20202*t27214 + t19754*t20205*t27214) + 0.355*(t19754*t20051*t27214 - 1.*t20202*t20205*t27214))*var2[6] + t27204*var2[7] + t27111*var2[8];
  p_output1[15]=t26360*var2[3] + t26674*var2[4] + t27031*var2[5] + t27204*var2[6] + (0.325*t20202*t27241 + 0.325*t19754*t27246 + 0.075*t20114*t27248 + 0.075*t20205*t27416 - 0.0641*(t20205*t27248 + t20051*t27416) + 0.355*(-1.*t20205*t27416 + t27425))*var2[7] + t27385*var2[8];
  p_output1[16]=t26389*var2[3] + t26695*var2[4] + t26979*var2[5] + t27111*var2[6] + t27385*var2[7] + (-0.075*t20205*t27252 + 0.075*t20051*t27469 + 0.355*(-1.*t20051*t27469 + t27476) - 0.0641*t27482)*var2[8];
  p_output1[17]=1.;
  p_output1[18]=t27506;
  p_output1[19]=t27524;
  p_output1[20]=t27545;
  p_output1[21]=t27884;
  p_output1[22]=t27969;
  p_output1[23]=t27986;
  p_output1[24]=t27506*var2[3] + t27524*var2[4] + t27545*var2[5] + t27884*var2[6] + t27969*var2[7] + t27986*var2[8];
  p_output1[25]=t27524*var2[3] + (-0.1575*t19251*t19398*t20383*t25924 + 0.325*t19251*t20362*t20408*t25924 + t27489 + 0.2255*(-1.*t13550*t19251*t19398*t25924 + t27491) - 0.325*t19754*t28919 + 0.075*t20114*t28925 + 0.075*t20205*t28931 - 0.0641*(t20205*t28925 + t20051*t28931) + 0.355*(t20051*t28925 - 1.*t20205*t28931))*var2[4] + t28087*var2[5] + t28045*var2[6] + t28824*var2[7] + t28873*var2[8];
  p_output1[26]=t27545*var2[3] + t28087*var2[4] + (0.2255*t13550*t25948 + 0.325*t19406*t19754*t25948 + t27487 + t27488 + 0.075*t20114*t29549 + 0.075*t20205*t29554 - 0.0641*(t20205*t29549 + t20051*t29554) + 0.355*(t20051*t29549 - 1.*t20205*t29554))*var2[5] + t28985*var2[6] + t29539*var2[7] + t29356*var2[8];
  p_output1[27]=t27884*var2[3] + t28045*var2[4] + t28985*var2[5] + (t27489 + 0.1575*t13550*t29021 + 0.2255*t29636 - 0.325*t19754*t29737 + 0.075*t19754*t20114*t29737 + 0.075*t20202*t20205*t29737 - 0.0641*(t20051*t20202*t29737 + t19754*t20205*t29737) + 0.355*(t19754*t20051*t29737 - 1.*t20202*t20205*t29737))*var2[6] + t29691*var2[7] + t29668*var2[8];
  p_output1[28]=t27969*var2[3] + t28824*var2[4] + t29539*var2[5] + t29691*var2[6] + (0.325*t20202*t25996 + 0.325*t19754*t30086 + 0.075*t20114*t30089 + 0.075*t20205*t30259 - 0.0641*(t20205*t30089 + t20051*t30259) + 0.355*(-1.*t20205*t30259 + t30289))*var2[7] + t30152*var2[8];
  p_output1[29]=t27986*var2[3] + t28873*var2[4] + t29356*var2[5] + t29668*var2[6] + t30152*var2[7] + (-0.075*t20205*t30130 + 0.075*t20051*t30356 + 0.355*(-1.*t20051*t30356 + t30437) - 0.0641*t30442)*var2[8];
  p_output1[30]=1.;
  p_output1[31]=0.1575*t13001*t19406*t25933 + 0.1575*t20383*t26800 + 0.2255*(-1.*t13001*t19406*t25933 + t13550*t26800) + 0.325*t20408*t27241 - 0.325*t19754*t27246 + t27253 + 0.075*t20114*t27469 - 0.0641*(t27336 + t20205*t27469) + 0.355*t27979;
  p_output1[32]=0.1575*t19251*t19406*t25924 + 0.1575*t13001*t19398*t20383*t25924 - 0.325*t13001*t20362*t20408*t25924 + 0.2255*(t13001*t13550*t19398*t25924 - 1.*t19251*t19406*t25924) - 0.325*t19754*t28019 + 0.075*t20205*t28097 + 0.075*t20114*t28853 - 0.0641*(t28721 + t20205*t28853) + 0.355*t28860;
  p_output1[33]=0.2255*t13550*t26300 + 0.325*t19406*t19754*t26300 + 0.1575*t20383*t26300 + 0.325*t20408*t29021 + 0.075*t20205*t29030 + 0.075*t20114*t29178 + 0.355*t29260 - 0.0641*(t20205*t29178 + t29531);
  p_output1[34]=-0.1575*t13001*t13550*t25924 + 0.1575*t19406*t29021 - 0.325*t19754*t29636 + 0.075*t19754*t20114*t29636 + 0.075*t20202*t20205*t29636 + 0.355*t29651 - 0.0641*t29687 + 0.2255*t30086;
  p_output1[35]=0.325*t19754*t25996 - 0.325*t20202*t30086 + 0.075*t20205*t30089 + 0.075*t20114*t30130 + 0.355*t30147 - 0.0641*(t30289 + t30437);
  p_output1[36]=0.075*t20051*t30130 + 0.075*t20205*t30356 - 0.0641*(t30138 + t20051*t30356) + 0.355*t30442;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 37, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_impact_velocity_FlFoot_ParallelStance.hh"

namespace ParallelStance
{

void J_impact_velocity_FlFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
