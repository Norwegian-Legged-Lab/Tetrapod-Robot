/*
 * Automatically Generated from Mathematica.
 * Sun 3 Apr 2022 21:47:13 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t20;
  double t679;
  double t1471;
  double t2323;
  double t2574;
  double t2962;
  double t2972;
  double t2974;
  double t2987;
  double t2995;
  double t3353;
  double t3417;
  double t6432;
  double t3300;
  double t3307;
  double t13025;
  double t13553;
  double t14105;
  double t14126;
  double t14207;
  double t14242;
  double t11727;
  double t11826;
  double t6800;
  double t11247;
  double t18435;
  double t18451;
  double t18453;
  double t18461;
  double t18658;
  double t18662;
  double t18678;
  double t18683;
  double t18696;
  double t2721;
  double t2821;
  double t2908;
  double t19289;
  double t19290;
  double t19291;
  double t19218;
  double t19222;
  double t19254;
  double t19335;
  double t19340;
  double t19350;
  double t20102;
  double t20103;
  double t20104;
  double t20078;
  double t20079;
  double t20080;
  double t20338;
  double t20339;
  double t20340;
  double t11487;
  double t11547;
  double t12775;
  double t13002;
  double t14112;
  double t14295;
  double t14371;
  double t14372;
  double t14383;
  double t14387;
  double t14397;
  double t14417;
  double t17557;
  double t17850;
  double t17856;
  double t18178;
  double t18390;
  double t20576;
  double t20594;
  double t20596;
  double t20597;
  double t19649;
  double t19684;
  double t19703;
  double t19704;
  double t19705;
  double t19716;
  double t19729;
  double t19733;
  double t19738;
  double t19739;
  double t19859;
  double t19942;
  double t19943;
  double t1080;
  double t2720;
  double t2920;
  double t2994;
  double t3348;
  double t3646;
  double t3750;
  double t3823;
  double t3870;
  double t4472;
  double t4629;
  double t4967;
  double t4992;
  double t6005;
  double t6024;
  double t18404;
  double t18411;
  double t18412;
  double t18394;
  double t18415;
  double t18460;
  double t20924;
  double t20925;
  double t20926;
  double t20927;
  double t20928;
  double t20929;
  double t20931;
  double t20933;
  double t20938;
  double t20939;
  double t20941;
  double t20967;
  double t20075;
  double t20076;
  double t20097;
  double t20106;
  double t20107;
  double t20124;
  double t20307;
  double t20321;
  double t20322;
  double t20323;
  double t20324;
  double t20330;
  double t20333;
  double t21069;
  double t21070;
  double t21074;
  double t21078;
  double t21082;
  double t21084;
  double t21109;
  double t21112;
  double t21156;
  double t21157;
  double t19207;
  double t19214;
  double t19276;
  double t19294;
  double t19296;
  double t19306;
  double t19309;
  double t19314;
  double t19315;
  double t19317;
  double t19318;
  double t19321;
  double t19324;
  double t20779;
  double t20780;
  double t20781;
  double t20782;
  double t20803;
  double t20825;
  double t20864;
  double t20897;
  double t20898;
  double t20899;
  double t20903;
  double t20335;
  double t20341;
  double t20382;
  double t20388;
  double t20392;
  double t20393;
  double t20394;
  double t20395;
  double t20396;
  double t20398;
  double t20399;
  double t21083;
  double t21113;
  double t21128;
  double t21130;
  double t21134;
  double t21136;
  double t21138;
  double t21139;
  double t21144;
  double t21147;
  double t21148;
  double t21192;
  double t21194;
  double t21195;
  double t19332;
  double t19467;
  double t19475;
  double t19478;
  double t19482;
  double t19488;
  double t19497;
  double t19501;
  double t19503;
  double t19504;
  double t19554;
  double t21168;
  double t21200;
  double t21203;
  double t21204;
  double t21206;
  double t21272;
  double t21275;
  double t21276;
  double t21277;
  double t21278;
  double t21284;
  double t21285;
  double t21286;
  double t21300;
  double t21301;
  double t21302;
  double t21307;
  double t21308;
  double t21309;
  double t21311;
  double t21312;
  double t21313;
  double t21337;
  double t21338;
  double t21339;
  double t21341;
  double t21342;
  double t21343;
  double t21345;
  double t21346;
  double t21347;
  double t21280;
  double t21281;
  double t21282;
  double t21362;
  double t21363;
  double t21364;
  double t21373;
  double t21374;
  double t21375;
  double t21366;
  double t21369;
  double t21370;
  double t21390;
  double t21391;
  double t21392;
  double t21415;
  double t21416;
  double t21417;
  double t21410;
  double t21411;
  double t21412;
  double t21427;
  double t21428;
  double t21429;
  double t21432;
  double t21433;
  double t21435;
  double t21437;
  double t21439;
  double t21441;
  double t21462;
  double t21463;
  double t21464;
  double t21483;
  double t21484;
  double t21485;
  double t21487;
  double t21488;
  double t21489;
  double t21327;
  double t21328;
  double t21329;
  double t21331;
  double t21333;
  double t21334;
  double t21335;
  double t21340;
  double t21344;
  double t21348;
  double t21350;
  double t21351;
  double t21352;
  double t21353;
  double t21355;
  double t21356;
  double t21357;
  double t21358;
  double t21359;
  double t21458;
  double t21459;
  double t21460;
  double t21509;
  double t21510;
  double t21511;
  double t21505;
  double t21506;
  double t21507;
  double t21524;
  double t21525;
  double t21526;
  double t21420;
  double t21423;
  double t21544;
  double t21545;
  double t21547;
  double t21548;
  double t21549;
  double t21551;
  double t21552;
  double t21553;
  double t21479;
  double t21480;
  double t21481;
  double t21482;
  double t21486;
  double t21490;
  double t21491;
  double t21492;
  double t21494;
  double t21495;
  double t21496;
  double t21497;
  double t21498;
  double t21499;
  double t21500;
  double t21584;
  double t21585;
  double t21586;
  double t21591;
  double t21592;
  double t21593;
  double t21583;
  double t21587;
  double t21588;
  double t21612;
  double t21614;
  double t21615;
  double t21303;
  double t21304;
  double t21305;
  double t21306;
  double t21310;
  double t21314;
  double t21315;
  double t21316;
  double t21317;
  double t21318;
  double t21319;
  double t21320;
  double t21321;
  double t21322;
  double t21325;
  double t21414;
  double t21419;
  double t21633;
  double t21634;
  double t21636;
  double t21638;
  double t21567;
  double t21568;
  double t21569;
  double t21570;
  double t21571;
  double t21572;
  double t21573;
  double t21574;
  double t21575;
  double t21576;
  double t21577;
  double t21578;
  double t21579;
  double t21273;
  double t21279;
  double t21283;
  double t21287;
  double t21288;
  double t21289;
  double t21290;
  double t21291;
  double t21292;
  double t21293;
  double t21294;
  double t21295;
  double t21296;
  double t21297;
  double t21298;
  double t21656;
  double t21657;
  double t21456;
  double t21457;
  double t21461;
  double t21465;
  double t21466;
  double t21467;
  double t21469;
  double t21470;
  double t21471;
  double t21472;
  double t21473;
  double t21474;
  double t21475;
  double t21476;
  double t21477;
  double t21689;
  double t21690;
  double t21671;
  double t21672;
  double t21673;
  double t21674;
  double t21676;
  double t21677;
  double t21678;
  double t21679;
  double t21680;
  double t21681;
  double t21682;
  double t21683;
  double t21608;
  double t21610;
  double t21611;
  double t21616;
  double t21617;
  double t21618;
  double t21619;
  double t21620;
  double t21622;
  double t21623;
  double t21624;
  double t21625;
  double t21626;
  double t21503;
  double t21504;
  double t21508;
  double t21512;
  double t21513;
  double t21514;
  double t21515;
  double t21516;
  double t21517;
  double t21518;
  double t21519;
  double t21520;
  double t21521;
  double t21361;
  double t21365;
  double t21372;
  double t21376;
  double t21377;
  double t21378;
  double t21380;
  double t21381;
  double t21382;
  double t21383;
  double t21384;
  double t21385;
  double t21386;
  double t21719;
  double t21720;
  double t21721;
  double t21715;
  double t21716;
  double t21717;
  double t21718;
  double t21723;
  double t21724;
  double t21727;
  double t21728;
  double t21729;
  double t21747;
  double t21749;
  double t21750;
  double t21658;
  double t21659;
  double t21660;
  double t21661;
  double t21662;
  double t21663;
  double t21664;
  double t21665;
  double t21666;
  double t21667;
  double t21669;
  double t21589;
  double t21594;
  double t21595;
  double t21596;
  double t21597;
  double t21599;
  double t21601;
  double t21602;
  double t21603;
  double t21604;
  double t21605;
  double t21523;
  double t21527;
  double t21528;
  double t21529;
  double t21530;
  double t21531;
  double t21532;
  double t21533;
  double t21534;
  double t21535;
  double t21536;
  double t21388;
  double t21395;
  double t21398;
  double t21399;
  double t21400;
  double t21402;
  double t21403;
  double t21404;
  double t21405;
  double t21406;
  double t21407;
  double t21725;
  double t21731;
  double t21732;
  double t21733;
  double t21734;
  double t21735;
  double t21737;
  double t21738;
  double t21739;
  double t21740;
  double t21741;
  double t21769;
  double t21770;
  double t21771;
  double t21752;
  double t21775;
  double t21779;
  double t21780;
  double t21781;
  double t21834;
  double t21835;
  double t21836;
  double t21837;
  double t21838;
  double t21839;
  double t21840;
  double t21841;
  double t21842;
  double t21820;
  double t21821;
  double t21822;
  double t21823;
  double t21824;
  double t21825;
  double t21826;
  double t21827;
  double t21828;
  double t21831;
  double t21832;
  double t21804;
  double t21805;
  double t21806;
  double t21807;
  double t21808;
  double t21809;
  double t21810;
  double t21811;
  double t21812;
  double t21813;
  double t21814;
  double t21815;
  double t21817;
  double t21818;
  double t21819;
  double t21786;
  double t21787;
  double t21788;
  double t21789;
  double t21791;
  double t21792;
  double t21793;
  double t21794;
  double t21795;
  double t21796;
  double t21797;
  double t21798;
  double t21800;
  double t21801;
  double t21802;
  double t21843;
  double t21844;
  double t21845;
  double t21846;
  double t21847;
  double t21848;
  double t21849;
  double t21850;
  double t21851;
  double t21852;
  double t21853;
  double t21854;
  double t21855;
  double t21856;
  double t21857;
  double t21890;
  double t21891;
  double t21892;
  double t21894;
  double t21895;
  double t21896;
  double t21868;
  double t21869;
  double t21870;
  double t21916;
  double t21917;
  double t21912;
  double t21913;
  double t21914;
  double t21931;
  double t21932;
  double t21933;
  double t21952;
  double t21954;
  double t21956;
  double t21957;
  double t21958;
  double t21960;
  double t21961;
  double t21962;
  double t21886;
  double t21887;
  double t21888;
  double t21889;
  double t21893;
  double t21897;
  double t21898;
  double t21899;
  double t21900;
  double t21901;
  double t21902;
  double t21903;
  double t21904;
  double t21906;
  double t21907;
  double t21994;
  double t21995;
  double t21996;
  double t22000;
  double t22001;
  double t22002;
  double t21993;
  double t21997;
  double t21998;
  double t22017;
  double t22018;
  double t22019;
  double t22033;
  double t22034;
  double t22036;
  double t22037;
  double t21977;
  double t21978;
  double t21979;
  double t21980;
  double t21981;
  double t21982;
  double t21983;
  double t21984;
  double t21985;
  double t21986;
  double t21987;
  double t21988;
  double t21989;
  double t22052;
  double t22054;
  double t21866;
  double t21867;
  double t21871;
  double t21872;
  double t21873;
  double t21874;
  double t21875;
  double t21876;
  double t21877;
  double t21878;
  double t21879;
  double t21881;
  double t21882;
  double t21883;
  double t21884;
  double t22085;
  double t22086;
  double t22067;
  double t22068;
  double t22069;
  double t22070;
  double t22071;
  double t22072;
  double t22073;
  double t22074;
  double t22075;
  double t22076;
  double t22077;
  double t22078;
  double t22014;
  double t22015;
  double t22016;
  double t22020;
  double t22021;
  double t22022;
  double t22023;
  double t22024;
  double t22025;
  double t22026;
  double t22027;
  double t22028;
  double t22029;
  double t21910;
  double t21911;
  double t21915;
  double t21919;
  double t21920;
  double t21921;
  double t21922;
  double t21923;
  double t21924;
  double t21925;
  double t21926;
  double t21927;
  double t21928;
  double t22106;
  double t22107;
  double t22108;
  double t22105;
  double t22109;
  double t22110;
  double t22112;
  double t22113;
  double t22114;
  double t22130;
  double t22131;
  double t22132;
  double t22055;
  double t22056;
  double t22057;
  double t22058;
  double t22059;
  double t22060;
  double t22061;
  double t22062;
  double t22063;
  double t22064;
  double t22065;
  double t21999;
  double t22003;
  double t22004;
  double t22005;
  double t22006;
  double t22007;
  double t22008;
  double t22009;
  double t22010;
  double t22011;
  double t22012;
  double t21930;
  double t21934;
  double t21935;
  double t21936;
  double t21937;
  double t21938;
  double t21939;
  double t21940;
  double t21941;
  double t21942;
  double t21944;
  double t22111;
  double t22115;
  double t22116;
  double t22118;
  double t22119;
  double t22120;
  double t22121;
  double t22122;
  double t22123;
  double t22124;
  double t22125;
  double t22152;
  double t22153;
  double t22154;
  double t22135;
  double t22158;
  double t22161;
  double t22162;
  double t22163;
  t20 = Cos(var1[4]);
  t679 = Cos(var1[6]);
  t1471 = Sin(var1[4]);
  t2323 = Sin(var1[5]);
  t2574 = Sin(var1[6]);
  t2962 = -1.*t679*t1471*t2323;
  t2972 = -1.*t20*t2574;
  t2974 = t2962 + t2972;
  t2987 = Sin(var1[7]);
  t2995 = Cos(var1[8]);
  t3353 = Cos(var1[7]);
  t3417 = Sin(var1[8]);
  t6432 = Cos(var1[5]);
  t3300 = -1.*t2995;
  t3307 = 1. + t3300;
  t13025 = t3353*t1471*t2323;
  t13553 = -1.*t6432*t1471*t2574*t2987;
  t14105 = t13025 + t13553;
  t14126 = -1.*t6432*t3353*t1471*t2574;
  t14207 = -1.*t1471*t2323*t2987;
  t14242 = t14126 + t14207;
  t11727 = -1.*t3353;
  t11826 = 1. + t11727;
  t6800 = -1.*t679;
  t11247 = 1. + t6800;
  t18435 = -1.*t679*t1471;
  t18451 = -1.*t20*t2323*t2574;
  t18453 = t18435 + t18451;
  t18461 = -1.*t20*t6432*t3353;
  t18658 = t18453*t2987;
  t18662 = t18461 + t18658;
  t18678 = t3353*t18453;
  t18683 = t20*t6432*t2987;
  t18696 = t18678 + t18683;
  t2721 = t20*t679;
  t2821 = -1.*t1471*t2323*t2574;
  t2908 = t2721 + t2821;
  t19289 = t6432*t3353*t1471;
  t19290 = -1.*t2908*t2987;
  t19291 = t19289 + t19290;
  t19218 = t3353*t2908;
  t19222 = t6432*t1471*t2987;
  t19254 = t19218 + t19222;
  t19335 = -1.*t6432*t3353*t1471;
  t19340 = t2908*t2987;
  t19350 = t19335 + t19340;
  t20102 = t20*t3353*t2323;
  t20103 = -1.*t20*t6432*t2574*t2987;
  t20104 = t20102 + t20103;
  t20078 = t20*t6432*t3353*t2574;
  t20079 = t20*t2323*t2987;
  t20080 = t20078 + t20079;
  t20338 = -1.*t20*t3353*t2323;
  t20339 = t20*t6432*t2574*t2987;
  t20340 = t20338 + t20339;
  t11487 = 0.1575*t6432*t11247*t1471;
  t11547 = 0.2255*t6432*t679*t1471;
  t12775 = 0.325*t11826*t1471*t2323;
  t13002 = 0.325*t6432*t1471*t2574*t2987;
  t14112 = 0.075*t3307*t14105;
  t14295 = 0.075*t14242*t3417;
  t14371 = t2995*t14105;
  t14372 = -1.*t14242*t3417;
  t14383 = t14371 + t14372;
  t14387 = 0.355*t14383;
  t14397 = t2995*t14242;
  t14417 = t14105*t3417;
  t17557 = t14397 + t14417;
  t17850 = -0.0641*t17557;
  t17856 = t11487 + t11547 + t12775 + t13002 + t14112 + t14295 + t14387 + t17850;
  t18178 = -0.325*t20*t6432*t11826;
  t18390 = 0.1575*t20*t11247*t2323;
  t20576 = -1.*t20*t2323*t2574*t2987;
  t20594 = t18461 + t20576;
  t20596 = -1.*t20*t3353*t2323*t2574;
  t20597 = t20596 + t18683;
  t19649 = 0.068*t20*t6432*t2574;
  t19684 = -0.325*t20*t6432*t679*t2987;
  t19703 = 0.075*t20*t6432*t679*t3307*t2987;
  t19704 = 0.075*t20*t6432*t679*t3353*t3417;
  t19705 = t20*t6432*t679*t2995*t2987;
  t19716 = -1.*t20*t6432*t679*t3353*t3417;
  t19729 = t19705 + t19716;
  t19733 = 0.355*t19729;
  t19738 = t20*t6432*t679*t3353*t2995;
  t19739 = t20*t6432*t679*t2987*t3417;
  t19859 = t19738 + t19739;
  t19942 = -0.0641*t19859;
  t19943 = t19649 + t19684 + t19703 + t19704 + t19733 + t19942;
  t1080 = -0.1575*t20*t679;
  t2720 = 0.1575*t1471*t2323*t2574;
  t2920 = 0.2255*t2908;
  t2994 = -0.325*t2974*t2987;
  t3348 = 0.075*t3307*t2974*t2987;
  t3646 = 0.075*t3353*t2974*t3417;
  t3750 = t2995*t2974*t2987;
  t3823 = -1.*t3353*t2974*t3417;
  t3870 = t3750 + t3823;
  t4472 = 0.355*t3870;
  t4629 = t3353*t2995*t2974;
  t4967 = t2974*t2987*t3417;
  t4992 = t4629 + t4967;
  t6005 = -0.0641*t4992;
  t6024 = t1080 + t2720 + t2920 + t2994 + t3348 + t3646 + t4472 + t6005;
  t18404 = t20*t679*t2323;
  t18411 = -1.*t1471*t2574;
  t18412 = t18404 + t18411;
  t18394 = 0.1575*t1471*t2574;
  t18415 = 0.2255*t18412;
  t18460 = -0.325*t18453*t2987;
  t20924 = -0.325*t3353*t18412;
  t20925 = 0.075*t3353*t3307*t18412;
  t20926 = -0.075*t18412*t2987*t3417;
  t20927 = -1.*t2995*t18412*t2987;
  t20928 = t3353*t18412*t3417;
  t20929 = t20927 + t20928;
  t20931 = -0.0641*t20929;
  t20933 = t3353*t2995*t18412;
  t20938 = t18412*t2987*t3417;
  t20939 = t20933 + t20938;
  t20941 = 0.355*t20939;
  t20967 = t20924 + t20925 + t20926 + t20931 + t20941;
  t20075 = -0.325*t20*t6432*t3353*t2574;
  t20076 = -0.325*t20*t2323*t2987;
  t20097 = 0.075*t3307*t20080;
  t20106 = 0.075*t20104*t3417;
  t20107 = t2995*t20104;
  t20124 = t20080*t3417;
  t20307 = t20107 + t20124;
  t20321 = -0.0641*t20307;
  t20322 = t2995*t20080;
  t20323 = -1.*t20104*t3417;
  t20324 = t20322 + t20323;
  t20330 = 0.355*t20324;
  t20333 = t20075 + t20076 + t20097 + t20106 + t20321 + t20330;
  t21069 = t679*t1471;
  t21070 = t20*t2323*t2574;
  t21074 = t21069 + t21070;
  t21078 = -1.*t21074*t2987;
  t21082 = t18461 + t21078;
  t21084 = t3353*t21074;
  t21109 = -1.*t20*t6432*t2987;
  t21112 = t21084 + t21109;
  t21156 = -1.*t3353*t21074;
  t21157 = t21156 + t18683;
  t19207 = -0.325*t3353*t2908;
  t19214 = -0.325*t6432*t1471*t2987;
  t19276 = 0.075*t3307*t19254;
  t19294 = 0.075*t19291*t3417;
  t19296 = t2995*t19291;
  t19306 = t19254*t3417;
  t19309 = t19296 + t19306;
  t19314 = -0.0641*t19309;
  t19315 = t2995*t19254;
  t19317 = -1.*t19291*t3417;
  t19318 = t19315 + t19317;
  t19321 = 0.355*t19318;
  t19324 = t19207 + t19214 + t19276 + t19294 + t19314 + t19321;
  t20779 = 0.075*t3353*t2995*t18412;
  t20780 = 0.075*t18412*t2987*t3417;
  t20781 = t2995*t18412*t2987;
  t20782 = -1.*t3353*t18412*t3417;
  t20803 = t20781 + t20782;
  t20825 = -0.0641*t20803;
  t20864 = -1.*t3353*t2995*t18412;
  t20897 = -1.*t18412*t2987*t3417;
  t20898 = t20864 + t20897;
  t20899 = 0.355*t20898;
  t20903 = t20779 + t20780 + t20825 + t20899;
  t20335 = 0.075*t2995*t20080;
  t20341 = 0.075*t20340*t3417;
  t20382 = t2995*t20340;
  t20388 = -1.*t20080*t3417;
  t20392 = t20382 + t20388;
  t20393 = -0.0641*t20392;
  t20394 = -1.*t2995*t20080;
  t20395 = -1.*t20340*t3417;
  t20396 = t20394 + t20395;
  t20398 = 0.355*t20396;
  t20399 = t20335 + t20341 + t20393 + t20398;
  t21083 = 0.075*t2995*t21082;
  t21113 = 0.075*t21112*t3417;
  t21128 = -1.*t2995*t21082;
  t21130 = -1.*t21112*t3417;
  t21134 = t21128 + t21130;
  t21136 = 0.355*t21134;
  t21138 = t2995*t21112;
  t21139 = -1.*t21082*t3417;
  t21144 = t21138 + t21139;
  t21147 = -0.0641*t21144;
  t21148 = t21083 + t21113 + t21136 + t21147;
  t21192 = t20*t6432*t3353;
  t21194 = t21074*t2987;
  t21195 = t21192 + t21194;
  t19332 = 0.075*t2995*t19254;
  t19467 = 0.075*t19350*t3417;
  t19475 = t2995*t19350;
  t19478 = -1.*t19254*t3417;
  t19482 = t19475 + t19478;
  t19488 = -0.0641*t19482;
  t19497 = -1.*t2995*t19254;
  t19501 = -1.*t19350*t3417;
  t19503 = t19497 + t19501;
  t19504 = 0.355*t19503;
  t19554 = t19332 + t19467 + t19488 + t19504;
  t21168 = t2995*t21082;
  t21200 = t21112*t3417;
  t21203 = -1.*t2995*t21112;
  t21204 = -1.*t21195*t3417;
  t21206 = t21203 + t21204;
  t21272 = Cos(var1[3]);
  t21275 = Sin(var1[3]);
  t21276 = -1.*t6432*t21275;
  t21277 = -1.*t21272*t1471*t2323;
  t21278 = t21276 + t21277;
  t21284 = -1.*t679*t21278;
  t21285 = t21272*t20*t2574;
  t21286 = t21284 + t21285;
  t21300 = -1.*t21272*t6432*t1471;
  t21301 = t21275*t2323;
  t21302 = t21300 + t21301;
  t21307 = t3353*t21278;
  t21308 = -1.*t21302*t2574*t2987;
  t21309 = t21307 + t21308;
  t21311 = -1.*t3353*t21302*t2574;
  t21312 = -1.*t21278*t2987;
  t21313 = t21311 + t21312;
  t21337 = t21272*t679*t1471;
  t21338 = t21272*t20*t2323*t2574;
  t21339 = t21337 + t21338;
  t21341 = t21272*t20*t6432*t3353;
  t21342 = t21339*t2987;
  t21343 = t21341 + t21342;
  t21345 = t3353*t21339;
  t21346 = -1.*t21272*t20*t6432*t2987;
  t21347 = t21345 + t21346;
  t21280 = -1.*t21272*t20*t679;
  t21281 = -1.*t21278*t2574;
  t21282 = t21280 + t21281;
  t21362 = t21272*t6432*t1471;
  t21363 = -1.*t21275*t2323;
  t21364 = t21362 + t21363;
  t21373 = -1.*t3353*t21364;
  t21374 = -1.*t21282*t2987;
  t21375 = t21373 + t21374;
  t21366 = t3353*t21282;
  t21369 = -1.*t21364*t2987;
  t21370 = t21366 + t21369;
  t21390 = t3353*t21364;
  t21391 = t21282*t2987;
  t21392 = t21390 + t21391;
  t21415 = -1.*t21272*t6432;
  t21416 = t21275*t1471*t2323;
  t21417 = t21415 + t21416;
  t21410 = -1.*t6432*t21275*t1471;
  t21411 = -1.*t21272*t2323;
  t21412 = t21410 + t21411;
  t21427 = t20*t679*t21275;
  t21428 = -1.*t21417*t2574;
  t21429 = t21427 + t21428;
  t21432 = t3353*t21412;
  t21433 = t21429*t2987;
  t21435 = t21432 + t21433;
  t21437 = t3353*t21429;
  t21439 = -1.*t21412*t2987;
  t21441 = t21437 + t21439;
  t21462 = t20*t679*t21275*t2323;
  t21463 = -1.*t21275*t1471*t2574;
  t21464 = t21462 + t21463;
  t21483 = -1.*t20*t3353*t21275*t2323;
  t21484 = t20*t6432*t21275*t2574*t2987;
  t21485 = t21483 + t21484;
  t21487 = t20*t6432*t3353*t21275*t2574;
  t21488 = t20*t21275*t2323*t2987;
  t21489 = t21487 + t21488;
  t21327 = 0.325*t21272*t20*t6432*t11826;
  t21328 = -0.1575*t21272*t20*t11247*t2323;
  t21329 = -0.1575*t21272*t1471*t2574;
  t21331 = -1.*t21272*t20*t679*t2323;
  t21333 = t21272*t1471*t2574;
  t21334 = t21331 + t21333;
  t21335 = 0.2255*t21334;
  t21340 = -0.325*t21339*t2987;
  t21344 = 0.075*t3307*t21343;
  t21348 = 0.075*t21347*t3417;
  t21350 = t2995*t21343;
  t21351 = -1.*t21347*t3417;
  t21352 = t21350 + t21351;
  t21353 = 0.355*t21352;
  t21355 = t2995*t21347;
  t21356 = t21343*t3417;
  t21357 = t21355 + t21356;
  t21358 = -0.0641*t21357;
  t21359 = t21327 + t21328 + t21329 + t21335 + t21340 + t21344 + t21348 + t21353 + t21358;
  t21458 = t679*t21275*t1471;
  t21459 = t20*t21275*t2323*t2574;
  t21460 = t21458 + t21459;
  t21509 = -1.*t20*t6432*t3353*t21275;
  t21510 = -1.*t21460*t2987;
  t21511 = t21509 + t21510;
  t21505 = t3353*t21460;
  t21506 = -1.*t20*t6432*t21275*t2987;
  t21507 = t21505 + t21506;
  t21524 = t20*t6432*t3353*t21275;
  t21525 = t21460*t2987;
  t21526 = t21524 + t21525;
  t21420 = -0.1575*t20*t21275*t2574;
  t21423 = t20*t21275*t2574;
  t21544 = -1.*t21275*t1471*t2323*t2574;
  t21545 = t21427 + t21544;
  t21547 = -1.*t6432*t3353*t21275*t1471;
  t21548 = t21545*t2987;
  t21549 = t21547 + t21548;
  t21551 = t3353*t21545;
  t21552 = t6432*t21275*t1471*t2987;
  t21553 = t21551 + t21552;
  t21479 = -0.1575*t20*t6432*t11247*t21275;
  t21480 = -0.2255*t20*t6432*t679*t21275;
  t21481 = -0.325*t20*t11826*t21275*t2323;
  t21482 = -0.325*t20*t6432*t21275*t2574*t2987;
  t21486 = 0.075*t3307*t21485;
  t21490 = 0.075*t21489*t3417;
  t21491 = t2995*t21485;
  t21492 = -1.*t21489*t3417;
  t21494 = t21491 + t21492;
  t21495 = 0.355*t21494;
  t21496 = t2995*t21489;
  t21497 = t21485*t3417;
  t21498 = t21496 + t21497;
  t21499 = -0.0641*t21498;
  t21500 = t21479 + t21480 + t21481 + t21482 + t21486 + t21490 + t21495 + t21499;
  t21584 = t21272*t6432;
  t21585 = -1.*t21275*t1471*t2323;
  t21586 = t21584 + t21585;
  t21591 = t3353*t21586;
  t21592 = -1.*t21412*t2574*t2987;
  t21593 = t21591 + t21592;
  t21583 = -1.*t3353*t21412*t2574;
  t21587 = -1.*t21586*t2987;
  t21588 = t21583 + t21587;
  t21612 = -1.*t3353*t21586;
  t21614 = t21412*t2574*t2987;
  t21615 = t21612 + t21614;
  t21303 = 0.1575*t11247*t21302;
  t21304 = 0.2255*t679*t21302;
  t21305 = 0.325*t11826*t21278;
  t21306 = 0.325*t21302*t2574*t2987;
  t21310 = 0.075*t3307*t21309;
  t21314 = 0.075*t21313*t3417;
  t21315 = t2995*t21309;
  t21316 = -1.*t21313*t3417;
  t21317 = t21315 + t21316;
  t21318 = 0.355*t21317;
  t21319 = t2995*t21313;
  t21320 = t21309*t3417;
  t21321 = t21319 + t21320;
  t21322 = -0.0641*t21321;
  t21325 = t21303 + t21304 + t21305 + t21306 + t21310 + t21314 + t21318 + t21322;
  t21414 = 0.325*t11826*t21412;
  t21419 = 0.1575*t11247*t21417;
  t21633 = -1.*t21417*t2574*t2987;
  t21634 = t21432 + t21633;
  t21636 = -1.*t3353*t21417*t2574;
  t21638 = t21636 + t21439;
  t21567 = -0.068*t21412*t2574;
  t21568 = 0.325*t679*t21412*t2987;
  t21569 = -0.075*t679*t3307*t21412*t2987;
  t21570 = -0.075*t679*t3353*t21412*t3417;
  t21571 = -1.*t679*t2995*t21412*t2987;
  t21572 = t679*t3353*t21412*t3417;
  t21573 = t21571 + t21572;
  t21574 = 0.355*t21573;
  t21575 = -1.*t679*t3353*t2995*t21412;
  t21576 = -1.*t679*t21412*t2987*t3417;
  t21577 = t21575 + t21576;
  t21578 = -0.0641*t21577;
  t21579 = t21567 + t21568 + t21569 + t21570 + t21574 + t21578;
  t21273 = 0.1575*t21272*t20*t679;
  t21279 = 0.1575*t21278*t2574;
  t21283 = 0.2255*t21282;
  t21287 = -0.325*t21286*t2987;
  t21288 = 0.075*t3307*t21286*t2987;
  t21289 = 0.075*t3353*t21286*t3417;
  t21290 = t2995*t21286*t2987;
  t21291 = -1.*t3353*t21286*t3417;
  t21292 = t21290 + t21291;
  t21293 = 0.355*t21292;
  t21294 = t3353*t2995*t21286;
  t21295 = t21286*t2987*t3417;
  t21296 = t21294 + t21295;
  t21297 = -0.0641*t21296;
  t21298 = t21273 + t21279 + t21283 + t21287 + t21288 + t21289 + t21293 + t21297;
  t21656 = -1.*t679*t21586;
  t21657 = t21656 + t21423;
  t21456 = -0.1575*t679*t21275*t1471;
  t21457 = -0.1575*t20*t21275*t2323*t2574;
  t21461 = 0.2255*t21460;
  t21465 = -0.325*t21464*t2987;
  t21466 = 0.075*t3307*t21464*t2987;
  t21467 = 0.075*t3353*t21464*t3417;
  t21469 = t2995*t21464*t2987;
  t21470 = -1.*t3353*t21464*t3417;
  t21471 = t21469 + t21470;
  t21472 = 0.355*t21471;
  t21473 = t3353*t2995*t21464;
  t21474 = t21464*t2987*t3417;
  t21475 = t21473 + t21474;
  t21476 = -0.0641*t21475;
  t21477 = t21456 + t21457 + t21461 + t21465 + t21466 + t21467 + t21472 + t21476;
  t21689 = t21586*t2574;
  t21690 = t21427 + t21689;
  t21671 = -0.325*t3353*t21657;
  t21672 = 0.075*t3353*t3307*t21657;
  t21673 = -0.075*t21657*t2987*t3417;
  t21674 = -1.*t2995*t21657*t2987;
  t21676 = t3353*t21657*t3417;
  t21677 = t21674 + t21676;
  t21678 = -0.0641*t21677;
  t21679 = t3353*t2995*t21657;
  t21680 = t21657*t2987*t3417;
  t21681 = t21679 + t21680;
  t21682 = 0.355*t21681;
  t21683 = t21671 + t21672 + t21673 + t21678 + t21682;
  t21608 = 0.325*t3353*t21412*t2574;
  t21610 = 0.325*t21586*t2987;
  t21611 = 0.075*t3307*t21588;
  t21616 = 0.075*t21615*t3417;
  t21617 = t2995*t21615;
  t21618 = t21588*t3417;
  t21619 = t21617 + t21618;
  t21620 = -0.0641*t21619;
  t21622 = t2995*t21588;
  t21623 = -1.*t21615*t3417;
  t21624 = t21622 + t21623;
  t21625 = 0.355*t21624;
  t21626 = t21608 + t21610 + t21611 + t21616 + t21620 + t21625;
  t21503 = -0.325*t3353*t21460;
  t21504 = 0.325*t20*t6432*t21275*t2987;
  t21508 = 0.075*t3307*t21507;
  t21512 = 0.075*t21511*t3417;
  t21513 = t2995*t21511;
  t21514 = t21507*t3417;
  t21515 = t21513 + t21514;
  t21516 = -0.0641*t21515;
  t21517 = t2995*t21507;
  t21518 = -1.*t21511*t3417;
  t21519 = t21517 + t21518;
  t21520 = 0.355*t21519;
  t21521 = t21503 + t21504 + t21508 + t21512 + t21516 + t21520;
  t21361 = -0.325*t3353*t21282;
  t21365 = 0.325*t21364*t2987;
  t21372 = 0.075*t3307*t21370;
  t21376 = 0.075*t21375*t3417;
  t21377 = t2995*t21375;
  t21378 = t21370*t3417;
  t21380 = t21377 + t21378;
  t21381 = -0.0641*t21380;
  t21382 = t2995*t21370;
  t21383 = -1.*t21375*t3417;
  t21384 = t21382 + t21383;
  t21385 = 0.355*t21384;
  t21386 = t21361 + t21365 + t21372 + t21376 + t21381 + t21385;
  t21719 = -1.*t20*t679*t21275;
  t21720 = -1.*t21586*t2574;
  t21721 = t21719 + t21720;
  t21715 = t6432*t21275*t1471;
  t21716 = t21272*t2323;
  t21717 = t21715 + t21716;
  t21718 = -1.*t3353*t21717;
  t21723 = -1.*t21721*t2987;
  t21724 = t21718 + t21723;
  t21727 = t3353*t21721;
  t21728 = -1.*t21717*t2987;
  t21729 = t21727 + t21728;
  t21747 = -1.*t3353*t21721;
  t21749 = t21717*t2987;
  t21750 = t21747 + t21749;
  t21658 = 0.075*t3353*t2995*t21657;
  t21659 = 0.075*t21657*t2987*t3417;
  t21660 = t2995*t21657*t2987;
  t21661 = -1.*t3353*t21657*t3417;
  t21662 = t21660 + t21661;
  t21663 = -0.0641*t21662;
  t21664 = -1.*t3353*t2995*t21657;
  t21665 = -1.*t21657*t2987*t3417;
  t21666 = t21664 + t21665;
  t21667 = 0.355*t21666;
  t21669 = t21658 + t21659 + t21663 + t21667;
  t21589 = 0.075*t2995*t21588;
  t21594 = 0.075*t21593*t3417;
  t21595 = t2995*t21593;
  t21596 = -1.*t21588*t3417;
  t21597 = t21595 + t21596;
  t21599 = -0.0641*t21597;
  t21601 = -1.*t2995*t21588;
  t21602 = -1.*t21593*t3417;
  t21603 = t21601 + t21602;
  t21604 = 0.355*t21603;
  t21605 = t21589 + t21594 + t21599 + t21604;
  t21523 = 0.075*t2995*t21507;
  t21527 = 0.075*t21526*t3417;
  t21528 = t2995*t21526;
  t21529 = -1.*t21507*t3417;
  t21530 = t21528 + t21529;
  t21531 = -0.0641*t21530;
  t21532 = -1.*t2995*t21507;
  t21533 = -1.*t21526*t3417;
  t21534 = t21532 + t21533;
  t21535 = 0.355*t21534;
  t21536 = t21523 + t21527 + t21531 + t21535;
  t21388 = 0.075*t2995*t21370;
  t21395 = 0.075*t21392*t3417;
  t21398 = t2995*t21392;
  t21399 = -1.*t21370*t3417;
  t21400 = t21398 + t21399;
  t21402 = -0.0641*t21400;
  t21403 = -1.*t2995*t21370;
  t21404 = -1.*t21392*t3417;
  t21405 = t21403 + t21404;
  t21406 = 0.355*t21405;
  t21407 = t21388 + t21395 + t21402 + t21406;
  t21725 = 0.075*t2995*t21724;
  t21731 = 0.075*t21729*t3417;
  t21732 = -1.*t2995*t21724;
  t21733 = -1.*t21729*t3417;
  t21734 = t21732 + t21733;
  t21735 = 0.355*t21734;
  t21737 = t2995*t21729;
  t21738 = -1.*t21724*t3417;
  t21739 = t21737 + t21738;
  t21740 = -0.0641*t21739;
  t21741 = t21725 + t21731 + t21735 + t21740;
  t21769 = t3353*t21717;
  t21770 = t21721*t2987;
  t21771 = t21769 + t21770;
  t21752 = t2995*t21724;
  t21775 = t21729*t3417;
  t21779 = -1.*t2995*t21729;
  t21780 = -1.*t21771*t3417;
  t21781 = t21779 + t21780;
  t21834 = 0.1575*t20*t679*t21275;
  t21835 = 0.1575*t21586*t2574;
  t21836 = 0.2255*t21721;
  t21837 = -0.325*t21657*t2987;
  t21838 = 0.075*t3307*t21657*t2987;
  t21839 = 0.075*t3353*t21657*t3417;
  t21840 = 0.355*t21662;
  t21841 = -0.0641*t21681;
  t21842 = t21834 + t21835 + t21836 + t21837 + t21838 + t21839 + t21840 + t21841;
  t21820 = 0.1575*t11247*t21412;
  t21821 = 0.2255*t679*t21412;
  t21822 = 0.325*t11826*t21586;
  t21823 = 0.325*t21412*t2574*t2987;
  t21824 = 0.075*t3307*t21593;
  t21825 = 0.075*t21588*t3417;
  t21826 = 0.355*t21597;
  t21827 = t21593*t3417;
  t21828 = t21622 + t21827;
  t21831 = -0.0641*t21828;
  t21832 = t21820 + t21821 + t21822 + t21823 + t21824 + t21825 + t21826 + t21831;
  t21804 = 0.325*t20*t6432*t11826*t21275;
  t21805 = -0.1575*t20*t11247*t21275*t2323;
  t21806 = -0.1575*t21275*t1471*t2574;
  t21807 = -1.*t20*t679*t21275*t2323;
  t21808 = t21275*t1471*t2574;
  t21809 = t21807 + t21808;
  t21810 = 0.2255*t21809;
  t21811 = -0.325*t21460*t2987;
  t21812 = 0.075*t3307*t21526;
  t21813 = 0.075*t21507*t3417;
  t21814 = 0.355*t21530;
  t21815 = t21526*t3417;
  t21817 = t21517 + t21815;
  t21818 = -0.0641*t21817;
  t21819 = t21804 + t21805 + t21806 + t21810 + t21811 + t21812 + t21813 + t21814 + t21818;
  t21786 = 0.325*t11826*t21364;
  t21787 = 0.1575*t11247*t21278;
  t21788 = 0.1575*t21272*t20*t2574;
  t21789 = t679*t21278;
  t21791 = -1.*t21272*t20*t2574;
  t21792 = t21789 + t21791;
  t21793 = 0.2255*t21792;
  t21794 = -0.325*t21282*t2987;
  t21795 = 0.075*t3307*t21392;
  t21796 = 0.075*t21370*t3417;
  t21797 = 0.355*t21400;
  t21798 = t21392*t3417;
  t21800 = t21382 + t21798;
  t21801 = -0.0641*t21800;
  t21802 = t21786 + t21787 + t21788 + t21793 + t21794 + t21795 + t21796 + t21797 + t21801;
  t21843 = -0.325*t3353*t21721;
  t21844 = 0.325*t21717*t2987;
  t21845 = 0.075*t3307*t21729;
  t21846 = 0.075*t21724*t3417;
  t21847 = t21752 + t21775;
  t21848 = -0.0641*t21847;
  t21849 = 0.355*t21739;
  t21850 = t21843 + t21844 + t21845 + t21846 + t21848 + t21849;
  t21851 = 0.075*t2995*t21729;
  t21852 = 0.075*t21771*t3417;
  t21853 = t2995*t21771;
  t21854 = t21853 + t21733;
  t21855 = -0.0641*t21854;
  t21856 = 0.355*t21781;
  t21857 = t21851 + t21852 + t21855 + t21856;
  t21890 = t21272*t20*t3353*t2323;
  t21891 = -1.*t21272*t20*t6432*t2574*t2987;
  t21892 = t21890 + t21891;
  t21894 = -1.*t21272*t20*t6432*t3353*t2574;
  t21895 = -1.*t21272*t20*t2323*t2987;
  t21896 = t21894 + t21895;
  t21868 = -1.*t21272*t679*t1471;
  t21869 = -1.*t21272*t20*t2323*t2574;
  t21870 = t21868 + t21869;
  t21916 = -1.*t21870*t2987;
  t21917 = t21341 + t21916;
  t21912 = t3353*t21870;
  t21913 = t21272*t20*t6432*t2987;
  t21914 = t21912 + t21913;
  t21931 = -1.*t21272*t20*t6432*t3353;
  t21932 = t21870*t2987;
  t21933 = t21931 + t21932;
  t21952 = t21272*t1471*t2323*t2574;
  t21954 = t21280 + t21952;
  t21956 = t21272*t6432*t3353*t1471;
  t21957 = t21954*t2987;
  t21958 = t21956 + t21957;
  t21960 = t3353*t21954;
  t21961 = -1.*t21272*t6432*t1471*t2987;
  t21962 = t21960 + t21961;
  t21886 = 0.1575*t21272*t20*t6432*t11247;
  t21887 = 0.2255*t21272*t20*t6432*t679;
  t21888 = 0.325*t21272*t20*t11826*t2323;
  t21889 = 0.325*t21272*t20*t6432*t2574*t2987;
  t21893 = 0.075*t3307*t21892;
  t21897 = 0.075*t21896*t3417;
  t21898 = t2995*t21892;
  t21899 = -1.*t21896*t3417;
  t21900 = t21898 + t21899;
  t21901 = 0.355*t21900;
  t21902 = t2995*t21896;
  t21903 = t21892*t3417;
  t21904 = t21902 + t21903;
  t21906 = -0.0641*t21904;
  t21907 = t21886 + t21887 + t21888 + t21889 + t21893 + t21897 + t21901 + t21906;
  t21994 = t6432*t21275;
  t21995 = t21272*t1471*t2323;
  t21996 = t21994 + t21995;
  t22000 = t3353*t21996;
  t22001 = -1.*t21364*t2574*t2987;
  t22002 = t22000 + t22001;
  t21993 = -1.*t3353*t21364*t2574;
  t21997 = -1.*t21996*t2987;
  t21998 = t21993 + t21997;
  t22017 = -1.*t3353*t21996;
  t22018 = t21364*t2574*t2987;
  t22019 = t22017 + t22018;
  t22033 = -1.*t21278*t2574*t2987;
  t22034 = t21390 + t22033;
  t22036 = -1.*t3353*t21278*t2574;
  t22037 = t22036 + t21369;
  t21977 = -0.068*t21364*t2574;
  t21978 = 0.325*t679*t21364*t2987;
  t21979 = -0.075*t679*t3307*t21364*t2987;
  t21980 = -0.075*t679*t3353*t21364*t3417;
  t21981 = -1.*t679*t2995*t21364*t2987;
  t21982 = t679*t3353*t21364*t3417;
  t21983 = t21981 + t21982;
  t21984 = 0.355*t21983;
  t21985 = -1.*t679*t3353*t2995*t21364;
  t21986 = -1.*t679*t21364*t2987*t3417;
  t21987 = t21985 + t21986;
  t21988 = -0.0641*t21987;
  t21989 = t21977 + t21978 + t21979 + t21980 + t21984 + t21988;
  t22052 = -1.*t679*t21996;
  t22054 = t22052 + t21791;
  t21866 = 0.1575*t21272*t679*t1471;
  t21867 = 0.1575*t21272*t20*t2323*t2574;
  t21871 = 0.2255*t21870;
  t21872 = -0.325*t21334*t2987;
  t21873 = 0.075*t3307*t21334*t2987;
  t21874 = 0.075*t3353*t21334*t3417;
  t21875 = t2995*t21334*t2987;
  t21876 = -1.*t3353*t21334*t3417;
  t21877 = t21875 + t21876;
  t21878 = 0.355*t21877;
  t21879 = t3353*t2995*t21334;
  t21881 = t21334*t2987*t3417;
  t21882 = t21879 + t21881;
  t21883 = -0.0641*t21882;
  t21884 = t21866 + t21867 + t21871 + t21872 + t21873 + t21874 + t21878 + t21883;
  t22085 = t21996*t2574;
  t22086 = t21280 + t22085;
  t22067 = -0.325*t3353*t22054;
  t22068 = 0.075*t3353*t3307*t22054;
  t22069 = -0.075*t22054*t2987*t3417;
  t22070 = -1.*t2995*t22054*t2987;
  t22071 = t3353*t22054*t3417;
  t22072 = t22070 + t22071;
  t22073 = -0.0641*t22072;
  t22074 = t3353*t2995*t22054;
  t22075 = t22054*t2987*t3417;
  t22076 = t22074 + t22075;
  t22077 = 0.355*t22076;
  t22078 = t22067 + t22068 + t22069 + t22073 + t22077;
  t22014 = 0.325*t3353*t21364*t2574;
  t22015 = 0.325*t21996*t2987;
  t22016 = 0.075*t3307*t21998;
  t22020 = 0.075*t22019*t3417;
  t22021 = t2995*t22019;
  t22022 = t21998*t3417;
  t22023 = t22021 + t22022;
  t22024 = -0.0641*t22023;
  t22025 = t2995*t21998;
  t22026 = -1.*t22019*t3417;
  t22027 = t22025 + t22026;
  t22028 = 0.355*t22027;
  t22029 = t22014 + t22015 + t22016 + t22020 + t22024 + t22028;
  t21910 = -0.325*t3353*t21870;
  t21911 = -0.325*t21272*t20*t6432*t2987;
  t21915 = 0.075*t3307*t21914;
  t21919 = 0.075*t21917*t3417;
  t21920 = t2995*t21917;
  t21921 = t21914*t3417;
  t21922 = t21920 + t21921;
  t21923 = -0.0641*t21922;
  t21924 = t2995*t21914;
  t21925 = -1.*t21917*t3417;
  t21926 = t21924 + t21925;
  t21927 = 0.355*t21926;
  t21928 = t21910 + t21911 + t21915 + t21919 + t21923 + t21927;
  t22106 = t21272*t20*t679;
  t22107 = -1.*t21996*t2574;
  t22108 = t22106 + t22107;
  t22105 = -1.*t3353*t21302;
  t22109 = -1.*t22108*t2987;
  t22110 = t22105 + t22109;
  t22112 = t3353*t22108;
  t22113 = -1.*t21302*t2987;
  t22114 = t22112 + t22113;
  t22130 = -1.*t3353*t22108;
  t22131 = t21302*t2987;
  t22132 = t22130 + t22131;
  t22055 = 0.075*t3353*t2995*t22054;
  t22056 = 0.075*t22054*t2987*t3417;
  t22057 = t2995*t22054*t2987;
  t22058 = -1.*t3353*t22054*t3417;
  t22059 = t22057 + t22058;
  t22060 = -0.0641*t22059;
  t22061 = -1.*t3353*t2995*t22054;
  t22062 = -1.*t22054*t2987*t3417;
  t22063 = t22061 + t22062;
  t22064 = 0.355*t22063;
  t22065 = t22055 + t22056 + t22060 + t22064;
  t21999 = 0.075*t2995*t21998;
  t22003 = 0.075*t22002*t3417;
  t22004 = t2995*t22002;
  t22005 = -1.*t21998*t3417;
  t22006 = t22004 + t22005;
  t22007 = -0.0641*t22006;
  t22008 = -1.*t2995*t21998;
  t22009 = -1.*t22002*t3417;
  t22010 = t22008 + t22009;
  t22011 = 0.355*t22010;
  t22012 = t21999 + t22003 + t22007 + t22011;
  t21930 = 0.075*t2995*t21914;
  t21934 = 0.075*t21933*t3417;
  t21935 = t2995*t21933;
  t21936 = -1.*t21914*t3417;
  t21937 = t21935 + t21936;
  t21938 = -0.0641*t21937;
  t21939 = -1.*t2995*t21914;
  t21940 = -1.*t21933*t3417;
  t21941 = t21939 + t21940;
  t21942 = 0.355*t21941;
  t21944 = t21930 + t21934 + t21938 + t21942;
  t22111 = 0.075*t2995*t22110;
  t22115 = 0.075*t22114*t3417;
  t22116 = -1.*t2995*t22110;
  t22118 = -1.*t22114*t3417;
  t22119 = t22116 + t22118;
  t22120 = 0.355*t22119;
  t22121 = t2995*t22114;
  t22122 = -1.*t22110*t3417;
  t22123 = t22121 + t22122;
  t22124 = -0.0641*t22123;
  t22125 = t22111 + t22115 + t22120 + t22124;
  t22152 = t3353*t21302;
  t22153 = t22108*t2987;
  t22154 = t22152 + t22153;
  t22135 = t2995*t22110;
  t22158 = t22114*t3417;
  t22161 = -1.*t2995*t22114;
  t22162 = -1.*t22154*t3417;
  t22163 = t22161 + t22162;
  p_output1[0]=(t18178 + t18390 + t18394 + t18415 + t18460 + 0.075*t18662*t3307 + 0.075*t18696*t3417 - 0.0641*(t18696*t2995 + t18662*t3417) + 0.355*(t18662*t2995 - 1.*t18696*t3417))*var2[4] + t17856*var2[5] + t6024*var2[6] + t19324*var2[7] + t19554*var2[8];
  p_output1[1]=t17856*var2[4] + (t18178 + t18390 + 0.325*t20*t2323*t2574*t2987 + 0.075*t20594*t3307 + 0.075*t20597*t3417 - 0.0641*(t20597*t2995 + t20594*t3417) + 0.355*(t20594*t2995 - 1.*t20597*t3417) + 0.2255*t20*t2323*t679)*var2[5] + t19943*var2[6] + t20333*var2[7] + t20399*var2[8];
  p_output1[2]=t6024*var2[4] + t19943*var2[5] + (t18394 + t18415 + t18460 + 0.075*t18453*t2987*t3307 + 0.075*t18453*t3353*t3417 - 0.0641*(t18453*t2995*t3353 + t18453*t2987*t3417) + 0.355*(t18453*t2987*t2995 - 1.*t18453*t3353*t3417) - 0.1575*t20*t2323*t679)*var2[6] + t20967*var2[7] + t20903*var2[8];
  p_output1[3]=t19324*var2[4] + t20333*var2[5] + t20967*var2[6] + (0.325*t21074*t2987 + 0.075*t21082*t3307 + 0.075*t21157*t3417 - 0.0641*(t21157*t2995 + t21082*t3417) + 0.355*(t21168 - 1.*t21157*t3417) + 0.325*t20*t3353*t6432)*var2[7] + t21148*var2[8];
  p_output1[4]=t19554*var2[4] + t20399*var2[5] + t20903*var2[6] + t21148*var2[7] + (-0.0641*t21206 + 0.075*t21195*t2995 + 0.355*(t21200 - 1.*t21195*t2995) - 0.075*t21112*t3417)*var2[8];
  p_output1[5]=1.;
  p_output1[6]=0.355*t19482 + 0.1575*t11247*t1471*t2323 - 0.1575*t20*t2574 - 0.325*t2908*t2987 + 0.075*t19350*t3307 + 0.075*t19254*t3417 - 0.0641*(t19315 + t19350*t3417) - 0.325*t11826*t1471*t6432 + 0.2255*(t20*t2574 + t1471*t2323*t679);
  p_output1[7]=0.355*t20392 - 0.325*t11826*t20*t2323 + 0.075*t20340*t3307 + 0.075*t20080*t3417 - 0.0641*(t20322 + t20340*t3417) - 0.1575*t11247*t20*t6432 - 0.325*t20*t2574*t2987*t6432 - 0.2255*t20*t6432*t679;
  p_output1[8]=0.355*t20803 - 0.0641*t20939 + 0.2255*t21074 - 0.1575*t20*t2323*t2574 - 0.325*t18412*t2987 + 0.075*t18412*t2987*t3307 + 0.075*t18412*t3353*t3417 - 0.1575*t1471*t679;
  p_output1[9]=0.355*t21144 - 0.0641*(t21168 + t21200) + 0.075*t21112*t3307 - 0.325*t21074*t3353 + 0.075*t21082*t3417 + 0.325*t20*t2987*t6432;
  p_output1[10]=0.355*t21206 + 0.075*t21112*t2995 - 0.0641*(t21130 + t21195*t2995) + 0.075*t21195*t3417;
  p_output1[11]=(t21414 + t21419 + t21420 - 0.325*t21429*t2987 + 0.075*t21435*t3307 + 0.075*t21441*t3417 - 0.0641*(t21441*t2995 + t21435*t3417) + 0.355*(t21435*t2995 - 1.*t21441*t3417) + 0.2255*(t21423 + t21417*t679))*var2[3] + t21359*var2[4] + t21325*var2[5] + t21298*var2[6] + t21386*var2[7] + t21407*var2[8];
  p_output1[12]=t21359*var2[3] + (t21420 + 0.1575*t11247*t1471*t21275*t2323 - 0.325*t21545*t2987 + 0.075*t21549*t3307 + 0.075*t21553*t3417 - 0.0641*(t21553*t2995 + t21549*t3417) + 0.355*(t21549*t2995 - 1.*t21553*t3417) - 0.325*t11826*t1471*t21275*t6432 + 0.2255*(t21423 + t1471*t21275*t2323*t679))*var2[4] + t21500*var2[5] + t21477*var2[6] + t21521*var2[7] + t21536*var2[8];
  p_output1[13]=t21325*var2[3] + t21500*var2[4] + (t21414 + t21419 + 0.325*t21417*t2574*t2987 + 0.075*t21634*t3307 + 0.075*t21638*t3417 - 0.0641*(t21638*t2995 + t21634*t3417) + 0.355*(t21634*t2995 - 1.*t21638*t3417) + 0.2255*t21417*t679)*var2[5] + t21579*var2[6] + t21626*var2[7] + t21605*var2[8];
  p_output1[14]=t21298*var2[3] + t21477*var2[4] + t21579*var2[5] + (t21420 + 0.2255*t21657 - 0.325*t21690*t2987 + 0.075*t21690*t2987*t3307 + 0.075*t21690*t3353*t3417 - 0.0641*(t21690*t2995*t3353 + t21690*t2987*t3417) + 0.355*(t21690*t2987*t2995 - 1.*t21690*t3353*t3417) + 0.1575*t21586*t679)*var2[6] + t21683*var2[7] + t21669*var2[8];
  p_output1[15]=t21386*var2[3] + t21521*var2[4] + t21626*var2[5] + t21683*var2[6] + (0.325*t21721*t2987 + 0.075*t21724*t3307 + 0.325*t21717*t3353 + 0.075*t21750*t3417 - 0.0641*(t21750*t2995 + t21724*t3417) + 0.355*(t21752 - 1.*t21750*t3417))*var2[7] + t21741*var2[8];
  p_output1[16]=t21407*var2[3] + t21536*var2[4] + t21605*var2[5] + t21669*var2[6] + t21741*var2[7] + (-0.0641*t21781 + 0.075*t21771*t2995 + 0.355*(t21775 - 1.*t21771*t2995) - 0.075*t21729*t3417)*var2[8];
  p_output1[17]=1.;
  p_output1[18]=t21802;
  p_output1[19]=t21819;
  p_output1[20]=t21832;
  p_output1[21]=t21842;
  p_output1[22]=t21850;
  p_output1[23]=t21857;
  p_output1[24]=t21802*var2[3] + t21819*var2[4] + t21832*var2[5] + t21842*var2[6] + t21850*var2[7] + t21857*var2[8];
  p_output1[25]=t21819*var2[3] + (t21788 - 0.1575*t11247*t1471*t21272*t2323 - 0.325*t21954*t2987 + 0.075*t21958*t3307 + 0.075*t21962*t3417 - 0.0641*(t21962*t2995 + t21958*t3417) + 0.355*(t21958*t2995 - 1.*t21962*t3417) + 0.325*t11826*t1471*t21272*t6432 + 0.2255*(t21791 - 1.*t1471*t21272*t2323*t679))*var2[4] + t21907*var2[5] + t21884*var2[6] + t21928*var2[7] + t21944*var2[8];
  p_output1[26]=t21832*var2[3] + t21907*var2[4] + (t21786 + t21787 + 0.325*t21278*t2574*t2987 + 0.075*t22034*t3307 + 0.075*t22037*t3417 - 0.0641*(t22037*t2995 + t22034*t3417) + 0.355*(t22034*t2995 - 1.*t22037*t3417) + 0.2255*t21278*t679)*var2[5] + t21989*var2[6] + t22029*var2[7] + t22012*var2[8];
  p_output1[27]=t21842*var2[3] + t21884*var2[4] + t21989*var2[5] + (t21788 + 0.2255*t22054 - 0.325*t22086*t2987 + 0.075*t22086*t2987*t3307 + 0.075*t22086*t3353*t3417 - 0.0641*(t22086*t2995*t3353 + t22086*t2987*t3417) + 0.355*(t22086*t2987*t2995 - 1.*t22086*t3353*t3417) + 0.1575*t21996*t679)*var2[6] + t22078*var2[7] + t22065*var2[8];
  p_output1[28]=t21850*var2[3] + t21928*var2[4] + t22029*var2[5] + t22078*var2[6] + (0.325*t22108*t2987 + 0.075*t22110*t3307 + 0.325*t21302*t3353 + 0.075*t22132*t3417 - 0.0641*(t22132*t2995 + t22110*t3417) + 0.355*(t22135 - 1.*t22132*t3417))*var2[7] + t22125*var2[8];
  p_output1[29]=t21857*var2[3] + t21944*var2[4] + t22012*var2[5] + t22065*var2[6] + t22125*var2[7] + (-0.0641*t22163 + 0.075*t22154*t2995 + 0.355*(t22158 - 1.*t22154*t2995) - 0.075*t22114*t3417)*var2[8];
  p_output1[30]=1.;
  p_output1[31]=0.1575*t11247*t21586 + 0.325*t11826*t21717 + t21731 + 0.355*t21854 + 0.1575*t20*t21275*t2574 - 0.325*t21721*t2987 + 0.075*t21771*t3307 - 0.0641*(t21737 + t21771*t3417) + 0.2255*(-1.*t20*t21275*t2574 + t21586*t679);
  p_output1[32]=0.355*t21937 + 0.1575*t11247*t20*t21272*t2323 + 0.1575*t1471*t21272*t2574 - 0.325*t21870*t2987 + 0.075*t21933*t3307 + 0.075*t21914*t3417 - 0.0641*(t21924 + t21933*t3417) - 0.325*t11826*t20*t21272*t6432 + 0.2255*(-1.*t1471*t21272*t2574 + t20*t21272*t2323*t679);
  p_output1[33]=0.1575*t11247*t21364 + 0.325*t11826*t21996 + 0.355*t22006 + 0.325*t21364*t2574*t2987 + 0.075*t22002*t3307 + 0.075*t21998*t3417 - 0.0641*(t22025 + t22002*t3417) + 0.2255*t21364*t679;
  p_output1[34]=0.355*t22059 - 0.0641*t22076 + 0.2255*t22108 + 0.1575*t21996*t2574 - 0.325*t22054*t2987 + 0.075*t22054*t2987*t3307 + 0.075*t22054*t3353*t3417 - 0.1575*t20*t21272*t679;
  p_output1[35]=0.355*t22123 - 0.0641*(t22135 + t22158) + 0.325*t21302*t2987 + 0.075*t22114*t3307 - 0.325*t22108*t3353 + 0.075*t22110*t3417;
  p_output1[36]=0.355*t22163 + 0.075*t22114*t2995 - 0.0641*(t22118 + t22154*t2995) + 0.075*t22154*t3417;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 37, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_initial_swing_velocity_FlFoot_DiagonalStance.hh"

namespace DiagonalStance
{

void J_initial_swing_velocity_FlFoot_DiagonalStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
