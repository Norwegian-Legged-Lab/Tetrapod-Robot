/*
 * Automatically Generated from Mathematica.
 * Thu 12 May 2022 11:32:38 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t608;
  double t3796;
  double t5446;
  double t10110;
  double t12296;
  double t12794;
  double t12795;
  double t12801;
  double t12802;
  double t12805;
  double t13261;
  double t13487;
  double t14005;
  double t12807;
  double t12808;
  double t14151;
  double t17648;
  double t19846;
  double t22597;
  double t22962;
  double t23043;
  double t14090;
  double t14124;
  double t14024;
  double t14025;
  double t27561;
  double t27592;
  double t27600;
  double t27628;
  double t27649;
  double t27653;
  double t27685;
  double t29260;
  double t29307;
  double t12768;
  double t12776;
  double t12780;
  double t34859;
  double t34864;
  double t34876;
  double t34709;
  double t34710;
  double t34849;
  double t35421;
  double t35455;
  double t35565;
  double t43133;
  double t43140;
  double t43144;
  double t43068;
  double t43070;
  double t43088;
  double t43488;
  double t43494;
  double t43500;
  double t14026;
  double t14057;
  double t14149;
  double t14150;
  double t21825;
  double t23158;
  double t26244;
  double t26254;
  double t26448;
  double t26862;
  double t27168;
  double t27211;
  double t27405;
  double t27480;
  double t27527;
  double t27529;
  double t27530;
  double t44073;
  double t44131;
  double t44154;
  double t44238;
  double t37321;
  double t37374;
  double t37375;
  double t37935;
  double t37956;
  double t38166;
  double t38237;
  double t38238;
  double t38244;
  double t38253;
  double t38620;
  double t42246;
  double t42812;
  double t5064;
  double t12553;
  double t12793;
  double t12803;
  double t13260;
  double t13573;
  double t13616;
  double t13678;
  double t13679;
  double t13822;
  double t13832;
  double t13853;
  double t13898;
  double t13900;
  double t13905;
  double t27538;
  double t27543;
  double t27549;
  double t27531;
  double t27553;
  double t27621;
  double t46560;
  double t46561;
  double t46605;
  double t46607;
  double t46621;
  double t46623;
  double t46624;
  double t46626;
  double t46630;
  double t46632;
  double t46662;
  double t46670;
  double t42827;
  double t43043;
  double t43105;
  double t43167;
  double t43222;
  double t43229;
  double t43258;
  double t43389;
  double t43390;
  double t43391;
  double t43404;
  double t43435;
  double t43475;
  double t47090;
  double t47094;
  double t47101;
  double t47103;
  double t47104;
  double t47120;
  double t47127;
  double t47129;
  double t47407;
  double t47410;
  double t34605;
  double t34692;
  double t34857;
  double t34883;
  double t34950;
  double t35235;
  double t35266;
  double t35273;
  double t35282;
  double t35375;
  double t35376;
  double t35380;
  double t35382;
  double t45642;
  double t45643;
  double t45644;
  double t45645;
  double t45646;
  double t45802;
  double t46197;
  double t46242;
  double t46286;
  double t46292;
  double t46456;
  double t43478;
  double t43641;
  double t43684;
  double t43821;
  double t43824;
  double t43848;
  double t43853;
  double t43858;
  double t43867;
  double t43892;
  double t43944;
  double t47111;
  double t47135;
  double t47136;
  double t47216;
  double t47217;
  double t47235;
  double t47354;
  double t47361;
  double t47369;
  double t47375;
  double t47382;
  double t47969;
  double t47970;
  double t47971;
  double t35419;
  double t35641;
  double t35645;
  double t35649;
  double t35650;
  double t35712;
  double t36974;
  double t37244;
  double t37313;
  double t37316;
  double t37317;
  double t47412;
  double t48081;
  double t48098;
  double t48099;
  double t48100;
  double t49182;
  double t49226;
  double t49244;
  double t49245;
  double t49249;
  double t49330;
  double t49331;
  double t49332;
  double t49461;
  double t49470;
  double t49474;
  double t49556;
  double t49562;
  double t49746;
  double t49749;
  double t49753;
  double t49754;
  double t49941;
  double t49942;
  double t49950;
  double t49970;
  double t49971;
  double t49973;
  double t49976;
  double t50019;
  double t52712;
  double t49299;
  double t49327;
  double t49328;
  double t53536;
  double t53563;
  double t53564;
  double t53610;
  double t53614;
  double t53615;
  double t53599;
  double t53605;
  double t53606;
  double t54901;
  double t54962;
  double t55051;
  double t55574;
  double t55578;
  double t55607;
  double t55411;
  double t55434;
  double t55503;
  double t55742;
  double t55747;
  double t55748;
  double t55762;
  double t55763;
  double t55765;
  double t55777;
  double t55781;
  double t55784;
  double t56028;
  double t56062;
  double t56096;
  double t56337;
  double t56338;
  double t56347;
  double t56353;
  double t56369;
  double t56503;
  double t49827;
  double t49829;
  double t49830;
  double t49831;
  double t49832;
  double t49860;
  double t49940;
  double t49969;
  double t49974;
  double t52947;
  double t53329;
  double t53469;
  double t53470;
  double t53472;
  double t53474;
  double t53481;
  double t53483;
  double t53485;
  double t53486;
  double t55931;
  double t55955;
  double t55996;
  double t56613;
  double t56614;
  double t56615;
  double t56605;
  double t56608;
  double t56609;
  double t56848;
  double t56851;
  double t56854;
  double t55638;
  double t55703;
  double t56932;
  double t56933;
  double t56936;
  double t56937;
  double t56938;
  double t56948;
  double t56952;
  double t56968;
  double t56317;
  double t56332;
  double t56335;
  double t56336;
  double t56352;
  double t56534;
  double t56535;
  double t56541;
  double t56548;
  double t56559;
  double t56560;
  double t56562;
  double t56573;
  double t56577;
  double t56586;
  double t57160;
  double t57163;
  double t57164;
  double t57174;
  double t57175;
  double t57176;
  double t57159;
  double t57165;
  double t57170;
  double t57480;
  double t57518;
  double t57520;
  double t49475;
  double t49476;
  double t49477;
  double t49481;
  double t49748;
  double t49755;
  double t49756;
  double t49758;
  double t49759;
  double t49760;
  double t49801;
  double t49805;
  double t49810;
  double t49823;
  double t49825;
  double t55552;
  double t55637;
  double t57676;
  double t57677;
  double t57683;
  double t57690;
  double t57106;
  double t57107;
  double t57113;
  double t57116;
  double t57119;
  double t57121;
  double t57122;
  double t57123;
  double t57124;
  double t57125;
  double t57127;
  double t57139;
  double t57144;
  double t49200;
  double t49274;
  double t49329;
  double t49352;
  double t49375;
  double t49380;
  double t49383;
  double t49385;
  double t49386;
  double t49391;
  double t49392;
  double t49447;
  double t49452;
  double t49454;
  double t49455;
  double t57900;
  double t57902;
  double t55914;
  double t55928;
  double t56012;
  double t56145;
  double t56146;
  double t56150;
  double t56151;
  double t56162;
  double t56186;
  double t56211;
  double t56214;
  double t56225;
  double t56303;
  double t56306;
  double t56307;
  double t58029;
  double t58033;
  double t57950;
  double t57953;
  double t57957;
  double t57958;
  double t57959;
  double t57960;
  double t57961;
  double t57980;
  double t57990;
  double t57992;
  double t57994;
  double t57995;
  double t57439;
  double t57441;
  double t57463;
  double t57525;
  double t57526;
  double t57527;
  double t57531;
  double t57535;
  double t57553;
  double t57554;
  double t57559;
  double t57561;
  double t57654;
  double t56600;
  double t56604;
  double t56610;
  double t56622;
  double t56623;
  double t56624;
  double t56647;
  double t56665;
  double t56683;
  double t56718;
  double t56735;
  double t56753;
  double t56810;
  double t53492;
  double t53573;
  double t53608;
  double t53621;
  double t53622;
  double t53630;
  double t53632;
  double t53634;
  double t53650;
  double t54294;
  double t54454;
  double t54732;
  double t54788;
  double t58133;
  double t58134;
  double t58144;
  double t58116;
  double t58117;
  double t58123;
  double t58129;
  double t58146;
  double t58147;
  double t58150;
  double t58156;
  double t58157;
  double t58187;
  double t58188;
  double t58192;
  double t57903;
  double t57919;
  double t57932;
  double t57935;
  double t57936;
  double t57937;
  double t57940;
  double t57941;
  double t57942;
  double t57943;
  double t57944;
  double t57173;
  double t57178;
  double t57182;
  double t57186;
  double t57213;
  double t57216;
  double t57226;
  double t57273;
  double t57308;
  double t57416;
  double t57423;
  double t56842;
  double t56858;
  double t56860;
  double t56870;
  double t56871;
  double t56873;
  double t56874;
  double t56883;
  double t56884;
  double t56886;
  double t56889;
  double t54818;
  double t55055;
  double t55066;
  double t55068;
  double t55090;
  double t55105;
  double t55132;
  double t55147;
  double t55172;
  double t55175;
  double t55399;
  double t58148;
  double t58158;
  double t58161;
  double t58162;
  double t58164;
  double t58165;
  double t58167;
  double t58168;
  double t58171;
  double t58172;
  double t58173;
  double t58305;
  double t58309;
  double t58315;
  double t58194;
  double t58336;
  double t58342;
  double t58343;
  double t58348;
  double t58563;
  double t58575;
  double t58578;
  double t58580;
  double t58581;
  double t58582;
  double t58586;
  double t58587;
  double t58588;
  double t58431;
  double t58432;
  double t58433;
  double t58434;
  double t58435;
  double t58436;
  double t58455;
  double t58472;
  double t58497;
  double t58546;
  double t58562;
  double t58399;
  double t58400;
  double t58402;
  double t58404;
  double t58406;
  double t58408;
  double t58409;
  double t58410;
  double t58415;
  double t58416;
  double t58418;
  double t58422;
  double t58428;
  double t58429;
  double t58430;
  double t58358;
  double t58359;
  double t58363;
  double t58368;
  double t58385;
  double t58386;
  double t58387;
  double t58388;
  double t58390;
  double t58393;
  double t58394;
  double t58395;
  double t58396;
  double t58397;
  double t58398;
  double t58632;
  double t58634;
  double t58635;
  double t58636;
  double t58637;
  double t58638;
  double t58639;
  double t58640;
  double t58641;
  double t58642;
  double t58643;
  double t58644;
  double t58645;
  double t58646;
  double t58647;
  double t58751;
  double t58753;
  double t58755;
  double t58757;
  double t58772;
  double t58777;
  double t58659;
  double t58661;
  double t58666;
  double t58891;
  double t58892;
  double t58887;
  double t58888;
  double t58889;
  double t58916;
  double t58921;
  double t58922;
  double t58973;
  double t58976;
  double t59009;
  double t59010;
  double t59011;
  double t59015;
  double t59016;
  double t59077;
  double t58726;
  double t58735;
  double t58748;
  double t58749;
  double t58756;
  double t58778;
  double t58779;
  double t58785;
  double t58786;
  double t58787;
  double t58788;
  double t58789;
  double t58797;
  double t58828;
  double t58832;
  double t59273;
  double t59274;
  double t59275;
  double t59281;
  double t59282;
  double t59283;
  double t59272;
  double t59276;
  double t59278;
  double t59305;
  double t59306;
  double t59308;
  double t59347;
  double t59348;
  double t59351;
  double t59352;
  double t59217;
  double t59219;
  double t59221;
  double t59226;
  double t59227;
  double t59228;
  double t59229;
  double t59230;
  double t59231;
  double t59232;
  double t59249;
  double t59253;
  double t59256;
  double t59369;
  double t59370;
  double t58657;
  double t58658;
  double t58669;
  double t58670;
  double t58671;
  double t58676;
  double t58677;
  double t58678;
  double t58679;
  double t58684;
  double t58688;
  double t58701;
  double t58711;
  double t58715;
  double t58719;
  double t59699;
  double t59700;
  double t59599;
  double t59601;
  double t59632;
  double t59639;
  double t59640;
  double t59657;
  double t59663;
  double t59669;
  double t59675;
  double t59678;
  double t59691;
  double t59692;
  double t59302;
  double t59303;
  double t59304;
  double t59313;
  double t59327;
  double t59328;
  double t59331;
  double t59333;
  double t59334;
  double t59336;
  double t59337;
  double t59340;
  double t59341;
  double t58884;
  double t58886;
  double t58890;
  double t58894;
  double t58895;
  double t58898;
  double t58899;
  double t58905;
  double t58906;
  double t58907;
  double t58908;
  double t58909;
  double t58912;
  double t59739;
  double t59740;
  double t59742;
  double t59736;
  double t59743;
  double t59744;
  double t59749;
  double t59750;
  double t59753;
  double t59777;
  double t59778;
  double t59780;
  double t59371;
  double t59372;
  double t59373;
  double t59374;
  double t59375;
  double t59376;
  double t59378;
  double t59379;
  double t59431;
  double t59463;
  double t59591;
  double t59279;
  double t59285;
  double t59288;
  double t59290;
  double t59291;
  double t59292;
  double t59294;
  double t59295;
  double t59296;
  double t59297;
  double t59298;
  double t58915;
  double t58923;
  double t58930;
  double t58935;
  double t58936;
  double t58937;
  double t58939;
  double t58940;
  double t58945;
  double t58947;
  double t58948;
  double t59748;
  double t59754;
  double t59755;
  double t59758;
  double t59761;
  double t59762;
  double t59763;
  double t59765;
  double t59766;
  double t59769;
  double t59770;
  double t60067;
  double t60074;
  double t60075;
  double t59785;
  double t60079;
  double t60092;
  double t60093;
  double t60094;
  t608 = Cos(var1[4]);
  t3796 = Cos(var1[6]);
  t5446 = Sin(var1[4]);
  t10110 = Sin(var1[5]);
  t12296 = Sin(var1[6]);
  t12794 = -1.*t3796*t5446*t10110;
  t12795 = -1.*t608*t12296;
  t12801 = t12794 + t12795;
  t12802 = Sin(var1[7]);
  t12805 = Cos(var1[8]);
  t13261 = Cos(var1[7]);
  t13487 = Sin(var1[8]);
  t14005 = Cos(var1[5]);
  t12807 = -1.*t12805;
  t12808 = 1. + t12807;
  t14151 = t13261*t5446*t10110;
  t17648 = -1.*t14005*t5446*t12296*t12802;
  t19846 = t14151 + t17648;
  t22597 = -1.*t14005*t13261*t5446*t12296;
  t22962 = -1.*t5446*t10110*t12802;
  t23043 = t22597 + t22962;
  t14090 = -1.*t13261;
  t14124 = 1. + t14090;
  t14024 = -1.*t3796;
  t14025 = 1. + t14024;
  t27561 = -1.*t3796*t5446;
  t27592 = -1.*t608*t10110*t12296;
  t27600 = t27561 + t27592;
  t27628 = -1.*t608*t14005*t13261;
  t27649 = t27600*t12802;
  t27653 = t27628 + t27649;
  t27685 = t13261*t27600;
  t29260 = t608*t14005*t12802;
  t29307 = t27685 + t29260;
  t12768 = t608*t3796;
  t12776 = -1.*t5446*t10110*t12296;
  t12780 = t12768 + t12776;
  t34859 = t14005*t13261*t5446;
  t34864 = -1.*t12780*t12802;
  t34876 = t34859 + t34864;
  t34709 = t13261*t12780;
  t34710 = t14005*t5446*t12802;
  t34849 = t34709 + t34710;
  t35421 = -1.*t14005*t13261*t5446;
  t35455 = t12780*t12802;
  t35565 = t35421 + t35455;
  t43133 = t608*t13261*t10110;
  t43140 = -1.*t608*t14005*t12296*t12802;
  t43144 = t43133 + t43140;
  t43068 = t608*t14005*t13261*t12296;
  t43070 = t608*t10110*t12802;
  t43088 = t43068 + t43070;
  t43488 = -1.*t608*t13261*t10110;
  t43494 = t608*t14005*t12296*t12802;
  t43500 = t43488 + t43494;
  t14026 = 0.1575*t14005*t14025*t5446;
  t14057 = 0.2255*t14005*t3796*t5446;
  t14149 = 0.325*t14124*t5446*t10110;
  t14150 = 0.325*t14005*t5446*t12296*t12802;
  t21825 = 0.075*t12808*t19846;
  t23158 = 0.075*t23043*t13487;
  t26244 = t12805*t19846;
  t26254 = -1.*t23043*t13487;
  t26448 = t26244 + t26254;
  t26862 = 0.355*t26448;
  t27168 = t12805*t23043;
  t27211 = t19846*t13487;
  t27405 = t27168 + t27211;
  t27480 = -0.0641*t27405;
  t27527 = t14026 + t14057 + t14149 + t14150 + t21825 + t23158 + t26862 + t27480;
  t27529 = -0.325*t608*t14005*t14124;
  t27530 = 0.1575*t608*t14025*t10110;
  t44073 = -1.*t608*t10110*t12296*t12802;
  t44131 = t27628 + t44073;
  t44154 = -1.*t608*t13261*t10110*t12296;
  t44238 = t44154 + t29260;
  t37321 = 0.068*t608*t14005*t12296;
  t37374 = -0.325*t608*t14005*t3796*t12802;
  t37375 = 0.075*t608*t14005*t3796*t12808*t12802;
  t37935 = 0.075*t608*t14005*t3796*t13261*t13487;
  t37956 = t608*t14005*t3796*t12805*t12802;
  t38166 = -1.*t608*t14005*t3796*t13261*t13487;
  t38237 = t37956 + t38166;
  t38238 = 0.355*t38237;
  t38244 = t608*t14005*t3796*t13261*t12805;
  t38253 = t608*t14005*t3796*t12802*t13487;
  t38620 = t38244 + t38253;
  t42246 = -0.0641*t38620;
  t42812 = t37321 + t37374 + t37375 + t37935 + t38238 + t42246;
  t5064 = -0.1575*t608*t3796;
  t12553 = 0.1575*t5446*t10110*t12296;
  t12793 = 0.2255*t12780;
  t12803 = -0.325*t12801*t12802;
  t13260 = 0.075*t12808*t12801*t12802;
  t13573 = 0.075*t13261*t12801*t13487;
  t13616 = t12805*t12801*t12802;
  t13678 = -1.*t13261*t12801*t13487;
  t13679 = t13616 + t13678;
  t13822 = 0.355*t13679;
  t13832 = t13261*t12805*t12801;
  t13853 = t12801*t12802*t13487;
  t13898 = t13832 + t13853;
  t13900 = -0.0641*t13898;
  t13905 = t5064 + t12553 + t12793 + t12803 + t13260 + t13573 + t13822 + t13900;
  t27538 = t608*t3796*t10110;
  t27543 = -1.*t5446*t12296;
  t27549 = t27538 + t27543;
  t27531 = 0.1575*t5446*t12296;
  t27553 = 0.2255*t27549;
  t27621 = -0.325*t27600*t12802;
  t46560 = -0.325*t13261*t27549;
  t46561 = 0.075*t13261*t12808*t27549;
  t46605 = -0.075*t27549*t12802*t13487;
  t46607 = -1.*t12805*t27549*t12802;
  t46621 = t13261*t27549*t13487;
  t46623 = t46607 + t46621;
  t46624 = -0.0641*t46623;
  t46626 = t13261*t12805*t27549;
  t46630 = t27549*t12802*t13487;
  t46632 = t46626 + t46630;
  t46662 = 0.355*t46632;
  t46670 = t46560 + t46561 + t46605 + t46624 + t46662;
  t42827 = -0.325*t608*t14005*t13261*t12296;
  t43043 = -0.325*t608*t10110*t12802;
  t43105 = 0.075*t12808*t43088;
  t43167 = 0.075*t43144*t13487;
  t43222 = t12805*t43144;
  t43229 = t43088*t13487;
  t43258 = t43222 + t43229;
  t43389 = -0.0641*t43258;
  t43390 = t12805*t43088;
  t43391 = -1.*t43144*t13487;
  t43404 = t43390 + t43391;
  t43435 = 0.355*t43404;
  t43475 = t42827 + t43043 + t43105 + t43167 + t43389 + t43435;
  t47090 = t3796*t5446;
  t47094 = t608*t10110*t12296;
  t47101 = t47090 + t47094;
  t47103 = -1.*t47101*t12802;
  t47104 = t27628 + t47103;
  t47120 = t13261*t47101;
  t47127 = -1.*t608*t14005*t12802;
  t47129 = t47120 + t47127;
  t47407 = -1.*t13261*t47101;
  t47410 = t47407 + t29260;
  t34605 = -0.325*t13261*t12780;
  t34692 = -0.325*t14005*t5446*t12802;
  t34857 = 0.075*t12808*t34849;
  t34883 = 0.075*t34876*t13487;
  t34950 = t12805*t34876;
  t35235 = t34849*t13487;
  t35266 = t34950 + t35235;
  t35273 = -0.0641*t35266;
  t35282 = t12805*t34849;
  t35375 = -1.*t34876*t13487;
  t35376 = t35282 + t35375;
  t35380 = 0.355*t35376;
  t35382 = t34605 + t34692 + t34857 + t34883 + t35273 + t35380;
  t45642 = 0.075*t13261*t12805*t27549;
  t45643 = 0.075*t27549*t12802*t13487;
  t45644 = t12805*t27549*t12802;
  t45645 = -1.*t13261*t27549*t13487;
  t45646 = t45644 + t45645;
  t45802 = -0.0641*t45646;
  t46197 = -1.*t13261*t12805*t27549;
  t46242 = -1.*t27549*t12802*t13487;
  t46286 = t46197 + t46242;
  t46292 = 0.355*t46286;
  t46456 = t45642 + t45643 + t45802 + t46292;
  t43478 = 0.075*t12805*t43088;
  t43641 = 0.075*t43500*t13487;
  t43684 = t12805*t43500;
  t43821 = -1.*t43088*t13487;
  t43824 = t43684 + t43821;
  t43848 = -0.0641*t43824;
  t43853 = -1.*t12805*t43088;
  t43858 = -1.*t43500*t13487;
  t43867 = t43853 + t43858;
  t43892 = 0.355*t43867;
  t43944 = t43478 + t43641 + t43848 + t43892;
  t47111 = 0.075*t12805*t47104;
  t47135 = 0.075*t47129*t13487;
  t47136 = -1.*t12805*t47104;
  t47216 = -1.*t47129*t13487;
  t47217 = t47136 + t47216;
  t47235 = 0.355*t47217;
  t47354 = t12805*t47129;
  t47361 = -1.*t47104*t13487;
  t47369 = t47354 + t47361;
  t47375 = -0.0641*t47369;
  t47382 = t47111 + t47135 + t47235 + t47375;
  t47969 = t608*t14005*t13261;
  t47970 = t47101*t12802;
  t47971 = t47969 + t47970;
  t35419 = 0.075*t12805*t34849;
  t35641 = 0.075*t35565*t13487;
  t35645 = t12805*t35565;
  t35649 = -1.*t34849*t13487;
  t35650 = t35645 + t35649;
  t35712 = -0.0641*t35650;
  t36974 = -1.*t12805*t34849;
  t37244 = -1.*t35565*t13487;
  t37313 = t36974 + t37244;
  t37316 = 0.355*t37313;
  t37317 = t35419 + t35641 + t35712 + t37316;
  t47412 = t12805*t47104;
  t48081 = t47129*t13487;
  t48098 = -1.*t12805*t47129;
  t48099 = -1.*t47971*t13487;
  t48100 = t48098 + t48099;
  t49182 = Cos(var1[3]);
  t49226 = Sin(var1[3]);
  t49244 = -1.*t14005*t49226;
  t49245 = -1.*t49182*t5446*t10110;
  t49249 = t49244 + t49245;
  t49330 = -1.*t3796*t49249;
  t49331 = t49182*t608*t12296;
  t49332 = t49330 + t49331;
  t49461 = -1.*t49182*t14005*t5446;
  t49470 = t49226*t10110;
  t49474 = t49461 + t49470;
  t49556 = t13261*t49249;
  t49562 = -1.*t49474*t12296*t12802;
  t49746 = t49556 + t49562;
  t49749 = -1.*t13261*t49474*t12296;
  t49753 = -1.*t49249*t12802;
  t49754 = t49749 + t49753;
  t49941 = t49182*t3796*t5446;
  t49942 = t49182*t608*t10110*t12296;
  t49950 = t49941 + t49942;
  t49970 = t49182*t608*t14005*t13261;
  t49971 = t49950*t12802;
  t49973 = t49970 + t49971;
  t49976 = t13261*t49950;
  t50019 = -1.*t49182*t608*t14005*t12802;
  t52712 = t49976 + t50019;
  t49299 = -1.*t49182*t608*t3796;
  t49327 = -1.*t49249*t12296;
  t49328 = t49299 + t49327;
  t53536 = t49182*t14005*t5446;
  t53563 = -1.*t49226*t10110;
  t53564 = t53536 + t53563;
  t53610 = -1.*t13261*t53564;
  t53614 = -1.*t49328*t12802;
  t53615 = t53610 + t53614;
  t53599 = t13261*t49328;
  t53605 = -1.*t53564*t12802;
  t53606 = t53599 + t53605;
  t54901 = t13261*t53564;
  t54962 = t49328*t12802;
  t55051 = t54901 + t54962;
  t55574 = -1.*t49182*t14005;
  t55578 = t49226*t5446*t10110;
  t55607 = t55574 + t55578;
  t55411 = -1.*t14005*t49226*t5446;
  t55434 = -1.*t49182*t10110;
  t55503 = t55411 + t55434;
  t55742 = t608*t3796*t49226;
  t55747 = -1.*t55607*t12296;
  t55748 = t55742 + t55747;
  t55762 = t13261*t55503;
  t55763 = t55748*t12802;
  t55765 = t55762 + t55763;
  t55777 = t13261*t55748;
  t55781 = -1.*t55503*t12802;
  t55784 = t55777 + t55781;
  t56028 = t608*t3796*t49226*t10110;
  t56062 = -1.*t49226*t5446*t12296;
  t56096 = t56028 + t56062;
  t56337 = -1.*t608*t13261*t49226*t10110;
  t56338 = t608*t14005*t49226*t12296*t12802;
  t56347 = t56337 + t56338;
  t56353 = t608*t14005*t13261*t49226*t12296;
  t56369 = t608*t49226*t10110*t12802;
  t56503 = t56353 + t56369;
  t49827 = 0.325*t49182*t608*t14005*t14124;
  t49829 = -0.1575*t49182*t608*t14025*t10110;
  t49830 = -0.1575*t49182*t5446*t12296;
  t49831 = -1.*t49182*t608*t3796*t10110;
  t49832 = t49182*t5446*t12296;
  t49860 = t49831 + t49832;
  t49940 = 0.2255*t49860;
  t49969 = -0.325*t49950*t12802;
  t49974 = 0.075*t12808*t49973;
  t52947 = 0.075*t52712*t13487;
  t53329 = t12805*t49973;
  t53469 = -1.*t52712*t13487;
  t53470 = t53329 + t53469;
  t53472 = 0.355*t53470;
  t53474 = t12805*t52712;
  t53481 = t49973*t13487;
  t53483 = t53474 + t53481;
  t53485 = -0.0641*t53483;
  t53486 = t49827 + t49829 + t49830 + t49940 + t49969 + t49974 + t52947 + t53472 + t53485;
  t55931 = t3796*t49226*t5446;
  t55955 = t608*t49226*t10110*t12296;
  t55996 = t55931 + t55955;
  t56613 = -1.*t608*t14005*t13261*t49226;
  t56614 = -1.*t55996*t12802;
  t56615 = t56613 + t56614;
  t56605 = t13261*t55996;
  t56608 = -1.*t608*t14005*t49226*t12802;
  t56609 = t56605 + t56608;
  t56848 = t608*t14005*t13261*t49226;
  t56851 = t55996*t12802;
  t56854 = t56848 + t56851;
  t55638 = -0.1575*t608*t49226*t12296;
  t55703 = t608*t49226*t12296;
  t56932 = -1.*t49226*t5446*t10110*t12296;
  t56933 = t55742 + t56932;
  t56936 = -1.*t14005*t13261*t49226*t5446;
  t56937 = t56933*t12802;
  t56938 = t56936 + t56937;
  t56948 = t13261*t56933;
  t56952 = t14005*t49226*t5446*t12802;
  t56968 = t56948 + t56952;
  t56317 = -0.1575*t608*t14005*t14025*t49226;
  t56332 = -0.2255*t608*t14005*t3796*t49226;
  t56335 = -0.325*t608*t14124*t49226*t10110;
  t56336 = -0.325*t608*t14005*t49226*t12296*t12802;
  t56352 = 0.075*t12808*t56347;
  t56534 = 0.075*t56503*t13487;
  t56535 = t12805*t56347;
  t56541 = -1.*t56503*t13487;
  t56548 = t56535 + t56541;
  t56559 = 0.355*t56548;
  t56560 = t12805*t56503;
  t56562 = t56347*t13487;
  t56573 = t56560 + t56562;
  t56577 = -0.0641*t56573;
  t56586 = t56317 + t56332 + t56335 + t56336 + t56352 + t56534 + t56559 + t56577;
  t57160 = t49182*t14005;
  t57163 = -1.*t49226*t5446*t10110;
  t57164 = t57160 + t57163;
  t57174 = t13261*t57164;
  t57175 = -1.*t55503*t12296*t12802;
  t57176 = t57174 + t57175;
  t57159 = -1.*t13261*t55503*t12296;
  t57165 = -1.*t57164*t12802;
  t57170 = t57159 + t57165;
  t57480 = -1.*t13261*t57164;
  t57518 = t55503*t12296*t12802;
  t57520 = t57480 + t57518;
  t49475 = 0.1575*t14025*t49474;
  t49476 = 0.2255*t3796*t49474;
  t49477 = 0.325*t14124*t49249;
  t49481 = 0.325*t49474*t12296*t12802;
  t49748 = 0.075*t12808*t49746;
  t49755 = 0.075*t49754*t13487;
  t49756 = t12805*t49746;
  t49758 = -1.*t49754*t13487;
  t49759 = t49756 + t49758;
  t49760 = 0.355*t49759;
  t49801 = t12805*t49754;
  t49805 = t49746*t13487;
  t49810 = t49801 + t49805;
  t49823 = -0.0641*t49810;
  t49825 = t49475 + t49476 + t49477 + t49481 + t49748 + t49755 + t49760 + t49823;
  t55552 = 0.325*t14124*t55503;
  t55637 = 0.1575*t14025*t55607;
  t57676 = -1.*t55607*t12296*t12802;
  t57677 = t55762 + t57676;
  t57683 = -1.*t13261*t55607*t12296;
  t57690 = t57683 + t55781;
  t57106 = -0.068*t55503*t12296;
  t57107 = 0.325*t3796*t55503*t12802;
  t57113 = -0.075*t3796*t12808*t55503*t12802;
  t57116 = -0.075*t3796*t13261*t55503*t13487;
  t57119 = -1.*t3796*t12805*t55503*t12802;
  t57121 = t3796*t13261*t55503*t13487;
  t57122 = t57119 + t57121;
  t57123 = 0.355*t57122;
  t57124 = -1.*t3796*t13261*t12805*t55503;
  t57125 = -1.*t3796*t55503*t12802*t13487;
  t57127 = t57124 + t57125;
  t57139 = -0.0641*t57127;
  t57144 = t57106 + t57107 + t57113 + t57116 + t57123 + t57139;
  t49200 = 0.1575*t49182*t608*t3796;
  t49274 = 0.1575*t49249*t12296;
  t49329 = 0.2255*t49328;
  t49352 = -0.325*t49332*t12802;
  t49375 = 0.075*t12808*t49332*t12802;
  t49380 = 0.075*t13261*t49332*t13487;
  t49383 = t12805*t49332*t12802;
  t49385 = -1.*t13261*t49332*t13487;
  t49386 = t49383 + t49385;
  t49391 = 0.355*t49386;
  t49392 = t13261*t12805*t49332;
  t49447 = t49332*t12802*t13487;
  t49452 = t49392 + t49447;
  t49454 = -0.0641*t49452;
  t49455 = t49200 + t49274 + t49329 + t49352 + t49375 + t49380 + t49391 + t49454;
  t57900 = -1.*t3796*t57164;
  t57902 = t57900 + t55703;
  t55914 = -0.1575*t3796*t49226*t5446;
  t55928 = -0.1575*t608*t49226*t10110*t12296;
  t56012 = 0.2255*t55996;
  t56145 = -0.325*t56096*t12802;
  t56146 = 0.075*t12808*t56096*t12802;
  t56150 = 0.075*t13261*t56096*t13487;
  t56151 = t12805*t56096*t12802;
  t56162 = -1.*t13261*t56096*t13487;
  t56186 = t56151 + t56162;
  t56211 = 0.355*t56186;
  t56214 = t13261*t12805*t56096;
  t56225 = t56096*t12802*t13487;
  t56303 = t56214 + t56225;
  t56306 = -0.0641*t56303;
  t56307 = t55914 + t55928 + t56012 + t56145 + t56146 + t56150 + t56211 + t56306;
  t58029 = t57164*t12296;
  t58033 = t55742 + t58029;
  t57950 = -0.325*t13261*t57902;
  t57953 = 0.075*t13261*t12808*t57902;
  t57957 = -0.075*t57902*t12802*t13487;
  t57958 = -1.*t12805*t57902*t12802;
  t57959 = t13261*t57902*t13487;
  t57960 = t57958 + t57959;
  t57961 = -0.0641*t57960;
  t57980 = t13261*t12805*t57902;
  t57990 = t57902*t12802*t13487;
  t57992 = t57980 + t57990;
  t57994 = 0.355*t57992;
  t57995 = t57950 + t57953 + t57957 + t57961 + t57994;
  t57439 = 0.325*t13261*t55503*t12296;
  t57441 = 0.325*t57164*t12802;
  t57463 = 0.075*t12808*t57170;
  t57525 = 0.075*t57520*t13487;
  t57526 = t12805*t57520;
  t57527 = t57170*t13487;
  t57531 = t57526 + t57527;
  t57535 = -0.0641*t57531;
  t57553 = t12805*t57170;
  t57554 = -1.*t57520*t13487;
  t57559 = t57553 + t57554;
  t57561 = 0.355*t57559;
  t57654 = t57439 + t57441 + t57463 + t57525 + t57535 + t57561;
  t56600 = -0.325*t13261*t55996;
  t56604 = 0.325*t608*t14005*t49226*t12802;
  t56610 = 0.075*t12808*t56609;
  t56622 = 0.075*t56615*t13487;
  t56623 = t12805*t56615;
  t56624 = t56609*t13487;
  t56647 = t56623 + t56624;
  t56665 = -0.0641*t56647;
  t56683 = t12805*t56609;
  t56718 = -1.*t56615*t13487;
  t56735 = t56683 + t56718;
  t56753 = 0.355*t56735;
  t56810 = t56600 + t56604 + t56610 + t56622 + t56665 + t56753;
  t53492 = -0.325*t13261*t49328;
  t53573 = 0.325*t53564*t12802;
  t53608 = 0.075*t12808*t53606;
  t53621 = 0.075*t53615*t13487;
  t53622 = t12805*t53615;
  t53630 = t53606*t13487;
  t53632 = t53622 + t53630;
  t53634 = -0.0641*t53632;
  t53650 = t12805*t53606;
  t54294 = -1.*t53615*t13487;
  t54454 = t53650 + t54294;
  t54732 = 0.355*t54454;
  t54788 = t53492 + t53573 + t53608 + t53621 + t53634 + t54732;
  t58133 = -1.*t608*t3796*t49226;
  t58134 = -1.*t57164*t12296;
  t58144 = t58133 + t58134;
  t58116 = t14005*t49226*t5446;
  t58117 = t49182*t10110;
  t58123 = t58116 + t58117;
  t58129 = -1.*t13261*t58123;
  t58146 = -1.*t58144*t12802;
  t58147 = t58129 + t58146;
  t58150 = t13261*t58144;
  t58156 = -1.*t58123*t12802;
  t58157 = t58150 + t58156;
  t58187 = -1.*t13261*t58144;
  t58188 = t58123*t12802;
  t58192 = t58187 + t58188;
  t57903 = 0.075*t13261*t12805*t57902;
  t57919 = 0.075*t57902*t12802*t13487;
  t57932 = t12805*t57902*t12802;
  t57935 = -1.*t13261*t57902*t13487;
  t57936 = t57932 + t57935;
  t57937 = -0.0641*t57936;
  t57940 = -1.*t13261*t12805*t57902;
  t57941 = -1.*t57902*t12802*t13487;
  t57942 = t57940 + t57941;
  t57943 = 0.355*t57942;
  t57944 = t57903 + t57919 + t57937 + t57943;
  t57173 = 0.075*t12805*t57170;
  t57178 = 0.075*t57176*t13487;
  t57182 = t12805*t57176;
  t57186 = -1.*t57170*t13487;
  t57213 = t57182 + t57186;
  t57216 = -0.0641*t57213;
  t57226 = -1.*t12805*t57170;
  t57273 = -1.*t57176*t13487;
  t57308 = t57226 + t57273;
  t57416 = 0.355*t57308;
  t57423 = t57173 + t57178 + t57216 + t57416;
  t56842 = 0.075*t12805*t56609;
  t56858 = 0.075*t56854*t13487;
  t56860 = t12805*t56854;
  t56870 = -1.*t56609*t13487;
  t56871 = t56860 + t56870;
  t56873 = -0.0641*t56871;
  t56874 = -1.*t12805*t56609;
  t56883 = -1.*t56854*t13487;
  t56884 = t56874 + t56883;
  t56886 = 0.355*t56884;
  t56889 = t56842 + t56858 + t56873 + t56886;
  t54818 = 0.075*t12805*t53606;
  t55055 = 0.075*t55051*t13487;
  t55066 = t12805*t55051;
  t55068 = -1.*t53606*t13487;
  t55090 = t55066 + t55068;
  t55105 = -0.0641*t55090;
  t55132 = -1.*t12805*t53606;
  t55147 = -1.*t55051*t13487;
  t55172 = t55132 + t55147;
  t55175 = 0.355*t55172;
  t55399 = t54818 + t55055 + t55105 + t55175;
  t58148 = 0.075*t12805*t58147;
  t58158 = 0.075*t58157*t13487;
  t58161 = -1.*t12805*t58147;
  t58162 = -1.*t58157*t13487;
  t58164 = t58161 + t58162;
  t58165 = 0.355*t58164;
  t58167 = t12805*t58157;
  t58168 = -1.*t58147*t13487;
  t58171 = t58167 + t58168;
  t58172 = -0.0641*t58171;
  t58173 = t58148 + t58158 + t58165 + t58172;
  t58305 = t13261*t58123;
  t58309 = t58144*t12802;
  t58315 = t58305 + t58309;
  t58194 = t12805*t58147;
  t58336 = t58157*t13487;
  t58342 = -1.*t12805*t58157;
  t58343 = -1.*t58315*t13487;
  t58348 = t58342 + t58343;
  t58563 = 0.1575*t608*t3796*t49226;
  t58575 = 0.1575*t57164*t12296;
  t58578 = 0.2255*t58144;
  t58580 = -0.325*t57902*t12802;
  t58581 = 0.075*t12808*t57902*t12802;
  t58582 = 0.075*t13261*t57902*t13487;
  t58586 = 0.355*t57936;
  t58587 = -0.0641*t57992;
  t58588 = t58563 + t58575 + t58578 + t58580 + t58581 + t58582 + t58586 + t58587;
  t58431 = 0.1575*t14025*t55503;
  t58432 = 0.2255*t3796*t55503;
  t58433 = 0.325*t14124*t57164;
  t58434 = 0.325*t55503*t12296*t12802;
  t58435 = 0.075*t12808*t57176;
  t58436 = 0.075*t57170*t13487;
  t58455 = 0.355*t57213;
  t58472 = t57176*t13487;
  t58497 = t57553 + t58472;
  t58546 = -0.0641*t58497;
  t58562 = t58431 + t58432 + t58433 + t58434 + t58435 + t58436 + t58455 + t58546;
  t58399 = 0.325*t608*t14005*t14124*t49226;
  t58400 = -0.1575*t608*t14025*t49226*t10110;
  t58402 = -0.1575*t49226*t5446*t12296;
  t58404 = -1.*t608*t3796*t49226*t10110;
  t58406 = t49226*t5446*t12296;
  t58408 = t58404 + t58406;
  t58409 = 0.2255*t58408;
  t58410 = -0.325*t55996*t12802;
  t58415 = 0.075*t12808*t56854;
  t58416 = 0.075*t56609*t13487;
  t58418 = 0.355*t56871;
  t58422 = t56854*t13487;
  t58428 = t56683 + t58422;
  t58429 = -0.0641*t58428;
  t58430 = t58399 + t58400 + t58402 + t58409 + t58410 + t58415 + t58416 + t58418 + t58429;
  t58358 = 0.325*t14124*t53564;
  t58359 = 0.1575*t14025*t49249;
  t58363 = 0.1575*t49182*t608*t12296;
  t58368 = t3796*t49249;
  t58385 = -1.*t49182*t608*t12296;
  t58386 = t58368 + t58385;
  t58387 = 0.2255*t58386;
  t58388 = -0.325*t49328*t12802;
  t58390 = 0.075*t12808*t55051;
  t58393 = 0.075*t53606*t13487;
  t58394 = 0.355*t55090;
  t58395 = t55051*t13487;
  t58396 = t53650 + t58395;
  t58397 = -0.0641*t58396;
  t58398 = t58358 + t58359 + t58363 + t58387 + t58388 + t58390 + t58393 + t58394 + t58397;
  t58632 = -0.325*t13261*t58144;
  t58634 = 0.325*t58123*t12802;
  t58635 = 0.075*t12808*t58157;
  t58636 = 0.075*t58147*t13487;
  t58637 = t58194 + t58336;
  t58638 = -0.0641*t58637;
  t58639 = 0.355*t58171;
  t58640 = t58632 + t58634 + t58635 + t58636 + t58638 + t58639;
  t58641 = 0.075*t12805*t58157;
  t58642 = 0.075*t58315*t13487;
  t58643 = t12805*t58315;
  t58644 = t58643 + t58162;
  t58645 = -0.0641*t58644;
  t58646 = 0.355*t58348;
  t58647 = t58641 + t58642 + t58645 + t58646;
  t58751 = t49182*t608*t13261*t10110;
  t58753 = -1.*t49182*t608*t14005*t12296*t12802;
  t58755 = t58751 + t58753;
  t58757 = -1.*t49182*t608*t14005*t13261*t12296;
  t58772 = -1.*t49182*t608*t10110*t12802;
  t58777 = t58757 + t58772;
  t58659 = -1.*t49182*t3796*t5446;
  t58661 = -1.*t49182*t608*t10110*t12296;
  t58666 = t58659 + t58661;
  t58891 = -1.*t58666*t12802;
  t58892 = t49970 + t58891;
  t58887 = t13261*t58666;
  t58888 = t49182*t608*t14005*t12802;
  t58889 = t58887 + t58888;
  t58916 = -1.*t49182*t608*t14005*t13261;
  t58921 = t58666*t12802;
  t58922 = t58916 + t58921;
  t58973 = t49182*t5446*t10110*t12296;
  t58976 = t49299 + t58973;
  t59009 = t49182*t14005*t13261*t5446;
  t59010 = t58976*t12802;
  t59011 = t59009 + t59010;
  t59015 = t13261*t58976;
  t59016 = -1.*t49182*t14005*t5446*t12802;
  t59077 = t59015 + t59016;
  t58726 = 0.1575*t49182*t608*t14005*t14025;
  t58735 = 0.2255*t49182*t608*t14005*t3796;
  t58748 = 0.325*t49182*t608*t14124*t10110;
  t58749 = 0.325*t49182*t608*t14005*t12296*t12802;
  t58756 = 0.075*t12808*t58755;
  t58778 = 0.075*t58777*t13487;
  t58779 = t12805*t58755;
  t58785 = -1.*t58777*t13487;
  t58786 = t58779 + t58785;
  t58787 = 0.355*t58786;
  t58788 = t12805*t58777;
  t58789 = t58755*t13487;
  t58797 = t58788 + t58789;
  t58828 = -0.0641*t58797;
  t58832 = t58726 + t58735 + t58748 + t58749 + t58756 + t58778 + t58787 + t58828;
  t59273 = t14005*t49226;
  t59274 = t49182*t5446*t10110;
  t59275 = t59273 + t59274;
  t59281 = t13261*t59275;
  t59282 = -1.*t53564*t12296*t12802;
  t59283 = t59281 + t59282;
  t59272 = -1.*t13261*t53564*t12296;
  t59276 = -1.*t59275*t12802;
  t59278 = t59272 + t59276;
  t59305 = -1.*t13261*t59275;
  t59306 = t53564*t12296*t12802;
  t59308 = t59305 + t59306;
  t59347 = -1.*t49249*t12296*t12802;
  t59348 = t54901 + t59347;
  t59351 = -1.*t13261*t49249*t12296;
  t59352 = t59351 + t53605;
  t59217 = -0.068*t53564*t12296;
  t59219 = 0.325*t3796*t53564*t12802;
  t59221 = -0.075*t3796*t12808*t53564*t12802;
  t59226 = -0.075*t3796*t13261*t53564*t13487;
  t59227 = -1.*t3796*t12805*t53564*t12802;
  t59228 = t3796*t13261*t53564*t13487;
  t59229 = t59227 + t59228;
  t59230 = 0.355*t59229;
  t59231 = -1.*t3796*t13261*t12805*t53564;
  t59232 = -1.*t3796*t53564*t12802*t13487;
  t59249 = t59231 + t59232;
  t59253 = -0.0641*t59249;
  t59256 = t59217 + t59219 + t59221 + t59226 + t59230 + t59253;
  t59369 = -1.*t3796*t59275;
  t59370 = t59369 + t58385;
  t58657 = 0.1575*t49182*t3796*t5446;
  t58658 = 0.1575*t49182*t608*t10110*t12296;
  t58669 = 0.2255*t58666;
  t58670 = -0.325*t49860*t12802;
  t58671 = 0.075*t12808*t49860*t12802;
  t58676 = 0.075*t13261*t49860*t13487;
  t58677 = t12805*t49860*t12802;
  t58678 = -1.*t13261*t49860*t13487;
  t58679 = t58677 + t58678;
  t58684 = 0.355*t58679;
  t58688 = t13261*t12805*t49860;
  t58701 = t49860*t12802*t13487;
  t58711 = t58688 + t58701;
  t58715 = -0.0641*t58711;
  t58719 = t58657 + t58658 + t58669 + t58670 + t58671 + t58676 + t58684 + t58715;
  t59699 = t59275*t12296;
  t59700 = t49299 + t59699;
  t59599 = -0.325*t13261*t59370;
  t59601 = 0.075*t13261*t12808*t59370;
  t59632 = -0.075*t59370*t12802*t13487;
  t59639 = -1.*t12805*t59370*t12802;
  t59640 = t13261*t59370*t13487;
  t59657 = t59639 + t59640;
  t59663 = -0.0641*t59657;
  t59669 = t13261*t12805*t59370;
  t59675 = t59370*t12802*t13487;
  t59678 = t59669 + t59675;
  t59691 = 0.355*t59678;
  t59692 = t59599 + t59601 + t59632 + t59663 + t59691;
  t59302 = 0.325*t13261*t53564*t12296;
  t59303 = 0.325*t59275*t12802;
  t59304 = 0.075*t12808*t59278;
  t59313 = 0.075*t59308*t13487;
  t59327 = t12805*t59308;
  t59328 = t59278*t13487;
  t59331 = t59327 + t59328;
  t59333 = -0.0641*t59331;
  t59334 = t12805*t59278;
  t59336 = -1.*t59308*t13487;
  t59337 = t59334 + t59336;
  t59340 = 0.355*t59337;
  t59341 = t59302 + t59303 + t59304 + t59313 + t59333 + t59340;
  t58884 = -0.325*t13261*t58666;
  t58886 = -0.325*t49182*t608*t14005*t12802;
  t58890 = 0.075*t12808*t58889;
  t58894 = 0.075*t58892*t13487;
  t58895 = t12805*t58892;
  t58898 = t58889*t13487;
  t58899 = t58895 + t58898;
  t58905 = -0.0641*t58899;
  t58906 = t12805*t58889;
  t58907 = -1.*t58892*t13487;
  t58908 = t58906 + t58907;
  t58909 = 0.355*t58908;
  t58912 = t58884 + t58886 + t58890 + t58894 + t58905 + t58909;
  t59739 = t49182*t608*t3796;
  t59740 = -1.*t59275*t12296;
  t59742 = t59739 + t59740;
  t59736 = -1.*t13261*t49474;
  t59743 = -1.*t59742*t12802;
  t59744 = t59736 + t59743;
  t59749 = t13261*t59742;
  t59750 = -1.*t49474*t12802;
  t59753 = t59749 + t59750;
  t59777 = -1.*t13261*t59742;
  t59778 = t49474*t12802;
  t59780 = t59777 + t59778;
  t59371 = 0.075*t13261*t12805*t59370;
  t59372 = 0.075*t59370*t12802*t13487;
  t59373 = t12805*t59370*t12802;
  t59374 = -1.*t13261*t59370*t13487;
  t59375 = t59373 + t59374;
  t59376 = -0.0641*t59375;
  t59378 = -1.*t13261*t12805*t59370;
  t59379 = -1.*t59370*t12802*t13487;
  t59431 = t59378 + t59379;
  t59463 = 0.355*t59431;
  t59591 = t59371 + t59372 + t59376 + t59463;
  t59279 = 0.075*t12805*t59278;
  t59285 = 0.075*t59283*t13487;
  t59288 = t12805*t59283;
  t59290 = -1.*t59278*t13487;
  t59291 = t59288 + t59290;
  t59292 = -0.0641*t59291;
  t59294 = -1.*t12805*t59278;
  t59295 = -1.*t59283*t13487;
  t59296 = t59294 + t59295;
  t59297 = 0.355*t59296;
  t59298 = t59279 + t59285 + t59292 + t59297;
  t58915 = 0.075*t12805*t58889;
  t58923 = 0.075*t58922*t13487;
  t58930 = t12805*t58922;
  t58935 = -1.*t58889*t13487;
  t58936 = t58930 + t58935;
  t58937 = -0.0641*t58936;
  t58939 = -1.*t12805*t58889;
  t58940 = -1.*t58922*t13487;
  t58945 = t58939 + t58940;
  t58947 = 0.355*t58945;
  t58948 = t58915 + t58923 + t58937 + t58947;
  t59748 = 0.075*t12805*t59744;
  t59754 = 0.075*t59753*t13487;
  t59755 = -1.*t12805*t59744;
  t59758 = -1.*t59753*t13487;
  t59761 = t59755 + t59758;
  t59762 = 0.355*t59761;
  t59763 = t12805*t59753;
  t59765 = -1.*t59744*t13487;
  t59766 = t59763 + t59765;
  t59769 = -0.0641*t59766;
  t59770 = t59748 + t59754 + t59762 + t59769;
  t60067 = t13261*t49474;
  t60074 = t59742*t12802;
  t60075 = t60067 + t60074;
  t59785 = t12805*t59744;
  t60079 = t59753*t13487;
  t60092 = -1.*t12805*t59753;
  t60093 = -1.*t60075*t13487;
  t60094 = t60092 + t60093;
  p_output1[0]=(t27529 + t27530 + t27531 + t27553 + t27621 + 0.075*t12808*t27653 + 0.075*t13487*t29307 - 0.0641*(t13487*t27653 + t12805*t29307) + 0.355*(t12805*t27653 - 1.*t13487*t29307))*var2[4] + t27527*var2[5] + t13905*var2[6] + t35382*var2[7] + t37317*var2[8];
  p_output1[1]=t27527*var2[4] + (t27529 + t27530 + 0.075*t12808*t44131 + 0.075*t13487*t44238 - 0.0641*(t13487*t44131 + t12805*t44238) + 0.355*(t12805*t44131 - 1.*t13487*t44238) + 0.325*t10110*t12296*t12802*t608 + 0.2255*t10110*t3796*t608)*var2[5] + t42812*var2[6] + t43475*var2[7] + t43944*var2[8];
  p_output1[2]=t13905*var2[4] + t42812*var2[5] + (t27531 + t27553 + 0.075*t12802*t12808*t27600 + 0.075*t13261*t13487*t27600 - 0.0641*(t12805*t13261*t27600 + t12802*t13487*t27600) + 0.355*(t12802*t12805*t27600 - 1.*t13261*t13487*t27600) + t27621 - 0.1575*t10110*t3796*t608)*var2[6] + t46670*var2[7] + t46456*var2[8];
  p_output1[3]=t35382*var2[4] + t43475*var2[5] + t46670*var2[6] + (0.325*t12802*t47101 + 0.075*t12808*t47104 + 0.075*t13487*t47410 - 0.0641*(t13487*t47104 + t12805*t47410) + 0.355*(-1.*t13487*t47410 + t47412) + 0.325*t13261*t14005*t608)*var2[7] + t47382*var2[8];
  p_output1[4]=t37317*var2[4] + t43944*var2[5] + t46456*var2[6] + t47382*var2[7] + (-0.075*t13487*t47129 + 0.075*t12805*t47971 + 0.355*(-1.*t12805*t47971 + t48081) - 0.0641*t48100)*var2[8];
  p_output1[5]=1.;
  p_output1[6]=-0.325*t12780*t12802 + 0.075*t13487*t34849 + 0.075*t12808*t35565 - 0.0641*(t35282 + t13487*t35565) + 0.355*t35650 + 0.1575*t10110*t14025*t5446 - 0.325*t14005*t14124*t5446 - 0.1575*t12296*t608 + 0.2255*(t10110*t3796*t5446 + t12296*t608);
  p_output1[7]=0.075*t13487*t43088 + 0.075*t12808*t43500 - 0.0641*(t43390 + t13487*t43500) + 0.355*t43824 - 0.325*t12296*t12802*t14005*t608 - 0.1575*t14005*t14025*t608 - 0.325*t10110*t14124*t608 - 0.2255*t14005*t3796*t608;
  p_output1[8]=-0.325*t12802*t27549 + 0.075*t12802*t12808*t27549 + 0.075*t13261*t13487*t27549 + 0.355*t45646 - 0.0641*t46632 + 0.2255*t47101 - 0.1575*t3796*t5446 - 0.1575*t10110*t12296*t608;
  p_output1[9]=-0.325*t13261*t47101 + 0.075*t13487*t47104 + 0.075*t12808*t47129 + 0.355*t47369 - 0.0641*(t47412 + t48081) + 0.325*t12802*t14005*t608;
  p_output1[10]=0.075*t12805*t47129 + 0.075*t13487*t47971 - 0.0641*(t47216 + t12805*t47971) + 0.355*t48100;
  p_output1[11]=(t55552 + t55637 + t55638 + 0.2255*(t3796*t55607 + t55703) - 0.325*t12802*t55748 + 0.075*t12808*t55765 + 0.075*t13487*t55784 - 0.0641*(t13487*t55765 + t12805*t55784) + 0.355*(t12805*t55765 - 1.*t13487*t55784))*var2[3] + t53486*var2[4] + t49825*var2[5] + t49455*var2[6] + t54788*var2[7] + t55399*var2[8];
  p_output1[12]=t53486*var2[3] + (0.1575*t10110*t14025*t49226*t5446 - 0.325*t14005*t14124*t49226*t5446 + t55638 + 0.2255*(t10110*t3796*t49226*t5446 + t55703) - 0.325*t12802*t56933 + 0.075*t12808*t56938 + 0.075*t13487*t56968 - 0.0641*(t13487*t56938 + t12805*t56968) + 0.355*(t12805*t56938 - 1.*t13487*t56968))*var2[4] + t56586*var2[5] + t56307*var2[6] + t56810*var2[7] + t56889*var2[8];
  p_output1[13]=t49825*var2[3] + t56586*var2[4] + (t55552 + 0.325*t12296*t12802*t55607 + 0.2255*t3796*t55607 + t55637 + 0.075*t12808*t57677 + 0.075*t13487*t57690 - 0.0641*(t13487*t57677 + t12805*t57690) + 0.355*(t12805*t57677 - 1.*t13487*t57690))*var2[5] + t57144*var2[6] + t57654*var2[7] + t57423*var2[8];
  p_output1[14]=t49455*var2[3] + t56307*var2[4] + t57144*var2[5] + (t55638 + 0.1575*t3796*t57164 + 0.2255*t57902 - 0.325*t12802*t58033 + 0.075*t12802*t12808*t58033 + 0.075*t13261*t13487*t58033 - 0.0641*(t12805*t13261*t58033 + t12802*t13487*t58033) + 0.355*(t12802*t12805*t58033 - 1.*t13261*t13487*t58033))*var2[6] + t57995*var2[7] + t57944*var2[8];
  p_output1[15]=t54788*var2[3] + t56810*var2[4] + t57654*var2[5] + t57995*var2[6] + (0.325*t13261*t58123 + 0.325*t12802*t58144 + 0.075*t12808*t58147 + 0.075*t13487*t58192 - 0.0641*(t13487*t58147 + t12805*t58192) + 0.355*(-1.*t13487*t58192 + t58194))*var2[7] + t58173*var2[8];
  p_output1[16]=t55399*var2[3] + t56889*var2[4] + t57423*var2[5] + t57944*var2[6] + t58173*var2[7] + (-0.075*t13487*t58157 + 0.075*t12805*t58315 + 0.355*(-1.*t12805*t58315 + t58336) - 0.0641*t58348)*var2[8];
  p_output1[17]=1.;
  p_output1[18]=t58398;
  p_output1[19]=t58430;
  p_output1[20]=t58562;
  p_output1[21]=t58588;
  p_output1[22]=t58640;
  p_output1[23]=t58647;
  p_output1[24]=t58398*var2[3] + t58430*var2[4] + t58562*var2[5] + t58588*var2[6] + t58640*var2[7] + t58647*var2[8];
  p_output1[25]=t58430*var2[3] + (-0.1575*t10110*t14025*t49182*t5446 + 0.325*t14005*t14124*t49182*t5446 + t58363 + 0.2255*(-1.*t10110*t3796*t49182*t5446 + t58385) - 0.325*t12802*t58976 + 0.075*t12808*t59011 + 0.075*t13487*t59077 - 0.0641*(t13487*t59011 + t12805*t59077) + 0.355*(t12805*t59011 - 1.*t13487*t59077))*var2[4] + t58832*var2[5] + t58719*var2[6] + t58912*var2[7] + t58948*var2[8];
  p_output1[26]=t58562*var2[3] + t58832*var2[4] + (0.325*t12296*t12802*t49249 + 0.2255*t3796*t49249 + t58358 + t58359 + 0.075*t12808*t59348 + 0.075*t13487*t59352 - 0.0641*(t13487*t59348 + t12805*t59352) + 0.355*(t12805*t59348 - 1.*t13487*t59352))*var2[5] + t59256*var2[6] + t59341*var2[7] + t59298*var2[8];
  p_output1[27]=t58588*var2[3] + t58719*var2[4] + t59256*var2[5] + (t58363 + 0.1575*t3796*t59275 + 0.2255*t59370 - 0.325*t12802*t59700 + 0.075*t12802*t12808*t59700 + 0.075*t13261*t13487*t59700 - 0.0641*(t12805*t13261*t59700 + t12802*t13487*t59700) + 0.355*(t12802*t12805*t59700 - 1.*t13261*t13487*t59700))*var2[6] + t59692*var2[7] + t59591*var2[8];
  p_output1[28]=t58640*var2[3] + t58912*var2[4] + t59341*var2[5] + t59692*var2[6] + (0.325*t13261*t49474 + 0.325*t12802*t59742 + 0.075*t12808*t59744 + 0.075*t13487*t59780 - 0.0641*(t13487*t59744 + t12805*t59780) + 0.355*(-1.*t13487*t59780 + t59785))*var2[7] + t59770*var2[8];
  p_output1[29]=t58647*var2[3] + t58948*var2[4] + t59298*var2[5] + t59591*var2[6] + t59770*var2[7] + (-0.075*t13487*t59753 + 0.075*t12805*t60075 + 0.355*(-1.*t12805*t60075 + t60079) - 0.0641*t60094)*var2[8];
  p_output1[30]=1.;
  p_output1[31]=0.1575*t14025*t57164 + 0.325*t14124*t58123 - 0.325*t12802*t58144 + t58158 + 0.075*t12808*t58315 - 0.0641*(t58167 + t13487*t58315) + 0.355*t58644 + 0.1575*t12296*t49226*t608 + 0.2255*(t3796*t57164 - 1.*t12296*t49226*t608);
  p_output1[32]=0.1575*t12296*t49182*t5446 - 0.325*t12802*t58666 + 0.075*t13487*t58889 + 0.075*t12808*t58922 - 0.0641*(t58906 + t13487*t58922) + 0.355*t58936 + 0.1575*t10110*t14025*t49182*t608 - 0.325*t14005*t14124*t49182*t608 + 0.2255*(-1.*t12296*t49182*t5446 + t10110*t3796*t49182*t608);
  p_output1[33]=0.325*t12296*t12802*t53564 + 0.1575*t14025*t53564 + 0.2255*t3796*t53564 + 0.325*t14124*t59275 + 0.075*t13487*t59278 + 0.075*t12808*t59283 + 0.355*t59291 - 0.0641*(t13487*t59283 + t59334);
  p_output1[34]=0.1575*t12296*t59275 - 0.325*t12802*t59370 + 0.075*t12802*t12808*t59370 + 0.075*t13261*t13487*t59370 + 0.355*t59375 - 0.0641*t59678 + 0.2255*t59742 - 0.1575*t3796*t49182*t608;
  p_output1[35]=0.325*t12802*t49474 - 0.325*t13261*t59742 + 0.075*t13487*t59744 + 0.075*t12808*t59753 + 0.355*t59766 - 0.0641*(t59785 + t60079);
  p_output1[36]=0.075*t12805*t59753 + 0.075*t13487*t60075 - 0.0641*(t59758 + t12805*t60075) + 0.355*t60094;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 37, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_initial_swing_velocity_FlFoot_DiagonalStance.hh"

namespace DiagonalStance
{

void J_initial_swing_velocity_FlFoot_DiagonalStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
