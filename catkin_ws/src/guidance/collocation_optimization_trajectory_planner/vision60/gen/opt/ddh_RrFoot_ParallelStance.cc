/*
 * Automatically Generated from Mathematica.
 * Sun 3 Apr 2022 21:48:00 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t24448;
  double t24591;
  double t24544;
  double t24603;
  double t24611;
  double t24623;
  double t24630;
  double t24660;
  double t24677;
  double t24692;
  double t24712;
  double t24992;
  double t25046;
  double t26267;
  double t26356;
  double t24013;
  double t26490;
  double t26603;
  double t26690;
  double t26936;
  double t26959;
  double t27065;
  double t27135;
  double t27136;
  double t27143;
  double t27148;
  double t28815;
  double t28808;
  double t28889;
  double t28897;
  double t28925;
  double t28929;
  double t24404;
  double t24408;
  double t28876;
  double t28988;
  double t29010;
  double t29039;
  double t29044;
  double t29045;
  double t29012;
  double t29013;
  double t29014;
  double t29017;
  double t29033;
  double t29036;
  double t29011;
  double t29037;
  double t29038;
  double t29046;
  double t29047;
  double t29048;
  double t29049;
  double t29050;
  double t29051;
  double t29052;
  double t29053;
  double t29095;
  double t29112;
  double t29120;
  double t24433;
  double t29217;
  double t29227;
  double t24437;
  double t29249;
  double t29257;
  double t29258;
  double t29289;
  double t29290;
  double t29298;
  double t29299;
  double t29308;
  double t29317;
  double t29263;
  double t29267;
  double t29269;
  double t29277;
  double t29279;
  double t29285;
  double t29367;
  double t29368;
  double t29377;
  double t29378;
  double t29379;
  double t29380;
  double t29381;
  double t29382;
  double t29384;
  double t29385;
  double t29439;
  double t29505;
  double t29523;
  double t29570;
  double t29625;
  double t29626;
  double t29627;
  double t29576;
  double t29581;
  double t29583;
  double t29593;
  double t29598;
  double t29602;
  double t29615;
  double t29637;
  double t29645;
  double t29646;
  double t29647;
  double t29648;
  double t29649;
  double t29661;
  double t29662;
  double t29670;
  double t29671;
  double t29679;
  double t29241;
  double t29243;
  double t29244;
  double t29730;
  double t29746;
  double t29798;
  double t29711;
  double t29712;
  double t29714;
  double t29836;
  double t29840;
  double t29851;
  double t29812;
  double t29820;
  double t29821;
  double t29825;
  double t29855;
  double t29858;
  double t29859;
  double t29860;
  double t29861;
  double t29868;
  double t29876;
  double t29880;
  double t29881;
  double t29885;
  double t29890;
  double t29898;
  double t29899;
  double t29900;
  double t29920;
  double t29921;
  double t29922;
  double t29933;
  double t29937;
  double t29944;
  double t29949;
  double t29955;
  double t29957;
  double t30052;
  double t30056;
  double t30057;
  double t30062;
  double t30064;
  double t30145;
  double t30162;
  double t30180;
  double t30059;
  double t30065;
  double t30074;
  double t30084;
  double t30272;
  double t30277;
  double t30281;
  double t30285;
  double t30286;
  double t30296;
  double t30298;
  double t30306;
  double t30318;
  double t30323;
  double t30327;
  double t30341;
  double t30343;
  double t30344;
  double t30473;
  double t30477;
  double t30478;
  double t30487;
  double t30488;
  double t30491;
  double t30652;
  double t30661;
  double t30669;
  double t30725;
  double t30728;
  double t30690;
  double t30691;
  double t30693;
  double t30698;
  double t30687;
  double t30713;
  double t30729;
  double t30786;
  double t30787;
  double t30788;
  double t30766;
  double t30769;
  double t30772;
  double t30779;
  double t30780;
  double t30782;
  double t30796;
  double t30797;
  double t30798;
  double t30790;
  double t30795;
  double t30801;
  double t30807;
  double t30815;
  double t30816;
  double t30823;
  double t30827;
  double t30830;
  double t30833;
  double t30834;
  double t30921;
  double t31110;
  double t31111;
  double t31113;
  double t30730;
  double t31153;
  double t31157;
  double t31160;
  double t31175;
  double t31176;
  double t31179;
  double t31190;
  double t31192;
  double t31193;
  double t31201;
  double t31202;
  double t31203;
  double t31146;
  double t31147;
  double t31136;
  double t31161;
  double t31222;
  double t31223;
  double t31225;
  double t31216;
  double t31217;
  double t31218;
  double t31230;
  double t31255;
  double t31259;
  double t31347;
  double t31348;
  double t31349;
  double t31369;
  double t31385;
  double t31406;
  double t31143;
  double t31151;
  double t31475;
  double t31478;
  double t31479;
  double t31480;
  double t31482;
  double t31483;
  double t31484;
  double t31485;
  double t31488;
  double t31490;
  double t31491;
  double t31495;
  double t31496;
  double t31497;
  double t31499;
  double t31543;
  double t31544;
  double t31545;
  double t31549;
  double t31550;
  double t31552;
  double t31537;
  double t31540;
  double t31541;
  double t31253;
  double t31572;
  double t31573;
  double t31574;
  double t31575;
  double t31576;
  double t31578;
  double t31580;
  double t31521;
  double t31525;
  double t31527;
  double t31565;
  double t31568;
  double t31570;
  double t31447;
  double t31450;
  double t31607;
  double t31609;
  double t31610;
  double t31612;
  double t31614;
  double t31615;
  double t31616;
  double t31597;
  double t31598;
  double t31599;
  double t31601;
  double t31602;
  double t31605;
  double t30348;
  double t30352;
  double t30353;
  double t31638;
  double t31653;
  double t31674;
  double t31676;
  double t31699;
  double t31704;
  double t30092;
  double t30109;
  double t30110;
  double t31712;
  double t31713;
  double t30422;
  double t30440;
  double t30453;
  double t31855;
  double t31857;
  double t31863;
  double t31865;
  double t30495;
  double t30496;
  double t30497;
  double t30507;
  double t30508;
  double t30512;
  double t32218;
  double t32221;
  double t32238;
  double t32233;
  double t32216;
  double t32225;
  double t32267;
  double t32271;
  double t32275;
  double t31019;
  double t31020;
  double t31027;
  double t32430;
  double t32431;
  double t32439;
  double t32452;
  double t32446;
  double t32449;
  double t32428;
  double t32432;
  double t32478;
  double t32481;
  double t31174;
  double t31182;
  double t31183;
  double t32486;
  double t32487;
  double t32525;
  double t32526;
  double t32528;
  double t32529;
  double t32429;
  double t32532;
  double t32533;
  double t32535;
  double t32536;
  double t32537;
  double t32538;
  double t32539;
  double t30747;
  double t32584;
  double t32586;
  double t32593;
  double t32485;
  double t32687;
  double t32692;
  double t32698;
  double t32699;
  double t32700;
  double t32701;
  double t32702;
  double t30755;
  double t30756;
  double t30757;
  double t30759;
  double t30761;
  double t30763;
  double t30764;
  double t30765;
  double t32547;
  double t32552;
  double t32563;
  double t32652;
  double t32661;
  double t32685;
  double t32504;
  double t32505;
  double t32733;
  double t32734;
  double t32735;
  double t32736;
  double t32740;
  double t32741;
  double t32743;
  double t32723;
  double t32725;
  double t32727;
  double t32729;
  double t32730;
  double t32731;
  double t32780;
  double t32784;
  double t32798;
  double t32885;
  double t32887;
  double t30278;
  double t32893;
  double t32895;
  double t32917;
  double t32920;
  double t32924;
  double t32926;
  double t29325;
  double t29478;
  double t29573;
  double t32985;
  double t32989;
  double t32999;
  double t33002;
  double t33005;
  double t33027;
  double t33047;
  double t33051;
  t24448 = Cos(var1[17]);
  t24591 = Sin(var1[17]);
  t24544 = -0.0641*t24448;
  t24603 = -0.28*t24591;
  t24611 = t24544 + t24603;
  t24623 = -1.*t24448*t24611;
  t24630 = -0.325*t24591;
  t24660 = -1.*t24448;
  t24677 = 1. + t24660;
  t24692 = -0.575*t24677;
  t24712 = -0.295*t24448;
  t24992 = -0.0641*t24591;
  t25046 = t24692 + t24712 + t24992;
  t26267 = -1.*t25046*t24591;
  t26356 = t24623 + t24630 + t26267;
  t24013 = Cos(var1[16]);
  t26490 = Sin(var1[16]);
  t26603 = t24448*t26490;
  t26690 = -1.*t24013*t24591;
  t26936 = t26603 + t26690;
  t26959 = 0.1575*t26936;
  t27065 = -1.*t24448*t26490;
  t27135 = t24013*t24591;
  t27136 = t27065 + t27135;
  t27143 = 0.2255*t27136;
  t27148 = t26959 + t27143;
  t28815 = Sin(var1[15]);
  t28808 = Cos(var1[15]);
  t28889 = 0.325*t26490;
  t28897 = t24013*t24611;
  t28925 = t26490*t25046;
  t28929 = t28889 + t28897 + t28925;
  t24404 = -1.*t24013;
  t24408 = 1. + t24404;
  t28876 = -0.068*t28815;
  t28988 = t28808*t28929;
  t29010 = t28876 + t28988;
  t29039 = t24013*t24448;
  t29044 = t26490*t24591;
  t29045 = t29039 + t29044;
  t29012 = -1.*t28808;
  t29013 = 1. + t29012;
  t29014 = -0.1575*t29013;
  t29017 = -0.2255*t28808;
  t29033 = -1.*t28815*t28929;
  t29036 = t29014 + t29017 + t29033;
  t29011 = -1.*t28815*t29010;
  t29037 = -1.*t28808*t29036;
  t29038 = t29011 + t29037;
  t29046 = t28808*t29038*t29045;
  t29047 = -0.325*t24408;
  t29048 = -1.*t26490*t24611;
  t29049 = t24013*t25046;
  t29050 = t29047 + t29048 + t29049;
  t29051 = t29050*t27136;
  t29052 = t28808*t29010*t29045;
  t29053 = -1.*t28815*t29036*t29045;
  t29095 = t29051 + t29052 + t29053;
  t29112 = t28815*t29095;
  t29120 = t29046 + t29112;
  t24433 = Cos(var1[4]);
  t29217 = Sin(var1[4]);
  t29227 = Sin(var1[5]);
  t24437 = Cos(var1[5]);
  t29249 = t28808*t29217;
  t29257 = t24433*t28815*t29227;
  t29258 = t29249 + t29257;
  t29289 = t28808*t26936*t29217;
  t29290 = t24437*t29045;
  t29298 = t28815*t26936*t29227;
  t29299 = t29290 + t29298;
  t29308 = t24433*t29299;
  t29317 = t29289 + t29308;
  t29263 = -1.*t24433*t24437*t26490;
  t29267 = t24013*t29258;
  t29269 = t29263 + t29267;
  t29277 = t24013*t24433*t24437;
  t29279 = t26490*t29258;
  t29285 = t29277 + t29279;
  t29367 = Sin(var1[3]);
  t29368 = -1.*t24437*t28815*t26936;
  t29377 = t29045*t29227;
  t29378 = t29368 + t29377;
  t29379 = t29367*t29378;
  t29380 = Cos(var1[3]);
  t29381 = t28808*t24433*t26936;
  t29382 = -1.*t29217*t29299;
  t29384 = t29381 + t29382;
  t29385 = t29380*t29384;
  t29439 = t29379 + t29385;
  t29505 = t29380*t29378;
  t29523 = -1.*t29367*t29384;
  t29570 = t29505 + t29523;
  t29625 = t24437*t29036;
  t29626 = t29050*t29227;
  t29627 = t29625 + t29626;
  t29576 = -1.*t24437*t28815*t29045;
  t29581 = t27136*t29227;
  t29583 = t29576 + t29581;
  t29593 = t24437*t29050;
  t29598 = -1.*t29036*t29227;
  t29602 = t29593 + t29598;
  t29615 = t28808*t29227*t29602;
  t29637 = -1.*t28808*t24437*t29627;
  t29645 = t29011 + t29615 + t29637;
  t29646 = t29583*t29645;
  t29647 = t29627*t29583;
  t29648 = t24437*t27136;
  t29649 = t28815*t29045*t29227;
  t29661 = t29648 + t29649;
  t29662 = t29602*t29661;
  t29670 = t29052 + t29647 + t29662;
  t29671 = t28808*t24437*t29670;
  t29679 = t29646 + t29671;
  t29241 = t28815*t29217;
  t29243 = -1.*t28808*t24433*t29227;
  t29244 = t29241 + t29243;
  t29730 = t29010*t29217;
  t29746 = t24433*t29602;
  t29798 = t29730 + t29746;
  t29711 = t28808*t29045*t29217;
  t29712 = t24433*t29661;
  t29714 = t29711 + t29712;
  t29836 = t24433*t29010;
  t29840 = -1.*t29217*t29602;
  t29851 = t29836 + t29840;
  t29812 = -1.*t29244*t29798;
  t29820 = t24433*t28815;
  t29821 = t28808*t29217*t29227;
  t29825 = t29820 + t29821;
  t29855 = -1.*t29825*t29851;
  t29858 = t29637 + t29812 + t29855;
  t29859 = t29714*t29858;
  t29860 = t29798*t29714;
  t29861 = t28808*t24433*t29045;
  t29868 = -1.*t29217*t29661;
  t29876 = t29861 + t29868;
  t29880 = t29851*t29876;
  t29881 = t29647 + t29860 + t29880;
  t29885 = t29244*t29881;
  t29890 = t29859 + t29885;
  t29898 = t24437*t28815*t26936;
  t29899 = -1.*t29045*t29227;
  t29900 = t29898 + t29899;
  t29920 = -1.*t24437*t29036;
  t29921 = -1.*t29050*t29227;
  t29922 = t29920 + t29921;
  t29933 = t28808*t29227*t29627;
  t29937 = t24437*t28815*t29045;
  t29944 = -1.*t27136*t29227;
  t29949 = t29937 + t29944;
  t29955 = t29602*t29583;
  t29957 = t29627*t29661;
  t30052 = 0.068*t28815;
  t30056 = -1.*t28808*t28929;
  t30057 = t30052 + t30056;
  t30062 = -0.068*t28808;
  t30064 = t30062 + t29033;
  t30145 = -1.*t24433*t28815*t26936;
  t30162 = -1.*t28808*t26936*t29217*t29227;
  t30180 = t30145 + t30162;
  t30059 = -1.*t28808*t29010;
  t30065 = -1.*t28815*t30064;
  t30074 = -1.*t28815*t29010*t29045;
  t30084 = t28808*t30064*t29045;
  t30272 = Power(t24437,2);
  t30277 = -1.*t28808*t30272*t30057;
  t30281 = t24437*t28815*t29627;
  t30285 = -1.*t28808*t24437*t29045*t29627;
  t30286 = t24437*t30057*t29583;
  t30296 = -1.*t28815*t29045*t29217;
  t30298 = t28808*t24433*t29045*t29227;
  t30306 = t30296 + t30298;
  t30318 = t30064*t29217;
  t30323 = -1.*t24433*t30057*t29227;
  t30327 = t30318 + t30323;
  t30341 = t24433*t30064;
  t30343 = t30057*t29217*t29227;
  t30344 = t30341 + t30343;
  t30473 = -1.*t28808*t26936*t29217;
  t30477 = -1.*t24433*t29299;
  t30478 = t30473 + t30477;
  t30487 = -1.*t29010*t29217;
  t30488 = -1.*t24433*t29602;
  t30491 = t30487 + t30488;
  t30652 = -1.*t24013*t24448;
  t30661 = -1.*t26490*t24591;
  t30669 = t30652 + t30661;
  t30725 = 0.325*t24013;
  t30728 = t30725 + t29048 + t29049;
  t30690 = -0.325*t26490;
  t30691 = -1.*t24013*t24611;
  t30693 = -1.*t26490*t25046;
  t30698 = t30690 + t30691 + t30693;
  t30687 = t28808*t29010*t27136;
  t30713 = Power(t28808,2);
  t30729 = t30713*t30728*t29045;
  t30786 = -1.*t24437*t28815*t30728;
  t30787 = t30698*t29227;
  t30788 = t30786 + t30787;
  t30766 = -1.*t24437*t28815*t27136;
  t30769 = t30669*t29227;
  t30772 = t30766 + t30769;
  t30779 = t24437*t30698;
  t30780 = t28815*t30728*t29227;
  t30782 = t30779 + t30780;
  t30796 = t24437*t30669;
  t30797 = t28815*t27136*t29227;
  t30798 = t30796 + t30797;
  t30790 = -1.*t28808*t24437*t30788;
  t30795 = t30788*t29583;
  t30801 = t29627*t30772;
  t30807 = t28808*t27136*t29217;
  t30815 = t24433*t30798;
  t30816 = t30807 + t30815;
  t30823 = t28808*t30728*t29217;
  t30827 = t24433*t30782;
  t30830 = t30823 + t30827;
  t30833 = t28808*t24433*t30728;
  t30834 = -1.*t29217*t30782;
  t30921 = t30833 + t30834;
  t31110 = -0.28*t24448;
  t31111 = 0.0641*t24591;
  t31113 = t31110 + t31111;
  t30730 = Power(t28815,2);
  t31153 = t26490*t24611;
  t31157 = t24013*t31113;
  t31160 = t31153 + t31157;
  t31175 = t24437*t26936;
  t31176 = t28815*t30669*t29227;
  t31179 = t31175 + t31176;
  t31190 = -1.*t24437*t28815*t30669;
  t31192 = t26936*t29227;
  t31193 = t31190 + t31192;
  t31201 = t28808*t24433*t30669;
  t31202 = -1.*t29217*t31179;
  t31203 = t31201 + t31202;
  t31146 = -1.*t26490*t31113;
  t31147 = t28897 + t31146;
  t31136 = t28808*t29010*t26936;
  t31161 = t30713*t31160*t29045;
  t31222 = -1.*t24437*t28815*t31160;
  t31223 = t31147*t29227;
  t31225 = t31222 + t31223;
  t31216 = t24437*t31147;
  t31217 = t28815*t31160*t29227;
  t31218 = t31216 + t31217;
  t31230 = -1.*t28808*t24437*t31225;
  t31255 = t31225*t29583;
  t31259 = t29627*t29378;
  t31347 = t28808*t31160*t29217;
  t31348 = t24433*t31218;
  t31349 = t31347 + t31348;
  t31369 = t28808*t24433*t31160;
  t31385 = -1.*t29217*t31218;
  t31406 = t31369 + t31385;
  t31143 = -1.*t28815*t29036*t26936;
  t31151 = t29050*t29045;
  t31475 = -1.*t29050*t27136;
  t31478 = -1.*t28808*t29010*t29045;
  t31479 = t28815*t29036*t29045;
  t31480 = t31475 + t31478 + t31479;
  t31482 = t28808*t26936*t31480;
  t31483 = t31136 + t31143 + t31151;
  t31484 = t28808*t29045*t31483;
  t31485 = t31482 + t31484;
  t31488 = t28929*t26936;
  t31490 = t31488 + t31151;
  t31491 = t27136*t31490;
  t31495 = -1.*t28929*t29045;
  t31496 = t31475 + t31495;
  t31497 = t29045*t31496;
  t31499 = t31491 + t31497;
  t31543 = t28808*t24437*t29367;
  t31544 = t29380*t29825;
  t31545 = t31543 + t31544;
  t31549 = t28808*t29380*t24437;
  t31550 = -1.*t29367*t29825;
  t31552 = t31549 + t31550;
  t31537 = t29380*t24437;
  t31540 = -1.*t29367*t29217*t29227;
  t31541 = t31537 + t31540;
  t31253 = t29602*t29299;
  t31572 = t31136 + t31253 + t31259;
  t31573 = t29583*t31572;
  t31574 = -1.*t29627*t29583;
  t31575 = -1.*t29602*t29661;
  t31576 = t31478 + t31574 + t31575;
  t31578 = t29378*t31576;
  t31580 = t31573 + t31578;
  t31521 = t24437*t29367*t29217;
  t31525 = t29380*t29227;
  t31527 = t31521 + t31525;
  t31565 = -1.*t28808*t24433*t29367;
  t31568 = -1.*t28815*t31541;
  t31570 = t31565 + t31568;
  t31447 = t29798*t29317;
  t31450 = t29851*t29384;
  t31607 = t31259 + t31447 + t31450;
  t31609 = t29714*t31607;
  t31610 = -1.*t29798*t29714;
  t31612 = -1.*t29851*t29876;
  t31614 = t31574 + t31610 + t31612;
  t31615 = t29317*t31614;
  t31616 = t31609 + t31615;
  t31597 = -1.*t26490*t31527;
  t31598 = t24013*t31570;
  t31599 = t31597 + t31598;
  t31601 = t24013*t31527;
  t31602 = t26490*t31570;
  t31605 = t31601 + t31602;
  t30348 = t28808*t24433;
  t30352 = -1.*t28815*t29217*t29227;
  t30353 = t30348 + t30352;
  t31638 = -1.*t28815*t29010*t26936;
  t31653 = t28808*t30064*t26936;
  t31674 = t28815*t29010*t29045;
  t31676 = -1.*t28808*t30064*t29045;
  t31699 = -1.*t28808*t24437*t26936*t29627;
  t31704 = t24437*t30057*t29378;
  t30092 = -1.*t28815*t26936*t29217;
  t30109 = t28808*t24433*t26936*t29227;
  t30110 = t30092 + t30109;
  t31712 = t28808*t24437*t29045*t29627;
  t31713 = -1.*t24437*t30057*t29583;
  t30422 = -1.*t24433*t28815*t29045;
  t30440 = -1.*t28808*t29045*t29217*t29227;
  t30453 = t30422 + t30440;
  t31855 = t29627*t29299;
  t31857 = t29602*t29378;
  t31863 = -1.*t29602*t29583;
  t31865 = -1.*t29627*t29661;
  t30495 = -1.*t28815*t29217;
  t30496 = t28808*t24433*t29227;
  t30497 = t30495 + t30496;
  t30507 = -1.*t28808*t29045*t29217;
  t30508 = -1.*t24433*t29661;
  t30512 = t30507 + t30508;
  t32218 = -1.*t30698*t27136;
  t32221 = -1.*t29050*t30669;
  t32238 = t30698*t29045;
  t32233 = t30713*t30728*t26936;
  t32216 = -1.*t28808*t29010*t27136;
  t32225 = -1.*t30713*t30728*t29045;
  t32267 = t30788*t29378;
  t32271 = -1.*t30788*t29583;
  t32275 = -1.*t29627*t30772;
  t31019 = t28808*t24433*t27136;
  t31020 = -1.*t29217*t30798;
  t31027 = t31019 + t31020;
  t32430 = -1.*t31147*t27136;
  t32431 = -1.*t29050*t29045;
  t32439 = t29050*t26936;
  t32452 = t31147*t29045;
  t32446 = t30713*t31160*t26936;
  t32449 = t28808*t29010*t30669;
  t32428 = -1.*t28808*t29010*t26936;
  t32432 = -1.*t30713*t31160*t29045;
  t32478 = t29627*t31193;
  t32481 = t31225*t29378;
  t31174 = t28808*t30669*t29217;
  t31182 = t24433*t31179;
  t31183 = t31174 + t31182;
  t32486 = -1.*t31225*t29583;
  t32487 = -1.*t29627*t29378;
  t32525 = 0.325*t24448;
  t32526 = t24448*t25046;
  t32528 = -1.*t24611*t24591;
  t32529 = t32525 + t32526 + t32528;
  t32429 = t28815*t29036*t26936;
  t32532 = t28815*t29010;
  t32533 = t28808*t29036;
  t32535 = t32532 + t32533;
  t32536 = t28808*t32535*t26936;
  t32537 = t32428 + t32429 + t32431;
  t32538 = t28815*t32537;
  t32539 = t32536 + t32538;
  t30747 = var2[0]*t29714;
  t32584 = t24437*t29367;
  t32586 = t29380*t29217*t29227;
  t32593 = t32584 + t32586;
  t32485 = -1.*t29602*t29299;
  t32687 = -1.*t28808*t29227*t29602;
  t32692 = t28808*t24437*t29627;
  t32698 = t32532 + t32687 + t32692;
  t32699 = t29378*t32698;
  t32700 = t32428 + t32485 + t32487;
  t32701 = t28808*t24437*t32700;
  t32702 = t32699 + t32701;
  t30755 = t29367*t29583;
  t30756 = t29380*t29876;
  t30757 = t30755 + t30756;
  t30759 = var2[2]*t30757;
  t30761 = t29380*t29583;
  t30763 = -1.*t29367*t29876;
  t30764 = t30761 + t30763;
  t30765 = var2[1]*t30764;
  t32547 = -1.*t29380*t24437*t29217;
  t32552 = t29367*t29227;
  t32563 = t32547 + t32552;
  t32652 = t28808*t29380*t24433;
  t32661 = -1.*t28815*t32593;
  t32685 = t32652 + t32661;
  t32504 = -1.*t29798*t29317;
  t32505 = -1.*t29851*t29384;
  t32733 = t29244*t29798;
  t32734 = t29825*t29851;
  t32735 = t32692 + t32733 + t32734;
  t32736 = t29317*t32735;
  t32740 = t32487 + t32504 + t32505;
  t32741 = t29244*t32740;
  t32743 = t32736 + t32741;
  t32723 = -1.*t26490*t32563;
  t32725 = t24013*t32685;
  t32727 = t32723 + t32725;
  t32729 = t24013*t32563;
  t32730 = t26490*t32685;
  t32731 = t32729 + t32730;
  t32780 = -1.*t28808*t29227*t29627;
  t32784 = -1.*t29627*t29299;
  t32798 = -1.*t29602*t29378;
  t32885 = t28808*t29010;
  t32887 = t28815*t30064;
  t30278 = Power(t29227,2);
  t32893 = t28815*t29010*t26936;
  t32895 = -1.*t28808*t30064*t26936;
  t32917 = t28808*t30272*t30057;
  t32920 = -1.*t24437*t28815*t29627;
  t32924 = t28808*t24437*t26936*t29627;
  t32926 = -1.*t24437*t30057*t29378;
  t29325 = var2[0]*t29317;
  t29478 = var2[2]*t29439;
  t29573 = var2[1]*t29570;
  t32985 = -1.*t30713*t31160*t26936;
  t32989 = -1.*t28808*t29010*t30669;
  t32999 = t28808*t24437*t31225;
  t33002 = -1.*t29627*t31193;
  t33005 = -1.*t31225*t29378;
  t33027 = -1.*t30713*t30728*t26936;
  t33047 = t28808*t24437*t30788;
  t33051 = -1.*t30788*t29378;
  p_output1[0]=-0.325*t24408*t24433*t24437 + 0.1575*t28815*t29217 + 0.1575*t24433*t29013*t29227 - 0.2255*t29244 + 0.325*t26490*t29258 - 0.575*t24591*t29269 - 0.575*t24677*t29285 - 0.295*(-1.*t24591*t29269 + t24448*t29285) - 0.0641*(t24448*t29269 + t24591*t29285) + t29325 + t29478 + t29573 + var1[0] + t29890*var2[3] + ((-1.*t29367*t29378 - 1.*t29380*t29384)*var2[1] + t29570*var2[2])*var2[3] + t29679*var2[4] + (t29384*var2[0] - 1.*t29367*t30478*var2[1] + t29380*t30478*var2[2] + (t29858*t29876 + t29825*t29881 + t29714*(-1.*t29798*t29825 - 1.*t29244*t29851 - 1.*t29825*t30491 - 1.*t29851*t30497) + t29244*(t29714*t29851 + t29798*t29876 + t29876*t30491 + t29851*t30512))*var2[3])*var2[4] + t29120*var2[5] + (t24433*t29900*var2[0] + (t29299*t29380 + t29217*t29367*t29900)*var2[1] + (t29299*t29367 - 1.*t29217*t29380*t29900)*var2[2] + (-1.*t24433*t24437*t28808*t29881 + t29714*(-1.*t24437*t28808*t29602 + t24433*t24437*t28808*t29798 - 1.*t24437*t28808*t29217*t29851 - 1.*t24433*t29244*t29922 + t29217*t29825*t29922 + t29933) + t24433*t29858*t29949 + t29244*(t24433*t29714*t29922 - 1.*t29217*t29876*t29922 + t24433*t29798*t29949 - 1.*t29217*t29851*t29949 + t29955 + t29957))*var2[3] + (t29645*t29661 - 1.*t28808*t29227*t29670 + t29583*(t28808*t29227*t29922 + t29933) + t24437*t28808*(t29661*t29922 + t29602*t29949 + t29955 + t29957))*var2[4])*var2[5] + t27148*var2[15] + (t30110*var2[0] + (-1.*t24437*t26936*t28808*t29380 - 1.*t29367*t30180)*var2[1] + (-1.*t24437*t26936*t28808*t29367 + t29380*t30180)*var2[2] + (t29258*t29881 + t29858*t30306 + t29714*(-1.*t29258*t29798 + t30277 + t30281 - 1.*t29244*t30327 - 1.*t29825*t30344 - 1.*t29851*t30353) + t29244*(t30285 + t30286 + t29798*t30306 + t29714*t30327 + t29876*t30344 + t29851*t30453))*var2[3] + (-1.*t24437*t28808*t29045*t29645 - 1.*t24437*t28815*t29670 + t29583*(-1.*t28815*t29227*t29602 + t30059 + t30065 + t30277 - 1.*t28808*t30057*t30278 + t30281) + t24437*t28808*(t28808*t29045*t29227*t29602 - 1.*t29227*t29661*t30057 + t30074 + t30084 + t30285 + t30286))*var2[4] + (-1.*t28815*t29038*t29045 + t28808*t29095 + t28808*t29045*(t28815*t29036 - 1.*t28808*t30057 + t30059 + t30065) + t28815*(-1.*t28808*t29036*t29045 - 1.*t28815*t29045*t30057 + t30074 + t30084))*var2[5])*var2[15] + t26356*var2[16] + (t30747 + t30759 + t30765 + (t29858*t30816 + t29714*(t30790 - 1.*t29244*t30830 - 1.*t29825*t30921) + t29244*(t30795 + t30801 + t29798*t30816 + t29714*t30830 + t29876*t30921 + t29851*t31027))*var2[3] + (t29645*t30772 + t29583*(-1.*t28808*t28815*t30728 + t28808*t29227*t30782 + t30790) + t24437*t28808*(t30687 + t30729 + t29661*t30782 + t30795 + t29602*t30798 + t30801))*var2[4] + (t27136*t28808*t29038 + t28815*(-1.*t27136*t28815*t29036 + t29050*t30669 + t30687 + t27136*t30698 + t30729 + t29045*t30728*t30730))*var2[5] + (0.1575*t29045 + 0.2255*t30669)*var2[15])*var2[16] - 0.0641*var2[17] + (t31183*var2[0] + (t29380*t31193 - 1.*t29367*t31203)*var2[1] + (t29367*t31193 + t29380*t31203)*var2[2] + (t29317*t29858 + t29714*(t31230 - 1.*t29244*t31349 - 1.*t29825*t31406) + t29244*(t31255 + t31259 + t29714*t31349 + t29876*t31406 + t31447 + t31450))*var2[3] + (t29378*t29645 + t29583*(-1.*t28808*t28815*t31160 + t28808*t29227*t31218 + t31230) + t24437*t28808*(t31136 + t31161 + t29661*t31218 + t31253 + t31255 + t31259))*var2[4] + (t26936*t28808*t29038 + t28815*(t31136 + t31143 + t27136*t31147 + t31151 + t29045*t30730*t31160 + t31161))*var2[5] + (0.2255*t29045 + 0.1575*t30669)*var2[15] + (-0.325*t24448 - 1.*t24448*t25046 - 1.*t24448*t31113)*var2[16])*var2[17] + t29317*var3[0] + t29570*var3[1] + t29439*var3[2] + t29890*var3[3] + t29679*var3[4] + t29120*var3[5] + t27148*var3[15] + t26356*var3[16] - 0.0641*var3[17] - 1.*var4[0];
  p_output1[1]=-0.1575*t24433*t28815*t29367 - 0.325*t24408*t31527 - 0.1575*t29013*t31541 - 0.2255*(-1.*t24433*t28815*t29367 + t28808*t31541) + 0.325*t26490*t31570 - 0.575*t24591*t31599 - 0.575*t24677*t31605 - 0.295*(-1.*t24591*t31599 + t24448*t31605) - 0.0641*(t24448*t31599 + t24591*t31605) + var1[1] + t29244*var2[0] + t31552*var2[1] + t31545*var2[2] + t31616*var2[3] + ((-1.*t24437*t28808*t29367 - 1.*t29380*t29825)*var2[1] + t31552*var2[2])*var2[3] + t31580*var2[4] + (t29825*var2[0] - 1.*t29367*t30497*var2[1] + t29380*t30497*var2[2] + (t29714*(t29384*t29798 + t29317*t29851 + t29851*t30478 + t29384*t30491) + t29317*(-1.*t29714*t29851 - 1.*t29798*t29876 - 1.*t29876*t30491 - 1.*t29851*t30512) + t29876*t31607 + t29384*t31614)*var2[3])*var2[4] + t31485*var2[5] + (-1.*t24433*t24437*t28808*var2[0] + (-1.*t24437*t28808*t29217*t29367 - 1.*t28808*t29227*t29380)*var2[1] + (-1.*t28808*t29227*t29367 + t24437*t28808*t29217*t29380)*var2[2] + (t24433*t29949*t31607 + t24433*t29900*t31614 + t29714*(t24433*t29798*t29900 - 1.*t29217*t29851*t29900 + t24433*t29317*t29922 - 1.*t29217*t29384*t29922 + t31855 + t31857) + t29317*(-1.*t24433*t29714*t29922 + t29217*t29876*t29922 - 1.*t24433*t29798*t29949 + t29217*t29851*t29949 + t31863 + t31865))*var2[3] + (t29661*t31572 + t29299*t31576 + t29583*(t29602*t29900 + t29299*t29922 + t31855 + t31857) + t29378*(-1.*t29661*t29922 - 1.*t29602*t29949 + t31863 + t31865))*var2[4])*var2[5] + t31499*var2[15] + (t29258*var2[0] + (-1.*t24437*t28815*t29380 - 1.*t29367*t30353)*var2[1] + (-1.*t24437*t28815*t29367 + t29380*t30353)*var2[2] + (t30306*t31607 + t30110*t31614 + t29714*(t29798*t30110 + t29851*t30180 + t29317*t30327 + t29384*t30344 + t31699 + t31704) + t29317*(-1.*t29798*t30306 - 1.*t29714*t30327 - 1.*t29876*t30344 - 1.*t29851*t30453 + t31712 + t31713))*var2[3] + (-1.*t24437*t28808*t29045*t31572 - 1.*t24437*t26936*t28808*t31576 + t29583*(t26936*t28808*t29227*t29602 - 1.*t29227*t29299*t30057 + t31638 + t31653 + t31699 + t31704) + t29378*(-1.*t28808*t29045*t29227*t29602 + t29227*t29661*t30057 + t31674 + t31676 + t31712 + t31713))*var2[4] + (-1.*t26936*t28815*t31480 - 1.*t28815*t29045*t31483 + t28808*t29045*(-1.*t26936*t28808*t29036 - 1.*t26936*t28815*t30057 + t31638 + t31653) + t26936*t28808*(t28808*t29036*t29045 + t28815*t29045*t30057 + t31674 + t31676))*var2[5])*var2[15] + ((t30816*t31607 + t29714*t31614 + t29714*(t29647 + t29860 + t29880 + t29317*t30830 + t29384*t30921 + t32267) + t29317*(-1.*t29798*t30816 - 1.*t29714*t30830 - 1.*t29876*t30921 - 1.*t29851*t31027 + t32271 + t32275))*var2[3] + (t30772*t31572 + t29583*t31576 + t29583*(t29052 + t29647 + t29662 + t29299*t30782 + t32233 + t32267) + t29378*(-1.*t29661*t30782 - 1.*t29602*t30798 + t32216 + t32225 + t32271 + t32275))*var2[4] + (t28808*t29045*t31480 + t27136*t28808*t31483 + t26936*t28808*(t27136*t28815*t29036 - 1.*t29045*t30728*t30730 + t32216 + t32218 + t32221 + t32225) + t28808*t29045*(t29051 + t29052 + t29053 + t26936*t30728*t30730 + t32233 + t32238))*var2[5] + (t30669*t31490 + t27136*t31496 + t29045*(-1.*t27136*t28929 - 1.*t29045*t30728 + t32218 + t32221) + t27136*(t28929*t29045 + t29051 + t26936*t30728 + t32238))*var2[15])*var2[16] + ((t29317*t31607 + t31183*t31614 + t29714*(t29798*t31183 + t29851*t31203 + t29317*t31349 + t29384*t31406 + t32478 + t32481) + t29317*(-1.*t29714*t31349 - 1.*t29876*t31406 + t32486 + t32487 + t32504 + t32505))*var2[3] + (t29378*t31572 + t31193*t31576 + t29583*(t29602*t31179 + t29299*t31218 + t32446 + t32449 + t32478 + t32481) + t29378*(-1.*t29661*t31218 + t32428 + t32432 + t32485 + t32486 + t32487))*var2[4] + (t28808*t30669*t31480 + t26936*t28808*t31483 + t26936*t28808*(-1.*t29045*t30730*t31160 + t32428 + t32429 + t32430 + t32431 + t32432) + t28808*t29045*(-1.*t28815*t29036*t30669 + t26936*t30730*t31160 + t32439 + t32446 + t32449 + t32452))*var2[5] + (t29045*t31490 + t26936*t31496 + t29045*(-1.*t26936*t28929 - 1.*t29045*t31160 + t32430 + t32431) + t27136*(t28929*t30669 + t26936*t31160 + t32439 + t32452))*var2[15])*var2[17] + t29244*var3[0] + t31552*var3[1] + t31545*var3[2] + t31616*var3[3] + t31580*var3[4] + t31485*var3[5] + t31499*var3[15] - 1.*var4[1];
  p_output1[2]=0.1575*t24433*t28815*t29380 + t30747 + t30759 + t30765 - 0.325*t24408*t32563 - 0.1575*t29013*t32593 - 0.2255*(t24433*t28815*t29380 + t28808*t32593) + 0.325*t26490*t32685 - 0.575*t24591*t32727 - 0.575*t24677*t32731 - 0.295*(-1.*t24591*t32727 + t24448*t32731) - 0.0641*(t24448*t32727 + t24591*t32731) + var1[2] + t32743*var2[3] + ((-1.*t29367*t29583 - 1.*t29380*t29876)*var2[1] + t30764*var2[2])*var2[3] + t32702*var2[4] + (t29876*var2[0] - 1.*t29367*t30512*var2[1] + t29380*t30512*var2[2] + (t29244*(-1.*t29384*t29798 - 1.*t29317*t29851 - 1.*t29851*t30478 - 1.*t29384*t30491) + t29317*(t29798*t29825 + t29244*t29851 + t29825*t30491 + t29851*t30497) + t29384*t32735 + t29825*t32740)*var2[3])*var2[4] + t32539*var2[5] + (t24433*t29949*var2[0] + (t29380*t29661 + t29217*t29367*t29949)*var2[1] + (t29367*t29661 - 1.*t29217*t29380*t29949)*var2[2] + (t24433*t29900*t32735 - 1.*t24433*t24437*t28808*t32740 + t29317*(t24437*t28808*t29602 - 1.*t24433*t24437*t28808*t29798 + t24437*t28808*t29217*t29851 + t24433*t29244*t29922 - 1.*t29217*t29825*t29922 + t32780) + t29244*(-1.*t24433*t29798*t29900 + t29217*t29851*t29900 - 1.*t24433*t29317*t29922 + t29217*t29384*t29922 + t32784 + t32798))*var2[3] + (t29299*t32698 - 1.*t28808*t29227*t32700 + t29378*(-1.*t28808*t29227*t29922 + t32780) + t24437*t28808*(-1.*t29602*t29900 - 1.*t29299*t29922 + t32784 + t32798))*var2[4])*var2[5] - 0.068*t29045*var2[15] + (t30306*var2[0] + (-1.*t24437*t28808*t29045*t29380 - 1.*t29367*t30453)*var2[1] + (-1.*t24437*t28808*t29045*t29367 + t29380*t30453)*var2[2] + (t30110*t32735 + t29258*t32740 + t29317*(t29258*t29798 + t29244*t30327 + t29825*t30344 + t29851*t30353 + t32917 + t32920) + t29244*(-1.*t29798*t30110 - 1.*t29851*t30180 - 1.*t29317*t30327 - 1.*t29384*t30344 + t32924 + t32926))*var2[3] + (-1.*t24437*t26936*t28808*t32698 - 1.*t24437*t28815*t32700 + t29378*(t28815*t29227*t29602 + t28808*t30057*t30278 + t32885 + t32887 + t32917 + t32920) + t24437*t28808*(-1.*t26936*t28808*t29227*t29602 + t29227*t29299*t30057 + t32893 + t32895 + t32924 + t32926))*var2[4] + (-1.*t26936*t28815*t32535 + t28808*t32537 + t26936*t28808*(-1.*t28815*t29036 + t28808*t30057 + t32885 + t32887) + t28815*(t26936*t28808*t29036 + t26936*t28815*t30057 + t32893 + t32895))*var2[5])*var2[15] + t32529*var2[16] + (t30816*var2[0] + (t29380*t30772 - 1.*t29367*t31027)*var2[1] + (t29367*t30772 + t29380*t31027)*var2[2] + (t29714*t32735 + t29317*(t29244*t30830 + t29825*t30921 + t33047) + t29244*(-1.*t29317*t30830 - 1.*t29384*t30921 + t31574 + t31610 + t31612 + t33051))*var2[3] + (t29583*t32698 + t29378*(t28808*t28815*t30728 - 1.*t28808*t29227*t30782 + t33047) + t24437*t28808*(-1.*t29299*t30782 + t31478 + t31574 + t31575 + t33027 + t33051))*var2[4] + (t28808*t29045*t32535 + t28815*(-1.*t29045*t30698 - 1.*t26936*t30728*t30730 + t31475 + t31478 + t31479 + t33027))*var2[5] - 0.068*t27136*var2[15])*var2[16] - 0.28*var2[17] + (t29325 + t29478 + t29573 + (t31183*t32735 + t29317*(t29244*t31349 + t29825*t31406 + t32999) + t29244*(-1.*t29798*t31183 - 1.*t29851*t31203 - 1.*t29317*t31349 - 1.*t29384*t31406 + t33002 + t33005))*var2[3] + (t31193*t32698 + t29378*(t28808*t28815*t31160 - 1.*t28808*t29227*t31218 + t32999) + t24437*t28808*(-1.*t29602*t31179 - 1.*t29299*t31218 + t32985 + t32989 + t33002 + t33005))*var2[4] + (t28808*t30669*t32535 + t28815*(-1.*t26936*t29050 + t28815*t29036*t30669 - 1.*t29045*t31147 - 1.*t26936*t30730*t31160 + t32985 + t32989))*var2[5] - 0.068*t26936*var2[15] + (t24630 + t26267 - 1.*t24591*t31113)*var2[16])*var2[17] + t29714*var3[0] + t30764*var3[1] + t30757*var3[2] + t32743*var3[3] + t32702*var3[4] + t32539*var3[5] - 0.068*t29045*var3[15] + t32529*var3[16] - 0.28*var3[17] - 1.*var4[2];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "ddh_RrFoot_ParallelStance.hh"

namespace ParallelStance
{

void ddh_RrFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
