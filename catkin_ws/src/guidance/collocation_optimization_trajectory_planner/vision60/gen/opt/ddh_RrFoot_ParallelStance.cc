/*
 * Automatically Generated from Mathematica.
 * Tue 7 Jun 2022 14:07:52 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t20195;
  double t20335;
  double t20329;
  double t20357;
  double t20366;
  double t20367;
  double t20368;
  double t20427;
  double t20448;
  double t20452;
  double t20457;
  double t20459;
  double t20461;
  double t20462;
  double t20487;
  double t19985;
  double t20490;
  double t20592;
  double t20628;
  double t20636;
  double t20641;
  double t20646;
  double t20679;
  double t20681;
  double t20682;
  double t20683;
  double t20695;
  double t20694;
  double t20712;
  double t20715;
  double t20724;
  double t20725;
  double t19986;
  double t20014;
  double t20703;
  double t20728;
  double t20730;
  double t20781;
  double t20783;
  double t20784;
  double t20741;
  double t20742;
  double t20744;
  double t20751;
  double t20757;
  double t20758;
  double t20739;
  double t20762;
  double t20767;
  double t20785;
  double t20786;
  double t20787;
  double t20788;
  double t20789;
  double t20790;
  double t20819;
  double t20877;
  double t20879;
  double t20884;
  double t20885;
  double t20015;
  double t20896;
  double t20899;
  double t20098;
  double t20914;
  double t20915;
  double t20917;
  double t20945;
  double t20951;
  double t20952;
  double t20953;
  double t20991;
  double t20992;
  double t20920;
  double t20921;
  double t20922;
  double t20928;
  double t20929;
  double t20939;
  double t21139;
  double t21157;
  double t21170;
  double t21173;
  double t21174;
  double t21176;
  double t21184;
  double t21187;
  double t21198;
  double t21200;
  double t21201;
  double t21228;
  double t21229;
  double t21230;
  double t21266;
  double t21271;
  double t21277;
  double t21251;
  double t21252;
  double t21260;
  double t21261;
  double t21262;
  double t21264;
  double t21265;
  double t21285;
  double t21286;
  double t21293;
  double t21298;
  double t21299;
  double t21304;
  double t21306;
  double t21307;
  double t21308;
  double t21309;
  double t21310;
  double t20904;
  double t20905;
  double t20909;
  double t21621;
  double t21622;
  double t21623;
  double t21609;
  double t21613;
  double t21619;
  double t21634;
  double t21636;
  double t21640;
  double t21624;
  double t21629;
  double t21630;
  double t21631;
  double t21641;
  double t21642;
  double t21657;
  double t21670;
  double t21671;
  double t21675;
  double t21676;
  double t21680;
  double t21705;
  double t21726;
  double t21733;
  double t21737;
  double t21740;
  double t21741;
  double t21966;
  double t21986;
  double t21992;
  double t22001;
  double t22013;
  double t22014;
  double t22015;
  double t22018;
  double t22042;
  double t22142;
  double t22143;
  double t22144;
  double t22149;
  double t22150;
  double t22188;
  double t22189;
  double t22191;
  double t22147;
  double t22151;
  double t22164;
  double t22168;
  double t22212;
  double t22213;
  double t22238;
  double t22262;
  double t22266;
  double t22329;
  double t22335;
  double t22336;
  double t22343;
  double t22346;
  double t22350;
  double t22366;
  double t22382;
  double t22383;
  double t23265;
  double t23267;
  double t23269;
  double t23281;
  double t23287;
  double t23288;
  double t23782;
  double t23788;
  double t23789;
  double t24261;
  double t24265;
  double t23799;
  double t24100;
  double t24127;
  double t24206;
  double t23796;
  double t24256;
  double t24269;
  double t24321;
  double t24322;
  double t24323;
  double t24295;
  double t24303;
  double t24304;
  double t24315;
  double t24318;
  double t24319;
  double t24329;
  double t24330;
  double t24331;
  double t24324;
  double t24327;
  double t24334;
  double t24343;
  double t24344;
  double t24348;
  double t24350;
  double t24359;
  double t24363;
  double t24398;
  double t24408;
  double t24411;
  double t24558;
  double t24560;
  double t24561;
  double t24277;
  double t24594;
  double t24595;
  double t24596;
  double t24614;
  double t24620;
  double t24621;
  double t24630;
  double t24633;
  double t24634;
  double t24641;
  double t24642;
  double t24643;
  double t24587;
  double t24588;
  double t24584;
  double t24600;
  double t24680;
  double t24682;
  double t24683;
  double t24667;
  double t24673;
  double t24677;
  double t24768;
  double t24854;
  double t24861;
  double t24881;
  double t24883;
  double t24888;
  double t24891;
  double t24894;
  double t24897;
  double t24585;
  double t24592;
  double t24934;
  double t24935;
  double t24936;
  double t24937;
  double t24939;
  double t24942;
  double t24943;
  double t24945;
  double t24949;
  double t24951;
  double t24952;
  double t24953;
  double t24954;
  double t25003;
  double t25004;
  double t25042;
  double t25043;
  double t25044;
  double t25048;
  double t25049;
  double t25050;
  double t25032;
  double t25037;
  double t25039;
  double t24849;
  double t25065;
  double t25066;
  double t25067;
  double t25068;
  double t25070;
  double t25074;
  double t25075;
  double t25017;
  double t25018;
  double t25019;
  double t25061;
  double t25062;
  double t25063;
  double t24909;
  double t24912;
  double t25096;
  double t25097;
  double t25099;
  double t25100;
  double t25101;
  double t25102;
  double t25104;
  double t25088;
  double t25089;
  double t25090;
  double t25092;
  double t25093;
  double t25094;
  double t22390;
  double t22396;
  double t22399;
  double t25123;
  double t25127;
  double t25137;
  double t25140;
  double t25177;
  double t25182;
  double t22173;
  double t22174;
  double t22175;
  double t25187;
  double t25191;
  double t22417;
  double t22538;
  double t23237;
  double t25231;
  double t25233;
  double t25239;
  double t25241;
  double t23383;
  double t23384;
  double t23390;
  double t23557;
  double t23631;
  double t23632;
  double t25289;
  double t25290;
  double t25297;
  double t25295;
  double t25287;
  double t25291;
  double t25318;
  double t25321;
  double t25323;
  double t24507;
  double t24523;
  double t24526;
  double t25349;
  double t25350;
  double t25355;
  double t25360;
  double t25356;
  double t25358;
  double t25347;
  double t25351;
  double t25387;
  double t25390;
  double t24613;
  double t24625;
  double t24628;
  double t25399;
  double t25400;
  double t25450;
  double t25451;
  double t25452;
  double t25453;
  double t25348;
  double t25456;
  double t25457;
  double t25458;
  double t25459;
  double t25460;
  double t25461;
  double t25462;
  double t24284;
  double t25469;
  double t25470;
  double t25471;
  double t25398;
  double t25482;
  double t25483;
  double t25484;
  double t25485;
  double t25486;
  double t25487;
  double t25488;
  double t24285;
  double t24287;
  double t24288;
  double t24289;
  double t24290;
  double t24292;
  double t24293;
  double t24294;
  double t25465;
  double t25466;
  double t25467;
  double t25478;
  double t25479;
  double t25480;
  double t25422;
  double t25423;
  double t25501;
  double t25502;
  double t25503;
  double t25504;
  double t25506;
  double t25507;
  double t25508;
  double t25493;
  double t25494;
  double t25495;
  double t25497;
  double t25498;
  double t25499;
  double t25537;
  double t25541;
  double t25543;
  double t25571;
  double t25573;
  double t22214;
  double t25577;
  double t25579;
  double t25597;
  double t25600;
  double t25604;
  double t25606;
  double t21017;
  double t21227;
  double t21249;
  double t25669;
  double t25671;
  double t25681;
  double t25684;
  double t25687;
  double t25709;
  double t25730;
  double t25735;
  t20195 = Cos(var1[17]);
  t20335 = Sin(var1[17]);
  t20329 = -0.0641*t20195;
  t20357 = -0.28*t20335;
  t20366 = t20329 + t20357;
  t20367 = -1.*t20195*t20366;
  t20368 = -0.325*t20335;
  t20427 = -1.*t20195;
  t20448 = 1. + t20427;
  t20452 = -0.575*t20448;
  t20457 = -0.295*t20195;
  t20459 = -0.0641*t20335;
  t20461 = t20452 + t20457 + t20459;
  t20462 = -1.*t20461*t20335;
  t20487 = t20367 + t20368 + t20462;
  t19985 = Cos(var1[16]);
  t20490 = Sin(var1[16]);
  t20592 = t20195*t20490;
  t20628 = -1.*t19985*t20335;
  t20636 = t20592 + t20628;
  t20641 = 0.1575*t20636;
  t20646 = -1.*t20195*t20490;
  t20679 = t19985*t20335;
  t20681 = t20646 + t20679;
  t20682 = 0.2255*t20681;
  t20683 = t20641 + t20682;
  t20695 = Sin(var1[15]);
  t20694 = Cos(var1[15]);
  t20712 = 0.325*t20490;
  t20715 = t19985*t20366;
  t20724 = t20490*t20461;
  t20725 = t20712 + t20715 + t20724;
  t19986 = -1.*t19985;
  t20014 = 1. + t19986;
  t20703 = -0.068*t20695;
  t20728 = t20694*t20725;
  t20730 = t20703 + t20728;
  t20781 = t19985*t20195;
  t20783 = t20490*t20335;
  t20784 = t20781 + t20783;
  t20741 = -1.*t20694;
  t20742 = 1. + t20741;
  t20744 = -0.1575*t20742;
  t20751 = -0.2255*t20694;
  t20757 = -1.*t20695*t20725;
  t20758 = t20744 + t20751 + t20757;
  t20739 = -1.*t20695*t20730;
  t20762 = -1.*t20694*t20758;
  t20767 = t20739 + t20762;
  t20785 = t20694*t20767*t20784;
  t20786 = -0.325*t20014;
  t20787 = -1.*t20490*t20366;
  t20788 = t19985*t20461;
  t20789 = t20786 + t20787 + t20788;
  t20790 = t20789*t20681;
  t20819 = t20694*t20730*t20784;
  t20877 = -1.*t20695*t20758*t20784;
  t20879 = t20790 + t20819 + t20877;
  t20884 = t20695*t20879;
  t20885 = t20785 + t20884;
  t20015 = Cos(var1[4]);
  t20896 = Sin(var1[4]);
  t20899 = Sin(var1[5]);
  t20098 = Cos(var1[5]);
  t20914 = t20694*t20896;
  t20915 = t20015*t20695*t20899;
  t20917 = t20914 + t20915;
  t20945 = t20694*t20636*t20896;
  t20951 = t20098*t20784;
  t20952 = t20695*t20636*t20899;
  t20953 = t20951 + t20952;
  t20991 = t20015*t20953;
  t20992 = t20945 + t20991;
  t20920 = -1.*t20015*t20098*t20490;
  t20921 = t19985*t20917;
  t20922 = t20920 + t20921;
  t20928 = t19985*t20015*t20098;
  t20929 = t20490*t20917;
  t20939 = t20928 + t20929;
  t21139 = Sin(var1[3]);
  t21157 = -1.*t20098*t20695*t20636;
  t21170 = t20784*t20899;
  t21173 = t21157 + t21170;
  t21174 = t21139*t21173;
  t21176 = Cos(var1[3]);
  t21184 = t20694*t20015*t20636;
  t21187 = -1.*t20896*t20953;
  t21198 = t21184 + t21187;
  t21200 = t21176*t21198;
  t21201 = t21174 + t21200;
  t21228 = t21176*t21173;
  t21229 = -1.*t21139*t21198;
  t21230 = t21228 + t21229;
  t21266 = t20098*t20758;
  t21271 = t20789*t20899;
  t21277 = t21266 + t21271;
  t21251 = -1.*t20098*t20695*t20784;
  t21252 = t20681*t20899;
  t21260 = t21251 + t21252;
  t21261 = t20098*t20789;
  t21262 = -1.*t20758*t20899;
  t21264 = t21261 + t21262;
  t21265 = t20694*t20899*t21264;
  t21285 = -1.*t20694*t20098*t21277;
  t21286 = t20739 + t21265 + t21285;
  t21293 = t21260*t21286;
  t21298 = t21277*t21260;
  t21299 = t20098*t20681;
  t21304 = t20695*t20784*t20899;
  t21306 = t21299 + t21304;
  t21307 = t21264*t21306;
  t21308 = t20819 + t21298 + t21307;
  t21309 = t20694*t20098*t21308;
  t21310 = t21293 + t21309;
  t20904 = t20695*t20896;
  t20905 = -1.*t20694*t20015*t20899;
  t20909 = t20904 + t20905;
  t21621 = t20730*t20896;
  t21622 = t20015*t21264;
  t21623 = t21621 + t21622;
  t21609 = t20694*t20784*t20896;
  t21613 = t20015*t21306;
  t21619 = t21609 + t21613;
  t21634 = t20015*t20730;
  t21636 = -1.*t20896*t21264;
  t21640 = t21634 + t21636;
  t21624 = -1.*t20909*t21623;
  t21629 = t20015*t20695;
  t21630 = t20694*t20896*t20899;
  t21631 = t21629 + t21630;
  t21641 = -1.*t21631*t21640;
  t21642 = t21285 + t21624 + t21641;
  t21657 = t21619*t21642;
  t21670 = t21623*t21619;
  t21671 = t20694*t20015*t20784;
  t21675 = -1.*t20896*t21306;
  t21676 = t21671 + t21675;
  t21680 = t21640*t21676;
  t21705 = t21298 + t21670 + t21680;
  t21726 = t20909*t21705;
  t21733 = t21657 + t21726;
  t21737 = t20098*t20695*t20636;
  t21740 = -1.*t20784*t20899;
  t21741 = t21737 + t21740;
  t21966 = -1.*t20098*t20758;
  t21986 = -1.*t20789*t20899;
  t21992 = t21966 + t21986;
  t22001 = t20694*t20899*t21277;
  t22013 = t20098*t20695*t20784;
  t22014 = -1.*t20681*t20899;
  t22015 = t22013 + t22014;
  t22018 = t21264*t21260;
  t22042 = t21277*t21306;
  t22142 = 0.068*t20695;
  t22143 = -1.*t20694*t20725;
  t22144 = t22142 + t22143;
  t22149 = -0.068*t20694;
  t22150 = t22149 + t20757;
  t22188 = -1.*t20015*t20695*t20636;
  t22189 = -1.*t20694*t20636*t20896*t20899;
  t22191 = t22188 + t22189;
  t22147 = -1.*t20694*t20730;
  t22151 = -1.*t20695*t22150;
  t22164 = -1.*t20695*t20730*t20784;
  t22168 = t20694*t22150*t20784;
  t22212 = Power(t20098,2);
  t22213 = -1.*t20694*t22212*t22144;
  t22238 = t20098*t20695*t21277;
  t22262 = -1.*t20694*t20098*t20784*t21277;
  t22266 = t20098*t22144*t21260;
  t22329 = -1.*t20695*t20784*t20896;
  t22335 = t20694*t20015*t20784*t20899;
  t22336 = t22329 + t22335;
  t22343 = t22150*t20896;
  t22346 = -1.*t20015*t22144*t20899;
  t22350 = t22343 + t22346;
  t22366 = t20015*t22150;
  t22382 = t22144*t20896*t20899;
  t22383 = t22366 + t22382;
  t23265 = -1.*t20694*t20636*t20896;
  t23267 = -1.*t20015*t20953;
  t23269 = t23265 + t23267;
  t23281 = -1.*t20730*t20896;
  t23287 = -1.*t20015*t21264;
  t23288 = t23281 + t23287;
  t23782 = -1.*t19985*t20195;
  t23788 = -1.*t20490*t20335;
  t23789 = t23782 + t23788;
  t24261 = 0.325*t19985;
  t24265 = t24261 + t20787 + t20788;
  t23799 = -0.325*t20490;
  t24100 = -1.*t19985*t20366;
  t24127 = -1.*t20490*t20461;
  t24206 = t23799 + t24100 + t24127;
  t23796 = t20694*t20730*t20681;
  t24256 = Power(t20694,2);
  t24269 = t24256*t24265*t20784;
  t24321 = -1.*t20098*t20695*t24265;
  t24322 = t24206*t20899;
  t24323 = t24321 + t24322;
  t24295 = -1.*t20098*t20695*t20681;
  t24303 = t23789*t20899;
  t24304 = t24295 + t24303;
  t24315 = t20098*t24206;
  t24318 = t20695*t24265*t20899;
  t24319 = t24315 + t24318;
  t24329 = t20098*t23789;
  t24330 = t20695*t20681*t20899;
  t24331 = t24329 + t24330;
  t24324 = -1.*t20694*t20098*t24323;
  t24327 = t24323*t21260;
  t24334 = t21277*t24304;
  t24343 = t20694*t20681*t20896;
  t24344 = t20015*t24331;
  t24348 = t24343 + t24344;
  t24350 = t20694*t24265*t20896;
  t24359 = t20015*t24319;
  t24363 = t24350 + t24359;
  t24398 = t20694*t20015*t24265;
  t24408 = -1.*t20896*t24319;
  t24411 = t24398 + t24408;
  t24558 = -0.28*t20195;
  t24560 = 0.0641*t20335;
  t24561 = t24558 + t24560;
  t24277 = Power(t20695,2);
  t24594 = t20490*t20366;
  t24595 = t19985*t24561;
  t24596 = t24594 + t24595;
  t24614 = t20098*t20636;
  t24620 = t20695*t23789*t20899;
  t24621 = t24614 + t24620;
  t24630 = -1.*t20098*t20695*t23789;
  t24633 = t20636*t20899;
  t24634 = t24630 + t24633;
  t24641 = t20694*t20015*t23789;
  t24642 = -1.*t20896*t24621;
  t24643 = t24641 + t24642;
  t24587 = -1.*t20490*t24561;
  t24588 = t20715 + t24587;
  t24584 = t20694*t20730*t20636;
  t24600 = t24256*t24596*t20784;
  t24680 = -1.*t20098*t20695*t24596;
  t24682 = t24588*t20899;
  t24683 = t24680 + t24682;
  t24667 = t20098*t24588;
  t24673 = t20695*t24596*t20899;
  t24677 = t24667 + t24673;
  t24768 = -1.*t20694*t20098*t24683;
  t24854 = t24683*t21260;
  t24861 = t21277*t21173;
  t24881 = t20694*t24596*t20896;
  t24883 = t20015*t24677;
  t24888 = t24881 + t24883;
  t24891 = t20694*t20015*t24596;
  t24894 = -1.*t20896*t24677;
  t24897 = t24891 + t24894;
  t24585 = -1.*t20695*t20758*t20636;
  t24592 = t20789*t20784;
  t24934 = -1.*t20789*t20681;
  t24935 = -1.*t20694*t20730*t20784;
  t24936 = t20695*t20758*t20784;
  t24937 = t24934 + t24935 + t24936;
  t24939 = t20694*t20636*t24937;
  t24942 = t24584 + t24585 + t24592;
  t24943 = t20694*t20784*t24942;
  t24945 = t24939 + t24943;
  t24949 = t20725*t20636;
  t24951 = t24949 + t24592;
  t24952 = t20681*t24951;
  t24953 = -1.*t20725*t20784;
  t24954 = t24934 + t24953;
  t25003 = t20784*t24954;
  t25004 = t24952 + t25003;
  t25042 = t20694*t20098*t21139;
  t25043 = t21176*t21631;
  t25044 = t25042 + t25043;
  t25048 = t20694*t21176*t20098;
  t25049 = -1.*t21139*t21631;
  t25050 = t25048 + t25049;
  t25032 = t21176*t20098;
  t25037 = -1.*t21139*t20896*t20899;
  t25039 = t25032 + t25037;
  t24849 = t21264*t20953;
  t25065 = t24584 + t24849 + t24861;
  t25066 = t21260*t25065;
  t25067 = -1.*t21277*t21260;
  t25068 = -1.*t21264*t21306;
  t25070 = t24935 + t25067 + t25068;
  t25074 = t21173*t25070;
  t25075 = t25066 + t25074;
  t25017 = t20098*t21139*t20896;
  t25018 = t21176*t20899;
  t25019 = t25017 + t25018;
  t25061 = -1.*t20694*t20015*t21139;
  t25062 = -1.*t20695*t25039;
  t25063 = t25061 + t25062;
  t24909 = t21623*t20992;
  t24912 = t21640*t21198;
  t25096 = t24861 + t24909 + t24912;
  t25097 = t21619*t25096;
  t25099 = -1.*t21623*t21619;
  t25100 = -1.*t21640*t21676;
  t25101 = t25067 + t25099 + t25100;
  t25102 = t20992*t25101;
  t25104 = t25097 + t25102;
  t25088 = -1.*t20490*t25019;
  t25089 = t19985*t25063;
  t25090 = t25088 + t25089;
  t25092 = t19985*t25019;
  t25093 = t20490*t25063;
  t25094 = t25092 + t25093;
  t22390 = t20694*t20015;
  t22396 = -1.*t20695*t20896*t20899;
  t22399 = t22390 + t22396;
  t25123 = -1.*t20695*t20730*t20636;
  t25127 = t20694*t22150*t20636;
  t25137 = t20695*t20730*t20784;
  t25140 = -1.*t20694*t22150*t20784;
  t25177 = -1.*t20694*t20098*t20636*t21277;
  t25182 = t20098*t22144*t21173;
  t22173 = -1.*t20695*t20636*t20896;
  t22174 = t20694*t20015*t20636*t20899;
  t22175 = t22173 + t22174;
  t25187 = t20694*t20098*t20784*t21277;
  t25191 = -1.*t20098*t22144*t21260;
  t22417 = -1.*t20015*t20695*t20784;
  t22538 = -1.*t20694*t20784*t20896*t20899;
  t23237 = t22417 + t22538;
  t25231 = t21277*t20953;
  t25233 = t21264*t21173;
  t25239 = -1.*t21264*t21260;
  t25241 = -1.*t21277*t21306;
  t23383 = -1.*t20695*t20896;
  t23384 = t20694*t20015*t20899;
  t23390 = t23383 + t23384;
  t23557 = -1.*t20694*t20784*t20896;
  t23631 = -1.*t20015*t21306;
  t23632 = t23557 + t23631;
  t25289 = -1.*t24206*t20681;
  t25290 = -1.*t20789*t23789;
  t25297 = t24206*t20784;
  t25295 = t24256*t24265*t20636;
  t25287 = -1.*t20694*t20730*t20681;
  t25291 = -1.*t24256*t24265*t20784;
  t25318 = t24323*t21173;
  t25321 = -1.*t24323*t21260;
  t25323 = -1.*t21277*t24304;
  t24507 = t20694*t20015*t20681;
  t24523 = -1.*t20896*t24331;
  t24526 = t24507 + t24523;
  t25349 = -1.*t24588*t20681;
  t25350 = -1.*t20789*t20784;
  t25355 = t20789*t20636;
  t25360 = t24588*t20784;
  t25356 = t24256*t24596*t20636;
  t25358 = t20694*t20730*t23789;
  t25347 = -1.*t20694*t20730*t20636;
  t25351 = -1.*t24256*t24596*t20784;
  t25387 = t21277*t24634;
  t25390 = t24683*t21173;
  t24613 = t20694*t23789*t20896;
  t24625 = t20015*t24621;
  t24628 = t24613 + t24625;
  t25399 = -1.*t24683*t21260;
  t25400 = -1.*t21277*t21173;
  t25450 = 0.325*t20195;
  t25451 = t20195*t20461;
  t25452 = -1.*t20366*t20335;
  t25453 = t25450 + t25451 + t25452;
  t25348 = t20695*t20758*t20636;
  t25456 = t20695*t20730;
  t25457 = t20694*t20758;
  t25458 = t25456 + t25457;
  t25459 = t20694*t25458*t20636;
  t25460 = t25347 + t25348 + t25350;
  t25461 = t20695*t25460;
  t25462 = t25459 + t25461;
  t24284 = var2[0]*t21619;
  t25469 = t20098*t21139;
  t25470 = t21176*t20896*t20899;
  t25471 = t25469 + t25470;
  t25398 = -1.*t21264*t20953;
  t25482 = -1.*t20694*t20899*t21264;
  t25483 = t20694*t20098*t21277;
  t25484 = t25456 + t25482 + t25483;
  t25485 = t21173*t25484;
  t25486 = t25347 + t25398 + t25400;
  t25487 = t20694*t20098*t25486;
  t25488 = t25485 + t25487;
  t24285 = t21139*t21260;
  t24287 = t21176*t21676;
  t24288 = t24285 + t24287;
  t24289 = var2[2]*t24288;
  t24290 = t21176*t21260;
  t24292 = -1.*t21139*t21676;
  t24293 = t24290 + t24292;
  t24294 = var2[1]*t24293;
  t25465 = -1.*t21176*t20098*t20896;
  t25466 = t21139*t20899;
  t25467 = t25465 + t25466;
  t25478 = t20694*t21176*t20015;
  t25479 = -1.*t20695*t25471;
  t25480 = t25478 + t25479;
  t25422 = -1.*t21623*t20992;
  t25423 = -1.*t21640*t21198;
  t25501 = t20909*t21623;
  t25502 = t21631*t21640;
  t25503 = t25483 + t25501 + t25502;
  t25504 = t20992*t25503;
  t25506 = t25400 + t25422 + t25423;
  t25507 = t20909*t25506;
  t25508 = t25504 + t25507;
  t25493 = -1.*t20490*t25467;
  t25494 = t19985*t25480;
  t25495 = t25493 + t25494;
  t25497 = t19985*t25467;
  t25498 = t20490*t25480;
  t25499 = t25497 + t25498;
  t25537 = -1.*t20694*t20899*t21277;
  t25541 = -1.*t21277*t20953;
  t25543 = -1.*t21264*t21173;
  t25571 = t20694*t20730;
  t25573 = t20695*t22150;
  t22214 = Power(t20899,2);
  t25577 = t20695*t20730*t20636;
  t25579 = -1.*t20694*t22150*t20636;
  t25597 = t20694*t22212*t22144;
  t25600 = -1.*t20098*t20695*t21277;
  t25604 = t20694*t20098*t20636*t21277;
  t25606 = -1.*t20098*t22144*t21173;
  t21017 = var2[0]*t20992;
  t21227 = var2[2]*t21201;
  t21249 = var2[1]*t21230;
  t25669 = -1.*t24256*t24596*t20636;
  t25671 = -1.*t20694*t20730*t23789;
  t25681 = t20694*t20098*t24683;
  t25684 = -1.*t21277*t24634;
  t25687 = -1.*t24683*t21173;
  t25709 = -1.*t24256*t24265*t20636;
  t25730 = t20694*t20098*t24323;
  t25735 = -1.*t24323*t21173;
  p_output1[0]=-0.325*t20014*t20015*t20098 + 0.1575*t20695*t20896 + 0.1575*t20015*t20742*t20899 - 0.2255*t20909 + 0.325*t20490*t20917 - 0.575*t20335*t20922 - 0.575*t20448*t20939 - 0.295*(-1.*t20335*t20922 + t20195*t20939) - 0.0641*(t20195*t20922 + t20335*t20939) + t21017 + t21227 + t21249 + var1[0] + t21733*var2[3] + ((-1.*t21139*t21173 - 1.*t21176*t21198)*var2[1] + t21230*var2[2])*var2[3] + t21310*var2[4] + (t21198*var2[0] - 1.*t21139*t23269*var2[1] + t21176*t23269*var2[2] + (t21642*t21676 + t21631*t21705 + t21619*(-1.*t21623*t21631 - 1.*t20909*t21640 - 1.*t21631*t23288 - 1.*t21640*t23390) + t20909*(t21619*t21640 + t21623*t21676 + t21676*t23288 + t21640*t23632))*var2[3])*var2[4] + t20885*var2[5] + (t20015*t21741*var2[0] + (t20953*t21176 + t20896*t21139*t21741)*var2[1] + (t20953*t21139 - 1.*t20896*t21176*t21741)*var2[2] + (-1.*t20015*t20098*t20694*t21705 + t21619*(-1.*t20098*t20694*t21264 + t20015*t20098*t20694*t21623 - 1.*t20098*t20694*t20896*t21640 - 1.*t20015*t20909*t21992 + t20896*t21631*t21992 + t22001) + t20015*t21642*t22015 + t20909*(t20015*t21619*t21992 - 1.*t20896*t21676*t21992 + t20015*t21623*t22015 - 1.*t20896*t21640*t22015 + t22018 + t22042))*var2[3] + (t21286*t21306 - 1.*t20694*t20899*t21308 + t21260*(t20694*t20899*t21992 + t22001) + t20098*t20694*(t21306*t21992 + t21264*t22015 + t22018 + t22042))*var2[4])*var2[5] + t20683*var2[15] + (t22175*var2[0] + (-1.*t20098*t20636*t20694*t21176 - 1.*t21139*t22191)*var2[1] + (-1.*t20098*t20636*t20694*t21139 + t21176*t22191)*var2[2] + (t20917*t21705 + t21642*t22336 + t21619*(-1.*t20917*t21623 + t22213 + t22238 - 1.*t20909*t22350 - 1.*t21631*t22383 - 1.*t21640*t22399) + t20909*(t22262 + t22266 + t21623*t22336 + t21619*t22350 + t21676*t22383 + t21640*t23237))*var2[3] + (-1.*t20098*t20694*t20784*t21286 - 1.*t20098*t20695*t21308 + t21260*(-1.*t20695*t20899*t21264 + t22147 + t22151 + t22213 - 1.*t20694*t22144*t22214 + t22238) + t20098*t20694*(t20694*t20784*t20899*t21264 - 1.*t20899*t21306*t22144 + t22164 + t22168 + t22262 + t22266))*var2[4] + (-1.*t20695*t20767*t20784 + t20694*t20879 + t20694*t20784*(t20695*t20758 - 1.*t20694*t22144 + t22147 + t22151) + t20695*(-1.*t20694*t20758*t20784 - 1.*t20695*t20784*t22144 + t22164 + t22168))*var2[5])*var2[15] + t20487*var2[16] + (t24284 + t24289 + t24294 + (t21642*t24348 + t21619*(t24324 - 1.*t20909*t24363 - 1.*t21631*t24411) + t20909*(t24327 + t24334 + t21623*t24348 + t21619*t24363 + t21676*t24411 + t21640*t24526))*var2[3] + (t21286*t24304 + t21260*(-1.*t20694*t20695*t24265 + t20694*t20899*t24319 + t24324) + t20098*t20694*(t23796 + t24269 + t21306*t24319 + t24327 + t21264*t24331 + t24334))*var2[4] + (t20681*t20694*t20767 + t20695*(-1.*t20681*t20695*t20758 + t20789*t23789 + t23796 + t20681*t24206 + t24269 + t20784*t24265*t24277))*var2[5] + (0.1575*t20784 + 0.2255*t23789)*var2[15])*var2[16] - 0.0641*var2[17] + (t24628*var2[0] + (t21176*t24634 - 1.*t21139*t24643)*var2[1] + (t21139*t24634 + t21176*t24643)*var2[2] + (t20992*t21642 + t21619*(t24768 - 1.*t20909*t24888 - 1.*t21631*t24897) + t20909*(t24854 + t24861 + t21619*t24888 + t21676*t24897 + t24909 + t24912))*var2[3] + (t21173*t21286 + t21260*(-1.*t20694*t20695*t24596 + t20694*t20899*t24677 + t24768) + t20098*t20694*(t24584 + t24600 + t21306*t24677 + t24849 + t24854 + t24861))*var2[4] + (t20636*t20694*t20767 + t20695*(t24584 + t24585 + t20681*t24588 + t24592 + t20784*t24277*t24596 + t24600))*var2[5] + (0.2255*t20784 + 0.1575*t23789)*var2[15] + (-0.325*t20195 - 1.*t20195*t20461 - 1.*t20195*t24561)*var2[16])*var2[17] + t20992*var3[0] + t21230*var3[1] + t21201*var3[2] + t21733*var3[3] + t21310*var3[4] + t20885*var3[5] + t20683*var3[15] + t20487*var3[16] - 0.0641*var3[17] - 1.*var4[0];
  p_output1[1]=-0.1575*t20015*t20695*t21139 - 0.325*t20014*t25019 - 0.1575*t20742*t25039 - 0.2255*(-1.*t20015*t20695*t21139 + t20694*t25039) + 0.325*t20490*t25063 - 0.575*t20335*t25090 - 0.575*t20448*t25094 - 0.295*(-1.*t20335*t25090 + t20195*t25094) - 0.0641*(t20195*t25090 + t20335*t25094) + var1[1] + t20909*var2[0] + t25050*var2[1] + t25044*var2[2] + t25104*var2[3] + ((-1.*t20098*t20694*t21139 - 1.*t21176*t21631)*var2[1] + t25050*var2[2])*var2[3] + t25075*var2[4] + (t21631*var2[0] - 1.*t21139*t23390*var2[1] + t21176*t23390*var2[2] + (t21619*(t21198*t21623 + t20992*t21640 + t21640*t23269 + t21198*t23288) + t20992*(-1.*t21619*t21640 - 1.*t21623*t21676 - 1.*t21676*t23288 - 1.*t21640*t23632) + t21676*t25096 + t21198*t25101)*var2[3])*var2[4] + t24945*var2[5] + (-1.*t20015*t20098*t20694*var2[0] + (-1.*t20098*t20694*t20896*t21139 - 1.*t20694*t20899*t21176)*var2[1] + (-1.*t20694*t20899*t21139 + t20098*t20694*t20896*t21176)*var2[2] + (t20015*t22015*t25096 + t20015*t21741*t25101 + t21619*(t20015*t21623*t21741 - 1.*t20896*t21640*t21741 + t20015*t20992*t21992 - 1.*t20896*t21198*t21992 + t25231 + t25233) + t20992*(-1.*t20015*t21619*t21992 + t20896*t21676*t21992 - 1.*t20015*t21623*t22015 + t20896*t21640*t22015 + t25239 + t25241))*var2[3] + (t21306*t25065 + t20953*t25070 + t21260*(t21264*t21741 + t20953*t21992 + t25231 + t25233) + t21173*(-1.*t21306*t21992 - 1.*t21264*t22015 + t25239 + t25241))*var2[4])*var2[5] + t25004*var2[15] + (t20917*var2[0] + (-1.*t20098*t20695*t21176 - 1.*t21139*t22399)*var2[1] + (-1.*t20098*t20695*t21139 + t21176*t22399)*var2[2] + (t22336*t25096 + t22175*t25101 + t21619*(t21623*t22175 + t21640*t22191 + t20992*t22350 + t21198*t22383 + t25177 + t25182) + t20992*(-1.*t21623*t22336 - 1.*t21619*t22350 - 1.*t21676*t22383 - 1.*t21640*t23237 + t25187 + t25191))*var2[3] + (-1.*t20098*t20694*t20784*t25065 - 1.*t20098*t20636*t20694*t25070 + t21260*(t20636*t20694*t20899*t21264 - 1.*t20899*t20953*t22144 + t25123 + t25127 + t25177 + t25182) + t21173*(-1.*t20694*t20784*t20899*t21264 + t20899*t21306*t22144 + t25137 + t25140 + t25187 + t25191))*var2[4] + (-1.*t20636*t20695*t24937 - 1.*t20695*t20784*t24942 + t20694*t20784*(-1.*t20636*t20694*t20758 - 1.*t20636*t20695*t22144 + t25123 + t25127) + t20636*t20694*(t20694*t20758*t20784 + t20695*t20784*t22144 + t25137 + t25140))*var2[5])*var2[15] + ((t24348*t25096 + t21619*t25101 + t21619*(t21298 + t21670 + t21680 + t20992*t24363 + t21198*t24411 + t25318) + t20992*(-1.*t21623*t24348 - 1.*t21619*t24363 - 1.*t21676*t24411 - 1.*t21640*t24526 + t25321 + t25323))*var2[3] + (t24304*t25065 + t21260*t25070 + t21260*(t20819 + t21298 + t21307 + t20953*t24319 + t25295 + t25318) + t21173*(-1.*t21306*t24319 - 1.*t21264*t24331 + t25287 + t25291 + t25321 + t25323))*var2[4] + (t20694*t20784*t24937 + t20681*t20694*t24942 + t20636*t20694*(t20681*t20695*t20758 - 1.*t20784*t24265*t24277 + t25287 + t25289 + t25290 + t25291) + t20694*t20784*(t20790 + t20819 + t20877 + t20636*t24265*t24277 + t25295 + t25297))*var2[5] + (t23789*t24951 + t20681*t24954 + t20784*(-1.*t20681*t20725 - 1.*t20784*t24265 + t25289 + t25290) + t20681*(t20725*t20784 + t20790 + t20636*t24265 + t25297))*var2[15])*var2[16] + ((t20992*t25096 + t24628*t25101 + t21619*(t21623*t24628 + t21640*t24643 + t20992*t24888 + t21198*t24897 + t25387 + t25390) + t20992*(-1.*t21619*t24888 - 1.*t21676*t24897 + t25399 + t25400 + t25422 + t25423))*var2[3] + (t21173*t25065 + t24634*t25070 + t21260*(t21264*t24621 + t20953*t24677 + t25356 + t25358 + t25387 + t25390) + t21173*(-1.*t21306*t24677 + t25347 + t25351 + t25398 + t25399 + t25400))*var2[4] + (t20694*t23789*t24937 + t20636*t20694*t24942 + t20636*t20694*(-1.*t20784*t24277*t24596 + t25347 + t25348 + t25349 + t25350 + t25351) + t20694*t20784*(-1.*t20695*t20758*t23789 + t20636*t24277*t24596 + t25355 + t25356 + t25358 + t25360))*var2[5] + (t20784*t24951 + t20636*t24954 + t20784*(-1.*t20636*t20725 - 1.*t20784*t24596 + t25349 + t25350) + t20681*(t20725*t23789 + t20636*t24596 + t25355 + t25360))*var2[15])*var2[17] + t20909*var3[0] + t25050*var3[1] + t25044*var3[2] + t25104*var3[3] + t25075*var3[4] + t24945*var3[5] + t25004*var3[15] - 1.*var4[1];
  p_output1[2]=0.1575*t20015*t20695*t21176 + t24284 + t24289 + t24294 - 0.325*t20014*t25467 - 0.1575*t20742*t25471 - 0.2255*(t20015*t20695*t21176 + t20694*t25471) + 0.325*t20490*t25480 - 0.575*t20335*t25495 - 0.575*t20448*t25499 - 0.295*(-1.*t20335*t25495 + t20195*t25499) - 0.0641*(t20195*t25495 + t20335*t25499) + var1[2] + t25508*var2[3] + ((-1.*t21139*t21260 - 1.*t21176*t21676)*var2[1] + t24293*var2[2])*var2[3] + t25488*var2[4] + (t21676*var2[0] - 1.*t21139*t23632*var2[1] + t21176*t23632*var2[2] + (t20909*(-1.*t21198*t21623 - 1.*t20992*t21640 - 1.*t21640*t23269 - 1.*t21198*t23288) + t20992*(t21623*t21631 + t20909*t21640 + t21631*t23288 + t21640*t23390) + t21198*t25503 + t21631*t25506)*var2[3])*var2[4] + t25462*var2[5] + (t20015*t22015*var2[0] + (t21176*t21306 + t20896*t21139*t22015)*var2[1] + (t21139*t21306 - 1.*t20896*t21176*t22015)*var2[2] + (t20015*t21741*t25503 - 1.*t20015*t20098*t20694*t25506 + t20992*(t20098*t20694*t21264 - 1.*t20015*t20098*t20694*t21623 + t20098*t20694*t20896*t21640 + t20015*t20909*t21992 - 1.*t20896*t21631*t21992 + t25537) + t20909*(-1.*t20015*t21623*t21741 + t20896*t21640*t21741 - 1.*t20015*t20992*t21992 + t20896*t21198*t21992 + t25541 + t25543))*var2[3] + (t20953*t25484 - 1.*t20694*t20899*t25486 + t21173*(-1.*t20694*t20899*t21992 + t25537) + t20098*t20694*(-1.*t21264*t21741 - 1.*t20953*t21992 + t25541 + t25543))*var2[4])*var2[5] - 0.068*t20784*var2[15] + (t22336*var2[0] + (-1.*t20098*t20694*t20784*t21176 - 1.*t21139*t23237)*var2[1] + (-1.*t20098*t20694*t20784*t21139 + t21176*t23237)*var2[2] + (t22175*t25503 + t20917*t25506 + t20992*(t20917*t21623 + t20909*t22350 + t21631*t22383 + t21640*t22399 + t25597 + t25600) + t20909*(-1.*t21623*t22175 - 1.*t21640*t22191 - 1.*t20992*t22350 - 1.*t21198*t22383 + t25604 + t25606))*var2[3] + (-1.*t20098*t20636*t20694*t25484 - 1.*t20098*t20695*t25486 + t21173*(t20695*t20899*t21264 + t20694*t22144*t22214 + t25571 + t25573 + t25597 + t25600) + t20098*t20694*(-1.*t20636*t20694*t20899*t21264 + t20899*t20953*t22144 + t25577 + t25579 + t25604 + t25606))*var2[4] + (-1.*t20636*t20695*t25458 + t20694*t25460 + t20636*t20694*(-1.*t20695*t20758 + t20694*t22144 + t25571 + t25573) + t20695*(t20636*t20694*t20758 + t20636*t20695*t22144 + t25577 + t25579))*var2[5])*var2[15] + t25453*var2[16] + (t24348*var2[0] + (t21176*t24304 - 1.*t21139*t24526)*var2[1] + (t21139*t24304 + t21176*t24526)*var2[2] + (t21619*t25503 + t20992*(t20909*t24363 + t21631*t24411 + t25730) + t20909*(-1.*t20992*t24363 - 1.*t21198*t24411 + t25067 + t25099 + t25100 + t25735))*var2[3] + (t21260*t25484 + t21173*(t20694*t20695*t24265 - 1.*t20694*t20899*t24319 + t25730) + t20098*t20694*(-1.*t20953*t24319 + t24935 + t25067 + t25068 + t25709 + t25735))*var2[4] + (t20694*t20784*t25458 + t20695*(-1.*t20784*t24206 - 1.*t20636*t24265*t24277 + t24934 + t24935 + t24936 + t25709))*var2[5] - 0.068*t20681*var2[15])*var2[16] - 0.28*var2[17] + (t21017 + t21227 + t21249 + (t24628*t25503 + t20992*(t20909*t24888 + t21631*t24897 + t25681) + t20909*(-1.*t21623*t24628 - 1.*t21640*t24643 - 1.*t20992*t24888 - 1.*t21198*t24897 + t25684 + t25687))*var2[3] + (t24634*t25484 + t21173*(t20694*t20695*t24596 - 1.*t20694*t20899*t24677 + t25681) + t20098*t20694*(-1.*t21264*t24621 - 1.*t20953*t24677 + t25669 + t25671 + t25684 + t25687))*var2[4] + (t20694*t23789*t25458 + t20695*(-1.*t20636*t20789 + t20695*t20758*t23789 - 1.*t20784*t24588 - 1.*t20636*t24277*t24596 + t25669 + t25671))*var2[5] - 0.068*t20636*var2[15] + (t20368 + t20462 - 1.*t20335*t24561)*var2[16])*var2[17] + t21619*var3[0] + t24293*var3[1] + t24288*var3[2] + t25508*var3[3] + t25488*var3[4] + t25462*var3[5] - 0.068*t20784*var3[15] + t25453*var3[16] - 0.28*var3[17] - 1.*var4[2];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "ddh_RrFoot_ParallelStance.hh"

namespace ParallelStance
{

void ddh_RrFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
