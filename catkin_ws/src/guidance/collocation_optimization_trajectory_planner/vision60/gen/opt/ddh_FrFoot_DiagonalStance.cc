/*
 * Automatically Generated from Mathematica.
 * Thu 12 May 2022 11:31:51 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t4492;
  double t4525;
  double t4494;
  double t4553;
  double t4594;
  double t4645;
  double t4648;
  double t4695;
  double t4696;
  double t4770;
  double t4772;
  double t4932;
  double t4933;
  double t4940;
  double t4987;
  double t3772;
  double t5287;
  double t5456;
  double t5509;
  double t5535;
  double t5547;
  double t5554;
  double t5558;
  double t5652;
  double t5668;
  double t5669;
  double t5683;
  double t5682;
  double t5782;
  double t5783;
  double t5788;
  double t5842;
  double t3827;
  double t3883;
  double t5768;
  double t5843;
  double t5844;
  double t5944;
  double t5977;
  double t5987;
  double t5850;
  double t5860;
  double t5861;
  double t5862;
  double t5875;
  double t5881;
  double t5848;
  double t5910;
  double t5940;
  double t6041;
  double t6042;
  double t6288;
  double t6362;
  double t6827;
  double t8474;
  double t8804;
  double t8943;
  double t9652;
  double t9658;
  double t10270;
  double t4005;
  double t10799;
  double t10866;
  double t4009;
  double t11721;
  double t11739;
  double t11742;
  double t12151;
  double t12170;
  double t12171;
  double t12179;
  double t12184;
  double t12260;
  double t12030;
  double t12071;
  double t12076;
  double t12121;
  double t12141;
  double t12145;
  double t14673;
  double t14935;
  double t15084;
  double t15160;
  double t16963;
  double t16995;
  double t17179;
  double t17195;
  double t17219;
  double t17229;
  double t17354;
  double t17788;
  double t18017;
  double t18029;
  double t19967;
  double t20042;
  double t20624;
  double t18035;
  double t18036;
  double t18059;
  double t18219;
  double t19347;
  double t19350;
  double t19862;
  double t20823;
  double t21172;
  double t21192;
  double t21975;
  double t22065;
  double t22108;
  double t22110;
  double t22144;
  double t22148;
  double t22153;
  double t22612;
  double t11202;
  double t11274;
  double t11669;
  double t23898;
  double t23901;
  double t23964;
  double t23724;
  double t23793;
  double t23897;
  double t24282;
  double t24286;
  double t24287;
  double t23974;
  double t24021;
  double t24116;
  double t24281;
  double t24366;
  double t24532;
  double t24533;
  double t24909;
  double t25007;
  double t25027;
  double t25058;
  double t25069;
  double t25071;
  double t25675;
  double t25824;
  double t26214;
  double t26255;
  double t26759;
  double t29664;
  double t29665;
  double t29667;
  double t30105;
  double t30429;
  double t30616;
  double t30624;
  double t30686;
  double t30834;
  double t32547;
  double t32553;
  double t32598;
  double t33160;
  double t33502;
  double t34198;
  double t34229;
  double t34251;
  double t32843;
  double t33694;
  double t33844;
  double t34060;
  double t34310;
  double t34311;
  double t34446;
  double t34459;
  double t34500;
  double t34587;
  double t34588;
  double t34589;
  double t34594;
  double t34597;
  double t34600;
  double t34602;
  double t34614;
  double t34615;
  double t34848;
  double t34853;
  double t34987;
  double t35055;
  double t35088;
  double t35113;
  double t35446;
  double t35447;
  double t35466;
  double t35905;
  double t35926;
  double t35627;
  double t35670;
  double t35696;
  double t35752;
  double t35536;
  double t35838;
  double t35939;
  double t36331;
  double t36376;
  double t36385;
  double t36189;
  double t36191;
  double t36192;
  double t36250;
  double t36274;
  double t36298;
  double t36493;
  double t36494;
  double t36502;
  double t36389;
  double t36492;
  double t36685;
  double t36861;
  double t36863;
  double t36866;
  double t36870;
  double t36871;
  double t36914;
  double t36917;
  double t36918;
  double t36919;
  double t36972;
  double t36976;
  double t36979;
  double t35942;
  double t37231;
  double t37232;
  double t37239;
  double t37326;
  double t37367;
  double t37370;
  double t37416;
  double t37417;
  double t37418;
  double t37916;
  double t38272;
  double t38413;
  double t37128;
  double t37136;
  double t37123;
  double t37243;
  double t38894;
  double t38986;
  double t38988;
  double t38754;
  double t38767;
  double t38796;
  double t38994;
  double t39308;
  double t39312;
  double t42183;
  double t42462;
  double t42563;
  double t42662;
  double t42683;
  double t42706;
  double t37124;
  double t37230;
  double t43448;
  double t43479;
  double t43510;
  double t43611;
  double t43702;
  double t43706;
  double t43725;
  double t43750;
  double t43784;
  double t43785;
  double t43793;
  double t43794;
  double t43795;
  double t43829;
  double t43995;
  double t45096;
  double t45151;
  double t45152;
  double t45211;
  double t45216;
  double t45248;
  double t44768;
  double t44786;
  double t44798;
  double t39270;
  double t45764;
  double t45782;
  double t45809;
  double t45837;
  double t45843;
  double t45863;
  double t45864;
  double t44418;
  double t44539;
  double t44712;
  double t45569;
  double t45572;
  double t45577;
  double t42846;
  double t42914;
  double t46191;
  double t46192;
  double t46195;
  double t46323;
  double t46328;
  double t46340;
  double t46401;
  double t45941;
  double t45945;
  double t45948;
  double t45963;
  double t46046;
  double t46100;
  double t34667;
  double t34691;
  double t34693;
  double t46520;
  double t46554;
  double t46728;
  double t47151;
  double t48961;
  double t49058;
  double t34180;
  double t34183;
  double t34187;
  double t49164;
  double t49166;
  double t34713;
  double t34734;
  double t34735;
  double t49443;
  double t49445;
  double t49457;
  double t49466;
  double t35134;
  double t35178;
  double t35218;
  double t35300;
  double t35304;
  double t35320;
  double t50034;
  double t50039;
  double t52104;
  double t51908;
  double t50032;
  double t50040;
  double t52671;
  double t52870;
  double t52896;
  double t36934;
  double t36938;
  double t36939;
  double t53025;
  double t53027;
  double t53037;
  double t53062;
  double t53041;
  double t53046;
  double t53023;
  double t53031;
  double t53135;
  double t53153;
  double t37325;
  double t37371;
  double t37372;
  double t53170;
  double t53176;
  double t53276;
  double t53278;
  double t53280;
  double t53308;
  double t53024;
  double t53312;
  double t53313;
  double t53315;
  double t53319;
  double t53320;
  double t53321;
  double t53328;
  double t36032;
  double t53348;
  double t53350;
  double t53355;
  double t53167;
  double t53392;
  double t53394;
  double t53396;
  double t53399;
  double t53400;
  double t53402;
  double t53404;
  double t36040;
  double t36049;
  double t36067;
  double t36087;
  double t36158;
  double t36166;
  double t36172;
  double t36186;
  double t53333;
  double t53341;
  double t53346;
  double t53381;
  double t53383;
  double t53384;
  double t53220;
  double t53221;
  double t53436;
  double t53442;
  double t53445;
  double t53446;
  double t53447;
  double t53448;
  double t53451;
  double t53412;
  double t53413;
  double t53414;
  double t53420;
  double t53421;
  double t53433;
  double t53510;
  double t53516;
  double t53522;
  double t53577;
  double t53588;
  double t34314;
  double t53593;
  double t53597;
  double t53631;
  double t53640;
  double t53659;
  double t53674;
  double t12267;
  double t17656;
  double t18031;
  double t53897;
  double t53901;
  double t53997;
  double t54008;
  double t54025;
  double t54099;
  double t54482;
  double t54562;
  t4492 = Cos(var1[14]);
  t4525 = Sin(var1[14]);
  t4494 = -0.0641*t4492;
  t4553 = -0.28*t4525;
  t4594 = t4494 + t4553;
  t4645 = -1.*t4492*t4594;
  t4648 = 0.325*t4525;
  t4695 = -1.*t4492;
  t4696 = 1. + t4695;
  t4770 = 0.075*t4696;
  t4772 = 0.355*t4492;
  t4932 = -0.0641*t4525;
  t4933 = t4770 + t4772 + t4932;
  t4940 = -1.*t4933*t4525;
  t4987 = t4645 + t4648 + t4940;
  t3772 = Cos(var1[13]);
  t5287 = Sin(var1[13]);
  t5456 = t4492*t5287;
  t5509 = -1.*t3772*t4525;
  t5535 = t5456 + t5509;
  t5547 = 0.1575*t5535;
  t5554 = -1.*t4492*t5287;
  t5558 = t3772*t4525;
  t5652 = t5554 + t5558;
  t5668 = 0.2255*t5652;
  t5669 = t5547 + t5668;
  t5683 = Sin(var1[12]);
  t5682 = Cos(var1[12]);
  t5782 = -0.325*t5287;
  t5783 = t3772*t4594;
  t5788 = t5287*t4933;
  t5842 = t5782 + t5783 + t5788;
  t3827 = -1.*t3772;
  t3883 = 1. + t3827;
  t5768 = -0.068*t5683;
  t5843 = t5682*t5842;
  t5844 = t5768 + t5843;
  t5944 = t3772*t4492;
  t5977 = t5287*t4525;
  t5987 = t5944 + t5977;
  t5850 = -1.*t5682;
  t5860 = 1. + t5850;
  t5861 = -0.1575*t5860;
  t5862 = -0.2255*t5682;
  t5875 = -1.*t5683*t5842;
  t5881 = t5861 + t5862 + t5875;
  t5848 = -1.*t5683*t5844;
  t5910 = -1.*t5682*t5881;
  t5940 = t5848 + t5910;
  t6041 = t5682*t5940*t5987;
  t6042 = 0.325*t3883;
  t6288 = -1.*t5287*t4594;
  t6362 = t3772*t4933;
  t6827 = t6042 + t6288 + t6362;
  t8474 = t6827*t5652;
  t8804 = t5682*t5844*t5987;
  t8943 = -1.*t5683*t5881*t5987;
  t9652 = t8474 + t8804 + t8943;
  t9658 = t5683*t9652;
  t10270 = t6041 + t9658;
  t4005 = Cos(var1[4]);
  t10799 = Sin(var1[4]);
  t10866 = Sin(var1[5]);
  t4009 = Cos(var1[5]);
  t11721 = t5682*t10799;
  t11739 = t4005*t5683*t10866;
  t11742 = t11721 + t11739;
  t12151 = t5682*t5535*t10799;
  t12170 = t4009*t5987;
  t12171 = t5683*t5535*t10866;
  t12179 = t12170 + t12171;
  t12184 = t4005*t12179;
  t12260 = t12151 + t12184;
  t12030 = -1.*t4005*t4009*t5287;
  t12071 = t3772*t11742;
  t12076 = t12030 + t12071;
  t12121 = t3772*t4005*t4009;
  t12141 = t5287*t11742;
  t12145 = t12121 + t12141;
  t14673 = Sin(var1[3]);
  t14935 = -1.*t4009*t5683*t5535;
  t15084 = t5987*t10866;
  t15160 = t14935 + t15084;
  t16963 = t14673*t15160;
  t16995 = Cos(var1[3]);
  t17179 = t5682*t4005*t5535;
  t17195 = -1.*t10799*t12179;
  t17219 = t17179 + t17195;
  t17229 = t16995*t17219;
  t17354 = t16963 + t17229;
  t17788 = t16995*t15160;
  t18017 = -1.*t14673*t17219;
  t18029 = t17788 + t18017;
  t19967 = t4009*t5881;
  t20042 = t6827*t10866;
  t20624 = t19967 + t20042;
  t18035 = -1.*t4009*t5683*t5987;
  t18036 = t5652*t10866;
  t18059 = t18035 + t18036;
  t18219 = t4009*t6827;
  t19347 = -1.*t5881*t10866;
  t19350 = t18219 + t19347;
  t19862 = t5682*t10866*t19350;
  t20823 = -1.*t5682*t4009*t20624;
  t21172 = t5848 + t19862 + t20823;
  t21192 = t18059*t21172;
  t21975 = t20624*t18059;
  t22065 = t4009*t5652;
  t22108 = t5683*t5987*t10866;
  t22110 = t22065 + t22108;
  t22144 = t19350*t22110;
  t22148 = t8804 + t21975 + t22144;
  t22153 = t5682*t4009*t22148;
  t22612 = t21192 + t22153;
  t11202 = t5683*t10799;
  t11274 = -1.*t5682*t4005*t10866;
  t11669 = t11202 + t11274;
  t23898 = t5844*t10799;
  t23901 = t4005*t19350;
  t23964 = t23898 + t23901;
  t23724 = t5682*t5987*t10799;
  t23793 = t4005*t22110;
  t23897 = t23724 + t23793;
  t24282 = t4005*t5844;
  t24286 = -1.*t10799*t19350;
  t24287 = t24282 + t24286;
  t23974 = -1.*t11669*t23964;
  t24021 = t4005*t5683;
  t24116 = t5682*t10799*t10866;
  t24281 = t24021 + t24116;
  t24366 = -1.*t24281*t24287;
  t24532 = t20823 + t23974 + t24366;
  t24533 = t23897*t24532;
  t24909 = t23964*t23897;
  t25007 = t5682*t4005*t5987;
  t25027 = -1.*t10799*t22110;
  t25058 = t25007 + t25027;
  t25069 = t24287*t25058;
  t25071 = t21975 + t24909 + t25069;
  t25675 = t11669*t25071;
  t25824 = t24533 + t25675;
  t26214 = t4009*t5683*t5535;
  t26255 = -1.*t5987*t10866;
  t26759 = t26214 + t26255;
  t29664 = -1.*t4009*t5881;
  t29665 = -1.*t6827*t10866;
  t29667 = t29664 + t29665;
  t30105 = t5682*t10866*t20624;
  t30429 = t4009*t5683*t5987;
  t30616 = -1.*t5652*t10866;
  t30624 = t30429 + t30616;
  t30686 = t19350*t18059;
  t30834 = t20624*t22110;
  t32547 = 0.068*t5683;
  t32553 = -1.*t5682*t5842;
  t32598 = t32547 + t32553;
  t33160 = -0.068*t5682;
  t33502 = t33160 + t5875;
  t34198 = -1.*t4005*t5683*t5535;
  t34229 = -1.*t5682*t5535*t10799*t10866;
  t34251 = t34198 + t34229;
  t32843 = -1.*t5682*t5844;
  t33694 = -1.*t5683*t33502;
  t33844 = -1.*t5683*t5844*t5987;
  t34060 = t5682*t33502*t5987;
  t34310 = Power(t4009,2);
  t34311 = -1.*t5682*t34310*t32598;
  t34446 = t4009*t5683*t20624;
  t34459 = -1.*t5682*t4009*t5987*t20624;
  t34500 = t4009*t32598*t18059;
  t34587 = -1.*t5683*t5987*t10799;
  t34588 = t5682*t4005*t5987*t10866;
  t34589 = t34587 + t34588;
  t34594 = t33502*t10799;
  t34597 = -1.*t4005*t32598*t10866;
  t34600 = t34594 + t34597;
  t34602 = t4005*t33502;
  t34614 = t32598*t10799*t10866;
  t34615 = t34602 + t34614;
  t34848 = -1.*t5682*t5535*t10799;
  t34853 = -1.*t4005*t12179;
  t34987 = t34848 + t34853;
  t35055 = -1.*t5844*t10799;
  t35088 = -1.*t4005*t19350;
  t35113 = t35055 + t35088;
  t35446 = -1.*t3772*t4492;
  t35447 = -1.*t5287*t4525;
  t35466 = t35446 + t35447;
  t35905 = -0.325*t3772;
  t35926 = t35905 + t6288 + t6362;
  t35627 = 0.325*t5287;
  t35670 = -1.*t3772*t4594;
  t35696 = -1.*t5287*t4933;
  t35752 = t35627 + t35670 + t35696;
  t35536 = t5682*t5844*t5652;
  t35838 = Power(t5682,2);
  t35939 = t35838*t35926*t5987;
  t36331 = -1.*t4009*t5683*t35926;
  t36376 = t35752*t10866;
  t36385 = t36331 + t36376;
  t36189 = -1.*t4009*t5683*t5652;
  t36191 = t35466*t10866;
  t36192 = t36189 + t36191;
  t36250 = t4009*t35752;
  t36274 = t5683*t35926*t10866;
  t36298 = t36250 + t36274;
  t36493 = t4009*t35466;
  t36494 = t5683*t5652*t10866;
  t36502 = t36493 + t36494;
  t36389 = -1.*t5682*t4009*t36385;
  t36492 = t36385*t18059;
  t36685 = t20624*t36192;
  t36861 = t5682*t5652*t10799;
  t36863 = t4005*t36502;
  t36866 = t36861 + t36863;
  t36870 = t5682*t35926*t10799;
  t36871 = t4005*t36298;
  t36914 = t36870 + t36871;
  t36917 = t5682*t4005*t35926;
  t36918 = -1.*t10799*t36298;
  t36919 = t36917 + t36918;
  t36972 = -0.28*t4492;
  t36976 = 0.0641*t4525;
  t36979 = t36972 + t36976;
  t35942 = Power(t5683,2);
  t37231 = t5287*t4594;
  t37232 = t3772*t36979;
  t37239 = t37231 + t37232;
  t37326 = t4009*t5535;
  t37367 = t5683*t35466*t10866;
  t37370 = t37326 + t37367;
  t37416 = -1.*t4009*t5683*t35466;
  t37417 = t5535*t10866;
  t37418 = t37416 + t37417;
  t37916 = t5682*t4005*t35466;
  t38272 = -1.*t10799*t37370;
  t38413 = t37916 + t38272;
  t37128 = -1.*t5287*t36979;
  t37136 = t5783 + t37128;
  t37123 = t5682*t5844*t5535;
  t37243 = t35838*t37239*t5987;
  t38894 = -1.*t4009*t5683*t37239;
  t38986 = t37136*t10866;
  t38988 = t38894 + t38986;
  t38754 = t4009*t37136;
  t38767 = t5683*t37239*t10866;
  t38796 = t38754 + t38767;
  t38994 = -1.*t5682*t4009*t38988;
  t39308 = t38988*t18059;
  t39312 = t20624*t15160;
  t42183 = t5682*t37239*t10799;
  t42462 = t4005*t38796;
  t42563 = t42183 + t42462;
  t42662 = t5682*t4005*t37239;
  t42683 = -1.*t10799*t38796;
  t42706 = t42662 + t42683;
  t37124 = -1.*t5683*t5881*t5535;
  t37230 = t6827*t5987;
  t43448 = -1.*t6827*t5652;
  t43479 = -1.*t5682*t5844*t5987;
  t43510 = t5683*t5881*t5987;
  t43611 = t43448 + t43479 + t43510;
  t43702 = t5682*t5535*t43611;
  t43706 = t37123 + t37124 + t37230;
  t43725 = t5682*t5987*t43706;
  t43750 = t43702 + t43725;
  t43784 = t5842*t5535;
  t43785 = t43784 + t37230;
  t43793 = t5652*t43785;
  t43794 = -1.*t5842*t5987;
  t43795 = t43448 + t43794;
  t43829 = t5987*t43795;
  t43995 = t43793 + t43829;
  t45096 = t5682*t4009*t14673;
  t45151 = t16995*t24281;
  t45152 = t45096 + t45151;
  t45211 = t5682*t16995*t4009;
  t45216 = -1.*t14673*t24281;
  t45248 = t45211 + t45216;
  t44768 = t16995*t4009;
  t44786 = -1.*t14673*t10799*t10866;
  t44798 = t44768 + t44786;
  t39270 = t19350*t12179;
  t45764 = t37123 + t39270 + t39312;
  t45782 = t18059*t45764;
  t45809 = -1.*t20624*t18059;
  t45837 = -1.*t19350*t22110;
  t45843 = t43479 + t45809 + t45837;
  t45863 = t15160*t45843;
  t45864 = t45782 + t45863;
  t44418 = t4009*t14673*t10799;
  t44539 = t16995*t10866;
  t44712 = t44418 + t44539;
  t45569 = -1.*t5682*t4005*t14673;
  t45572 = -1.*t5683*t44798;
  t45577 = t45569 + t45572;
  t42846 = t23964*t12260;
  t42914 = t24287*t17219;
  t46191 = t39312 + t42846 + t42914;
  t46192 = t23897*t46191;
  t46195 = -1.*t23964*t23897;
  t46323 = -1.*t24287*t25058;
  t46328 = t45809 + t46195 + t46323;
  t46340 = t12260*t46328;
  t46401 = t46192 + t46340;
  t45941 = -1.*t5287*t44712;
  t45945 = t3772*t45577;
  t45948 = t45941 + t45945;
  t45963 = t3772*t44712;
  t46046 = t5287*t45577;
  t46100 = t45963 + t46046;
  t34667 = t5682*t4005;
  t34691 = -1.*t5683*t10799*t10866;
  t34693 = t34667 + t34691;
  t46520 = -1.*t5683*t5844*t5535;
  t46554 = t5682*t33502*t5535;
  t46728 = t5683*t5844*t5987;
  t47151 = -1.*t5682*t33502*t5987;
  t48961 = -1.*t5682*t4009*t5535*t20624;
  t49058 = t4009*t32598*t15160;
  t34180 = -1.*t5683*t5535*t10799;
  t34183 = t5682*t4005*t5535*t10866;
  t34187 = t34180 + t34183;
  t49164 = t5682*t4009*t5987*t20624;
  t49166 = -1.*t4009*t32598*t18059;
  t34713 = -1.*t4005*t5683*t5987;
  t34734 = -1.*t5682*t5987*t10799*t10866;
  t34735 = t34713 + t34734;
  t49443 = t20624*t12179;
  t49445 = t19350*t15160;
  t49457 = -1.*t19350*t18059;
  t49466 = -1.*t20624*t22110;
  t35134 = -1.*t5683*t10799;
  t35178 = t5682*t4005*t10866;
  t35218 = t35134 + t35178;
  t35300 = -1.*t5682*t5987*t10799;
  t35304 = -1.*t4005*t22110;
  t35320 = t35300 + t35304;
  t50034 = -1.*t35752*t5652;
  t50039 = -1.*t6827*t35466;
  t52104 = t35752*t5987;
  t51908 = t35838*t35926*t5535;
  t50032 = -1.*t5682*t5844*t5652;
  t50040 = -1.*t35838*t35926*t5987;
  t52671 = t36385*t15160;
  t52870 = -1.*t36385*t18059;
  t52896 = -1.*t20624*t36192;
  t36934 = t5682*t4005*t5652;
  t36938 = -1.*t10799*t36502;
  t36939 = t36934 + t36938;
  t53025 = -1.*t37136*t5652;
  t53027 = -1.*t6827*t5987;
  t53037 = t6827*t5535;
  t53062 = t37136*t5987;
  t53041 = t35838*t37239*t5535;
  t53046 = t5682*t5844*t35466;
  t53023 = -1.*t5682*t5844*t5535;
  t53031 = -1.*t35838*t37239*t5987;
  t53135 = t20624*t37418;
  t53153 = t38988*t15160;
  t37325 = t5682*t35466*t10799;
  t37371 = t4005*t37370;
  t37372 = t37325 + t37371;
  t53170 = -1.*t38988*t18059;
  t53176 = -1.*t20624*t15160;
  t53276 = -0.325*t4492;
  t53278 = t4492*t4933;
  t53280 = -1.*t4594*t4525;
  t53308 = t53276 + t53278 + t53280;
  t53024 = t5683*t5881*t5535;
  t53312 = t5683*t5844;
  t53313 = t5682*t5881;
  t53315 = t53312 + t53313;
  t53319 = t5682*t53315*t5535;
  t53320 = t53023 + t53024 + t53027;
  t53321 = t5683*t53320;
  t53328 = t53319 + t53321;
  t36032 = var2[0]*t23897;
  t53348 = t4009*t14673;
  t53350 = t16995*t10799*t10866;
  t53355 = t53348 + t53350;
  t53167 = -1.*t19350*t12179;
  t53392 = -1.*t5682*t10866*t19350;
  t53394 = t5682*t4009*t20624;
  t53396 = t53312 + t53392 + t53394;
  t53399 = t15160*t53396;
  t53400 = t53023 + t53167 + t53176;
  t53402 = t5682*t4009*t53400;
  t53404 = t53399 + t53402;
  t36040 = t14673*t18059;
  t36049 = t16995*t25058;
  t36067 = t36040 + t36049;
  t36087 = var2[2]*t36067;
  t36158 = t16995*t18059;
  t36166 = -1.*t14673*t25058;
  t36172 = t36158 + t36166;
  t36186 = var2[1]*t36172;
  t53333 = -1.*t16995*t4009*t10799;
  t53341 = t14673*t10866;
  t53346 = t53333 + t53341;
  t53381 = t5682*t16995*t4005;
  t53383 = -1.*t5683*t53355;
  t53384 = t53381 + t53383;
  t53220 = -1.*t23964*t12260;
  t53221 = -1.*t24287*t17219;
  t53436 = t11669*t23964;
  t53442 = t24281*t24287;
  t53445 = t53394 + t53436 + t53442;
  t53446 = t12260*t53445;
  t53447 = t53176 + t53220 + t53221;
  t53448 = t11669*t53447;
  t53451 = t53446 + t53448;
  t53412 = -1.*t5287*t53346;
  t53413 = t3772*t53384;
  t53414 = t53412 + t53413;
  t53420 = t3772*t53346;
  t53421 = t5287*t53384;
  t53433 = t53420 + t53421;
  t53510 = -1.*t5682*t10866*t20624;
  t53516 = -1.*t20624*t12179;
  t53522 = -1.*t19350*t15160;
  t53577 = t5682*t5844;
  t53588 = t5683*t33502;
  t34314 = Power(t10866,2);
  t53593 = t5683*t5844*t5535;
  t53597 = -1.*t5682*t33502*t5535;
  t53631 = t5682*t34310*t32598;
  t53640 = -1.*t4009*t5683*t20624;
  t53659 = t5682*t4009*t5535*t20624;
  t53674 = -1.*t4009*t32598*t15160;
  t12267 = var2[0]*t12260;
  t17656 = var2[2]*t17354;
  t18031 = var2[1]*t18029;
  t53897 = -1.*t35838*t37239*t5535;
  t53901 = -1.*t5682*t5844*t35466;
  t53997 = t5682*t4009*t38988;
  t54008 = -1.*t20624*t37418;
  t54025 = -1.*t38988*t15160;
  t54099 = -1.*t35838*t35926*t5535;
  t54482 = t5682*t4009*t36385;
  t54562 = -1.*t36385*t15160;
  p_output1[0]=-0.2255*t11669 + t12267 + t17656 + t18031 + 0.325*t3883*t4005*t4009 + 0.075*t12076*t4525 + 0.355*(t12145*t4492 - 1.*t12076*t4525) - 0.0641*(t12076*t4492 + t12145*t4525) + 0.075*t12145*t4696 - 0.325*t11742*t5287 + 0.1575*t10799*t5683 + 0.1575*t10866*t4005*t5860 + var1[0] + t25824*var2[3] + ((-1.*t14673*t15160 - 1.*t16995*t17219)*var2[1] + t18029*var2[2])*var2[3] + t22612*var2[4] + (t17219*var2[0] - 1.*t14673*t34987*var2[1] + t16995*t34987*var2[2] + (t24532*t25058 + t24281*t25071 + t23897*(-1.*t23964*t24281 - 1.*t11669*t24287 - 1.*t24281*t35113 - 1.*t24287*t35218) + t11669*(t23897*t24287 + t23964*t25058 + t25058*t35113 + t24287*t35320))*var2[3])*var2[4] + t10270*var2[5] + (t26759*t4005*var2[0] + (t12179*t16995 + t10799*t14673*t26759)*var2[1] + (t12179*t14673 - 1.*t10799*t16995*t26759)*var2[2] + (t24532*t30624*t4005 + t11669*(-1.*t10799*t25058*t29667 - 1.*t10799*t24287*t30624 + t30686 + t30834 + t23897*t29667*t4005 + t23964*t30624*t4005) - 1.*t25071*t4005*t4009*t5682 + t23897*(t10799*t24281*t29667 + t30105 - 1.*t11669*t29667*t4005 - 1.*t19350*t4009*t5682 - 1.*t10799*t24287*t4009*t5682 + t23964*t4005*t4009*t5682))*var2[3] + (t21172*t22110 - 1.*t10866*t22148*t5682 + (t22110*t29667 + t19350*t30624 + t30686 + t30834)*t4009*t5682 + t18059*(t30105 + t10866*t29667*t5682))*var2[4])*var2[5] + t5669*var2[12] + (t34187*var2[0] + (-1.*t14673*t34251 - 1.*t16995*t4009*t5535*t5682)*var2[1] + (t16995*t34251 - 1.*t14673*t4009*t5535*t5682)*var2[2] + (t11742*t25071 + t24532*t34589 + t23897*(-1.*t11742*t23964 + t34311 + t34446 - 1.*t11669*t34600 - 1.*t24281*t34615 - 1.*t24287*t34693) + t11669*(t34459 + t34500 + t23964*t34589 + t23897*t34600 + t25058*t34615 + t24287*t34735))*var2[3] + (-1.*t22148*t4009*t5683 + t18059*(t32843 + t33694 + t34311 + t34446 - 1.*t32598*t34314*t5682 - 1.*t10866*t19350*t5683) - 1.*t21172*t4009*t5682*t5987 + t4009*t5682*(-1.*t10866*t22110*t32598 + t33844 + t34060 + t34459 + t34500 + t10866*t19350*t5682*t5987))*var2[4] + (t5682*(t32843 + t33694 - 1.*t32598*t5682 + t5683*t5881)*t5987 - 1.*t5683*t5940*t5987 + t5683*(t33844 + t34060 - 1.*t32598*t5683*t5987 - 1.*t5682*t5881*t5987) + t5682*t9652)*var2[5])*var2[12] + t4987*var2[13] + (t36032 + t36087 + t36186 + (t24532*t36866 + t23897*(t36389 - 1.*t11669*t36914 - 1.*t24281*t36919) + t11669*(t36492 + t36685 + t23964*t36866 + t23897*t36914 + t25058*t36919 + t24287*t36939))*var2[3] + (t21172*t36192 + (t35536 + t35939 + t22110*t36298 + t36492 + t19350*t36502 + t36685)*t4009*t5682 + t18059*(t36389 + t10866*t36298*t5682 - 1.*t35926*t5682*t5683))*var2[4] + (t5652*t5682*t5940 + t5683*(t35536 + t35939 + t35752*t5652 - 1.*t5652*t5683*t5881 + t35926*t35942*t5987 + t35466*t6827))*var2[5] + (0.2255*t35466 + 0.1575*t5987)*var2[12])*var2[13] - 0.0641*var2[14] + (t37372*var2[0] + (t16995*t37418 - 1.*t14673*t38413)*var2[1] + (t14673*t37418 + t16995*t38413)*var2[2] + (t12260*t24532 + t23897*(t38994 - 1.*t11669*t42563 - 1.*t24281*t42706) + t11669*(t39308 + t39312 + t23897*t42563 + t25058*t42706 + t42846 + t42914))*var2[3] + (t15160*t21172 + (t37123 + t37243 + t22110*t38796 + t39270 + t39308 + t39312)*t4009*t5682 + t18059*(t38994 + t10866*t38796*t5682 - 1.*t37239*t5682*t5683))*var2[4] + (t5535*t5682*t5940 + t5683*(t37123 + t37124 + t37230 + t37243 + t37136*t5652 + t35942*t37239*t5987))*var2[5] + (0.1575*t35466 + 0.2255*t5987)*var2[12] + (0.325*t4492 - 1.*t36979*t4492 - 1.*t4492*t4933)*var2[13])*var2[14] + t12260*var3[0] + t18029*var3[1] + t17354*var3[2] + t25824*var3[3] + t22612*var3[4] + t10270*var3[5] + t5669*var3[12] + t4987*var3[13] - 0.0641*var3[14] - 1.*var4[0];
  p_output1[1]=0.325*t3883*t44712 + 0.075*t4525*t45948 + 0.355*(-1.*t4525*t45948 + t4492*t46100) - 0.0641*(t4492*t45948 + t4525*t46100) + 0.075*t46100*t4696 - 0.325*t45577*t5287 - 0.1575*t14673*t4005*t5683 - 0.2255*(t44798*t5682 - 1.*t14673*t4005*t5683) - 0.1575*t44798*t5860 + var1[1] + t11669*var2[0] + t45248*var2[1] + t45152*var2[2] + t46401*var2[3] + ((-1.*t16995*t24281 - 1.*t14673*t4009*t5682)*var2[1] + t45248*var2[2])*var2[3] + t45864*var2[4] + (t24281*var2[0] - 1.*t14673*t35218*var2[1] + t16995*t35218*var2[2] + (t23897*(t17219*t23964 + t12260*t24287 + t24287*t34987 + t17219*t35113) + t12260*(-1.*t23897*t24287 - 1.*t23964*t25058 - 1.*t25058*t35113 - 1.*t24287*t35320) + t25058*t46191 + t17219*t46328)*var2[3])*var2[4] + t43750*var2[5] + (-1.*t4005*t4009*t5682*var2[0] + (-1.*t10866*t16995*t5682 - 1.*t10799*t14673*t4009*t5682)*var2[1] + (-1.*t10866*t14673*t5682 + t10799*t16995*t4009*t5682)*var2[2] + (t30624*t4005*t46191 + t26759*t4005*t46328 + t23897*(-1.*t10799*t24287*t26759 - 1.*t10799*t17219*t29667 + t23964*t26759*t4005 + t12260*t29667*t4005 + t49443 + t49445) + t12260*(t10799*t25058*t29667 + t10799*t24287*t30624 - 1.*t23897*t29667*t4005 - 1.*t23964*t30624*t4005 + t49457 + t49466))*var2[3] + (t22110*t45764 + t12179*t45843 + t18059*(t19350*t26759 + t12179*t29667 + t49443 + t49445) + t15160*(-1.*t22110*t29667 - 1.*t19350*t30624 + t49457 + t49466))*var2[4])*var2[5] + t43995*var2[12] + (t11742*var2[0] + (-1.*t14673*t34693 - 1.*t16995*t4009*t5683)*var2[1] + (t16995*t34693 - 1.*t14673*t4009*t5683)*var2[2] + (t34589*t46191 + t34187*t46328 + t23897*(t23964*t34187 + t24287*t34251 + t12260*t34600 + t17219*t34615 + t48961 + t49058) + t12260*(-1.*t23964*t34589 - 1.*t23897*t34600 - 1.*t25058*t34615 - 1.*t24287*t34735 + t49164 + t49166))*var2[3] + (-1.*t4009*t45843*t5535*t5682 + t18059*(-1.*t10866*t12179*t32598 + t46520 + t46554 + t48961 + t49058 + t10866*t19350*t5535*t5682) - 1.*t4009*t45764*t5682*t5987 + t15160*(t10866*t22110*t32598 + t46728 + t47151 + t49164 + t49166 - 1.*t10866*t19350*t5682*t5987))*var2[4] + (-1.*t43611*t5535*t5683 - 1.*t43706*t5683*t5987 + t5682*(t46520 + t46554 - 1.*t32598*t5535*t5683 - 1.*t5535*t5682*t5881)*t5987 + t5535*t5682*(t46728 + t47151 + t32598*t5683*t5987 + t5682*t5881*t5987))*var2[5])*var2[12] + ((t36866*t46191 + t23897*t46328 + t23897*(t21975 + t24909 + t25069 + t12260*t36914 + t17219*t36919 + t52671) + t12260*(-1.*t23964*t36866 - 1.*t23897*t36914 - 1.*t25058*t36919 - 1.*t24287*t36939 + t52870 + t52896))*var2[3] + (t36192*t45764 + t18059*t45843 + t15160*(-1.*t22110*t36298 - 1.*t19350*t36502 + t50032 + t50040 + t52870 + t52896) + t18059*(t21975 + t22144 + t12179*t36298 + t51908 + t52671 + t8804))*var2[4] + (t43706*t5652*t5682 + t43611*t5682*t5987 + t5535*t5682*(t50032 + t50034 + t50039 + t50040 + t5652*t5683*t5881 - 1.*t35926*t35942*t5987) + t5682*t5987*(t51908 + t52104 + t35926*t35942*t5535 + t8474 + t8804 + t8943))*var2[5] + (t35466*t43785 + t43795*t5652 + t5987*(t50034 + t50039 - 1.*t5652*t5842 - 1.*t35926*t5987) + t5652*(t52104 + t35926*t5535 + t5842*t5987 + t8474))*var2[12])*var2[13] + ((t12260*t46191 + t37372*t46328 + t23897*(t23964*t37372 + t24287*t38413 + t12260*t42563 + t17219*t42706 + t53135 + t53153) + t12260*(-1.*t23897*t42563 - 1.*t25058*t42706 + t53170 + t53176 + t53220 + t53221))*var2[3] + (t15160*t45764 + t37418*t45843 + t18059*(t19350*t37370 + t12179*t38796 + t53041 + t53046 + t53135 + t53153) + t15160*(-1.*t22110*t38796 + t53023 + t53031 + t53167 + t53170 + t53176))*var2[4] + (t35466*t43611*t5682 + t43706*t5535*t5682 + t5682*(t53037 + t53041 + t53046 + t53062 + t35942*t37239*t5535 - 1.*t35466*t5683*t5881)*t5987 + t5535*t5682*(t53023 + t53024 + t53025 + t53027 + t53031 - 1.*t35942*t37239*t5987))*var2[5] + (t43795*t5535 + t5652*(t53037 + t53062 + t37239*t5535 + t35466*t5842) + t43785*t5987 + t5987*(t53025 + t53027 - 1.*t5535*t5842 - 1.*t37239*t5987))*var2[12])*var2[14] + t11669*var3[0] + t45248*var3[1] + t45152*var3[2] + t46401*var3[3] + t45864*var3[4] + t43750*var3[5] + t43995*var3[12] - 1.*var4[1];
  p_output1[2]=t36032 + t36087 + t36186 + 0.325*t3883*t53346 - 0.325*t5287*t53384 + 0.075*t4525*t53414 + 0.075*t4696*t53433 + 0.355*(-1.*t4525*t53414 + t4492*t53433) - 0.0641*(t4492*t53414 + t4525*t53433) + 0.1575*t16995*t4005*t5683 - 0.2255*(t53355*t5682 + t16995*t4005*t5683) - 0.1575*t53355*t5860 + var1[2] + t53451*var2[3] + ((-1.*t14673*t18059 - 1.*t16995*t25058)*var2[1] + t36172*var2[2])*var2[3] + t53404*var2[4] + (t25058*var2[0] - 1.*t14673*t35320*var2[1] + t16995*t35320*var2[2] + (t11669*(-1.*t17219*t23964 - 1.*t12260*t24287 - 1.*t24287*t34987 - 1.*t17219*t35113) + t12260*(t23964*t24281 + t11669*t24287 + t24281*t35113 + t24287*t35218) + t17219*t53445 + t24281*t53447)*var2[3])*var2[4] + t53328*var2[5] + (t30624*t4005*var2[0] + (t16995*t22110 + t10799*t14673*t30624)*var2[1] + (t14673*t22110 - 1.*t10799*t16995*t30624)*var2[2] + (t26759*t4005*t53445 + t11669*(t10799*t24287*t26759 + t10799*t17219*t29667 - 1.*t23964*t26759*t4005 - 1.*t12260*t29667*t4005 + t53516 + t53522) - 1.*t4005*t4009*t53447*t5682 + t12260*(-1.*t10799*t24281*t29667 + t11669*t29667*t4005 + t53510 + t19350*t4009*t5682 + t10799*t24287*t4009*t5682 - 1.*t23964*t4005*t4009*t5682))*var2[3] + (t12179*t53396 - 1.*t10866*t53400*t5682 + t4009*(-1.*t19350*t26759 - 1.*t12179*t29667 + t53516 + t53522)*t5682 + t15160*(t53510 - 1.*t10866*t29667*t5682))*var2[4])*var2[5] - 0.068*t5987*var2[12] + (t34589*var2[0] + (-1.*t14673*t34735 - 1.*t16995*t4009*t5682*t5987)*var2[1] + (t16995*t34735 - 1.*t14673*t4009*t5682*t5987)*var2[2] + (t34187*t53445 + t11742*t53447 + t12260*(t11742*t23964 + t11669*t34600 + t24281*t34615 + t24287*t34693 + t53631 + t53640) + t11669*(-1.*t23964*t34187 - 1.*t24287*t34251 - 1.*t12260*t34600 - 1.*t17219*t34615 + t53659 + t53674))*var2[3] + (-1.*t4009*t53396*t5535*t5682 + t4009*t5682*(t10866*t12179*t32598 + t53593 + t53597 + t53659 + t53674 - 1.*t10866*t19350*t5535*t5682) - 1.*t4009*t53400*t5683 + t15160*(t53577 + t53588 + t53631 + t53640 + t32598*t34314*t5682 + t10866*t19350*t5683))*var2[4] + (t53320*t5682 - 1.*t53315*t5535*t5683 + t5683*(t53593 + t53597 + t32598*t5535*t5683 + t5535*t5682*t5881) + t5535*t5682*(t53577 + t53588 + t32598*t5682 - 1.*t5683*t5881))*var2[5])*var2[12] + t53308*var2[13] + (t36866*var2[0] + (t16995*t36192 - 1.*t14673*t36939)*var2[1] + (t14673*t36192 + t16995*t36939)*var2[2] + (t23897*t53445 + t12260*(t11669*t36914 + t24281*t36919 + t54482) + t11669*(-1.*t12260*t36914 - 1.*t17219*t36919 + t45809 + t46195 + t46323 + t54562))*var2[3] + (t18059*t53396 + t4009*(-1.*t12179*t36298 + t43479 + t45809 + t45837 + t54099 + t54562)*t5682 + t15160*(t54482 - 1.*t10866*t36298*t5682 + t35926*t5682*t5683))*var2[4] + (t53315*t5682*t5987 + t5683*(t43448 + t43479 + t43510 + t54099 - 1.*t35926*t35942*t5535 - 1.*t35752*t5987))*var2[5] - 0.068*t5652*var2[12])*var2[13] - 0.28*var2[14] + (t12267 + t17656 + t18031 + (t37372*t53445 + t12260*(t11669*t42563 + t24281*t42706 + t53997) + t11669*(-1.*t23964*t37372 - 1.*t24287*t38413 - 1.*t12260*t42563 - 1.*t17219*t42706 + t54008 + t54025))*var2[3] + (t37418*t53396 + t4009*(-1.*t19350*t37370 - 1.*t12179*t38796 + t53897 + t53901 + t54008 + t54025)*t5682 + t15160*(t53997 - 1.*t10866*t38796*t5682 + t37239*t5682*t5683))*var2[4] + (t35466*t53315*t5682 + t5683*(t53897 + t53901 - 1.*t35942*t37239*t5535 + t35466*t5683*t5881 - 1.*t37136*t5987 - 1.*t5535*t6827))*var2[5] - 0.068*t5535*var2[12] + (-1.*t36979*t4525 + t4648 + t4940)*var2[13])*var2[14] + t23897*var3[0] + t36172*var3[1] + t36067*var3[2] + t53451*var3[3] + t53404*var3[4] + t53328*var3[5] - 0.068*t5987*var3[12] + t53308*var3[13] - 0.28*var3[14] - 1.*var4[2];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "ddh_FrFoot_DiagonalStance.hh"

namespace DiagonalStance
{

void ddh_FrFoot_DiagonalStance_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
