/*
 * Automatically Generated from Mathematica.
 * Tue 7 Jun 2022 14:07:43 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t2334;
  double t2317;
  double t2318;
  double t2474;
  double t2319;
  double t2478;
  double t2479;
  double t2217;
  double t2776;
  double t2786;
  double t2812;
  double t2238;
  double t2816;
  double t2839;
  double t2775;
  double t2831;
  double t2832;
  double t1876;
  double t3200;
  double t3679;
  double t4159;
  double t4401;
  double t4403;
  double t4415;
  double t4417;
  double t4419;
  double t4431;
  double t6205;
  double t7036;
  double t7118;
  double t9225;
  double t9259;
  double t9264;
  double t9282;
  double t9314;
  double t9318;
  double t9322;
  double t9326;
  double t9327;
  double t9222;
  double t9280;
  double t9328;
  double t9335;
  double t8169;
  double t8195;
  double t8221;
  double t9137;
  double t9361;
  double t9370;
  double t9399;
  double t9403;
  double t9427;
  double t9441;
  double t9444;
  double t9447;
  double t9453;
  double t9514;
  double t9518;
  double t9519;
  double t9790;
  double t9804;
  double t9839;
  double t9878;
  double t9881;
  double t10312;
  double t10329;
  double t10539;
  double t7260;
  double t7280;
  double t7294;
  double t7300;
  double t8015;
  double t8019;
  double t10296;
  double t10298;
  double t10299;
  double t10110;
  double t10120;
  double t10126;
  double t7252;
  double t8020;
  double t8109;
  double t9374;
  double t10069;
  double t10086;
  double t10571;
  double t10572;
  double t10596;
  double t10601;
  double t10628;
  double t10633;
  double t10785;
  double t10787;
  double t10789;
  double t10644;
  double t10749;
  double t10751;
  double t10755;
  double t10758;
  double t10846;
  double t10848;
  double t10849;
  double t10851;
  double t10873;
  double t10875;
  double t10877;
  double t10653;
  double t10654;
  double t10656;
  double t10880;
  double t10887;
  double t10759;
  double t10761;
  double t10762;
  double t10829;
  double t10854;
  double t11116;
  double t11163;
  double t11172;
  double t11280;
  double t11282;
  double t11381;
  double t11382;
  double t11383;
  double t10834;
  double t10835;
  double t11190;
  double t11305;
  double t11349;
  double t11358;
  double t10855;
  double t10868;
  double t11420;
  double t11428;
  double t11436;
  double t11450;
  double t11453;
  double t11496;
  double t11499;
  double t11500;
  double t11502;
  double t11512;
  double t11514;
  double t11519;
  double t11521;
  double t11522;
  double t11525;
  double t11526;
  double t11527;
  double t11095;
  double t11097;
  double t11587;
  double t11592;
  double t11602;
  double t11677;
  double t11679;
  double t11622;
  double t11635;
  double t11648;
  double t11653;
  double t11616;
  double t11661;
  double t11682;
  double t12110;
  double t12111;
  double t12112;
  double t11943;
  double t11945;
  double t11949;
  double t12090;
  double t12096;
  double t12097;
  double t12145;
  double t12146;
  double t12147;
  double t12113;
  double t12144;
  double t12160;
  double t12176;
  double t12177;
  double t12188;
  double t12201;
  double t12202;
  double t12203;
  double t12213;
  double t12214;
  double t12220;
  double t12272;
  double t12274;
  double t12282;
  double t11683;
  double t12482;
  double t12484;
  double t12500;
  double t12622;
  double t12648;
  double t12652;
  double t12723;
  double t12727;
  double t12733;
  double t12740;
  double t12741;
  double t12742;
  double t12378;
  double t12383;
  double t12332;
  double t12503;
  double t12795;
  double t12797;
  double t12800;
  double t12769;
  double t12771;
  double t12773;
  double t12801;
  double t12810;
  double t12815;
  double t12832;
  double t12833;
  double t12834;
  double t12840;
  double t12842;
  double t12845;
  double t12848;
  double t12849;
  double t12850;
  double t4583;
  double t4589;
  double t4607;
  double t11342;
  double t11344;
  double t11346;
  double t10550;
  double t10560;
  double t10561;
  double t12856;
  double t12857;
  double t10663;
  double t10666;
  double t10711;
  double t12809;
  double t13069;
  double t13139;
  double t13160;
  double t13011;
  double t13247;
  double t13288;
  double t13079;
  double t13084;
  double t13085;
  double t13222;
  double t12334;
  double t12458;
  double t11529;
  double t11532;
  double t11534;
  double t13368;
  double t13393;
  double t13169;
  double t13406;
  double t13436;
  double t13226;
  double t13229;
  double t13465;
  double t13468;
  double t11364;
  double t11367;
  double t11373;
  double t13476;
  double t13477;
  double t11546;
  double t11548;
  double t11551;
  double t13398;
  double t13399;
  double t13401;
  double t13440;
  double t13532;
  double t13533;
  double t13541;
  double t13539;
  double t13530;
  double t13534;
  double t13611;
  double t13615;
  double t13617;
  double t12240;
  double t12244;
  double t12247;
  double t13547;
  double t13548;
  double t13557;
  double t13558;
  double t13648;
  double t13650;
  double t13655;
  double t13666;
  double t13657;
  double t13663;
  double t13644;
  double t13651;
  double t13718;
  double t13724;
  double t12605;
  double t12673;
  double t12675;
  double t13734;
  double t13737;
  double t12916;
  double t12926;
  double t12937;
  double t11924;
  double t11925;
  double t11938;
  double t13751;
  double t13752;
  double t13813;
  double t13732;
  double t13896;
  double t13832;
  double t13835;
  double t13836;
  double t13901;
  double t13903;
  double t13873;
  double t13890;
  double t13647;
  double t13891;
  double t13893;
  double t13935;
  double t13937;
  double t11430;
  double t13941;
  double t13944;
  double t13906;
  double t13961;
  double t13964;
  double t13975;
  double t13980;
  double t13931;
  double t13932;
  double t14103;
  double t14132;
  double t14137;
  double t12893;
  double t12894;
  double t12868;
  double t12870;
  double t12873;
  double t14160;
  double t14163;
  double t14189;
  double t14195;
  double t14199;
  double t11763;
  double t11791;
  double t11913;
  double t13947;
  t2334 = Cos(var1[13]);
  t2317 = Cos(var1[14]);
  t2318 = Sin(var1[13]);
  t2474 = Sin(var1[14]);
  t2319 = t2317*t2318;
  t2478 = -1.*t2334*t2474;
  t2479 = t2319 + t2478;
  t2217 = Cos(var1[5]);
  t2776 = t2334*t2317;
  t2786 = t2318*t2474;
  t2812 = t2776 + t2786;
  t2238 = Sin(var1[12]);
  t2816 = Sin(var1[5]);
  t2839 = Cos(var1[3]);
  t2775 = -1.*t2217*t2238*t2479;
  t2831 = t2812*t2816;
  t2832 = t2775 + t2831;
  t1876 = Sin(var1[3]);
  t3200 = Cos(var1[12]);
  t3679 = Cos(var1[4]);
  t4159 = t3200*t3679*t2479;
  t4401 = Sin(var1[4]);
  t4403 = t2217*t2812;
  t4415 = t2238*t2479*t2816;
  t4417 = t4403 + t4415;
  t4419 = -1.*t4401*t4417;
  t4431 = t4159 + t4419;
  t6205 = -1.*t3200*t2479*t4401;
  t7036 = -1.*t3679*t4417;
  t7118 = t6205 + t7036;
  t9225 = -0.0641*t2317;
  t9259 = -0.28*t2474;
  t9264 = t9225 + t9259;
  t9282 = -1.*t2317;
  t9314 = 1. + t9282;
  t9318 = 0.075*t9314;
  t9322 = 0.355*t2317;
  t9326 = -0.0641*t2474;
  t9327 = t9318 + t9322 + t9326;
  t9222 = -0.325*t2318;
  t9280 = t2334*t9264;
  t9328 = t2318*t9327;
  t9335 = t9222 + t9280 + t9328;
  t8169 = t3679*t2238;
  t8195 = t3200*t4401*t2816;
  t8221 = t8169 + t8195;
  t9137 = -0.068*t2238;
  t9361 = t3200*t9335;
  t9370 = t9137 + t9361;
  t9399 = -1.*t2334;
  t9403 = 1. + t9399;
  t9427 = 0.325*t9403;
  t9441 = -1.*t2318*t9264;
  t9444 = t2334*t9327;
  t9447 = t9427 + t9441 + t9444;
  t9453 = t2217*t9447;
  t9514 = -1.*t3200;
  t9518 = 1. + t9514;
  t9519 = -0.1575*t9518;
  t9790 = -0.2255*t3200;
  t9804 = -1.*t2238*t9335;
  t9839 = t9519 + t9790 + t9804;
  t9878 = -1.*t9839*t2816;
  t9881 = t9453 + t9878;
  t10312 = t3679*t9370;
  t10329 = -1.*t4401*t9881;
  t10539 = t10312 + t10329;
  t7260 = -1.*t2317*t2318;
  t7280 = t2334*t2474;
  t7294 = t7260 + t7280;
  t7300 = t2217*t7294;
  t8015 = t2238*t2812*t2816;
  t8019 = t7300 + t8015;
  t10296 = t2238*t4401;
  t10298 = -1.*t3200*t3679*t2816;
  t10299 = t10296 + t10298;
  t10110 = t9370*t4401;
  t10120 = t3679*t9881;
  t10126 = t10110 + t10120;
  t7252 = t3200*t2812*t4401;
  t8020 = t3679*t8019;
  t8109 = t7252 + t8020;
  t9374 = -1.*t9370*t4401;
  t10069 = -1.*t3679*t9881;
  t10086 = t9374 + t10069;
  t10571 = t3200*t3679*t2812;
  t10572 = -1.*t4401*t8019;
  t10596 = t10571 + t10572;
  t10601 = t2217*t9839;
  t10628 = t9447*t2816;
  t10633 = t10601 + t10628;
  t10785 = t2217*t2238*t2479;
  t10787 = -1.*t2812*t2816;
  t10789 = t10785 + t10787;
  t10644 = -1.*t3200*t2217*t10633;
  t10749 = -1.*t2217*t2238*t2812;
  t10751 = t7294*t2816;
  t10755 = t10749 + t10751;
  t10758 = t10633*t10755;
  t10846 = -1.*t2217*t9839;
  t10848 = -1.*t9447*t2816;
  t10849 = t10846 + t10848;
  t10851 = t3200*t2816*t10633;
  t10873 = t2217*t2238*t2812;
  t10875 = -1.*t7294*t2816;
  t10877 = t10873 + t10875;
  t10653 = -1.*t10299*t10126;
  t10654 = -1.*t8221*t10539;
  t10656 = t10644 + t10653 + t10654;
  t10880 = t9881*t10755;
  t10887 = t10633*t8019;
  t10759 = t10126*t8109;
  t10761 = t10539*t10596;
  t10762 = t10758 + t10759 + t10761;
  t10829 = -1.*t2238*t9370;
  t10854 = t3200*t9370*t2812;
  t11116 = 0.068*t2238;
  t11163 = -1.*t3200*t9335;
  t11172 = t11116 + t11163;
  t11280 = -0.068*t3200;
  t11282 = t11280 + t9804;
  t11381 = -1.*t3679*t2238*t2479;
  t11382 = -1.*t3200*t2479*t4401*t2816;
  t11383 = t11381 + t11382;
  t10834 = t3200*t2816*t9881;
  t10835 = t10829 + t10834 + t10644;
  t11190 = -1.*t3200*t9370;
  t11305 = -1.*t2238*t11282;
  t11349 = -1.*t2238*t9370*t2812;
  t11358 = t3200*t11282*t2812;
  t10855 = t9881*t8019;
  t10868 = t10854 + t10758 + t10855;
  t11420 = Power(t2217,2);
  t11428 = -1.*t3200*t11420*t11172;
  t11436 = t2217*t2238*t10633;
  t11450 = -1.*t3200*t2217*t2812*t10633;
  t11453 = t2217*t11172*t10755;
  t11496 = -1.*t2238*t2812*t4401;
  t11499 = t3200*t3679*t2812*t2816;
  t11500 = t11496 + t11499;
  t11502 = t11282*t4401;
  t11512 = -1.*t3679*t11172*t2816;
  t11514 = t11502 + t11512;
  t11519 = t3679*t11282;
  t11521 = t11172*t4401*t2816;
  t11522 = t11519 + t11521;
  t11525 = t3200*t4401;
  t11526 = t3679*t2238*t2816;
  t11527 = t11525 + t11526;
  t11095 = -1.*t3200*t9839;
  t11097 = t10829 + t11095;
  t11587 = -1.*t2334*t2317;
  t11592 = -1.*t2318*t2474;
  t11602 = t11587 + t11592;
  t11677 = -0.325*t2334;
  t11679 = t11677 + t9441 + t9444;
  t11622 = 0.325*t2318;
  t11635 = -1.*t2334*t9264;
  t11648 = -1.*t2318*t9327;
  t11653 = t11622 + t11635 + t11648;
  t11616 = t3200*t9370*t7294;
  t11661 = Power(t3200,2);
  t11682 = t11661*t11679*t2812;
  t12110 = -1.*t2217*t2238*t11679;
  t12111 = t11653*t2816;
  t12112 = t12110 + t12111;
  t11943 = -1.*t2217*t2238*t7294;
  t11945 = t11602*t2816;
  t11949 = t11943 + t11945;
  t12090 = t2217*t11653;
  t12096 = t2238*t11679*t2816;
  t12097 = t12090 + t12096;
  t12145 = t2217*t11602;
  t12146 = t2238*t7294*t2816;
  t12147 = t12145 + t12146;
  t12113 = -1.*t3200*t2217*t12112;
  t12144 = t12112*t10755;
  t12160 = t10633*t11949;
  t12176 = t3200*t7294*t4401;
  t12177 = t3679*t12147;
  t12188 = t12176 + t12177;
  t12201 = t3200*t11679*t4401;
  t12202 = t3679*t12097;
  t12203 = t12201 + t12202;
  t12213 = t3200*t3679*t11679;
  t12214 = -1.*t4401*t12097;
  t12220 = t12213 + t12214;
  t12272 = -0.28*t2317;
  t12274 = 0.0641*t2474;
  t12282 = t12272 + t12274;
  t11683 = Power(t2238,2);
  t12482 = t2318*t9264;
  t12484 = t2334*t12282;
  t12500 = t12482 + t12484;
  t12622 = t2217*t2479;
  t12648 = t2238*t11602*t2816;
  t12652 = t12622 + t12648;
  t12723 = -1.*t2217*t2238*t11602;
  t12727 = t2479*t2816;
  t12733 = t12723 + t12727;
  t12740 = t3200*t3679*t11602;
  t12741 = -1.*t4401*t12652;
  t12742 = t12740 + t12741;
  t12378 = -1.*t2318*t12282;
  t12383 = t9280 + t12378;
  t12332 = t3200*t9370*t2479;
  t12503 = t11661*t12500*t2812;
  t12795 = -1.*t2217*t2238*t12500;
  t12797 = t12383*t2816;
  t12800 = t12795 + t12797;
  t12769 = t2217*t12383;
  t12771 = t2238*t12500*t2816;
  t12773 = t12769 + t12771;
  t12801 = -1.*t3200*t2217*t12800;
  t12810 = t12800*t10755;
  t12815 = t10633*t2832;
  t12832 = t3200*t2479*t4401;
  t12833 = t3679*t4417;
  t12834 = t12832 + t12833;
  t12840 = t3200*t12500*t4401;
  t12842 = t3679*t12773;
  t12845 = t12840 + t12842;
  t12848 = t3200*t3679*t12500;
  t12849 = -1.*t4401*t12773;
  t12850 = t12848 + t12849;
  t4583 = t2839*t2832;
  t4589 = -1.*t1876*t4431;
  t4607 = t4583 + t4589;
  t11342 = t9447*t7294;
  t11344 = -1.*t2238*t9839*t2812;
  t11346 = t11342 + t10854 + t11344;
  t10550 = -1.*t2238*t4401;
  t10560 = t3200*t3679*t2816;
  t10561 = t10550 + t10560;
  t12856 = t10126*t12834;
  t12857 = t10539*t4431;
  t10663 = -1.*t3200*t2812*t4401;
  t10666 = -1.*t3679*t8019;
  t10711 = t10663 + t10666;
  t12809 = t9881*t4417;
  t13069 = -1.*t10633*t10755;
  t13139 = t10633*t4417;
  t13160 = t9881*t2832;
  t13011 = t12815 + t12856 + t12857;
  t13247 = -1.*t9881*t10755;
  t13288 = -1.*t10633*t8019;
  t13079 = -1.*t10126*t8109;
  t13084 = -1.*t10539*t10596;
  t13085 = t13069 + t13079 + t13084;
  t13222 = -1.*t3200*t9370*t2812;
  t12334 = -1.*t2238*t9839*t2479;
  t12458 = t9447*t2812;
  t11529 = t3200*t3679;
  t11532 = -1.*t2238*t4401*t2816;
  t11534 = t11529 + t11532;
  t13368 = -1.*t2238*t9370*t2479;
  t13393 = t3200*t11282*t2479;
  t13169 = t12332 + t12809 + t12815;
  t13406 = t2238*t9370*t2812;
  t13436 = -1.*t3200*t11282*t2812;
  t13226 = -1.*t9881*t8019;
  t13229 = t13222 + t13069 + t13226;
  t13465 = -1.*t3200*t2217*t2479*t10633;
  t13468 = t2217*t11172*t2832;
  t11364 = -1.*t2238*t2479*t4401;
  t11367 = t3200*t3679*t2479*t2816;
  t11373 = t11364 + t11367;
  t13476 = t3200*t2217*t2812*t10633;
  t13477 = -1.*t2217*t11172*t10755;
  t11546 = -1.*t3679*t2238*t2812;
  t11548 = -1.*t3200*t2812*t4401*t2816;
  t11551 = t11546 + t11548;
  t13398 = -1.*t9447*t7294;
  t13399 = t2238*t9839*t2812;
  t13401 = t13398 + t13222 + t13399;
  t13440 = t12332 + t12334 + t12458;
  t13532 = -1.*t11653*t7294;
  t13533 = -1.*t9447*t11602;
  t13541 = t11653*t2812;
  t13539 = t11661*t11679*t2479;
  t13530 = -1.*t3200*t9370*t7294;
  t13534 = -1.*t11661*t11679*t2812;
  t13611 = t12112*t2832;
  t13615 = -1.*t12112*t10755;
  t13617 = -1.*t10633*t11949;
  t12240 = t3200*t3679*t7294;
  t12244 = -1.*t4401*t12147;
  t12247 = t12240 + t12244;
  t13547 = t9335*t2479;
  t13548 = t13547 + t12458;
  t13557 = -1.*t9335*t2812;
  t13558 = t13398 + t13557;
  t13648 = -1.*t12383*t7294;
  t13650 = -1.*t9447*t2812;
  t13655 = t9447*t2479;
  t13666 = t12383*t2812;
  t13657 = t11661*t12500*t2479;
  t13663 = t3200*t9370*t11602;
  t13644 = -1.*t3200*t9370*t2479;
  t13651 = -1.*t11661*t12500*t2812;
  t13718 = t10633*t12733;
  t13724 = t12800*t2832;
  t12605 = t3200*t11602*t4401;
  t12673 = t3679*t12652;
  t12675 = t12605 + t12673;
  t13734 = -1.*t12800*t10755;
  t13737 = -1.*t10633*t2832;
  t12916 = t3200*t2839*t2217;
  t12926 = -1.*t1876*t8221;
  t12937 = t12916 + t12926;
  t11924 = t2839*t10755;
  t11925 = -1.*t1876*t10596;
  t11938 = t11924 + t11925;
  t13751 = -1.*t10126*t12834;
  t13752 = -1.*t10539*t4431;
  t13813 = t3200*t2217*t10633;
  t13732 = -1.*t9881*t4417;
  t13896 = -1.*t3200*t2816*t10633;
  t13832 = t10299*t10126;
  t13835 = t8221*t10539;
  t13836 = t13813 + t13832 + t13835;
  t13901 = -1.*t10633*t4417;
  t13903 = -1.*t9881*t2832;
  t13873 = t13737 + t13751 + t13752;
  t13890 = t2238*t9370;
  t13647 = t2238*t9839*t2479;
  t13891 = -1.*t3200*t2816*t9881;
  t13893 = t13890 + t13891 + t13813;
  t13935 = t3200*t9370;
  t13937 = t2238*t11282;
  t11430 = Power(t2816,2);
  t13941 = t2238*t9370*t2479;
  t13944 = -1.*t3200*t11282*t2479;
  t13906 = t13644 + t13732 + t13737;
  t13961 = t3200*t11420*t11172;
  t13964 = -1.*t2217*t2238*t10633;
  t13975 = t3200*t2217*t2479*t10633;
  t13980 = -1.*t2217*t11172*t2832;
  t13931 = t3200*t9839;
  t13932 = t13890 + t13931;
  t14103 = -1.*t11661*t11679*t2479;
  t14132 = t3200*t2217*t12112;
  t14137 = -1.*t12112*t2832;
  t12893 = 0.325*t2474;
  t12894 = -1.*t9327*t2474;
  t12868 = t1876*t2832;
  t12870 = t2839*t4431;
  t12873 = t12868 + t12870;
  t14160 = -1.*t11661*t12500*t2479;
  t14163 = -1.*t3200*t9370*t11602;
  t14189 = t3200*t2217*t12800;
  t14195 = -1.*t10633*t12733;
  t14199 = -1.*t12800*t2832;
  t11763 = t1876*t10755;
  t11791 = t2839*t10596;
  t11913 = t11763 + t11791;
  t13947 = t13644 + t13647 + t13650;
  p_output1[0]=(-1.*t1876*t2832 - 1.*t2839*t4431)*var2[1] + t4607*var2[2];
  p_output1[1]=t4431*var2[0] - 1.*t1876*t7118*var2[1] + t2839*t7118*var2[2] + (t10596*t10656 + t10299*(t10086*t10596 + t10126*t10596 + t10539*t10711 + t10539*t8109) + t10762*t8221 + t8109*(-1.*t10299*t10539 - 1.*t10539*t10561 - 1.*t10086*t8221 - 1.*t10126*t8221))*var2[3];
  p_output1[2]=t10789*t3679*var2[0] + (t10789*t1876*t4401 + t2839*t4417)*var2[1] + (-1.*t10789*t2839*t4401 + t1876*t4417)*var2[2] + (t10656*t10877*t3679 - 1.*t10762*t2217*t3200*t3679 + t10299*(t10880 + t10887 + t10126*t10877*t3679 - 1.*t10596*t10849*t4401 - 1.*t10539*t10877*t4401 + t10849*t3679*t8109) + t8109*(t10851 - 1.*t10299*t10849*t3679 + t10126*t2217*t3200*t3679 - 1.*t10539*t2217*t3200*t4401 + t10849*t4401*t8221 - 1.*t2217*t3200*t9881))*var2[3] + (-1.*t10868*t2816*t3200 + t10755*(t10851 + t10849*t2816*t3200) + t10835*t8019 + t2217*t3200*(t10880 + t10887 + t10849*t8019 + t10877*t9881))*var2[4];
  p_output1[3]=t11373*var2[0] + (-1.*t11383*t1876 - 1.*t2217*t2479*t2839*t3200)*var2[1] + (t11383*t2839 - 1.*t1876*t2217*t2479*t3200)*var2[2] + (t10656*t11500 + t10762*t11527 + t10299*(t11450 + t11453 + t10126*t11500 + t10596*t11522 + t10539*t11551 + t11514*t8109) + t8109*(t11428 + t11436 - 1.*t10299*t11514 - 1.*t10126*t11527 - 1.*t10539*t11534 - 1.*t11522*t8221))*var2[3] + (-1.*t10868*t2217*t2238 - 1.*t10835*t2217*t2812*t3200 + t10755*(t11190 + t11305 + t11428 + t11436 - 1.*t11172*t11430*t3200 - 1.*t2238*t2816*t9881) + t2217*t3200*(t11349 + t11358 + t11450 + t11453 - 1.*t11172*t2816*t8019 + t2812*t2816*t3200*t9881))*var2[4] + (-1.*t11097*t2238*t2812 + t11346*t3200 + t2812*t3200*(t11190 + t11305 - 1.*t11172*t3200 + t2238*t9839) + t2238*(t11349 + t11358 - 1.*t11172*t2238*t2812 - 1.*t2812*t3200*t9839))*var2[5];
  p_output1[4]=t8109*var2[0] + t11938*var2[1] + t11913*var2[2] + (t10656*t12188 + t10299*(t12144 + t12160 + t10126*t12188 + t10596*t12220 + t10539*t12247 + t12203*t8109) + t8109*(t12113 - 1.*t10299*t12203 - 1.*t12220*t8221))*var2[3] + (t10835*t11949 + t10755*(t12113 - 1.*t11679*t2238*t3200 + t12097*t2816*t3200) + t2217*t3200*(t11616 + t11682 + t12144 + t12160 + t12097*t8019 + t12147*t9881))*var2[4] + (t11097*t3200*t7294 + t2238*(t11616 + t11682 + t11679*t11683*t2812 + t11653*t7294 + t11602*t9447 - 1.*t2238*t7294*t9839))*var2[5] + (0.2255*t11602 + 0.1575*t2812)*var2[12];
  p_output1[5]=t12675*var2[0] + (-1.*t12742*t1876 + t12733*t2839)*var2[1] + (t12733*t1876 + t12742*t2839)*var2[2] + (t10656*t12834 + t10299*(t12810 + t12815 + t10596*t12850 + t12856 + t12857 + t12845*t8109) + t8109*(t12801 - 1.*t10299*t12845 - 1.*t12850*t8221))*var2[3] + (t10835*t2832 + t10755*(t12801 - 1.*t12500*t2238*t3200 + t12773*t2816*t3200) + t2217*t3200*(t12332 + t12503 + t12809 + t12810 + t12815 + t12773*t8019))*var2[4] + (t11097*t2479*t3200 + t2238*(t12332 + t12334 + t12458 + t12503 + t11683*t12500*t2812 + t12383*t7294))*var2[5] + (0.1575*t11602 + 0.2255*t2812)*var2[12] + (0.325*t2317 - 1.*t12282*t2317 - 1.*t2317*t9327)*var2[13];
  p_output1[6]=t12834;
  p_output1[7]=t4607;
  p_output1[8]=t12873;
  p_output1[9]=t10299*t10762 + t10656*t8109;
  p_output1[10]=t10755*t10835 + t10868*t2217*t3200;
  p_output1[11]=t11346*t2238 + t11097*t2812*t3200;
  p_output1[12]=0.1575*t2479 + 0.2255*t7294;
  p_output1[13]=t12893 + t12894 - 1.*t2317*t9264;
  p_output1[14]=-0.0641;
  p_output1[15]=(-1.*t1876*t2217*t3200 - 1.*t2839*t8221)*var2[1] + t12937*var2[2];
  p_output1[16]=t8221*var2[0] - 1.*t10561*t1876*var2[1] + t10561*t2839*var2[2] + (t10596*t13011 + t13085*t4431 + (t10539*t12834 + t10086*t4431 + t10126*t4431 + t10539*t7118)*t8109 + t12834*(-1.*t10086*t10596 - 1.*t10126*t10596 - 1.*t10539*t10711 - 1.*t10539*t8109))*var2[3];
  p_output1[17]=-1.*t2217*t3200*t3679*var2[0] + (-1.*t2816*t2839*t3200 - 1.*t1876*t2217*t3200*t4401)*var2[1] + (-1.*t1876*t2816*t3200 + t2217*t2839*t3200*t4401)*var2[2] + (t10877*t13011*t3679 + t10789*t13085*t3679 + (t13139 + t13160 + t10126*t10789*t3679 + t10849*t12834*t3679 - 1.*t10539*t10789*t4401 - 1.*t10849*t4401*t4431)*t8109 + t12834*(t13247 + t13288 - 1.*t10126*t10877*t3679 + t10596*t10849*t4401 + t10539*t10877*t4401 - 1.*t10849*t3679*t8109))*var2[3] + (t13229*t4417 + t13169*t8019 + t10755*(t13139 + t13160 + t10849*t4417 + t10789*t9881) + t2832*(t13247 + t13288 - 1.*t10849*t8019 - 1.*t10877*t9881))*var2[4];
  p_output1[18]=t11527*var2[0] + (-1.*t11534*t1876 - 1.*t2217*t2238*t2839)*var2[1] + (-1.*t1876*t2217*t2238 + t11534*t2839)*var2[2] + (t11500*t13011 + t11373*t13085 + (t10126*t11373 + t10539*t11383 + t11514*t12834 + t13465 + t13468 + t11522*t4431)*t8109 + t12834*(-1.*t10126*t11500 - 1.*t10596*t11522 - 1.*t10539*t11551 + t13476 + t13477 - 1.*t11514*t8109))*var2[3] + (-1.*t13229*t2217*t2479*t3200 - 1.*t13169*t2217*t2812*t3200 + t10755*(t13368 + t13393 + t13465 + t13468 - 1.*t11172*t2816*t4417 + t2479*t2816*t3200*t9881) + t2832*(t13406 + t13436 + t13476 + t13477 + t11172*t2816*t8019 - 1.*t2812*t2816*t3200*t9881))*var2[4] + (-1.*t13401*t2238*t2479 - 1.*t13440*t2238*t2812 + t2812*t3200*(t13368 + t13393 - 1.*t11172*t2238*t2479 - 1.*t2479*t3200*t9839) + t2479*t3200*(t13406 + t13436 + t11172*t2238*t2812 + t2812*t3200*t9839))*var2[5];
  p_output1[19]=(t12188*t13011 + t13085*t8109 + (t10758 + t10759 + t10761 + t12203*t12834 + t13611 + t12220*t4431)*t8109 + t12834*(-1.*t10126*t12188 - 1.*t10596*t12220 - 1.*t10539*t12247 + t13615 + t13617 - 1.*t12203*t8109))*var2[3] + (t11949*t13169 + t10755*t13229 + t10755*(t10758 + t10854 + t10855 + t13539 + t13611 + t12097*t4417) + t2832*(t13530 + t13534 + t13615 + t13617 - 1.*t12097*t8019 - 1.*t12147*t9881))*var2[4] + (t13401*t2812*t3200 + (t10854 + t11342 + t11344 + t13539 + t13541 + t11679*t11683*t2479)*t2812*t3200 + t13440*t3200*t7294 + t2479*t3200*(t13530 + t13532 + t13533 + t13534 - 1.*t11679*t11683*t2812 + t2238*t7294*t9839))*var2[5] + (t11602*t13548 + t13558*t7294 + t7294*(t11342 + t13541 + t11679*t2479 + t2812*t9335) + t2812*(t13532 + t13533 - 1.*t11679*t2812 - 1.*t7294*t9335))*var2[12];
  p_output1[20]=(t12834*t13011 + t12675*t13085 + (t10126*t12675 + t10539*t12742 + t12834*t12845 + t13718 + t13724 + t12850*t4431)*t8109 + t12834*(-1.*t10596*t12850 + t13734 + t13737 + t13751 + t13752 - 1.*t12845*t8109))*var2[3] + (t12733*t13229 + t13169*t2832 + t2832*(t13644 + t13651 + t13732 + t13734 + t13737 - 1.*t12773*t8019) + t10755*(t13657 + t13663 + t13718 + t13724 + t12773*t4417 + t12652*t9881))*var2[4] + (t11602*t13401*t3200 + t13440*t2479*t3200 + t2479*(t13644 + t13647 + t13648 + t13650 + t13651 - 1.*t11683*t12500*t2812)*t3200 + t2812*t3200*(t13655 + t13657 + t13663 + t13666 + t11683*t12500*t2479 - 1.*t11602*t2238*t9839))*var2[5] + (t13558*t2479 + t13548*t2812 + t7294*(t13655 + t13666 + t12500*t2479 + t11602*t9335) + t2812*(t13648 + t13650 - 1.*t12500*t2812 - 1.*t2479*t9335))*var2[12];
  p_output1[21]=t10299;
  p_output1[22]=t12937;
  p_output1[23]=t1876*t2217*t3200 + t2839*t8221;
  p_output1[24]=t12834*t13085 + t13011*t8109;
  p_output1[25]=t10755*t13169 + t13229*t2832;
  p_output1[26]=t13401*t2479*t3200 + t13440*t2812*t3200;
  p_output1[27]=t13558*t2812 + t13548*t7294;
  p_output1[28]=(-1.*t10755*t1876 - 1.*t10596*t2839)*var2[1] + t11938*var2[2];
  p_output1[29]=t10596*var2[0] - 1.*t10711*t1876*var2[1] + t10711*t2839*var2[2] + (t13836*t4431 + t10299*(-1.*t10539*t12834 - 1.*t10086*t4431 - 1.*t10126*t4431 - 1.*t10539*t7118) + t13873*t8221 + t12834*(t10299*t10539 + t10539*t10561 + t10086*t8221 + t10126*t8221))*var2[3];
  p_output1[30]=t10877*t3679*var2[0] + (t10877*t1876*t4401 + t2839*t8019)*var2[1] + (-1.*t10877*t2839*t4401 + t1876*t8019)*var2[2] + (t10789*t13836*t3679 - 1.*t13873*t2217*t3200*t3679 + t10299*(t13901 + t13903 - 1.*t10126*t10789*t3679 - 1.*t10849*t12834*t3679 + t10539*t10789*t4401 + t10849*t4401*t4431) + t12834*(t13896 + t10299*t10849*t3679 - 1.*t10126*t2217*t3200*t3679 + t10539*t2217*t3200*t4401 - 1.*t10849*t4401*t8221 + t2217*t3200*t9881))*var2[3] + (-1.*t13906*t2816*t3200 + t2832*(t13896 - 1.*t10849*t2816*t3200) + t13893*t4417 + t2217*t3200*(t13901 + t13903 - 1.*t10849*t4417 - 1.*t10789*t9881))*var2[4];
  p_output1[31]=t11500*var2[0] + (-1.*t11551*t1876 - 1.*t2217*t2812*t2839*t3200)*var2[1] + (t11551*t2839 - 1.*t1876*t2217*t2812*t3200)*var2[2] + (t11373*t13836 + t11527*t13873 + t10299*(-1.*t10126*t11373 - 1.*t10539*t11383 - 1.*t11514*t12834 + t13975 + t13980 - 1.*t11522*t4431) + t12834*(t10299*t11514 + t10126*t11527 + t10539*t11534 + t13961 + t13964 + t11522*t8221))*var2[3] + (-1.*t13906*t2217*t2238 - 1.*t13893*t2217*t2479*t3200 + t2832*(t13935 + t13937 + t13961 + t13964 + t11172*t11430*t3200 + t2238*t2816*t9881) + t2217*t3200*(t13941 + t13944 + t13975 + t13980 + t11172*t2816*t4417 - 1.*t2479*t2816*t3200*t9881))*var2[4] + (-1.*t13932*t2238*t2479 + t13947*t3200 + t2479*t3200*(t13935 + t13937 + t11172*t3200 - 1.*t2238*t9839) + t2238*(t13941 + t13944 + t11172*t2238*t2479 + t2479*t3200*t9839))*var2[5];
  p_output1[32]=t12188*var2[0] + (-1.*t12247*t1876 + t11949*t2839)*var2[1] + (t11949*t1876 + t12247*t2839)*var2[2] + (t10299*(-1.*t12203*t12834 + t13069 + t13079 + t13084 + t14137 - 1.*t12220*t4431) + t13836*t8109 + t12834*(t10299*t12203 + t14132 + t12220*t8221))*var2[3] + (t10755*t13893 + t2832*(t14132 + t11679*t2238*t3200 - 1.*t12097*t2816*t3200) + t2217*t3200*(t13069 + t13222 + t13226 + t14103 + t14137 - 1.*t12097*t4417))*var2[4] + (t2238*(t13222 + t13398 + t13399 + t14103 - 1.*t11679*t11683*t2479 - 1.*t11653*t2812) + t13932*t2812*t3200)*var2[5] - 0.068*t7294*var2[12];
  p_output1[33]=t12834*var2[0] + t4607*var2[1] + t12873*var2[2] + (t12675*t13836 + t10299*(-1.*t10126*t12675 - 1.*t10539*t12742 - 1.*t12834*t12845 + t14195 + t14199 - 1.*t12850*t4431) + t12834*(t10299*t12845 + t14189 + t12850*t8221))*var2[3] + (t12733*t13893 + t2832*(t14189 + t12500*t2238*t3200 - 1.*t12773*t2816*t3200) + t2217*t3200*(t14160 + t14163 + t14195 + t14199 - 1.*t12773*t4417 - 1.*t12652*t9881))*var2[4] + (t11602*t13932*t3200 + t2238*(t14160 + t14163 - 1.*t11683*t12500*t2479 - 1.*t12383*t2812 - 1.*t2479*t9447 + t11602*t2238*t9839))*var2[5] - 0.068*t2479*var2[12] + (t12893 + t12894 - 1.*t12282*t2474)*var2[13];
  p_output1[34]=t8109;
  p_output1[35]=t11938;
  p_output1[36]=t11913;
  p_output1[37]=t12834*t13836 + t10299*t13873;
  p_output1[38]=t13893*t2832 + t13906*t2217*t3200;
  p_output1[39]=t13947*t2238 + t13932*t2479*t3200;
  p_output1[40]=-0.068*t2812;
  p_output1[41]=-0.325*t2317 - 1.*t2474*t9264 + t2317*t9327;
  p_output1[42]=-0.28;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 43, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_dh_FrFoot_ParallelStance.hh"

namespace ParallelStance
{

void J_dh_FrFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
