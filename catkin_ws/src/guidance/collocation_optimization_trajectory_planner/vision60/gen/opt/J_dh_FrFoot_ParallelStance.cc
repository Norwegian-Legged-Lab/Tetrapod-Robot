/*
 * Automatically Generated from Mathematica.
 * Sun 3 Apr 2022 21:47:51 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t25690;
  double t25593;
  double t25680;
  double t25707;
  double t25683;
  double t25708;
  double t25710;
  double t25136;
  double t25880;
  double t25894;
  double t25938;
  double t25394;
  double t25946;
  double t25981;
  double t25877;
  double t25958;
  double t25970;
  double t20435;
  double t26006;
  double t26021;
  double t26048;
  double t26061;
  double t26067;
  double t26076;
  double t26077;
  double t26082;
  double t26083;
  double t26245;
  double t26258;
  double t26260;
  double t26359;
  double t26360;
  double t26361;
  double t26363;
  double t26392;
  double t26403;
  double t26404;
  double t26405;
  double t26408;
  double t26357;
  double t26362;
  double t26409;
  double t26411;
  double t26349;
  double t26351;
  double t26352;
  double t26353;
  double t26412;
  double t26413;
  double t26418;
  double t26419;
  double t26421;
  double t26422;
  double t26424;
  double t26426;
  double t26428;
  double t26429;
  double t26430;
  double t26431;
  double t26434;
  double t26435;
  double t26438;
  double t26439;
  double t26442;
  double t26472;
  double t26473;
  double t26475;
  double t26309;
  double t26310;
  double t26311;
  double t26312;
  double t26320;
  double t26321;
  double t26464;
  double t26468;
  double t26471;
  double t26456;
  double t26461;
  double t26462;
  double t26306;
  double t26323;
  double t26335;
  double t26414;
  double t26444;
  double t26446;
  double t26511;
  double t26512;
  double t26513;
  double t26519;
  double t26520;
  double t26521;
  double t26587;
  double t26588;
  double t26589;
  double t26523;
  double t26560;
  double t26561;
  double t26565;
  double t26573;
  double t26622;
  double t26623;
  double t26624;
  double t26626;
  double t26636;
  double t26637;
  double t26638;
  double t26527;
  double t26528;
  double t26532;
  double t26641;
  double t26643;
  double t26576;
  double t26580;
  double t26581;
  double t26613;
  double t26630;
  double t26687;
  double t26688;
  double t26689;
  double t26694;
  double t26695;
  double t26729;
  double t26730;
  double t26731;
  double t26616;
  double t26620;
  double t26692;
  double t26696;
  double t26708;
  double t26710;
  double t26631;
  double t26634;
  double t26745;
  double t26746;
  double t26754;
  double t26758;
  double t26763;
  double t26771;
  double t26773;
  double t26774;
  double t26776;
  double t26778;
  double t26779;
  double t26781;
  double t26782;
  double t26783;
  double t26785;
  double t26787;
  double t26788;
  double t26683;
  double t26684;
  double t26815;
  double t26816;
  double t26817;
  double t26837;
  double t26838;
  double t26827;
  double t26828;
  double t26831;
  double t26832;
  double t26824;
  double t26836;
  double t26841;
  double t26874;
  double t26882;
  double t26883;
  double t26861;
  double t26862;
  double t26863;
  double t26869;
  double t26871;
  double t26872;
  double t26889;
  double t26890;
  double t26892;
  double t26885;
  double t26888;
  double t26897;
  double t26916;
  double t26917;
  double t26918;
  double t26920;
  double t26922;
  double t26923;
  double t26926;
  double t26931;
  double t26933;
  double t26968;
  double t26969;
  double t26971;
  double t26842;
  double t27000;
  double t27002;
  double t27003;
  double t27015;
  double t27017;
  double t27018;
  double t27026;
  double t27027;
  double t27029;
  double t27033;
  double t27035;
  double t27037;
  double t26993;
  double t26995;
  double t26988;
  double t27004;
  double t27060;
  double t27062;
  double t27063;
  double t27054;
  double t27055;
  double t27058;
  double t27064;
  double t27070;
  double t27071;
  double t27080;
  double t27081;
  double t27083;
  double t27085;
  double t27087;
  double t27088;
  double t27091;
  double t27092;
  double t27093;
  double t26167;
  double t26168;
  double t26169;
  double t26700;
  double t26701;
  double t26702;
  double t26477;
  double t26486;
  double t26499;
  double t27100;
  double t27101;
  double t26541;
  double t26542;
  double t26543;
  double t27068;
  double t27167;
  double t27209;
  double t27214;
  double t27153;
  double t27230;
  double t27233;
  double t27170;
  double t27177;
  double t27181;
  double t27221;
  double t26991;
  double t26999;
  double t26792;
  double t26793;
  double t26794;
  double t27260;
  double t27262;
  double t27219;
  double t27274;
  double t27277;
  double t27223;
  double t27224;
  double t27305;
  double t27310;
  double t26721;
  double t26722;
  double t26724;
  double t27318;
  double t27319;
  double t26801;
  double t26802;
  double t26803;
  double t27267;
  double t27268;
  double t27271;
  double t27283;
  double t27358;
  double t27360;
  double t27369;
  double t27366;
  double t27356;
  double t27361;
  double t27400;
  double t27404;
  double t27407;
  double t26943;
  double t26944;
  double t26947;
  double t27375;
  double t27376;
  double t27384;
  double t27386;
  double t27441;
  double t27442;
  double t27448;
  double t27454;
  double t27450;
  double t27452;
  double t27439;
  double t27443;
  double t27479;
  double t27482;
  double t27013;
  double t27021;
  double t27022;
  double t27487;
  double t27488;
  double t27138;
  double t27139;
  double t27140;
  double t26854;
  double t26855;
  double t26859;
  double t27521;
  double t27522;
  double t27565;
  double t27486;
  double t27607;
  double t27566;
  double t27567;
  double t27568;
  double t27612;
  double t27614;
  double t27581;
  double t27600;
  double t27440;
  double t27601;
  double t27602;
  double t27664;
  double t27670;
  double t26747;
  double t27684;
  double t27689;
  double t27618;
  double t27710;
  double t27721;
  double t27728;
  double t27730;
  double t27659;
  double t27660;
  double t27765;
  double t27909;
  double t27919;
  double t27131;
  double t27132;
  double t27112;
  double t27113;
  double t27114;
  double t28030;
  double t28032;
  double t28095;
  double t28100;
  double t28105;
  double t26850;
  double t26851;
  double t26852;
  double t27692;
  t25690 = Cos(var1[13]);
  t25593 = Cos(var1[14]);
  t25680 = Sin(var1[13]);
  t25707 = Sin(var1[14]);
  t25683 = t25593*t25680;
  t25708 = -1.*t25690*t25707;
  t25710 = t25683 + t25708;
  t25136 = Cos(var1[5]);
  t25880 = t25690*t25593;
  t25894 = t25680*t25707;
  t25938 = t25880 + t25894;
  t25394 = Sin(var1[12]);
  t25946 = Sin(var1[5]);
  t25981 = Cos(var1[3]);
  t25877 = -1.*t25136*t25394*t25710;
  t25958 = t25938*t25946;
  t25970 = t25877 + t25958;
  t20435 = Sin(var1[3]);
  t26006 = Cos(var1[12]);
  t26021 = Cos(var1[4]);
  t26048 = t26006*t26021*t25710;
  t26061 = Sin(var1[4]);
  t26067 = t25136*t25938;
  t26076 = t25394*t25710*t25946;
  t26077 = t26067 + t26076;
  t26082 = -1.*t26061*t26077;
  t26083 = t26048 + t26082;
  t26245 = -1.*t26006*t25710*t26061;
  t26258 = -1.*t26021*t26077;
  t26260 = t26245 + t26258;
  t26359 = -0.0641*t25593;
  t26360 = -0.28*t25707;
  t26361 = t26359 + t26360;
  t26363 = -1.*t25593;
  t26392 = 1. + t26363;
  t26403 = 0.075*t26392;
  t26404 = 0.355*t25593;
  t26405 = -0.0641*t25707;
  t26408 = t26403 + t26404 + t26405;
  t26357 = -0.325*t25680;
  t26362 = t25690*t26361;
  t26409 = t25680*t26408;
  t26411 = t26357 + t26362 + t26409;
  t26349 = t26021*t25394;
  t26351 = t26006*t26061*t25946;
  t26352 = t26349 + t26351;
  t26353 = -0.068*t25394;
  t26412 = t26006*t26411;
  t26413 = t26353 + t26412;
  t26418 = -1.*t25690;
  t26419 = 1. + t26418;
  t26421 = 0.325*t26419;
  t26422 = -1.*t25680*t26361;
  t26424 = t25690*t26408;
  t26426 = t26421 + t26422 + t26424;
  t26428 = t25136*t26426;
  t26429 = -1.*t26006;
  t26430 = 1. + t26429;
  t26431 = -0.1575*t26430;
  t26434 = -0.2255*t26006;
  t26435 = -1.*t25394*t26411;
  t26438 = t26431 + t26434 + t26435;
  t26439 = -1.*t26438*t25946;
  t26442 = t26428 + t26439;
  t26472 = t26021*t26413;
  t26473 = -1.*t26061*t26442;
  t26475 = t26472 + t26473;
  t26309 = -1.*t25593*t25680;
  t26310 = t25690*t25707;
  t26311 = t26309 + t26310;
  t26312 = t25136*t26311;
  t26320 = t25394*t25938*t25946;
  t26321 = t26312 + t26320;
  t26464 = t25394*t26061;
  t26468 = -1.*t26006*t26021*t25946;
  t26471 = t26464 + t26468;
  t26456 = t26413*t26061;
  t26461 = t26021*t26442;
  t26462 = t26456 + t26461;
  t26306 = t26006*t25938*t26061;
  t26323 = t26021*t26321;
  t26335 = t26306 + t26323;
  t26414 = -1.*t26413*t26061;
  t26444 = -1.*t26021*t26442;
  t26446 = t26414 + t26444;
  t26511 = t26006*t26021*t25938;
  t26512 = -1.*t26061*t26321;
  t26513 = t26511 + t26512;
  t26519 = t25136*t26438;
  t26520 = t26426*t25946;
  t26521 = t26519 + t26520;
  t26587 = t25136*t25394*t25710;
  t26588 = -1.*t25938*t25946;
  t26589 = t26587 + t26588;
  t26523 = -1.*t26006*t25136*t26521;
  t26560 = -1.*t25136*t25394*t25938;
  t26561 = t26311*t25946;
  t26565 = t26560 + t26561;
  t26573 = t26521*t26565;
  t26622 = -1.*t25136*t26438;
  t26623 = -1.*t26426*t25946;
  t26624 = t26622 + t26623;
  t26626 = t26006*t25946*t26521;
  t26636 = t25136*t25394*t25938;
  t26637 = -1.*t26311*t25946;
  t26638 = t26636 + t26637;
  t26527 = -1.*t26471*t26462;
  t26528 = -1.*t26352*t26475;
  t26532 = t26523 + t26527 + t26528;
  t26641 = t26442*t26565;
  t26643 = t26521*t26321;
  t26576 = t26462*t26335;
  t26580 = t26475*t26513;
  t26581 = t26573 + t26576 + t26580;
  t26613 = -1.*t25394*t26413;
  t26630 = t26006*t26413*t25938;
  t26687 = 0.068*t25394;
  t26688 = -1.*t26006*t26411;
  t26689 = t26687 + t26688;
  t26694 = -0.068*t26006;
  t26695 = t26694 + t26435;
  t26729 = -1.*t26021*t25394*t25710;
  t26730 = -1.*t26006*t25710*t26061*t25946;
  t26731 = t26729 + t26730;
  t26616 = t26006*t25946*t26442;
  t26620 = t26613 + t26616 + t26523;
  t26692 = -1.*t26006*t26413;
  t26696 = -1.*t25394*t26695;
  t26708 = -1.*t25394*t26413*t25938;
  t26710 = t26006*t26695*t25938;
  t26631 = t26442*t26321;
  t26634 = t26630 + t26573 + t26631;
  t26745 = Power(t25136,2);
  t26746 = -1.*t26006*t26745*t26689;
  t26754 = t25136*t25394*t26521;
  t26758 = -1.*t26006*t25136*t25938*t26521;
  t26763 = t25136*t26689*t26565;
  t26771 = -1.*t25394*t25938*t26061;
  t26773 = t26006*t26021*t25938*t25946;
  t26774 = t26771 + t26773;
  t26776 = t26695*t26061;
  t26778 = -1.*t26021*t26689*t25946;
  t26779 = t26776 + t26778;
  t26781 = t26021*t26695;
  t26782 = t26689*t26061*t25946;
  t26783 = t26781 + t26782;
  t26785 = t26006*t26061;
  t26787 = t26021*t25394*t25946;
  t26788 = t26785 + t26787;
  t26683 = -1.*t26006*t26438;
  t26684 = t26613 + t26683;
  t26815 = -1.*t25690*t25593;
  t26816 = -1.*t25680*t25707;
  t26817 = t26815 + t26816;
  t26837 = -0.325*t25690;
  t26838 = t26837 + t26422 + t26424;
  t26827 = 0.325*t25680;
  t26828 = -1.*t25690*t26361;
  t26831 = -1.*t25680*t26408;
  t26832 = t26827 + t26828 + t26831;
  t26824 = t26006*t26413*t26311;
  t26836 = Power(t26006,2);
  t26841 = t26836*t26838*t25938;
  t26874 = -1.*t25136*t25394*t26838;
  t26882 = t26832*t25946;
  t26883 = t26874 + t26882;
  t26861 = -1.*t25136*t25394*t26311;
  t26862 = t26817*t25946;
  t26863 = t26861 + t26862;
  t26869 = t25136*t26832;
  t26871 = t25394*t26838*t25946;
  t26872 = t26869 + t26871;
  t26889 = t25136*t26817;
  t26890 = t25394*t26311*t25946;
  t26892 = t26889 + t26890;
  t26885 = -1.*t26006*t25136*t26883;
  t26888 = t26883*t26565;
  t26897 = t26521*t26863;
  t26916 = t26006*t26311*t26061;
  t26917 = t26021*t26892;
  t26918 = t26916 + t26917;
  t26920 = t26006*t26838*t26061;
  t26922 = t26021*t26872;
  t26923 = t26920 + t26922;
  t26926 = t26006*t26021*t26838;
  t26931 = -1.*t26061*t26872;
  t26933 = t26926 + t26931;
  t26968 = -0.28*t25593;
  t26969 = 0.0641*t25707;
  t26971 = t26968 + t26969;
  t26842 = Power(t25394,2);
  t27000 = t25680*t26361;
  t27002 = t25690*t26971;
  t27003 = t27000 + t27002;
  t27015 = t25136*t25710;
  t27017 = t25394*t26817*t25946;
  t27018 = t27015 + t27017;
  t27026 = -1.*t25136*t25394*t26817;
  t27027 = t25710*t25946;
  t27029 = t27026 + t27027;
  t27033 = t26006*t26021*t26817;
  t27035 = -1.*t26061*t27018;
  t27037 = t27033 + t27035;
  t26993 = -1.*t25680*t26971;
  t26995 = t26362 + t26993;
  t26988 = t26006*t26413*t25710;
  t27004 = t26836*t27003*t25938;
  t27060 = -1.*t25136*t25394*t27003;
  t27062 = t26995*t25946;
  t27063 = t27060 + t27062;
  t27054 = t25136*t26995;
  t27055 = t25394*t27003*t25946;
  t27058 = t27054 + t27055;
  t27064 = -1.*t26006*t25136*t27063;
  t27070 = t27063*t26565;
  t27071 = t26521*t25970;
  t27080 = t26006*t25710*t26061;
  t27081 = t26021*t26077;
  t27083 = t27080 + t27081;
  t27085 = t26006*t27003*t26061;
  t27087 = t26021*t27058;
  t27088 = t27085 + t27087;
  t27091 = t26006*t26021*t27003;
  t27092 = -1.*t26061*t27058;
  t27093 = t27091 + t27092;
  t26167 = t25981*t25970;
  t26168 = -1.*t20435*t26083;
  t26169 = t26167 + t26168;
  t26700 = t26426*t26311;
  t26701 = -1.*t25394*t26438*t25938;
  t26702 = t26700 + t26630 + t26701;
  t26477 = -1.*t25394*t26061;
  t26486 = t26006*t26021*t25946;
  t26499 = t26477 + t26486;
  t27100 = t26462*t27083;
  t27101 = t26475*t26083;
  t26541 = -1.*t26006*t25938*t26061;
  t26542 = -1.*t26021*t26321;
  t26543 = t26541 + t26542;
  t27068 = t26442*t26077;
  t27167 = -1.*t26521*t26565;
  t27209 = t26521*t26077;
  t27214 = t26442*t25970;
  t27153 = t27071 + t27100 + t27101;
  t27230 = -1.*t26442*t26565;
  t27233 = -1.*t26521*t26321;
  t27170 = -1.*t26462*t26335;
  t27177 = -1.*t26475*t26513;
  t27181 = t27167 + t27170 + t27177;
  t27221 = -1.*t26006*t26413*t25938;
  t26991 = -1.*t25394*t26438*t25710;
  t26999 = t26426*t25938;
  t26792 = t26006*t26021;
  t26793 = -1.*t25394*t26061*t25946;
  t26794 = t26792 + t26793;
  t27260 = -1.*t25394*t26413*t25710;
  t27262 = t26006*t26695*t25710;
  t27219 = t26988 + t27068 + t27071;
  t27274 = t25394*t26413*t25938;
  t27277 = -1.*t26006*t26695*t25938;
  t27223 = -1.*t26442*t26321;
  t27224 = t27221 + t27167 + t27223;
  t27305 = -1.*t26006*t25136*t25710*t26521;
  t27310 = t25136*t26689*t25970;
  t26721 = -1.*t25394*t25710*t26061;
  t26722 = t26006*t26021*t25710*t25946;
  t26724 = t26721 + t26722;
  t27318 = t26006*t25136*t25938*t26521;
  t27319 = -1.*t25136*t26689*t26565;
  t26801 = -1.*t26021*t25394*t25938;
  t26802 = -1.*t26006*t25938*t26061*t25946;
  t26803 = t26801 + t26802;
  t27267 = -1.*t26426*t26311;
  t27268 = t25394*t26438*t25938;
  t27271 = t27267 + t27221 + t27268;
  t27283 = t26988 + t26991 + t26999;
  t27358 = -1.*t26832*t26311;
  t27360 = -1.*t26426*t26817;
  t27369 = t26832*t25938;
  t27366 = t26836*t26838*t25710;
  t27356 = -1.*t26006*t26413*t26311;
  t27361 = -1.*t26836*t26838*t25938;
  t27400 = t26883*t25970;
  t27404 = -1.*t26883*t26565;
  t27407 = -1.*t26521*t26863;
  t26943 = t26006*t26021*t26311;
  t26944 = -1.*t26061*t26892;
  t26947 = t26943 + t26944;
  t27375 = t26411*t25710;
  t27376 = t27375 + t26999;
  t27384 = -1.*t26411*t25938;
  t27386 = t27267 + t27384;
  t27441 = -1.*t26995*t26311;
  t27442 = -1.*t26426*t25938;
  t27448 = t26426*t25710;
  t27454 = t26995*t25938;
  t27450 = t26836*t27003*t25710;
  t27452 = t26006*t26413*t26817;
  t27439 = -1.*t26006*t26413*t25710;
  t27443 = -1.*t26836*t27003*t25938;
  t27479 = t26521*t27029;
  t27482 = t27063*t25970;
  t27013 = t26006*t26817*t26061;
  t27021 = t26021*t27018;
  t27022 = t27013 + t27021;
  t27487 = -1.*t27063*t26565;
  t27488 = -1.*t26521*t25970;
  t27138 = t26006*t25981*t25136;
  t27139 = -1.*t20435*t26352;
  t27140 = t27138 + t27139;
  t26854 = t25981*t26565;
  t26855 = -1.*t20435*t26513;
  t26859 = t26854 + t26855;
  t27521 = -1.*t26462*t27083;
  t27522 = -1.*t26475*t26083;
  t27565 = t26006*t25136*t26521;
  t27486 = -1.*t26442*t26077;
  t27607 = -1.*t26006*t25946*t26521;
  t27566 = t26471*t26462;
  t27567 = t26352*t26475;
  t27568 = t27565 + t27566 + t27567;
  t27612 = -1.*t26521*t26077;
  t27614 = -1.*t26442*t25970;
  t27581 = t27488 + t27521 + t27522;
  t27600 = t25394*t26413;
  t27440 = t25394*t26438*t25710;
  t27601 = -1.*t26006*t25946*t26442;
  t27602 = t27600 + t27601 + t27565;
  t27664 = t26006*t26413;
  t27670 = t25394*t26695;
  t26747 = Power(t25946,2);
  t27684 = t25394*t26413*t25710;
  t27689 = -1.*t26006*t26695*t25710;
  t27618 = t27439 + t27486 + t27488;
  t27710 = t26006*t26745*t26689;
  t27721 = -1.*t25136*t25394*t26521;
  t27728 = t26006*t25136*t25710*t26521;
  t27730 = -1.*t25136*t26689*t25970;
  t27659 = t26006*t26438;
  t27660 = t27600 + t27659;
  t27765 = -1.*t26836*t26838*t25710;
  t27909 = t26006*t25136*t26883;
  t27919 = -1.*t26883*t25970;
  t27131 = 0.325*t25707;
  t27132 = -1.*t26408*t25707;
  t27112 = t20435*t25970;
  t27113 = t25981*t26083;
  t27114 = t27112 + t27113;
  t28030 = -1.*t26836*t27003*t25710;
  t28032 = -1.*t26006*t26413*t26817;
  t28095 = t26006*t25136*t27063;
  t28100 = -1.*t26521*t27029;
  t28105 = -1.*t27063*t25970;
  t26850 = t20435*t26565;
  t26851 = t25981*t26513;
  t26852 = t26850 + t26851;
  t27692 = t27439 + t27440 + t27442;
  p_output1[0]=(-1.*t20435*t25970 - 1.*t25981*t26083)*var2[1] + t26169*var2[2];
  p_output1[1]=t26083*var2[0] - 1.*t20435*t26260*var2[1] + t25981*t26260*var2[2] + (t26335*(-1.*t26352*t26446 - 1.*t26352*t26462 - 1.*t26471*t26475 - 1.*t26475*t26499) + t26513*t26532 + t26471*(t26335*t26475 + t26446*t26513 + t26462*t26513 + t26475*t26543) + t26352*t26581)*var2[3];
  p_output1[2]=t26021*t26589*var2[0] + (t25981*t26077 + t20435*t26061*t26589)*var2[1] + (t20435*t26077 - 1.*t25981*t26061*t26589)*var2[2] + (-1.*t25136*t26006*t26021*t26581 + t26335*(-1.*t25136*t26006*t26442 + t25136*t26006*t26021*t26462 - 1.*t25136*t26006*t26061*t26475 + t26061*t26352*t26624 - 1.*t26021*t26471*t26624 + t26626) + t26021*t26532*t26638 + t26471*(t26021*t26335*t26624 - 1.*t26061*t26513*t26624 + t26021*t26462*t26638 - 1.*t26061*t26475*t26638 + t26641 + t26643))*var2[3] + (t26321*t26620 + t26565*(t25946*t26006*t26624 + t26626) - 1.*t25946*t26006*t26634 + t25136*t26006*(t26321*t26624 + t26442*t26638 + t26641 + t26643))*var2[4];
  p_output1[3]=t26724*var2[0] + (-1.*t25136*t25710*t25981*t26006 - 1.*t20435*t26731)*var2[1] + (-1.*t20435*t25136*t25710*t26006 + t25981*t26731)*var2[2] + (t26532*t26774 + t26581*t26788 + t26335*(t26746 + t26754 - 1.*t26471*t26779 - 1.*t26352*t26783 - 1.*t26462*t26788 - 1.*t26475*t26794) + t26471*(t26758 + t26763 + t26462*t26774 + t26335*t26779 + t26513*t26783 + t26475*t26803))*var2[3] + (-1.*t25136*t25938*t26006*t26620 - 1.*t25136*t25394*t26634 + t26565*(-1.*t25394*t25946*t26442 + t26692 + t26696 + t26746 - 1.*t26006*t26689*t26747 + t26754) + t25136*t26006*(t25938*t25946*t26006*t26442 - 1.*t25946*t26321*t26689 + t26708 + t26710 + t26758 + t26763))*var2[4] + (-1.*t25394*t25938*t26684 + t25938*t26006*(t25394*t26438 - 1.*t26006*t26689 + t26692 + t26696) + t26006*t26702 + t25394*(-1.*t25938*t26006*t26438 - 1.*t25394*t25938*t26689 + t26708 + t26710))*var2[5];
  p_output1[4]=t26335*var2[0] + t26859*var2[1] + t26852*var2[2] + (t26532*t26918 + t26335*(t26885 - 1.*t26471*t26923 - 1.*t26352*t26933) + t26471*(t26888 + t26897 + t26462*t26918 + t26335*t26923 + t26513*t26933 + t26475*t26947))*var2[3] + (t26620*t26863 + t26565*(-1.*t25394*t26006*t26838 + t25946*t26006*t26872 + t26885) + t25136*t26006*(t26824 + t26841 + t26321*t26872 + t26888 + t26442*t26892 + t26897))*var2[4] + (t26006*t26311*t26684 + t25394*(-1.*t25394*t26311*t26438 + t26426*t26817 + t26824 + t26311*t26832 + t26841 + t25938*t26838*t26842))*var2[5] + (0.1575*t25938 + 0.2255*t26817)*var2[12];
  p_output1[5]=t27022*var2[0] + (t25981*t27029 - 1.*t20435*t27037)*var2[1] + (t20435*t27029 + t25981*t27037)*var2[2] + (t26532*t27083 + t26335*(t27064 - 1.*t26471*t27088 - 1.*t26352*t27093) + t26471*(t27070 + t27071 + t26335*t27088 + t26513*t27093 + t27100 + t27101))*var2[3] + (t25970*t26620 + t26565*(-1.*t25394*t26006*t27003 + t25946*t26006*t27058 + t27064) + t25136*t26006*(t26988 + t27004 + t26321*t27058 + t27068 + t27070 + t27071))*var2[4] + (t25710*t26006*t26684 + t25394*(t26988 + t26991 + t26311*t26995 + t26999 + t25938*t26842*t27003 + t27004))*var2[5] + (0.2255*t25938 + 0.1575*t26817)*var2[12] + (0.325*t25593 - 1.*t25593*t26408 - 1.*t25593*t26971)*var2[13];
  p_output1[6]=t27083;
  p_output1[7]=t26169;
  p_output1[8]=t27114;
  p_output1[9]=t26335*t26532 + t26471*t26581;
  p_output1[10]=t26565*t26620 + t25136*t26006*t26634;
  p_output1[11]=t25938*t26006*t26684 + t25394*t26702;
  p_output1[12]=0.1575*t25710 + 0.2255*t26311;
  p_output1[13]=-1.*t25593*t26361 + t27131 + t27132;
  p_output1[14]=-0.0641;
  p_output1[15]=(-1.*t20435*t25136*t26006 - 1.*t25981*t26352)*var2[1] + t27140*var2[2];
  p_output1[16]=t26352*var2[0] - 1.*t20435*t26499*var2[1] + t25981*t26499*var2[2] + ((-1.*t26335*t26475 - 1.*t26446*t26513 - 1.*t26462*t26513 - 1.*t26475*t26543)*t27083 + t26335*(t26083*t26446 + t26083*t26462 + t26260*t26475 + t26475*t27083) + t26513*t27153 + t26083*t27181)*var2[3];
  p_output1[17]=-1.*t25136*t26006*t26021*var2[0] + (-1.*t25946*t25981*t26006 - 1.*t20435*t25136*t26006*t26061)*var2[1] + (-1.*t20435*t25946*t26006 + t25136*t25981*t26006*t26061)*var2[2] + (t26021*t26638*t27153 + t26021*t26589*t27181 + t26335*(t26021*t26462*t26589 - 1.*t26061*t26475*t26589 - 1.*t26061*t26083*t26624 + t26021*t26624*t27083 + t27209 + t27214) + t27083*(-1.*t26021*t26335*t26624 + t26061*t26513*t26624 - 1.*t26021*t26462*t26638 + t26061*t26475*t26638 + t27230 + t27233))*var2[3] + (t26565*(t26442*t26589 + t26077*t26624 + t27209 + t27214) + t26321*t27219 + t26077*t27224 + t25970*(-1.*t26321*t26624 - 1.*t26442*t26638 + t27230 + t27233))*var2[4];
  p_output1[18]=t26788*var2[0] + (-1.*t25136*t25394*t25981 - 1.*t20435*t26794)*var2[1] + (-1.*t20435*t25136*t25394 + t25981*t26794)*var2[2] + (t26774*t27153 + t26724*t27181 + t26335*(t26462*t26724 + t26475*t26731 + t26083*t26783 + t26779*t27083 + t27305 + t27310) + t27083*(-1.*t26462*t26774 - 1.*t26335*t26779 - 1.*t26513*t26783 - 1.*t26475*t26803 + t27318 + t27319))*var2[3] + (-1.*t25136*t25938*t26006*t27219 - 1.*t25136*t25710*t26006*t27224 + t26565*(t25710*t25946*t26006*t26442 - 1.*t25946*t26077*t26689 + t27260 + t27262 + t27305 + t27310) + t25970*(-1.*t25938*t25946*t26006*t26442 + t25946*t26321*t26689 + t27274 + t27277 + t27318 + t27319))*var2[4] + (t25938*t26006*(-1.*t25710*t26006*t26438 - 1.*t25394*t25710*t26689 + t27260 + t27262) - 1.*t25394*t25710*t27271 + t25710*t26006*(t25938*t26006*t26438 + t25394*t25938*t26689 + t27274 + t27277) - 1.*t25394*t25938*t27283)*var2[5];
  p_output1[19]=(t26918*t27153 + t26335*t27181 + t26335*(t26573 + t26576 + t26580 + t26083*t26933 + t26923*t27083 + t27400) + t27083*(-1.*t26462*t26918 - 1.*t26335*t26923 - 1.*t26513*t26933 - 1.*t26475*t26947 + t27404 + t27407))*var2[3] + (t26863*t27219 + t26565*t27224 + t26565*(t26573 + t26630 + t26631 + t26077*t26872 + t27366 + t27400) + t25970*(-1.*t26321*t26872 - 1.*t26442*t26892 + t27356 + t27361 + t27404 + t27407))*var2[4] + (t25938*t26006*t27271 + t26006*t26311*t27283 + t25710*t26006*(t25394*t26311*t26438 - 1.*t25938*t26838*t26842 + t27356 + t27358 + t27360 + t27361) + t25938*t26006*(t26630 + t26700 + t26701 + t25710*t26838*t26842 + t27366 + t27369))*var2[5] + (t25938*(-1.*t26311*t26411 - 1.*t25938*t26838 + t27358 + t27360) + t26311*(t25938*t26411 + t26700 + t25710*t26838 + t27369) + t26817*t27376 + t26311*t27386)*var2[12];
  p_output1[20]=(t27083*t27153 + t27022*t27181 + t26335*(t26462*t27022 + t26475*t27037 + t27083*t27088 + t26083*t27093 + t27479 + t27482) + t27083*(-1.*t26335*t27088 - 1.*t26513*t27093 + t27487 + t27488 + t27521 + t27522))*var2[3] + (t25970*t27219 + t27029*t27224 + t26565*(t26442*t27018 + t26077*t27058 + t27450 + t27452 + t27479 + t27482) + t25970*(-1.*t26321*t27058 + t27439 + t27443 + t27486 + t27487 + t27488))*var2[4] + (t26006*t26817*t27271 + t25710*t26006*t27283 + t25710*t26006*(-1.*t25938*t26842*t27003 + t27439 + t27440 + t27441 + t27442 + t27443) + t25938*t26006*(-1.*t25394*t26438*t26817 + t25710*t26842*t27003 + t27448 + t27450 + t27452 + t27454))*var2[5] + (t25938*t27376 + t25710*t27386 + t25938*(-1.*t25710*t26411 - 1.*t25938*t27003 + t27441 + t27442) + t26311*(t26411*t26817 + t25710*t27003 + t27448 + t27454))*var2[12];
  p_output1[21]=t26471;
  p_output1[22]=t27140;
  p_output1[23]=t20435*t25136*t26006 + t25981*t26352;
  p_output1[24]=t26335*t27153 + t27083*t27181;
  p_output1[25]=t26565*t27219 + t25970*t27224;
  p_output1[26]=t25710*t26006*t27271 + t25938*t26006*t27283;
  p_output1[27]=t26311*t27376 + t25938*t27386;
  p_output1[28]=(-1.*t25981*t26513 - 1.*t20435*t26565)*var2[1] + t26859*var2[2];
  p_output1[29]=t26513*var2[0] - 1.*t20435*t26543*var2[1] + t25981*t26543*var2[2] + ((t26352*t26446 + t26352*t26462 + t26471*t26475 + t26475*t26499)*t27083 + t26471*(-1.*t26083*t26446 - 1.*t26083*t26462 - 1.*t26260*t26475 - 1.*t26475*t27083) + t26083*t27568 + t26352*t27581)*var2[3];
  p_output1[30]=t26021*t26638*var2[0] + (t25981*t26321 + t20435*t26061*t26638)*var2[1] + (t20435*t26321 - 1.*t25981*t26061*t26638)*var2[2] + (t26021*t26589*t27568 - 1.*t25136*t26006*t26021*t27581 + t27083*(t25136*t26006*t26442 - 1.*t25136*t26006*t26021*t26462 + t25136*t26006*t26061*t26475 - 1.*t26061*t26352*t26624 + t26021*t26471*t26624 + t27607) + t26471*(-1.*t26021*t26462*t26589 + t26061*t26475*t26589 + t26061*t26083*t26624 - 1.*t26021*t26624*t27083 + t27612 + t27614))*var2[3] + (t26077*t27602 + t25970*(-1.*t25946*t26006*t26624 + t27607) + t25136*t26006*(-1.*t26442*t26589 - 1.*t26077*t26624 + t27612 + t27614) - 1.*t25946*t26006*t27618)*var2[4];
  p_output1[31]=t26774*var2[0] + (-1.*t25136*t25938*t25981*t26006 - 1.*t20435*t26803)*var2[1] + (-1.*t20435*t25136*t25938*t26006 + t25981*t26803)*var2[2] + (t26724*t27568 + t26788*t27581 + t27083*(t26471*t26779 + t26352*t26783 + t26462*t26788 + t26475*t26794 + t27710 + t27721) + t26471*(-1.*t26462*t26724 - 1.*t26475*t26731 - 1.*t26083*t26783 - 1.*t26779*t27083 + t27728 + t27730))*var2[3] + (-1.*t25136*t25710*t26006*t27602 - 1.*t25136*t25394*t27618 + t25970*(t25394*t25946*t26442 + t26006*t26689*t26747 + t27664 + t27670 + t27710 + t27721) + t25136*t26006*(-1.*t25710*t25946*t26006*t26442 + t25946*t26077*t26689 + t27684 + t27689 + t27728 + t27730))*var2[4] + (-1.*t25394*t25710*t27660 + t25710*t26006*(-1.*t25394*t26438 + t26006*t26689 + t27664 + t27670) + t25394*(t25710*t26006*t26438 + t25394*t25710*t26689 + t27684 + t27689) + t26006*t27692)*var2[5];
  p_output1[32]=t26918*var2[0] + (t25981*t26863 - 1.*t20435*t26947)*var2[1] + (t20435*t26863 + t25981*t26947)*var2[2] + (t26335*t27568 + t27083*(t26471*t26923 + t26352*t26933 + t27909) + t26471*(-1.*t26083*t26933 - 1.*t26923*t27083 + t27167 + t27170 + t27177 + t27919))*var2[3] + (t26565*t27602 + t25970*(t25394*t26006*t26838 - 1.*t25946*t26006*t26872 + t27909) + t25136*t26006*(-1.*t26077*t26872 + t27167 + t27221 + t27223 + t27765 + t27919))*var2[4] + (t25938*t26006*t27660 + t25394*(-1.*t25938*t26832 - 1.*t25710*t26838*t26842 + t27221 + t27267 + t27268 + t27765))*var2[5] - 0.068*t26311*var2[12];
  p_output1[33]=t27083*var2[0] + t26169*var2[1] + t27114*var2[2] + (t27022*t27568 + t27083*(t26471*t27088 + t26352*t27093 + t28095) + t26471*(-1.*t26462*t27022 - 1.*t26475*t27037 - 1.*t27083*t27088 - 1.*t26083*t27093 + t28100 + t28105))*var2[3] + (t27029*t27602 + t25970*(t25394*t26006*t27003 - 1.*t25946*t26006*t27058 + t28095) + t25136*t26006*(-1.*t26442*t27018 - 1.*t26077*t27058 + t28030 + t28032 + t28100 + t28105))*var2[4] + (t26006*t26817*t27660 + t25394*(-1.*t25710*t26426 + t25394*t26438*t26817 - 1.*t25938*t26995 - 1.*t25710*t26842*t27003 + t28030 + t28032))*var2[5] - 0.068*t25710*var2[12] + (-1.*t25707*t26971 + t27131 + t27132)*var2[13];
  p_output1[34]=t26335;
  p_output1[35]=t26859;
  p_output1[36]=t26852;
  p_output1[37]=t27083*t27568 + t26471*t27581;
  p_output1[38]=t25970*t27602 + t25136*t26006*t27618;
  p_output1[39]=t25710*t26006*t27660 + t25394*t27692;
  p_output1[40]=-0.068*t25938;
  p_output1[41]=-0.325*t25593 - 1.*t25707*t26361 + t25593*t26408;
  p_output1[42]=-0.28;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 43, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_dh_FrFoot_ParallelStance.hh"

namespace ParallelStance
{

void J_dh_FrFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
