/*
 * Automatically Generated from Mathematica.
 * Thu 12 May 2022 11:33:20 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t10851;
  double t10738;
  double t10743;
  double t11000;
  double t10744;
  double t11001;
  double t11002;
  double t10188;
  double t11332;
  double t11362;
  double t11429;
  double t10310;
  double t11438;
  double t11451;
  double t11325;
  double t11439;
  double t11446;
  double t9180;
  double t11495;
  double t11520;
  double t11538;
  double t11539;
  double t11540;
  double t11546;
  double t11547;
  double t11548;
  double t11549;
  double t11723;
  double t11789;
  double t11797;
  double t12018;
  double t12019;
  double t12021;
  double t12040;
  double t12041;
  double t12044;
  double t12048;
  double t12049;
  double t12050;
  double t11992;
  double t12023;
  double t12052;
  double t12055;
  double t11945;
  double t11946;
  double t11947;
  double t11949;
  double t12056;
  double t12058;
  double t12075;
  double t12077;
  double t12083;
  double t12084;
  double t12094;
  double t12096;
  double t12097;
  double t12098;
  double t12104;
  double t12108;
  double t12112;
  double t12117;
  double t12135;
  double t12153;
  double t12160;
  double t12201;
  double t12225;
  double t12265;
  double t11847;
  double t11848;
  double t11852;
  double t11875;
  double t11924;
  double t11932;
  double t12191;
  double t12199;
  double t12200;
  double t12185;
  double t12186;
  double t12187;
  double t11845;
  double t11936;
  double t11938;
  double t12067;
  double t12172;
  double t12176;
  double t12303;
  double t12305;
  double t12310;
  double t12322;
  double t12323;
  double t12339;
  double t12439;
  double t12440;
  double t12441;
  double t12341;
  double t12416;
  double t12419;
  double t12420;
  double t12421;
  double t12460;
  double t12463;
  double t12464;
  double t12468;
  double t12476;
  double t12478;
  double t12481;
  double t12342;
  double t12343;
  double t12346;
  double t12483;
  double t12485;
  double t12423;
  double t12427;
  double t12428;
  double t12456;
  double t12471;
  double t12522;
  double t12523;
  double t12525;
  double t12529;
  double t12532;
  double t12629;
  double t12632;
  double t12634;
  double t12457;
  double t12458;
  double t12527;
  double t12533;
  double t12581;
  double t12587;
  double t12472;
  double t12473;
  double t12691;
  double t12700;
  double t12706;
  double t12712;
  double t12713;
  double t12721;
  double t12722;
  double t12723;
  double t12725;
  double t12726;
  double t12727;
  double t12732;
  double t12733;
  double t12734;
  double t12738;
  double t12739;
  double t12741;
  double t12519;
  double t12520;
  double t12768;
  double t12776;
  double t12780;
  double t12826;
  double t12827;
  double t12801;
  double t12802;
  double t12803;
  double t12805;
  double t12794;
  double t12825;
  double t12828;
  double t12864;
  double t12865;
  double t12866;
  double t12854;
  double t12855;
  double t12856;
  double t12860;
  double t12861;
  double t12862;
  double t12875;
  double t12876;
  double t12877;
  double t12869;
  double t12874;
  double t12881;
  double t12890;
  double t12891;
  double t12893;
  double t12901;
  double t12910;
  double t12912;
  double t12920;
  double t12921;
  double t12922;
  double t12970;
  double t12981;
  double t12982;
  double t12829;
  double t13009;
  double t13010;
  double t13011;
  double t13025;
  double t13026;
  double t13029;
  double t13035;
  double t13036;
  double t13038;
  double t13043;
  double t13044;
  double t13046;
  double t13004;
  double t13005;
  double t13001;
  double t13013;
  double t13078;
  double t13079;
  double t13080;
  double t13064;
  double t13065;
  double t13067;
  double t13081;
  double t13096;
  double t13113;
  double t13151;
  double t13154;
  double t13160;
  double t13192;
  double t13252;
  double t13260;
  double t13269;
  double t13270;
  double t13271;
  double t11633;
  double t11634;
  double t11637;
  double t12538;
  double t12544;
  double t12553;
  double t12275;
  double t12278;
  double t12284;
  double t13279;
  double t13281;
  double t12350;
  double t12351;
  double t12352;
  double t13088;
  double t13389;
  double t13419;
  double t13429;
  double t13371;
  double t13459;
  double t13461;
  double t13390;
  double t13391;
  double t13392;
  double t13452;
  double t13003;
  double t13007;
  double t12743;
  double t12744;
  double t12745;
  double t13495;
  double t13497;
  double t13449;
  double t13514;
  double t13519;
  double t13453;
  double t13455;
  double t13565;
  double t13573;
  double t12606;
  double t12607;
  double t12612;
  double t13584;
  double t13587;
  double t12751;
  double t12753;
  double t12754;
  double t13501;
  double t13503;
  double t13504;
  double t13527;
  double t13681;
  double t13692;
  double t13707;
  double t13705;
  double t13679;
  double t13693;
  double t13737;
  double t13741;
  double t13746;
  double t12933;
  double t12936;
  double t12941;
  double t13712;
  double t13713;
  double t13720;
  double t13721;
  double t13786;
  double t13787;
  double t13795;
  double t13807;
  double t13800;
  double t13802;
  double t13784;
  double t13788;
  double t13853;
  double t13867;
  double t13024;
  double t13030;
  double t13031;
  double t13875;
  double t13897;
  double t13350;
  double t13353;
  double t13354;
  double t12849;
  double t12851;
  double t12852;
  double t13916;
  double t13928;
  double t14128;
  double t13874;
  double t14258;
  double t14130;
  double t14131;
  double t14136;
  double t14267;
  double t14271;
  double t14150;
  double t14246;
  double t13785;
  double t14247;
  double t14248;
  double t14368;
  double t14382;
  double t12701;
  double t14388;
  double t14390;
  double t14274;
  double t14431;
  double t14435;
  double t14455;
  double t14463;
  double t14351;
  double t14352;
  double t14546;
  double t14589;
  double t14593;
  double t13340;
  double t13341;
  double t13306;
  double t13307;
  double t13308;
  double t14668;
  double t14677;
  double t14697;
  double t14700;
  double t14703;
  double t12839;
  double t12845;
  double t12846;
  double t14393;
  t10851 = Cos(var1[13]);
  t10738 = Cos(var1[14]);
  t10743 = Sin(var1[13]);
  t11000 = Sin(var1[14]);
  t10744 = t10738*t10743;
  t11001 = -1.*t10851*t11000;
  t11002 = t10744 + t11001;
  t10188 = Cos(var1[5]);
  t11332 = t10851*t10738;
  t11362 = t10743*t11000;
  t11429 = t11332 + t11362;
  t10310 = Sin(var1[12]);
  t11438 = Sin(var1[5]);
  t11451 = Cos(var1[3]);
  t11325 = -1.*t10188*t10310*t11002;
  t11439 = t11429*t11438;
  t11446 = t11325 + t11439;
  t9180 = Sin(var1[3]);
  t11495 = Cos(var1[12]);
  t11520 = Cos(var1[4]);
  t11538 = t11495*t11520*t11002;
  t11539 = Sin(var1[4]);
  t11540 = t10188*t11429;
  t11546 = t10310*t11002*t11438;
  t11547 = t11540 + t11546;
  t11548 = -1.*t11539*t11547;
  t11549 = t11538 + t11548;
  t11723 = -1.*t11495*t11002*t11539;
  t11789 = -1.*t11520*t11547;
  t11797 = t11723 + t11789;
  t12018 = -0.0641*t10738;
  t12019 = -0.28*t11000;
  t12021 = t12018 + t12019;
  t12040 = -1.*t10738;
  t12041 = 1. + t12040;
  t12044 = 0.075*t12041;
  t12048 = 0.355*t10738;
  t12049 = -0.0641*t11000;
  t12050 = t12044 + t12048 + t12049;
  t11992 = -0.325*t10743;
  t12023 = t10851*t12021;
  t12052 = t10743*t12050;
  t12055 = t11992 + t12023 + t12052;
  t11945 = t11520*t10310;
  t11946 = t11495*t11539*t11438;
  t11947 = t11945 + t11946;
  t11949 = -0.068*t10310;
  t12056 = t11495*t12055;
  t12058 = t11949 + t12056;
  t12075 = -1.*t10851;
  t12077 = 1. + t12075;
  t12083 = 0.325*t12077;
  t12084 = -1.*t10743*t12021;
  t12094 = t10851*t12050;
  t12096 = t12083 + t12084 + t12094;
  t12097 = t10188*t12096;
  t12098 = -1.*t11495;
  t12104 = 1. + t12098;
  t12108 = -0.1575*t12104;
  t12112 = -0.2255*t11495;
  t12117 = -1.*t10310*t12055;
  t12135 = t12108 + t12112 + t12117;
  t12153 = -1.*t12135*t11438;
  t12160 = t12097 + t12153;
  t12201 = t11520*t12058;
  t12225 = -1.*t11539*t12160;
  t12265 = t12201 + t12225;
  t11847 = -1.*t10738*t10743;
  t11848 = t10851*t11000;
  t11852 = t11847 + t11848;
  t11875 = t10188*t11852;
  t11924 = t10310*t11429*t11438;
  t11932 = t11875 + t11924;
  t12191 = t10310*t11539;
  t12199 = -1.*t11495*t11520*t11438;
  t12200 = t12191 + t12199;
  t12185 = t12058*t11539;
  t12186 = t11520*t12160;
  t12187 = t12185 + t12186;
  t11845 = t11495*t11429*t11539;
  t11936 = t11520*t11932;
  t11938 = t11845 + t11936;
  t12067 = -1.*t12058*t11539;
  t12172 = -1.*t11520*t12160;
  t12176 = t12067 + t12172;
  t12303 = t11495*t11520*t11429;
  t12305 = -1.*t11539*t11932;
  t12310 = t12303 + t12305;
  t12322 = t10188*t12135;
  t12323 = t12096*t11438;
  t12339 = t12322 + t12323;
  t12439 = t10188*t10310*t11002;
  t12440 = -1.*t11429*t11438;
  t12441 = t12439 + t12440;
  t12341 = -1.*t11495*t10188*t12339;
  t12416 = -1.*t10188*t10310*t11429;
  t12419 = t11852*t11438;
  t12420 = t12416 + t12419;
  t12421 = t12339*t12420;
  t12460 = -1.*t10188*t12135;
  t12463 = -1.*t12096*t11438;
  t12464 = t12460 + t12463;
  t12468 = t11495*t11438*t12339;
  t12476 = t10188*t10310*t11429;
  t12478 = -1.*t11852*t11438;
  t12481 = t12476 + t12478;
  t12342 = -1.*t12200*t12187;
  t12343 = -1.*t11947*t12265;
  t12346 = t12341 + t12342 + t12343;
  t12483 = t12160*t12420;
  t12485 = t12339*t11932;
  t12423 = t12187*t11938;
  t12427 = t12265*t12310;
  t12428 = t12421 + t12423 + t12427;
  t12456 = -1.*t10310*t12058;
  t12471 = t11495*t12058*t11429;
  t12522 = 0.068*t10310;
  t12523 = -1.*t11495*t12055;
  t12525 = t12522 + t12523;
  t12529 = -0.068*t11495;
  t12532 = t12529 + t12117;
  t12629 = -1.*t11520*t10310*t11002;
  t12632 = -1.*t11495*t11002*t11539*t11438;
  t12634 = t12629 + t12632;
  t12457 = t11495*t11438*t12160;
  t12458 = t12456 + t12457 + t12341;
  t12527 = -1.*t11495*t12058;
  t12533 = -1.*t10310*t12532;
  t12581 = -1.*t10310*t12058*t11429;
  t12587 = t11495*t12532*t11429;
  t12472 = t12160*t11932;
  t12473 = t12471 + t12421 + t12472;
  t12691 = Power(t10188,2);
  t12700 = -1.*t11495*t12691*t12525;
  t12706 = t10188*t10310*t12339;
  t12712 = -1.*t11495*t10188*t11429*t12339;
  t12713 = t10188*t12525*t12420;
  t12721 = -1.*t10310*t11429*t11539;
  t12722 = t11495*t11520*t11429*t11438;
  t12723 = t12721 + t12722;
  t12725 = t12532*t11539;
  t12726 = -1.*t11520*t12525*t11438;
  t12727 = t12725 + t12726;
  t12732 = t11520*t12532;
  t12733 = t12525*t11539*t11438;
  t12734 = t12732 + t12733;
  t12738 = t11495*t11539;
  t12739 = t11520*t10310*t11438;
  t12741 = t12738 + t12739;
  t12519 = -1.*t11495*t12135;
  t12520 = t12456 + t12519;
  t12768 = -1.*t10851*t10738;
  t12776 = -1.*t10743*t11000;
  t12780 = t12768 + t12776;
  t12826 = -0.325*t10851;
  t12827 = t12826 + t12084 + t12094;
  t12801 = 0.325*t10743;
  t12802 = -1.*t10851*t12021;
  t12803 = -1.*t10743*t12050;
  t12805 = t12801 + t12802 + t12803;
  t12794 = t11495*t12058*t11852;
  t12825 = Power(t11495,2);
  t12828 = t12825*t12827*t11429;
  t12864 = -1.*t10188*t10310*t12827;
  t12865 = t12805*t11438;
  t12866 = t12864 + t12865;
  t12854 = -1.*t10188*t10310*t11852;
  t12855 = t12780*t11438;
  t12856 = t12854 + t12855;
  t12860 = t10188*t12805;
  t12861 = t10310*t12827*t11438;
  t12862 = t12860 + t12861;
  t12875 = t10188*t12780;
  t12876 = t10310*t11852*t11438;
  t12877 = t12875 + t12876;
  t12869 = -1.*t11495*t10188*t12866;
  t12874 = t12866*t12420;
  t12881 = t12339*t12856;
  t12890 = t11495*t11852*t11539;
  t12891 = t11520*t12877;
  t12893 = t12890 + t12891;
  t12901 = t11495*t12827*t11539;
  t12910 = t11520*t12862;
  t12912 = t12901 + t12910;
  t12920 = t11495*t11520*t12827;
  t12921 = -1.*t11539*t12862;
  t12922 = t12920 + t12921;
  t12970 = -0.28*t10738;
  t12981 = 0.0641*t11000;
  t12982 = t12970 + t12981;
  t12829 = Power(t10310,2);
  t13009 = t10743*t12021;
  t13010 = t10851*t12982;
  t13011 = t13009 + t13010;
  t13025 = t10188*t11002;
  t13026 = t10310*t12780*t11438;
  t13029 = t13025 + t13026;
  t13035 = -1.*t10188*t10310*t12780;
  t13036 = t11002*t11438;
  t13038 = t13035 + t13036;
  t13043 = t11495*t11520*t12780;
  t13044 = -1.*t11539*t13029;
  t13046 = t13043 + t13044;
  t13004 = -1.*t10743*t12982;
  t13005 = t12023 + t13004;
  t13001 = t11495*t12058*t11002;
  t13013 = t12825*t13011*t11429;
  t13078 = -1.*t10188*t10310*t13011;
  t13079 = t13005*t11438;
  t13080 = t13078 + t13079;
  t13064 = t10188*t13005;
  t13065 = t10310*t13011*t11438;
  t13067 = t13064 + t13065;
  t13081 = -1.*t11495*t10188*t13080;
  t13096 = t13080*t12420;
  t13113 = t12339*t11446;
  t13151 = t11495*t11002*t11539;
  t13154 = t11520*t11547;
  t13160 = t13151 + t13154;
  t13192 = t11495*t13011*t11539;
  t13252 = t11520*t13067;
  t13260 = t13192 + t13252;
  t13269 = t11495*t11520*t13011;
  t13270 = -1.*t11539*t13067;
  t13271 = t13269 + t13270;
  t11633 = t11451*t11446;
  t11634 = -1.*t9180*t11549;
  t11637 = t11633 + t11634;
  t12538 = t12096*t11852;
  t12544 = -1.*t10310*t12135*t11429;
  t12553 = t12538 + t12471 + t12544;
  t12275 = -1.*t10310*t11539;
  t12278 = t11495*t11520*t11438;
  t12284 = t12275 + t12278;
  t13279 = t12187*t13160;
  t13281 = t12265*t11549;
  t12350 = -1.*t11495*t11429*t11539;
  t12351 = -1.*t11520*t11932;
  t12352 = t12350 + t12351;
  t13088 = t12160*t11547;
  t13389 = -1.*t12339*t12420;
  t13419 = t12339*t11547;
  t13429 = t12160*t11446;
  t13371 = t13113 + t13279 + t13281;
  t13459 = -1.*t12160*t12420;
  t13461 = -1.*t12339*t11932;
  t13390 = -1.*t12187*t11938;
  t13391 = -1.*t12265*t12310;
  t13392 = t13389 + t13390 + t13391;
  t13452 = -1.*t11495*t12058*t11429;
  t13003 = -1.*t10310*t12135*t11002;
  t13007 = t12096*t11429;
  t12743 = t11495*t11520;
  t12744 = -1.*t10310*t11539*t11438;
  t12745 = t12743 + t12744;
  t13495 = -1.*t10310*t12058*t11002;
  t13497 = t11495*t12532*t11002;
  t13449 = t13001 + t13088 + t13113;
  t13514 = t10310*t12058*t11429;
  t13519 = -1.*t11495*t12532*t11429;
  t13453 = -1.*t12160*t11932;
  t13455 = t13452 + t13389 + t13453;
  t13565 = -1.*t11495*t10188*t11002*t12339;
  t13573 = t10188*t12525*t11446;
  t12606 = -1.*t10310*t11002*t11539;
  t12607 = t11495*t11520*t11002*t11438;
  t12612 = t12606 + t12607;
  t13584 = t11495*t10188*t11429*t12339;
  t13587 = -1.*t10188*t12525*t12420;
  t12751 = -1.*t11520*t10310*t11429;
  t12753 = -1.*t11495*t11429*t11539*t11438;
  t12754 = t12751 + t12753;
  t13501 = -1.*t12096*t11852;
  t13503 = t10310*t12135*t11429;
  t13504 = t13501 + t13452 + t13503;
  t13527 = t13001 + t13003 + t13007;
  t13681 = -1.*t12805*t11852;
  t13692 = -1.*t12096*t12780;
  t13707 = t12805*t11429;
  t13705 = t12825*t12827*t11002;
  t13679 = -1.*t11495*t12058*t11852;
  t13693 = -1.*t12825*t12827*t11429;
  t13737 = t12866*t11446;
  t13741 = -1.*t12866*t12420;
  t13746 = -1.*t12339*t12856;
  t12933 = t11495*t11520*t11852;
  t12936 = -1.*t11539*t12877;
  t12941 = t12933 + t12936;
  t13712 = t12055*t11002;
  t13713 = t13712 + t13007;
  t13720 = -1.*t12055*t11429;
  t13721 = t13501 + t13720;
  t13786 = -1.*t13005*t11852;
  t13787 = -1.*t12096*t11429;
  t13795 = t12096*t11002;
  t13807 = t13005*t11429;
  t13800 = t12825*t13011*t11002;
  t13802 = t11495*t12058*t12780;
  t13784 = -1.*t11495*t12058*t11002;
  t13788 = -1.*t12825*t13011*t11429;
  t13853 = t12339*t13038;
  t13867 = t13080*t11446;
  t13024 = t11495*t12780*t11539;
  t13030 = t11520*t13029;
  t13031 = t13024 + t13030;
  t13875 = -1.*t13080*t12420;
  t13897 = -1.*t12339*t11446;
  t13350 = t11495*t11451*t10188;
  t13353 = -1.*t9180*t11947;
  t13354 = t13350 + t13353;
  t12849 = t11451*t12420;
  t12851 = -1.*t9180*t12310;
  t12852 = t12849 + t12851;
  t13916 = -1.*t12187*t13160;
  t13928 = -1.*t12265*t11549;
  t14128 = t11495*t10188*t12339;
  t13874 = -1.*t12160*t11547;
  t14258 = -1.*t11495*t11438*t12339;
  t14130 = t12200*t12187;
  t14131 = t11947*t12265;
  t14136 = t14128 + t14130 + t14131;
  t14267 = -1.*t12339*t11547;
  t14271 = -1.*t12160*t11446;
  t14150 = t13897 + t13916 + t13928;
  t14246 = t10310*t12058;
  t13785 = t10310*t12135*t11002;
  t14247 = -1.*t11495*t11438*t12160;
  t14248 = t14246 + t14247 + t14128;
  t14368 = t11495*t12058;
  t14382 = t10310*t12532;
  t12701 = Power(t11438,2);
  t14388 = t10310*t12058*t11002;
  t14390 = -1.*t11495*t12532*t11002;
  t14274 = t13784 + t13874 + t13897;
  t14431 = t11495*t12691*t12525;
  t14435 = -1.*t10188*t10310*t12339;
  t14455 = t11495*t10188*t11002*t12339;
  t14463 = -1.*t10188*t12525*t11446;
  t14351 = t11495*t12135;
  t14352 = t14246 + t14351;
  t14546 = -1.*t12825*t12827*t11002;
  t14589 = t11495*t10188*t12866;
  t14593 = -1.*t12866*t11446;
  t13340 = 0.325*t11000;
  t13341 = -1.*t12050*t11000;
  t13306 = t9180*t11446;
  t13307 = t11451*t11549;
  t13308 = t13306 + t13307;
  t14668 = -1.*t12825*t13011*t11002;
  t14677 = -1.*t11495*t12058*t12780;
  t14697 = t11495*t10188*t13080;
  t14700 = -1.*t12339*t13038;
  t14703 = -1.*t13080*t11446;
  t12839 = t9180*t12420;
  t12845 = t11451*t12310;
  t12846 = t12839 + t12845;
  t14393 = t13784 + t13785 + t13787;
  p_output1[0]=(-1.*t11451*t11549 - 1.*t11446*t9180)*var2[1] + t11637*var2[2];
  p_output1[1]=t11549*var2[0] - 1.*t11797*t9180*var2[1] + t11451*t11797*var2[2] + (t11938*(-1.*t11947*t12176 - 1.*t11947*t12187 - 1.*t12200*t12265 - 1.*t12265*t12284) + t12310*t12346 + t12200*(t11938*t12265 + t12176*t12310 + t12187*t12310 + t12265*t12352) + t11947*t12428)*var2[3];
  p_output1[2]=t11520*t12441*var2[0] + (t11451*t11547 + t11539*t12441*t9180)*var2[1] + (-1.*t11451*t11539*t12441 + t11547*t9180)*var2[2] + (-1.*t10188*t11495*t11520*t12428 + t11938*(-1.*t10188*t11495*t12160 + t10188*t11495*t11520*t12187 - 1.*t10188*t11495*t11539*t12265 + t11539*t11947*t12464 - 1.*t11520*t12200*t12464 + t12468) + t11520*t12346*t12481 + t12200*(t11520*t11938*t12464 - 1.*t11539*t12310*t12464 + t11520*t12187*t12481 - 1.*t11539*t12265*t12481 + t12483 + t12485))*var2[3] + (t11932*t12458 + t12420*(t11438*t11495*t12464 + t12468) - 1.*t11438*t11495*t12473 + t10188*t11495*(t11932*t12464 + t12160*t12481 + t12483 + t12485))*var2[4];
  p_output1[3]=t12612*var2[0] + (-1.*t10188*t11002*t11451*t11495 - 1.*t12634*t9180)*var2[1] + (t11451*t12634 - 1.*t10188*t11002*t11495*t9180)*var2[2] + (t12346*t12723 + t12428*t12741 + t11938*(t12700 + t12706 - 1.*t12200*t12727 - 1.*t11947*t12734 - 1.*t12187*t12741 - 1.*t12265*t12745) + t12200*(t12712 + t12713 + t12187*t12723 + t11938*t12727 + t12310*t12734 + t12265*t12754))*var2[3] + (-1.*t10188*t11429*t11495*t12458 - 1.*t10188*t10310*t12473 + t12420*(-1.*t10310*t11438*t12160 + t12527 + t12533 + t12700 - 1.*t11495*t12525*t12701 + t12706) + t10188*t11495*(t11429*t11438*t11495*t12160 - 1.*t11438*t11932*t12525 + t12581 + t12587 + t12712 + t12713))*var2[4] + (-1.*t10310*t11429*t12520 + t11429*t11495*(t10310*t12135 - 1.*t11495*t12525 + t12527 + t12533) + t11495*t12553 + t10310*(-1.*t11429*t11495*t12135 - 1.*t10310*t11429*t12525 + t12581 + t12587))*var2[5];
  p_output1[4]=t11938*var2[0] + t12852*var2[1] + t12846*var2[2] + (t12346*t12893 + t11938*(t12869 - 1.*t12200*t12912 - 1.*t11947*t12922) + t12200*(t12874 + t12881 + t12187*t12893 + t11938*t12912 + t12310*t12922 + t12265*t12941))*var2[3] + (t12458*t12856 + t12420*(-1.*t10310*t11495*t12827 + t11438*t11495*t12862 + t12869) + t10188*t11495*(t12794 + t12828 + t11932*t12862 + t12874 + t12160*t12877 + t12881))*var2[4] + (t11495*t11852*t12520 + t10310*(-1.*t10310*t11852*t12135 + t12096*t12780 + t12794 + t11852*t12805 + t12828 + t11429*t12827*t12829))*var2[5] + (0.1575*t11429 + 0.2255*t12780)*var2[12];
  p_output1[5]=t13031*var2[0] + (t11451*t13038 - 1.*t13046*t9180)*var2[1] + (t11451*t13046 + t13038*t9180)*var2[2] + (t12346*t13160 + t11938*(t13081 - 1.*t12200*t13260 - 1.*t11947*t13271) + t12200*(t13096 + t13113 + t11938*t13260 + t12310*t13271 + t13279 + t13281))*var2[3] + (t11446*t12458 + t12420*(-1.*t10310*t11495*t13011 + t11438*t11495*t13067 + t13081) + t10188*t11495*(t13001 + t13013 + t11932*t13067 + t13088 + t13096 + t13113))*var2[4] + (t11002*t11495*t12520 + t10310*(t13001 + t13003 + t11852*t13005 + t13007 + t11429*t12829*t13011 + t13013))*var2[5] + (0.2255*t11429 + 0.1575*t12780)*var2[12] + (0.325*t10738 - 1.*t10738*t12050 - 1.*t10738*t12982)*var2[13];
  p_output1[6]=t13160;
  p_output1[7]=t11637;
  p_output1[8]=t13308;
  p_output1[9]=t11938*t12346 + t12200*t12428;
  p_output1[10]=t12420*t12458 + t10188*t11495*t12473;
  p_output1[11]=t11429*t11495*t12520 + t10310*t12553;
  p_output1[12]=0.1575*t11002 + 0.2255*t11852;
  p_output1[13]=-1.*t10738*t12021 + t13340 + t13341;
  p_output1[14]=-0.0641;
  p_output1[15]=(-1.*t11451*t11947 - 1.*t10188*t11495*t9180)*var2[1] + t13354*var2[2];
  p_output1[16]=t11947*var2[0] - 1.*t12284*t9180*var2[1] + t11451*t12284*var2[2] + ((-1.*t11938*t12265 - 1.*t12176*t12310 - 1.*t12187*t12310 - 1.*t12265*t12352)*t13160 + t11938*(t11549*t12176 + t11549*t12187 + t11797*t12265 + t12265*t13160) + t12310*t13371 + t11549*t13392)*var2[3];
  p_output1[17]=-1.*t10188*t11495*t11520*var2[0] + (-1.*t11438*t11451*t11495 - 1.*t10188*t11495*t11539*t9180)*var2[1] + (t10188*t11451*t11495*t11539 - 1.*t11438*t11495*t9180)*var2[2] + (t11520*t12481*t13371 + t11520*t12441*t13392 + t11938*(t11520*t12187*t12441 - 1.*t11539*t12265*t12441 - 1.*t11539*t11549*t12464 + t11520*t12464*t13160 + t13419 + t13429) + t13160*(-1.*t11520*t11938*t12464 + t11539*t12310*t12464 - 1.*t11520*t12187*t12481 + t11539*t12265*t12481 + t13459 + t13461))*var2[3] + (t12420*(t12160*t12441 + t11547*t12464 + t13419 + t13429) + t11932*t13449 + t11547*t13455 + t11446*(-1.*t11932*t12464 - 1.*t12160*t12481 + t13459 + t13461))*var2[4];
  p_output1[18]=t12741*var2[0] + (-1.*t10188*t10310*t11451 - 1.*t12745*t9180)*var2[1] + (t11451*t12745 - 1.*t10188*t10310*t9180)*var2[2] + (t12723*t13371 + t12612*t13392 + t11938*(t12187*t12612 + t12265*t12634 + t11549*t12734 + t12727*t13160 + t13565 + t13573) + t13160*(-1.*t12187*t12723 - 1.*t11938*t12727 - 1.*t12310*t12734 - 1.*t12265*t12754 + t13584 + t13587))*var2[3] + (-1.*t10188*t11429*t11495*t13449 - 1.*t10188*t11002*t11495*t13455 + t12420*(t11002*t11438*t11495*t12160 - 1.*t11438*t11547*t12525 + t13495 + t13497 + t13565 + t13573) + t11446*(-1.*t11429*t11438*t11495*t12160 + t11438*t11932*t12525 + t13514 + t13519 + t13584 + t13587))*var2[4] + (t11429*t11495*(-1.*t11002*t11495*t12135 - 1.*t10310*t11002*t12525 + t13495 + t13497) - 1.*t10310*t11002*t13504 + t11002*t11495*(t11429*t11495*t12135 + t10310*t11429*t12525 + t13514 + t13519) - 1.*t10310*t11429*t13527)*var2[5];
  p_output1[19]=(t12893*t13371 + t11938*t13392 + t11938*(t12421 + t12423 + t12427 + t11549*t12922 + t12912*t13160 + t13737) + t13160*(-1.*t12187*t12893 - 1.*t11938*t12912 - 1.*t12310*t12922 - 1.*t12265*t12941 + t13741 + t13746))*var2[3] + (t12856*t13449 + t12420*t13455 + t12420*(t12421 + t12471 + t12472 + t11547*t12862 + t13705 + t13737) + t11446*(-1.*t11932*t12862 - 1.*t12160*t12877 + t13679 + t13693 + t13741 + t13746))*var2[4] + (t11429*t11495*t13504 + t11495*t11852*t13527 + t11002*t11495*(t10310*t11852*t12135 - 1.*t11429*t12827*t12829 + t13679 + t13681 + t13692 + t13693) + t11429*t11495*(t12471 + t12538 + t12544 + t11002*t12827*t12829 + t13705 + t13707))*var2[5] + (t11429*(-1.*t11852*t12055 - 1.*t11429*t12827 + t13681 + t13692) + t11852*(t11429*t12055 + t12538 + t11002*t12827 + t13707) + t12780*t13713 + t11852*t13721)*var2[12];
  p_output1[20]=(t13160*t13371 + t13031*t13392 + t11938*(t12187*t13031 + t12265*t13046 + t13160*t13260 + t11549*t13271 + t13853 + t13867) + t13160*(-1.*t11938*t13260 - 1.*t12310*t13271 + t13875 + t13897 + t13916 + t13928))*var2[3] + (t11446*t13449 + t13038*t13455 + t12420*(t12160*t13029 + t11547*t13067 + t13800 + t13802 + t13853 + t13867) + t11446*(-1.*t11932*t13067 + t13784 + t13788 + t13874 + t13875 + t13897))*var2[4] + (t11495*t12780*t13504 + t11002*t11495*t13527 + t11002*t11495*(-1.*t11429*t12829*t13011 + t13784 + t13785 + t13786 + t13787 + t13788) + t11429*t11495*(-1.*t10310*t12135*t12780 + t11002*t12829*t13011 + t13795 + t13800 + t13802 + t13807))*var2[5] + (t11429*t13713 + t11002*t13721 + t11429*(-1.*t11002*t12055 - 1.*t11429*t13011 + t13786 + t13787) + t11852*(t12055*t12780 + t11002*t13011 + t13795 + t13807))*var2[12];
  p_output1[21]=t12200;
  p_output1[22]=t13354;
  p_output1[23]=t11451*t11947 + t10188*t11495*t9180;
  p_output1[24]=t11938*t13371 + t13160*t13392;
  p_output1[25]=t12420*t13449 + t11446*t13455;
  p_output1[26]=t11002*t11495*t13504 + t11429*t11495*t13527;
  p_output1[27]=t11852*t13713 + t11429*t13721;
  p_output1[28]=(-1.*t11451*t12310 - 1.*t12420*t9180)*var2[1] + t12852*var2[2];
  p_output1[29]=t12310*var2[0] - 1.*t12352*t9180*var2[1] + t11451*t12352*var2[2] + ((t11947*t12176 + t11947*t12187 + t12200*t12265 + t12265*t12284)*t13160 + t12200*(-1.*t11549*t12176 - 1.*t11549*t12187 - 1.*t11797*t12265 - 1.*t12265*t13160) + t11549*t14136 + t11947*t14150)*var2[3];
  p_output1[30]=t11520*t12481*var2[0] + (t11451*t11932 + t11539*t12481*t9180)*var2[1] + (-1.*t11451*t11539*t12481 + t11932*t9180)*var2[2] + (t11520*t12441*t14136 - 1.*t10188*t11495*t11520*t14150 + t13160*(t10188*t11495*t12160 - 1.*t10188*t11495*t11520*t12187 + t10188*t11495*t11539*t12265 - 1.*t11539*t11947*t12464 + t11520*t12200*t12464 + t14258) + t12200*(-1.*t11520*t12187*t12441 + t11539*t12265*t12441 + t11539*t11549*t12464 - 1.*t11520*t12464*t13160 + t14267 + t14271))*var2[3] + (t11547*t14248 + t11446*(-1.*t11438*t11495*t12464 + t14258) + t10188*t11495*(-1.*t12160*t12441 - 1.*t11547*t12464 + t14267 + t14271) - 1.*t11438*t11495*t14274)*var2[4];
  p_output1[31]=t12723*var2[0] + (-1.*t10188*t11429*t11451*t11495 - 1.*t12754*t9180)*var2[1] + (t11451*t12754 - 1.*t10188*t11429*t11495*t9180)*var2[2] + (t12612*t14136 + t12741*t14150 + t13160*(t12200*t12727 + t11947*t12734 + t12187*t12741 + t12265*t12745 + t14431 + t14435) + t12200*(-1.*t12187*t12612 - 1.*t12265*t12634 - 1.*t11549*t12734 - 1.*t12727*t13160 + t14455 + t14463))*var2[3] + (-1.*t10188*t11002*t11495*t14248 - 1.*t10188*t10310*t14274 + t11446*(t10310*t11438*t12160 + t11495*t12525*t12701 + t14368 + t14382 + t14431 + t14435) + t10188*t11495*(-1.*t11002*t11438*t11495*t12160 + t11438*t11547*t12525 + t14388 + t14390 + t14455 + t14463))*var2[4] + (-1.*t10310*t11002*t14352 + t11002*t11495*(-1.*t10310*t12135 + t11495*t12525 + t14368 + t14382) + t10310*(t11002*t11495*t12135 + t10310*t11002*t12525 + t14388 + t14390) + t11495*t14393)*var2[5];
  p_output1[32]=t12893*var2[0] + (t11451*t12856 - 1.*t12941*t9180)*var2[1] + (t11451*t12941 + t12856*t9180)*var2[2] + (t11938*t14136 + t13160*(t12200*t12912 + t11947*t12922 + t14589) + t12200*(-1.*t11549*t12922 - 1.*t12912*t13160 + t13389 + t13390 + t13391 + t14593))*var2[3] + (t12420*t14248 + t11446*(t10310*t11495*t12827 - 1.*t11438*t11495*t12862 + t14589) + t10188*t11495*(-1.*t11547*t12862 + t13389 + t13452 + t13453 + t14546 + t14593))*var2[4] + (t11429*t11495*t14352 + t10310*(-1.*t11429*t12805 - 1.*t11002*t12827*t12829 + t13452 + t13501 + t13503 + t14546))*var2[5] - 0.068*t11852*var2[12];
  p_output1[33]=t13160*var2[0] + t11637*var2[1] + t13308*var2[2] + (t13031*t14136 + t13160*(t12200*t13260 + t11947*t13271 + t14697) + t12200*(-1.*t12187*t13031 - 1.*t12265*t13046 - 1.*t13160*t13260 - 1.*t11549*t13271 + t14700 + t14703))*var2[3] + (t13038*t14248 + t11446*(t10310*t11495*t13011 - 1.*t11438*t11495*t13067 + t14697) + t10188*t11495*(-1.*t12160*t13029 - 1.*t11547*t13067 + t14668 + t14677 + t14700 + t14703))*var2[4] + (t11495*t12780*t14352 + t10310*(-1.*t11002*t12096 + t10310*t12135*t12780 - 1.*t11429*t13005 - 1.*t11002*t12829*t13011 + t14668 + t14677))*var2[5] - 0.068*t11002*var2[12] + (-1.*t11000*t12982 + t13340 + t13341)*var2[13];
  p_output1[34]=t11938;
  p_output1[35]=t12852;
  p_output1[36]=t12846;
  p_output1[37]=t13160*t14136 + t12200*t14150;
  p_output1[38]=t11446*t14248 + t10188*t11495*t14274;
  p_output1[39]=t11002*t11495*t14352 + t10310*t14393;
  p_output1[40]=-0.068*t11429;
  p_output1[41]=-0.325*t10738 - 1.*t11000*t12021 + t10738*t12050;
  p_output1[42]=-0.28;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 43, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_dh_FrFoot_ParallelStance.hh"

namespace ParallelStance
{

void J_dh_FrFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
