/*
 * Automatically Generated from Mathematica.
 * Tue 7 Jun 2022 14:07:45 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t7248;
  double t10291;
  double t10087;
  double t10543;
  double t10564;
  double t10565;
  double t10568;
  double t10657;
  double t10712;
  double t10731;
  double t10740;
  double t10741;
  double t10743;
  double t10747;
  double t10777;
  double t4550;
  double t10780;
  double t10797;
  double t10802;
  double t10805;
  double t10809;
  double t10814;
  double t10820;
  double t10822;
  double t10823;
  double t10828;
  double t10853;
  double t10852;
  double t10879;
  double t10886;
  double t10907;
  double t10918;
  double t4551;
  double t4624;
  double t10870;
  double t10919;
  double t10921;
  double t10992;
  double t10995;
  double t11004;
  double t10943;
  double t10946;
  double t10967;
  double t10969;
  double t10979;
  double t10985;
  double t10927;
  double t10987;
  double t10988;
  double t11047;
  double t11048;
  double t11056;
  double t11060;
  double t11061;
  double t11069;
  double t11099;
  double t11175;
  double t11277;
  double t11319;
  double t11338;
  double t4779;
  double t11357;
  double t11361;
  double t7125;
  double t11394;
  double t11403;
  double t11404;
  double t11457;
  double t11464;
  double t11488;
  double t11489;
  double t11491;
  double t11495;
  double t11408;
  double t11411;
  double t11416;
  double t11435;
  double t11437;
  double t11442;
  double t11554;
  double t11559;
  double t11561;
  double t11565;
  double t11569;
  double t11570;
  double t11577;
  double t11604;
  double t11605;
  double t11606;
  double t11608;
  double t11656;
  double t11657;
  double t11698;
  double t12101;
  double t12116;
  double t12120;
  double t11719;
  double t11736;
  double t11759;
  double t11915;
  double t11941;
  double t12065;
  double t12078;
  double t12151;
  double t12162;
  double t12163;
  double t12167;
  double t12168;
  double t12171;
  double t12200;
  double t12211;
  double t12221;
  double t12228;
  double t12230;
  double t11363;
  double t11379;
  double t11380;
  double t12294;
  double t12298;
  double t12304;
  double t12270;
  double t12271;
  double t12293;
  double t12385;
  double t12536;
  double t12540;
  double t12306;
  double t12307;
  double t12328;
  double t12329;
  double t12541;
  double t12578;
  double t12590;
  double t12709;
  double t12739;
  double t12743;
  double t12744;
  double t12745;
  double t12746;
  double t12747;
  double t12748;
  double t12763;
  double t12787;
  double t12803;
  double t12854;
  double t12858;
  double t12859;
  double t12861;
  double t12874;
  double t12875;
  double t12876;
  double t12878;
  double t12881;
  double t13036;
  double t13045;
  double t13046;
  double t13089;
  double t13091;
  double t13248;
  double t13291;
  double t13337;
  double t13059;
  double t13097;
  double t13120;
  double t13126;
  double t13351;
  double t13352;
  double t13356;
  double t13365;
  double t13366;
  double t13435;
  double t13438;
  double t13439;
  double t13442;
  double t13444;
  double t13445;
  double t13451;
  double t13453;
  double t13456;
  double t13501;
  double t13502;
  double t13506;
  double t13518;
  double t13519;
  double t13523;
  double t13582;
  double t13583;
  double t13597;
  double t13631;
  double t13632;
  double t13623;
  double t13624;
  double t13625;
  double t13626;
  double t13621;
  double t13630;
  double t13633;
  double t13697;
  double t13698;
  double t13700;
  double t13671;
  double t13672;
  double t13673;
  double t13688;
  double t13690;
  double t13693;
  double t13720;
  double t13721;
  double t13725;
  double t13701;
  double t13717;
  double t13730;
  double t13743;
  double t13744;
  double t13745;
  double t13747;
  double t13748;
  double t13749;
  double t13753;
  double t13754;
  double t13757;
  double t13793;
  double t13794;
  double t13796;
  double t13634;
  double t13867;
  double t13868;
  double t13869;
  double t13878;
  double t13879;
  double t13880;
  double t13884;
  double t13885;
  double t13888;
  double t13895;
  double t13898;
  double t13899;
  double t13809;
  double t13810;
  double t13807;
  double t13870;
  double t13919;
  double t13920;
  double t13921;
  double t13913;
  double t13914;
  double t13916;
  double t13922;
  double t13926;
  double t13927;
  double t13938;
  double t13939;
  double t13940;
  double t13945;
  double t13946;
  double t13948;
  double t13808;
  double t13839;
  double t13966;
  double t13970;
  double t13977;
  double t13981;
  double t13982;
  double t13984;
  double t13985;
  double t13987;
  double t13999;
  double t14001;
  double t14002;
  double t14013;
  double t14014;
  double t14016;
  double t14017;
  double t14110;
  double t14112;
  double t14114;
  double t14118;
  double t14119;
  double t14120;
  double t14101;
  double t14106;
  double t14107;
  double t13925;
  double t14138;
  double t14139;
  double t14140;
  double t14141;
  double t14142;
  double t14143;
  double t14144;
  double t14033;
  double t14044;
  double t14060;
  double t14130;
  double t14133;
  double t14134;
  double t13952;
  double t13953;
  double t14165;
  double t14166;
  double t14167;
  double t14172;
  double t14173;
  double t14174;
  double t14179;
  double t14154;
  double t14155;
  double t14156;
  double t14158;
  double t14159;
  double t14161;
  double t13461;
  double t13462;
  double t13463;
  double t14203;
  double t14205;
  double t14213;
  double t14215;
  double t14247;
  double t14249;
  double t13161;
  double t13165;
  double t13219;
  double t14257;
  double t14258;
  double t13475;
  double t13479;
  double t13480;
  double t14351;
  double t14353;
  double t14361;
  double t14364;
  double t13529;
  double t13531;
  double t13535;
  double t13543;
  double t13545;
  double t13546;
  double t14548;
  double t14554;
  double t14758;
  double t14739;
  double t14474;
  double t14561;
  double t15941;
  double t15952;
  double t15956;
  double t13769;
  double t13772;
  double t13775;
  double t16340;
  double t16341;
  double t16346;
  double t16351;
  double t16347;
  double t16349;
  double t16334;
  double t16342;
  double t16372;
  double t16375;
  double t13877;
  double t13881;
  double t13882;
  double t16380;
  double t16381;
  double t17489;
  double t17508;
  double t17598;
  double t17672;
  double t16339;
  double t17806;
  double t17810;
  double t17838;
  double t17858;
  double t17893;
  double t17953;
  double t18011;
  double t13640;
  double t18119;
  double t18122;
  double t18124;
  double t16379;
  double t18798;
  double t18802;
  double t18803;
  double t18807;
  double t18810;
  double t18811;
  double t18813;
  double t13641;
  double t13643;
  double t13652;
  double t13653;
  double t13654;
  double t13660;
  double t13665;
  double t13668;
  double t18070;
  double t18080;
  double t18112;
  double t18163;
  double t18168;
  double t18304;
  double t16443;
  double t16670;
  double t18866;
  double t18867;
  double t18868;
  double t18869;
  double t18872;
  double t18873;
  double t18875;
  double t18821;
  double t18823;
  double t18825;
  double t18827;
  double t18828;
  double t18830;
  double t18939;
  double t18945;
  double t18950;
  double t19154;
  double t19177;
  double t13353;
  double t19203;
  double t19205;
  double t19255;
  double t19260;
  double t19285;
  double t19288;
  double t11517;
  double t11620;
  double t11709;
  double t19364;
  double t19367;
  double t19378;
  double t19381;
  double t19384;
  double t19407;
  double t19427;
  double t19431;
  t7248 = Cos(var1[14]);
  t10291 = Sin(var1[14]);
  t10087 = -0.0641*t7248;
  t10543 = -0.28*t10291;
  t10564 = t10087 + t10543;
  t10565 = -1.*t7248*t10564;
  t10568 = 0.325*t10291;
  t10657 = -1.*t7248;
  t10712 = 1. + t10657;
  t10731 = 0.075*t10712;
  t10740 = 0.355*t7248;
  t10741 = -0.0641*t10291;
  t10743 = t10731 + t10740 + t10741;
  t10747 = -1.*t10743*t10291;
  t10777 = t10565 + t10568 + t10747;
  t4550 = Cos(var1[13]);
  t10780 = Sin(var1[13]);
  t10797 = t7248*t10780;
  t10802 = -1.*t4550*t10291;
  t10805 = t10797 + t10802;
  t10809 = 0.1575*t10805;
  t10814 = -1.*t7248*t10780;
  t10820 = t4550*t10291;
  t10822 = t10814 + t10820;
  t10823 = 0.2255*t10822;
  t10828 = t10809 + t10823;
  t10853 = Sin(var1[12]);
  t10852 = Cos(var1[12]);
  t10879 = -0.325*t10780;
  t10886 = t4550*t10564;
  t10907 = t10780*t10743;
  t10918 = t10879 + t10886 + t10907;
  t4551 = -1.*t4550;
  t4624 = 1. + t4551;
  t10870 = -0.068*t10853;
  t10919 = t10852*t10918;
  t10921 = t10870 + t10919;
  t10992 = t4550*t7248;
  t10995 = t10780*t10291;
  t11004 = t10992 + t10995;
  t10943 = -1.*t10852;
  t10946 = 1. + t10943;
  t10967 = -0.1575*t10946;
  t10969 = -0.2255*t10852;
  t10979 = -1.*t10853*t10918;
  t10985 = t10967 + t10969 + t10979;
  t10927 = -1.*t10853*t10921;
  t10987 = -1.*t10852*t10985;
  t10988 = t10927 + t10987;
  t11047 = t10852*t10988*t11004;
  t11048 = 0.325*t4624;
  t11056 = -1.*t10780*t10564;
  t11060 = t4550*t10743;
  t11061 = t11048 + t11056 + t11060;
  t11069 = t11061*t10822;
  t11099 = t10852*t10921*t11004;
  t11175 = -1.*t10853*t10985*t11004;
  t11277 = t11069 + t11099 + t11175;
  t11319 = t10853*t11277;
  t11338 = t11047 + t11319;
  t4779 = Cos(var1[4]);
  t11357 = Sin(var1[4]);
  t11361 = Sin(var1[5]);
  t7125 = Cos(var1[5]);
  t11394 = t10852*t11357;
  t11403 = t4779*t10853*t11361;
  t11404 = t11394 + t11403;
  t11457 = t10852*t10805*t11357;
  t11464 = t7125*t11004;
  t11488 = t10853*t10805*t11361;
  t11489 = t11464 + t11488;
  t11491 = t4779*t11489;
  t11495 = t11457 + t11491;
  t11408 = -1.*t4779*t7125*t10780;
  t11411 = t4550*t11404;
  t11416 = t11408 + t11411;
  t11435 = t4550*t4779*t7125;
  t11437 = t10780*t11404;
  t11442 = t11435 + t11437;
  t11554 = Sin(var1[3]);
  t11559 = -1.*t7125*t10853*t10805;
  t11561 = t11004*t11361;
  t11565 = t11559 + t11561;
  t11569 = t11554*t11565;
  t11570 = Cos(var1[3]);
  t11577 = t10852*t4779*t10805;
  t11604 = -1.*t11357*t11489;
  t11605 = t11577 + t11604;
  t11606 = t11570*t11605;
  t11608 = t11569 + t11606;
  t11656 = t11570*t11565;
  t11657 = -1.*t11554*t11605;
  t11698 = t11656 + t11657;
  t12101 = t7125*t10985;
  t12116 = t11061*t11361;
  t12120 = t12101 + t12116;
  t11719 = -1.*t7125*t10853*t11004;
  t11736 = t10822*t11361;
  t11759 = t11719 + t11736;
  t11915 = t7125*t11061;
  t11941 = -1.*t10985*t11361;
  t12065 = t11915 + t11941;
  t12078 = t10852*t11361*t12065;
  t12151 = -1.*t10852*t7125*t12120;
  t12162 = t10927 + t12078 + t12151;
  t12163 = t11759*t12162;
  t12167 = t12120*t11759;
  t12168 = t7125*t10822;
  t12171 = t10853*t11004*t11361;
  t12200 = t12168 + t12171;
  t12211 = t12065*t12200;
  t12221 = t11099 + t12167 + t12211;
  t12228 = t10852*t7125*t12221;
  t12230 = t12163 + t12228;
  t11363 = t10853*t11357;
  t11379 = -1.*t10852*t4779*t11361;
  t11380 = t11363 + t11379;
  t12294 = t10921*t11357;
  t12298 = t4779*t12065;
  t12304 = t12294 + t12298;
  t12270 = t10852*t11004*t11357;
  t12271 = t4779*t12200;
  t12293 = t12270 + t12271;
  t12385 = t4779*t10921;
  t12536 = -1.*t11357*t12065;
  t12540 = t12385 + t12536;
  t12306 = -1.*t11380*t12304;
  t12307 = t4779*t10853;
  t12328 = t10852*t11357*t11361;
  t12329 = t12307 + t12328;
  t12541 = -1.*t12329*t12540;
  t12578 = t12151 + t12306 + t12541;
  t12590 = t12293*t12578;
  t12709 = t12304*t12293;
  t12739 = t10852*t4779*t11004;
  t12743 = -1.*t11357*t12200;
  t12744 = t12739 + t12743;
  t12745 = t12540*t12744;
  t12746 = t12167 + t12709 + t12745;
  t12747 = t11380*t12746;
  t12748 = t12590 + t12747;
  t12763 = t7125*t10853*t10805;
  t12787 = -1.*t11004*t11361;
  t12803 = t12763 + t12787;
  t12854 = -1.*t7125*t10985;
  t12858 = -1.*t11061*t11361;
  t12859 = t12854 + t12858;
  t12861 = t10852*t11361*t12120;
  t12874 = t7125*t10853*t11004;
  t12875 = -1.*t10822*t11361;
  t12876 = t12874 + t12875;
  t12878 = t12065*t11759;
  t12881 = t12120*t12200;
  t13036 = 0.068*t10853;
  t13045 = -1.*t10852*t10918;
  t13046 = t13036 + t13045;
  t13089 = -0.068*t10852;
  t13091 = t13089 + t10979;
  t13248 = -1.*t4779*t10853*t10805;
  t13291 = -1.*t10852*t10805*t11357*t11361;
  t13337 = t13248 + t13291;
  t13059 = -1.*t10852*t10921;
  t13097 = -1.*t10853*t13091;
  t13120 = -1.*t10853*t10921*t11004;
  t13126 = t10852*t13091*t11004;
  t13351 = Power(t7125,2);
  t13352 = -1.*t10852*t13351*t13046;
  t13356 = t7125*t10853*t12120;
  t13365 = -1.*t10852*t7125*t11004*t12120;
  t13366 = t7125*t13046*t11759;
  t13435 = -1.*t10853*t11004*t11357;
  t13438 = t10852*t4779*t11004*t11361;
  t13439 = t13435 + t13438;
  t13442 = t13091*t11357;
  t13444 = -1.*t4779*t13046*t11361;
  t13445 = t13442 + t13444;
  t13451 = t4779*t13091;
  t13453 = t13046*t11357*t11361;
  t13456 = t13451 + t13453;
  t13501 = -1.*t10852*t10805*t11357;
  t13502 = -1.*t4779*t11489;
  t13506 = t13501 + t13502;
  t13518 = -1.*t10921*t11357;
  t13519 = -1.*t4779*t12065;
  t13523 = t13518 + t13519;
  t13582 = -1.*t4550*t7248;
  t13583 = -1.*t10780*t10291;
  t13597 = t13582 + t13583;
  t13631 = -0.325*t4550;
  t13632 = t13631 + t11056 + t11060;
  t13623 = 0.325*t10780;
  t13624 = -1.*t4550*t10564;
  t13625 = -1.*t10780*t10743;
  t13626 = t13623 + t13624 + t13625;
  t13621 = t10852*t10921*t10822;
  t13630 = Power(t10852,2);
  t13633 = t13630*t13632*t11004;
  t13697 = -1.*t7125*t10853*t13632;
  t13698 = t13626*t11361;
  t13700 = t13697 + t13698;
  t13671 = -1.*t7125*t10853*t10822;
  t13672 = t13597*t11361;
  t13673 = t13671 + t13672;
  t13688 = t7125*t13626;
  t13690 = t10853*t13632*t11361;
  t13693 = t13688 + t13690;
  t13720 = t7125*t13597;
  t13721 = t10853*t10822*t11361;
  t13725 = t13720 + t13721;
  t13701 = -1.*t10852*t7125*t13700;
  t13717 = t13700*t11759;
  t13730 = t12120*t13673;
  t13743 = t10852*t10822*t11357;
  t13744 = t4779*t13725;
  t13745 = t13743 + t13744;
  t13747 = t10852*t13632*t11357;
  t13748 = t4779*t13693;
  t13749 = t13747 + t13748;
  t13753 = t10852*t4779*t13632;
  t13754 = -1.*t11357*t13693;
  t13757 = t13753 + t13754;
  t13793 = -0.28*t7248;
  t13794 = 0.0641*t10291;
  t13796 = t13793 + t13794;
  t13634 = Power(t10853,2);
  t13867 = t10780*t10564;
  t13868 = t4550*t13796;
  t13869 = t13867 + t13868;
  t13878 = t7125*t10805;
  t13879 = t10853*t13597*t11361;
  t13880 = t13878 + t13879;
  t13884 = -1.*t7125*t10853*t13597;
  t13885 = t10805*t11361;
  t13888 = t13884 + t13885;
  t13895 = t10852*t4779*t13597;
  t13898 = -1.*t11357*t13880;
  t13899 = t13895 + t13898;
  t13809 = -1.*t10780*t13796;
  t13810 = t10886 + t13809;
  t13807 = t10852*t10921*t10805;
  t13870 = t13630*t13869*t11004;
  t13919 = -1.*t7125*t10853*t13869;
  t13920 = t13810*t11361;
  t13921 = t13919 + t13920;
  t13913 = t7125*t13810;
  t13914 = t10853*t13869*t11361;
  t13916 = t13913 + t13914;
  t13922 = -1.*t10852*t7125*t13921;
  t13926 = t13921*t11759;
  t13927 = t12120*t11565;
  t13938 = t10852*t13869*t11357;
  t13939 = t4779*t13916;
  t13940 = t13938 + t13939;
  t13945 = t10852*t4779*t13869;
  t13946 = -1.*t11357*t13916;
  t13948 = t13945 + t13946;
  t13808 = -1.*t10853*t10985*t10805;
  t13839 = t11061*t11004;
  t13966 = -1.*t11061*t10822;
  t13970 = -1.*t10852*t10921*t11004;
  t13977 = t10853*t10985*t11004;
  t13981 = t13966 + t13970 + t13977;
  t13982 = t10852*t10805*t13981;
  t13984 = t13807 + t13808 + t13839;
  t13985 = t10852*t11004*t13984;
  t13987 = t13982 + t13985;
  t13999 = t10918*t10805;
  t14001 = t13999 + t13839;
  t14002 = t10822*t14001;
  t14013 = -1.*t10918*t11004;
  t14014 = t13966 + t14013;
  t14016 = t11004*t14014;
  t14017 = t14002 + t14016;
  t14110 = t10852*t7125*t11554;
  t14112 = t11570*t12329;
  t14114 = t14110 + t14112;
  t14118 = t10852*t11570*t7125;
  t14119 = -1.*t11554*t12329;
  t14120 = t14118 + t14119;
  t14101 = t11570*t7125;
  t14106 = -1.*t11554*t11357*t11361;
  t14107 = t14101 + t14106;
  t13925 = t12065*t11489;
  t14138 = t13807 + t13925 + t13927;
  t14139 = t11759*t14138;
  t14140 = -1.*t12120*t11759;
  t14141 = -1.*t12065*t12200;
  t14142 = t13970 + t14140 + t14141;
  t14143 = t11565*t14142;
  t14144 = t14139 + t14143;
  t14033 = t7125*t11554*t11357;
  t14044 = t11570*t11361;
  t14060 = t14033 + t14044;
  t14130 = -1.*t10852*t4779*t11554;
  t14133 = -1.*t10853*t14107;
  t14134 = t14130 + t14133;
  t13952 = t12304*t11495;
  t13953 = t12540*t11605;
  t14165 = t13927 + t13952 + t13953;
  t14166 = t12293*t14165;
  t14167 = -1.*t12304*t12293;
  t14172 = -1.*t12540*t12744;
  t14173 = t14140 + t14167 + t14172;
  t14174 = t11495*t14173;
  t14179 = t14166 + t14174;
  t14154 = -1.*t10780*t14060;
  t14155 = t4550*t14134;
  t14156 = t14154 + t14155;
  t14158 = t4550*t14060;
  t14159 = t10780*t14134;
  t14161 = t14158 + t14159;
  t13461 = t10852*t4779;
  t13462 = -1.*t10853*t11357*t11361;
  t13463 = t13461 + t13462;
  t14203 = -1.*t10853*t10921*t10805;
  t14205 = t10852*t13091*t10805;
  t14213 = t10853*t10921*t11004;
  t14215 = -1.*t10852*t13091*t11004;
  t14247 = -1.*t10852*t7125*t10805*t12120;
  t14249 = t7125*t13046*t11565;
  t13161 = -1.*t10853*t10805*t11357;
  t13165 = t10852*t4779*t10805*t11361;
  t13219 = t13161 + t13165;
  t14257 = t10852*t7125*t11004*t12120;
  t14258 = -1.*t7125*t13046*t11759;
  t13475 = -1.*t4779*t10853*t11004;
  t13479 = -1.*t10852*t11004*t11357*t11361;
  t13480 = t13475 + t13479;
  t14351 = t12120*t11489;
  t14353 = t12065*t11565;
  t14361 = -1.*t12065*t11759;
  t14364 = -1.*t12120*t12200;
  t13529 = -1.*t10853*t11357;
  t13531 = t10852*t4779*t11361;
  t13535 = t13529 + t13531;
  t13543 = -1.*t10852*t11004*t11357;
  t13545 = -1.*t4779*t12200;
  t13546 = t13543 + t13545;
  t14548 = -1.*t13626*t10822;
  t14554 = -1.*t11061*t13597;
  t14758 = t13626*t11004;
  t14739 = t13630*t13632*t10805;
  t14474 = -1.*t10852*t10921*t10822;
  t14561 = -1.*t13630*t13632*t11004;
  t15941 = t13700*t11565;
  t15952 = -1.*t13700*t11759;
  t15956 = -1.*t12120*t13673;
  t13769 = t10852*t4779*t10822;
  t13772 = -1.*t11357*t13725;
  t13775 = t13769 + t13772;
  t16340 = -1.*t13810*t10822;
  t16341 = -1.*t11061*t11004;
  t16346 = t11061*t10805;
  t16351 = t13810*t11004;
  t16347 = t13630*t13869*t10805;
  t16349 = t10852*t10921*t13597;
  t16334 = -1.*t10852*t10921*t10805;
  t16342 = -1.*t13630*t13869*t11004;
  t16372 = t12120*t13888;
  t16375 = t13921*t11565;
  t13877 = t10852*t13597*t11357;
  t13881 = t4779*t13880;
  t13882 = t13877 + t13881;
  t16380 = -1.*t13921*t11759;
  t16381 = -1.*t12120*t11565;
  t17489 = -0.325*t7248;
  t17508 = t7248*t10743;
  t17598 = -1.*t10564*t10291;
  t17672 = t17489 + t17508 + t17598;
  t16339 = t10853*t10985*t10805;
  t17806 = t10853*t10921;
  t17810 = t10852*t10985;
  t17838 = t17806 + t17810;
  t17858 = t10852*t17838*t10805;
  t17893 = t16334 + t16339 + t16341;
  t17953 = t10853*t17893;
  t18011 = t17858 + t17953;
  t13640 = var2[0]*t12293;
  t18119 = t7125*t11554;
  t18122 = t11570*t11357*t11361;
  t18124 = t18119 + t18122;
  t16379 = -1.*t12065*t11489;
  t18798 = -1.*t10852*t11361*t12065;
  t18802 = t10852*t7125*t12120;
  t18803 = t17806 + t18798 + t18802;
  t18807 = t11565*t18803;
  t18810 = t16334 + t16379 + t16381;
  t18811 = t10852*t7125*t18810;
  t18813 = t18807 + t18811;
  t13641 = t11554*t11759;
  t13643 = t11570*t12744;
  t13652 = t13641 + t13643;
  t13653 = var2[2]*t13652;
  t13654 = t11570*t11759;
  t13660 = -1.*t11554*t12744;
  t13665 = t13654 + t13660;
  t13668 = var2[1]*t13665;
  t18070 = -1.*t11570*t7125*t11357;
  t18080 = t11554*t11361;
  t18112 = t18070 + t18080;
  t18163 = t10852*t11570*t4779;
  t18168 = -1.*t10853*t18124;
  t18304 = t18163 + t18168;
  t16443 = -1.*t12304*t11495;
  t16670 = -1.*t12540*t11605;
  t18866 = t11380*t12304;
  t18867 = t12329*t12540;
  t18868 = t18802 + t18866 + t18867;
  t18869 = t11495*t18868;
  t18872 = t16381 + t16443 + t16670;
  t18873 = t11380*t18872;
  t18875 = t18869 + t18873;
  t18821 = -1.*t10780*t18112;
  t18823 = t4550*t18304;
  t18825 = t18821 + t18823;
  t18827 = t4550*t18112;
  t18828 = t10780*t18304;
  t18830 = t18827 + t18828;
  t18939 = -1.*t10852*t11361*t12120;
  t18945 = -1.*t12120*t11489;
  t18950 = -1.*t12065*t11565;
  t19154 = t10852*t10921;
  t19177 = t10853*t13091;
  t13353 = Power(t11361,2);
  t19203 = t10853*t10921*t10805;
  t19205 = -1.*t10852*t13091*t10805;
  t19255 = t10852*t13351*t13046;
  t19260 = -1.*t7125*t10853*t12120;
  t19285 = t10852*t7125*t10805*t12120;
  t19288 = -1.*t7125*t13046*t11565;
  t11517 = var2[0]*t11495;
  t11620 = var2[2]*t11608;
  t11709 = var2[1]*t11698;
  t19364 = -1.*t13630*t13869*t10805;
  t19367 = -1.*t10852*t10921*t13597;
  t19378 = t10852*t7125*t13921;
  t19381 = -1.*t12120*t13888;
  t19384 = -1.*t13921*t11565;
  t19407 = -1.*t13630*t13632*t10805;
  t19427 = t10852*t7125*t13700;
  t19431 = -1.*t13700*t11565;
  p_output1[0]=0.1575*t10853*t11357 - 0.2255*t11380 - 0.325*t10780*t11404 + 0.075*t10291*t11416 + 0.075*t10712*t11442 + t11517 + t11620 + t11709 + 0.1575*t10946*t11361*t4779 + 0.325*t4624*t4779*t7125 - 0.0641*(t10291*t11442 + t11416*t7248) + 0.355*(-1.*t10291*t11416 + t11442*t7248) + var1[0] + t12748*var2[3] + ((-1.*t11554*t11565 - 1.*t11570*t11605)*var2[1] + t11698*var2[2])*var2[3] + t12230*var2[4] + (t11605*var2[0] - 1.*t11554*t13506*var2[1] + t11570*t13506*var2[2] + (t12578*t12744 + t12329*t12746 + t12293*(-1.*t12304*t12329 - 1.*t11380*t12540 - 1.*t12329*t13523 - 1.*t12540*t13535) + t11380*(t12293*t12540 + t12304*t12744 + t12744*t13523 + t12540*t13546))*var2[3])*var2[4] + t11338*var2[5] + (t12803*t4779*var2[0] + (t11489*t11570 + t11357*t11554*t12803)*var2[1] + (t11489*t11554 - 1.*t11357*t11570*t12803)*var2[2] + (t12578*t12876*t4779 + t11380*(-1.*t11357*t12744*t12859 - 1.*t11357*t12540*t12876 + t12878 + t12881 + t12293*t12859*t4779 + t12304*t12876*t4779) - 1.*t10852*t12746*t4779*t7125 + t12293*(t11357*t12329*t12859 + t12861 - 1.*t11380*t12859*t4779 - 1.*t10852*t12065*t7125 - 1.*t10852*t11357*t12540*t7125 + t10852*t12304*t4779*t7125))*var2[3] + (t12162*t12200 - 1.*t10852*t11361*t12221 + t11759*(t10852*t11361*t12859 + t12861) + t10852*(t12200*t12859 + t12065*t12876 + t12878 + t12881)*t7125)*var2[4])*var2[5] + t10828*var2[12] + (t13219*var2[0] + (-1.*t11554*t13337 - 1.*t10805*t10852*t11570*t7125)*var2[1] + (t11570*t13337 - 1.*t10805*t10852*t11554*t7125)*var2[2] + (t11404*t12746 + t12578*t13439 + t12293*(-1.*t11404*t12304 + t13352 + t13356 - 1.*t11380*t13445 - 1.*t12329*t13456 - 1.*t12540*t13463) + t11380*(t13365 + t13366 + t12304*t13439 + t12293*t13445 + t12744*t13456 + t12540*t13480))*var2[3] + (t11759*(-1.*t10853*t11361*t12065 + t13059 + t13097 + t13352 - 1.*t10852*t13046*t13353 + t13356) - 1.*t10852*t11004*t12162*t7125 - 1.*t10853*t12221*t7125 + t10852*(t10852*t11004*t11361*t12065 - 1.*t11361*t12200*t13046 + t13120 + t13126 + t13365 + t13366)*t7125)*var2[4] + (-1.*t10853*t10988*t11004 + t10852*t11277 + t10852*t11004*(t10853*t10985 - 1.*t10852*t13046 + t13059 + t13097) + t10853*(-1.*t10852*t10985*t11004 - 1.*t10853*t11004*t13046 + t13120 + t13126))*var2[5])*var2[12] + t10777*var2[13] + (t13640 + t13653 + t13668 + (t12578*t13745 + t12293*(t13701 - 1.*t11380*t13749 - 1.*t12329*t13757) + t11380*(t13717 + t13730 + t12304*t13745 + t12293*t13749 + t12744*t13757 + t12540*t13775))*var2[3] + (t12162*t13673 + t11759*(-1.*t10852*t10853*t13632 + t10852*t11361*t13693 + t13701) + t10852*(t13621 + t13633 + t12200*t13693 + t13717 + t12065*t13725 + t13730)*t7125)*var2[4] + (t10822*t10852*t10988 + t10853*(-1.*t10822*t10853*t10985 + t11061*t13597 + t13621 + t10822*t13626 + t13633 + t11004*t13632*t13634))*var2[5] + (0.1575*t11004 + 0.2255*t13597)*var2[12])*var2[13] - 0.0641*var2[14] + (t13882*var2[0] + (t11570*t13888 - 1.*t11554*t13899)*var2[1] + (t11554*t13888 + t11570*t13899)*var2[2] + (t11495*t12578 + t12293*(t13922 - 1.*t11380*t13940 - 1.*t12329*t13948) + t11380*(t13926 + t13927 + t12293*t13940 + t12744*t13948 + t13952 + t13953))*var2[3] + (t11565*t12162 + t11759*(-1.*t10852*t10853*t13869 + t10852*t11361*t13916 + t13922) + t10852*(t13807 + t13870 + t12200*t13916 + t13925 + t13926 + t13927)*t7125)*var2[4] + (t10805*t10852*t10988 + t10853*(t13807 + t13808 + t10822*t13810 + t13839 + t11004*t13634*t13869 + t13870))*var2[5] + (0.2255*t11004 + 0.1575*t13597)*var2[12] + (0.325*t7248 - 1.*t10743*t7248 - 1.*t13796*t7248)*var2[13])*var2[14] + t11495*var3[0] + t11698*var3[1] + t11608*var3[2] + t12748*var3[3] + t12230*var3[4] + t11338*var3[5] + t10828*var3[12] + t10777*var3[13] - 0.0641*var3[14] - 1.*var4[0];
  p_output1[1]=-0.1575*t10946*t14107 - 0.325*t10780*t14134 + 0.075*t10291*t14156 + 0.075*t10712*t14161 + 0.325*t14060*t4624 - 0.1575*t10853*t11554*t4779 - 0.2255*(t10852*t14107 - 1.*t10853*t11554*t4779) - 0.0641*(t10291*t14161 + t14156*t7248) + 0.355*(-1.*t10291*t14156 + t14161*t7248) + var1[1] + t11380*var2[0] + t14120*var2[1] + t14114*var2[2] + t14179*var2[3] + ((-1.*t11570*t12329 - 1.*t10852*t11554*t7125)*var2[1] + t14120*var2[2])*var2[3] + t14144*var2[4] + (t12329*var2[0] - 1.*t11554*t13535*var2[1] + t11570*t13535*var2[2] + (t12293*(t11605*t12304 + t11495*t12540 + t12540*t13506 + t11605*t13523) + t11495*(-1.*t12293*t12540 - 1.*t12304*t12744 - 1.*t12744*t13523 - 1.*t12540*t13546) + t12744*t14165 + t11605*t14173)*var2[3])*var2[4] + t13987*var2[5] + (-1.*t10852*t4779*t7125*var2[0] + (-1.*t10852*t11361*t11570 - 1.*t10852*t11357*t11554*t7125)*var2[1] + (-1.*t10852*t11361*t11554 + t10852*t11357*t11570*t7125)*var2[2] + (t12876*t14165*t4779 + t12803*t14173*t4779 + t12293*(-1.*t11357*t12540*t12803 - 1.*t11357*t11605*t12859 + t14351 + t14353 + t12304*t12803*t4779 + t11495*t12859*t4779) + t11495*(t11357*t12744*t12859 + t11357*t12540*t12876 + t14361 + t14364 - 1.*t12293*t12859*t4779 - 1.*t12304*t12876*t4779))*var2[3] + (t12200*t14138 + t11489*t14142 + t11759*(t12065*t12803 + t11489*t12859 + t14351 + t14353) + t11565*(-1.*t12200*t12859 - 1.*t12065*t12876 + t14361 + t14364))*var2[4])*var2[5] + t14017*var2[12] + (t11404*var2[0] + (-1.*t11554*t13463 - 1.*t10853*t11570*t7125)*var2[1] + (t11570*t13463 - 1.*t10853*t11554*t7125)*var2[2] + (t13439*t14165 + t13219*t14173 + t12293*(t12304*t13219 + t12540*t13337 + t11495*t13445 + t11605*t13456 + t14247 + t14249) + t11495*(-1.*t12304*t13439 - 1.*t12293*t13445 - 1.*t12744*t13456 - 1.*t12540*t13480 + t14257 + t14258))*var2[3] + (t11759*(t10805*t10852*t11361*t12065 - 1.*t11361*t11489*t13046 + t14203 + t14205 + t14247 + t14249) + t11565*(-1.*t10852*t11004*t11361*t12065 + t11361*t12200*t13046 + t14213 + t14215 + t14257 + t14258) - 1.*t10852*t11004*t14138*t7125 - 1.*t10805*t10852*t14142*t7125)*var2[4] + (-1.*t10805*t10853*t13981 - 1.*t10853*t11004*t13984 + t10852*t11004*(-1.*t10805*t10852*t10985 - 1.*t10805*t10853*t13046 + t14203 + t14205) + t10805*t10852*(t10852*t10985*t11004 + t10853*t11004*t13046 + t14213 + t14215))*var2[5])*var2[12] + ((t13745*t14165 + t12293*t14173 + t12293*(t12167 + t12709 + t12745 + t11495*t13749 + t11605*t13757 + t15941) + t11495*(-1.*t12304*t13745 - 1.*t12293*t13749 - 1.*t12744*t13757 - 1.*t12540*t13775 + t15952 + t15956))*var2[3] + (t13673*t14138 + t11759*t14142 + t11759*(t11099 + t12167 + t12211 + t11489*t13693 + t14739 + t15941) + t11565*(-1.*t12200*t13693 - 1.*t12065*t13725 + t14474 + t14561 + t15952 + t15956))*var2[4] + (t10852*t11004*t13981 + t10822*t10852*t13984 + t10805*t10852*(t10822*t10853*t10985 - 1.*t11004*t13632*t13634 + t14474 + t14548 + t14554 + t14561) + t10852*t11004*(t11069 + t11099 + t11175 + t10805*t13632*t13634 + t14739 + t14758))*var2[5] + (t13597*t14001 + t10822*t14014 + t11004*(-1.*t10822*t10918 - 1.*t11004*t13632 + t14548 + t14554) + t10822*(t10918*t11004 + t11069 + t10805*t13632 + t14758))*var2[12])*var2[13] + ((t11495*t14165 + t13882*t14173 + t12293*(t12304*t13882 + t12540*t13899 + t11495*t13940 + t11605*t13948 + t16372 + t16375) + t11495*(-1.*t12293*t13940 - 1.*t12744*t13948 + t16380 + t16381 + t16443 + t16670))*var2[3] + (t11565*t14138 + t13888*t14142 + t11759*(t12065*t13880 + t11489*t13916 + t16347 + t16349 + t16372 + t16375) + t11565*(-1.*t12200*t13916 + t16334 + t16342 + t16379 + t16380 + t16381))*var2[4] + (t10852*t13597*t13981 + t10805*t10852*t13984 + t10805*t10852*(-1.*t11004*t13634*t13869 + t16334 + t16339 + t16340 + t16341 + t16342) + t10852*t11004*(-1.*t10853*t10985*t13597 + t10805*t13634*t13869 + t16346 + t16347 + t16349 + t16351))*var2[5] + (t11004*t14001 + t10805*t14014 + t11004*(-1.*t10805*t10918 - 1.*t11004*t13869 + t16340 + t16341) + t10822*(t10918*t13597 + t10805*t13869 + t16346 + t16351))*var2[12])*var2[14] + t11380*var3[0] + t14120*var3[1] + t14114*var3[2] + t14179*var3[3] + t14144*var3[4] + t13987*var3[5] + t14017*var3[12] - 1.*var4[1];
  p_output1[2]=t13640 + t13653 + t13668 - 0.1575*t10946*t18124 - 0.325*t10780*t18304 + 0.075*t10291*t18825 + 0.075*t10712*t18830 + 0.325*t18112*t4624 + 0.1575*t10853*t11570*t4779 - 0.2255*(t10852*t18124 + t10853*t11570*t4779) - 0.0641*(t10291*t18830 + t18825*t7248) + 0.355*(-1.*t10291*t18825 + t18830*t7248) + var1[2] + t18875*var2[3] + ((-1.*t11554*t11759 - 1.*t11570*t12744)*var2[1] + t13665*var2[2])*var2[3] + t18813*var2[4] + (t12744*var2[0] - 1.*t11554*t13546*var2[1] + t11570*t13546*var2[2] + (t11380*(-1.*t11605*t12304 - 1.*t11495*t12540 - 1.*t12540*t13506 - 1.*t11605*t13523) + t11495*(t12304*t12329 + t11380*t12540 + t12329*t13523 + t12540*t13535) + t11605*t18868 + t12329*t18872)*var2[3])*var2[4] + t18011*var2[5] + (t12876*t4779*var2[0] + (t11570*t12200 + t11357*t11554*t12876)*var2[1] + (t11554*t12200 - 1.*t11357*t11570*t12876)*var2[2] + (t12803*t18868*t4779 + t11380*(t11357*t12540*t12803 + t11357*t11605*t12859 + t18945 + t18950 - 1.*t12304*t12803*t4779 - 1.*t11495*t12859*t4779) - 1.*t10852*t18872*t4779*t7125 + t11495*(-1.*t11357*t12329*t12859 + t18939 + t11380*t12859*t4779 + t10852*t12065*t7125 + t10852*t11357*t12540*t7125 - 1.*t10852*t12304*t4779*t7125))*var2[3] + (t11489*t18803 - 1.*t10852*t11361*t18810 + t11565*(-1.*t10852*t11361*t12859 + t18939) + t10852*(-1.*t12065*t12803 - 1.*t11489*t12859 + t18945 + t18950)*t7125)*var2[4])*var2[5] - 0.068*t11004*var2[12] + (t13439*var2[0] + (-1.*t11554*t13480 - 1.*t10852*t11004*t11570*t7125)*var2[1] + (t11570*t13480 - 1.*t10852*t11004*t11554*t7125)*var2[2] + (t13219*t18868 + t11404*t18872 + t11495*(t11404*t12304 + t11380*t13445 + t12329*t13456 + t12540*t13463 + t19255 + t19260) + t11380*(-1.*t12304*t13219 - 1.*t12540*t13337 - 1.*t11495*t13445 - 1.*t11605*t13456 + t19285 + t19288))*var2[3] + (t11565*(t10853*t11361*t12065 + t10852*t13046*t13353 + t19154 + t19177 + t19255 + t19260) - 1.*t10805*t10852*t18803*t7125 - 1.*t10853*t18810*t7125 + t10852*(-1.*t10805*t10852*t11361*t12065 + t11361*t11489*t13046 + t19203 + t19205 + t19285 + t19288)*t7125)*var2[4] + (-1.*t10805*t10853*t17838 + t10852*t17893 + t10805*t10852*(-1.*t10853*t10985 + t10852*t13046 + t19154 + t19177) + t10853*(t10805*t10852*t10985 + t10805*t10853*t13046 + t19203 + t19205))*var2[5])*var2[12] + t17672*var2[13] + (t13745*var2[0] + (t11570*t13673 - 1.*t11554*t13775)*var2[1] + (t11554*t13673 + t11570*t13775)*var2[2] + (t12293*t18868 + t11495*(t11380*t13749 + t12329*t13757 + t19427) + t11380*(-1.*t11495*t13749 - 1.*t11605*t13757 + t14140 + t14167 + t14172 + t19431))*var2[3] + (t11759*t18803 + t11565*(t10852*t10853*t13632 - 1.*t10852*t11361*t13693 + t19427) + t10852*(-1.*t11489*t13693 + t13970 + t14140 + t14141 + t19407 + t19431)*t7125)*var2[4] + (t10852*t11004*t17838 + t10853*(-1.*t11004*t13626 - 1.*t10805*t13632*t13634 + t13966 + t13970 + t13977 + t19407))*var2[5] - 0.068*t10822*var2[12])*var2[13] - 0.28*var2[14] + (t11517 + t11620 + t11709 + (t13882*t18868 + t11495*(t11380*t13940 + t12329*t13948 + t19378) + t11380*(-1.*t12304*t13882 - 1.*t12540*t13899 - 1.*t11495*t13940 - 1.*t11605*t13948 + t19381 + t19384))*var2[3] + (t13888*t18803 + t11565*(t10852*t10853*t13869 - 1.*t10852*t11361*t13916 + t19378) + t10852*(-1.*t12065*t13880 - 1.*t11489*t13916 + t19364 + t19367 + t19381 + t19384)*t7125)*var2[4] + (t10852*t13597*t17838 + t10853*(-1.*t10805*t11061 + t10853*t10985*t13597 - 1.*t11004*t13810 - 1.*t10805*t13634*t13869 + t19364 + t19367))*var2[5] - 0.068*t10805*var2[12] + (t10568 + t10747 - 1.*t10291*t13796)*var2[13])*var2[14] + t12293*var3[0] + t13665*var3[1] + t13652*var3[2] + t18875*var3[3] + t18813*var3[4] + t18011*var3[5] - 0.068*t11004*var3[12] + t17672*var3[13] - 0.28*var3[14] - 1.*var4[2];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "ddh_FrFoot_ParallelStance.hh"

namespace ParallelStance
{

void ddh_FrFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
