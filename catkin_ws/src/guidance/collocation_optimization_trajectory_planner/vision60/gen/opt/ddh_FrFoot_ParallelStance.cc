/*
 * Automatically Generated from Mathematica.
 * Sun 3 Apr 2022 21:47:53 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t26452;
  double t26476;
  double t26463;
  double t26504;
  double t26505;
  double t26506;
  double t26540;
  double t26544;
  double t26547;
  double t26548;
  double t26551;
  double t26552;
  double t26553;
  double t26582;
  double t26583;
  double t26106;
  double t26594;
  double t26597;
  double t26598;
  double t26599;
  double t26601;
  double t26605;
  double t26606;
  double t26608;
  double t26611;
  double t26612;
  double t26628;
  double t26627;
  double t26640;
  double t26642;
  double t26644;
  double t26646;
  double t26172;
  double t26173;
  double t26635;
  double t26648;
  double t26651;
  double t26672;
  double t26673;
  double t26675;
  double t26654;
  double t26655;
  double t26657;
  double t26658;
  double t26659;
  double t26662;
  double t26653;
  double t26664;
  double t26665;
  double t26676;
  double t26677;
  double t26678;
  double t26679;
  double t26681;
  double t26682;
  double t26685;
  double t26691;
  double t26693;
  double t26698;
  double t26699;
  double t26261;
  double t26709;
  double t26713;
  double t26262;
  double t26734;
  double t26735;
  double t26736;
  double t26764;
  double t26765;
  double t26766;
  double t26767;
  double t26769;
  double t26770;
  double t26738;
  double t26743;
  double t26744;
  double t26749;
  double t26755;
  double t26756;
  double t26807;
  double t26809;
  double t26810;
  double t26811;
  double t26812;
  double t26813;
  double t26814;
  double t26818;
  double t26819;
  double t26821;
  double t26822;
  double t26834;
  double t26835;
  double t26843;
  double t26873;
  double t26886;
  double t26887;
  double t26846;
  double t26847;
  double t26848;
  double t26853;
  double t26860;
  double t26866;
  double t26867;
  double t26895;
  double t26899;
  double t26900;
  double t26905;
  double t26913;
  double t26915;
  double t26919;
  double t26925;
  double t26934;
  double t26937;
  double t26938;
  double t26718;
  double t26725;
  double t26726;
  double t26974;
  double t26975;
  double t26976;
  double t26962;
  double t26963;
  double t26964;
  double t26984;
  double t26997;
  double t27006;
  double t26978;
  double t26979;
  double t26981;
  double t26982;
  double t27008;
  double t27009;
  double t27011;
  double t27012;
  double t27023;
  double t27032;
  double t27038;
  double t27041;
  double t27043;
  double t27045;
  double t27046;
  double t27051;
  double t27053;
  double t27059;
  double t27096;
  double t27098;
  double t27102;
  double t27105;
  double t27110;
  double t27116;
  double t27118;
  double t27121;
  double t27123;
  double t27155;
  double t27156;
  double t27157;
  double t27186;
  double t27187;
  double t27228;
  double t27231;
  double t27235;
  double t27164;
  double t27193;
  double t27200;
  double t27203;
  double t27246;
  double t27247;
  double t27252;
  double t27256;
  double t27257;
  double t27273;
  double t27275;
  double t27278;
  double t27284;
  double t27285;
  double t27287;
  double t27290;
  double t27291;
  double t27292;
  double t27338;
  double t27340;
  double t27341;
  double t27345;
  double t27346;
  double t27348;
  double t27394;
  double t27395;
  double t27396;
  double t27425;
  double t27426;
  double t27416;
  double t27417;
  double t27419;
  double t27420;
  double t27408;
  double t27424;
  double t27427;
  double t27468;
  double t27469;
  double t27471;
  double t27457;
  double t27458;
  double t27459;
  double t27463;
  double t27464;
  double t27465;
  double t27478;
  double t27480;
  double t27481;
  double t27472;
  double t27477;
  double t27484;
  double t27501;
  double t27502;
  double t27503;
  double t27505;
  double t27508;
  double t27518;
  double t27520;
  double t27523;
  double t27524;
  double t27546;
  double t27547;
  double t27548;
  double t27428;
  double t27569;
  double t27570;
  double t27571;
  double t27588;
  double t27589;
  double t27592;
  double t27596;
  double t27597;
  double t27598;
  double t27604;
  double t27605;
  double t27608;
  double t27561;
  double t27562;
  double t27559;
  double t27572;
  double t27637;
  double t27646;
  double t27647;
  double t27626;
  double t27628;
  double t27629;
  double t27648;
  double t27653;
  double t27654;
  double t27665;
  double t27671;
  double t27672;
  double t27685;
  double t27690;
  double t27691;
  double t27560;
  double t27564;
  double t27725;
  double t27726;
  double t27727;
  double t27729;
  double t27731;
  double t27732;
  double t27733;
  double t27736;
  double t27743;
  double t27744;
  double t27745;
  double t27746;
  double t27747;
  double t27748;
  double t27749;
  double t27768;
  double t27769;
  double t27770;
  double t27774;
  double t27775;
  double t27776;
  double t27763;
  double t27764;
  double t27766;
  double t27652;
  double t27915;
  double t27924;
  double t27925;
  double t27926;
  double t27927;
  double t27928;
  double t27929;
  double t27754;
  double t27758;
  double t27759;
  double t27883;
  double t27898;
  double t27910;
  double t27697;
  double t27698;
  double t28033;
  double t28034;
  double t28035;
  double t28036;
  double t28037;
  double t28038;
  double t28039;
  double t28014;
  double t28016;
  double t28017;
  double t28019;
  double t28022;
  double t28026;
  double t27297;
  double t27298;
  double t27300;
  double t28108;
  double t28110;
  double t28116;
  double t28131;
  double t28162;
  double t28164;
  double t27212;
  double t27215;
  double t27217;
  double t28192;
  double t28196;
  double t27314;
  double t27317;
  double t27320;
  double t28377;
  double t28379;
  double t28394;
  double t28396;
  double t27353;
  double t27354;
  double t27357;
  double t27370;
  double t27371;
  double t27372;
  double t28527;
  double t28528;
  double t28559;
  double t28556;
  double t28525;
  double t28549;
  double t28590;
  double t28593;
  double t28596;
  double t27529;
  double t27530;
  double t27534;
  double t28627;
  double t28628;
  double t28633;
  double t28639;
  double t28634;
  double t28637;
  double t28625;
  double t28629;
  double t28661;
  double t28664;
  double t27587;
  double t27593;
  double t27594;
  double t28669;
  double t28670;
  double t28705;
  double t28706;
  double t28707;
  double t28708;
  double t28626;
  double t28711;
  double t28712;
  double t28713;
  double t28714;
  double t28715;
  double t28716;
  double t28717;
  double t27435;
  double t28725;
  double t28726;
  double t28727;
  double t28668;
  double t28738;
  double t28739;
  double t28740;
  double t28742;
  double t28743;
  double t28744;
  double t28745;
  double t27436;
  double t27437;
  double t27438;
  double t27444;
  double t27446;
  double t27447;
  double t27451;
  double t27453;
  double t28720;
  double t28721;
  double t28722;
  double t28734;
  double t28735;
  double t28736;
  double t28686;
  double t28687;
  double t28759;
  double t28760;
  double t28761;
  double t28762;
  double t28763;
  double t28764;
  double t28765;
  double t28750;
  double t28751;
  double t28752;
  double t28754;
  double t28755;
  double t28756;
  double t28796;
  double t28800;
  double t28802;
  double t28835;
  double t28839;
  double t27248;
  double t28846;
  double t28849;
  double t28874;
  double t28878;
  double t28883;
  double t28886;
  double t26780;
  double t26826;
  double t26845;
  double t28946;
  double t28948;
  double t28958;
  double t28961;
  double t28964;
  double t28990;
  double t29016;
  double t29022;
  t26452 = Cos(var1[14]);
  t26476 = Sin(var1[14]);
  t26463 = -0.0641*t26452;
  t26504 = -0.28*t26476;
  t26505 = t26463 + t26504;
  t26506 = -1.*t26452*t26505;
  t26540 = 0.325*t26476;
  t26544 = -1.*t26452;
  t26547 = 1. + t26544;
  t26548 = 0.075*t26547;
  t26551 = 0.355*t26452;
  t26552 = -0.0641*t26476;
  t26553 = t26548 + t26551 + t26552;
  t26582 = -1.*t26553*t26476;
  t26583 = t26506 + t26540 + t26582;
  t26106 = Cos(var1[13]);
  t26594 = Sin(var1[13]);
  t26597 = t26452*t26594;
  t26598 = -1.*t26106*t26476;
  t26599 = t26597 + t26598;
  t26601 = 0.1575*t26599;
  t26605 = -1.*t26452*t26594;
  t26606 = t26106*t26476;
  t26608 = t26605 + t26606;
  t26611 = 0.2255*t26608;
  t26612 = t26601 + t26611;
  t26628 = Sin(var1[12]);
  t26627 = Cos(var1[12]);
  t26640 = -0.325*t26594;
  t26642 = t26106*t26505;
  t26644 = t26594*t26553;
  t26646 = t26640 + t26642 + t26644;
  t26172 = -1.*t26106;
  t26173 = 1. + t26172;
  t26635 = -0.068*t26628;
  t26648 = t26627*t26646;
  t26651 = t26635 + t26648;
  t26672 = t26106*t26452;
  t26673 = t26594*t26476;
  t26675 = t26672 + t26673;
  t26654 = -1.*t26627;
  t26655 = 1. + t26654;
  t26657 = -0.1575*t26655;
  t26658 = -0.2255*t26627;
  t26659 = -1.*t26628*t26646;
  t26662 = t26657 + t26658 + t26659;
  t26653 = -1.*t26628*t26651;
  t26664 = -1.*t26627*t26662;
  t26665 = t26653 + t26664;
  t26676 = t26627*t26665*t26675;
  t26677 = 0.325*t26173;
  t26678 = -1.*t26594*t26505;
  t26679 = t26106*t26553;
  t26681 = t26677 + t26678 + t26679;
  t26682 = t26681*t26608;
  t26685 = t26627*t26651*t26675;
  t26691 = -1.*t26628*t26662*t26675;
  t26693 = t26682 + t26685 + t26691;
  t26698 = t26628*t26693;
  t26699 = t26676 + t26698;
  t26261 = Cos(var1[4]);
  t26709 = Sin(var1[4]);
  t26713 = Sin(var1[5]);
  t26262 = Cos(var1[5]);
  t26734 = t26627*t26709;
  t26735 = t26261*t26628*t26713;
  t26736 = t26734 + t26735;
  t26764 = t26627*t26599*t26709;
  t26765 = t26262*t26675;
  t26766 = t26628*t26599*t26713;
  t26767 = t26765 + t26766;
  t26769 = t26261*t26767;
  t26770 = t26764 + t26769;
  t26738 = -1.*t26261*t26262*t26594;
  t26743 = t26106*t26736;
  t26744 = t26738 + t26743;
  t26749 = t26106*t26261*t26262;
  t26755 = t26594*t26736;
  t26756 = t26749 + t26755;
  t26807 = Sin(var1[3]);
  t26809 = -1.*t26262*t26628*t26599;
  t26810 = t26675*t26713;
  t26811 = t26809 + t26810;
  t26812 = t26807*t26811;
  t26813 = Cos(var1[3]);
  t26814 = t26627*t26261*t26599;
  t26818 = -1.*t26709*t26767;
  t26819 = t26814 + t26818;
  t26821 = t26813*t26819;
  t26822 = t26812 + t26821;
  t26834 = t26813*t26811;
  t26835 = -1.*t26807*t26819;
  t26843 = t26834 + t26835;
  t26873 = t26262*t26662;
  t26886 = t26681*t26713;
  t26887 = t26873 + t26886;
  t26846 = -1.*t26262*t26628*t26675;
  t26847 = t26608*t26713;
  t26848 = t26846 + t26847;
  t26853 = t26262*t26681;
  t26860 = -1.*t26662*t26713;
  t26866 = t26853 + t26860;
  t26867 = t26627*t26713*t26866;
  t26895 = -1.*t26627*t26262*t26887;
  t26899 = t26653 + t26867 + t26895;
  t26900 = t26848*t26899;
  t26905 = t26887*t26848;
  t26913 = t26262*t26608;
  t26915 = t26628*t26675*t26713;
  t26919 = t26913 + t26915;
  t26925 = t26866*t26919;
  t26934 = t26685 + t26905 + t26925;
  t26937 = t26627*t26262*t26934;
  t26938 = t26900 + t26937;
  t26718 = t26628*t26709;
  t26725 = -1.*t26627*t26261*t26713;
  t26726 = t26718 + t26725;
  t26974 = t26651*t26709;
  t26975 = t26261*t26866;
  t26976 = t26974 + t26975;
  t26962 = t26627*t26675*t26709;
  t26963 = t26261*t26919;
  t26964 = t26962 + t26963;
  t26984 = t26261*t26651;
  t26997 = -1.*t26709*t26866;
  t27006 = t26984 + t26997;
  t26978 = -1.*t26726*t26976;
  t26979 = t26261*t26628;
  t26981 = t26627*t26709*t26713;
  t26982 = t26979 + t26981;
  t27008 = -1.*t26982*t27006;
  t27009 = t26895 + t26978 + t27008;
  t27011 = t26964*t27009;
  t27012 = t26976*t26964;
  t27023 = t26627*t26261*t26675;
  t27032 = -1.*t26709*t26919;
  t27038 = t27023 + t27032;
  t27041 = t27006*t27038;
  t27043 = t26905 + t27012 + t27041;
  t27045 = t26726*t27043;
  t27046 = t27011 + t27045;
  t27051 = t26262*t26628*t26599;
  t27053 = -1.*t26675*t26713;
  t27059 = t27051 + t27053;
  t27096 = -1.*t26262*t26662;
  t27098 = -1.*t26681*t26713;
  t27102 = t27096 + t27098;
  t27105 = t26627*t26713*t26887;
  t27110 = t26262*t26628*t26675;
  t27116 = -1.*t26608*t26713;
  t27118 = t27110 + t27116;
  t27121 = t26866*t26848;
  t27123 = t26887*t26919;
  t27155 = 0.068*t26628;
  t27156 = -1.*t26627*t26646;
  t27157 = t27155 + t27156;
  t27186 = -0.068*t26627;
  t27187 = t27186 + t26659;
  t27228 = -1.*t26261*t26628*t26599;
  t27231 = -1.*t26627*t26599*t26709*t26713;
  t27235 = t27228 + t27231;
  t27164 = -1.*t26627*t26651;
  t27193 = -1.*t26628*t27187;
  t27200 = -1.*t26628*t26651*t26675;
  t27203 = t26627*t27187*t26675;
  t27246 = Power(t26262,2);
  t27247 = -1.*t26627*t27246*t27157;
  t27252 = t26262*t26628*t26887;
  t27256 = -1.*t26627*t26262*t26675*t26887;
  t27257 = t26262*t27157*t26848;
  t27273 = -1.*t26628*t26675*t26709;
  t27275 = t26627*t26261*t26675*t26713;
  t27278 = t27273 + t27275;
  t27284 = t27187*t26709;
  t27285 = -1.*t26261*t27157*t26713;
  t27287 = t27284 + t27285;
  t27290 = t26261*t27187;
  t27291 = t27157*t26709*t26713;
  t27292 = t27290 + t27291;
  t27338 = -1.*t26627*t26599*t26709;
  t27340 = -1.*t26261*t26767;
  t27341 = t27338 + t27340;
  t27345 = -1.*t26651*t26709;
  t27346 = -1.*t26261*t26866;
  t27348 = t27345 + t27346;
  t27394 = -1.*t26106*t26452;
  t27395 = -1.*t26594*t26476;
  t27396 = t27394 + t27395;
  t27425 = -0.325*t26106;
  t27426 = t27425 + t26678 + t26679;
  t27416 = 0.325*t26594;
  t27417 = -1.*t26106*t26505;
  t27419 = -1.*t26594*t26553;
  t27420 = t27416 + t27417 + t27419;
  t27408 = t26627*t26651*t26608;
  t27424 = Power(t26627,2);
  t27427 = t27424*t27426*t26675;
  t27468 = -1.*t26262*t26628*t27426;
  t27469 = t27420*t26713;
  t27471 = t27468 + t27469;
  t27457 = -1.*t26262*t26628*t26608;
  t27458 = t27396*t26713;
  t27459 = t27457 + t27458;
  t27463 = t26262*t27420;
  t27464 = t26628*t27426*t26713;
  t27465 = t27463 + t27464;
  t27478 = t26262*t27396;
  t27480 = t26628*t26608*t26713;
  t27481 = t27478 + t27480;
  t27472 = -1.*t26627*t26262*t27471;
  t27477 = t27471*t26848;
  t27484 = t26887*t27459;
  t27501 = t26627*t26608*t26709;
  t27502 = t26261*t27481;
  t27503 = t27501 + t27502;
  t27505 = t26627*t27426*t26709;
  t27508 = t26261*t27465;
  t27518 = t27505 + t27508;
  t27520 = t26627*t26261*t27426;
  t27523 = -1.*t26709*t27465;
  t27524 = t27520 + t27523;
  t27546 = -0.28*t26452;
  t27547 = 0.0641*t26476;
  t27548 = t27546 + t27547;
  t27428 = Power(t26628,2);
  t27569 = t26594*t26505;
  t27570 = t26106*t27548;
  t27571 = t27569 + t27570;
  t27588 = t26262*t26599;
  t27589 = t26628*t27396*t26713;
  t27592 = t27588 + t27589;
  t27596 = -1.*t26262*t26628*t27396;
  t27597 = t26599*t26713;
  t27598 = t27596 + t27597;
  t27604 = t26627*t26261*t27396;
  t27605 = -1.*t26709*t27592;
  t27608 = t27604 + t27605;
  t27561 = -1.*t26594*t27548;
  t27562 = t26642 + t27561;
  t27559 = t26627*t26651*t26599;
  t27572 = t27424*t27571*t26675;
  t27637 = -1.*t26262*t26628*t27571;
  t27646 = t27562*t26713;
  t27647 = t27637 + t27646;
  t27626 = t26262*t27562;
  t27628 = t26628*t27571*t26713;
  t27629 = t27626 + t27628;
  t27648 = -1.*t26627*t26262*t27647;
  t27653 = t27647*t26848;
  t27654 = t26887*t26811;
  t27665 = t26627*t27571*t26709;
  t27671 = t26261*t27629;
  t27672 = t27665 + t27671;
  t27685 = t26627*t26261*t27571;
  t27690 = -1.*t26709*t27629;
  t27691 = t27685 + t27690;
  t27560 = -1.*t26628*t26662*t26599;
  t27564 = t26681*t26675;
  t27725 = -1.*t26681*t26608;
  t27726 = -1.*t26627*t26651*t26675;
  t27727 = t26628*t26662*t26675;
  t27729 = t27725 + t27726 + t27727;
  t27731 = t26627*t26599*t27729;
  t27732 = t27559 + t27560 + t27564;
  t27733 = t26627*t26675*t27732;
  t27736 = t27731 + t27733;
  t27743 = t26646*t26599;
  t27744 = t27743 + t27564;
  t27745 = t26608*t27744;
  t27746 = -1.*t26646*t26675;
  t27747 = t27725 + t27746;
  t27748 = t26675*t27747;
  t27749 = t27745 + t27748;
  t27768 = t26627*t26262*t26807;
  t27769 = t26813*t26982;
  t27770 = t27768 + t27769;
  t27774 = t26627*t26813*t26262;
  t27775 = -1.*t26807*t26982;
  t27776 = t27774 + t27775;
  t27763 = t26813*t26262;
  t27764 = -1.*t26807*t26709*t26713;
  t27766 = t27763 + t27764;
  t27652 = t26866*t26767;
  t27915 = t27559 + t27652 + t27654;
  t27924 = t26848*t27915;
  t27925 = -1.*t26887*t26848;
  t27926 = -1.*t26866*t26919;
  t27927 = t27726 + t27925 + t27926;
  t27928 = t26811*t27927;
  t27929 = t27924 + t27928;
  t27754 = t26262*t26807*t26709;
  t27758 = t26813*t26713;
  t27759 = t27754 + t27758;
  t27883 = -1.*t26627*t26261*t26807;
  t27898 = -1.*t26628*t27766;
  t27910 = t27883 + t27898;
  t27697 = t26976*t26770;
  t27698 = t27006*t26819;
  t28033 = t27654 + t27697 + t27698;
  t28034 = t26964*t28033;
  t28035 = -1.*t26976*t26964;
  t28036 = -1.*t27006*t27038;
  t28037 = t27925 + t28035 + t28036;
  t28038 = t26770*t28037;
  t28039 = t28034 + t28038;
  t28014 = -1.*t26594*t27759;
  t28016 = t26106*t27910;
  t28017 = t28014 + t28016;
  t28019 = t26106*t27759;
  t28022 = t26594*t27910;
  t28026 = t28019 + t28022;
  t27297 = t26627*t26261;
  t27298 = -1.*t26628*t26709*t26713;
  t27300 = t27297 + t27298;
  t28108 = -1.*t26628*t26651*t26599;
  t28110 = t26627*t27187*t26599;
  t28116 = t26628*t26651*t26675;
  t28131 = -1.*t26627*t27187*t26675;
  t28162 = -1.*t26627*t26262*t26599*t26887;
  t28164 = t26262*t27157*t26811;
  t27212 = -1.*t26628*t26599*t26709;
  t27215 = t26627*t26261*t26599*t26713;
  t27217 = t27212 + t27215;
  t28192 = t26627*t26262*t26675*t26887;
  t28196 = -1.*t26262*t27157*t26848;
  t27314 = -1.*t26261*t26628*t26675;
  t27317 = -1.*t26627*t26675*t26709*t26713;
  t27320 = t27314 + t27317;
  t28377 = t26887*t26767;
  t28379 = t26866*t26811;
  t28394 = -1.*t26866*t26848;
  t28396 = -1.*t26887*t26919;
  t27353 = -1.*t26628*t26709;
  t27354 = t26627*t26261*t26713;
  t27357 = t27353 + t27354;
  t27370 = -1.*t26627*t26675*t26709;
  t27371 = -1.*t26261*t26919;
  t27372 = t27370 + t27371;
  t28527 = -1.*t27420*t26608;
  t28528 = -1.*t26681*t27396;
  t28559 = t27420*t26675;
  t28556 = t27424*t27426*t26599;
  t28525 = -1.*t26627*t26651*t26608;
  t28549 = -1.*t27424*t27426*t26675;
  t28590 = t27471*t26811;
  t28593 = -1.*t27471*t26848;
  t28596 = -1.*t26887*t27459;
  t27529 = t26627*t26261*t26608;
  t27530 = -1.*t26709*t27481;
  t27534 = t27529 + t27530;
  t28627 = -1.*t27562*t26608;
  t28628 = -1.*t26681*t26675;
  t28633 = t26681*t26599;
  t28639 = t27562*t26675;
  t28634 = t27424*t27571*t26599;
  t28637 = t26627*t26651*t27396;
  t28625 = -1.*t26627*t26651*t26599;
  t28629 = -1.*t27424*t27571*t26675;
  t28661 = t26887*t27598;
  t28664 = t27647*t26811;
  t27587 = t26627*t27396*t26709;
  t27593 = t26261*t27592;
  t27594 = t27587 + t27593;
  t28669 = -1.*t27647*t26848;
  t28670 = -1.*t26887*t26811;
  t28705 = -0.325*t26452;
  t28706 = t26452*t26553;
  t28707 = -1.*t26505*t26476;
  t28708 = t28705 + t28706 + t28707;
  t28626 = t26628*t26662*t26599;
  t28711 = t26628*t26651;
  t28712 = t26627*t26662;
  t28713 = t28711 + t28712;
  t28714 = t26627*t28713*t26599;
  t28715 = t28625 + t28626 + t28628;
  t28716 = t26628*t28715;
  t28717 = t28714 + t28716;
  t27435 = var2[0]*t26964;
  t28725 = t26262*t26807;
  t28726 = t26813*t26709*t26713;
  t28727 = t28725 + t28726;
  t28668 = -1.*t26866*t26767;
  t28738 = -1.*t26627*t26713*t26866;
  t28739 = t26627*t26262*t26887;
  t28740 = t28711 + t28738 + t28739;
  t28742 = t26811*t28740;
  t28743 = t28625 + t28668 + t28670;
  t28744 = t26627*t26262*t28743;
  t28745 = t28742 + t28744;
  t27436 = t26807*t26848;
  t27437 = t26813*t27038;
  t27438 = t27436 + t27437;
  t27444 = var2[2]*t27438;
  t27446 = t26813*t26848;
  t27447 = -1.*t26807*t27038;
  t27451 = t27446 + t27447;
  t27453 = var2[1]*t27451;
  t28720 = -1.*t26813*t26262*t26709;
  t28721 = t26807*t26713;
  t28722 = t28720 + t28721;
  t28734 = t26627*t26813*t26261;
  t28735 = -1.*t26628*t28727;
  t28736 = t28734 + t28735;
  t28686 = -1.*t26976*t26770;
  t28687 = -1.*t27006*t26819;
  t28759 = t26726*t26976;
  t28760 = t26982*t27006;
  t28761 = t28739 + t28759 + t28760;
  t28762 = t26770*t28761;
  t28763 = t28670 + t28686 + t28687;
  t28764 = t26726*t28763;
  t28765 = t28762 + t28764;
  t28750 = -1.*t26594*t28722;
  t28751 = t26106*t28736;
  t28752 = t28750 + t28751;
  t28754 = t26106*t28722;
  t28755 = t26594*t28736;
  t28756 = t28754 + t28755;
  t28796 = -1.*t26627*t26713*t26887;
  t28800 = -1.*t26887*t26767;
  t28802 = -1.*t26866*t26811;
  t28835 = t26627*t26651;
  t28839 = t26628*t27187;
  t27248 = Power(t26713,2);
  t28846 = t26628*t26651*t26599;
  t28849 = -1.*t26627*t27187*t26599;
  t28874 = t26627*t27246*t27157;
  t28878 = -1.*t26262*t26628*t26887;
  t28883 = t26627*t26262*t26599*t26887;
  t28886 = -1.*t26262*t27157*t26811;
  t26780 = var2[0]*t26770;
  t26826 = var2[2]*t26822;
  t26845 = var2[1]*t26843;
  t28946 = -1.*t27424*t27571*t26599;
  t28948 = -1.*t26627*t26651*t27396;
  t28958 = t26627*t26262*t27647;
  t28961 = -1.*t26887*t27598;
  t28964 = -1.*t27647*t26811;
  t28990 = -1.*t27424*t27426*t26599;
  t29016 = t26627*t26262*t27471;
  t29022 = -1.*t27471*t26811;
  p_output1[0]=0.325*t26173*t26261*t26262 + 0.1575*t26628*t26709 + 0.1575*t26261*t26655*t26713 - 0.2255*t26726 - 0.325*t26594*t26736 + 0.075*t26476*t26744 + 0.075*t26547*t26756 + 0.355*(-1.*t26476*t26744 + t26452*t26756) - 0.0641*(t26452*t26744 + t26476*t26756) + t26780 + t26826 + t26845 + var1[0] + t27046*var2[3] + ((-1.*t26807*t26811 - 1.*t26813*t26819)*var2[1] + t26843*var2[2])*var2[3] + t26938*var2[4] + (t26819*var2[0] - 1.*t26807*t27341*var2[1] + t26813*t27341*var2[2] + (t27009*t27038 + t26982*t27043 + t26964*(-1.*t26976*t26982 - 1.*t26726*t27006 - 1.*t26982*t27348 - 1.*t27006*t27357) + t26726*(t26964*t27006 + t26976*t27038 + t27038*t27348 + t27006*t27372))*var2[3])*var2[4] + t26699*var2[5] + (t26261*t27059*var2[0] + (t26767*t26813 + t26709*t26807*t27059)*var2[1] + (t26767*t26807 - 1.*t26709*t26813*t27059)*var2[2] + (-1.*t26261*t26262*t26627*t27043 + t26964*(-1.*t26262*t26627*t26866 + t26261*t26262*t26627*t26976 - 1.*t26262*t26627*t26709*t27006 - 1.*t26261*t26726*t27102 + t26709*t26982*t27102 + t27105) + t26261*t27009*t27118 + t26726*(t26261*t26964*t27102 - 1.*t26709*t27038*t27102 + t26261*t26976*t27118 - 1.*t26709*t27006*t27118 + t27121 + t27123))*var2[3] + (t26899*t26919 - 1.*t26627*t26713*t26934 + t26848*(t26627*t26713*t27102 + t27105) + t26262*t26627*(t26919*t27102 + t26866*t27118 + t27121 + t27123))*var2[4])*var2[5] + t26612*var2[12] + (t27217*var2[0] + (-1.*t26262*t26599*t26627*t26813 - 1.*t26807*t27235)*var2[1] + (-1.*t26262*t26599*t26627*t26807 + t26813*t27235)*var2[2] + (t26736*t27043 + t27009*t27278 + t26964*(-1.*t26736*t26976 + t27247 + t27252 - 1.*t26726*t27287 - 1.*t26982*t27292 - 1.*t27006*t27300) + t26726*(t27256 + t27257 + t26976*t27278 + t26964*t27287 + t27038*t27292 + t27006*t27320))*var2[3] + (-1.*t26262*t26627*t26675*t26899 - 1.*t26262*t26628*t26934 + t26848*(-1.*t26628*t26713*t26866 + t27164 + t27193 + t27247 - 1.*t26627*t27157*t27248 + t27252) + t26262*t26627*(t26627*t26675*t26713*t26866 - 1.*t26713*t26919*t27157 + t27200 + t27203 + t27256 + t27257))*var2[4] + (-1.*t26628*t26665*t26675 + t26627*t26693 + t26627*t26675*(t26628*t26662 - 1.*t26627*t27157 + t27164 + t27193) + t26628*(-1.*t26627*t26662*t26675 - 1.*t26628*t26675*t27157 + t27200 + t27203))*var2[5])*var2[12] + t26583*var2[13] + (t27435 + t27444 + t27453 + (t27009*t27503 + t26964*(t27472 - 1.*t26726*t27518 - 1.*t26982*t27524) + t26726*(t27477 + t27484 + t26976*t27503 + t26964*t27518 + t27038*t27524 + t27006*t27534))*var2[3] + (t26899*t27459 + t26848*(-1.*t26627*t26628*t27426 + t26627*t26713*t27465 + t27472) + t26262*t26627*(t27408 + t27427 + t26919*t27465 + t27477 + t26866*t27481 + t27484))*var2[4] + (t26608*t26627*t26665 + t26628*(-1.*t26608*t26628*t26662 + t26681*t27396 + t27408 + t26608*t27420 + t27427 + t26675*t27426*t27428))*var2[5] + (0.1575*t26675 + 0.2255*t27396)*var2[12])*var2[13] - 0.0641*var2[14] + (t27594*var2[0] + (t26813*t27598 - 1.*t26807*t27608)*var2[1] + (t26807*t27598 + t26813*t27608)*var2[2] + (t26770*t27009 + t26964*(t27648 - 1.*t26726*t27672 - 1.*t26982*t27691) + t26726*(t27653 + t27654 + t26964*t27672 + t27038*t27691 + t27697 + t27698))*var2[3] + (t26811*t26899 + t26848*(-1.*t26627*t26628*t27571 + t26627*t26713*t27629 + t27648) + t26262*t26627*(t27559 + t27572 + t26919*t27629 + t27652 + t27653 + t27654))*var2[4] + (t26599*t26627*t26665 + t26628*(t27559 + t27560 + t26608*t27562 + t27564 + t26675*t27428*t27571 + t27572))*var2[5] + (0.2255*t26675 + 0.1575*t27396)*var2[12] + (0.325*t26452 - 1.*t26452*t26553 - 1.*t26452*t27548)*var2[13])*var2[14] + t26770*var3[0] + t26843*var3[1] + t26822*var3[2] + t27046*var3[3] + t26938*var3[4] + t26699*var3[5] + t26612*var3[12] + t26583*var3[13] - 0.0641*var3[14] - 1.*var4[0];
  p_output1[1]=-0.1575*t26261*t26628*t26807 + 0.325*t26173*t27759 - 0.1575*t26655*t27766 - 0.2255*(-1.*t26261*t26628*t26807 + t26627*t27766) - 0.325*t26594*t27910 + 0.075*t26476*t28017 + 0.075*t26547*t28026 + 0.355*(-1.*t26476*t28017 + t26452*t28026) - 0.0641*(t26452*t28017 + t26476*t28026) + var1[1] + t26726*var2[0] + t27776*var2[1] + t27770*var2[2] + t28039*var2[3] + ((-1.*t26262*t26627*t26807 - 1.*t26813*t26982)*var2[1] + t27776*var2[2])*var2[3] + t27929*var2[4] + (t26982*var2[0] - 1.*t26807*t27357*var2[1] + t26813*t27357*var2[2] + (t26964*(t26819*t26976 + t26770*t27006 + t27006*t27341 + t26819*t27348) + t26770*(-1.*t26964*t27006 - 1.*t26976*t27038 - 1.*t27038*t27348 - 1.*t27006*t27372) + t27038*t28033 + t26819*t28037)*var2[3])*var2[4] + t27736*var2[5] + (-1.*t26261*t26262*t26627*var2[0] + (-1.*t26262*t26627*t26709*t26807 - 1.*t26627*t26713*t26813)*var2[1] + (-1.*t26627*t26713*t26807 + t26262*t26627*t26709*t26813)*var2[2] + (t26261*t27118*t28033 + t26261*t27059*t28037 + t26964*(t26261*t26976*t27059 - 1.*t26709*t27006*t27059 + t26261*t26770*t27102 - 1.*t26709*t26819*t27102 + t28377 + t28379) + t26770*(-1.*t26261*t26964*t27102 + t26709*t27038*t27102 - 1.*t26261*t26976*t27118 + t26709*t27006*t27118 + t28394 + t28396))*var2[3] + (t26919*t27915 + t26767*t27927 + t26848*(t26866*t27059 + t26767*t27102 + t28377 + t28379) + t26811*(-1.*t26919*t27102 - 1.*t26866*t27118 + t28394 + t28396))*var2[4])*var2[5] + t27749*var2[12] + (t26736*var2[0] + (-1.*t26262*t26628*t26813 - 1.*t26807*t27300)*var2[1] + (-1.*t26262*t26628*t26807 + t26813*t27300)*var2[2] + (t27278*t28033 + t27217*t28037 + t26964*(t26976*t27217 + t27006*t27235 + t26770*t27287 + t26819*t27292 + t28162 + t28164) + t26770*(-1.*t26976*t27278 - 1.*t26964*t27287 - 1.*t27038*t27292 - 1.*t27006*t27320 + t28192 + t28196))*var2[3] + (-1.*t26262*t26627*t26675*t27915 - 1.*t26262*t26599*t26627*t27927 + t26848*(t26599*t26627*t26713*t26866 - 1.*t26713*t26767*t27157 + t28108 + t28110 + t28162 + t28164) + t26811*(-1.*t26627*t26675*t26713*t26866 + t26713*t26919*t27157 + t28116 + t28131 + t28192 + t28196))*var2[4] + (-1.*t26599*t26628*t27729 - 1.*t26628*t26675*t27732 + t26627*t26675*(-1.*t26599*t26627*t26662 - 1.*t26599*t26628*t27157 + t28108 + t28110) + t26599*t26627*(t26627*t26662*t26675 + t26628*t26675*t27157 + t28116 + t28131))*var2[5])*var2[12] + ((t27503*t28033 + t26964*t28037 + t26964*(t26905 + t27012 + t27041 + t26770*t27518 + t26819*t27524 + t28590) + t26770*(-1.*t26976*t27503 - 1.*t26964*t27518 - 1.*t27038*t27524 - 1.*t27006*t27534 + t28593 + t28596))*var2[3] + (t27459*t27915 + t26848*t27927 + t26848*(t26685 + t26905 + t26925 + t26767*t27465 + t28556 + t28590) + t26811*(-1.*t26919*t27465 - 1.*t26866*t27481 + t28525 + t28549 + t28593 + t28596))*var2[4] + (t26627*t26675*t27729 + t26608*t26627*t27732 + t26599*t26627*(t26608*t26628*t26662 - 1.*t26675*t27426*t27428 + t28525 + t28527 + t28528 + t28549) + t26627*t26675*(t26682 + t26685 + t26691 + t26599*t27426*t27428 + t28556 + t28559))*var2[5] + (t27396*t27744 + t26608*t27747 + t26675*(-1.*t26608*t26646 - 1.*t26675*t27426 + t28527 + t28528) + t26608*(t26646*t26675 + t26682 + t26599*t27426 + t28559))*var2[12])*var2[13] + ((t26770*t28033 + t27594*t28037 + t26964*(t26976*t27594 + t27006*t27608 + t26770*t27672 + t26819*t27691 + t28661 + t28664) + t26770*(-1.*t26964*t27672 - 1.*t27038*t27691 + t28669 + t28670 + t28686 + t28687))*var2[3] + (t26811*t27915 + t27598*t27927 + t26848*(t26866*t27592 + t26767*t27629 + t28634 + t28637 + t28661 + t28664) + t26811*(-1.*t26919*t27629 + t28625 + t28629 + t28668 + t28669 + t28670))*var2[4] + (t26627*t27396*t27729 + t26599*t26627*t27732 + t26599*t26627*(-1.*t26675*t27428*t27571 + t28625 + t28626 + t28627 + t28628 + t28629) + t26627*t26675*(-1.*t26628*t26662*t27396 + t26599*t27428*t27571 + t28633 + t28634 + t28637 + t28639))*var2[5] + (t26675*t27744 + t26599*t27747 + t26675*(-1.*t26599*t26646 - 1.*t26675*t27571 + t28627 + t28628) + t26608*(t26646*t27396 + t26599*t27571 + t28633 + t28639))*var2[12])*var2[14] + t26726*var3[0] + t27776*var3[1] + t27770*var3[2] + t28039*var3[3] + t27929*var3[4] + t27736*var3[5] + t27749*var3[12] - 1.*var4[1];
  p_output1[2]=0.1575*t26261*t26628*t26813 + t27435 + t27444 + t27453 + 0.325*t26173*t28722 - 0.1575*t26655*t28727 - 0.2255*(t26261*t26628*t26813 + t26627*t28727) - 0.325*t26594*t28736 + 0.075*t26476*t28752 + 0.075*t26547*t28756 + 0.355*(-1.*t26476*t28752 + t26452*t28756) - 0.0641*(t26452*t28752 + t26476*t28756) + var1[2] + t28765*var2[3] + ((-1.*t26807*t26848 - 1.*t26813*t27038)*var2[1] + t27451*var2[2])*var2[3] + t28745*var2[4] + (t27038*var2[0] - 1.*t26807*t27372*var2[1] + t26813*t27372*var2[2] + (t26726*(-1.*t26819*t26976 - 1.*t26770*t27006 - 1.*t27006*t27341 - 1.*t26819*t27348) + t26770*(t26976*t26982 + t26726*t27006 + t26982*t27348 + t27006*t27357) + t26819*t28761 + t26982*t28763)*var2[3])*var2[4] + t28717*var2[5] + (t26261*t27118*var2[0] + (t26813*t26919 + t26709*t26807*t27118)*var2[1] + (t26807*t26919 - 1.*t26709*t26813*t27118)*var2[2] + (t26261*t27059*t28761 - 1.*t26261*t26262*t26627*t28763 + t26770*(t26262*t26627*t26866 - 1.*t26261*t26262*t26627*t26976 + t26262*t26627*t26709*t27006 + t26261*t26726*t27102 - 1.*t26709*t26982*t27102 + t28796) + t26726*(-1.*t26261*t26976*t27059 + t26709*t27006*t27059 - 1.*t26261*t26770*t27102 + t26709*t26819*t27102 + t28800 + t28802))*var2[3] + (t26767*t28740 - 1.*t26627*t26713*t28743 + t26811*(-1.*t26627*t26713*t27102 + t28796) + t26262*t26627*(-1.*t26866*t27059 - 1.*t26767*t27102 + t28800 + t28802))*var2[4])*var2[5] - 0.068*t26675*var2[12] + (t27278*var2[0] + (-1.*t26262*t26627*t26675*t26813 - 1.*t26807*t27320)*var2[1] + (-1.*t26262*t26627*t26675*t26807 + t26813*t27320)*var2[2] + (t27217*t28761 + t26736*t28763 + t26770*(t26736*t26976 + t26726*t27287 + t26982*t27292 + t27006*t27300 + t28874 + t28878) + t26726*(-1.*t26976*t27217 - 1.*t27006*t27235 - 1.*t26770*t27287 - 1.*t26819*t27292 + t28883 + t28886))*var2[3] + (-1.*t26262*t26599*t26627*t28740 - 1.*t26262*t26628*t28743 + t26811*(t26628*t26713*t26866 + t26627*t27157*t27248 + t28835 + t28839 + t28874 + t28878) + t26262*t26627*(-1.*t26599*t26627*t26713*t26866 + t26713*t26767*t27157 + t28846 + t28849 + t28883 + t28886))*var2[4] + (-1.*t26599*t26628*t28713 + t26627*t28715 + t26599*t26627*(-1.*t26628*t26662 + t26627*t27157 + t28835 + t28839) + t26628*(t26599*t26627*t26662 + t26599*t26628*t27157 + t28846 + t28849))*var2[5])*var2[12] + t28708*var2[13] + (t27503*var2[0] + (t26813*t27459 - 1.*t26807*t27534)*var2[1] + (t26807*t27459 + t26813*t27534)*var2[2] + (t26964*t28761 + t26770*(t26726*t27518 + t26982*t27524 + t29016) + t26726*(-1.*t26770*t27518 - 1.*t26819*t27524 + t27925 + t28035 + t28036 + t29022))*var2[3] + (t26848*t28740 + t26811*(t26627*t26628*t27426 - 1.*t26627*t26713*t27465 + t29016) + t26262*t26627*(-1.*t26767*t27465 + t27726 + t27925 + t27926 + t28990 + t29022))*var2[4] + (t26627*t26675*t28713 + t26628*(-1.*t26675*t27420 - 1.*t26599*t27426*t27428 + t27725 + t27726 + t27727 + t28990))*var2[5] - 0.068*t26608*var2[12])*var2[13] - 0.28*var2[14] + (t26780 + t26826 + t26845 + (t27594*t28761 + t26770*(t26726*t27672 + t26982*t27691 + t28958) + t26726*(-1.*t26976*t27594 - 1.*t27006*t27608 - 1.*t26770*t27672 - 1.*t26819*t27691 + t28961 + t28964))*var2[3] + (t27598*t28740 + t26811*(t26627*t26628*t27571 - 1.*t26627*t26713*t27629 + t28958) + t26262*t26627*(-1.*t26866*t27592 - 1.*t26767*t27629 + t28946 + t28948 + t28961 + t28964))*var2[4] + (t26627*t27396*t28713 + t26628*(-1.*t26599*t26681 + t26628*t26662*t27396 - 1.*t26675*t27562 - 1.*t26599*t27428*t27571 + t28946 + t28948))*var2[5] - 0.068*t26599*var2[12] + (t26540 + t26582 - 1.*t26476*t27548)*var2[13])*var2[14] + t26964*var3[0] + t27451*var3[1] + t27438*var3[2] + t28765*var3[3] + t28745*var3[4] + t28717*var3[5] - 0.068*t26675*var3[12] + t28708*var3[13] - 0.28*var3[14] - 1.*var4[2];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "ddh_FrFoot_ParallelStance.hh"

namespace ParallelStance
{

void ddh_FrFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
