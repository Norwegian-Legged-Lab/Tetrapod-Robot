/*
 * Automatically Generated from Mathematica.
 * Thu 12 May 2022 11:33:22 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t11816;
  double t12177;
  double t11833;
  double t12189;
  double t12273;
  double t12286;
  double t12289;
  double t12296;
  double t12347;
  double t12358;
  double t12361;
  double t12383;
  double t12405;
  double t12406;
  double t12408;
  double t11576;
  double t12437;
  double t12438;
  double t12443;
  double t12444;
  double t12446;
  double t12449;
  double t12450;
  double t12451;
  double t12452;
  double t12453;
  double t12469;
  double t12467;
  double t12474;
  double t12482;
  double t12484;
  double t12486;
  double t11624;
  double t11625;
  double t12470;
  double t12488;
  double t12491;
  double t12505;
  double t12506;
  double t12507;
  double t12493;
  double t12494;
  double t12496;
  double t12498;
  double t12500;
  double t12501;
  double t12492;
  double t12502;
  double t12503;
  double t12508;
  double t12509;
  double t12512;
  double t12514;
  double t12515;
  double t12517;
  double t12518;
  double t12521;
  double t12526;
  double t12528;
  double t12535;
  double t11643;
  double t12579;
  double t12596;
  double t11653;
  double t12635;
  double t12636;
  double t12639;
  double t12710;
  double t12714;
  double t12715;
  double t12716;
  double t12717;
  double t12719;
  double t12644;
  double t12645;
  double t12680;
  double t12703;
  double t12705;
  double t12708;
  double t12757;
  double t12758;
  double t12759;
  double t12760;
  double t12761;
  double t12762;
  double t12764;
  double t12766;
  double t12781;
  double t12788;
  double t12789;
  double t12795;
  double t12807;
  double t12808;
  double t12859;
  double t12863;
  double t12870;
  double t12834;
  double t12835;
  double t12837;
  double t12838;
  double t12847;
  double t12853;
  double t12857;
  double t12871;
  double t12878;
  double t12882;
  double t12883;
  double t12885;
  double t12886;
  double t12887;
  double t12895;
  double t12913;
  double t12924;
  double t12925;
  double t12599;
  double t12600;
  double t12613;
  double t12991;
  double t12993;
  double t12995;
  double t12962;
  double t12963;
  double t12969;
  double t13000;
  double t13006;
  double t13014;
  double t12996;
  double t12997;
  double t12998;
  double t12999;
  double t13017;
  double t13018;
  double t13020;
  double t13023;
  double t13034;
  double t13041;
  double t13048;
  double t13051;
  double t13052;
  double t13053;
  double t13057;
  double t13061;
  double t13062;
  double t13077;
  double t13276;
  double t13278;
  double t13283;
  double t13293;
  double t13300;
  double t13301;
  double t13310;
  double t13314;
  double t13324;
  double t13370;
  double t13372;
  double t13373;
  double t13385;
  double t13387;
  double t13451;
  double t13456;
  double t13457;
  double t13381;
  double t13393;
  double t13402;
  double t13406;
  double t13472;
  double t13473;
  double t13480;
  double t13485;
  double t13486;
  double t13500;
  double t13505;
  double t13513;
  double t13520;
  double t13521;
  double t13528;
  double t13531;
  double t13533;
  double t13534;
  double t13617;
  double t13618;
  double t13625;
  double t13643;
  double t13644;
  double t13658;
  double t13726;
  double t13729;
  double t13731;
  double t13759;
  double t13761;
  double t13744;
  double t13747;
  double t13749;
  double t13752;
  double t13740;
  double t13756;
  double t13762;
  double t13824;
  double t13826;
  double t13827;
  double t13791;
  double t13794;
  double t13801;
  double t13809;
  double t13810;
  double t13822;
  double t13838;
  double t13840;
  double t13847;
  double t13829;
  double t13833;
  double t13852;
  double t13898;
  double t13899;
  double t13900;
  double t13904;
  double t13905;
  double t13907;
  double t13909;
  double t13910;
  double t13912;
  double t14025;
  double t14026;
  double t14057;
  double t13764;
  double t14121;
  double t14122;
  double t14123;
  double t14143;
  double t14149;
  double t14151;
  double t14175;
  double t14178;
  double t14182;
  double t14221;
  double t14227;
  double t14231;
  double t14097;
  double t14098;
  double t14095;
  double t14124;
  double t14292;
  double t14295;
  double t14297;
  double t14273;
  double t14283;
  double t14289;
  double t14299;
  double t14303;
  double t14304;
  double t14312;
  double t14333;
  double t14350;
  double t14354;
  double t14381;
  double t14383;
  double t14096;
  double t14118;
  double t14425;
  double t14426;
  double t14430;
  double t14432;
  double t14434;
  double t14437;
  double t14438;
  double t14439;
  double t14469;
  double t14473;
  double t14481;
  double t14482;
  double t14483;
  double t14493;
  double t14494;
  double t14527;
  double t14536;
  double t14542;
  double t14554;
  double t14555;
  double t14558;
  double t14521;
  double t14523;
  double t14524;
  double t14302;
  double t14586;
  double t14587;
  double t14588;
  double t14590;
  double t14591;
  double t14592;
  double t14594;
  double t14507;
  double t14508;
  double t14511;
  double t14573;
  double t14574;
  double t14578;
  double t14391;
  double t14392;
  double t14661;
  double t14662;
  double t14666;
  double t14667;
  double t14670;
  double t14678;
  double t14679;
  double t14637;
  double t14641;
  double t14642;
  double t14647;
  double t14658;
  double t14659;
  double t13549;
  double t13552;
  double t13554;
  double t14699;
  double t14702;
  double t14708;
  double t14714;
  double t14768;
  double t14770;
  double t13416;
  double t13417;
  double t13428;
  double t14776;
  double t14777;
  double t13574;
  double t13576;
  double t13578;
  double t14828;
  double t14831;
  double t14849;
  double t14854;
  double t13664;
  double t13668;
  double t13672;
  double t13704;
  double t13706;
  double t13708;
  double t14959;
  double t14960;
  double t14975;
  double t14968;
  double t14957;
  double t14961;
  double t15042;
  double t15045;
  double t15051;
  double t13936;
  double t13941;
  double t13943;
  double t15103;
  double t15104;
  double t15111;
  double t15129;
  double t15114;
  double t15121;
  double t15100;
  double t15105;
  double t15181;
  double t15185;
  double t14142;
  double t14168;
  double t14169;
  double t15194;
  double t15196;
  double t15250;
  double t15251;
  double t15252;
  double t15253;
  double t15101;
  double t15256;
  double t15257;
  double t15258;
  double t15262;
  double t15263;
  double t15264;
  double t15265;
  double t13774;
  double t15272;
  double t15273;
  double t15274;
  double t15191;
  double t15285;
  double t15286;
  double t15287;
  double t15288;
  double t15289;
  double t15291;
  double t15292;
  double t13776;
  double t13777;
  double t13778;
  double t13779;
  double t13780;
  double t13781;
  double t13783;
  double t13789;
  double t15268;
  double t15269;
  double t15270;
  double t15281;
  double t15282;
  double t15283;
  double t15230;
  double t15231;
  double t15305;
  double t15306;
  double t15307;
  double t15308;
  double t15309;
  double t15310;
  double t15311;
  double t15297;
  double t15298;
  double t15299;
  double t15301;
  double t15302;
  double t15303;
  double t15340;
  double t15344;
  double t15346;
  double t15373;
  double t15375;
  double t13475;
  double t15379;
  double t15381;
  double t15397;
  double t15400;
  double t15404;
  double t15406;
  double t12724;
  double t12793;
  double t12831;
  double t15457;
  double t15459;
  double t15469;
  double t15472;
  double t15475;
  double t15497;
  double t15516;
  double t15520;
  t11816 = Cos(var1[14]);
  t12177 = Sin(var1[14]);
  t11833 = -0.0641*t11816;
  t12189 = -0.28*t12177;
  t12273 = t11833 + t12189;
  t12286 = -1.*t11816*t12273;
  t12289 = 0.325*t12177;
  t12296 = -1.*t11816;
  t12347 = 1. + t12296;
  t12358 = 0.075*t12347;
  t12361 = 0.355*t11816;
  t12383 = -0.0641*t12177;
  t12405 = t12358 + t12361 + t12383;
  t12406 = -1.*t12405*t12177;
  t12408 = t12286 + t12289 + t12406;
  t11576 = Cos(var1[13]);
  t12437 = Sin(var1[13]);
  t12438 = t11816*t12437;
  t12443 = -1.*t11576*t12177;
  t12444 = t12438 + t12443;
  t12446 = 0.1575*t12444;
  t12449 = -1.*t11816*t12437;
  t12450 = t11576*t12177;
  t12451 = t12449 + t12450;
  t12452 = 0.2255*t12451;
  t12453 = t12446 + t12452;
  t12469 = Sin(var1[12]);
  t12467 = Cos(var1[12]);
  t12474 = -0.325*t12437;
  t12482 = t11576*t12273;
  t12484 = t12437*t12405;
  t12486 = t12474 + t12482 + t12484;
  t11624 = -1.*t11576;
  t11625 = 1. + t11624;
  t12470 = -0.068*t12469;
  t12488 = t12467*t12486;
  t12491 = t12470 + t12488;
  t12505 = t11576*t11816;
  t12506 = t12437*t12177;
  t12507 = t12505 + t12506;
  t12493 = -1.*t12467;
  t12494 = 1. + t12493;
  t12496 = -0.1575*t12494;
  t12498 = -0.2255*t12467;
  t12500 = -1.*t12469*t12486;
  t12501 = t12496 + t12498 + t12500;
  t12492 = -1.*t12469*t12491;
  t12502 = -1.*t12467*t12501;
  t12503 = t12492 + t12502;
  t12508 = t12467*t12503*t12507;
  t12509 = 0.325*t11625;
  t12512 = -1.*t12437*t12273;
  t12514 = t11576*t12405;
  t12515 = t12509 + t12512 + t12514;
  t12517 = t12515*t12451;
  t12518 = t12467*t12491*t12507;
  t12521 = -1.*t12469*t12501*t12507;
  t12526 = t12517 + t12518 + t12521;
  t12528 = t12469*t12526;
  t12535 = t12508 + t12528;
  t11643 = Cos(var1[4]);
  t12579 = Sin(var1[4]);
  t12596 = Sin(var1[5]);
  t11653 = Cos(var1[5]);
  t12635 = t12467*t12579;
  t12636 = t11643*t12469*t12596;
  t12639 = t12635 + t12636;
  t12710 = t12467*t12444*t12579;
  t12714 = t11653*t12507;
  t12715 = t12469*t12444*t12596;
  t12716 = t12714 + t12715;
  t12717 = t11643*t12716;
  t12719 = t12710 + t12717;
  t12644 = -1.*t11643*t11653*t12437;
  t12645 = t11576*t12639;
  t12680 = t12644 + t12645;
  t12703 = t11576*t11643*t11653;
  t12705 = t12437*t12639;
  t12708 = t12703 + t12705;
  t12757 = Sin(var1[3]);
  t12758 = -1.*t11653*t12469*t12444;
  t12759 = t12507*t12596;
  t12760 = t12758 + t12759;
  t12761 = t12757*t12760;
  t12762 = Cos(var1[3]);
  t12764 = t12467*t11643*t12444;
  t12766 = -1.*t12579*t12716;
  t12781 = t12764 + t12766;
  t12788 = t12762*t12781;
  t12789 = t12761 + t12788;
  t12795 = t12762*t12760;
  t12807 = -1.*t12757*t12781;
  t12808 = t12795 + t12807;
  t12859 = t11653*t12501;
  t12863 = t12515*t12596;
  t12870 = t12859 + t12863;
  t12834 = -1.*t11653*t12469*t12507;
  t12835 = t12451*t12596;
  t12837 = t12834 + t12835;
  t12838 = t11653*t12515;
  t12847 = -1.*t12501*t12596;
  t12853 = t12838 + t12847;
  t12857 = t12467*t12596*t12853;
  t12871 = -1.*t12467*t11653*t12870;
  t12878 = t12492 + t12857 + t12871;
  t12882 = t12837*t12878;
  t12883 = t12870*t12837;
  t12885 = t11653*t12451;
  t12886 = t12469*t12507*t12596;
  t12887 = t12885 + t12886;
  t12895 = t12853*t12887;
  t12913 = t12518 + t12883 + t12895;
  t12924 = t12467*t11653*t12913;
  t12925 = t12882 + t12924;
  t12599 = t12469*t12579;
  t12600 = -1.*t12467*t11643*t12596;
  t12613 = t12599 + t12600;
  t12991 = t12491*t12579;
  t12993 = t11643*t12853;
  t12995 = t12991 + t12993;
  t12962 = t12467*t12507*t12579;
  t12963 = t11643*t12887;
  t12969 = t12962 + t12963;
  t13000 = t11643*t12491;
  t13006 = -1.*t12579*t12853;
  t13014 = t13000 + t13006;
  t12996 = -1.*t12613*t12995;
  t12997 = t11643*t12469;
  t12998 = t12467*t12579*t12596;
  t12999 = t12997 + t12998;
  t13017 = -1.*t12999*t13014;
  t13018 = t12871 + t12996 + t13017;
  t13020 = t12969*t13018;
  t13023 = t12995*t12969;
  t13034 = t12467*t11643*t12507;
  t13041 = -1.*t12579*t12887;
  t13048 = t13034 + t13041;
  t13051 = t13014*t13048;
  t13052 = t12883 + t13023 + t13051;
  t13053 = t12613*t13052;
  t13057 = t13020 + t13053;
  t13061 = t11653*t12469*t12444;
  t13062 = -1.*t12507*t12596;
  t13077 = t13061 + t13062;
  t13276 = -1.*t11653*t12501;
  t13278 = -1.*t12515*t12596;
  t13283 = t13276 + t13278;
  t13293 = t12467*t12596*t12870;
  t13300 = t11653*t12469*t12507;
  t13301 = -1.*t12451*t12596;
  t13310 = t13300 + t13301;
  t13314 = t12853*t12837;
  t13324 = t12870*t12887;
  t13370 = 0.068*t12469;
  t13372 = -1.*t12467*t12486;
  t13373 = t13370 + t13372;
  t13385 = -0.068*t12467;
  t13387 = t13385 + t12500;
  t13451 = -1.*t11643*t12469*t12444;
  t13456 = -1.*t12467*t12444*t12579*t12596;
  t13457 = t13451 + t13456;
  t13381 = -1.*t12467*t12491;
  t13393 = -1.*t12469*t13387;
  t13402 = -1.*t12469*t12491*t12507;
  t13406 = t12467*t13387*t12507;
  t13472 = Power(t11653,2);
  t13473 = -1.*t12467*t13472*t13373;
  t13480 = t11653*t12469*t12870;
  t13485 = -1.*t12467*t11653*t12507*t12870;
  t13486 = t11653*t13373*t12837;
  t13500 = -1.*t12469*t12507*t12579;
  t13505 = t12467*t11643*t12507*t12596;
  t13513 = t13500 + t13505;
  t13520 = t13387*t12579;
  t13521 = -1.*t11643*t13373*t12596;
  t13528 = t13520 + t13521;
  t13531 = t11643*t13387;
  t13533 = t13373*t12579*t12596;
  t13534 = t13531 + t13533;
  t13617 = -1.*t12467*t12444*t12579;
  t13618 = -1.*t11643*t12716;
  t13625 = t13617 + t13618;
  t13643 = -1.*t12491*t12579;
  t13644 = -1.*t11643*t12853;
  t13658 = t13643 + t13644;
  t13726 = -1.*t11576*t11816;
  t13729 = -1.*t12437*t12177;
  t13731 = t13726 + t13729;
  t13759 = -0.325*t11576;
  t13761 = t13759 + t12512 + t12514;
  t13744 = 0.325*t12437;
  t13747 = -1.*t11576*t12273;
  t13749 = -1.*t12437*t12405;
  t13752 = t13744 + t13747 + t13749;
  t13740 = t12467*t12491*t12451;
  t13756 = Power(t12467,2);
  t13762 = t13756*t13761*t12507;
  t13824 = -1.*t11653*t12469*t13761;
  t13826 = t13752*t12596;
  t13827 = t13824 + t13826;
  t13791 = -1.*t11653*t12469*t12451;
  t13794 = t13731*t12596;
  t13801 = t13791 + t13794;
  t13809 = t11653*t13752;
  t13810 = t12469*t13761*t12596;
  t13822 = t13809 + t13810;
  t13838 = t11653*t13731;
  t13840 = t12469*t12451*t12596;
  t13847 = t13838 + t13840;
  t13829 = -1.*t12467*t11653*t13827;
  t13833 = t13827*t12837;
  t13852 = t12870*t13801;
  t13898 = t12467*t12451*t12579;
  t13899 = t11643*t13847;
  t13900 = t13898 + t13899;
  t13904 = t12467*t13761*t12579;
  t13905 = t11643*t13822;
  t13907 = t13904 + t13905;
  t13909 = t12467*t11643*t13761;
  t13910 = -1.*t12579*t13822;
  t13912 = t13909 + t13910;
  t14025 = -0.28*t11816;
  t14026 = 0.0641*t12177;
  t14057 = t14025 + t14026;
  t13764 = Power(t12469,2);
  t14121 = t12437*t12273;
  t14122 = t11576*t14057;
  t14123 = t14121 + t14122;
  t14143 = t11653*t12444;
  t14149 = t12469*t13731*t12596;
  t14151 = t14143 + t14149;
  t14175 = -1.*t11653*t12469*t13731;
  t14178 = t12444*t12596;
  t14182 = t14175 + t14178;
  t14221 = t12467*t11643*t13731;
  t14227 = -1.*t12579*t14151;
  t14231 = t14221 + t14227;
  t14097 = -1.*t12437*t14057;
  t14098 = t12482 + t14097;
  t14095 = t12467*t12491*t12444;
  t14124 = t13756*t14123*t12507;
  t14292 = -1.*t11653*t12469*t14123;
  t14295 = t14098*t12596;
  t14297 = t14292 + t14295;
  t14273 = t11653*t14098;
  t14283 = t12469*t14123*t12596;
  t14289 = t14273 + t14283;
  t14299 = -1.*t12467*t11653*t14297;
  t14303 = t14297*t12837;
  t14304 = t12870*t12760;
  t14312 = t12467*t14123*t12579;
  t14333 = t11643*t14289;
  t14350 = t14312 + t14333;
  t14354 = t12467*t11643*t14123;
  t14381 = -1.*t12579*t14289;
  t14383 = t14354 + t14381;
  t14096 = -1.*t12469*t12501*t12444;
  t14118 = t12515*t12507;
  t14425 = -1.*t12515*t12451;
  t14426 = -1.*t12467*t12491*t12507;
  t14430 = t12469*t12501*t12507;
  t14432 = t14425 + t14426 + t14430;
  t14434 = t12467*t12444*t14432;
  t14437 = t14095 + t14096 + t14118;
  t14438 = t12467*t12507*t14437;
  t14439 = t14434 + t14438;
  t14469 = t12486*t12444;
  t14473 = t14469 + t14118;
  t14481 = t12451*t14473;
  t14482 = -1.*t12486*t12507;
  t14483 = t14425 + t14482;
  t14493 = t12507*t14483;
  t14494 = t14481 + t14493;
  t14527 = t12467*t11653*t12757;
  t14536 = t12762*t12999;
  t14542 = t14527 + t14536;
  t14554 = t12467*t12762*t11653;
  t14555 = -1.*t12757*t12999;
  t14558 = t14554 + t14555;
  t14521 = t12762*t11653;
  t14523 = -1.*t12757*t12579*t12596;
  t14524 = t14521 + t14523;
  t14302 = t12853*t12716;
  t14586 = t14095 + t14302 + t14304;
  t14587 = t12837*t14586;
  t14588 = -1.*t12870*t12837;
  t14590 = -1.*t12853*t12887;
  t14591 = t14426 + t14588 + t14590;
  t14592 = t12760*t14591;
  t14594 = t14587 + t14592;
  t14507 = t11653*t12757*t12579;
  t14508 = t12762*t12596;
  t14511 = t14507 + t14508;
  t14573 = -1.*t12467*t11643*t12757;
  t14574 = -1.*t12469*t14524;
  t14578 = t14573 + t14574;
  t14391 = t12995*t12719;
  t14392 = t13014*t12781;
  t14661 = t14304 + t14391 + t14392;
  t14662 = t12969*t14661;
  t14666 = -1.*t12995*t12969;
  t14667 = -1.*t13014*t13048;
  t14670 = t14588 + t14666 + t14667;
  t14678 = t12719*t14670;
  t14679 = t14662 + t14678;
  t14637 = -1.*t12437*t14511;
  t14641 = t11576*t14578;
  t14642 = t14637 + t14641;
  t14647 = t11576*t14511;
  t14658 = t12437*t14578;
  t14659 = t14647 + t14658;
  t13549 = t12467*t11643;
  t13552 = -1.*t12469*t12579*t12596;
  t13554 = t13549 + t13552;
  t14699 = -1.*t12469*t12491*t12444;
  t14702 = t12467*t13387*t12444;
  t14708 = t12469*t12491*t12507;
  t14714 = -1.*t12467*t13387*t12507;
  t14768 = -1.*t12467*t11653*t12444*t12870;
  t14770 = t11653*t13373*t12760;
  t13416 = -1.*t12469*t12444*t12579;
  t13417 = t12467*t11643*t12444*t12596;
  t13428 = t13416 + t13417;
  t14776 = t12467*t11653*t12507*t12870;
  t14777 = -1.*t11653*t13373*t12837;
  t13574 = -1.*t11643*t12469*t12507;
  t13576 = -1.*t12467*t12507*t12579*t12596;
  t13578 = t13574 + t13576;
  t14828 = t12870*t12716;
  t14831 = t12853*t12760;
  t14849 = -1.*t12853*t12837;
  t14854 = -1.*t12870*t12887;
  t13664 = -1.*t12469*t12579;
  t13668 = t12467*t11643*t12596;
  t13672 = t13664 + t13668;
  t13704 = -1.*t12467*t12507*t12579;
  t13706 = -1.*t11643*t12887;
  t13708 = t13704 + t13706;
  t14959 = -1.*t13752*t12451;
  t14960 = -1.*t12515*t13731;
  t14975 = t13752*t12507;
  t14968 = t13756*t13761*t12444;
  t14957 = -1.*t12467*t12491*t12451;
  t14961 = -1.*t13756*t13761*t12507;
  t15042 = t13827*t12760;
  t15045 = -1.*t13827*t12837;
  t15051 = -1.*t12870*t13801;
  t13936 = t12467*t11643*t12451;
  t13941 = -1.*t12579*t13847;
  t13943 = t13936 + t13941;
  t15103 = -1.*t14098*t12451;
  t15104 = -1.*t12515*t12507;
  t15111 = t12515*t12444;
  t15129 = t14098*t12507;
  t15114 = t13756*t14123*t12444;
  t15121 = t12467*t12491*t13731;
  t15100 = -1.*t12467*t12491*t12444;
  t15105 = -1.*t13756*t14123*t12507;
  t15181 = t12870*t14182;
  t15185 = t14297*t12760;
  t14142 = t12467*t13731*t12579;
  t14168 = t11643*t14151;
  t14169 = t14142 + t14168;
  t15194 = -1.*t14297*t12837;
  t15196 = -1.*t12870*t12760;
  t15250 = -0.325*t11816;
  t15251 = t11816*t12405;
  t15252 = -1.*t12273*t12177;
  t15253 = t15250 + t15251 + t15252;
  t15101 = t12469*t12501*t12444;
  t15256 = t12469*t12491;
  t15257 = t12467*t12501;
  t15258 = t15256 + t15257;
  t15262 = t12467*t15258*t12444;
  t15263 = t15100 + t15101 + t15104;
  t15264 = t12469*t15263;
  t15265 = t15262 + t15264;
  t13774 = var2[0]*t12969;
  t15272 = t11653*t12757;
  t15273 = t12762*t12579*t12596;
  t15274 = t15272 + t15273;
  t15191 = -1.*t12853*t12716;
  t15285 = -1.*t12467*t12596*t12853;
  t15286 = t12467*t11653*t12870;
  t15287 = t15256 + t15285 + t15286;
  t15288 = t12760*t15287;
  t15289 = t15100 + t15191 + t15196;
  t15291 = t12467*t11653*t15289;
  t15292 = t15288 + t15291;
  t13776 = t12757*t12837;
  t13777 = t12762*t13048;
  t13778 = t13776 + t13777;
  t13779 = var2[2]*t13778;
  t13780 = t12762*t12837;
  t13781 = -1.*t12757*t13048;
  t13783 = t13780 + t13781;
  t13789 = var2[1]*t13783;
  t15268 = -1.*t12762*t11653*t12579;
  t15269 = t12757*t12596;
  t15270 = t15268 + t15269;
  t15281 = t12467*t12762*t11643;
  t15282 = -1.*t12469*t15274;
  t15283 = t15281 + t15282;
  t15230 = -1.*t12995*t12719;
  t15231 = -1.*t13014*t12781;
  t15305 = t12613*t12995;
  t15306 = t12999*t13014;
  t15307 = t15286 + t15305 + t15306;
  t15308 = t12719*t15307;
  t15309 = t15196 + t15230 + t15231;
  t15310 = t12613*t15309;
  t15311 = t15308 + t15310;
  t15297 = -1.*t12437*t15270;
  t15298 = t11576*t15283;
  t15299 = t15297 + t15298;
  t15301 = t11576*t15270;
  t15302 = t12437*t15283;
  t15303 = t15301 + t15302;
  t15340 = -1.*t12467*t12596*t12870;
  t15344 = -1.*t12870*t12716;
  t15346 = -1.*t12853*t12760;
  t15373 = t12467*t12491;
  t15375 = t12469*t13387;
  t13475 = Power(t12596,2);
  t15379 = t12469*t12491*t12444;
  t15381 = -1.*t12467*t13387*t12444;
  t15397 = t12467*t13472*t13373;
  t15400 = -1.*t11653*t12469*t12870;
  t15404 = t12467*t11653*t12444*t12870;
  t15406 = -1.*t11653*t13373*t12760;
  t12724 = var2[0]*t12719;
  t12793 = var2[2]*t12789;
  t12831 = var2[1]*t12808;
  t15457 = -1.*t13756*t14123*t12444;
  t15459 = -1.*t12467*t12491*t13731;
  t15469 = t12467*t11653*t14297;
  t15472 = -1.*t12870*t14182;
  t15475 = -1.*t14297*t12760;
  t15497 = -1.*t13756*t13761*t12444;
  t15516 = t12467*t11653*t13827;
  t15520 = -1.*t13827*t12760;
  p_output1[0]=0.325*t11625*t11643*t11653 + 0.1575*t12469*t12579 + 0.1575*t11643*t12494*t12596 - 0.2255*t12613 - 0.325*t12437*t12639 + 0.075*t12177*t12680 + 0.075*t12347*t12708 + 0.355*(-1.*t12177*t12680 + t11816*t12708) - 0.0641*(t11816*t12680 + t12177*t12708) + t12724 + t12793 + t12831 + var1[0] + t13057*var2[3] + ((-1.*t12757*t12760 - 1.*t12762*t12781)*var2[1] + t12808*var2[2])*var2[3] + t12925*var2[4] + (t12781*var2[0] - 1.*t12757*t13625*var2[1] + t12762*t13625*var2[2] + (t13018*t13048 + t12999*t13052 + t12969*(-1.*t12995*t12999 - 1.*t12613*t13014 - 1.*t12999*t13658 - 1.*t13014*t13672) + t12613*(t12969*t13014 + t12995*t13048 + t13048*t13658 + t13014*t13708))*var2[3])*var2[4] + t12535*var2[5] + (t11643*t13077*var2[0] + (t12716*t12762 + t12579*t12757*t13077)*var2[1] + (t12716*t12757 - 1.*t12579*t12762*t13077)*var2[2] + (-1.*t11643*t11653*t12467*t13052 + t12969*(-1.*t11653*t12467*t12853 + t11643*t11653*t12467*t12995 - 1.*t11653*t12467*t12579*t13014 - 1.*t11643*t12613*t13283 + t12579*t12999*t13283 + t13293) + t11643*t13018*t13310 + t12613*(t11643*t12969*t13283 - 1.*t12579*t13048*t13283 + t11643*t12995*t13310 - 1.*t12579*t13014*t13310 + t13314 + t13324))*var2[3] + (t12878*t12887 - 1.*t12467*t12596*t12913 + t12837*(t12467*t12596*t13283 + t13293) + t11653*t12467*(t12887*t13283 + t12853*t13310 + t13314 + t13324))*var2[4])*var2[5] + t12453*var2[12] + (t13428*var2[0] + (-1.*t11653*t12444*t12467*t12762 - 1.*t12757*t13457)*var2[1] + (-1.*t11653*t12444*t12467*t12757 + t12762*t13457)*var2[2] + (t12639*t13052 + t13018*t13513 + t12969*(-1.*t12639*t12995 + t13473 + t13480 - 1.*t12613*t13528 - 1.*t12999*t13534 - 1.*t13014*t13554) + t12613*(t13485 + t13486 + t12995*t13513 + t12969*t13528 + t13048*t13534 + t13014*t13578))*var2[3] + (-1.*t11653*t12467*t12507*t12878 - 1.*t11653*t12469*t12913 + t12837*(-1.*t12469*t12596*t12853 + t13381 + t13393 + t13473 - 1.*t12467*t13373*t13475 + t13480) + t11653*t12467*(t12467*t12507*t12596*t12853 - 1.*t12596*t12887*t13373 + t13402 + t13406 + t13485 + t13486))*var2[4] + (-1.*t12469*t12503*t12507 + t12467*t12526 + t12467*t12507*(t12469*t12501 - 1.*t12467*t13373 + t13381 + t13393) + t12469*(-1.*t12467*t12501*t12507 - 1.*t12469*t12507*t13373 + t13402 + t13406))*var2[5])*var2[12] + t12408*var2[13] + (t13774 + t13779 + t13789 + (t13018*t13900 + t12969*(t13829 - 1.*t12613*t13907 - 1.*t12999*t13912) + t12613*(t13833 + t13852 + t12995*t13900 + t12969*t13907 + t13048*t13912 + t13014*t13943))*var2[3] + (t12878*t13801 + t12837*(-1.*t12467*t12469*t13761 + t12467*t12596*t13822 + t13829) + t11653*t12467*(t13740 + t13762 + t12887*t13822 + t13833 + t12853*t13847 + t13852))*var2[4] + (t12451*t12467*t12503 + t12469*(-1.*t12451*t12469*t12501 + t12515*t13731 + t13740 + t12451*t13752 + t13762 + t12507*t13761*t13764))*var2[5] + (0.1575*t12507 + 0.2255*t13731)*var2[12])*var2[13] - 0.0641*var2[14] + (t14169*var2[0] + (t12762*t14182 - 1.*t12757*t14231)*var2[1] + (t12757*t14182 + t12762*t14231)*var2[2] + (t12719*t13018 + t12969*(t14299 - 1.*t12613*t14350 - 1.*t12999*t14383) + t12613*(t14303 + t14304 + t12969*t14350 + t13048*t14383 + t14391 + t14392))*var2[3] + (t12760*t12878 + t12837*(-1.*t12467*t12469*t14123 + t12467*t12596*t14289 + t14299) + t11653*t12467*(t14095 + t14124 + t12887*t14289 + t14302 + t14303 + t14304))*var2[4] + (t12444*t12467*t12503 + t12469*(t14095 + t14096 + t12451*t14098 + t14118 + t12507*t13764*t14123 + t14124))*var2[5] + (0.2255*t12507 + 0.1575*t13731)*var2[12] + (0.325*t11816 - 1.*t11816*t12405 - 1.*t11816*t14057)*var2[13])*var2[14] + t12719*var3[0] + t12808*var3[1] + t12789*var3[2] + t13057*var3[3] + t12925*var3[4] + t12535*var3[5] + t12453*var3[12] + t12408*var3[13] - 0.0641*var3[14] - 1.*var4[0];
  p_output1[1]=-0.1575*t11643*t12469*t12757 + 0.325*t11625*t14511 - 0.1575*t12494*t14524 - 0.2255*(-1.*t11643*t12469*t12757 + t12467*t14524) - 0.325*t12437*t14578 + 0.075*t12177*t14642 + 0.075*t12347*t14659 + 0.355*(-1.*t12177*t14642 + t11816*t14659) - 0.0641*(t11816*t14642 + t12177*t14659) + var1[1] + t12613*var2[0] + t14558*var2[1] + t14542*var2[2] + t14679*var2[3] + ((-1.*t11653*t12467*t12757 - 1.*t12762*t12999)*var2[1] + t14558*var2[2])*var2[3] + t14594*var2[4] + (t12999*var2[0] - 1.*t12757*t13672*var2[1] + t12762*t13672*var2[2] + (t12969*(t12781*t12995 + t12719*t13014 + t13014*t13625 + t12781*t13658) + t12719*(-1.*t12969*t13014 - 1.*t12995*t13048 - 1.*t13048*t13658 - 1.*t13014*t13708) + t13048*t14661 + t12781*t14670)*var2[3])*var2[4] + t14439*var2[5] + (-1.*t11643*t11653*t12467*var2[0] + (-1.*t11653*t12467*t12579*t12757 - 1.*t12467*t12596*t12762)*var2[1] + (-1.*t12467*t12596*t12757 + t11653*t12467*t12579*t12762)*var2[2] + (t11643*t13310*t14661 + t11643*t13077*t14670 + t12969*(t11643*t12995*t13077 - 1.*t12579*t13014*t13077 + t11643*t12719*t13283 - 1.*t12579*t12781*t13283 + t14828 + t14831) + t12719*(-1.*t11643*t12969*t13283 + t12579*t13048*t13283 - 1.*t11643*t12995*t13310 + t12579*t13014*t13310 + t14849 + t14854))*var2[3] + (t12887*t14586 + t12716*t14591 + t12837*(t12853*t13077 + t12716*t13283 + t14828 + t14831) + t12760*(-1.*t12887*t13283 - 1.*t12853*t13310 + t14849 + t14854))*var2[4])*var2[5] + t14494*var2[12] + (t12639*var2[0] + (-1.*t11653*t12469*t12762 - 1.*t12757*t13554)*var2[1] + (-1.*t11653*t12469*t12757 + t12762*t13554)*var2[2] + (t13513*t14661 + t13428*t14670 + t12969*(t12995*t13428 + t13014*t13457 + t12719*t13528 + t12781*t13534 + t14768 + t14770) + t12719*(-1.*t12995*t13513 - 1.*t12969*t13528 - 1.*t13048*t13534 - 1.*t13014*t13578 + t14776 + t14777))*var2[3] + (-1.*t11653*t12467*t12507*t14586 - 1.*t11653*t12444*t12467*t14591 + t12837*(t12444*t12467*t12596*t12853 - 1.*t12596*t12716*t13373 + t14699 + t14702 + t14768 + t14770) + t12760*(-1.*t12467*t12507*t12596*t12853 + t12596*t12887*t13373 + t14708 + t14714 + t14776 + t14777))*var2[4] + (-1.*t12444*t12469*t14432 - 1.*t12469*t12507*t14437 + t12467*t12507*(-1.*t12444*t12467*t12501 - 1.*t12444*t12469*t13373 + t14699 + t14702) + t12444*t12467*(t12467*t12501*t12507 + t12469*t12507*t13373 + t14708 + t14714))*var2[5])*var2[12] + ((t13900*t14661 + t12969*t14670 + t12969*(t12883 + t13023 + t13051 + t12719*t13907 + t12781*t13912 + t15042) + t12719*(-1.*t12995*t13900 - 1.*t12969*t13907 - 1.*t13048*t13912 - 1.*t13014*t13943 + t15045 + t15051))*var2[3] + (t13801*t14586 + t12837*t14591 + t12837*(t12518 + t12883 + t12895 + t12716*t13822 + t14968 + t15042) + t12760*(-1.*t12887*t13822 - 1.*t12853*t13847 + t14957 + t14961 + t15045 + t15051))*var2[4] + (t12467*t12507*t14432 + t12451*t12467*t14437 + t12444*t12467*(t12451*t12469*t12501 - 1.*t12507*t13761*t13764 + t14957 + t14959 + t14960 + t14961) + t12467*t12507*(t12517 + t12518 + t12521 + t12444*t13761*t13764 + t14968 + t14975))*var2[5] + (t13731*t14473 + t12451*t14483 + t12507*(-1.*t12451*t12486 - 1.*t12507*t13761 + t14959 + t14960) + t12451*(t12486*t12507 + t12517 + t12444*t13761 + t14975))*var2[12])*var2[13] + ((t12719*t14661 + t14169*t14670 + t12969*(t12995*t14169 + t13014*t14231 + t12719*t14350 + t12781*t14383 + t15181 + t15185) + t12719*(-1.*t12969*t14350 - 1.*t13048*t14383 + t15194 + t15196 + t15230 + t15231))*var2[3] + (t12760*t14586 + t14182*t14591 + t12837*(t12853*t14151 + t12716*t14289 + t15114 + t15121 + t15181 + t15185) + t12760*(-1.*t12887*t14289 + t15100 + t15105 + t15191 + t15194 + t15196))*var2[4] + (t12467*t13731*t14432 + t12444*t12467*t14437 + t12444*t12467*(-1.*t12507*t13764*t14123 + t15100 + t15101 + t15103 + t15104 + t15105) + t12467*t12507*(-1.*t12469*t12501*t13731 + t12444*t13764*t14123 + t15111 + t15114 + t15121 + t15129))*var2[5] + (t12507*t14473 + t12444*t14483 + t12507*(-1.*t12444*t12486 - 1.*t12507*t14123 + t15103 + t15104) + t12451*(t12486*t13731 + t12444*t14123 + t15111 + t15129))*var2[12])*var2[14] + t12613*var3[0] + t14558*var3[1] + t14542*var3[2] + t14679*var3[3] + t14594*var3[4] + t14439*var3[5] + t14494*var3[12] - 1.*var4[1];
  p_output1[2]=0.1575*t11643*t12469*t12762 + t13774 + t13779 + t13789 + 0.325*t11625*t15270 - 0.1575*t12494*t15274 - 0.2255*(t11643*t12469*t12762 + t12467*t15274) - 0.325*t12437*t15283 + 0.075*t12177*t15299 + 0.075*t12347*t15303 + 0.355*(-1.*t12177*t15299 + t11816*t15303) - 0.0641*(t11816*t15299 + t12177*t15303) + var1[2] + t15311*var2[3] + ((-1.*t12757*t12837 - 1.*t12762*t13048)*var2[1] + t13783*var2[2])*var2[3] + t15292*var2[4] + (t13048*var2[0] - 1.*t12757*t13708*var2[1] + t12762*t13708*var2[2] + (t12613*(-1.*t12781*t12995 - 1.*t12719*t13014 - 1.*t13014*t13625 - 1.*t12781*t13658) + t12719*(t12995*t12999 + t12613*t13014 + t12999*t13658 + t13014*t13672) + t12781*t15307 + t12999*t15309)*var2[3])*var2[4] + t15265*var2[5] + (t11643*t13310*var2[0] + (t12762*t12887 + t12579*t12757*t13310)*var2[1] + (t12757*t12887 - 1.*t12579*t12762*t13310)*var2[2] + (t11643*t13077*t15307 - 1.*t11643*t11653*t12467*t15309 + t12719*(t11653*t12467*t12853 - 1.*t11643*t11653*t12467*t12995 + t11653*t12467*t12579*t13014 + t11643*t12613*t13283 - 1.*t12579*t12999*t13283 + t15340) + t12613*(-1.*t11643*t12995*t13077 + t12579*t13014*t13077 - 1.*t11643*t12719*t13283 + t12579*t12781*t13283 + t15344 + t15346))*var2[3] + (t12716*t15287 - 1.*t12467*t12596*t15289 + t12760*(-1.*t12467*t12596*t13283 + t15340) + t11653*t12467*(-1.*t12853*t13077 - 1.*t12716*t13283 + t15344 + t15346))*var2[4])*var2[5] - 0.068*t12507*var2[12] + (t13513*var2[0] + (-1.*t11653*t12467*t12507*t12762 - 1.*t12757*t13578)*var2[1] + (-1.*t11653*t12467*t12507*t12757 + t12762*t13578)*var2[2] + (t13428*t15307 + t12639*t15309 + t12719*(t12639*t12995 + t12613*t13528 + t12999*t13534 + t13014*t13554 + t15397 + t15400) + t12613*(-1.*t12995*t13428 - 1.*t13014*t13457 - 1.*t12719*t13528 - 1.*t12781*t13534 + t15404 + t15406))*var2[3] + (-1.*t11653*t12444*t12467*t15287 - 1.*t11653*t12469*t15289 + t12760*(t12469*t12596*t12853 + t12467*t13373*t13475 + t15373 + t15375 + t15397 + t15400) + t11653*t12467*(-1.*t12444*t12467*t12596*t12853 + t12596*t12716*t13373 + t15379 + t15381 + t15404 + t15406))*var2[4] + (-1.*t12444*t12469*t15258 + t12467*t15263 + t12444*t12467*(-1.*t12469*t12501 + t12467*t13373 + t15373 + t15375) + t12469*(t12444*t12467*t12501 + t12444*t12469*t13373 + t15379 + t15381))*var2[5])*var2[12] + t15253*var2[13] + (t13900*var2[0] + (t12762*t13801 - 1.*t12757*t13943)*var2[1] + (t12757*t13801 + t12762*t13943)*var2[2] + (t12969*t15307 + t12719*(t12613*t13907 + t12999*t13912 + t15516) + t12613*(-1.*t12719*t13907 - 1.*t12781*t13912 + t14588 + t14666 + t14667 + t15520))*var2[3] + (t12837*t15287 + t12760*(t12467*t12469*t13761 - 1.*t12467*t12596*t13822 + t15516) + t11653*t12467*(-1.*t12716*t13822 + t14426 + t14588 + t14590 + t15497 + t15520))*var2[4] + (t12467*t12507*t15258 + t12469*(-1.*t12507*t13752 - 1.*t12444*t13761*t13764 + t14425 + t14426 + t14430 + t15497))*var2[5] - 0.068*t12451*var2[12])*var2[13] - 0.28*var2[14] + (t12724 + t12793 + t12831 + (t14169*t15307 + t12719*(t12613*t14350 + t12999*t14383 + t15469) + t12613*(-1.*t12995*t14169 - 1.*t13014*t14231 - 1.*t12719*t14350 - 1.*t12781*t14383 + t15472 + t15475))*var2[3] + (t14182*t15287 + t12760*(t12467*t12469*t14123 - 1.*t12467*t12596*t14289 + t15469) + t11653*t12467*(-1.*t12853*t14151 - 1.*t12716*t14289 + t15457 + t15459 + t15472 + t15475))*var2[4] + (t12467*t13731*t15258 + t12469*(-1.*t12444*t12515 + t12469*t12501*t13731 - 1.*t12507*t14098 - 1.*t12444*t13764*t14123 + t15457 + t15459))*var2[5] - 0.068*t12444*var2[12] + (t12289 + t12406 - 1.*t12177*t14057)*var2[13])*var2[14] + t12969*var3[0] + t13783*var3[1] + t13778*var3[2] + t15311*var3[3] + t15292*var3[4] + t15265*var3[5] - 0.068*t12507*var3[12] + t15253*var3[13] - 0.28*var3[14] - 1.*var4[2];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "ddh_FrFoot_ParallelStance.hh"

namespace ParallelStance
{

void ddh_FrFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
