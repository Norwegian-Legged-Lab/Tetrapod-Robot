/*
 * Automatically Generated from Mathematica.
 * Thu 12 May 2022 11:34:07 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t6236;
  double t7511;
  double t4880;
  double t7610;
  double t8116;
  double t8661;
  double t9576;
  double t9765;
  double t9982;
  double t10413;
  double t11459;
  double t11469;
  double t12928;
  double t10789;
  double t11109;
  double t13143;
  double t13150;
  double t13167;
  double t13169;
  double t13170;
  double t13172;
  double t13112;
  double t13114;
  double t12919;
  double t12923;
  double t13236;
  double t13238;
  double t13245;
  double t13287;
  double t13288;
  double t13289;
  double t13303;
  double t13304;
  double t13305;
  double t11471;
  double t11480;
  double t11481;
  double t13378;
  double t13415;
  double t13420;
  double t13422;
  double t13423;
  double t13424;
  double t13724;
  double t13730;
  double t13732;
  double t14320;
  double t14321;
  double t14322;
  double t14409;
  double t14415;
  double t14416;
  double t15496;
  double t15501;
  double t15502;
  double t13229;
  double t13231;
  double t15809;
  double t15810;
  double t15821;
  double t15822;
  double t12929;
  double t12934;
  double t12940;
  double t13136;
  double t13168;
  double t13173;
  double t13175;
  double t13181;
  double t13218;
  double t13219;
  double t13220;
  double t13221;
  double t13224;
  double t13226;
  double t13227;
  double t14165;
  double t14209;
  double t14210;
  double t14236;
  double t14261;
  double t14275;
  double t14276;
  double t14277;
  double t14278;
  double t14279;
  double t14282;
  double t14287;
  double t14314;
  double t13232;
  double t13233;
  double t13234;
  double t13230;
  double t13235;
  double t13274;
  double t7016;
  double t8599;
  double t10026;
  double t11297;
  double t11470;
  double t11498;
  double t11861;
  double t12670;
  double t12810;
  double t12842;
  double t12850;
  double t12867;
  double t12872;
  double t12880;
  double t12905;
  double t16299;
  double t16300;
  double t16301;
  double t16305;
  double t16312;
  double t16315;
  double t16334;
  double t16335;
  double t16338;
  double t16339;
  double t16354;
  double t16355;
  double t15389;
  double t15488;
  double t15504;
  double t15512;
  double t15514;
  double t15517;
  double t15530;
  double t15534;
  double t15538;
  double t15703;
  double t15709;
  double t15717;
  double t15718;
  double t16698;
  double t16699;
  double t16710;
  double t16687;
  double t16732;
  double t16734;
  double t16738;
  double t16739;
  double t16874;
  double t16877;
  double t13328;
  double t13355;
  double t13421;
  double t13425;
  double t13426;
  double t13427;
  double t13430;
  double t13431;
  double t13432;
  double t13439;
  double t13443;
  double t13444;
  double t13445;
  double t16114;
  double t16121;
  double t16125;
  double t16131;
  double t16142;
  double t16246;
  double t16250;
  double t16254;
  double t16286;
  double t16296;
  double t16297;
  double t14385;
  double t14417;
  double t14418;
  double t14419;
  double t14420;
  double t14421;
  double t14422;
  double t14423;
  double t14427;
  double t14428;
  double t15334;
  double t16737;
  double t16822;
  double t16823;
  double t16841;
  double t16843;
  double t16850;
  double t16852;
  double t16854;
  double t16855;
  double t16859;
  double t16861;
  double t17120;
  double t17121;
  double t17127;
  double t13635;
  double t13754;
  double t13837;
  double t13891;
  double t14022;
  double t14048;
  double t14053;
  double t14054;
  double t14075;
  double t14076;
  double t14077;
  double t17148;
  double t17056;
  double t17160;
  double t17161;
  double t17164;
  double t22372;
  double t23902;
  double t23972;
  double t23990;
  double t24046;
  double t24284;
  double t24305;
  double t24331;
  double t24333;
  double t25654;
  double t31391;
  double t31403;
  double t31711;
  double t31779;
  double t31953;
  double t31957;
  double t32042;
  double t34990;
  double t34991;
  double t35000;
  double t45575;
  double t45576;
  double t45578;
  double t45739;
  double t45767;
  double t46741;
  double t32291;
  double t32671;
  double t32982;
  double t56150;
  double t56162;
  double t56186;
  double t57666;
  double t57675;
  double t57676;
  double t57692;
  double t57900;
  double t57903;
  double t59299;
  double t59305;
  double t59306;
  double t60201;
  double t60205;
  double t60210;
  double t60191;
  double t60197;
  double t60199;
  double t60238;
  double t60265;
  double t60270;
  double t60272;
  double t60275;
  double t60311;
  double t60314;
  double t60315;
  double t60529;
  double t60891;
  double t60945;
  double t61005;
  double t61805;
  double t61806;
  double t61807;
  double t61809;
  double t61810;
  double t61815;
  double t22617;
  double t23507;
  double t23752;
  double t23858;
  double t23862;
  double t23892;
  double t23893;
  double t24014;
  double t24329;
  double t27685;
  double t29393;
  double t29410;
  double t29691;
  double t29977;
  double t30026;
  double t30401;
  double t30413;
  double t30672;
  double t30684;
  double t61033;
  double t61066;
  double t61080;
  double t61926;
  double t61927;
  double t61928;
  double t61930;
  double t61938;
  double t62040;
  double t62133;
  double t62135;
  double t62136;
  double t60135;
  double t60216;
  double t62157;
  double t62159;
  double t62161;
  double t62162;
  double t62163;
  double t62165;
  double t62229;
  double t62366;
  double t61801;
  double t61802;
  double t61803;
  double t61804;
  double t61808;
  double t61816;
  double t61817;
  double t61818;
  double t61819;
  double t61820;
  double t61822;
  double t61823;
  double t61851;
  double t61882;
  double t61883;
  double t35008;
  double t35678;
  double t38931;
  double t45574;
  double t45685;
  double t47101;
  double t47127;
  double t47136;
  double t49022;
  double t49321;
  double t53615;
  double t55411;
  double t56012;
  double t56062;
  double t56096;
  double t63531;
  double t63559;
  double t64253;
  double t63517;
  double t65096;
  double t65098;
  double t65101;
  double t65102;
  double t65103;
  double t65232;
  double t65233;
  double t65234;
  double t60200;
  double t60215;
  double t65257;
  double t65258;
  double t65260;
  double t65261;
  double t62425;
  double t62426;
  double t62427;
  double t62431;
  double t62432;
  double t62434;
  double t62435;
  double t62437;
  double t62452;
  double t62524;
  double t62537;
  double t62545;
  double t63401;
  double t60889;
  double t60890;
  double t61006;
  double t61008;
  double t61032;
  double t61093;
  double t61118;
  double t61119;
  double t61125;
  double t61126;
  double t61127;
  double t61128;
  double t61142;
  double t61733;
  double t61796;
  double t31357;
  double t31780;
  double t32057;
  double t32079;
  double t32118;
  double t32983;
  double t32986;
  double t33695;
  double t33881;
  double t33894;
  double t33950;
  double t34112;
  double t34528;
  double t34641;
  double t34885;
  double t65973;
  double t65981;
  double t66217;
  double t66221;
  double t61907;
  double t61921;
  double t61929;
  double t62041;
  double t62043;
  double t62044;
  double t62046;
  double t62051;
  double t62086;
  double t62124;
  double t62125;
  double t62126;
  double t62127;
  double t66024;
  double t66035;
  double t66041;
  double t66050;
  double t66055;
  double t66057;
  double t66058;
  double t66067;
  double t66120;
  double t66137;
  double t66195;
  double t66197;
  double t65227;
  double t65228;
  double t65235;
  double t65240;
  double t65242;
  double t65245;
  double t65246;
  double t65247;
  double t65249;
  double t65250;
  double t65251;
  double t65252;
  double t65253;
  double t57455;
  double t57561;
  double t57677;
  double t57940;
  double t57942;
  double t57943;
  double t57944;
  double t57961;
  double t58078;
  double t58079;
  double t58082;
  double t58214;
  double t59249;
  double t66274;
  double t66275;
  double t66277;
  double t66279;
  double t66281;
  double t66282;
  double t66278;
  double t66283;
  double t66285;
  double t66290;
  double t66291;
  double t66293;
  double t66511;
  double t66516;
  double t66517;
  double t62132;
  double t62137;
  double t62138;
  double t62142;
  double t62143;
  double t62144;
  double t62145;
  double t62146;
  double t62147;
  double t62148;
  double t62149;
  double t65989;
  double t65994;
  double t66003;
  double t66005;
  double t66007;
  double t66009;
  double t66010;
  double t66011;
  double t66015;
  double t66017;
  double t66019;
  double t65099;
  double t65107;
  double t65114;
  double t65118;
  double t65125;
  double t65185;
  double t65186;
  double t65216;
  double t65220;
  double t65221;
  double t65223;
  double t59273;
  double t59308;
  double t59344;
  double t59345;
  double t59354;
  double t59355;
  double t59359;
  double t59369;
  double t59374;
  double t59601;
  double t59632;
  double t66286;
  double t66294;
  double t66295;
  double t66297;
  double t66299;
  double t66301;
  double t66469;
  double t66470;
  double t66477;
  double t66486;
  double t66495;
  double t66547;
  double t66549;
  double t66551;
  double t66553;
  double t66522;
  double t66559;
  double t66560;
  double t66561;
  double t66590;
  double t66591;
  double t66592;
  double t66594;
  double t66595;
  double t66596;
  double t66597;
  double t66598;
  double t66599;
  double t66600;
  double t66601;
  double t66602;
  double t66603;
  double t66604;
  double t66605;
  double t66619;
  double t66620;
  double t66621;
  double t66622;
  double t66623;
  double t66624;
  double t66625;
  double t66626;
  double t66627;
  double t66606;
  double t66607;
  double t66608;
  double t66609;
  double t66610;
  double t66611;
  double t66613;
  double t66614;
  double t66616;
  double t66617;
  double t66618;
  double t66569;
  double t66570;
  double t66571;
  double t66574;
  double t66575;
  double t66576;
  double t66577;
  double t66579;
  double t66580;
  double t66581;
  double t66582;
  double t66583;
  double t66584;
  double t66588;
  double t66589;
  double t66628;
  double t66629;
  double t66630;
  double t66631;
  double t66633;
  double t66634;
  double t66635;
  double t66636;
  double t66637;
  double t66638;
  double t66639;
  double t66640;
  double t66641;
  double t66642;
  double t66643;
  double t66704;
  double t66705;
  double t66706;
  double t66708;
  double t66712;
  double t66713;
  double t66670;
  double t66677;
  double t66678;
  double t66737;
  double t66738;
  double t66754;
  double t66837;
  double t66838;
  double t66854;
  double t66855;
  double t66856;
  double t66940;
  double t66941;
  double t66950;
  double t66961;
  double t66963;
  double t66965;
  double t66966;
  double t66967;
  double t66699;
  double t66700;
  double t66701;
  double t66703;
  double t66707;
  double t66718;
  double t66722;
  double t66726;
  double t66727;
  double t66728;
  double t66729;
  double t66730;
  double t66731;
  double t66732;
  double t66733;
  double t67083;
  double t67084;
  double t67087;
  double t67088;
  double t67103;
  double t67104;
  double t67105;
  double t67101;
  double t67106;
  double t67107;
  double t67109;
  double t67111;
  double t67112;
  double t67249;
  double t67253;
  double t67254;
  double t66655;
  double t66656;
  double t66661;
  double t66668;
  double t66669;
  double t66679;
  double t66682;
  double t66689;
  double t66691;
  double t66692;
  double t66693;
  double t66694;
  double t66695;
  double t66696;
  double t66697;
  double t67059;
  double t67060;
  double t67062;
  double t67064;
  double t67065;
  double t67066;
  double t67067;
  double t67068;
  double t67069;
  double t67071;
  double t67072;
  double t67073;
  double t67075;
  double t67288;
  double t67289;
  double t67326;
  double t67327;
  double t66735;
  double t66736;
  double t66792;
  double t66839;
  double t66840;
  double t66841;
  double t66842;
  double t66843;
  double t66844;
  double t66845;
  double t66848;
  double t66849;
  double t66850;
  double t67304;
  double t67305;
  double t67306;
  double t67308;
  double t67309;
  double t67312;
  double t67313;
  double t67314;
  double t67315;
  double t67316;
  double t67318;
  double t67319;
  double t67247;
  double t67248;
  double t67255;
  double t67259;
  double t67264;
  double t67266;
  double t67268;
  double t67269;
  double t67270;
  double t67271;
  double t67272;
  double t67273;
  double t67274;
  double t67349;
  double t67350;
  double t67351;
  double t67348;
  double t67353;
  double t67354;
  double t67486;
  double t67487;
  double t67488;
  double t67527;
  double t67528;
  double t67529;
  double t66852;
  double t66857;
  double t66858;
  double t66859;
  double t66860;
  double t66861;
  double t66862;
  double t66863;
  double t66864;
  double t66865;
  double t66900;
  double t67290;
  double t67291;
  double t67293;
  double t67294;
  double t67295;
  double t67296;
  double t67298;
  double t67299;
  double t67300;
  double t67301;
  double t67302;
  double t67108;
  double t67113;
  double t67159;
  double t67170;
  double t67209;
  double t67225;
  double t67227;
  double t67228;
  double t67232;
  double t67241;
  double t67243;
  double t67424;
  double t67492;
  double t67494;
  double t67499;
  double t67500;
  double t67501;
  double t67502;
  double t67503;
  double t67508;
  double t67514;
  double t67518;
  double t67555;
  double t67556;
  double t67559;
  double t67561;
  double t67533;
  double t67567;
  double t67568;
  double t67569;
  t6236 = Cos(var1[4]);
  t7511 = Sin(var1[9]);
  t4880 = Cos(var1[9]);
  t7610 = Sin(var1[4]);
  t8116 = Sin(var1[5]);
  t8661 = Sin(var1[10]);
  t9576 = -1.*t6236*t7511;
  t9765 = -1.*t4880*t7610*t8116;
  t9982 = t9576 + t9765;
  t10413 = Cos(var1[11]);
  t11459 = Cos(var1[10]);
  t11469 = Sin(var1[11]);
  t12928 = Cos(var1[5]);
  t10789 = -1.*t10413;
  t11109 = 1. + t10789;
  t13143 = -1.*t12928*t7511*t8661*t7610;
  t13150 = t11459*t7610*t8116;
  t13167 = t13143 + t13150;
  t13169 = -1.*t11459*t12928*t7511*t7610;
  t13170 = -1.*t8661*t7610*t8116;
  t13172 = t13169 + t13170;
  t13112 = -1.*t11459;
  t13114 = 1. + t13112;
  t12919 = -1.*t4880;
  t12923 = 1. + t12919;
  t13236 = -1.*t4880*t7610;
  t13238 = -1.*t6236*t7511*t8116;
  t13245 = t13236 + t13238;
  t13287 = t6236*t12928*t8661;
  t13288 = t11459*t13245;
  t13289 = t13287 + t13288;
  t13303 = -1.*t11459*t6236*t12928;
  t13304 = t8661*t13245;
  t13305 = t13303 + t13304;
  t11471 = t4880*t6236;
  t11480 = -1.*t7511*t7610*t8116;
  t11481 = t11471 + t11480;
  t13378 = t12928*t8661*t7610;
  t13415 = t11459*t11481;
  t13420 = t13378 + t13415;
  t13422 = t11459*t12928*t7610;
  t13423 = -1.*t8661*t11481;
  t13424 = t13422 + t13423;
  t13724 = -1.*t11459*t12928*t7610;
  t13730 = t8661*t11481;
  t13732 = t13724 + t13730;
  t14320 = t6236*t12928*t7511*t8661;
  t14321 = -1.*t11459*t6236*t8116;
  t14322 = t14320 + t14321;
  t14409 = t11459*t6236*t12928*t7511;
  t14415 = t6236*t8661*t8116;
  t14416 = t14409 + t14415;
  t15496 = -1.*t6236*t12928*t7511*t8661;
  t15501 = t11459*t6236*t8116;
  t15502 = t15496 + t15501;
  t13229 = 0.325*t13114*t6236*t12928;
  t13231 = 0.1575*t12923*t6236*t8116;
  t15809 = -1.*t11459*t6236*t7511*t8116;
  t15810 = t13287 + t15809;
  t15821 = -1.*t6236*t7511*t8661*t8116;
  t15822 = t13303 + t15821;
  t12929 = 0.1575*t12923*t12928*t7610;
  t12934 = 0.2255*t4880*t12928*t7610;
  t12940 = -0.325*t12928*t7511*t8661*t7610;
  t13136 = -0.325*t13114*t7610*t8116;
  t13168 = -0.575*t11109*t13167;
  t13173 = -0.575*t11469*t13172;
  t13175 = t11469*t13167;
  t13181 = t10413*t13172;
  t13218 = t13175 + t13181;
  t13219 = -0.0641*t13218;
  t13220 = t10413*t13167;
  t13221 = -1.*t11469*t13172;
  t13224 = t13220 + t13221;
  t13226 = -0.295*t13224;
  t13227 = t12929 + t12934 + t12940 + t13136 + t13168 + t13173 + t13219 + t13226;
  t14165 = 0.068*t6236*t12928*t7511;
  t14209 = 0.325*t4880*t6236*t12928*t8661;
  t14210 = -0.575*t4880*t11109*t6236*t12928*t8661;
  t14236 = -0.575*t4880*t11459*t6236*t12928*t11469;
  t14261 = t4880*t10413*t6236*t12928*t8661;
  t14275 = -1.*t4880*t11459*t6236*t12928*t11469;
  t14276 = t14261 + t14275;
  t14277 = -0.295*t14276;
  t14278 = t4880*t11459*t10413*t6236*t12928;
  t14279 = t4880*t6236*t12928*t8661*t11469;
  t14282 = t14278 + t14279;
  t14287 = -0.0641*t14282;
  t14314 = t14165 + t14209 + t14210 + t14236 + t14277 + t14287;
  t13232 = -1.*t7511*t7610;
  t13233 = t4880*t6236*t8116;
  t13234 = t13232 + t13233;
  t13230 = 0.1575*t7511*t7610;
  t13235 = 0.2255*t13234;
  t13274 = 0.325*t8661*t13245;
  t7016 = -0.1575*t4880*t6236;
  t8599 = 0.1575*t7511*t7610*t8116;
  t10026 = 0.325*t8661*t9982;
  t11297 = -0.575*t11109*t8661*t9982;
  t11470 = -0.575*t11459*t11469*t9982;
  t11498 = 0.2255*t11481;
  t11861 = t10413*t8661*t9982;
  t12670 = -1.*t11459*t11469*t9982;
  t12810 = t11861 + t12670;
  t12842 = -0.295*t12810;
  t12850 = t11459*t10413*t9982;
  t12867 = t8661*t11469*t9982;
  t12872 = t12850 + t12867;
  t12880 = -0.0641*t12872;
  t12905 = t7016 + t8599 + t10026 + t11297 + t11470 + t11498 + t12842 + t12880;
  t16299 = 0.325*t11459*t13234;
  t16300 = -0.575*t11459*t11109*t13234;
  t16301 = 0.575*t8661*t11469*t13234;
  t16305 = -1.*t10413*t8661*t13234;
  t16312 = t11459*t11469*t13234;
  t16315 = t16305 + t16312;
  t16334 = -0.0641*t16315;
  t16335 = t11459*t10413*t13234;
  t16338 = t8661*t11469*t13234;
  t16339 = t16335 + t16338;
  t16354 = -0.295*t16339;
  t16355 = t16299 + t16300 + t16301 + t16334 + t16354;
  t15389 = 0.325*t11459*t6236*t12928*t7511;
  t15488 = 0.325*t6236*t8661*t8116;
  t15504 = -0.575*t11469*t15502;
  t15512 = -0.575*t11109*t14416;
  t15514 = -1.*t11469*t15502;
  t15517 = t10413*t14416;
  t15530 = t15514 + t15517;
  t15534 = -0.295*t15530;
  t15538 = t10413*t15502;
  t15703 = t11469*t14416;
  t15709 = t15538 + t15703;
  t15717 = -0.0641*t15709;
  t15718 = t15389 + t15488 + t15504 + t15512 + t15534 + t15717;
  t16698 = t4880*t7610;
  t16699 = t6236*t7511*t8116;
  t16710 = t16698 + t16699;
  t16687 = -1.*t6236*t12928*t8661;
  t16732 = t11459*t16710;
  t16734 = t16687 + t16732;
  t16738 = -1.*t8661*t16710;
  t16739 = t13303 + t16738;
  t16874 = -1.*t11459*t16710;
  t16877 = t13287 + t16874;
  t13328 = 0.325*t12928*t8661*t7610;
  t13355 = 0.325*t11459*t11481;
  t13421 = -0.575*t11109*t13420;
  t13425 = -0.575*t11469*t13424;
  t13426 = t11469*t13420;
  t13427 = t10413*t13424;
  t13430 = t13426 + t13427;
  t13431 = -0.0641*t13430;
  t13432 = t10413*t13420;
  t13439 = -1.*t11469*t13424;
  t13443 = t13432 + t13439;
  t13444 = -0.295*t13443;
  t13445 = t13328 + t13355 + t13421 + t13425 + t13431 + t13444;
  t16114 = -0.575*t11459*t10413*t13234;
  t16121 = -0.575*t8661*t11469*t13234;
  t16125 = t10413*t8661*t13234;
  t16131 = -1.*t11459*t11469*t13234;
  t16142 = t16125 + t16131;
  t16246 = -0.0641*t16142;
  t16250 = -1.*t11459*t10413*t13234;
  t16254 = -1.*t8661*t11469*t13234;
  t16286 = t16250 + t16254;
  t16296 = -0.295*t16286;
  t16297 = t16114 + t16121 + t16246 + t16296;
  t14385 = -0.575*t11469*t14322;
  t14417 = -0.575*t10413*t14416;
  t14418 = -1.*t11469*t14322;
  t14419 = -1.*t10413*t14416;
  t14420 = t14418 + t14419;
  t14421 = -0.295*t14420;
  t14422 = t10413*t14322;
  t14423 = -1.*t11469*t14416;
  t14427 = t14422 + t14423;
  t14428 = -0.0641*t14427;
  t15334 = t14385 + t14417 + t14421 + t14428;
  t16737 = -0.575*t11469*t16734;
  t16822 = -0.575*t10413*t16739;
  t16823 = -1.*t11469*t16734;
  t16841 = -1.*t10413*t16739;
  t16843 = t16823 + t16841;
  t16850 = -0.295*t16843;
  t16852 = t10413*t16734;
  t16854 = -1.*t11469*t16739;
  t16855 = t16852 + t16854;
  t16859 = -0.0641*t16855;
  t16861 = t16737 + t16822 + t16850 + t16859;
  t17120 = t11459*t6236*t12928;
  t17121 = t8661*t16710;
  t17127 = t17120 + t17121;
  t13635 = -0.575*t10413*t13420;
  t13754 = -0.575*t11469*t13732;
  t13837 = -1.*t11469*t13420;
  t13891 = t10413*t13732;
  t14022 = t13837 + t13891;
  t14048 = -0.0641*t14022;
  t14053 = -1.*t10413*t13420;
  t14054 = -1.*t11469*t13732;
  t14075 = t14053 + t14054;
  t14076 = -0.295*t14075;
  t14077 = t13635 + t13754 + t14048 + t14076;
  t17148 = t11469*t16734;
  t17056 = t10413*t16739;
  t17160 = -1.*t10413*t16734;
  t17161 = -1.*t11469*t17127;
  t17164 = t17160 + t17161;
  t22372 = Cos(var1[3]);
  t23902 = t4880*t22372*t7610;
  t23972 = t22372*t6236*t7511*t8116;
  t23990 = t23902 + t23972;
  t24046 = -1.*t22372*t6236*t12928*t8661;
  t24284 = t11459*t23990;
  t24305 = t24046 + t24284;
  t24331 = t11459*t22372*t6236*t12928;
  t24333 = t8661*t23990;
  t25654 = t24331 + t24333;
  t31391 = Sin(var1[3]);
  t31403 = -1.*t12928*t31391;
  t31711 = -1.*t22372*t7610*t8116;
  t31779 = t31403 + t31711;
  t31953 = t22372*t6236*t7511;
  t31957 = -1.*t4880*t31779;
  t32042 = t31953 + t31957;
  t34990 = -1.*t22372*t12928*t7610;
  t34991 = t31391*t8116;
  t35000 = t34990 + t34991;
  t45575 = -1.*t7511*t8661*t35000;
  t45576 = t11459*t31779;
  t45578 = t45575 + t45576;
  t45739 = -1.*t11459*t7511*t35000;
  t45767 = -1.*t8661*t31779;
  t46741 = t45739 + t45767;
  t32291 = -1.*t4880*t22372*t6236;
  t32671 = -1.*t7511*t31779;
  t32982 = t32291 + t32671;
  t56150 = t22372*t12928*t7610;
  t56162 = -1.*t31391*t8116;
  t56186 = t56150 + t56162;
  t57666 = -1.*t8661*t56186;
  t57675 = t11459*t32982;
  t57676 = t57666 + t57675;
  t57692 = -1.*t11459*t56186;
  t57900 = -1.*t8661*t32982;
  t57903 = t57692 + t57900;
  t59299 = t11459*t56186;
  t59305 = t8661*t32982;
  t59306 = t59299 + t59305;
  t60201 = -1.*t22372*t12928;
  t60205 = t31391*t7610*t8116;
  t60210 = t60201 + t60205;
  t60191 = -1.*t12928*t31391*t7610;
  t60197 = -1.*t22372*t8116;
  t60199 = t60191 + t60197;
  t60238 = t4880*t6236*t31391;
  t60265 = -1.*t7511*t60210;
  t60270 = t60238 + t60265;
  t60272 = -1.*t8661*t60199;
  t60275 = t11459*t60270;
  t60311 = t60272 + t60275;
  t60314 = t11459*t60199;
  t60315 = t8661*t60270;
  t60529 = t60314 + t60315;
  t60891 = -1.*t7511*t31391*t7610;
  t60945 = t4880*t6236*t31391*t8116;
  t61005 = t60891 + t60945;
  t61805 = t6236*t12928*t7511*t8661*t31391;
  t61806 = -1.*t11459*t6236*t31391*t8116;
  t61807 = t61805 + t61806;
  t61809 = t11459*t6236*t12928*t7511*t31391;
  t61810 = t6236*t8661*t31391*t8116;
  t61815 = t61809 + t61810;
  t22617 = -0.325*t13114*t22372*t6236*t12928;
  t23507 = -0.1575*t22372*t7511*t7610;
  t23752 = -0.1575*t12923*t22372*t6236*t8116;
  t23858 = t22372*t7511*t7610;
  t23862 = -1.*t4880*t22372*t6236*t8116;
  t23892 = t23858 + t23862;
  t23893 = 0.2255*t23892;
  t24014 = 0.325*t8661*t23990;
  t24329 = -0.575*t11469*t24305;
  t27685 = -0.575*t11109*t25654;
  t29393 = -1.*t11469*t24305;
  t29410 = t10413*t25654;
  t29691 = t29393 + t29410;
  t29977 = -0.295*t29691;
  t30026 = t10413*t24305;
  t30401 = t11469*t25654;
  t30413 = t30026 + t30401;
  t30672 = -0.0641*t30413;
  t30684 = t22617 + t23507 + t23752 + t23893 + t24014 + t24329 + t27685 + t29977 + t30672;
  t61033 = t4880*t31391*t7610;
  t61066 = t6236*t7511*t31391*t8116;
  t61080 = t61033 + t61066;
  t61926 = -1.*t6236*t12928*t8661*t31391;
  t61927 = t11459*t61080;
  t61928 = t61926 + t61927;
  t61930 = -1.*t11459*t6236*t12928*t31391;
  t61938 = -1.*t8661*t61080;
  t62040 = t61930 + t61938;
  t62133 = t11459*t6236*t12928*t31391;
  t62135 = t8661*t61080;
  t62136 = t62133 + t62135;
  t60135 = -0.1575*t6236*t7511*t31391;
  t60216 = t6236*t7511*t31391;
  t62157 = -1.*t7511*t31391*t7610*t8116;
  t62159 = t60238 + t62157;
  t62161 = t12928*t8661*t31391*t7610;
  t62162 = t11459*t62159;
  t62163 = t62161 + t62162;
  t62165 = -1.*t11459*t12928*t31391*t7610;
  t62229 = t8661*t62159;
  t62366 = t62165 + t62229;
  t61801 = -0.1575*t12923*t6236*t12928*t31391;
  t61802 = -0.2255*t4880*t6236*t12928*t31391;
  t61803 = 0.325*t6236*t12928*t7511*t8661*t31391;
  t61804 = 0.325*t13114*t6236*t31391*t8116;
  t61808 = -0.575*t11109*t61807;
  t61816 = -0.575*t11469*t61815;
  t61817 = t11469*t61807;
  t61818 = t10413*t61815;
  t61819 = t61817 + t61818;
  t61820 = -0.0641*t61819;
  t61822 = t10413*t61807;
  t61823 = -1.*t11469*t61815;
  t61851 = t61822 + t61823;
  t61882 = -0.295*t61851;
  t61883 = t61801 + t61802 + t61803 + t61804 + t61808 + t61816 + t61820 + t61882;
  t35008 = 0.1575*t12923*t35000;
  t35678 = 0.2255*t4880*t35000;
  t38931 = -0.325*t7511*t8661*t35000;
  t45574 = -0.325*t13114*t31779;
  t45685 = -0.575*t11109*t45578;
  t47101 = -0.575*t11469*t46741;
  t47127 = t11469*t45578;
  t47136 = t10413*t46741;
  t49022 = t47127 + t47136;
  t49321 = -0.0641*t49022;
  t53615 = t10413*t45578;
  t55411 = -1.*t11469*t46741;
  t56012 = t53615 + t55411;
  t56062 = -0.295*t56012;
  t56096 = t35008 + t35678 + t38931 + t45574 + t45685 + t47101 + t49321 + t56062;
  t63531 = t22372*t12928;
  t63559 = -1.*t31391*t7610*t8116;
  t64253 = t63531 + t63559;
  t63517 = -1.*t7511*t8661*t60199;
  t65096 = t11459*t64253;
  t65098 = t63517 + t65096;
  t65101 = -1.*t11459*t7511*t60199;
  t65102 = -1.*t8661*t64253;
  t65103 = t65101 + t65102;
  t65232 = t7511*t8661*t60199;
  t65233 = -1.*t11459*t64253;
  t65234 = t65232 + t65233;
  t60200 = -0.325*t13114*t60199;
  t60215 = 0.1575*t12923*t60210;
  t65257 = -1.*t11459*t7511*t60210;
  t65258 = t60272 + t65257;
  t65260 = -1.*t7511*t8661*t60210;
  t65261 = t60314 + t65260;
  t62425 = -0.068*t7511*t60199;
  t62426 = -0.325*t4880*t8661*t60199;
  t62427 = 0.575*t4880*t11109*t8661*t60199;
  t62431 = 0.575*t4880*t11459*t11469*t60199;
  t62432 = -1.*t4880*t10413*t8661*t60199;
  t62434 = t4880*t11459*t11469*t60199;
  t62435 = t62432 + t62434;
  t62437 = -0.295*t62435;
  t62452 = -1.*t4880*t11459*t10413*t60199;
  t62524 = -1.*t4880*t8661*t11469*t60199;
  t62537 = t62452 + t62524;
  t62545 = -0.0641*t62537;
  t63401 = t62425 + t62426 + t62427 + t62431 + t62437 + t62545;
  t60889 = -0.1575*t4880*t31391*t7610;
  t60890 = -0.1575*t6236*t7511*t31391*t8116;
  t61006 = 0.325*t8661*t61005;
  t61008 = -0.575*t11109*t8661*t61005;
  t61032 = -0.575*t11459*t11469*t61005;
  t61093 = 0.2255*t61080;
  t61118 = t10413*t8661*t61005;
  t61119 = -1.*t11459*t11469*t61005;
  t61125 = t61118 + t61119;
  t61126 = -0.295*t61125;
  t61127 = t11459*t10413*t61005;
  t61128 = t8661*t11469*t61005;
  t61142 = t61127 + t61128;
  t61733 = -0.0641*t61142;
  t61796 = t60889 + t60890 + t61006 + t61008 + t61032 + t61093 + t61126 + t61733;
  t31357 = 0.1575*t4880*t22372*t6236;
  t31780 = 0.1575*t7511*t31779;
  t32057 = 0.325*t8661*t32042;
  t32079 = -0.575*t11109*t8661*t32042;
  t32118 = -0.575*t11459*t11469*t32042;
  t32983 = 0.2255*t32982;
  t32986 = t10413*t8661*t32042;
  t33695 = -1.*t11459*t11469*t32042;
  t33881 = t32986 + t33695;
  t33894 = -0.295*t33881;
  t33950 = t11459*t10413*t32042;
  t34112 = t8661*t11469*t32042;
  t34528 = t33950 + t34112;
  t34641 = -0.0641*t34528;
  t34885 = t31357 + t31780 + t32057 + t32079 + t32118 + t32983 + t33894 + t34641;
  t65973 = -1.*t4880*t64253;
  t65981 = t60216 + t65973;
  t66217 = t7511*t64253;
  t66221 = t60238 + t66217;
  t61907 = -0.325*t6236*t12928*t8661*t31391;
  t61921 = 0.325*t11459*t61080;
  t61929 = -0.575*t11109*t61928;
  t62041 = -0.575*t11469*t62040;
  t62043 = t11469*t61928;
  t62044 = t10413*t62040;
  t62046 = t62043 + t62044;
  t62051 = -0.0641*t62046;
  t62086 = t10413*t61928;
  t62124 = -1.*t11469*t62040;
  t62125 = t62086 + t62124;
  t62126 = -0.295*t62125;
  t62127 = t61907 + t61921 + t61929 + t62041 + t62051 + t62126;
  t66024 = 0.325*t11459*t65981;
  t66035 = -0.575*t11459*t11109*t65981;
  t66041 = 0.575*t8661*t11469*t65981;
  t66050 = -1.*t10413*t8661*t65981;
  t66055 = t11459*t11469*t65981;
  t66057 = t66050 + t66055;
  t66058 = -0.0641*t66057;
  t66067 = t11459*t10413*t65981;
  t66120 = t8661*t11469*t65981;
  t66137 = t66067 + t66120;
  t66195 = -0.295*t66137;
  t66197 = t66024 + t66035 + t66041 + t66058 + t66195;
  t65227 = -0.325*t11459*t7511*t60199;
  t65228 = -0.325*t8661*t64253;
  t65235 = -0.575*t11469*t65234;
  t65240 = -0.575*t11109*t65103;
  t65242 = -1.*t11469*t65234;
  t65245 = t10413*t65103;
  t65246 = t65242 + t65245;
  t65247 = -0.295*t65246;
  t65249 = t10413*t65234;
  t65250 = t11469*t65103;
  t65251 = t65249 + t65250;
  t65252 = -0.0641*t65251;
  t65253 = t65227 + t65228 + t65235 + t65240 + t65247 + t65252;
  t57455 = -0.325*t8661*t56186;
  t57561 = 0.325*t11459*t32982;
  t57677 = -0.575*t11109*t57676;
  t57940 = -0.575*t11469*t57903;
  t57942 = t11469*t57676;
  t57943 = t10413*t57903;
  t57944 = t57942 + t57943;
  t57961 = -0.0641*t57944;
  t58078 = t10413*t57676;
  t58079 = -1.*t11469*t57903;
  t58082 = t58078 + t58079;
  t58214 = -0.295*t58082;
  t59249 = t57455 + t57561 + t57677 + t57940 + t57961 + t58214;
  t66274 = t12928*t31391*t7610;
  t66275 = t22372*t8116;
  t66277 = t66274 + t66275;
  t66279 = -1.*t4880*t6236*t31391;
  t66281 = -1.*t7511*t64253;
  t66282 = t66279 + t66281;
  t66278 = -1.*t8661*t66277;
  t66283 = t11459*t66282;
  t66285 = t66278 + t66283;
  t66290 = -1.*t11459*t66277;
  t66291 = -1.*t8661*t66282;
  t66293 = t66290 + t66291;
  t66511 = t8661*t66277;
  t66516 = -1.*t11459*t66282;
  t66517 = t66511 + t66516;
  t62132 = -0.575*t10413*t61928;
  t62137 = -0.575*t11469*t62136;
  t62138 = -1.*t11469*t61928;
  t62142 = t10413*t62136;
  t62143 = t62138 + t62142;
  t62144 = -0.0641*t62143;
  t62145 = -1.*t10413*t61928;
  t62146 = -1.*t11469*t62136;
  t62147 = t62145 + t62146;
  t62148 = -0.295*t62147;
  t62149 = t62132 + t62137 + t62144 + t62148;
  t65989 = -0.575*t11459*t10413*t65981;
  t65994 = -0.575*t8661*t11469*t65981;
  t66003 = t10413*t8661*t65981;
  t66005 = -1.*t11459*t11469*t65981;
  t66007 = t66003 + t66005;
  t66009 = -0.0641*t66007;
  t66010 = -1.*t11459*t10413*t65981;
  t66011 = -1.*t8661*t11469*t65981;
  t66015 = t66010 + t66011;
  t66017 = -0.295*t66015;
  t66019 = t65989 + t65994 + t66009 + t66017;
  t65099 = -0.575*t11469*t65098;
  t65107 = -0.575*t10413*t65103;
  t65114 = -1.*t11469*t65098;
  t65118 = -1.*t10413*t65103;
  t65125 = t65114 + t65118;
  t65185 = -0.295*t65125;
  t65186 = t10413*t65098;
  t65216 = -1.*t11469*t65103;
  t65220 = t65186 + t65216;
  t65221 = -0.0641*t65220;
  t65223 = t65099 + t65107 + t65185 + t65221;
  t59273 = -0.575*t10413*t57676;
  t59308 = -0.575*t11469*t59306;
  t59344 = -1.*t11469*t57676;
  t59345 = t10413*t59306;
  t59354 = t59344 + t59345;
  t59355 = -0.0641*t59354;
  t59359 = -1.*t10413*t57676;
  t59369 = -1.*t11469*t59306;
  t59374 = t59359 + t59369;
  t59601 = -0.295*t59374;
  t59632 = t59273 + t59308 + t59355 + t59601;
  t66286 = -0.575*t11469*t66285;
  t66294 = -0.575*t10413*t66293;
  t66295 = -1.*t11469*t66285;
  t66297 = -1.*t10413*t66293;
  t66299 = t66295 + t66297;
  t66301 = -0.295*t66299;
  t66469 = t10413*t66285;
  t66470 = -1.*t11469*t66293;
  t66477 = t66469 + t66470;
  t66486 = -0.0641*t66477;
  t66495 = t66286 + t66294 + t66301 + t66486;
  t66547 = t11459*t66277;
  t66549 = t8661*t66282;
  t66551 = t66547 + t66549;
  t66553 = t11469*t66285;
  t66522 = t10413*t66293;
  t66559 = -1.*t10413*t66285;
  t66560 = -1.*t11469*t66551;
  t66561 = t66559 + t66560;
  t66590 = -0.325*t13114*t6236*t12928*t31391;
  t66591 = -0.1575*t7511*t31391*t7610;
  t66592 = -0.1575*t12923*t6236*t31391*t8116;
  t66594 = t7511*t31391*t7610;
  t66595 = -1.*t4880*t6236*t31391*t8116;
  t66596 = t66594 + t66595;
  t66597 = 0.2255*t66596;
  t66598 = 0.325*t8661*t61080;
  t66599 = -0.575*t11469*t61928;
  t66600 = -0.575*t11109*t62136;
  t66601 = -0.295*t62143;
  t66602 = t11469*t62136;
  t66603 = t62086 + t66602;
  t66604 = -0.0641*t66603;
  t66605 = t66590 + t66591 + t66592 + t66597 + t66598 + t66599 + t66600 + t66601 + t66604;
  t66619 = 0.1575*t4880*t6236*t31391;
  t66620 = 0.1575*t7511*t64253;
  t66621 = 0.325*t8661*t65981;
  t66622 = -0.575*t11109*t8661*t65981;
  t66623 = -0.575*t11459*t11469*t65981;
  t66624 = 0.2255*t66282;
  t66625 = -0.295*t66007;
  t66626 = -0.0641*t66137;
  t66627 = t66619 + t66620 + t66621 + t66622 + t66623 + t66624 + t66625 + t66626;
  t66606 = 0.1575*t12923*t60199;
  t66607 = 0.2255*t4880*t60199;
  t66608 = -0.325*t7511*t8661*t60199;
  t66609 = -0.325*t13114*t64253;
  t66610 = -0.575*t11109*t65098;
  t66611 = -0.575*t11469*t65103;
  t66613 = t11469*t65098;
  t66614 = t66613 + t65245;
  t66616 = -0.0641*t66614;
  t66617 = -0.295*t65220;
  t66618 = t66606 + t66607 + t66608 + t66609 + t66610 + t66611 + t66616 + t66617;
  t66569 = 0.1575*t22372*t6236*t7511;
  t66570 = -0.325*t13114*t56186;
  t66571 = 0.1575*t12923*t31779;
  t66574 = -1.*t22372*t6236*t7511;
  t66575 = t4880*t31779;
  t66576 = t66574 + t66575;
  t66577 = 0.2255*t66576;
  t66579 = 0.325*t8661*t32982;
  t66580 = -0.575*t11469*t57676;
  t66581 = -0.575*t11109*t59306;
  t66582 = -0.295*t59354;
  t66583 = t11469*t59306;
  t66584 = t58078 + t66583;
  t66588 = -0.0641*t66584;
  t66589 = t66569 + t66570 + t66571 + t66577 + t66579 + t66580 + t66581 + t66582 + t66588;
  t66628 = -0.325*t8661*t66277;
  t66629 = 0.325*t11459*t66282;
  t66630 = -0.575*t11109*t66285;
  t66631 = -0.575*t11469*t66293;
  t66633 = t66553 + t66522;
  t66634 = -0.0641*t66633;
  t66635 = -0.295*t66477;
  t66636 = t66628 + t66629 + t66630 + t66631 + t66634 + t66635;
  t66637 = -0.575*t10413*t66285;
  t66638 = -0.575*t11469*t66551;
  t66639 = t10413*t66551;
  t66640 = t66295 + t66639;
  t66641 = -0.0641*t66640;
  t66642 = -0.295*t66561;
  t66643 = t66637 + t66638 + t66641 + t66642;
  t66704 = -1.*t22372*t6236*t12928*t7511*t8661;
  t66705 = t11459*t22372*t6236*t8116;
  t66706 = t66704 + t66705;
  t66708 = -1.*t11459*t22372*t6236*t12928*t7511;
  t66712 = -1.*t22372*t6236*t8661*t8116;
  t66713 = t66708 + t66712;
  t66670 = -1.*t4880*t22372*t7610;
  t66677 = -1.*t22372*t6236*t7511*t8116;
  t66678 = t66670 + t66677;
  t66737 = t22372*t6236*t12928*t8661;
  t66738 = t11459*t66678;
  t66754 = t66737 + t66738;
  t66837 = -1.*t8661*t66678;
  t66838 = t24331 + t66837;
  t66854 = -1.*t11459*t22372*t6236*t12928;
  t66855 = t8661*t66678;
  t66856 = t66854 + t66855;
  t66940 = t22372*t7511*t7610*t8116;
  t66941 = t32291 + t66940;
  t66950 = -1.*t22372*t12928*t8661*t7610;
  t66961 = t11459*t66941;
  t66963 = t66950 + t66961;
  t66965 = t11459*t22372*t12928*t7610;
  t66966 = t8661*t66941;
  t66967 = t66965 + t66966;
  t66699 = 0.1575*t12923*t22372*t6236*t12928;
  t66700 = 0.2255*t4880*t22372*t6236*t12928;
  t66701 = -0.325*t22372*t6236*t12928*t7511*t8661;
  t66703 = -0.325*t13114*t22372*t6236*t8116;
  t66707 = -0.575*t11109*t66706;
  t66718 = -0.575*t11469*t66713;
  t66722 = t11469*t66706;
  t66726 = t10413*t66713;
  t66727 = t66722 + t66726;
  t66728 = -0.0641*t66727;
  t66729 = t10413*t66706;
  t66730 = -1.*t11469*t66713;
  t66731 = t66729 + t66730;
  t66732 = -0.295*t66731;
  t66733 = t66699 + t66700 + t66701 + t66703 + t66707 + t66718 + t66728 + t66732;
  t67083 = -1.*t11459*t7511*t31779;
  t67084 = t57666 + t67083;
  t67087 = -1.*t7511*t8661*t31779;
  t67088 = t59299 + t67087;
  t67103 = t12928*t31391;
  t67104 = t22372*t7610*t8116;
  t67105 = t67103 + t67104;
  t67101 = -1.*t7511*t8661*t56186;
  t67106 = t11459*t67105;
  t67107 = t67101 + t67106;
  t67109 = -1.*t11459*t7511*t56186;
  t67111 = -1.*t8661*t67105;
  t67112 = t67109 + t67111;
  t67249 = t7511*t8661*t56186;
  t67253 = -1.*t11459*t67105;
  t67254 = t67249 + t67253;
  t66655 = 0.1575*t4880*t22372*t7610;
  t66656 = 0.1575*t22372*t6236*t7511*t8116;
  t66661 = 0.325*t8661*t23892;
  t66668 = -0.575*t11109*t8661*t23892;
  t66669 = -0.575*t11459*t11469*t23892;
  t66679 = 0.2255*t66678;
  t66682 = t10413*t8661*t23892;
  t66689 = -1.*t11459*t11469*t23892;
  t66691 = t66682 + t66689;
  t66692 = -0.295*t66691;
  t66693 = t11459*t10413*t23892;
  t66694 = t8661*t11469*t23892;
  t66695 = t66693 + t66694;
  t66696 = -0.0641*t66695;
  t66697 = t66655 + t66656 + t66661 + t66668 + t66669 + t66679 + t66692 + t66696;
  t67059 = -0.068*t7511*t56186;
  t67060 = -0.325*t4880*t8661*t56186;
  t67062 = 0.575*t4880*t11109*t8661*t56186;
  t67064 = 0.575*t4880*t11459*t11469*t56186;
  t67065 = -1.*t4880*t10413*t8661*t56186;
  t67066 = t4880*t11459*t11469*t56186;
  t67067 = t67065 + t67066;
  t67068 = -0.295*t67067;
  t67069 = -1.*t4880*t11459*t10413*t56186;
  t67071 = -1.*t4880*t8661*t11469*t56186;
  t67072 = t67069 + t67071;
  t67073 = -0.0641*t67072;
  t67075 = t67059 + t67060 + t67062 + t67064 + t67068 + t67073;
  t67288 = -1.*t4880*t67105;
  t67289 = t66574 + t67288;
  t67326 = t7511*t67105;
  t67327 = t32291 + t67326;
  t66735 = 0.325*t22372*t6236*t12928*t8661;
  t66736 = 0.325*t11459*t66678;
  t66792 = -0.575*t11109*t66754;
  t66839 = -0.575*t11469*t66838;
  t66840 = t11469*t66754;
  t66841 = t10413*t66838;
  t66842 = t66840 + t66841;
  t66843 = -0.0641*t66842;
  t66844 = t10413*t66754;
  t66845 = -1.*t11469*t66838;
  t66848 = t66844 + t66845;
  t66849 = -0.295*t66848;
  t66850 = t66735 + t66736 + t66792 + t66839 + t66843 + t66849;
  t67304 = 0.325*t11459*t67289;
  t67305 = -0.575*t11459*t11109*t67289;
  t67306 = 0.575*t8661*t11469*t67289;
  t67308 = -1.*t10413*t8661*t67289;
  t67309 = t11459*t11469*t67289;
  t67312 = t67308 + t67309;
  t67313 = -0.0641*t67312;
  t67314 = t11459*t10413*t67289;
  t67315 = t8661*t11469*t67289;
  t67316 = t67314 + t67315;
  t67318 = -0.295*t67316;
  t67319 = t67304 + t67305 + t67306 + t67313 + t67318;
  t67247 = -0.325*t11459*t7511*t56186;
  t67248 = -0.325*t8661*t67105;
  t67255 = -0.575*t11469*t67254;
  t67259 = -0.575*t11109*t67112;
  t67264 = -1.*t11469*t67254;
  t67266 = t10413*t67112;
  t67268 = t67264 + t67266;
  t67269 = -0.295*t67268;
  t67270 = t10413*t67254;
  t67271 = t11469*t67112;
  t67272 = t67270 + t67271;
  t67273 = -0.0641*t67272;
  t67274 = t67247 + t67248 + t67255 + t67259 + t67269 + t67273;
  t67349 = t4880*t22372*t6236;
  t67350 = -1.*t7511*t67105;
  t67351 = t67349 + t67350;
  t67348 = -1.*t8661*t35000;
  t67353 = t11459*t67351;
  t67354 = t67348 + t67353;
  t67486 = -1.*t11459*t35000;
  t67487 = -1.*t8661*t67351;
  t67488 = t67486 + t67487;
  t67527 = t8661*t35000;
  t67528 = -1.*t11459*t67351;
  t67529 = t67527 + t67528;
  t66852 = -0.575*t10413*t66754;
  t66857 = -0.575*t11469*t66856;
  t66858 = -1.*t11469*t66754;
  t66859 = t10413*t66856;
  t66860 = t66858 + t66859;
  t66861 = -0.0641*t66860;
  t66862 = -1.*t10413*t66754;
  t66863 = -1.*t11469*t66856;
  t66864 = t66862 + t66863;
  t66865 = -0.295*t66864;
  t66900 = t66852 + t66857 + t66861 + t66865;
  t67290 = -0.575*t11459*t10413*t67289;
  t67291 = -0.575*t8661*t11469*t67289;
  t67293 = t10413*t8661*t67289;
  t67294 = -1.*t11459*t11469*t67289;
  t67295 = t67293 + t67294;
  t67296 = -0.0641*t67295;
  t67298 = -1.*t11459*t10413*t67289;
  t67299 = -1.*t8661*t11469*t67289;
  t67300 = t67298 + t67299;
  t67301 = -0.295*t67300;
  t67302 = t67290 + t67291 + t67296 + t67301;
  t67108 = -0.575*t11469*t67107;
  t67113 = -0.575*t10413*t67112;
  t67159 = -1.*t11469*t67107;
  t67170 = -1.*t10413*t67112;
  t67209 = t67159 + t67170;
  t67225 = -0.295*t67209;
  t67227 = t10413*t67107;
  t67228 = -1.*t11469*t67112;
  t67232 = t67227 + t67228;
  t67241 = -0.0641*t67232;
  t67243 = t67108 + t67113 + t67225 + t67241;
  t67424 = -0.575*t11469*t67354;
  t67492 = -0.575*t10413*t67488;
  t67494 = -1.*t11469*t67354;
  t67499 = -1.*t10413*t67488;
  t67500 = t67494 + t67499;
  t67501 = -0.295*t67500;
  t67502 = t10413*t67354;
  t67503 = -1.*t11469*t67488;
  t67508 = t67502 + t67503;
  t67514 = -0.0641*t67508;
  t67518 = t67424 + t67492 + t67501 + t67514;
  t67555 = t11459*t35000;
  t67556 = t8661*t67351;
  t67559 = t67555 + t67556;
  t67561 = t11469*t67354;
  t67533 = t10413*t67488;
  t67567 = -1.*t10413*t67354;
  t67568 = -1.*t11469*t67559;
  t67569 = t67567 + t67568;
  p_output1[0]=(t13229 + t13230 + t13231 + t13235 + t13274 - 0.575*t11469*t13289 - 0.575*t11109*t13305 - 0.295*(-1.*t11469*t13289 + t10413*t13305) - 0.0641*(t10413*t13289 + t11469*t13305))*var2[4] + t13227*var2[5] + t12905*var2[9] + t13445*var2[10] + t14077*var2[11];
  p_output1[1]=t13227*var2[4] + (t13229 + t13231 - 0.575*t11469*t15810 - 0.575*t11109*t15822 - 0.295*(-1.*t11469*t15810 + t10413*t15822) - 0.0641*(t10413*t15810 + t11469*t15822) + 0.2255*t4880*t6236*t8116 - 0.325*t6236*t7511*t8116*t8661)*var2[5] + t14314*var2[9] + t15718*var2[10] + t15334*var2[11];
  p_output1[2]=t12905*var2[4] + t14314*var2[5] + (t13230 + t13235 - 0.575*t11459*t11469*t13245 + t13274 - 0.1575*t4880*t6236*t8116 - 0.575*t11109*t13245*t8661 - 0.295*(-1.*t11459*t11469*t13245 + t10413*t13245*t8661) - 0.0641*(t10413*t11459*t13245 + t11469*t13245*t8661))*var2[9] + t16355*var2[10] + t16297*var2[11];
  p_output1[3]=t13445*var2[4] + t15718*var2[5] + t16355*var2[9] + (-0.575*t11109*t16739 - 0.575*t11469*t16877 - 0.0641*(t11469*t16739 + t10413*t16877) - 0.295*(-1.*t11469*t16877 + t17056) - 0.325*t11459*t12928*t6236 - 0.325*t16710*t8661)*var2[10] + t16861*var2[11];
  p_output1[4]=t14077*var2[4] + t15334*var2[5] + t16297*var2[9] + t16861*var2[10] + (0.575*t11469*t16734 - 0.575*t10413*t17127 - 0.295*(-1.*t10413*t17127 + t17148) - 0.0641*t17164)*var2[11];
  p_output1[5]=1.;
  p_output1[6]=-0.575*t11469*t13420 - 0.575*t11109*t13732 - 0.0641*(t13432 + t11469*t13732) - 0.295*t14022 - 0.1575*t6236*t7511 + 0.325*t12928*t13114*t7610 + 0.1575*t12923*t7610*t8116 + 0.2255*(t6236*t7511 + t4880*t7610*t8116) + 0.325*t11481*t8661;
  p_output1[7]=-0.575*t11109*t14322 - 0.575*t11469*t14416 - 0.295*t14427 - 0.0641*(t11469*t14322 + t15517) - 0.1575*t12923*t12928*t6236 - 0.2255*t12928*t4880*t6236 + 0.325*t13114*t6236*t8116 + 0.325*t12928*t6236*t7511*t8661;
  p_output1[8]=-0.575*t11459*t11469*t13234 - 0.295*t16142 - 0.0641*t16339 + 0.2255*t16710 - 0.1575*t4880*t7610 - 0.1575*t6236*t7511*t8116 + 0.325*t13234*t8661 - 0.575*t11109*t13234*t8661;
  p_output1[9]=0.325*t11459*t16710 - 0.575*t11109*t16734 - 0.575*t11469*t16739 - 0.295*t16855 - 0.0641*(t17056 + t17148) - 0.325*t12928*t6236*t8661;
  p_output1[10]=-0.575*t10413*t16734 - 0.575*t11469*t17127 - 0.0641*(t16823 + t10413*t17127) - 0.295*t17164;
  p_output1[11]=(t60135 + t60200 + t60215 + 0.2255*(t4880*t60210 + t60216) - 0.575*t11469*t60311 - 0.575*t11109*t60529 - 0.295*(-1.*t11469*t60311 + t10413*t60529) - 0.0641*(t10413*t60311 + t11469*t60529) + 0.325*t60270*t8661)*var2[3] + t30684*var2[4] + t56096*var2[5] + t34885*var2[9] + t59249*var2[10] + t59632*var2[11];
  p_output1[12]=t30684*var2[3] + (t60135 - 0.575*t11469*t62163 - 0.575*t11109*t62366 - 0.295*(-1.*t11469*t62163 + t10413*t62366) - 0.0641*(t10413*t62163 + t11469*t62366) + 0.325*t12928*t13114*t31391*t7610 + 0.1575*t12923*t31391*t7610*t8116 + 0.2255*(t60216 + t31391*t4880*t7610*t8116) + 0.325*t62159*t8661)*var2[4] + t61883*var2[5] + t61796*var2[9] + t62127*var2[10] + t62149*var2[11];
  p_output1[13]=t56096*var2[3] + t61883*var2[4] + (t60200 + 0.2255*t4880*t60210 + t60215 - 0.575*t11469*t65258 - 0.575*t11109*t65261 - 0.295*(-1.*t11469*t65258 + t10413*t65261) - 0.0641*(t10413*t65258 + t11469*t65261) - 0.325*t60210*t7511*t8661)*var2[5] + t63401*var2[9] + t65253*var2[10] + t65223*var2[11];
  p_output1[14]=t34885*var2[3] + t61796*var2[4] + t63401*var2[5] + (t60135 + 0.1575*t4880*t64253 + 0.2255*t65981 - 0.575*t11459*t11469*t66221 + 0.325*t66221*t8661 - 0.575*t11109*t66221*t8661 - 0.295*(-1.*t11459*t11469*t66221 + t10413*t66221*t8661) - 0.0641*(t10413*t11459*t66221 + t11469*t66221*t8661))*var2[9] + t66197*var2[10] + t66019*var2[11];
  p_output1[15]=t59249*var2[3] + t62127*var2[4] + t65253*var2[5] + t66197*var2[9] + (-0.325*t11459*t66277 - 0.575*t11109*t66293 - 0.575*t11469*t66517 - 0.0641*(t11469*t66293 + t10413*t66517) - 0.295*(-1.*t11469*t66517 + t66522) - 0.325*t66282*t8661)*var2[10] + t66495*var2[11];
  p_output1[16]=t59632*var2[3] + t62149*var2[4] + t65223*var2[5] + t66019*var2[9] + t66495*var2[10] + (0.575*t11469*t66285 - 0.575*t10413*t66551 - 0.295*(-1.*t10413*t66551 + t66553) - 0.0641*t66561)*var2[11];
  p_output1[17]=1.;
  p_output1[18]=t66589;
  p_output1[19]=t66605;
  p_output1[20]=t66618;
  p_output1[21]=t66627;
  p_output1[22]=t66636;
  p_output1[23]=t66643;
  p_output1[24]=t66589*var2[3] + t66605*var2[4] + t66618*var2[5] + t66627*var2[9] + t66636*var2[10] + t66643*var2[11];
  p_output1[25]=t66605*var2[3] + (t66569 - 0.575*t11469*t66963 - 0.575*t11109*t66967 - 0.295*(-1.*t11469*t66963 + t10413*t66967) - 0.0641*(t10413*t66963 + t11469*t66967) - 0.325*t12928*t13114*t22372*t7610 - 0.1575*t12923*t22372*t7610*t8116 + 0.2255*(t66574 - 1.*t22372*t4880*t7610*t8116) + 0.325*t66941*t8661)*var2[4] + t66733*var2[5] + t66697*var2[9] + t66850*var2[10] + t66900*var2[11];
  p_output1[26]=t66618*var2[3] + t66733*var2[4] + (0.2255*t31779*t4880 + t66570 + t66571 - 0.575*t11469*t67084 - 0.575*t11109*t67088 - 0.295*(-1.*t11469*t67084 + t10413*t67088) - 0.0641*(t10413*t67084 + t11469*t67088) - 0.325*t31779*t7511*t8661)*var2[5] + t67075*var2[9] + t67274*var2[10] + t67243*var2[11];
  p_output1[27]=t66627*var2[3] + t66697*var2[4] + t67075*var2[5] + (t66569 + 0.1575*t4880*t67105 + 0.2255*t67289 - 0.575*t11459*t11469*t67327 + 0.325*t67327*t8661 - 0.575*t11109*t67327*t8661 - 0.295*(-1.*t11459*t11469*t67327 + t10413*t67327*t8661) - 0.0641*(t10413*t11459*t67327 + t11469*t67327*t8661))*var2[9] + t67319*var2[10] + t67302*var2[11];
  p_output1[28]=t66636*var2[3] + t66850*var2[4] + t67274*var2[5] + t67319*var2[9] + (-0.325*t11459*t35000 - 0.575*t11109*t67488 - 0.575*t11469*t67529 - 0.0641*(t11469*t67488 + t10413*t67529) - 0.295*(-1.*t11469*t67529 + t67533) - 0.325*t67351*t8661)*var2[10] + t67518*var2[11];
  p_output1[29]=t66643*var2[3] + t66900*var2[4] + t67243*var2[5] + t67302*var2[9] + t67518*var2[10] + (0.575*t11469*t67354 - 0.575*t10413*t67559 - 0.295*(-1.*t10413*t67559 + t67561) - 0.0641*t67569)*var2[11];
  p_output1[30]=1.;
  p_output1[31]=0.1575*t12923*t64253 - 0.325*t13114*t66277 + t66286 - 0.575*t11109*t66551 - 0.0641*(t66469 + t11469*t66551) - 0.295*t66640 + 0.1575*t31391*t6236*t7511 + 0.2255*(t4880*t64253 - 1.*t31391*t6236*t7511) + 0.325*t66282*t8661;
  p_output1[32]=0.325*t12928*t13114*t22372*t6236 - 0.575*t11469*t66754 - 0.575*t11109*t66856 - 0.0641*(t66844 + t11469*t66856) - 0.295*t66860 + 0.1575*t22372*t7511*t7610 + 0.1575*t12923*t22372*t6236*t8116 + 0.2255*(-1.*t22372*t7511*t7610 + t22372*t4880*t6236*t8116) + 0.325*t66678*t8661;
  p_output1[33]=0.1575*t12923*t56186 + 0.2255*t4880*t56186 - 0.325*t13114*t67105 - 0.575*t11109*t67107 - 0.575*t11469*t67112 - 0.295*t67232 - 0.0641*(t11469*t67107 + t67266) - 0.325*t56186*t7511*t8661;
  p_output1[34]=-0.1575*t22372*t4880*t6236 - 0.575*t11459*t11469*t67289 - 0.295*t67295 - 0.0641*t67316 + 0.2255*t67351 + 0.1575*t67105*t7511 + 0.325*t67289*t8661 - 0.575*t11109*t67289*t8661;
  p_output1[35]=0.325*t11459*t67351 - 0.575*t11109*t67354 - 0.575*t11469*t67488 - 0.295*t67508 - 0.0641*(t67533 + t67561) - 0.325*t35000*t8661;
  p_output1[36]=-0.575*t10413*t67354 - 0.575*t11469*t67559 - 0.0641*(t67494 + t10413*t67559) - 0.295*t67569;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 37, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_initial_swing_velocity_RlFoot_ParallelStance.hh"

namespace ParallelStance
{

void J_initial_swing_velocity_RlFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
