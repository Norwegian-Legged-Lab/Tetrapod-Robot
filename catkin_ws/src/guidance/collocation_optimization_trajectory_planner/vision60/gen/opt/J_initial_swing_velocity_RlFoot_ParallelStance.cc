/*
 * Automatically Generated from Mathematica.
 * Tue 7 Jun 2022 14:08:21 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t13006;
  double t13486;
  double t12754;
  double t13622;
  double t13639;
  double t18935;
  double t19652;
  double t19743;
  double t20035;
  double t20352;
  double t20572;
  double t20792;
  double t23944;
  double t20451;
  double t20456;
  double t24445;
  double t24808;
  double t24940;
  double t25057;
  double t25072;
  double t25084;
  double t23961;
  double t23962;
  double t23929;
  double t23939;
  double t25561;
  double t25654;
  double t25655;
  double t25660;
  double t25665;
  double t25666;
  double t25695;
  double t25699;
  double t25700;
  double t21234;
  double t21263;
  double t21315;
  double t25720;
  double t25721;
  double t25722;
  double t25727;
  double t25748;
  double t25900;
  double t26392;
  double t26517;
  double t26527;
  double t26769;
  double t26785;
  double t27033;
  double t27043;
  double t27044;
  double t27045;
  double t27229;
  double t27230;
  double t27237;
  double t25524;
  double t25526;
  double t27477;
  double t27479;
  double t27484;
  double t27485;
  double t23948;
  double t23951;
  double t23952;
  double t23964;
  double t25007;
  double t25098;
  double t25121;
  double t25139;
  double t25166;
  double t25197;
  double t25213;
  double t25219;
  double t25516;
  double t25520;
  double t25522;
  double t26676;
  double t26696;
  double t26697;
  double t26704;
  double t26744;
  double t26745;
  double t26746;
  double t26747;
  double t26751;
  double t26755;
  double t26765;
  double t26766;
  double t26767;
  double t25530;
  double t25532;
  double t25534;
  double t25525;
  double t25554;
  double t25658;
  double t13347;
  double t13661;
  double t20343;
  double t20485;
  double t21037;
  double t21324;
  double t21369;
  double t21385;
  double t21389;
  double t21395;
  double t22202;
  double t23887;
  double t23925;
  double t23926;
  double t23927;
  double t29564;
  double t29568;
  double t29572;
  double t29576;
  double t29580;
  double t29581;
  double t29582;
  double t29620;
  double t29625;
  double t29632;
  double t29670;
  double t29694;
  double t27224;
  double t27225;
  double t27405;
  double t27407;
  double t27418;
  double t27426;
  double t27427;
  double t27437;
  double t27440;
  double t27441;
  double t27443;
  double t27444;
  double t27445;
  double t30342;
  double t30343;
  double t30344;
  double t30341;
  double t30345;
  double t30346;
  double t30348;
  double t30399;
  double t30456;
  double t30458;
  double t25718;
  double t25719;
  double t25723;
  double t25902;
  double t25903;
  double t25904;
  double t25905;
  double t25906;
  double t25907;
  double t25911;
  double t25913;
  double t25914;
  double t25915;
  double t28935;
  double t28937;
  double t28938;
  double t28940;
  double t28941;
  double t28942;
  double t28943;
  double t28946;
  double t28995;
  double t29545;
  double t29547;
  double t27041;
  double t27053;
  double t27065;
  double t27207;
  double t27208;
  double t27212;
  double t27215;
  double t27216;
  double t27219;
  double t27221;
  double t27222;
  double t30347;
  double t30430;
  double t30436;
  double t30438;
  double t30445;
  double t30446;
  double t30447;
  double t30448;
  double t30449;
  double t30450;
  double t30452;
  double t30480;
  double t30481;
  double t30482;
  double t25989;
  double t26550;
  double t26556;
  double t26557;
  double t26559;
  double t26564;
  double t26566;
  double t26567;
  double t26568;
  double t26569;
  double t26574;
  double t30484;
  double t30465;
  double t30488;
  double t30489;
  double t30490;
  double t31171;
  double t31265;
  double t31334;
  double t31354;
  double t31414;
  double t31416;
  double t31419;
  double t31434;
  double t31444;
  double t31457;
  double t31490;
  double t31492;
  double t31497;
  double t31498;
  double t31522;
  double t31527;
  double t31528;
  double t32419;
  double t32431;
  double t32433;
  double t32619;
  double t32620;
  double t32624;
  double t32676;
  double t32709;
  double t32736;
  double t31534;
  double t31535;
  double t31537;
  double t32875;
  double t32882;
  double t32900;
  double t32924;
  double t32925;
  double t32927;
  double t32986;
  double t32989;
  double t32991;
  double t33098;
  double t33148;
  double t33155;
  double t33397;
  double t33410;
  double t33460;
  double t33289;
  double t33293;
  double t33298;
  double t33738;
  double t33741;
  double t33746;
  double t33758;
  double t33766;
  double t33768;
  double t33786;
  double t33790;
  double t33801;
  double t33941;
  double t33942;
  double t33944;
  double t34053;
  double t34056;
  double t34058;
  double t34061;
  double t34063;
  double t34064;
  double t31172;
  double t31174;
  double t31182;
  double t31187;
  double t31195;
  double t31197;
  double t31199;
  double t31356;
  double t31422;
  double t31463;
  double t31464;
  double t31466;
  double t31467;
  double t31472;
  double t31473;
  double t31480;
  double t31481;
  double t31483;
  double t31484;
  double t33956;
  double t33961;
  double t33962;
  double t34140;
  double t34144;
  double t34163;
  double t34187;
  double t34196;
  double t34197;
  double t34274;
  double t34278;
  double t34279;
  double t33282;
  double t33688;
  double t34373;
  double t34374;
  double t34377;
  double t34393;
  double t34404;
  double t34414;
  double t34415;
  double t34416;
  double t34031;
  double t34039;
  double t34050;
  double t34052;
  double t34060;
  double t34068;
  double t34071;
  double t34073;
  double t34084;
  double t34085;
  double t34086;
  double t34100;
  double t34106;
  double t34107;
  double t34121;
  double t32541;
  double t32606;
  double t32609;
  double t32613;
  double t32628;
  double t32738;
  double t32772;
  double t32852;
  double t32859;
  double t32860;
  double t32861;
  double t32863;
  double t32865;
  double t32871;
  double t32872;
  double t34691;
  double t34696;
  double t34697;
  double t34690;
  double t34699;
  double t34700;
  double t34706;
  double t34708;
  double t34709;
  double t34860;
  double t34861;
  double t34863;
  double t33304;
  double t33591;
  double t34935;
  double t34944;
  double t34947;
  double t34949;
  double t34626;
  double t34628;
  double t34629;
  double t34632;
  double t34633;
  double t34634;
  double t34637;
  double t34638;
  double t34641;
  double t34643;
  double t34644;
  double t34648;
  double t34659;
  double t33925;
  double t33929;
  double t33948;
  double t33954;
  double t33955;
  double t33963;
  double t33965;
  double t33968;
  double t33984;
  double t33988;
  double t33990;
  double t33996;
  double t33997;
  double t34006;
  double t34015;
  double t31489;
  double t31512;
  double t31531;
  double t31532;
  double t31533;
  double t31540;
  double t31542;
  double t31554;
  double t31727;
  double t31777;
  double t31789;
  double t31806;
  double t31819;
  double t31846;
  double t31850;
  double t34977;
  double t34980;
  double t35136;
  double t35139;
  double t34132;
  double t34138;
  double t34172;
  double t34198;
  double t34209;
  double t34215;
  double t34220;
  double t34228;
  double t34235;
  double t34239;
  double t34250;
  double t34253;
  double t34255;
  double t35000;
  double t35001;
  double t35002;
  double t35003;
  double t35004;
  double t35029;
  double t35089;
  double t35098;
  double t35114;
  double t35117;
  double t35119;
  double t35122;
  double t34849;
  double t34855;
  double t34864;
  double t34869;
  double t34874;
  double t34881;
  double t34886;
  double t34887;
  double t34888;
  double t34889;
  double t34897;
  double t34902;
  double t34918;
  double t32903;
  double t32904;
  double t32980;
  double t32997;
  double t33005;
  double t33008;
  double t33016;
  double t33018;
  double t33027;
  double t33041;
  double t33048;
  double t33051;
  double t33052;
  double t35227;
  double t35229;
  double t35230;
  double t35234;
  double t35235;
  double t35241;
  double t35231;
  double t35242;
  double t35243;
  double t35248;
  double t35252;
  double t35255;
  double t35324;
  double t35326;
  double t35327;
  double t34261;
  double t34280;
  double t34281;
  double t34284;
  double t34295;
  double t34302;
  double t34306;
  double t34311;
  double t34321;
  double t34329;
  double t34333;
  double t34982;
  double t34983;
  double t34986;
  double t34987;
  double t34988;
  double t34989;
  double t34990;
  double t34991;
  double t34992;
  double t34994;
  double t34995;
  double t34705;
  double t34710;
  double t34712;
  double t34713;
  double t34716;
  double t34717;
  double t34809;
  double t34812;
  double t34835;
  double t34839;
  double t34846;
  double t33065;
  double t33172;
  double t33175;
  double t33189;
  double t33201;
  double t33202;
  double t33205;
  double t33206;
  double t33227;
  double t33268;
  double t33273;
  double t35246;
  double t35261;
  double t35263;
  double t35264;
  double t35266;
  double t35292;
  double t35298;
  double t35299;
  double t35300;
  double t35308;
  double t35310;
  double t35386;
  double t35396;
  double t35404;
  double t35412;
  double t35356;
  double t35429;
  double t35438;
  double t35440;
  double t35592;
  double t35594;
  double t35595;
  double t35603;
  double t35609;
  double t35634;
  double t35638;
  double t35640;
  double t35642;
  double t35643;
  double t35647;
  double t35651;
  double t35655;
  double t35664;
  double t35669;
  double t35746;
  double t35749;
  double t35751;
  double t35757;
  double t35758;
  double t35760;
  double t35773;
  double t35774;
  double t35779;
  double t35673;
  double t35685;
  double t35689;
  double t35712;
  double t35721;
  double t35725;
  double t35728;
  double t35733;
  double t35742;
  double t35743;
  double t35744;
  double t35462;
  double t35465;
  double t35494;
  double t35496;
  double t35499;
  double t35504;
  double t35505;
  double t35506;
  double t35511;
  double t35512;
  double t35560;
  double t35570;
  double t35577;
  double t35585;
  double t35586;
  double t35784;
  double t35785;
  double t35806;
  double t35808;
  double t35812;
  double t35821;
  double t35825;
  double t35832;
  double t35833;
  double t35834;
  double t35838;
  double t35848;
  double t35858;
  double t35863;
  double t35868;
  double t36015;
  double t36016;
  double t36017;
  double t36021;
  double t36022;
  double t36023;
  double t35935;
  double t35951;
  double t35952;
  double t36047;
  double t36050;
  double t36052;
  double t36055;
  double t36058;
  double t36090;
  double t36092;
  double t36093;
  double t36134;
  double t36151;
  double t36185;
  double t36186;
  double t36202;
  double t36230;
  double t36231;
  double t36250;
  double t36004;
  double t36005;
  double t36008;
  double t36009;
  double t36018;
  double t36025;
  double t36026;
  double t36028;
  double t36033;
  double t36035;
  double t36036;
  double t36037;
  double t36038;
  double t36039;
  double t36040;
  double t36400;
  double t36401;
  double t36403;
  double t36407;
  double t36448;
  double t36450;
  double t36452;
  double t36434;
  double t36456;
  double t36457;
  double t36505;
  double t36509;
  double t36514;
  double t36602;
  double t36613;
  double t36620;
  double t35908;
  double t35913;
  double t35914;
  double t35916;
  double t35930;
  double t35957;
  double t35960;
  double t35970;
  double t35985;
  double t35986;
  double t35987;
  double t35991;
  double t35993;
  double t35998;
  double t36001;
  double t36360;
  double t36361;
  double t36362;
  double t36363;
  double t36365;
  double t36366;
  double t36378;
  double t36380;
  double t36383;
  double t36384;
  double t36387;
  double t36390;
  double t36395;
  double t36677;
  double t36678;
  double t36726;
  double t36727;
  double t36042;
  double t36043;
  double t36054;
  double t36060;
  double t36062;
  double t36065;
  double t36071;
  double t36073;
  double t36074;
  double t36075;
  double t36076;
  double t36080;
  double t36081;
  double t36699;
  double t36701;
  double t36702;
  double t36705;
  double t36706;
  double t36711;
  double t36712;
  double t36713;
  double t36714;
  double t36715;
  double t36718;
  double t36721;
  double t36594;
  double t36596;
  double t36633;
  double t36646;
  double t36659;
  double t36660;
  double t36662;
  double t36663;
  double t36664;
  double t36665;
  double t36666;
  double t36667;
  double t36668;
  double t36830;
  double t36843;
  double t36857;
  double t36814;
  double t36860;
  double t36861;
  double t36886;
  double t36892;
  double t36901;
  double t36965;
  double t36966;
  double t36968;
  double t36087;
  double t36094;
  double t36095;
  double t36096;
  double t36097;
  double t36098;
  double t36099;
  double t36100;
  double t36103;
  double t36106;
  double t36107;
  double t36679;
  double t36680;
  double t36681;
  double t36682;
  double t36683;
  double t36684;
  double t36685;
  double t36687;
  double t36688;
  double t36692;
  double t36695;
  double t36472;
  double t36515;
  double t36518;
  double t36519;
  double t36521;
  double t36532;
  double t36542;
  double t36552;
  double t36564;
  double t36581;
  double t36584;
  double t36869;
  double t36902;
  double t36923;
  double t36928;
  double t36938;
  double t36939;
  double t36940;
  double t36944;
  double t36945;
  double t36947;
  double t36955;
  double t37021;
  double t37022;
  double t37023;
  double t37030;
  double t36974;
  double t37037;
  double t37041;
  double t37042;
  t13006 = Cos(var1[4]);
  t13486 = Sin(var1[9]);
  t12754 = Cos(var1[9]);
  t13622 = Sin(var1[4]);
  t13639 = Sin(var1[5]);
  t18935 = Sin(var1[10]);
  t19652 = -1.*t13006*t13486;
  t19743 = -1.*t12754*t13622*t13639;
  t20035 = t19652 + t19743;
  t20352 = Cos(var1[11]);
  t20572 = Cos(var1[10]);
  t20792 = Sin(var1[11]);
  t23944 = Cos(var1[5]);
  t20451 = -1.*t20352;
  t20456 = 1. + t20451;
  t24445 = -1.*t23944*t13486*t18935*t13622;
  t24808 = t20572*t13622*t13639;
  t24940 = t24445 + t24808;
  t25057 = -1.*t20572*t23944*t13486*t13622;
  t25072 = -1.*t18935*t13622*t13639;
  t25084 = t25057 + t25072;
  t23961 = -1.*t20572;
  t23962 = 1. + t23961;
  t23929 = -1.*t12754;
  t23939 = 1. + t23929;
  t25561 = -1.*t12754*t13622;
  t25654 = -1.*t13006*t13486*t13639;
  t25655 = t25561 + t25654;
  t25660 = t13006*t23944*t18935;
  t25665 = t20572*t25655;
  t25666 = t25660 + t25665;
  t25695 = -1.*t20572*t13006*t23944;
  t25699 = t18935*t25655;
  t25700 = t25695 + t25699;
  t21234 = t12754*t13006;
  t21263 = -1.*t13486*t13622*t13639;
  t21315 = t21234 + t21263;
  t25720 = t23944*t18935*t13622;
  t25721 = t20572*t21315;
  t25722 = t25720 + t25721;
  t25727 = t20572*t23944*t13622;
  t25748 = -1.*t18935*t21315;
  t25900 = t25727 + t25748;
  t26392 = -1.*t20572*t23944*t13622;
  t26517 = t18935*t21315;
  t26527 = t26392 + t26517;
  t26769 = t13006*t23944*t13486*t18935;
  t26785 = -1.*t20572*t13006*t13639;
  t27033 = t26769 + t26785;
  t27043 = t20572*t13006*t23944*t13486;
  t27044 = t13006*t18935*t13639;
  t27045 = t27043 + t27044;
  t27229 = -1.*t13006*t23944*t13486*t18935;
  t27230 = t20572*t13006*t13639;
  t27237 = t27229 + t27230;
  t25524 = 0.325*t23962*t13006*t23944;
  t25526 = 0.1575*t23939*t13006*t13639;
  t27477 = -1.*t20572*t13006*t13486*t13639;
  t27479 = t25660 + t27477;
  t27484 = -1.*t13006*t13486*t18935*t13639;
  t27485 = t25695 + t27484;
  t23948 = 0.1575*t23939*t23944*t13622;
  t23951 = 0.2255*t12754*t23944*t13622;
  t23952 = -0.325*t23944*t13486*t18935*t13622;
  t23964 = -0.325*t23962*t13622*t13639;
  t25007 = -0.575*t20456*t24940;
  t25098 = -0.575*t20792*t25084;
  t25121 = t20792*t24940;
  t25139 = t20352*t25084;
  t25166 = t25121 + t25139;
  t25197 = -0.0641*t25166;
  t25213 = t20352*t24940;
  t25219 = -1.*t20792*t25084;
  t25516 = t25213 + t25219;
  t25520 = -0.295*t25516;
  t25522 = t23948 + t23951 + t23952 + t23964 + t25007 + t25098 + t25197 + t25520;
  t26676 = 0.068*t13006*t23944*t13486;
  t26696 = 0.325*t12754*t13006*t23944*t18935;
  t26697 = -0.575*t12754*t20456*t13006*t23944*t18935;
  t26704 = -0.575*t12754*t20572*t13006*t23944*t20792;
  t26744 = t12754*t20352*t13006*t23944*t18935;
  t26745 = -1.*t12754*t20572*t13006*t23944*t20792;
  t26746 = t26744 + t26745;
  t26747 = -0.295*t26746;
  t26751 = t12754*t20572*t20352*t13006*t23944;
  t26755 = t12754*t13006*t23944*t18935*t20792;
  t26765 = t26751 + t26755;
  t26766 = -0.0641*t26765;
  t26767 = t26676 + t26696 + t26697 + t26704 + t26747 + t26766;
  t25530 = -1.*t13486*t13622;
  t25532 = t12754*t13006*t13639;
  t25534 = t25530 + t25532;
  t25525 = 0.1575*t13486*t13622;
  t25554 = 0.2255*t25534;
  t25658 = 0.325*t18935*t25655;
  t13347 = -0.1575*t12754*t13006;
  t13661 = 0.1575*t13486*t13622*t13639;
  t20343 = 0.325*t18935*t20035;
  t20485 = -0.575*t20456*t18935*t20035;
  t21037 = -0.575*t20572*t20792*t20035;
  t21324 = 0.2255*t21315;
  t21369 = t20352*t18935*t20035;
  t21385 = -1.*t20572*t20792*t20035;
  t21389 = t21369 + t21385;
  t21395 = -0.295*t21389;
  t22202 = t20572*t20352*t20035;
  t23887 = t18935*t20792*t20035;
  t23925 = t22202 + t23887;
  t23926 = -0.0641*t23925;
  t23927 = t13347 + t13661 + t20343 + t20485 + t21037 + t21324 + t21395 + t23926;
  t29564 = 0.325*t20572*t25534;
  t29568 = -0.575*t20572*t20456*t25534;
  t29572 = 0.575*t18935*t20792*t25534;
  t29576 = -1.*t20352*t18935*t25534;
  t29580 = t20572*t20792*t25534;
  t29581 = t29576 + t29580;
  t29582 = -0.0641*t29581;
  t29620 = t20572*t20352*t25534;
  t29625 = t18935*t20792*t25534;
  t29632 = t29620 + t29625;
  t29670 = -0.295*t29632;
  t29694 = t29564 + t29568 + t29572 + t29582 + t29670;
  t27224 = 0.325*t20572*t13006*t23944*t13486;
  t27225 = 0.325*t13006*t18935*t13639;
  t27405 = -0.575*t20792*t27237;
  t27407 = -0.575*t20456*t27045;
  t27418 = -1.*t20792*t27237;
  t27426 = t20352*t27045;
  t27427 = t27418 + t27426;
  t27437 = -0.295*t27427;
  t27440 = t20352*t27237;
  t27441 = t20792*t27045;
  t27443 = t27440 + t27441;
  t27444 = -0.0641*t27443;
  t27445 = t27224 + t27225 + t27405 + t27407 + t27437 + t27444;
  t30342 = t12754*t13622;
  t30343 = t13006*t13486*t13639;
  t30344 = t30342 + t30343;
  t30341 = -1.*t13006*t23944*t18935;
  t30345 = t20572*t30344;
  t30346 = t30341 + t30345;
  t30348 = -1.*t18935*t30344;
  t30399 = t25695 + t30348;
  t30456 = -1.*t20572*t30344;
  t30458 = t25660 + t30456;
  t25718 = 0.325*t23944*t18935*t13622;
  t25719 = 0.325*t20572*t21315;
  t25723 = -0.575*t20456*t25722;
  t25902 = -0.575*t20792*t25900;
  t25903 = t20792*t25722;
  t25904 = t20352*t25900;
  t25905 = t25903 + t25904;
  t25906 = -0.0641*t25905;
  t25907 = t20352*t25722;
  t25911 = -1.*t20792*t25900;
  t25913 = t25907 + t25911;
  t25914 = -0.295*t25913;
  t25915 = t25718 + t25719 + t25723 + t25902 + t25906 + t25914;
  t28935 = -0.575*t20572*t20352*t25534;
  t28937 = -0.575*t18935*t20792*t25534;
  t28938 = t20352*t18935*t25534;
  t28940 = -1.*t20572*t20792*t25534;
  t28941 = t28938 + t28940;
  t28942 = -0.0641*t28941;
  t28943 = -1.*t20572*t20352*t25534;
  t28946 = -1.*t18935*t20792*t25534;
  t28995 = t28943 + t28946;
  t29545 = -0.295*t28995;
  t29547 = t28935 + t28937 + t28942 + t29545;
  t27041 = -0.575*t20792*t27033;
  t27053 = -0.575*t20352*t27045;
  t27065 = -1.*t20792*t27033;
  t27207 = -1.*t20352*t27045;
  t27208 = t27065 + t27207;
  t27212 = -0.295*t27208;
  t27215 = t20352*t27033;
  t27216 = -1.*t20792*t27045;
  t27219 = t27215 + t27216;
  t27221 = -0.0641*t27219;
  t27222 = t27041 + t27053 + t27212 + t27221;
  t30347 = -0.575*t20792*t30346;
  t30430 = -0.575*t20352*t30399;
  t30436 = -1.*t20792*t30346;
  t30438 = -1.*t20352*t30399;
  t30445 = t30436 + t30438;
  t30446 = -0.295*t30445;
  t30447 = t20352*t30346;
  t30448 = -1.*t20792*t30399;
  t30449 = t30447 + t30448;
  t30450 = -0.0641*t30449;
  t30452 = t30347 + t30430 + t30446 + t30450;
  t30480 = t20572*t13006*t23944;
  t30481 = t18935*t30344;
  t30482 = t30480 + t30481;
  t25989 = -0.575*t20352*t25722;
  t26550 = -0.575*t20792*t26527;
  t26556 = -1.*t20792*t25722;
  t26557 = t20352*t26527;
  t26559 = t26556 + t26557;
  t26564 = -0.0641*t26559;
  t26566 = -1.*t20352*t25722;
  t26567 = -1.*t20792*t26527;
  t26568 = t26566 + t26567;
  t26569 = -0.295*t26568;
  t26574 = t25989 + t26550 + t26564 + t26569;
  t30484 = t20792*t30346;
  t30465 = t20352*t30399;
  t30488 = -1.*t20352*t30346;
  t30489 = -1.*t20792*t30482;
  t30490 = t30488 + t30489;
  t31171 = Cos(var1[3]);
  t31265 = t12754*t31171*t13622;
  t31334 = t31171*t13006*t13486*t13639;
  t31354 = t31265 + t31334;
  t31414 = -1.*t31171*t13006*t23944*t18935;
  t31416 = t20572*t31354;
  t31419 = t31414 + t31416;
  t31434 = t20572*t31171*t13006*t23944;
  t31444 = t18935*t31354;
  t31457 = t31434 + t31444;
  t31490 = Sin(var1[3]);
  t31492 = -1.*t23944*t31490;
  t31497 = -1.*t31171*t13622*t13639;
  t31498 = t31492 + t31497;
  t31522 = t31171*t13006*t13486;
  t31527 = -1.*t12754*t31498;
  t31528 = t31522 + t31527;
  t32419 = -1.*t31171*t23944*t13622;
  t32431 = t31490*t13639;
  t32433 = t32419 + t32431;
  t32619 = -1.*t13486*t18935*t32433;
  t32620 = t20572*t31498;
  t32624 = t32619 + t32620;
  t32676 = -1.*t20572*t13486*t32433;
  t32709 = -1.*t18935*t31498;
  t32736 = t32676 + t32709;
  t31534 = -1.*t12754*t31171*t13006;
  t31535 = -1.*t13486*t31498;
  t31537 = t31534 + t31535;
  t32875 = t31171*t23944*t13622;
  t32882 = -1.*t31490*t13639;
  t32900 = t32875 + t32882;
  t32924 = -1.*t18935*t32900;
  t32925 = t20572*t31537;
  t32927 = t32924 + t32925;
  t32986 = -1.*t20572*t32900;
  t32989 = -1.*t18935*t31537;
  t32991 = t32986 + t32989;
  t33098 = t20572*t32900;
  t33148 = t18935*t31537;
  t33155 = t33098 + t33148;
  t33397 = -1.*t31171*t23944;
  t33410 = t31490*t13622*t13639;
  t33460 = t33397 + t33410;
  t33289 = -1.*t23944*t31490*t13622;
  t33293 = -1.*t31171*t13639;
  t33298 = t33289 + t33293;
  t33738 = t12754*t13006*t31490;
  t33741 = -1.*t13486*t33460;
  t33746 = t33738 + t33741;
  t33758 = -1.*t18935*t33298;
  t33766 = t20572*t33746;
  t33768 = t33758 + t33766;
  t33786 = t20572*t33298;
  t33790 = t18935*t33746;
  t33801 = t33786 + t33790;
  t33941 = -1.*t13486*t31490*t13622;
  t33942 = t12754*t13006*t31490*t13639;
  t33944 = t33941 + t33942;
  t34053 = t13006*t23944*t13486*t18935*t31490;
  t34056 = -1.*t20572*t13006*t31490*t13639;
  t34058 = t34053 + t34056;
  t34061 = t20572*t13006*t23944*t13486*t31490;
  t34063 = t13006*t18935*t31490*t13639;
  t34064 = t34061 + t34063;
  t31172 = -0.325*t23962*t31171*t13006*t23944;
  t31174 = -0.1575*t31171*t13486*t13622;
  t31182 = -0.1575*t23939*t31171*t13006*t13639;
  t31187 = t31171*t13486*t13622;
  t31195 = -1.*t12754*t31171*t13006*t13639;
  t31197 = t31187 + t31195;
  t31199 = 0.2255*t31197;
  t31356 = 0.325*t18935*t31354;
  t31422 = -0.575*t20792*t31419;
  t31463 = -0.575*t20456*t31457;
  t31464 = -1.*t20792*t31419;
  t31466 = t20352*t31457;
  t31467 = t31464 + t31466;
  t31472 = -0.295*t31467;
  t31473 = t20352*t31419;
  t31480 = t20792*t31457;
  t31481 = t31473 + t31480;
  t31483 = -0.0641*t31481;
  t31484 = t31172 + t31174 + t31182 + t31199 + t31356 + t31422 + t31463 + t31472 + t31483;
  t33956 = t12754*t31490*t13622;
  t33961 = t13006*t13486*t31490*t13639;
  t33962 = t33956 + t33961;
  t34140 = -1.*t13006*t23944*t18935*t31490;
  t34144 = t20572*t33962;
  t34163 = t34140 + t34144;
  t34187 = -1.*t20572*t13006*t23944*t31490;
  t34196 = -1.*t18935*t33962;
  t34197 = t34187 + t34196;
  t34274 = t20572*t13006*t23944*t31490;
  t34278 = t18935*t33962;
  t34279 = t34274 + t34278;
  t33282 = -0.1575*t13006*t13486*t31490;
  t33688 = t13006*t13486*t31490;
  t34373 = -1.*t13486*t31490*t13622*t13639;
  t34374 = t33738 + t34373;
  t34377 = t23944*t18935*t31490*t13622;
  t34393 = t20572*t34374;
  t34404 = t34377 + t34393;
  t34414 = -1.*t20572*t23944*t31490*t13622;
  t34415 = t18935*t34374;
  t34416 = t34414 + t34415;
  t34031 = -0.1575*t23939*t13006*t23944*t31490;
  t34039 = -0.2255*t12754*t13006*t23944*t31490;
  t34050 = 0.325*t13006*t23944*t13486*t18935*t31490;
  t34052 = 0.325*t23962*t13006*t31490*t13639;
  t34060 = -0.575*t20456*t34058;
  t34068 = -0.575*t20792*t34064;
  t34071 = t20792*t34058;
  t34073 = t20352*t34064;
  t34084 = t34071 + t34073;
  t34085 = -0.0641*t34084;
  t34086 = t20352*t34058;
  t34100 = -1.*t20792*t34064;
  t34106 = t34086 + t34100;
  t34107 = -0.295*t34106;
  t34121 = t34031 + t34039 + t34050 + t34052 + t34060 + t34068 + t34085 + t34107;
  t32541 = 0.1575*t23939*t32433;
  t32606 = 0.2255*t12754*t32433;
  t32609 = -0.325*t13486*t18935*t32433;
  t32613 = -0.325*t23962*t31498;
  t32628 = -0.575*t20456*t32624;
  t32738 = -0.575*t20792*t32736;
  t32772 = t20792*t32624;
  t32852 = t20352*t32736;
  t32859 = t32772 + t32852;
  t32860 = -0.0641*t32859;
  t32861 = t20352*t32624;
  t32863 = -1.*t20792*t32736;
  t32865 = t32861 + t32863;
  t32871 = -0.295*t32865;
  t32872 = t32541 + t32606 + t32609 + t32613 + t32628 + t32738 + t32860 + t32871;
  t34691 = t31171*t23944;
  t34696 = -1.*t31490*t13622*t13639;
  t34697 = t34691 + t34696;
  t34690 = -1.*t13486*t18935*t33298;
  t34699 = t20572*t34697;
  t34700 = t34690 + t34699;
  t34706 = -1.*t20572*t13486*t33298;
  t34708 = -1.*t18935*t34697;
  t34709 = t34706 + t34708;
  t34860 = t13486*t18935*t33298;
  t34861 = -1.*t20572*t34697;
  t34863 = t34860 + t34861;
  t33304 = -0.325*t23962*t33298;
  t33591 = 0.1575*t23939*t33460;
  t34935 = -1.*t20572*t13486*t33460;
  t34944 = t33758 + t34935;
  t34947 = -1.*t13486*t18935*t33460;
  t34949 = t33786 + t34947;
  t34626 = -0.068*t13486*t33298;
  t34628 = -0.325*t12754*t18935*t33298;
  t34629 = 0.575*t12754*t20456*t18935*t33298;
  t34632 = 0.575*t12754*t20572*t20792*t33298;
  t34633 = -1.*t12754*t20352*t18935*t33298;
  t34634 = t12754*t20572*t20792*t33298;
  t34637 = t34633 + t34634;
  t34638 = -0.295*t34637;
  t34641 = -1.*t12754*t20572*t20352*t33298;
  t34643 = -1.*t12754*t18935*t20792*t33298;
  t34644 = t34641 + t34643;
  t34648 = -0.0641*t34644;
  t34659 = t34626 + t34628 + t34629 + t34632 + t34638 + t34648;
  t33925 = -0.1575*t12754*t31490*t13622;
  t33929 = -0.1575*t13006*t13486*t31490*t13639;
  t33948 = 0.325*t18935*t33944;
  t33954 = -0.575*t20456*t18935*t33944;
  t33955 = -0.575*t20572*t20792*t33944;
  t33963 = 0.2255*t33962;
  t33965 = t20352*t18935*t33944;
  t33968 = -1.*t20572*t20792*t33944;
  t33984 = t33965 + t33968;
  t33988 = -0.295*t33984;
  t33990 = t20572*t20352*t33944;
  t33996 = t18935*t20792*t33944;
  t33997 = t33990 + t33996;
  t34006 = -0.0641*t33997;
  t34015 = t33925 + t33929 + t33948 + t33954 + t33955 + t33963 + t33988 + t34006;
  t31489 = 0.1575*t12754*t31171*t13006;
  t31512 = 0.1575*t13486*t31498;
  t31531 = 0.325*t18935*t31528;
  t31532 = -0.575*t20456*t18935*t31528;
  t31533 = -0.575*t20572*t20792*t31528;
  t31540 = 0.2255*t31537;
  t31542 = t20352*t18935*t31528;
  t31554 = -1.*t20572*t20792*t31528;
  t31727 = t31542 + t31554;
  t31777 = -0.295*t31727;
  t31789 = t20572*t20352*t31528;
  t31806 = t18935*t20792*t31528;
  t31819 = t31789 + t31806;
  t31846 = -0.0641*t31819;
  t31850 = t31489 + t31512 + t31531 + t31532 + t31533 + t31540 + t31777 + t31846;
  t34977 = -1.*t12754*t34697;
  t34980 = t33688 + t34977;
  t35136 = t13486*t34697;
  t35139 = t33738 + t35136;
  t34132 = -0.325*t13006*t23944*t18935*t31490;
  t34138 = 0.325*t20572*t33962;
  t34172 = -0.575*t20456*t34163;
  t34198 = -0.575*t20792*t34197;
  t34209 = t20792*t34163;
  t34215 = t20352*t34197;
  t34220 = t34209 + t34215;
  t34228 = -0.0641*t34220;
  t34235 = t20352*t34163;
  t34239 = -1.*t20792*t34197;
  t34250 = t34235 + t34239;
  t34253 = -0.295*t34250;
  t34255 = t34132 + t34138 + t34172 + t34198 + t34228 + t34253;
  t35000 = 0.325*t20572*t34980;
  t35001 = -0.575*t20572*t20456*t34980;
  t35002 = 0.575*t18935*t20792*t34980;
  t35003 = -1.*t20352*t18935*t34980;
  t35004 = t20572*t20792*t34980;
  t35029 = t35003 + t35004;
  t35089 = -0.0641*t35029;
  t35098 = t20572*t20352*t34980;
  t35114 = t18935*t20792*t34980;
  t35117 = t35098 + t35114;
  t35119 = -0.295*t35117;
  t35122 = t35000 + t35001 + t35002 + t35089 + t35119;
  t34849 = -0.325*t20572*t13486*t33298;
  t34855 = -0.325*t18935*t34697;
  t34864 = -0.575*t20792*t34863;
  t34869 = -0.575*t20456*t34709;
  t34874 = -1.*t20792*t34863;
  t34881 = t20352*t34709;
  t34886 = t34874 + t34881;
  t34887 = -0.295*t34886;
  t34888 = t20352*t34863;
  t34889 = t20792*t34709;
  t34897 = t34888 + t34889;
  t34902 = -0.0641*t34897;
  t34918 = t34849 + t34855 + t34864 + t34869 + t34887 + t34902;
  t32903 = -0.325*t18935*t32900;
  t32904 = 0.325*t20572*t31537;
  t32980 = -0.575*t20456*t32927;
  t32997 = -0.575*t20792*t32991;
  t33005 = t20792*t32927;
  t33008 = t20352*t32991;
  t33016 = t33005 + t33008;
  t33018 = -0.0641*t33016;
  t33027 = t20352*t32927;
  t33041 = -1.*t20792*t32991;
  t33048 = t33027 + t33041;
  t33051 = -0.295*t33048;
  t33052 = t32903 + t32904 + t32980 + t32997 + t33018 + t33051;
  t35227 = t23944*t31490*t13622;
  t35229 = t31171*t13639;
  t35230 = t35227 + t35229;
  t35234 = -1.*t12754*t13006*t31490;
  t35235 = -1.*t13486*t34697;
  t35241 = t35234 + t35235;
  t35231 = -1.*t18935*t35230;
  t35242 = t20572*t35241;
  t35243 = t35231 + t35242;
  t35248 = -1.*t20572*t35230;
  t35252 = -1.*t18935*t35241;
  t35255 = t35248 + t35252;
  t35324 = t18935*t35230;
  t35326 = -1.*t20572*t35241;
  t35327 = t35324 + t35326;
  t34261 = -0.575*t20352*t34163;
  t34280 = -0.575*t20792*t34279;
  t34281 = -1.*t20792*t34163;
  t34284 = t20352*t34279;
  t34295 = t34281 + t34284;
  t34302 = -0.0641*t34295;
  t34306 = -1.*t20352*t34163;
  t34311 = -1.*t20792*t34279;
  t34321 = t34306 + t34311;
  t34329 = -0.295*t34321;
  t34333 = t34261 + t34280 + t34302 + t34329;
  t34982 = -0.575*t20572*t20352*t34980;
  t34983 = -0.575*t18935*t20792*t34980;
  t34986 = t20352*t18935*t34980;
  t34987 = -1.*t20572*t20792*t34980;
  t34988 = t34986 + t34987;
  t34989 = -0.0641*t34988;
  t34990 = -1.*t20572*t20352*t34980;
  t34991 = -1.*t18935*t20792*t34980;
  t34992 = t34990 + t34991;
  t34994 = -0.295*t34992;
  t34995 = t34982 + t34983 + t34989 + t34994;
  t34705 = -0.575*t20792*t34700;
  t34710 = -0.575*t20352*t34709;
  t34712 = -1.*t20792*t34700;
  t34713 = -1.*t20352*t34709;
  t34716 = t34712 + t34713;
  t34717 = -0.295*t34716;
  t34809 = t20352*t34700;
  t34812 = -1.*t20792*t34709;
  t34835 = t34809 + t34812;
  t34839 = -0.0641*t34835;
  t34846 = t34705 + t34710 + t34717 + t34839;
  t33065 = -0.575*t20352*t32927;
  t33172 = -0.575*t20792*t33155;
  t33175 = -1.*t20792*t32927;
  t33189 = t20352*t33155;
  t33201 = t33175 + t33189;
  t33202 = -0.0641*t33201;
  t33205 = -1.*t20352*t32927;
  t33206 = -1.*t20792*t33155;
  t33227 = t33205 + t33206;
  t33268 = -0.295*t33227;
  t33273 = t33065 + t33172 + t33202 + t33268;
  t35246 = -0.575*t20792*t35243;
  t35261 = -0.575*t20352*t35255;
  t35263 = -1.*t20792*t35243;
  t35264 = -1.*t20352*t35255;
  t35266 = t35263 + t35264;
  t35292 = -0.295*t35266;
  t35298 = t20352*t35243;
  t35299 = -1.*t20792*t35255;
  t35300 = t35298 + t35299;
  t35308 = -0.0641*t35300;
  t35310 = t35246 + t35261 + t35292 + t35308;
  t35386 = t20572*t35230;
  t35396 = t18935*t35241;
  t35404 = t35386 + t35396;
  t35412 = t20792*t35243;
  t35356 = t20352*t35255;
  t35429 = -1.*t20352*t35243;
  t35438 = -1.*t20792*t35404;
  t35440 = t35429 + t35438;
  t35592 = -0.325*t23962*t13006*t23944*t31490;
  t35594 = -0.1575*t13486*t31490*t13622;
  t35595 = -0.1575*t23939*t13006*t31490*t13639;
  t35603 = t13486*t31490*t13622;
  t35609 = -1.*t12754*t13006*t31490*t13639;
  t35634 = t35603 + t35609;
  t35638 = 0.2255*t35634;
  t35640 = 0.325*t18935*t33962;
  t35642 = -0.575*t20792*t34163;
  t35643 = -0.575*t20456*t34279;
  t35647 = -0.295*t34295;
  t35651 = t20792*t34279;
  t35655 = t34235 + t35651;
  t35664 = -0.0641*t35655;
  t35669 = t35592 + t35594 + t35595 + t35638 + t35640 + t35642 + t35643 + t35647 + t35664;
  t35746 = 0.1575*t12754*t13006*t31490;
  t35749 = 0.1575*t13486*t34697;
  t35751 = 0.325*t18935*t34980;
  t35757 = -0.575*t20456*t18935*t34980;
  t35758 = -0.575*t20572*t20792*t34980;
  t35760 = 0.2255*t35241;
  t35773 = -0.295*t34988;
  t35774 = -0.0641*t35117;
  t35779 = t35746 + t35749 + t35751 + t35757 + t35758 + t35760 + t35773 + t35774;
  t35673 = 0.1575*t23939*t33298;
  t35685 = 0.2255*t12754*t33298;
  t35689 = -0.325*t13486*t18935*t33298;
  t35712 = -0.325*t23962*t34697;
  t35721 = -0.575*t20456*t34700;
  t35725 = -0.575*t20792*t34709;
  t35728 = t20792*t34700;
  t35733 = t35728 + t34881;
  t35742 = -0.0641*t35733;
  t35743 = -0.295*t34835;
  t35744 = t35673 + t35685 + t35689 + t35712 + t35721 + t35725 + t35742 + t35743;
  t35462 = 0.1575*t31171*t13006*t13486;
  t35465 = -0.325*t23962*t32900;
  t35494 = 0.1575*t23939*t31498;
  t35496 = -1.*t31171*t13006*t13486;
  t35499 = t12754*t31498;
  t35504 = t35496 + t35499;
  t35505 = 0.2255*t35504;
  t35506 = 0.325*t18935*t31537;
  t35511 = -0.575*t20792*t32927;
  t35512 = -0.575*t20456*t33155;
  t35560 = -0.295*t33201;
  t35570 = t20792*t33155;
  t35577 = t33027 + t35570;
  t35585 = -0.0641*t35577;
  t35586 = t35462 + t35465 + t35494 + t35505 + t35506 + t35511 + t35512 + t35560 + t35585;
  t35784 = -0.325*t18935*t35230;
  t35785 = 0.325*t20572*t35241;
  t35806 = -0.575*t20456*t35243;
  t35808 = -0.575*t20792*t35255;
  t35812 = t35412 + t35356;
  t35821 = -0.0641*t35812;
  t35825 = -0.295*t35300;
  t35832 = t35784 + t35785 + t35806 + t35808 + t35821 + t35825;
  t35833 = -0.575*t20352*t35243;
  t35834 = -0.575*t20792*t35404;
  t35838 = t20352*t35404;
  t35848 = t35263 + t35838;
  t35858 = -0.0641*t35848;
  t35863 = -0.295*t35440;
  t35868 = t35833 + t35834 + t35858 + t35863;
  t36015 = -1.*t31171*t13006*t23944*t13486*t18935;
  t36016 = t20572*t31171*t13006*t13639;
  t36017 = t36015 + t36016;
  t36021 = -1.*t20572*t31171*t13006*t23944*t13486;
  t36022 = -1.*t31171*t13006*t18935*t13639;
  t36023 = t36021 + t36022;
  t35935 = -1.*t12754*t31171*t13622;
  t35951 = -1.*t31171*t13006*t13486*t13639;
  t35952 = t35935 + t35951;
  t36047 = t31171*t13006*t23944*t18935;
  t36050 = t20572*t35952;
  t36052 = t36047 + t36050;
  t36055 = -1.*t18935*t35952;
  t36058 = t31434 + t36055;
  t36090 = -1.*t20572*t31171*t13006*t23944;
  t36092 = t18935*t35952;
  t36093 = t36090 + t36092;
  t36134 = t31171*t13486*t13622*t13639;
  t36151 = t31534 + t36134;
  t36185 = -1.*t31171*t23944*t18935*t13622;
  t36186 = t20572*t36151;
  t36202 = t36185 + t36186;
  t36230 = t20572*t31171*t23944*t13622;
  t36231 = t18935*t36151;
  t36250 = t36230 + t36231;
  t36004 = 0.1575*t23939*t31171*t13006*t23944;
  t36005 = 0.2255*t12754*t31171*t13006*t23944;
  t36008 = -0.325*t31171*t13006*t23944*t13486*t18935;
  t36009 = -0.325*t23962*t31171*t13006*t13639;
  t36018 = -0.575*t20456*t36017;
  t36025 = -0.575*t20792*t36023;
  t36026 = t20792*t36017;
  t36028 = t20352*t36023;
  t36033 = t36026 + t36028;
  t36035 = -0.0641*t36033;
  t36036 = t20352*t36017;
  t36037 = -1.*t20792*t36023;
  t36038 = t36036 + t36037;
  t36039 = -0.295*t36038;
  t36040 = t36004 + t36005 + t36008 + t36009 + t36018 + t36025 + t36035 + t36039;
  t36400 = -1.*t20572*t13486*t31498;
  t36401 = t32924 + t36400;
  t36403 = -1.*t13486*t18935*t31498;
  t36407 = t33098 + t36403;
  t36448 = t23944*t31490;
  t36450 = t31171*t13622*t13639;
  t36452 = t36448 + t36450;
  t36434 = -1.*t13486*t18935*t32900;
  t36456 = t20572*t36452;
  t36457 = t36434 + t36456;
  t36505 = -1.*t20572*t13486*t32900;
  t36509 = -1.*t18935*t36452;
  t36514 = t36505 + t36509;
  t36602 = t13486*t18935*t32900;
  t36613 = -1.*t20572*t36452;
  t36620 = t36602 + t36613;
  t35908 = 0.1575*t12754*t31171*t13622;
  t35913 = 0.1575*t31171*t13006*t13486*t13639;
  t35914 = 0.325*t18935*t31197;
  t35916 = -0.575*t20456*t18935*t31197;
  t35930 = -0.575*t20572*t20792*t31197;
  t35957 = 0.2255*t35952;
  t35960 = t20352*t18935*t31197;
  t35970 = -1.*t20572*t20792*t31197;
  t35985 = t35960 + t35970;
  t35986 = -0.295*t35985;
  t35987 = t20572*t20352*t31197;
  t35991 = t18935*t20792*t31197;
  t35993 = t35987 + t35991;
  t35998 = -0.0641*t35993;
  t36001 = t35908 + t35913 + t35914 + t35916 + t35930 + t35957 + t35986 + t35998;
  t36360 = -0.068*t13486*t32900;
  t36361 = -0.325*t12754*t18935*t32900;
  t36362 = 0.575*t12754*t20456*t18935*t32900;
  t36363 = 0.575*t12754*t20572*t20792*t32900;
  t36365 = -1.*t12754*t20352*t18935*t32900;
  t36366 = t12754*t20572*t20792*t32900;
  t36378 = t36365 + t36366;
  t36380 = -0.295*t36378;
  t36383 = -1.*t12754*t20572*t20352*t32900;
  t36384 = -1.*t12754*t18935*t20792*t32900;
  t36387 = t36383 + t36384;
  t36390 = -0.0641*t36387;
  t36395 = t36360 + t36361 + t36362 + t36363 + t36380 + t36390;
  t36677 = -1.*t12754*t36452;
  t36678 = t35496 + t36677;
  t36726 = t13486*t36452;
  t36727 = t31534 + t36726;
  t36042 = 0.325*t31171*t13006*t23944*t18935;
  t36043 = 0.325*t20572*t35952;
  t36054 = -0.575*t20456*t36052;
  t36060 = -0.575*t20792*t36058;
  t36062 = t20792*t36052;
  t36065 = t20352*t36058;
  t36071 = t36062 + t36065;
  t36073 = -0.0641*t36071;
  t36074 = t20352*t36052;
  t36075 = -1.*t20792*t36058;
  t36076 = t36074 + t36075;
  t36080 = -0.295*t36076;
  t36081 = t36042 + t36043 + t36054 + t36060 + t36073 + t36080;
  t36699 = 0.325*t20572*t36678;
  t36701 = -0.575*t20572*t20456*t36678;
  t36702 = 0.575*t18935*t20792*t36678;
  t36705 = -1.*t20352*t18935*t36678;
  t36706 = t20572*t20792*t36678;
  t36711 = t36705 + t36706;
  t36712 = -0.0641*t36711;
  t36713 = t20572*t20352*t36678;
  t36714 = t18935*t20792*t36678;
  t36715 = t36713 + t36714;
  t36718 = -0.295*t36715;
  t36721 = t36699 + t36701 + t36702 + t36712 + t36718;
  t36594 = -0.325*t20572*t13486*t32900;
  t36596 = -0.325*t18935*t36452;
  t36633 = -0.575*t20792*t36620;
  t36646 = -0.575*t20456*t36514;
  t36659 = -1.*t20792*t36620;
  t36660 = t20352*t36514;
  t36662 = t36659 + t36660;
  t36663 = -0.295*t36662;
  t36664 = t20352*t36620;
  t36665 = t20792*t36514;
  t36666 = t36664 + t36665;
  t36667 = -0.0641*t36666;
  t36668 = t36594 + t36596 + t36633 + t36646 + t36663 + t36667;
  t36830 = t12754*t31171*t13006;
  t36843 = -1.*t13486*t36452;
  t36857 = t36830 + t36843;
  t36814 = -1.*t18935*t32433;
  t36860 = t20572*t36857;
  t36861 = t36814 + t36860;
  t36886 = -1.*t20572*t32433;
  t36892 = -1.*t18935*t36857;
  t36901 = t36886 + t36892;
  t36965 = t18935*t32433;
  t36966 = -1.*t20572*t36857;
  t36968 = t36965 + t36966;
  t36087 = -0.575*t20352*t36052;
  t36094 = -0.575*t20792*t36093;
  t36095 = -1.*t20792*t36052;
  t36096 = t20352*t36093;
  t36097 = t36095 + t36096;
  t36098 = -0.0641*t36097;
  t36099 = -1.*t20352*t36052;
  t36100 = -1.*t20792*t36093;
  t36103 = t36099 + t36100;
  t36106 = -0.295*t36103;
  t36107 = t36087 + t36094 + t36098 + t36106;
  t36679 = -0.575*t20572*t20352*t36678;
  t36680 = -0.575*t18935*t20792*t36678;
  t36681 = t20352*t18935*t36678;
  t36682 = -1.*t20572*t20792*t36678;
  t36683 = t36681 + t36682;
  t36684 = -0.0641*t36683;
  t36685 = -1.*t20572*t20352*t36678;
  t36687 = -1.*t18935*t20792*t36678;
  t36688 = t36685 + t36687;
  t36692 = -0.295*t36688;
  t36695 = t36679 + t36680 + t36684 + t36692;
  t36472 = -0.575*t20792*t36457;
  t36515 = -0.575*t20352*t36514;
  t36518 = -1.*t20792*t36457;
  t36519 = -1.*t20352*t36514;
  t36521 = t36518 + t36519;
  t36532 = -0.295*t36521;
  t36542 = t20352*t36457;
  t36552 = -1.*t20792*t36514;
  t36564 = t36542 + t36552;
  t36581 = -0.0641*t36564;
  t36584 = t36472 + t36515 + t36532 + t36581;
  t36869 = -0.575*t20792*t36861;
  t36902 = -0.575*t20352*t36901;
  t36923 = -1.*t20792*t36861;
  t36928 = -1.*t20352*t36901;
  t36938 = t36923 + t36928;
  t36939 = -0.295*t36938;
  t36940 = t20352*t36861;
  t36944 = -1.*t20792*t36901;
  t36945 = t36940 + t36944;
  t36947 = -0.0641*t36945;
  t36955 = t36869 + t36902 + t36939 + t36947;
  t37021 = t20572*t32433;
  t37022 = t18935*t36857;
  t37023 = t37021 + t37022;
  t37030 = t20792*t36861;
  t36974 = t20352*t36901;
  t37037 = -1.*t20352*t36861;
  t37041 = -1.*t20792*t37023;
  t37042 = t37037 + t37041;
  p_output1[0]=(t25524 + t25525 + t25526 + t25554 + t25658 - 0.575*t20792*t25666 - 0.575*t20456*t25700 - 0.295*(-1.*t20792*t25666 + t20352*t25700) - 0.0641*(t20352*t25666 + t20792*t25700))*var2[4] + t25522*var2[5] + t23927*var2[9] + t25915*var2[10] + t26574*var2[11];
  p_output1[1]=t25522*var2[4] + (0.2255*t12754*t13006*t13639 - 0.325*t13006*t13486*t13639*t18935 + t25524 + t25526 - 0.575*t20792*t27479 - 0.575*t20456*t27485 - 0.295*(-1.*t20792*t27479 + t20352*t27485) - 0.0641*(t20352*t27479 + t20792*t27485))*var2[5] + t26767*var2[9] + t27445*var2[10] + t27222*var2[11];
  p_output1[2]=t23927*var2[4] + t26767*var2[5] + (-0.1575*t12754*t13006*t13639 + t25525 + t25554 - 0.575*t18935*t20456*t25655 - 0.575*t20572*t20792*t25655 - 0.0641*(t20352*t20572*t25655 + t18935*t20792*t25655) - 0.295*(t18935*t20352*t25655 - 1.*t20572*t20792*t25655) + t25658)*var2[9] + t29694*var2[10] + t29547*var2[11];
  p_output1[3]=t25915*var2[4] + t27445*var2[5] + t29694*var2[9] + (-0.325*t13006*t20572*t23944 - 0.325*t18935*t30344 - 0.575*t20456*t30399 - 0.575*t20792*t30458 - 0.0641*(t20792*t30399 + t20352*t30458) - 0.295*(-1.*t20792*t30458 + t30465))*var2[10] + t30452*var2[11];
  p_output1[4]=t26574*var2[4] + t27222*var2[5] + t29547*var2[9] + t30452*var2[10] + (0.575*t20792*t30346 - 0.575*t20352*t30482 - 0.295*(-1.*t20352*t30482 + t30484) - 0.0641*t30490)*var2[11];
  p_output1[5]=1.;
  p_output1[6]=-0.1575*t13006*t13486 + 0.2255*(t13006*t13486 + t12754*t13622*t13639) + 0.325*t18935*t21315 + 0.1575*t13622*t13639*t23939 + 0.325*t13622*t23944*t23962 - 0.575*t20792*t25722 - 0.575*t20456*t26527 - 0.0641*(t25907 + t20792*t26527) - 0.295*t26559;
  p_output1[7]=-0.2255*t12754*t13006*t23944 + 0.325*t13006*t13486*t18935*t23944 - 0.1575*t13006*t23939*t23944 + 0.325*t13006*t13639*t23962 - 0.575*t20456*t27033 - 0.575*t20792*t27045 - 0.295*t27219 - 0.0641*(t20792*t27033 + t27426);
  p_output1[8]=-0.1575*t12754*t13622 - 0.1575*t13006*t13486*t13639 + 0.325*t18935*t25534 - 0.575*t18935*t20456*t25534 - 0.575*t20572*t20792*t25534 - 0.295*t28941 - 0.0641*t29632 + 0.2255*t30344;
  p_output1[9]=-0.325*t13006*t18935*t23944 + 0.325*t20572*t30344 - 0.575*t20456*t30346 - 0.575*t20792*t30399 - 0.295*t30449 - 0.0641*(t30465 + t30484);
  p_output1[10]=-0.575*t20352*t30346 - 0.575*t20792*t30482 - 0.0641*(t30436 + t20352*t30482) - 0.295*t30490;
  p_output1[11]=(t33282 + t33304 + t33591 + 0.2255*(t12754*t33460 + t33688) + 0.325*t18935*t33746 - 0.575*t20792*t33768 - 0.575*t20456*t33801 - 0.295*(-1.*t20792*t33768 + t20352*t33801) - 0.0641*(t20352*t33768 + t20792*t33801))*var2[3] + t31484*var2[4] + t32872*var2[5] + t31850*var2[9] + t33052*var2[10] + t33273*var2[11];
  p_output1[12]=t31484*var2[3] + (0.1575*t13622*t13639*t23939*t31490 + 0.325*t13622*t23944*t23962*t31490 + t33282 + 0.2255*(t12754*t13622*t13639*t31490 + t33688) + 0.325*t18935*t34374 - 0.575*t20792*t34404 - 0.575*t20456*t34416 - 0.295*(-1.*t20792*t34404 + t20352*t34416) - 0.0641*(t20352*t34404 + t20792*t34416))*var2[4] + t34121*var2[5] + t34015*var2[9] + t34255*var2[10] + t34333*var2[11];
  p_output1[13]=t32872*var2[3] + t34121*var2[4] + (t33304 + 0.2255*t12754*t33460 - 0.325*t13486*t18935*t33460 + t33591 - 0.575*t20792*t34944 - 0.575*t20456*t34949 - 0.295*(-1.*t20792*t34944 + t20352*t34949) - 0.0641*(t20352*t34944 + t20792*t34949))*var2[5] + t34659*var2[9] + t34918*var2[10] + t34846*var2[11];
  p_output1[14]=t31850*var2[3] + t34015*var2[4] + t34659*var2[5] + (t33282 + 0.1575*t12754*t34697 + 0.2255*t34980 + 0.325*t18935*t35139 - 0.575*t18935*t20456*t35139 - 0.575*t20572*t20792*t35139 - 0.0641*(t20352*t20572*t35139 + t18935*t20792*t35139) - 0.295*(t18935*t20352*t35139 - 1.*t20572*t20792*t35139))*var2[9] + t35122*var2[10] + t34995*var2[11];
  p_output1[15]=t33052*var2[3] + t34255*var2[4] + t34918*var2[5] + t35122*var2[9] + (-0.325*t20572*t35230 - 0.325*t18935*t35241 - 0.575*t20456*t35255 - 0.575*t20792*t35327 - 0.0641*(t20792*t35255 + t20352*t35327) - 0.295*(-1.*t20792*t35327 + t35356))*var2[10] + t35310*var2[11];
  p_output1[16]=t33273*var2[3] + t34333*var2[4] + t34846*var2[5] + t34995*var2[9] + t35310*var2[10] + (0.575*t20792*t35243 - 0.575*t20352*t35404 - 0.295*(-1.*t20352*t35404 + t35412) - 0.0641*t35440)*var2[11];
  p_output1[17]=1.;
  p_output1[18]=t35586;
  p_output1[19]=t35669;
  p_output1[20]=t35744;
  p_output1[21]=t35779;
  p_output1[22]=t35832;
  p_output1[23]=t35868;
  p_output1[24]=t35586*var2[3] + t35669*var2[4] + t35744*var2[5] + t35779*var2[9] + t35832*var2[10] + t35868*var2[11];
  p_output1[25]=t35669*var2[3] + (-0.1575*t13622*t13639*t23939*t31171 - 0.325*t13622*t23944*t23962*t31171 + t35462 + 0.2255*(-1.*t12754*t13622*t13639*t31171 + t35496) + 0.325*t18935*t36151 - 0.575*t20792*t36202 - 0.575*t20456*t36250 - 0.295*(-1.*t20792*t36202 + t20352*t36250) - 0.0641*(t20352*t36202 + t20792*t36250))*var2[4] + t36040*var2[5] + t36001*var2[9] + t36081*var2[10] + t36107*var2[11];
  p_output1[26]=t35744*var2[3] + t36040*var2[4] + (0.2255*t12754*t31498 - 0.325*t13486*t18935*t31498 + t35465 + t35494 - 0.575*t20792*t36401 - 0.575*t20456*t36407 - 0.295*(-1.*t20792*t36401 + t20352*t36407) - 0.0641*(t20352*t36401 + t20792*t36407))*var2[5] + t36395*var2[9] + t36668*var2[10] + t36584*var2[11];
  p_output1[27]=t35779*var2[3] + t36001*var2[4] + t36395*var2[5] + (t35462 + 0.1575*t12754*t36452 + 0.2255*t36678 + 0.325*t18935*t36727 - 0.575*t18935*t20456*t36727 - 0.575*t20572*t20792*t36727 - 0.0641*(t20352*t20572*t36727 + t18935*t20792*t36727) - 0.295*(t18935*t20352*t36727 - 1.*t20572*t20792*t36727))*var2[9] + t36721*var2[10] + t36695*var2[11];
  p_output1[28]=t35832*var2[3] + t36081*var2[4] + t36668*var2[5] + t36721*var2[9] + (-0.325*t20572*t32433 - 0.325*t18935*t36857 - 0.575*t20456*t36901 - 0.575*t20792*t36968 - 0.0641*(t20792*t36901 + t20352*t36968) - 0.295*(-1.*t20792*t36968 + t36974))*var2[10] + t36955*var2[11];
  p_output1[29]=t35868*var2[3] + t36107*var2[4] + t36584*var2[5] + t36695*var2[9] + t36955*var2[10] + (0.575*t20792*t36861 - 0.575*t20352*t37023 - 0.295*(-1.*t20352*t37023 + t37030) - 0.0641*t37042)*var2[11];
  p_output1[30]=1.;
  p_output1[31]=0.1575*t13006*t13486*t31490 + 0.1575*t23939*t34697 + 0.2255*(-1.*t13006*t13486*t31490 + t12754*t34697) - 0.325*t23962*t35230 + 0.325*t18935*t35241 + t35246 - 0.575*t20456*t35404 - 0.0641*(t35298 + t20792*t35404) - 0.295*t35848;
  p_output1[32]=0.1575*t13486*t13622*t31171 + 0.1575*t13006*t13639*t23939*t31171 + 0.325*t13006*t23944*t23962*t31171 + 0.2255*(-1.*t13486*t13622*t31171 + t12754*t13006*t13639*t31171) + 0.325*t18935*t35952 - 0.575*t20792*t36052 - 0.575*t20456*t36093 - 0.0641*(t36074 + t20792*t36093) - 0.295*t36097;
  p_output1[33]=0.2255*t12754*t32900 - 0.325*t13486*t18935*t32900 + 0.1575*t23939*t32900 - 0.325*t23962*t36452 - 0.575*t20456*t36457 - 0.575*t20792*t36514 - 0.295*t36564 - 0.0641*(t20792*t36457 + t36660);
  p_output1[34]=-0.1575*t12754*t13006*t31171 + 0.1575*t13486*t36452 + 0.325*t18935*t36678 - 0.575*t18935*t20456*t36678 - 0.575*t20572*t20792*t36678 - 0.295*t36683 - 0.0641*t36715 + 0.2255*t36857;
  p_output1[35]=-0.325*t18935*t32433 + 0.325*t20572*t36857 - 0.575*t20456*t36861 - 0.575*t20792*t36901 - 0.295*t36945 - 0.0641*(t36974 + t37030);
  p_output1[36]=-0.575*t20352*t36861 - 0.575*t20792*t37023 - 0.0641*(t36923 + t20352*t37023) - 0.295*t37042;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 37, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_initial_swing_velocity_RlFoot_ParallelStance.hh"

namespace ParallelStance
{

void J_initial_swing_velocity_RlFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
