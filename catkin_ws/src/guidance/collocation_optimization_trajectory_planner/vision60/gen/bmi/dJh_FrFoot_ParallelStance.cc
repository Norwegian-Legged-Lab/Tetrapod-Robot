/*
 * Automatically Generated from Mathematica.
 * Fri 10 Jun 2022 21:56:33 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t4462;
  double t4109;
  double t4260;
  double t4527;
  double t4313;
  double t4540;
  double t4547;
  double t4063;
  double t4637;
  double t4638;
  double t4644;
  double t4064;
  double t4691;
  double t5045;
  double t4598;
  double t4822;
  double t4882;
  double t3939;
  double t5652;
  double t5870;
  double t6707;
  double t6740;
  double t7259;
  double t7423;
  double t7562;
  double t7565;
  double t7585;
  double t8774;
  double t8782;
  double t8785;
  double t9591;
  double t9610;
  double t9611;
  double t9533;
  double t9627;
  double t9633;
  double t9641;
  double t9716;
  double t9753;
  double t9758;
  double t9803;
  double t9819;
  double t11311;
  double t11581;
  double t11744;
  double t14585;
  double t14850;
  double t15201;
  double t15277;
  double t15290;
  double t15295;
  double t15299;
  double t15303;
  double t15310;
  double t14574;
  double t15240;
  double t15450;
  double t15479;
  double t14312;
  double t15480;
  double t15482;
  double t15488;
  double t15489;
  double t15521;
  double t15523;
  double t15531;
  double t15536;
  double t15660;
  double t15663;
  double t15664;
  double t15687;
  double t15691;
  double t15692;
  double t15702;
  double t15725;
  double t15728;
  double t15777;
  double t15778;
  double t15779;
  double t15769;
  double t15770;
  double t15776;
  double t15749;
  double t15765;
  double t15767;
  double t13198;
  double t13502;
  double t13576;
  double t15486;
  double t15729;
  double t15733;
  double t15816;
  double t15823;
  double t15832;
  double t15785;
  double t15793;
  double t15794;
  double t16909;
  double t17075;
  double t17300;
  double t16028;
  double t16030;
  double t16074;
  double t19787;
  double t19788;
  double t19840;
  double t15837;
  double t16497;
  double t19917;
  double t19918;
  double t19941;
  double t19954;
  double t20027;
  double t20032;
  double t20037;
  double t15838;
  double t15850;
  double t16002;
  double t20042;
  double t20044;
  double t16518;
  double t16535;
  double t16599;
  double t17471;
  double t17812;
  double t20150;
  double t20155;
  double t17520;
  double t17576;
  double t17578;
  double t20219;
  double t20221;
  double t17921;
  double t17925;
  double t17943;
  double t19275;
  double t19511;
  double t20377;
  double t19382;
  double t19387;
  double t19400;
  double t20419;
  double t20437;
  double t19526;
  double t19532;
  double t19544;
  double t19900;
  double t19980;
  double t21310;
  double t21314;
  double t21316;
  double t21326;
  double t21334;
  double t21580;
  double t21603;
  double t21604;
  double t19910;
  double t19915;
  double t21323;
  double t21354;
  double t21387;
  double t21390;
  double t20009;
  double t20011;
  double t22002;
  double t22110;
  double t22280;
  double t22583;
  double t22681;
  double t23348;
  double t23547;
  double t23609;
  double t23909;
  double t24010;
  double t24318;
  double t24410;
  double t24416;
  double t24419;
  double t24427;
  double t24430;
  double t24431;
  double t20188;
  double t20161;
  double t24572;
  double t24630;
  double t24797;
  double t27152;
  double t27461;
  double t20163;
  double t20184;
  double t29212;
  double t29805;
  double t20195;
  double t20209;
  double t30017;
  double t30023;
  double t21426;
  double t21436;
  double t21463;
  double t30049;
  double t30054;
  double t24881;
  double t24998;
  double t25007;
  double t20349;
  double t20458;
  double t20360;
  double t20363;
  double t31337;
  double t31346;
  double t22184;
  double t31562;
  double t31569;
  double t20486;
  double t20525;
  double t31973;
  double t32143;
  double t32186;
  double t32199;
  double t21273;
  double t21292;
  double t32356;
  double t32359;
  double t32369;
  double t32418;
  double t32422;
  double t10113;
  double t10117;
  double t10637;
  double t32379;
  double t32394;
  double t32397;
  double t32398;
  double t32377;
  double t32417;
  double t32424;
  double t32593;
  double t32594;
  double t32596;
  double t32534;
  double t32543;
  double t32544;
  double t32548;
  double t32549;
  double t32578;
  double t32618;
  double t32621;
  double t32624;
  double t32599;
  double t32612;
  double t32654;
  double t32669;
  double t32678;
  double t32679;
  double t32682;
  double t32683;
  double t32684;
  double t32699;
  double t32707;
  double t32708;
  double t28268;
  double t28539;
  double t28540;
  double t29814;
  double t29820;
  double t29827;
  double t32430;
  double t21366;
  double t21371;
  double t33752;
  double t33755;
  double t34783;
  double t34534;
  double t33156;
  double t33787;
  double t40175;
  double t40179;
  double t40216;
  double t32737;
  double t32740;
  double t32744;
  double t31304;
  double t31331;
  double t45170;
  double t47072;
  double t47144;
  double t48097;
  double t48098;
  double t48099;
  double t49868;
  double t50189;
  double t50259;
  double t51345;
  double t51389;
  double t51602;
  double t51974;
  double t51988;
  double t52040;
  double t52113;
  double t52120;
  double t52123;
  double t48313;
  double t48828;
  double t50461;
  double t53074;
  double t53154;
  double t53160;
  double t53060;
  double t53061;
  double t53070;
  double t53161;
  double t53194;
  double t53271;
  double t53274;
  double t53276;
  double t53290;
  double t53293;
  double t53294;
  double t31577;
  double t31580;
  double t36096;
  double t36349;
  double t37844;
  double t37905;
  double t54357;
  double t56694;
  double t56717;
  double t56695;
  double t56705;
  double t55933;
  double t57834;
  double t58148;
  double t51339;
  double t51632;
  double t51792;
  double t58951;
  double t8299;
  double t8387;
  double t8392;
  double t59618;
  double t59645;
  double t59763;
  double t59769;
  double t59820;
  t4462 = Cos(var1[13]);
  t4109 = Cos(var1[14]);
  t4260 = Sin(var1[13]);
  t4527 = Sin(var1[14]);
  t4313 = t4109*t4260;
  t4540 = -1.*t4462*t4527;
  t4547 = t4313 + t4540;
  t4063 = Cos(var1[5]);
  t4637 = t4462*t4109;
  t4638 = t4260*t4527;
  t4644 = t4637 + t4638;
  t4064 = Sin(var1[12]);
  t4691 = Sin(var1[5]);
  t5045 = Cos(var1[3]);
  t4598 = -1.*t4063*t4064*t4547;
  t4822 = t4644*t4691;
  t4882 = t4598 + t4822;
  t3939 = Sin(var1[3]);
  t5652 = Cos(var1[12]);
  t5870 = Cos(var1[4]);
  t6707 = t5652*t5870*t4547;
  t6740 = Sin(var1[4]);
  t7259 = t4063*t4644;
  t7423 = t4064*t4547*t4691;
  t7562 = t7259 + t7423;
  t7565 = -1.*t6740*t7562;
  t7585 = t6707 + t7565;
  t8774 = t5870*t4064;
  t8782 = t5652*t6740*t4691;
  t8785 = t8774 + t8782;
  t9591 = -1.*t4109*t4260;
  t9610 = t4462*t4527;
  t9611 = t9591 + t9610;
  t9533 = -1.*t4063*t4064*t4644;
  t9627 = t9611*t4691;
  t9633 = t9533 + t9627;
  t9641 = t5652*t5870*t4644;
  t9716 = t4063*t9611;
  t9753 = t4064*t4644*t4691;
  t9758 = t9716 + t9753;
  t9803 = -1.*t6740*t9758;
  t9819 = t9641 + t9803;
  t11311 = -1.*t5652*t4547*t6740;
  t11581 = -1.*t5870*t7562;
  t11744 = t11311 + t11581;
  t14585 = -0.0641*t4109;
  t14850 = -0.28*t4527;
  t15201 = t14585 + t14850;
  t15277 = -1.*t4109;
  t15290 = 1. + t15277;
  t15295 = 0.075*t15290;
  t15299 = 0.355*t4109;
  t15303 = -0.0641*t4527;
  t15310 = t15295 + t15299 + t15303;
  t14574 = -0.325*t4260;
  t15240 = t4462*t15201;
  t15450 = t4260*t15310;
  t15479 = t14574 + t15240 + t15450;
  t14312 = -0.068*t4064;
  t15480 = t5652*t15479;
  t15482 = t14312 + t15480;
  t15488 = -1.*t4462;
  t15489 = 1. + t15488;
  t15521 = 0.325*t15489;
  t15523 = -1.*t4260*t15201;
  t15531 = t4462*t15310;
  t15536 = t15521 + t15523 + t15531;
  t15660 = t4063*t15536;
  t15663 = -1.*t5652;
  t15664 = 1. + t15663;
  t15687 = -0.1575*t15664;
  t15691 = -0.2255*t5652;
  t15692 = -1.*t4064*t15479;
  t15702 = t15687 + t15691 + t15692;
  t15725 = -1.*t15702*t4691;
  t15728 = t15660 + t15725;
  t15777 = t5870*t15482;
  t15778 = -1.*t6740*t15728;
  t15779 = t15777 + t15778;
  t15769 = t4064*t6740;
  t15770 = -1.*t5652*t5870*t4691;
  t15776 = t15769 + t15770;
  t15749 = t15482*t6740;
  t15765 = t5870*t15728;
  t15767 = t15749 + t15765;
  t13198 = t5652*t4644*t6740;
  t13502 = t5870*t9758;
  t13576 = t13198 + t13502;
  t15486 = -1.*t15482*t6740;
  t15729 = -1.*t5870*t15728;
  t15733 = t15486 + t15729;
  t15816 = t4063*t15702;
  t15823 = t15536*t4691;
  t15832 = t15816 + t15823;
  t15785 = -1.*t4064*t6740;
  t15793 = t5652*t5870*t4691;
  t15794 = t15785 + t15793;
  t16909 = t5652*t4547*t6740;
  t17075 = t5870*t7562;
  t17300 = t16909 + t17075;
  t16028 = -1.*t5652*t4644*t6740;
  t16030 = -1.*t5870*t9758;
  t16074 = t16028 + t16030;
  t19787 = t4063*t4064*t4547;
  t19788 = -1.*t4644*t4691;
  t19840 = t19787 + t19788;
  t15837 = -1.*t5652*t4063*t15832;
  t16497 = t15832*t9633;
  t19917 = -1.*t4063*t15702;
  t19918 = -1.*t15536*t4691;
  t19941 = t19917 + t19918;
  t19954 = t5652*t4691*t15832;
  t20027 = t4063*t4064*t4644;
  t20032 = -1.*t9611*t4691;
  t20037 = t20027 + t20032;
  t15838 = -1.*t15776*t15767;
  t15850 = -1.*t8785*t15779;
  t16002 = t15837 + t15838 + t15850;
  t20042 = t15728*t9633;
  t20044 = t15832*t9758;
  t16518 = t15767*t13576;
  t16535 = t15779*t9819;
  t16599 = t16497 + t16518 + t16535;
  t17471 = t15832*t4882;
  t17812 = -1.*t15832*t9633;
  t20150 = t15832*t7562;
  t20155 = t15728*t4882;
  t17520 = t15767*t17300;
  t17576 = t15779*t7585;
  t17578 = t17471 + t17520 + t17576;
  t20219 = -1.*t15728*t9633;
  t20221 = -1.*t15832*t9758;
  t17921 = -1.*t15767*t13576;
  t17925 = -1.*t15779*t9819;
  t17943 = t17812 + t17921 + t17925;
  t19275 = t5652*t4063*t15832;
  t19511 = -1.*t15832*t4882;
  t20377 = -1.*t5652*t4691*t15832;
  t19382 = t15776*t15767;
  t19387 = t8785*t15779;
  t19400 = t19275 + t19382 + t19387;
  t20419 = -1.*t15832*t7562;
  t20437 = -1.*t15728*t4882;
  t19526 = -1.*t15767*t17300;
  t19532 = -1.*t15779*t7585;
  t19544 = t19511 + t19526 + t19532;
  t19900 = -1.*t4064*t15482;
  t19980 = t5652*t15482*t4644;
  t21310 = 0.068*t4064;
  t21314 = -1.*t5652*t15479;
  t21316 = t21310 + t21314;
  t21326 = -0.068*t5652;
  t21334 = t21326 + t15692;
  t21580 = -1.*t5870*t4064*t4547;
  t21603 = -1.*t5652*t4547*t6740*t4691;
  t21604 = t21580 + t21603;
  t19910 = t5652*t4691*t15728;
  t19915 = t19900 + t19910 + t15837;
  t21323 = -1.*t5652*t15482;
  t21354 = -1.*t4064*t21334;
  t21387 = -1.*t4064*t15482*t4644;
  t21390 = t5652*t21334*t4644;
  t20009 = t15728*t9758;
  t20011 = t19980 + t16497 + t20009;
  t22002 = Power(t4063,2);
  t22110 = -1.*t5652*t22002*t21316;
  t22280 = t4063*t4064*t15832;
  t22583 = -1.*t5652*t4063*t4644*t15832;
  t22681 = t4063*t21316*t9633;
  t23348 = -1.*t4064*t4644*t6740;
  t23547 = t5652*t5870*t4644*t4691;
  t23609 = t23348 + t23547;
  t23909 = t21334*t6740;
  t24010 = -1.*t5870*t21316*t4691;
  t24318 = t23909 + t24010;
  t24410 = t5870*t21334;
  t24416 = t21316*t6740*t4691;
  t24419 = t24410 + t24416;
  t24427 = t5652*t6740;
  t24430 = t5870*t4064*t4691;
  t24431 = t24427 + t24430;
  t20188 = -1.*t5652*t15482*t4644;
  t20161 = t5652*t15482*t4547;
  t24572 = t5652*t5870;
  t24630 = -1.*t4064*t6740*t4691;
  t24797 = t24572 + t24630;
  t27152 = -1.*t4064*t15482*t4547;
  t27461 = t5652*t21334*t4547;
  t20163 = t15728*t7562;
  t20184 = t20161 + t20163 + t17471;
  t29212 = t4064*t15482*t4644;
  t29805 = -1.*t5652*t21334*t4644;
  t20195 = -1.*t15728*t9758;
  t20209 = t20188 + t17812 + t20195;
  t30017 = -1.*t5652*t4063*t4547*t15832;
  t30023 = t4063*t21316*t4882;
  t21426 = -1.*t4064*t4547*t6740;
  t21436 = t5652*t5870*t4547*t4691;
  t21463 = t21426 + t21436;
  t30049 = t5652*t4063*t4644*t15832;
  t30054 = -1.*t4063*t21316*t9633;
  t24881 = -1.*t5870*t4064*t4644;
  t24998 = -1.*t5652*t4644*t6740*t4691;
  t25007 = t24881 + t24998;
  t20349 = t4064*t15482;
  t20458 = -1.*t5652*t15482*t4547;
  t20360 = -1.*t5652*t4691*t15728;
  t20363 = t20349 + t20360 + t19275;
  t31337 = t5652*t15482;
  t31346 = t4064*t21334;
  t22184 = Power(t4691,2);
  t31562 = t4064*t15482*t4547;
  t31569 = -1.*t5652*t21334*t4547;
  t20486 = -1.*t15728*t7562;
  t20525 = t20458 + t20486 + t19511;
  t31973 = t5652*t22002*t21316;
  t32143 = -1.*t4063*t4064*t15832;
  t32186 = t5652*t4063*t4547*t15832;
  t32199 = -1.*t4063*t21316*t4882;
  t21273 = -1.*t5652*t15702;
  t21292 = t19900 + t21273;
  t32356 = -1.*t4462*t4109;
  t32359 = -1.*t4260*t4527;
  t32369 = t32356 + t32359;
  t32418 = -0.325*t4462;
  t32422 = t32418 + t15523 + t15531;
  t10113 = t5045*t9633;
  t10117 = -1.*t3939*t9819;
  t10637 = t10113 + t10117;
  t32379 = 0.325*t4260;
  t32394 = -1.*t4462*t15201;
  t32397 = -1.*t4260*t15310;
  t32398 = t32379 + t32394 + t32397;
  t32377 = t5652*t15482*t9611;
  t32417 = Power(t5652,2);
  t32424 = t32417*t32422*t4644;
  t32593 = -1.*t4063*t4064*t32422;
  t32594 = t32398*t4691;
  t32596 = t32593 + t32594;
  t32534 = -1.*t4063*t4064*t9611;
  t32543 = t32369*t4691;
  t32544 = t32534 + t32543;
  t32548 = t4063*t32398;
  t32549 = t4064*t32422*t4691;
  t32578 = t32548 + t32549;
  t32618 = t4063*t32369;
  t32621 = t4064*t9611*t4691;
  t32624 = t32618 + t32621;
  t32599 = -1.*t5652*t4063*t32596;
  t32612 = t32596*t9633;
  t32654 = t15832*t32544;
  t32669 = t5652*t9611*t6740;
  t32678 = t5870*t32624;
  t32679 = t32669 + t32678;
  t32682 = t5652*t32422*t6740;
  t32683 = t5870*t32578;
  t32684 = t32682 + t32683;
  t32699 = t5652*t5870*t32422;
  t32707 = -1.*t6740*t32578;
  t32708 = t32699 + t32707;
  t28268 = -1.*t15536*t9611;
  t28539 = t4064*t15702*t4644;
  t28540 = t28268 + t20188 + t28539;
  t29814 = -1.*t4064*t15702*t4547;
  t29820 = t15536*t4644;
  t29827 = t20161 + t29814 + t29820;
  t32430 = Power(t4064,2);
  t21366 = t15536*t9611;
  t21371 = -1.*t4064*t15702*t4644;
  t33752 = -1.*t32398*t9611;
  t33755 = -1.*t15536*t32369;
  t34783 = t32398*t4644;
  t34534 = t32417*t32422*t4547;
  t33156 = -1.*t5652*t15482*t9611;
  t33787 = -1.*t32417*t32422*t4644;
  t40175 = t32596*t4882;
  t40179 = -1.*t32596*t9633;
  t40216 = -1.*t15832*t32544;
  t32737 = t5652*t5870*t9611;
  t32740 = -1.*t6740*t32624;
  t32744 = t32737 + t32740;
  t31304 = t5652*t15702;
  t31331 = t20349 + t31304;
  t45170 = -1.*t32417*t32422*t4547;
  t47072 = t5652*t4063*t32596;
  t47144 = -1.*t32596*t4882;
  t48097 = -0.28*t4109;
  t48098 = 0.0641*t4527;
  t48099 = t48097 + t48098;
  t49868 = t4260*t15201;
  t50189 = t4462*t48099;
  t50259 = t49868 + t50189;
  t51345 = t4063*t4547;
  t51389 = t4064*t32369*t4691;
  t51602 = t51345 + t51389;
  t51974 = -1.*t4063*t4064*t32369;
  t51988 = t4547*t4691;
  t52040 = t51974 + t51988;
  t52113 = t5652*t5870*t32369;
  t52120 = -1.*t6740*t51602;
  t52123 = t52113 + t52120;
  t48313 = -1.*t4260*t48099;
  t48828 = t15240 + t48313;
  t50461 = t32417*t50259*t4644;
  t53074 = -1.*t4063*t4064*t50259;
  t53154 = t48828*t4691;
  t53160 = t53074 + t53154;
  t53060 = t4063*t48828;
  t53061 = t4064*t50259*t4691;
  t53070 = t53060 + t53061;
  t53161 = -1.*t5652*t4063*t53160;
  t53194 = t53160*t9633;
  t53271 = t5652*t50259*t6740;
  t53274 = t5870*t53070;
  t53276 = t53271 + t53274;
  t53290 = t5652*t5870*t50259;
  t53293 = -1.*t6740*t53070;
  t53294 = t53290 + t53293;
  t31577 = t4064*t15702*t4547;
  t31580 = -1.*t15536*t4644;
  t36096 = t15479*t4547;
  t36349 = t36096 + t29820;
  t37844 = -1.*t15479*t4644;
  t37905 = t28268 + t37844;
  t54357 = -1.*t48828*t9611;
  t56694 = t15536*t4547;
  t56717 = t48828*t4644;
  t56695 = t32417*t50259*t4547;
  t56705 = t5652*t15482*t32369;
  t55933 = -1.*t32417*t50259*t4644;
  t57834 = t15832*t52040;
  t58148 = t53160*t4882;
  t51339 = t5652*t32369*t6740;
  t51632 = t5870*t51602;
  t51792 = t51339 + t51632;
  t58951 = -1.*t53160*t9633;
  t8299 = t5045*t4882;
  t8387 = -1.*t3939*t7585;
  t8392 = t8299 + t8387;
  t59618 = -1.*t32417*t50259*t4547;
  t59645 = -1.*t5652*t15482*t32369;
  t59763 = t5652*t4063*t53160;
  t59769 = -1.*t15832*t52040;
  t59820 = -1.*t53160*t4882;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=(-1.*t3939*t4882 - 1.*t5045*t7585)*var2[1] + t8392*var2[2];
  p_output1[10]=(-1.*t3939*t4063*t5652 - 1.*t5045*t8785)*var2[1] + (t4063*t5045*t5652 - 1.*t3939*t8785)*var2[2];
  p_output1[11]=(-1.*t3939*t9633 - 1.*t5045*t9819)*var2[1] + t10637*var2[2];
  p_output1[12]=t7585*var2[0] - 1.*t11744*t3939*var2[1] + t11744*t5045*var2[2] + (t16599*t8785 + t13576*(-1.*t15776*t15779 - 1.*t15779*t15794 - 1.*t15733*t8785 - 1.*t15767*t8785) + t16002*t9819 + t15776*(t13576*t15779 + t15779*t16074 + t15733*t9819 + t15767*t9819))*var2[3];
  p_output1[13]=t8785*var2[0] - 1.*t15794*t3939*var2[1] + t15794*t5045*var2[2] + (t17943*t7585 + t13576*(t11744*t15779 + t15779*t17300 + t15733*t7585 + t15767*t7585) + t17578*t9819 + t17300*(-1.*t13576*t15779 - 1.*t15779*t16074 - 1.*t15733*t9819 - 1.*t15767*t9819))*var2[3];
  p_output1[14]=t9819*var2[0] - 1.*t16074*t3939*var2[1] + t16074*t5045*var2[2] + (t19400*t7585 + t15776*(-1.*t11744*t15779 - 1.*t15779*t17300 - 1.*t15733*t7585 - 1.*t15767*t7585) + t19544*t8785 + t17300*(t15776*t15779 + t15779*t15794 + t15733*t8785 + t15767*t8785))*var2[3];
  p_output1[15]=t19840*t5870*var2[0] + (t19840*t3939*t6740 + t5045*t7562)*var2[1] + (-1.*t19840*t5045*t6740 + t3939*t7562)*var2[2] + (t16002*t20037*t5870 - 1.*t16599*t4063*t5652*t5870 + t13576*(t19954 - 1.*t15728*t4063*t5652 - 1.*t15776*t19941*t5870 + t15767*t4063*t5652*t5870 - 1.*t15779*t4063*t5652*t6740 + t19941*t6740*t8785) + t15776*(t20042 + t20044 + t13576*t19941*t5870 + t15767*t20037*t5870 - 1.*t15779*t20037*t6740 - 1.*t19941*t6740*t9819))*var2[3] + (-1.*t20011*t4691*t5652 + (t19954 + t19941*t4691*t5652)*t9633 + t19915*t9758 + t4063*t5652*(t15728*t20037 + t20042 + t20044 + t19941*t9758))*var2[4];
  p_output1[16]=-1.*t4063*t5652*t5870*var2[0] + (-1.*t4691*t5045*t5652 - 1.*t3939*t4063*t5652*t6740)*var2[1] + (-1.*t3939*t4691*t5652 + t4063*t5045*t5652*t6740)*var2[2] + (t17943*t19840*t5870 + t17578*t20037*t5870 + t13576*(t20150 + t20155 + t15767*t19840*t5870 + t17300*t19941*t5870 - 1.*t15779*t19840*t6740 - 1.*t19941*t6740*t7585) + t17300*(t20219 + t20221 - 1.*t13576*t19941*t5870 - 1.*t15767*t20037*t5870 + t15779*t20037*t6740 + t19941*t6740*t9819))*var2[3] + (t20209*t7562 + (t15728*t19840 + t20150 + t20155 + t19941*t7562)*t9633 + t20184*t9758 + t4882*(-1.*t15728*t20037 + t20219 + t20221 - 1.*t19941*t9758))*var2[4];
  p_output1[17]=t20037*t5870*var2[0] + (t20037*t3939*t6740 + t5045*t9758)*var2[1] + (-1.*t20037*t5045*t6740 + t3939*t9758)*var2[2] + (t19400*t19840*t5870 - 1.*t19544*t4063*t5652*t5870 + t15776*(t20419 + t20437 - 1.*t15767*t19840*t5870 - 1.*t17300*t19941*t5870 + t15779*t19840*t6740 + t19941*t6740*t7585) + t17300*(t20377 + t15728*t4063*t5652 + t15776*t19941*t5870 - 1.*t15767*t4063*t5652*t5870 + t15779*t4063*t5652*t6740 - 1.*t19941*t6740*t8785))*var2[3] + (-1.*t20525*t4691*t5652 + t4882*(t20377 - 1.*t19941*t4691*t5652) + t20363*t7562 + t4063*t5652*(-1.*t15728*t19840 + t20419 + t20437 - 1.*t19941*t7562))*var2[4];
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=t21463*var2[0] + (-1.*t21604*t3939 - 1.*t4063*t4547*t5045*t5652)*var2[1] + (t21604*t5045 - 1.*t3939*t4063*t4547*t5652)*var2[2] + (t16002*t23609 + t16599*t24431 + t13576*(t22110 + t22280 - 1.*t15776*t24318 - 1.*t15767*t24431 - 1.*t15779*t24797 - 1.*t24419*t8785) + t15776*(t22583 + t22681 + t15767*t23609 + t13576*t24318 + t15779*t25007 + t24419*t9819))*var2[3] + (-1.*t20011*t4063*t4064 - 1.*t19915*t4063*t4644*t5652 + (t21323 + t21354 + t22110 + t22280 - 1.*t15728*t4064*t4691 - 1.*t21316*t22184*t5652)*t9633 + t4063*t5652*(t21387 + t21390 + t22583 + t22681 + t15728*t4644*t4691*t5652 - 1.*t21316*t4691*t9758))*var2[4] + (-1.*t21292*t4064*t4644 + (t19980 + t21366 + t21371)*t5652 + t4644*t5652*(t21323 + t21354 + t15702*t4064 - 1.*t21316*t5652) + t4064*(t21387 + t21390 - 1.*t21316*t4064*t4644 - 1.*t15702*t4644*t5652))*var2[5];
  p_output1[37]=t24431*var2[0] + (-1.*t24797*t3939 - 1.*t4063*t4064*t5045)*var2[1] + (-1.*t3939*t4063*t4064 + t24797*t5045)*var2[2] + (t17943*t21463 + t17578*t23609 + t13576*(t15767*t21463 + t15779*t21604 + t17300*t24318 + t30017 + t30023 + t24419*t7585) + t17300*(-1.*t15767*t23609 - 1.*t13576*t24318 - 1.*t15779*t25007 + t30049 + t30054 - 1.*t24419*t9819))*var2[3] + (-1.*t20209*t4063*t4547*t5652 - 1.*t20184*t4063*t4644*t5652 + (t27152 + t27461 + t30017 + t30023 + t15728*t4547*t4691*t5652 - 1.*t21316*t4691*t7562)*t9633 + t4882*(t29212 + t29805 + t30049 + t30054 - 1.*t15728*t4644*t4691*t5652 + t21316*t4691*t9758))*var2[4] + (-1.*t28540*t4064*t4547 - 1.*t29827*t4064*t4644 + t4644*t5652*(t27152 + t27461 - 1.*t21316*t4064*t4547 - 1.*t15702*t4547*t5652) + t4547*t5652*(t29212 + t29805 + t21316*t4064*t4644 + t15702*t4644*t5652))*var2[5];
  p_output1[38]=t23609*var2[0] + (-1.*t25007*t3939 - 1.*t4063*t4644*t5045*t5652)*var2[1] + (t25007*t5045 - 1.*t3939*t4063*t4644*t5652)*var2[2] + (t19400*t21463 + t19544*t24431 + t15776*(-1.*t15767*t21463 - 1.*t15779*t21604 - 1.*t17300*t24318 + t32186 + t32199 - 1.*t24419*t7585) + t17300*(t15776*t24318 + t15767*t24431 + t15779*t24797 + t31973 + t32143 + t24419*t8785))*var2[3] + (-1.*t20525*t4063*t4064 - 1.*t20363*t4063*t4547*t5652 + t4882*(t31337 + t31346 + t31973 + t32143 + t15728*t4064*t4691 + t21316*t22184*t5652) + t4063*t5652*(t31562 + t31569 + t32186 + t32199 - 1.*t15728*t4547*t4691*t5652 + t21316*t4691*t7562))*var2[4] + (-1.*t31331*t4064*t4547 + (t20458 + t31577 + t31580)*t5652 + t4547*t5652*(t31337 + t31346 - 1.*t15702*t4064 + t21316*t5652) + t4064*(t31562 + t31569 + t21316*t4064*t4547 + t15702*t4547*t5652))*var2[5];
  p_output1[39]=t13576*var2[0] + t10637*var2[1] + (t3939*t9633 + t5045*t9819)*var2[2] + (t16002*t32679 + t13576*(t32599 - 1.*t15776*t32684 - 1.*t32708*t8785) + t15776*(t32612 + t32654 + t15767*t32679 + t13576*t32684 + t15779*t32744 + t32708*t9819))*var2[3] + (t19915*t32544 + (t32599 - 1.*t32422*t4064*t5652 + t32578*t4691*t5652)*t9633 + t4063*t5652*(t32377 + t32424 + t32612 + t15728*t32624 + t32654 + t32578*t9758))*var2[4] + (t21292*t5652*t9611 + t4064*(t15536*t32369 + t32377 + t32424 + t32422*t32430*t4644 + t32398*t9611 - 1.*t15702*t4064*t9611))*var2[5] + (0.2255*t32369 + 0.1575*t4644)*var2[12];
  p_output1[40]=(t13576*t17943 + t17578*t32679 + t13576*(t16497 + t16518 + t16535 + t17300*t32684 + t40175 + t32708*t7585) + t17300*(-1.*t15767*t32679 - 1.*t13576*t32684 - 1.*t15779*t32744 + t40179 + t40216 - 1.*t32708*t9819))*var2[3] + (t20184*t32544 + t20209*t9633 + (t16497 + t19980 + t20009 + t34534 + t40175 + t32578*t7562)*t9633 + t4882*(-1.*t15728*t32624 + t33156 + t33787 + t40179 + t40216 - 1.*t32578*t9758))*var2[4] + (t28540*t4644*t5652 + (t19980 + t21366 + t21371 + t34534 + t34783 + t32422*t32430*t4547)*t4644*t5652 + t29827*t5652*t9611 + t4547*t5652*(t33156 + t33752 + t33755 + t33787 - 1.*t32422*t32430*t4644 + t15702*t4064*t9611))*var2[5] + (t32369*t36349 + t37905*t9611 + (t21366 + t34783 + t32422*t4547 + t15479*t4644)*t9611 + t4644*(t33752 + t33755 - 1.*t32422*t4644 - 1.*t15479*t9611))*var2[12];
  p_output1[41]=t32679*var2[0] + (-1.*t32744*t3939 + t32544*t5045)*var2[1] + (t32544*t3939 + t32744*t5045)*var2[2] + (t13576*t19400 + t15776*(t17812 + t17921 + t17925 - 1.*t17300*t32684 + t47144 - 1.*t32708*t7585) + t17300*(t15776*t32684 + t47072 + t32708*t8785))*var2[3] + (t4882*(t47072 + t32422*t4064*t5652 - 1.*t32578*t4691*t5652) + t4063*t5652*(t17812 + t20188 + t20195 + t45170 + t47144 - 1.*t32578*t7562) + t20363*t9633)*var2[4] + (t4064*(t20188 + t28268 + t28539 + t45170 - 1.*t32422*t32430*t4547 - 1.*t32398*t4644) + t31331*t4644*t5652)*var2[5] - 0.068*t9611*var2[12];
  p_output1[42]=t51792*var2[0] + (t5045*t52040 - 1.*t3939*t52123)*var2[1] + (t3939*t52040 + t5045*t52123)*var2[2] + (t16002*t17300 + t13576*(t53161 - 1.*t15776*t53276 - 1.*t53294*t8785) + t15776*(t17471 + t17520 + t17576 + t53194 + t13576*t53276 + t53294*t9819))*var2[3] + (t19915*t4882 + (t53161 - 1.*t4064*t50259*t5652 + t4691*t53070*t5652)*t9633 + t4063*t5652*(t17471 + t20161 + t20163 + t50461 + t53194 + t53070*t9758))*var2[4] + (t21292*t4547*t5652 + t4064*(t20161 + t29814 + t29820 + t32430*t4644*t50259 + t50461 + t48828*t9611))*var2[5] + (0.1575*t32369 + 0.2255*t4644)*var2[12] + (0.325*t4109 - 1.*t15310*t4109 - 1.*t4109*t48099)*var2[13];
  p_output1[43]=(t17300*t17578 + t17943*t51792 + t13576*(t15767*t51792 + t15779*t52123 + t17300*t53276 + t57834 + t58148 + t53294*t7585) + t17300*(t19511 + t19526 + t19532 - 1.*t13576*t53276 + t58951 - 1.*t53294*t9819))*var2[3] + (t20184*t4882 + t20209*t52040 + (t15728*t51602 + t56695 + t56705 + t57834 + t58148 + t53070*t7562)*t9633 + t4882*(t19511 + t20458 + t20486 + t55933 + t58951 - 1.*t53070*t9758))*var2[4] + (t28540*t32369*t5652 + t29827*t4547*t5652 + t4547*(t20458 + t31577 + t31580 - 1.*t32430*t4644*t50259 + t54357 + t55933)*t5652 + t4644*t5652*(-1.*t15702*t32369*t4064 + t32430*t4547*t50259 + t56694 + t56695 + t56705 + t56717))*var2[5] + (t37905*t4547 + t36349*t4644 + t4644*(t31580 - 1.*t15479*t4547 - 1.*t4644*t50259 + t54357) + (t15479*t32369 + t4547*t50259 + t56694 + t56717)*t9611)*var2[12];
  p_output1[44]=t17300*var2[0] + t8392*var2[1] + (t3939*t4882 + t5045*t7585)*var2[2] + (t19400*t51792 + t15776*(-1.*t15767*t51792 - 1.*t15779*t52123 - 1.*t17300*t53276 + t59769 + t59820 - 1.*t53294*t7585) + t17300*(t15776*t53276 + t59763 + t53294*t8785))*var2[3] + (t20363*t52040 + t4882*(t4064*t50259*t5652 - 1.*t4691*t53070*t5652 + t59763) + t4063*t5652*(-1.*t15728*t51602 + t59618 + t59645 + t59769 + t59820 - 1.*t53070*t7562))*var2[4] + (t31331*t32369*t5652 + t4064*(t15702*t32369*t4064 - 1.*t15536*t4547 - 1.*t4644*t48828 - 1.*t32430*t4547*t50259 + t59618 + t59645))*var2[5] - 0.068*t4547*var2[12] + (0.325*t4527 - 1.*t15310*t4527 - 1.*t4527*t48099)*var2[13];
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 18, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "dJh_FrFoot_ParallelStance.hh"

namespace SymFunction
{

void dJh_FrFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
