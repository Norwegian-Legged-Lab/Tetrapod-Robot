/*
 * Automatically Generated from Mathematica.
 * Tue 7 Jun 2022 14:10:57 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t44239;
  double t34927;
  double t42874;
  double t44257;
  double t44144;
  double t44273;
  double t44439;
  double t20718;
  double t44450;
  double t44454;
  double t44458;
  double t34926;
  double t44462;
  double t44484;
  double t44446;
  double t44466;
  double t44472;
  double t15296;
  double t44486;
  double t44488;
  double t44492;
  double t44493;
  double t44496;
  double t44500;
  double t44504;
  double t44508;
  double t44516;
  double t44670;
  double t44671;
  double t44676;
  double t44864;
  double t44867;
  double t44870;
  double t44862;
  double t44874;
  double t44876;
  double t44881;
  double t44882;
  double t44883;
  double t44888;
  double t44889;
  double t44890;
  double t44903;
  double t44904;
  double t44906;
  double t44920;
  double t44921;
  double t44923;
  double t44925;
  double t44926;
  double t44928;
  double t44929;
  double t44930;
  double t44932;
  double t44919;
  double t44924;
  double t44933;
  double t44934;
  double t44917;
  double t44936;
  double t44939;
  double t44941;
  double t44942;
  double t44943;
  double t44945;
  double t44950;
  double t44951;
  double t44959;
  double t44960;
  double t44961;
  double t44962;
  double t44964;
  double t44965;
  double t44966;
  double t44967;
  double t44968;
  double t44994;
  double t44995;
  double t44996;
  double t44990;
  double t44992;
  double t44993;
  double t44978;
  double t44983;
  double t44984;
  double t44914;
  double t44915;
  double t44916;
  double t44940;
  double t44969;
  double t44973;
  double t45016;
  double t45017;
  double t45018;
  double t45002;
  double t45005;
  double t45009;
  double t45056;
  double t45057;
  double t45058;
  double t45024;
  double t45025;
  double t45026;
  double t45116;
  double t45118;
  double t45119;
  double t45019;
  double t45040;
  double t45133;
  double t45134;
  double t45135;
  double t45137;
  double t45147;
  double t45148;
  double t45149;
  double t45020;
  double t45021;
  double t45022;
  double t45157;
  double t45159;
  double t45041;
  double t45042;
  double t45045;
  double t45065;
  double t45078;
  double t45220;
  double t45222;
  double t45067;
  double t45068;
  double t45070;
  double t45240;
  double t45242;
  double t45079;
  double t45080;
  double t45081;
  double t45096;
  double t45107;
  double t45281;
  double t45097;
  double t45098;
  double t45099;
  double t45285;
  double t45287;
  double t45108;
  double t45109;
  double t45110;
  double t45129;
  double t45143;
  double t45322;
  double t45323;
  double t45324;
  double t45328;
  double t45329;
  double t45350;
  double t45351;
  double t45352;
  double t45130;
  double t45131;
  double t45326;
  double t45330;
  double t45338;
  double t45340;
  double t45144;
  double t45145;
  double t45361;
  double t45362;
  double t45366;
  double t45370;
  double t45371;
  double t45378;
  double t45379;
  double t45380;
  double t45382;
  double t45383;
  double t45384;
  double t45386;
  double t45387;
  double t45388;
  double t45390;
  double t45391;
  double t45392;
  double t45233;
  double t45227;
  double t45394;
  double t45395;
  double t45396;
  double t45414;
  double t45416;
  double t45228;
  double t45229;
  double t45424;
  double t45426;
  double t45235;
  double t45237;
  double t45445;
  double t45447;
  double t45345;
  double t45346;
  double t45347;
  double t45452;
  double t45453;
  double t45401;
  double t45402;
  double t45403;
  double t45276;
  double t45290;
  double t45277;
  double t45278;
  double t45482;
  double t45484;
  double t45363;
  double t45488;
  double t45490;
  double t45291;
  double t45293;
  double t45509;
  double t45512;
  double t45516;
  double t45518;
  double t45319;
  double t45320;
  double t45541;
  double t45542;
  double t45543;
  double t45558;
  double t45559;
  double t44895;
  double t44896;
  double t44897;
  double t45551;
  double t45552;
  double t45553;
  double t45554;
  double t45549;
  double t45557;
  double t45560;
  double t45582;
  double t45583;
  double t45584;
  double t45573;
  double t45574;
  double t45575;
  double t45578;
  double t45579;
  double t45580;
  double t45589;
  double t45590;
  double t45591;
  double t45585;
  double t45588;
  double t45593;
  double t45599;
  double t45600;
  double t45601;
  double t45603;
  double t45604;
  double t45605;
  double t45607;
  double t45609;
  double t45610;
  double t45419;
  double t45420;
  double t45421;
  double t45429;
  double t45430;
  double t45431;
  double t45561;
  double t45333;
  double t45334;
  double t45631;
  double t45632;
  double t45639;
  double t45637;
  double t45629;
  double t45633;
  double t45663;
  double t45666;
  double t45668;
  double t45615;
  double t45616;
  double t45617;
  double t45478;
  double t45479;
  double t45691;
  double t45711;
  double t45716;
  double t45735;
  double t45736;
  double t45737;
  double t45749;
  double t45750;
  double t45751;
  double t45759;
  double t45760;
  double t45761;
  double t45765;
  double t45766;
  double t45767;
  double t45770;
  double t45771;
  double t45772;
  double t45746;
  double t45747;
  double t45752;
  double t45786;
  double t45787;
  double t45788;
  double t45782;
  double t45783;
  double t45784;
  double t45789;
  double t45792;
  double t45799;
  double t45800;
  double t45801;
  double t45803;
  double t45804;
  double t45805;
  double t45493;
  double t45494;
  double t45644;
  double t45645;
  double t45651;
  double t45652;
  double t45818;
  double t45823;
  double t45828;
  double t45824;
  double t45826;
  double t45819;
  double t45846;
  double t45849;
  double t45758;
  double t45762;
  double t45763;
  double t45853;
  double t44552;
  double t44562;
  double t44573;
  double t45882;
  double t45884;
  double t45900;
  double t45903;
  double t45906;
  t44239 = Cos(var1[13]);
  t34927 = Cos(var1[14]);
  t42874 = Sin(var1[13]);
  t44257 = Sin(var1[14]);
  t44144 = t34927*t42874;
  t44273 = -1.*t44239*t44257;
  t44439 = t44144 + t44273;
  t20718 = Cos(var1[5]);
  t44450 = t44239*t34927;
  t44454 = t42874*t44257;
  t44458 = t44450 + t44454;
  t34926 = Sin(var1[12]);
  t44462 = Sin(var1[5]);
  t44484 = Cos(var1[3]);
  t44446 = -1.*t20718*t34926*t44439;
  t44466 = t44458*t44462;
  t44472 = t44446 + t44466;
  t15296 = Sin(var1[3]);
  t44486 = Cos(var1[12]);
  t44488 = Cos(var1[4]);
  t44492 = t44486*t44488*t44439;
  t44493 = Sin(var1[4]);
  t44496 = t20718*t44458;
  t44500 = t34926*t44439*t44462;
  t44504 = t44496 + t44500;
  t44508 = -1.*t44493*t44504;
  t44516 = t44492 + t44508;
  t44670 = t44488*t34926;
  t44671 = t44486*t44493*t44462;
  t44676 = t44670 + t44671;
  t44864 = -1.*t34927*t42874;
  t44867 = t44239*t44257;
  t44870 = t44864 + t44867;
  t44862 = -1.*t20718*t34926*t44458;
  t44874 = t44870*t44462;
  t44876 = t44862 + t44874;
  t44881 = t44486*t44488*t44458;
  t44882 = t20718*t44870;
  t44883 = t34926*t44458*t44462;
  t44888 = t44882 + t44883;
  t44889 = -1.*t44493*t44888;
  t44890 = t44881 + t44889;
  t44903 = -1.*t44486*t44439*t44493;
  t44904 = -1.*t44488*t44504;
  t44906 = t44903 + t44904;
  t44920 = -0.0641*t34927;
  t44921 = -0.28*t44257;
  t44923 = t44920 + t44921;
  t44925 = -1.*t34927;
  t44926 = 1. + t44925;
  t44928 = 0.075*t44926;
  t44929 = 0.355*t34927;
  t44930 = -0.0641*t44257;
  t44932 = t44928 + t44929 + t44930;
  t44919 = -0.325*t42874;
  t44924 = t44239*t44923;
  t44933 = t42874*t44932;
  t44934 = t44919 + t44924 + t44933;
  t44917 = -0.068*t34926;
  t44936 = t44486*t44934;
  t44939 = t44917 + t44936;
  t44941 = -1.*t44239;
  t44942 = 1. + t44941;
  t44943 = 0.325*t44942;
  t44945 = -1.*t42874*t44923;
  t44950 = t44239*t44932;
  t44951 = t44943 + t44945 + t44950;
  t44959 = t20718*t44951;
  t44960 = -1.*t44486;
  t44961 = 1. + t44960;
  t44962 = -0.1575*t44961;
  t44964 = -0.2255*t44486;
  t44965 = -1.*t34926*t44934;
  t44966 = t44962 + t44964 + t44965;
  t44967 = -1.*t44966*t44462;
  t44968 = t44959 + t44967;
  t44994 = t44488*t44939;
  t44995 = -1.*t44493*t44968;
  t44996 = t44994 + t44995;
  t44990 = t34926*t44493;
  t44992 = -1.*t44486*t44488*t44462;
  t44993 = t44990 + t44992;
  t44978 = t44939*t44493;
  t44983 = t44488*t44968;
  t44984 = t44978 + t44983;
  t44914 = t44486*t44458*t44493;
  t44915 = t44488*t44888;
  t44916 = t44914 + t44915;
  t44940 = -1.*t44939*t44493;
  t44969 = -1.*t44488*t44968;
  t44973 = t44940 + t44969;
  t45016 = t20718*t44966;
  t45017 = t44951*t44462;
  t45018 = t45016 + t45017;
  t45002 = -1.*t34926*t44493;
  t45005 = t44486*t44488*t44462;
  t45009 = t45002 + t45005;
  t45056 = t44486*t44439*t44493;
  t45057 = t44488*t44504;
  t45058 = t45056 + t45057;
  t45024 = -1.*t44486*t44458*t44493;
  t45025 = -1.*t44488*t44888;
  t45026 = t45024 + t45025;
  t45116 = t20718*t34926*t44439;
  t45118 = -1.*t44458*t44462;
  t45119 = t45116 + t45118;
  t45019 = -1.*t44486*t20718*t45018;
  t45040 = t45018*t44876;
  t45133 = -1.*t20718*t44966;
  t45134 = -1.*t44951*t44462;
  t45135 = t45133 + t45134;
  t45137 = t44486*t44462*t45018;
  t45147 = t20718*t34926*t44458;
  t45148 = -1.*t44870*t44462;
  t45149 = t45147 + t45148;
  t45020 = -1.*t44993*t44984;
  t45021 = -1.*t44676*t44996;
  t45022 = t45019 + t45020 + t45021;
  t45157 = t44968*t44876;
  t45159 = t45018*t44888;
  t45041 = t44984*t44916;
  t45042 = t44996*t44890;
  t45045 = t45040 + t45041 + t45042;
  t45065 = t45018*t44472;
  t45078 = -1.*t45018*t44876;
  t45220 = t45018*t44504;
  t45222 = t44968*t44472;
  t45067 = t44984*t45058;
  t45068 = t44996*t44516;
  t45070 = t45065 + t45067 + t45068;
  t45240 = -1.*t44968*t44876;
  t45242 = -1.*t45018*t44888;
  t45079 = -1.*t44984*t44916;
  t45080 = -1.*t44996*t44890;
  t45081 = t45078 + t45079 + t45080;
  t45096 = t44486*t20718*t45018;
  t45107 = -1.*t45018*t44472;
  t45281 = -1.*t44486*t44462*t45018;
  t45097 = t44993*t44984;
  t45098 = t44676*t44996;
  t45099 = t45096 + t45097 + t45098;
  t45285 = -1.*t45018*t44504;
  t45287 = -1.*t44968*t44472;
  t45108 = -1.*t44984*t45058;
  t45109 = -1.*t44996*t44516;
  t45110 = t45107 + t45108 + t45109;
  t45129 = -1.*t34926*t44939;
  t45143 = t44486*t44939*t44458;
  t45322 = 0.068*t34926;
  t45323 = -1.*t44486*t44934;
  t45324 = t45322 + t45323;
  t45328 = -0.068*t44486;
  t45329 = t45328 + t44965;
  t45350 = -1.*t44488*t34926*t44439;
  t45351 = -1.*t44486*t44439*t44493*t44462;
  t45352 = t45350 + t45351;
  t45130 = t44486*t44462*t44968;
  t45131 = t45129 + t45130 + t45019;
  t45326 = -1.*t44486*t44939;
  t45330 = -1.*t34926*t45329;
  t45338 = -1.*t34926*t44939*t44458;
  t45340 = t44486*t45329*t44458;
  t45144 = t44968*t44888;
  t45145 = t45143 + t45040 + t45144;
  t45361 = Power(t20718,2);
  t45362 = -1.*t44486*t45361*t45324;
  t45366 = t20718*t34926*t45018;
  t45370 = -1.*t44486*t20718*t44458*t45018;
  t45371 = t20718*t45324*t44876;
  t45378 = -1.*t34926*t44458*t44493;
  t45379 = t44486*t44488*t44458*t44462;
  t45380 = t45378 + t45379;
  t45382 = t45329*t44493;
  t45383 = -1.*t44488*t45324*t44462;
  t45384 = t45382 + t45383;
  t45386 = t44488*t45329;
  t45387 = t45324*t44493*t44462;
  t45388 = t45386 + t45387;
  t45390 = t44486*t44493;
  t45391 = t44488*t34926*t44462;
  t45392 = t45390 + t45391;
  t45233 = -1.*t44486*t44939*t44458;
  t45227 = t44486*t44939*t44439;
  t45394 = t44486*t44488;
  t45395 = -1.*t34926*t44493*t44462;
  t45396 = t45394 + t45395;
  t45414 = -1.*t34926*t44939*t44439;
  t45416 = t44486*t45329*t44439;
  t45228 = t44968*t44504;
  t45229 = t45227 + t45228 + t45065;
  t45424 = t34926*t44939*t44458;
  t45426 = -1.*t44486*t45329*t44458;
  t45235 = -1.*t44968*t44888;
  t45237 = t45233 + t45078 + t45235;
  t45445 = -1.*t44486*t20718*t44439*t45018;
  t45447 = t20718*t45324*t44472;
  t45345 = -1.*t34926*t44439*t44493;
  t45346 = t44486*t44488*t44439*t44462;
  t45347 = t45345 + t45346;
  t45452 = t44486*t20718*t44458*t45018;
  t45453 = -1.*t20718*t45324*t44876;
  t45401 = -1.*t44488*t34926*t44458;
  t45402 = -1.*t44486*t44458*t44493*t44462;
  t45403 = t45401 + t45402;
  t45276 = t34926*t44939;
  t45290 = -1.*t44486*t44939*t44439;
  t45277 = -1.*t44486*t44462*t44968;
  t45278 = t45276 + t45277 + t45096;
  t45482 = t44486*t44939;
  t45484 = t34926*t45329;
  t45363 = Power(t44462,2);
  t45488 = t34926*t44939*t44439;
  t45490 = -1.*t44486*t45329*t44439;
  t45291 = -1.*t44968*t44504;
  t45293 = t45290 + t45291 + t45107;
  t45509 = t44486*t45361*t45324;
  t45512 = -1.*t20718*t34926*t45018;
  t45516 = t44486*t20718*t44439*t45018;
  t45518 = -1.*t20718*t45324*t44472;
  t45319 = -1.*t44486*t44966;
  t45320 = t45129 + t45319;
  t45541 = -1.*t44239*t34927;
  t45542 = -1.*t42874*t44257;
  t45543 = t45541 + t45542;
  t45558 = -0.325*t44239;
  t45559 = t45558 + t44945 + t44950;
  t44895 = t44484*t44876;
  t44896 = -1.*t15296*t44890;
  t44897 = t44895 + t44896;
  t45551 = 0.325*t42874;
  t45552 = -1.*t44239*t44923;
  t45553 = -1.*t42874*t44932;
  t45554 = t45551 + t45552 + t45553;
  t45549 = t44486*t44939*t44870;
  t45557 = Power(t44486,2);
  t45560 = t45557*t45559*t44458;
  t45582 = -1.*t20718*t34926*t45559;
  t45583 = t45554*t44462;
  t45584 = t45582 + t45583;
  t45573 = -1.*t20718*t34926*t44870;
  t45574 = t45543*t44462;
  t45575 = t45573 + t45574;
  t45578 = t20718*t45554;
  t45579 = t34926*t45559*t44462;
  t45580 = t45578 + t45579;
  t45589 = t20718*t45543;
  t45590 = t34926*t44870*t44462;
  t45591 = t45589 + t45590;
  t45585 = -1.*t44486*t20718*t45584;
  t45588 = t45584*t44876;
  t45593 = t45018*t45575;
  t45599 = t44486*t44870*t44493;
  t45600 = t44488*t45591;
  t45601 = t45599 + t45600;
  t45603 = t44486*t45559*t44493;
  t45604 = t44488*t45580;
  t45605 = t45603 + t45604;
  t45607 = t44486*t44488*t45559;
  t45609 = -1.*t44493*t45580;
  t45610 = t45607 + t45609;
  t45419 = -1.*t44951*t44870;
  t45420 = t34926*t44966*t44458;
  t45421 = t45419 + t45233 + t45420;
  t45429 = -1.*t34926*t44966*t44439;
  t45430 = t44951*t44458;
  t45431 = t45227 + t45429 + t45430;
  t45561 = Power(t34926,2);
  t45333 = t44951*t44870;
  t45334 = -1.*t34926*t44966*t44458;
  t45631 = -1.*t45554*t44870;
  t45632 = -1.*t44951*t45543;
  t45639 = t45554*t44458;
  t45637 = t45557*t45559*t44439;
  t45629 = -1.*t44486*t44939*t44870;
  t45633 = -1.*t45557*t45559*t44458;
  t45663 = t45584*t44472;
  t45666 = -1.*t45584*t44876;
  t45668 = -1.*t45018*t45575;
  t45615 = t44486*t44488*t44870;
  t45616 = -1.*t44493*t45591;
  t45617 = t45615 + t45616;
  t45478 = t44486*t44966;
  t45479 = t45276 + t45478;
  t45691 = -1.*t45557*t45559*t44439;
  t45711 = t44486*t20718*t45584;
  t45716 = -1.*t45584*t44472;
  t45735 = -0.28*t34927;
  t45736 = 0.0641*t44257;
  t45737 = t45735 + t45736;
  t45749 = t42874*t44923;
  t45750 = t44239*t45737;
  t45751 = t45749 + t45750;
  t45759 = t20718*t44439;
  t45760 = t34926*t45543*t44462;
  t45761 = t45759 + t45760;
  t45765 = -1.*t20718*t34926*t45543;
  t45766 = t44439*t44462;
  t45767 = t45765 + t45766;
  t45770 = t44486*t44488*t45543;
  t45771 = -1.*t44493*t45761;
  t45772 = t45770 + t45771;
  t45746 = -1.*t42874*t45737;
  t45747 = t44924 + t45746;
  t45752 = t45557*t45751*t44458;
  t45786 = -1.*t20718*t34926*t45751;
  t45787 = t45747*t44462;
  t45788 = t45786 + t45787;
  t45782 = t20718*t45747;
  t45783 = t34926*t45751*t44462;
  t45784 = t45782 + t45783;
  t45789 = -1.*t44486*t20718*t45788;
  t45792 = t45788*t44876;
  t45799 = t44486*t45751*t44493;
  t45800 = t44488*t45784;
  t45801 = t45799 + t45800;
  t45803 = t44486*t44488*t45751;
  t45804 = -1.*t44493*t45784;
  t45805 = t45803 + t45804;
  t45493 = t34926*t44966*t44439;
  t45494 = -1.*t44951*t44458;
  t45644 = t44934*t44439;
  t45645 = t45644 + t45430;
  t45651 = -1.*t44934*t44458;
  t45652 = t45419 + t45651;
  t45818 = -1.*t45747*t44870;
  t45823 = t44951*t44439;
  t45828 = t45747*t44458;
  t45824 = t45557*t45751*t44439;
  t45826 = t44486*t44939*t45543;
  t45819 = -1.*t45557*t45751*t44458;
  t45846 = t45018*t45767;
  t45849 = t45788*t44472;
  t45758 = t44486*t45543*t44493;
  t45762 = t44488*t45761;
  t45763 = t45758 + t45762;
  t45853 = -1.*t45788*t44876;
  t44552 = t44484*t44472;
  t44562 = -1.*t15296*t44516;
  t44573 = t44552 + t44562;
  t45882 = -1.*t45557*t45751*t44439;
  t45884 = -1.*t44486*t44939*t45543;
  t45900 = t44486*t20718*t45788;
  t45903 = -1.*t45018*t45767;
  t45906 = -1.*t45788*t44472;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=(-1.*t15296*t44472 - 1.*t44484*t44516)*var2[1] + t44573*var2[2];
  p_output1[10]=(-1.*t15296*t20718*t44486 - 1.*t44484*t44676)*var2[1] + (t20718*t44484*t44486 - 1.*t15296*t44676)*var2[2];
  p_output1[11]=(-1.*t15296*t44876 - 1.*t44484*t44890)*var2[1] + t44897*var2[2];
  p_output1[12]=t44516*var2[0] - 1.*t15296*t44906*var2[1] + t44484*t44906*var2[2] + (t44916*(-1.*t44676*t44973 - 1.*t44676*t44984 - 1.*t44993*t44996 - 1.*t44996*t45009) + t44890*t45022 + t44993*(t44890*t44973 + t44890*t44984 + t44916*t44996 + t44996*t45026) + t44676*t45045)*var2[3];
  p_output1[13]=t44676*var2[0] - 1.*t15296*t45009*var2[1] + t44484*t45009*var2[2] + ((-1.*t44890*t44973 - 1.*t44890*t44984 - 1.*t44916*t44996 - 1.*t44996*t45026)*t45058 + t44916*(t44516*t44973 + t44516*t44984 + t44906*t44996 + t44996*t45058) + t44890*t45070 + t44516*t45081)*var2[3];
  p_output1[14]=t44890*var2[0] - 1.*t15296*t45026*var2[1] + t44484*t45026*var2[2] + ((t44676*t44973 + t44676*t44984 + t44993*t44996 + t44996*t45009)*t45058 + t44993*(-1.*t44516*t44973 - 1.*t44516*t44984 - 1.*t44906*t44996 - 1.*t44996*t45058) + t44516*t45099 + t44676*t45110)*var2[3];
  p_output1[15]=t44488*t45119*var2[0] + (t44484*t44504 + t15296*t44493*t45119)*var2[1] + (t15296*t44504 - 1.*t44484*t44493*t45119)*var2[2] + (-1.*t20718*t44486*t44488*t45045 + t44916*(-1.*t20718*t44486*t44968 + t20718*t44486*t44488*t44984 - 1.*t20718*t44486*t44493*t44996 + t44493*t44676*t45135 - 1.*t44488*t44993*t45135 + t45137) + t44488*t45022*t45149 + t44993*(-1.*t44493*t44890*t45135 + t44488*t44916*t45135 + t44488*t44984*t45149 - 1.*t44493*t44996*t45149 + t45157 + t45159))*var2[3] + (t44888*t45131 + t44876*(t44462*t44486*t45135 + t45137) - 1.*t44462*t44486*t45145 + t20718*t44486*(t44888*t45135 + t44968*t45149 + t45157 + t45159))*var2[4];
  p_output1[16]=-1.*t20718*t44486*t44488*var2[0] + (-1.*t44462*t44484*t44486 - 1.*t15296*t20718*t44486*t44493)*var2[1] + (-1.*t15296*t44462*t44486 + t20718*t44484*t44486*t44493)*var2[2] + (t44488*t45081*t45119 + t44488*t45070*t45149 + t44916*(t44488*t44984*t45119 - 1.*t44493*t44996*t45119 - 1.*t44493*t44516*t45135 + t44488*t45058*t45135 + t45220 + t45222) + t45058*(t44493*t44890*t45135 - 1.*t44488*t44916*t45135 - 1.*t44488*t44984*t45149 + t44493*t44996*t45149 + t45240 + t45242))*var2[3] + (t44876*(t44968*t45119 + t44504*t45135 + t45220 + t45222) + t44888*t45229 + t44504*t45237 + t44472*(-1.*t44888*t45135 - 1.*t44968*t45149 + t45240 + t45242))*var2[4];
  p_output1[17]=t44488*t45149*var2[0] + (t44484*t44888 + t15296*t44493*t45149)*var2[1] + (t15296*t44888 - 1.*t44484*t44493*t45149)*var2[2] + (-1.*t20718*t44486*t44488*t45110 + t44488*t45099*t45119 + t45058*(t20718*t44486*t44968 - 1.*t20718*t44486*t44488*t44984 + t20718*t44486*t44493*t44996 - 1.*t44493*t44676*t45135 + t44488*t44993*t45135 + t45281) + t44993*(-1.*t44488*t44984*t45119 + t44493*t44996*t45119 + t44493*t44516*t45135 - 1.*t44488*t45058*t45135 + t45285 + t45287))*var2[3] + (t44504*t45278 + t44472*(-1.*t44462*t44486*t45135 + t45281) + t20718*t44486*(-1.*t44968*t45119 - 1.*t44504*t45135 + t45285 + t45287) - 1.*t44462*t44486*t45293)*var2[4];
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=t45347*var2[0] + (-1.*t20718*t44439*t44484*t44486 - 1.*t15296*t45352)*var2[1] + (-1.*t15296*t20718*t44439*t44486 + t44484*t45352)*var2[2] + (t45022*t45380 + t45045*t45392 + t44916*(t45362 + t45366 - 1.*t44993*t45384 - 1.*t44676*t45388 - 1.*t44984*t45392 - 1.*t44996*t45396) + t44993*(t45370 + t45371 + t44984*t45380 + t44916*t45384 + t44890*t45388 + t44996*t45403))*var2[3] + (-1.*t20718*t44458*t44486*t45131 - 1.*t20718*t34926*t45145 + t44876*(-1.*t34926*t44462*t44968 + t45326 + t45330 + t45362 - 1.*t44486*t45324*t45363 + t45366) + t20718*t44486*(t44458*t44462*t44486*t44968 - 1.*t44462*t44888*t45324 + t45338 + t45340 + t45370 + t45371))*var2[4] + (-1.*t34926*t44458*t45320 + t44458*t44486*(t34926*t44966 - 1.*t44486*t45324 + t45326 + t45330) + t44486*(t45143 + t45333 + t45334) + t34926*(-1.*t44458*t44486*t44966 - 1.*t34926*t44458*t45324 + t45338 + t45340))*var2[5];
  p_output1[37]=t45392*var2[0] + (-1.*t20718*t34926*t44484 - 1.*t15296*t45396)*var2[1] + (-1.*t15296*t20718*t34926 + t44484*t45396)*var2[2] + (t45081*t45347 + t45070*t45380 + t44916*(t44984*t45347 + t44996*t45352 + t45058*t45384 + t44516*t45388 + t45445 + t45447) + t45058*(-1.*t44984*t45380 - 1.*t44916*t45384 - 1.*t44890*t45388 - 1.*t44996*t45403 + t45452 + t45453))*var2[3] + (-1.*t20718*t44458*t44486*t45229 - 1.*t20718*t44439*t44486*t45237 + t44876*(t44439*t44462*t44486*t44968 - 1.*t44462*t44504*t45324 + t45414 + t45416 + t45445 + t45447) + t44472*(-1.*t44458*t44462*t44486*t44968 + t44462*t44888*t45324 + t45424 + t45426 + t45452 + t45453))*var2[4] + (t44458*t44486*(-1.*t44439*t44486*t44966 - 1.*t34926*t44439*t45324 + t45414 + t45416) - 1.*t34926*t44439*t45421 + t44439*t44486*(t44458*t44486*t44966 + t34926*t44458*t45324 + t45424 + t45426) - 1.*t34926*t44458*t45431)*var2[5];
  p_output1[38]=t45380*var2[0] + (-1.*t20718*t44458*t44484*t44486 - 1.*t15296*t45403)*var2[1] + (-1.*t15296*t20718*t44458*t44486 + t44484*t45403)*var2[2] + (t45099*t45347 + t45110*t45392 + t45058*(t44993*t45384 + t44676*t45388 + t44984*t45392 + t44996*t45396 + t45509 + t45512) + t44993*(-1.*t44984*t45347 - 1.*t44996*t45352 - 1.*t45058*t45384 - 1.*t44516*t45388 + t45516 + t45518))*var2[3] + (-1.*t20718*t44439*t44486*t45278 - 1.*t20718*t34926*t45293 + t44472*(t34926*t44462*t44968 + t44486*t45324*t45363 + t45482 + t45484 + t45509 + t45512) + t20718*t44486*(-1.*t44439*t44462*t44486*t44968 + t44462*t44504*t45324 + t45488 + t45490 + t45516 + t45518))*var2[4] + (-1.*t34926*t44439*t45479 + t44439*t44486*(-1.*t34926*t44966 + t44486*t45324 + t45482 + t45484) + t34926*(t44439*t44486*t44966 + t34926*t44439*t45324 + t45488 + t45490) + t44486*(t45290 + t45493 + t45494))*var2[5];
  p_output1[39]=t44916*var2[0] + t44897*var2[1] + (t15296*t44876 + t44484*t44890)*var2[2] + (t45022*t45601 + t44916*(t45585 - 1.*t44993*t45605 - 1.*t44676*t45610) + t44993*(t45588 + t45593 + t44984*t45601 + t44916*t45605 + t44890*t45610 + t44996*t45617))*var2[3] + (t45131*t45575 + t44876*(-1.*t34926*t44486*t45559 + t44462*t44486*t45580 + t45585) + t20718*t44486*(t45549 + t45560 + t44888*t45580 + t45588 + t44968*t45591 + t45593))*var2[4] + (t44486*t44870*t45320 + t34926*(-1.*t34926*t44870*t44966 + t44951*t45543 + t45549 + t44870*t45554 + t45560 + t44458*t45559*t45561))*var2[5] + (0.1575*t44458 + 0.2255*t45543)*var2[12];
  p_output1[40]=(t44916*t45081 + t45070*t45601 + t44916*(t45040 + t45041 + t45042 + t45058*t45605 + t44516*t45610 + t45663) + t45058*(-1.*t44984*t45601 - 1.*t44916*t45605 - 1.*t44890*t45610 - 1.*t44996*t45617 + t45666 + t45668))*var2[3] + (t44876*t45237 + t45229*t45575 + t44876*(t45040 + t45143 + t45144 + t44504*t45580 + t45637 + t45663) + t44472*(-1.*t44888*t45580 - 1.*t44968*t45591 + t45629 + t45633 + t45666 + t45668))*var2[4] + (t44458*t44486*t45421 + t44486*t44870*t45431 + t44439*t44486*(t34926*t44870*t44966 - 1.*t44458*t45559*t45561 + t45629 + t45631 + t45632 + t45633) + t44458*t44486*(t45143 + t45333 + t45334 + t44439*t45559*t45561 + t45637 + t45639))*var2[5] + (t44458*(-1.*t44870*t44934 - 1.*t44458*t45559 + t45631 + t45632) + t44870*(t44458*t44934 + t45333 + t44439*t45559 + t45639) + t45543*t45645 + t44870*t45652)*var2[12];
  p_output1[41]=t45601*var2[0] + (t44484*t45575 - 1.*t15296*t45617)*var2[1] + (t15296*t45575 + t44484*t45617)*var2[2] + (t44916*t45099 + t45058*(t44993*t45605 + t44676*t45610 + t45711) + t44993*(t45078 + t45079 + t45080 - 1.*t45058*t45605 - 1.*t44516*t45610 + t45716))*var2[3] + (t44876*t45278 + t44472*(t34926*t44486*t45559 - 1.*t44462*t44486*t45580 + t45711) + t20718*t44486*(t45078 + t45233 + t45235 - 1.*t44504*t45580 + t45691 + t45716))*var2[4] + (t44458*t44486*t45479 + t34926*(t45233 + t45419 + t45420 - 1.*t44458*t45554 - 1.*t44439*t45559*t45561 + t45691))*var2[5] - 0.068*t44870*var2[12];
  p_output1[42]=t45763*var2[0] + (t44484*t45767 - 1.*t15296*t45772)*var2[1] + (t15296*t45767 + t44484*t45772)*var2[2] + (t45022*t45058 + t44916*(t45789 - 1.*t44993*t45801 - 1.*t44676*t45805) + t44993*(t45065 + t45067 + t45068 + t45792 + t44916*t45801 + t44890*t45805))*var2[3] + (t44472*t45131 + t44876*(-1.*t34926*t44486*t45751 + t44462*t44486*t45784 + t45789) + t20718*t44486*(t45065 + t45227 + t45228 + t45752 + t44888*t45784 + t45792))*var2[4] + (t44439*t44486*t45320 + t34926*(t45227 + t45429 + t45430 + t44870*t45747 + t44458*t45561*t45751 + t45752))*var2[5] + (0.2255*t44458 + 0.1575*t45543)*var2[12] + (0.325*t34927 - 1.*t34927*t44932 - 1.*t34927*t45737)*var2[13];
  p_output1[43]=(t45058*t45070 + t45081*t45763 + t44916*(t44984*t45763 + t44996*t45772 + t45058*t45801 + t44516*t45805 + t45846 + t45849) + t45058*(t45107 + t45108 + t45109 - 1.*t44916*t45801 - 1.*t44890*t45805 + t45853))*var2[3] + (t44472*t45229 + t45237*t45767 + t44876*(t44968*t45761 + t44504*t45784 + t45824 + t45826 + t45846 + t45849) + t44472*(t45107 + t45290 + t45291 - 1.*t44888*t45784 + t45819 + t45853))*var2[4] + (t44439*t44486*t45431 + t44486*t45421*t45543 + t44439*t44486*(t45290 + t45493 + t45494 - 1.*t44458*t45561*t45751 + t45818 + t45819) + t44458*t44486*(-1.*t34926*t44966*t45543 + t44439*t45561*t45751 + t45823 + t45824 + t45826 + t45828))*var2[5] + (t44458*t45645 + t44439*t45652 + t44458*(-1.*t44439*t44934 + t45494 - 1.*t44458*t45751 + t45818) + t44870*(t44934*t45543 + t44439*t45751 + t45823 + t45828))*var2[12];
  p_output1[44]=t45058*var2[0] + t44573*var2[1] + (t15296*t44472 + t44484*t44516)*var2[2] + (t45099*t45763 + t45058*(t44993*t45801 + t44676*t45805 + t45900) + t44993*(-1.*t44984*t45763 - 1.*t44996*t45772 - 1.*t45058*t45801 - 1.*t44516*t45805 + t45903 + t45906))*var2[3] + (t45278*t45767 + t44472*(t34926*t44486*t45751 - 1.*t44462*t44486*t45784 + t45900) + t20718*t44486*(-1.*t44968*t45761 - 1.*t44504*t45784 + t45882 + t45884 + t45903 + t45906))*var2[4] + (t44486*t45479*t45543 + t34926*(-1.*t44439*t44951 + t34926*t44966*t45543 - 1.*t44458*t45747 - 1.*t44439*t45561*t45751 + t45882 + t45884))*var2[5] - 0.068*t44439*var2[12] + (0.325*t44257 - 1.*t44257*t44932 - 1.*t44257*t45737)*var2[13];
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 18, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "dJh_FrFoot_ParallelStance.hh"

namespace SymFunction
{

void dJh_FrFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
