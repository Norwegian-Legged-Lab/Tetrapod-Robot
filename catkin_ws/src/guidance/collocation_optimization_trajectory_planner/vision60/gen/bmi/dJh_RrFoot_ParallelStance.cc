/*
 * Automatically Generated from Mathematica.
 * Tue 7 Jun 2022 14:10:59 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t8075;
  double t7630;
  double t7944;
  double t8664;
  double t7953;
  double t8699;
  double t9120;
  double t4892;
  double t9226;
  double t9229;
  double t9231;
  double t6645;
  double t9363;
  double t9534;
  double t9160;
  double t9421;
  double t9422;
  double t3506;
  double t9576;
  double t9798;
  double t9802;
  double t26247;
  double t26250;
  double t32617;
  double t32689;
  double t32760;
  double t37554;
  double t44476;
  double t44512;
  double t44538;
  double t44856;
  double t44860;
  double t44861;
  double t44721;
  double t44868;
  double t44878;
  double t44892;
  double t44894;
  double t44899;
  double t44902;
  double t44908;
  double t44910;
  double t45032;
  double t45034;
  double t45037;
  double t45061;
  double t45062;
  double t45064;
  double t45072;
  double t45073;
  double t45074;
  double t45075;
  double t45076;
  double t45077;
  double t45059;
  double t45071;
  double t45082;
  double t45083;
  double t45055;
  double t45085;
  double t45086;
  double t45088;
  double t45090;
  double t45091;
  double t45092;
  double t45094;
  double t45095;
  double t45100;
  double t45101;
  double t45102;
  double t45103;
  double t45104;
  double t45105;
  double t45106;
  double t45111;
  double t45112;
  double t45128;
  double t45132;
  double t45136;
  double t45125;
  double t45126;
  double t45127;
  double t45121;
  double t45122;
  double t45123;
  double t45049;
  double t45052;
  double t45054;
  double t45087;
  double t45114;
  double t45115;
  double t45162;
  double t45169;
  double t45173;
  double t45142;
  double t45146;
  double t45152;
  double t45219;
  double t45221;
  double t45223;
  double t45183;
  double t45184;
  double t45185;
  double t45304;
  double t45305;
  double t45306;
  double t45178;
  double t45200;
  double t45332;
  double t45335;
  double t45336;
  double t45339;
  double t45353;
  double t45354;
  double t45355;
  double t45179;
  double t45180;
  double t45181;
  double t45357;
  double t45359;
  double t45201;
  double t45202;
  double t45203;
  double t45243;
  double t45254;
  double t45418;
  double t45423;
  double t45244;
  double t45245;
  double t45246;
  double t45440;
  double t45442;
  double t45256;
  double t45257;
  double t45259;
  double t45274;
  double t45296;
  double t45487;
  double t45275;
  double t45279;
  double t45280;
  double t45495;
  double t45497;
  double t45297;
  double t45298;
  double t45299;
  double t45321;
  double t45343;
  double t45531;
  double t45532;
  double t45533;
  double t45537;
  double t45538;
  double t45572;
  double t45576;
  double t45577;
  double t45325;
  double t45327;
  double t45535;
  double t45539;
  double t45555;
  double t45562;
  double t45344;
  double t45348;
  double t45598;
  double t45602;
  double t45612;
  double t45619;
  double t45620;
  double t45627;
  double t45628;
  double t45630;
  double t45635;
  double t45636;
  double t45638;
  double t45641;
  double t45642;
  double t45643;
  double t45647;
  double t45648;
  double t45649;
  double t45435;
  double t45428;
  double t45653;
  double t45654;
  double t45655;
  double t45676;
  double t45678;
  double t45432;
  double t45433;
  double t45686;
  double t45688;
  double t45436;
  double t45437;
  double t45709;
  double t45712;
  double t45567;
  double t45568;
  double t45569;
  double t45719;
  double t45720;
  double t45660;
  double t45661;
  double t45662;
  double t45480;
  double t45500;
  double t45481;
  double t45483;
  double t45757;
  double t45768;
  double t45606;
  double t45776;
  double t45778;
  double t45501;
  double t45502;
  double t45811;
  double t45814;
  double t45820;
  double t45822;
  double t45528;
  double t45529;
  double t45851;
  double t45852;
  double t45854;
  double t45869;
  double t45870;
  double t45000;
  double t45010;
  double t45012;
  double t45862;
  double t45863;
  double t45864;
  double t45865;
  double t45860;
  double t45868;
  double t45871;
  double t45895;
  double t45896;
  double t45897;
  double t45886;
  double t45887;
  double t45888;
  double t45891;
  double t45892;
  double t45893;
  double t45904;
  double t45905;
  double t45907;
  double t45898;
  double t45902;
  double t45909;
  double t45915;
  double t45916;
  double t45917;
  double t45919;
  double t45920;
  double t45921;
  double t45923;
  double t45924;
  double t45925;
  double t45681;
  double t45682;
  double t45683;
  double t45692;
  double t45693;
  double t45694;
  double t45872;
  double t45545;
  double t45546;
  double t45945;
  double t45946;
  double t45953;
  double t45951;
  double t45943;
  double t45947;
  double t45979;
  double t45982;
  double t45984;
  double t45930;
  double t45931;
  double t45932;
  double t45753;
  double t45754;
  double t46007;
  double t46026;
  double t46030;
  double t46049;
  double t46050;
  double t46051;
  double t46063;
  double t46064;
  double t46065;
  double t46073;
  double t46074;
  double t46075;
  double t46079;
  double t46080;
  double t46081;
  double t46083;
  double t46084;
  double t46085;
  double t46060;
  double t46061;
  double t46066;
  double t46101;
  double t46102;
  double t46103;
  double t46096;
  double t46097;
  double t46098;
  double t46105;
  double t46108;
  double t46117;
  double t46119;
  double t46120;
  double t46123;
  double t46124;
  double t46125;
  double t45781;
  double t45785;
  double t45958;
  double t45959;
  double t45966;
  double t45967;
  double t46140;
  double t46145;
  double t46151;
  double t46146;
  double t46148;
  double t46141;
  double t46169;
  double t46173;
  double t46072;
  double t46076;
  double t46077;
  double t46177;
  double t42140;
  double t43118;
  double t43169;
  double t46208;
  double t46210;
  double t46227;
  double t46230;
  double t46233;
  t8075 = Cos(var1[16]);
  t7630 = Cos(var1[17]);
  t7944 = Sin(var1[16]);
  t8664 = Sin(var1[17]);
  t7953 = t7630*t7944;
  t8699 = -1.*t8075*t8664;
  t9120 = t7953 + t8699;
  t4892 = Cos(var1[5]);
  t9226 = t8075*t7630;
  t9229 = t7944*t8664;
  t9231 = t9226 + t9229;
  t6645 = Sin(var1[15]);
  t9363 = Sin(var1[5]);
  t9534 = Cos(var1[3]);
  t9160 = -1.*t4892*t6645*t9120;
  t9421 = t9231*t9363;
  t9422 = t9160 + t9421;
  t3506 = Sin(var1[3]);
  t9576 = Cos(var1[15]);
  t9798 = Cos(var1[4]);
  t9802 = t9576*t9798*t9120;
  t26247 = Sin(var1[4]);
  t26250 = t4892*t9231;
  t32617 = t6645*t9120*t9363;
  t32689 = t26250 + t32617;
  t32760 = -1.*t26247*t32689;
  t37554 = t9802 + t32760;
  t44476 = t9798*t6645;
  t44512 = t9576*t26247*t9363;
  t44538 = t44476 + t44512;
  t44856 = -1.*t7630*t7944;
  t44860 = t8075*t8664;
  t44861 = t44856 + t44860;
  t44721 = -1.*t4892*t6645*t9231;
  t44868 = t44861*t9363;
  t44878 = t44721 + t44868;
  t44892 = t9576*t9798*t9231;
  t44894 = t4892*t44861;
  t44899 = t6645*t9231*t9363;
  t44902 = t44894 + t44899;
  t44908 = -1.*t26247*t44902;
  t44910 = t44892 + t44908;
  t45032 = -1.*t9576*t9120*t26247;
  t45034 = -1.*t9798*t32689;
  t45037 = t45032 + t45034;
  t45061 = -0.0641*t7630;
  t45062 = -0.28*t8664;
  t45064 = t45061 + t45062;
  t45072 = -1.*t7630;
  t45073 = 1. + t45072;
  t45074 = -0.575*t45073;
  t45075 = -0.295*t7630;
  t45076 = -0.0641*t8664;
  t45077 = t45074 + t45075 + t45076;
  t45059 = 0.325*t7944;
  t45071 = t8075*t45064;
  t45082 = t7944*t45077;
  t45083 = t45059 + t45071 + t45082;
  t45055 = -0.068*t6645;
  t45085 = t9576*t45083;
  t45086 = t45055 + t45085;
  t45088 = -1.*t8075;
  t45090 = 1. + t45088;
  t45091 = -0.325*t45090;
  t45092 = -1.*t7944*t45064;
  t45094 = t8075*t45077;
  t45095 = t45091 + t45092 + t45094;
  t45100 = t4892*t45095;
  t45101 = -1.*t9576;
  t45102 = 1. + t45101;
  t45103 = -0.1575*t45102;
  t45104 = -0.2255*t9576;
  t45105 = -1.*t6645*t45083;
  t45106 = t45103 + t45104 + t45105;
  t45111 = -1.*t45106*t9363;
  t45112 = t45100 + t45111;
  t45128 = t9798*t45086;
  t45132 = -1.*t26247*t45112;
  t45136 = t45128 + t45132;
  t45125 = t6645*t26247;
  t45126 = -1.*t9576*t9798*t9363;
  t45127 = t45125 + t45126;
  t45121 = t45086*t26247;
  t45122 = t9798*t45112;
  t45123 = t45121 + t45122;
  t45049 = t9576*t9231*t26247;
  t45052 = t9798*t44902;
  t45054 = t45049 + t45052;
  t45087 = -1.*t45086*t26247;
  t45114 = -1.*t9798*t45112;
  t45115 = t45087 + t45114;
  t45162 = t4892*t45106;
  t45169 = t45095*t9363;
  t45173 = t45162 + t45169;
  t45142 = -1.*t6645*t26247;
  t45146 = t9576*t9798*t9363;
  t45152 = t45142 + t45146;
  t45219 = t9576*t9120*t26247;
  t45221 = t9798*t32689;
  t45223 = t45219 + t45221;
  t45183 = -1.*t9576*t9231*t26247;
  t45184 = -1.*t9798*t44902;
  t45185 = t45183 + t45184;
  t45304 = t4892*t6645*t9120;
  t45305 = -1.*t9231*t9363;
  t45306 = t45304 + t45305;
  t45178 = -1.*t9576*t4892*t45173;
  t45200 = t45173*t44878;
  t45332 = -1.*t4892*t45106;
  t45335 = -1.*t45095*t9363;
  t45336 = t45332 + t45335;
  t45339 = t9576*t9363*t45173;
  t45353 = t4892*t6645*t9231;
  t45354 = -1.*t44861*t9363;
  t45355 = t45353 + t45354;
  t45179 = -1.*t45127*t45123;
  t45180 = -1.*t44538*t45136;
  t45181 = t45178 + t45179 + t45180;
  t45357 = t45112*t44878;
  t45359 = t45173*t44902;
  t45201 = t45123*t45054;
  t45202 = t45136*t44910;
  t45203 = t45200 + t45201 + t45202;
  t45243 = t45173*t9422;
  t45254 = -1.*t45173*t44878;
  t45418 = t45173*t32689;
  t45423 = t45112*t9422;
  t45244 = t45123*t45223;
  t45245 = t45136*t37554;
  t45246 = t45243 + t45244 + t45245;
  t45440 = -1.*t45112*t44878;
  t45442 = -1.*t45173*t44902;
  t45256 = -1.*t45123*t45054;
  t45257 = -1.*t45136*t44910;
  t45259 = t45254 + t45256 + t45257;
  t45274 = t9576*t4892*t45173;
  t45296 = -1.*t45173*t9422;
  t45487 = -1.*t9576*t9363*t45173;
  t45275 = t45127*t45123;
  t45279 = t44538*t45136;
  t45280 = t45274 + t45275 + t45279;
  t45495 = -1.*t45173*t32689;
  t45497 = -1.*t45112*t9422;
  t45297 = -1.*t45123*t45223;
  t45298 = -1.*t45136*t37554;
  t45299 = t45296 + t45297 + t45298;
  t45321 = -1.*t6645*t45086;
  t45343 = t9576*t45086*t9231;
  t45531 = 0.068*t6645;
  t45532 = -1.*t9576*t45083;
  t45533 = t45531 + t45532;
  t45537 = -0.068*t9576;
  t45538 = t45537 + t45105;
  t45572 = -1.*t9798*t6645*t9120;
  t45576 = -1.*t9576*t9120*t26247*t9363;
  t45577 = t45572 + t45576;
  t45325 = t9576*t9363*t45112;
  t45327 = t45321 + t45325 + t45178;
  t45535 = -1.*t9576*t45086;
  t45539 = -1.*t6645*t45538;
  t45555 = -1.*t6645*t45086*t9231;
  t45562 = t9576*t45538*t9231;
  t45344 = t45112*t44902;
  t45348 = t45343 + t45200 + t45344;
  t45598 = Power(t4892,2);
  t45602 = -1.*t9576*t45598*t45533;
  t45612 = t4892*t6645*t45173;
  t45619 = -1.*t9576*t4892*t9231*t45173;
  t45620 = t4892*t45533*t44878;
  t45627 = -1.*t6645*t9231*t26247;
  t45628 = t9576*t9798*t9231*t9363;
  t45630 = t45627 + t45628;
  t45635 = t45538*t26247;
  t45636 = -1.*t9798*t45533*t9363;
  t45638 = t45635 + t45636;
  t45641 = t9798*t45538;
  t45642 = t45533*t26247*t9363;
  t45643 = t45641 + t45642;
  t45647 = t9576*t26247;
  t45648 = t9798*t6645*t9363;
  t45649 = t45647 + t45648;
  t45435 = -1.*t9576*t45086*t9231;
  t45428 = t9576*t45086*t9120;
  t45653 = t9576*t9798;
  t45654 = -1.*t6645*t26247*t9363;
  t45655 = t45653 + t45654;
  t45676 = -1.*t6645*t45086*t9120;
  t45678 = t9576*t45538*t9120;
  t45432 = t45112*t32689;
  t45433 = t45428 + t45432 + t45243;
  t45686 = t6645*t45086*t9231;
  t45688 = -1.*t9576*t45538*t9231;
  t45436 = -1.*t45112*t44902;
  t45437 = t45435 + t45254 + t45436;
  t45709 = -1.*t9576*t4892*t9120*t45173;
  t45712 = t4892*t45533*t9422;
  t45567 = -1.*t6645*t9120*t26247;
  t45568 = t9576*t9798*t9120*t9363;
  t45569 = t45567 + t45568;
  t45719 = t9576*t4892*t9231*t45173;
  t45720 = -1.*t4892*t45533*t44878;
  t45660 = -1.*t9798*t6645*t9231;
  t45661 = -1.*t9576*t9231*t26247*t9363;
  t45662 = t45660 + t45661;
  t45480 = t6645*t45086;
  t45500 = -1.*t9576*t45086*t9120;
  t45481 = -1.*t9576*t9363*t45112;
  t45483 = t45480 + t45481 + t45274;
  t45757 = t9576*t45086;
  t45768 = t6645*t45538;
  t45606 = Power(t9363,2);
  t45776 = t6645*t45086*t9120;
  t45778 = -1.*t9576*t45538*t9120;
  t45501 = -1.*t45112*t32689;
  t45502 = t45500 + t45501 + t45296;
  t45811 = t9576*t45598*t45533;
  t45814 = -1.*t4892*t6645*t45173;
  t45820 = t9576*t4892*t9120*t45173;
  t45822 = -1.*t4892*t45533*t9422;
  t45528 = -1.*t9576*t45106;
  t45529 = t45321 + t45528;
  t45851 = -1.*t8075*t7630;
  t45852 = -1.*t7944*t8664;
  t45854 = t45851 + t45852;
  t45869 = 0.325*t8075;
  t45870 = t45869 + t45092 + t45094;
  t45000 = t9534*t44878;
  t45010 = -1.*t3506*t44910;
  t45012 = t45000 + t45010;
  t45862 = -0.325*t7944;
  t45863 = -1.*t8075*t45064;
  t45864 = -1.*t7944*t45077;
  t45865 = t45862 + t45863 + t45864;
  t45860 = t9576*t45086*t44861;
  t45868 = Power(t9576,2);
  t45871 = t45868*t45870*t9231;
  t45895 = -1.*t4892*t6645*t45870;
  t45896 = t45865*t9363;
  t45897 = t45895 + t45896;
  t45886 = -1.*t4892*t6645*t44861;
  t45887 = t45854*t9363;
  t45888 = t45886 + t45887;
  t45891 = t4892*t45865;
  t45892 = t6645*t45870*t9363;
  t45893 = t45891 + t45892;
  t45904 = t4892*t45854;
  t45905 = t6645*t44861*t9363;
  t45907 = t45904 + t45905;
  t45898 = -1.*t9576*t4892*t45897;
  t45902 = t45897*t44878;
  t45909 = t45173*t45888;
  t45915 = t9576*t44861*t26247;
  t45916 = t9798*t45907;
  t45917 = t45915 + t45916;
  t45919 = t9576*t45870*t26247;
  t45920 = t9798*t45893;
  t45921 = t45919 + t45920;
  t45923 = t9576*t9798*t45870;
  t45924 = -1.*t26247*t45893;
  t45925 = t45923 + t45924;
  t45681 = -1.*t45095*t44861;
  t45682 = t6645*t45106*t9231;
  t45683 = t45681 + t45435 + t45682;
  t45692 = -1.*t6645*t45106*t9120;
  t45693 = t45095*t9231;
  t45694 = t45428 + t45692 + t45693;
  t45872 = Power(t6645,2);
  t45545 = t45095*t44861;
  t45546 = -1.*t6645*t45106*t9231;
  t45945 = -1.*t45865*t44861;
  t45946 = -1.*t45095*t45854;
  t45953 = t45865*t9231;
  t45951 = t45868*t45870*t9120;
  t45943 = -1.*t9576*t45086*t44861;
  t45947 = -1.*t45868*t45870*t9231;
  t45979 = t45897*t9422;
  t45982 = -1.*t45897*t44878;
  t45984 = -1.*t45173*t45888;
  t45930 = t9576*t9798*t44861;
  t45931 = -1.*t26247*t45907;
  t45932 = t45930 + t45931;
  t45753 = t9576*t45106;
  t45754 = t45480 + t45753;
  t46007 = -1.*t45868*t45870*t9120;
  t46026 = t9576*t4892*t45897;
  t46030 = -1.*t45897*t9422;
  t46049 = -0.28*t7630;
  t46050 = 0.0641*t8664;
  t46051 = t46049 + t46050;
  t46063 = t7944*t45064;
  t46064 = t8075*t46051;
  t46065 = t46063 + t46064;
  t46073 = t4892*t9120;
  t46074 = t6645*t45854*t9363;
  t46075 = t46073 + t46074;
  t46079 = -1.*t4892*t6645*t45854;
  t46080 = t9120*t9363;
  t46081 = t46079 + t46080;
  t46083 = t9576*t9798*t45854;
  t46084 = -1.*t26247*t46075;
  t46085 = t46083 + t46084;
  t46060 = -1.*t7944*t46051;
  t46061 = t45071 + t46060;
  t46066 = t45868*t46065*t9231;
  t46101 = -1.*t4892*t6645*t46065;
  t46102 = t46061*t9363;
  t46103 = t46101 + t46102;
  t46096 = t4892*t46061;
  t46097 = t6645*t46065*t9363;
  t46098 = t46096 + t46097;
  t46105 = -1.*t9576*t4892*t46103;
  t46108 = t46103*t44878;
  t46117 = t9576*t46065*t26247;
  t46119 = t9798*t46098;
  t46120 = t46117 + t46119;
  t46123 = t9576*t9798*t46065;
  t46124 = -1.*t26247*t46098;
  t46125 = t46123 + t46124;
  t45781 = t6645*t45106*t9120;
  t45785 = -1.*t45095*t9231;
  t45958 = t45083*t9120;
  t45959 = t45958 + t45693;
  t45966 = -1.*t45083*t9231;
  t45967 = t45681 + t45966;
  t46140 = -1.*t46061*t44861;
  t46145 = t45095*t9120;
  t46151 = t46061*t9231;
  t46146 = t45868*t46065*t9120;
  t46148 = t9576*t45086*t45854;
  t46141 = -1.*t45868*t46065*t9231;
  t46169 = t45173*t46081;
  t46173 = t46103*t9422;
  t46072 = t9576*t45854*t26247;
  t46076 = t9798*t46075;
  t46077 = t46072 + t46076;
  t46177 = -1.*t46103*t44878;
  t42140 = t9534*t9422;
  t43118 = -1.*t3506*t37554;
  t43169 = t42140 + t43118;
  t46208 = -1.*t45868*t46065*t9120;
  t46210 = -1.*t9576*t45086*t45854;
  t46227 = t9576*t4892*t46103;
  t46230 = -1.*t45173*t46081;
  t46233 = -1.*t46103*t9422;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=(-1.*t3506*t9422 - 1.*t37554*t9534)*var2[1] + t43169*var2[2];
  p_output1[10]=(-1.*t44538*t9534 - 1.*t3506*t4892*t9576)*var2[1] + (-1.*t3506*t44538 + t4892*t9534*t9576)*var2[2];
  p_output1[11]=(-1.*t3506*t44878 - 1.*t44910*t9534)*var2[1] + t45012*var2[2];
  p_output1[12]=t37554*var2[0] - 1.*t3506*t45037*var2[1] + t45037*t9534*var2[2] + (t45054*(-1.*t44538*t45115 - 1.*t44538*t45123 - 1.*t45127*t45136 - 1.*t45136*t45152) + t44910*t45181 + t45127*(t44910*t45115 + t44910*t45123 + t45054*t45136 + t45136*t45185) + t44538*t45203)*var2[3];
  p_output1[13]=t44538*var2[0] - 1.*t3506*t45152*var2[1] + t45152*t9534*var2[2] + ((-1.*t44910*t45115 - 1.*t44910*t45123 - 1.*t45054*t45136 - 1.*t45136*t45185)*t45223 + t45054*(t37554*t45115 + t37554*t45123 + t45037*t45136 + t45136*t45223) + t44910*t45246 + t37554*t45259)*var2[3];
  p_output1[14]=t44910*var2[0] - 1.*t3506*t45185*var2[1] + t45185*t9534*var2[2] + ((t44538*t45115 + t44538*t45123 + t45127*t45136 + t45136*t45152)*t45223 + t45127*(-1.*t37554*t45115 - 1.*t37554*t45123 - 1.*t45037*t45136 - 1.*t45136*t45223) + t37554*t45280 + t44538*t45299)*var2[3];
  p_output1[15]=t45306*t9798*var2[0] + (t26247*t3506*t45306 + t32689*t9534)*var2[1] + (t32689*t3506 - 1.*t26247*t45306*t9534)*var2[2] + (t45181*t45355*t9798 - 1.*t45203*t4892*t9576*t9798 + t45127*(-1.*t26247*t44910*t45336 - 1.*t26247*t45136*t45355 + t45357 + t45359 + t45054*t45336*t9798 + t45123*t45355*t9798) + t45054*(t26247*t44538*t45336 + t45339 - 1.*t45112*t4892*t9576 - 1.*t26247*t45136*t4892*t9576 - 1.*t45127*t45336*t9798 + t45123*t4892*t9576*t9798))*var2[3] + (t44902*t45327 + (t44902*t45336 + t45112*t45355 + t45357 + t45359)*t4892*t9576 - 1.*t45348*t9363*t9576 + t44878*(t45339 + t45336*t9363*t9576))*var2[4];
  p_output1[16]=-1.*t4892*t9576*t9798*var2[0] + (-1.*t26247*t3506*t4892*t9576 - 1.*t9363*t9534*t9576)*var2[1] + (-1.*t3506*t9363*t9576 + t26247*t4892*t9534*t9576)*var2[2] + (t45259*t45306*t9798 + t45246*t45355*t9798 + t45054*(-1.*t26247*t45136*t45306 - 1.*t26247*t37554*t45336 + t45418 + t45423 + t45123*t45306*t9798 + t45223*t45336*t9798) + t45223*(t26247*t44910*t45336 + t26247*t45136*t45355 + t45440 + t45442 - 1.*t45054*t45336*t9798 - 1.*t45123*t45355*t9798))*var2[3] + (t44878*(t45112*t45306 + t32689*t45336 + t45418 + t45423) + t44902*t45433 + t32689*t45437 + (-1.*t44902*t45336 - 1.*t45112*t45355 + t45440 + t45442)*t9422)*var2[4];
  p_output1[17]=t45355*t9798*var2[0] + (t26247*t3506*t45355 + t44902*t9534)*var2[1] + (t3506*t44902 - 1.*t26247*t45355*t9534)*var2[2] + (t45280*t45306*t9798 - 1.*t45299*t4892*t9576*t9798 + t45127*(t26247*t45136*t45306 + t26247*t37554*t45336 + t45495 + t45497 - 1.*t45123*t45306*t9798 - 1.*t45223*t45336*t9798) + t45223*(-1.*t26247*t44538*t45336 + t45487 + t45112*t4892*t9576 + t26247*t45136*t4892*t9576 + t45127*t45336*t9798 - 1.*t45123*t4892*t9576*t9798))*var2[3] + (t32689*t45483 + (-1.*t45112*t45306 - 1.*t32689*t45336 + t45495 + t45497)*t4892*t9576 - 1.*t45502*t9363*t9576 + t9422*(t45487 - 1.*t45336*t9363*t9576))*var2[4];
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=t45569*var2[0] + (-1.*t3506*t45577 - 1.*t4892*t9120*t9534*t9576)*var2[1] + (t45577*t9534 - 1.*t3506*t4892*t9120*t9576)*var2[2] + (t45181*t45630 + t45203*t45649 + t45054*(t45602 + t45612 - 1.*t45127*t45638 - 1.*t44538*t45643 - 1.*t45123*t45649 - 1.*t45136*t45655) + t45127*(t45619 + t45620 + t45123*t45630 + t45054*t45638 + t44910*t45643 + t45136*t45662))*var2[3] + (-1.*t45348*t4892*t6645 - 1.*t45327*t4892*t9231*t9576 + t44878*(t45535 + t45539 + t45602 + t45612 - 1.*t45112*t6645*t9363 - 1.*t45533*t45606*t9576) + t4892*t9576*(t45555 + t45562 + t45619 + t45620 - 1.*t44902*t45533*t9363 + t45112*t9231*t9363*t9576))*var2[4] + (-1.*t45529*t6645*t9231 + (t45343 + t45545 + t45546)*t9576 + t9231*t9576*(t45535 + t45539 + t45106*t6645 - 1.*t45533*t9576) + t6645*(t45555 + t45562 - 1.*t45533*t6645*t9231 - 1.*t45106*t9231*t9576))*var2[5];
  p_output1[46]=t45649*var2[0] + (-1.*t3506*t45655 - 1.*t4892*t6645*t9534)*var2[1] + (-1.*t3506*t4892*t6645 + t45655*t9534)*var2[2] + (t45259*t45569 + t45246*t45630 + t45054*(t45123*t45569 + t45136*t45577 + t45223*t45638 + t37554*t45643 + t45709 + t45712) + t45223*(-1.*t45123*t45630 - 1.*t45054*t45638 - 1.*t44910*t45643 - 1.*t45136*t45662 + t45719 + t45720))*var2[3] + (-1.*t45437*t4892*t9120*t9576 - 1.*t45433*t4892*t9231*t9576 + t44878*(t45676 + t45678 + t45709 + t45712 - 1.*t32689*t45533*t9363 + t45112*t9120*t9363*t9576) + t9422*(t45686 + t45688 + t45719 + t45720 + t44902*t45533*t9363 - 1.*t45112*t9231*t9363*t9576))*var2[4] + (-1.*t45683*t6645*t9120 - 1.*t45694*t6645*t9231 + t9231*t9576*(t45676 + t45678 - 1.*t45533*t6645*t9120 - 1.*t45106*t9120*t9576) + t9120*t9576*(t45686 + t45688 + t45533*t6645*t9231 + t45106*t9231*t9576))*var2[5];
  p_output1[47]=t45630*var2[0] + (-1.*t3506*t45662 - 1.*t4892*t9231*t9534*t9576)*var2[1] + (t45662*t9534 - 1.*t3506*t4892*t9231*t9576)*var2[2] + (t45280*t45569 + t45299*t45649 + t45223*(t45127*t45638 + t44538*t45643 + t45123*t45649 + t45136*t45655 + t45811 + t45814) + t45127*(-1.*t45123*t45569 - 1.*t45136*t45577 - 1.*t45223*t45638 - 1.*t37554*t45643 + t45820 + t45822))*var2[3] + (-1.*t45502*t4892*t6645 - 1.*t45483*t4892*t9120*t9576 + t9422*(t45757 + t45768 + t45811 + t45814 + t45112*t6645*t9363 + t45533*t45606*t9576) + t4892*t9576*(t45776 + t45778 + t45820 + t45822 + t32689*t45533*t9363 - 1.*t45112*t9120*t9363*t9576))*var2[4] + (-1.*t45754*t6645*t9120 + (t45500 + t45781 + t45785)*t9576 + t9120*t9576*(t45757 + t45768 - 1.*t45106*t6645 + t45533*t9576) + t6645*(t45776 + t45778 + t45533*t6645*t9120 + t45106*t9120*t9576))*var2[5];
  p_output1[48]=t45054*var2[0] + t45012*var2[1] + (t3506*t44878 + t44910*t9534)*var2[2] + (t45181*t45917 + t45054*(t45898 - 1.*t45127*t45921 - 1.*t44538*t45925) + t45127*(t45902 + t45909 + t45123*t45917 + t45054*t45921 + t44910*t45925 + t45136*t45932))*var2[3] + (t45327*t45888 + (t45860 + t45871 + t44902*t45893 + t45902 + t45112*t45907 + t45909)*t4892*t9576 + t44878*(t45898 - 1.*t45870*t6645*t9576 + t45893*t9363*t9576))*var2[4] + (t6645*(t45095*t45854 + t45860 + t44861*t45865 + t45871 - 1.*t44861*t45106*t6645 + t45870*t45872*t9231) + t44861*t45529*t9576)*var2[5] + (0.2255*t45854 + 0.1575*t9231)*var2[15];
  p_output1[49]=(t45054*t45259 + t45246*t45917 + t45054*(t45200 + t45201 + t45202 + t45223*t45921 + t37554*t45925 + t45979) + t45223*(-1.*t45123*t45917 - 1.*t45054*t45921 - 1.*t44910*t45925 - 1.*t45136*t45932 + t45982 + t45984))*var2[3] + (t44878*t45437 + t45433*t45888 + t44878*(t45200 + t45343 + t45344 + t32689*t45893 + t45951 + t45979) + (-1.*t44902*t45893 - 1.*t45112*t45907 + t45943 + t45947 + t45982 + t45984)*t9422)*var2[4] + (t44861*t45694*t9576 + t45683*t9231*t9576 + (t45343 + t45545 + t45546 + t45951 + t45953 + t45870*t45872*t9120)*t9231*t9576 + t9120*(t45943 + t45945 + t45946 + t45947 + t44861*t45106*t6645 - 1.*t45870*t45872*t9231)*t9576)*var2[5] + (t45854*t45959 + t44861*t45967 + t44861*(t45545 + t45953 + t45870*t9120 + t45083*t9231) + t9231*(-1.*t44861*t45083 + t45945 + t45946 - 1.*t45870*t9231))*var2[15];
  p_output1[50]=t45917*var2[0] + (-1.*t3506*t45932 + t45888*t9534)*var2[1] + (t3506*t45888 + t45932*t9534)*var2[2] + (t45054*t45280 + t45223*(t45127*t45921 + t44538*t45925 + t46026) + t45127*(t45254 + t45256 + t45257 - 1.*t45223*t45921 - 1.*t37554*t45925 + t46030))*var2[3] + (t44878*t45483 + (t45254 + t45435 + t45436 - 1.*t32689*t45893 + t46007 + t46030)*t4892*t9576 + t9422*(t46026 + t45870*t6645*t9576 - 1.*t45893*t9363*t9576))*var2[4] + (t6645*(t45435 + t45681 + t45682 + t46007 - 1.*t45870*t45872*t9120 - 1.*t45865*t9231) + t45754*t9231*t9576)*var2[5] - 0.068*t44861*var2[15];
  p_output1[51]=t46077*var2[0] + (-1.*t3506*t46085 + t46081*t9534)*var2[1] + (t3506*t46081 + t46085*t9534)*var2[2] + (t45181*t45223 + t45054*(t46105 - 1.*t45127*t46120 - 1.*t44538*t46125) + t45127*(t45243 + t45244 + t45245 + t46108 + t45054*t46120 + t44910*t46125))*var2[3] + (t45327*t9422 + (t45243 + t45428 + t45432 + t46066 + t44902*t46098 + t46108)*t4892*t9576 + t44878*(t46105 - 1.*t46065*t6645*t9576 + t46098*t9363*t9576))*var2[4] + (t6645*(t45428 + t45692 + t45693 + t44861*t46061 + t46066 + t45872*t46065*t9231) + t45529*t9120*t9576)*var2[5] + (0.1575*t45854 + 0.2255*t9231)*var2[15] + (-0.325*t7630 - 1.*t45077*t7630 - 1.*t46051*t7630)*var2[16];
  p_output1[52]=(t45223*t45246 + t45259*t46077 + t45054*(t45123*t46077 + t45136*t46085 + t45223*t46120 + t37554*t46125 + t46169 + t46173) + t45223*(t45296 + t45297 + t45298 - 1.*t45054*t46120 - 1.*t44910*t46125 + t46177))*var2[3] + (t45437*t46081 + t44878*(t45112*t46075 + t32689*t46098 + t46146 + t46148 + t46169 + t46173) + t45433*t9422 + (t45296 + t45500 + t45501 - 1.*t44902*t46098 + t46141 + t46177)*t9422)*var2[4] + (t45683*t45854*t9576 + t45694*t9120*t9576 + (t46145 + t46146 + t46148 + t46151 - 1.*t45106*t45854*t6645 + t45872*t46065*t9120)*t9231*t9576 + t9120*(t45500 + t45781 + t45785 + t46140 + t46141 - 1.*t45872*t46065*t9231)*t9576)*var2[5] + (t45967*t9120 + t44861*(t45083*t45854 + t46145 + t46151 + t46065*t9120) + t45959*t9231 + t9231*(t45785 + t46140 - 1.*t45083*t9120 - 1.*t46065*t9231))*var2[15];
  p_output1[53]=t45223*var2[0] + t43169*var2[1] + (t3506*t9422 + t37554*t9534)*var2[2] + (t45280*t46077 + t45223*(t45127*t46120 + t44538*t46125 + t46227) + t45127*(-1.*t45123*t46077 - 1.*t45136*t46085 - 1.*t45223*t46120 - 1.*t37554*t46125 + t46230 + t46233))*var2[3] + (t45483*t46081 + (-1.*t45112*t46075 - 1.*t32689*t46098 + t46208 + t46210 + t46230 + t46233)*t4892*t9576 + t9422*(t46227 + t46065*t6645*t9576 - 1.*t46098*t9363*t9576))*var2[4] + (t6645*(t46208 + t46210 + t45106*t45854*t6645 - 1.*t45095*t9120 - 1.*t45872*t46065*t9120 - 1.*t46061*t9231) + t45754*t45854*t9576)*var2[5] - 0.068*t9120*var2[15] + (-0.325*t8664 - 1.*t45077*t8664 - 1.*t46051*t8664)*var2[16];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 18, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "dJh_RrFoot_ParallelStance.hh"

namespace SymFunction
{

void dJh_RrFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
