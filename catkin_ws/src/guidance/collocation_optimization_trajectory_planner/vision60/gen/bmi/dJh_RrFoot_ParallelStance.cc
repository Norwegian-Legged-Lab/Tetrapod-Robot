/*
 * Automatically Generated from Mathematica.
 * Fri 10 Jun 2022 21:56:36 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t17352;
  double t8624;
  double t10916;
  double t17566;
  double t16322;
  double t17584;
  double t17637;
  double t4536;
  double t17879;
  double t18009;
  double t18068;
  double t6746;
  double t18070;
  double t18248;
  double t17878;
  double t18119;
  double t18140;
  double t1163;
  double t18462;
  double t18555;
  double t18627;
  double t18742;
  double t18914;
  double t20061;
  double t20079;
  double t20080;
  double t20082;
  double t20133;
  double t20134;
  double t20135;
  double t20212;
  double t20220;
  double t20223;
  double t20211;
  double t20224;
  double t20225;
  double t20230;
  double t20238;
  double t20243;
  double t20250;
  double t20263;
  double t20269;
  double t20325;
  double t20333;
  double t20339;
  double t20443;
  double t20444;
  double t20452;
  double t20560;
  double t20573;
  double t20609;
  double t20726;
  double t20858;
  double t20916;
  double t20409;
  double t20528;
  double t20989;
  double t20991;
  double t20401;
  double t21001;
  double t21133;
  double t21182;
  double t21203;
  double t21216;
  double t21256;
  double t21259;
  double t21264;
  double t21266;
  double t21270;
  double t21297;
  double t21317;
  double t21325;
  double t21357;
  double t21358;
  double t21375;
  double t21382;
  double t21700;
  double t21769;
  double t21804;
  double t21572;
  double t21657;
  double t21687;
  double t21397;
  double t21406;
  double t21415;
  double t20365;
  double t20367;
  double t20397;
  double t21171;
  double t21383;
  double t21388;
  double t22439;
  double t22683;
  double t22697;
  double t21907;
  double t21971;
  double t22272;
  double t27233;
  double t27672;
  double t27684;
  double t24323;
  double t24401;
  double t24423;
  double t31448;
  double t31564;
  double t31571;
  double t22844;
  double t25062;
  double t31968;
  double t31970;
  double t31974;
  double t32149;
  double t32207;
  double t32211;
  double t32212;
  double t22906;
  double t22910;
  double t23301;
  double t32214;
  double t32238;
  double t25089;
  double t25139;
  double t25206;
  double t29808;
  double t30007;
  double t32547;
  double t32604;
  double t29851;
  double t29853;
  double t29854;
  double t32720;
  double t32774;
  double t30009;
  double t30016;
  double t30021;
  double t30965;
  double t31296;
  double t36666;
  double t30972;
  double t31010;
  double t31052;
  double t38466;
  double t38683;
  double t31300;
  double t31301;
  double t31333;
  double t31945;
  double t32188;
  double t39307;
  double t39308;
  double t39309;
  double t39331;
  double t39332;
  double t39410;
  double t39412;
  double t39414;
  double t31946;
  double t31955;
  double t39324;
  double t39333;
  double t39390;
  double t39392;
  double t32203;
  double t32204;
  double t39428;
  double t39429;
  double t39433;
  double t39437;
  double t39438;
  double t39481;
  double t39501;
  double t39515;
  double t39540;
  double t39566;
  double t39573;
  double t39585;
  double t39598;
  double t39605;
  double t39642;
  double t39708;
  double t39764;
  double t32665;
  double t32655;
  double t40165;
  double t40171;
  double t40176;
  double t41975;
  double t42001;
  double t32659;
  double t32662;
  double t43040;
  double t43046;
  double t32680;
  double t32698;
  double t43123;
  double t43126;
  double t39398;
  double t39399;
  double t39405;
  double t43137;
  double t43138;
  double t40317;
  double t40608;
  double t40967;
  double t35768;
  double t39209;
  double t35796;
  double t36094;
  double t43195;
  double t43197;
  double t39430;
  double t43201;
  double t43203;
  double t39210;
  double t39211;
  double t43258;
  double t43274;
  double t44498;
  double t44513;
  double t39289;
  double t39299;
  double t46571;
  double t46705;
  double t46848;
  double t47127;
  double t47138;
  double t20284;
  double t20289;
  double t20291;
  double t47007;
  double t47008;
  double t47058;
  double t47074;
  double t46918;
  double t47109;
  double t47153;
  double t48115;
  double t48117;
  double t48118;
  double t47647;
  double t47661;
  double t47690;
  double t48025;
  double t48028;
  double t48106;
  double t48162;
  double t48177;
  double t48223;
  double t48122;
  double t48144;
  double t48250;
  double t48332;
  double t48337;
  double t48343;
  double t48352;
  double t48357;
  double t48374;
  double t48389;
  double t48413;
  double t48438;
  double t43025;
  double t43027;
  double t43033;
  double t43058;
  double t43059;
  double t43060;
  double t47266;
  double t39346;
  double t39351;
  double t50923;
  double t50924;
  double t50947;
  double t50943;
  double t50902;
  double t50926;
  double t51117;
  double t51146;
  double t51202;
  double t49329;
  double t49335;
  double t49337;
  double t43191;
  double t43192;
  double t52152;
  double t53296;
  double t53324;
  double t56752;
  double t56912;
  double t56993;
  double t57604;
  double t57704;
  double t57721;
  double t58980;
  double t58999;
  double t59014;
  double t59056;
  double t59061;
  double t59062;
  double t59079;
  double t59088;
  double t59094;
  double t57204;
  double t57377;
  double t57832;
  double t59562;
  double t59575;
  double t59581;
  double t59414;
  double t59536;
  double t59542;
  double t59587;
  double t59608;
  double t59668;
  double t59672;
  double t59679;
  double t59681;
  double t59682;
  double t59688;
  double t43207;
  double t43208;
  double t50985;
  double t50991;
  double t51075;
  double t51079;
  double t59854;
  double t59865;
  double t59872;
  double t59866;
  double t59869;
  double t59858;
  double t59998;
  double t60003;
  double t58965;
  double t59016;
  double t59041;
  double t60009;
  double t20101;
  double t20103;
  double t20109;
  double t60096;
  double t60101;
  double t60132;
  double t60135;
  double t60145;
  t17352 = Cos(var1[16]);
  t8624 = Cos(var1[17]);
  t10916 = Sin(var1[16]);
  t17566 = Sin(var1[17]);
  t16322 = t8624*t10916;
  t17584 = -1.*t17352*t17566;
  t17637 = t16322 + t17584;
  t4536 = Cos(var1[5]);
  t17879 = t17352*t8624;
  t18009 = t10916*t17566;
  t18068 = t17879 + t18009;
  t6746 = Sin(var1[15]);
  t18070 = Sin(var1[5]);
  t18248 = Cos(var1[3]);
  t17878 = -1.*t4536*t6746*t17637;
  t18119 = t18068*t18070;
  t18140 = t17878 + t18119;
  t1163 = Sin(var1[3]);
  t18462 = Cos(var1[15]);
  t18555 = Cos(var1[4]);
  t18627 = t18462*t18555*t17637;
  t18742 = Sin(var1[4]);
  t18914 = t4536*t18068;
  t20061 = t6746*t17637*t18070;
  t20079 = t18914 + t20061;
  t20080 = -1.*t18742*t20079;
  t20082 = t18627 + t20080;
  t20133 = t18555*t6746;
  t20134 = t18462*t18742*t18070;
  t20135 = t20133 + t20134;
  t20212 = -1.*t8624*t10916;
  t20220 = t17352*t17566;
  t20223 = t20212 + t20220;
  t20211 = -1.*t4536*t6746*t18068;
  t20224 = t20223*t18070;
  t20225 = t20211 + t20224;
  t20230 = t18462*t18555*t18068;
  t20238 = t4536*t20223;
  t20243 = t6746*t18068*t18070;
  t20250 = t20238 + t20243;
  t20263 = -1.*t18742*t20250;
  t20269 = t20230 + t20263;
  t20325 = -1.*t18462*t17637*t18742;
  t20333 = -1.*t18555*t20079;
  t20339 = t20325 + t20333;
  t20443 = -0.0641*t8624;
  t20444 = -0.28*t17566;
  t20452 = t20443 + t20444;
  t20560 = -1.*t8624;
  t20573 = 1. + t20560;
  t20609 = -0.575*t20573;
  t20726 = -0.295*t8624;
  t20858 = -0.0641*t17566;
  t20916 = t20609 + t20726 + t20858;
  t20409 = 0.325*t10916;
  t20528 = t17352*t20452;
  t20989 = t10916*t20916;
  t20991 = t20409 + t20528 + t20989;
  t20401 = -0.068*t6746;
  t21001 = t18462*t20991;
  t21133 = t20401 + t21001;
  t21182 = -1.*t17352;
  t21203 = 1. + t21182;
  t21216 = -0.325*t21203;
  t21256 = -1.*t10916*t20452;
  t21259 = t17352*t20916;
  t21264 = t21216 + t21256 + t21259;
  t21266 = t4536*t21264;
  t21270 = -1.*t18462;
  t21297 = 1. + t21270;
  t21317 = -0.1575*t21297;
  t21325 = -0.2255*t18462;
  t21357 = -1.*t6746*t20991;
  t21358 = t21317 + t21325 + t21357;
  t21375 = -1.*t21358*t18070;
  t21382 = t21266 + t21375;
  t21700 = t18555*t21133;
  t21769 = -1.*t18742*t21382;
  t21804 = t21700 + t21769;
  t21572 = t6746*t18742;
  t21657 = -1.*t18462*t18555*t18070;
  t21687 = t21572 + t21657;
  t21397 = t21133*t18742;
  t21406 = t18555*t21382;
  t21415 = t21397 + t21406;
  t20365 = t18462*t18068*t18742;
  t20367 = t18555*t20250;
  t20397 = t20365 + t20367;
  t21171 = -1.*t21133*t18742;
  t21383 = -1.*t18555*t21382;
  t21388 = t21171 + t21383;
  t22439 = t4536*t21358;
  t22683 = t21264*t18070;
  t22697 = t22439 + t22683;
  t21907 = -1.*t6746*t18742;
  t21971 = t18462*t18555*t18070;
  t22272 = t21907 + t21971;
  t27233 = t18462*t17637*t18742;
  t27672 = t18555*t20079;
  t27684 = t27233 + t27672;
  t24323 = -1.*t18462*t18068*t18742;
  t24401 = -1.*t18555*t20250;
  t24423 = t24323 + t24401;
  t31448 = t4536*t6746*t17637;
  t31564 = -1.*t18068*t18070;
  t31571 = t31448 + t31564;
  t22844 = -1.*t18462*t4536*t22697;
  t25062 = t22697*t20225;
  t31968 = -1.*t4536*t21358;
  t31970 = -1.*t21264*t18070;
  t31974 = t31968 + t31970;
  t32149 = t18462*t18070*t22697;
  t32207 = t4536*t6746*t18068;
  t32211 = -1.*t20223*t18070;
  t32212 = t32207 + t32211;
  t22906 = -1.*t21687*t21415;
  t22910 = -1.*t20135*t21804;
  t23301 = t22844 + t22906 + t22910;
  t32214 = t21382*t20225;
  t32238 = t22697*t20250;
  t25089 = t21415*t20397;
  t25139 = t21804*t20269;
  t25206 = t25062 + t25089 + t25139;
  t29808 = t22697*t18140;
  t30007 = -1.*t22697*t20225;
  t32547 = t22697*t20079;
  t32604 = t21382*t18140;
  t29851 = t21415*t27684;
  t29853 = t21804*t20082;
  t29854 = t29808 + t29851 + t29853;
  t32720 = -1.*t21382*t20225;
  t32774 = -1.*t22697*t20250;
  t30009 = -1.*t21415*t20397;
  t30016 = -1.*t21804*t20269;
  t30021 = t30007 + t30009 + t30016;
  t30965 = t18462*t4536*t22697;
  t31296 = -1.*t22697*t18140;
  t36666 = -1.*t18462*t18070*t22697;
  t30972 = t21687*t21415;
  t31010 = t20135*t21804;
  t31052 = t30965 + t30972 + t31010;
  t38466 = -1.*t22697*t20079;
  t38683 = -1.*t21382*t18140;
  t31300 = -1.*t21415*t27684;
  t31301 = -1.*t21804*t20082;
  t31333 = t31296 + t31300 + t31301;
  t31945 = -1.*t6746*t21133;
  t32188 = t18462*t21133*t18068;
  t39307 = 0.068*t6746;
  t39308 = -1.*t18462*t20991;
  t39309 = t39307 + t39308;
  t39331 = -0.068*t18462;
  t39332 = t39331 + t21357;
  t39410 = -1.*t18555*t6746*t17637;
  t39412 = -1.*t18462*t17637*t18742*t18070;
  t39414 = t39410 + t39412;
  t31946 = t18462*t18070*t21382;
  t31955 = t31945 + t31946 + t22844;
  t39324 = -1.*t18462*t21133;
  t39333 = -1.*t6746*t39332;
  t39390 = -1.*t6746*t21133*t18068;
  t39392 = t18462*t39332*t18068;
  t32203 = t21382*t20250;
  t32204 = t32188 + t25062 + t32203;
  t39428 = Power(t4536,2);
  t39429 = -1.*t18462*t39428*t39309;
  t39433 = t4536*t6746*t22697;
  t39437 = -1.*t18462*t4536*t18068*t22697;
  t39438 = t4536*t39309*t20225;
  t39481 = -1.*t6746*t18068*t18742;
  t39501 = t18462*t18555*t18068*t18070;
  t39515 = t39481 + t39501;
  t39540 = t39332*t18742;
  t39566 = -1.*t18555*t39309*t18070;
  t39573 = t39540 + t39566;
  t39585 = t18555*t39332;
  t39598 = t39309*t18742*t18070;
  t39605 = t39585 + t39598;
  t39642 = t18462*t18742;
  t39708 = t18555*t6746*t18070;
  t39764 = t39642 + t39708;
  t32665 = -1.*t18462*t21133*t18068;
  t32655 = t18462*t21133*t17637;
  t40165 = t18462*t18555;
  t40171 = -1.*t6746*t18742*t18070;
  t40176 = t40165 + t40171;
  t41975 = -1.*t6746*t21133*t17637;
  t42001 = t18462*t39332*t17637;
  t32659 = t21382*t20079;
  t32662 = t32655 + t32659 + t29808;
  t43040 = t6746*t21133*t18068;
  t43046 = -1.*t18462*t39332*t18068;
  t32680 = -1.*t21382*t20250;
  t32698 = t32665 + t30007 + t32680;
  t43123 = -1.*t18462*t4536*t17637*t22697;
  t43126 = t4536*t39309*t18140;
  t39398 = -1.*t6746*t17637*t18742;
  t39399 = t18462*t18555*t17637*t18070;
  t39405 = t39398 + t39399;
  t43137 = t18462*t4536*t18068*t22697;
  t43138 = -1.*t4536*t39309*t20225;
  t40317 = -1.*t18555*t6746*t18068;
  t40608 = -1.*t18462*t18068*t18742*t18070;
  t40967 = t40317 + t40608;
  t35768 = t6746*t21133;
  t39209 = -1.*t18462*t21133*t17637;
  t35796 = -1.*t18462*t18070*t21382;
  t36094 = t35768 + t35796 + t30965;
  t43195 = t18462*t21133;
  t43197 = t6746*t39332;
  t39430 = Power(t18070,2);
  t43201 = t6746*t21133*t17637;
  t43203 = -1.*t18462*t39332*t17637;
  t39210 = -1.*t21382*t20079;
  t39211 = t39209 + t39210 + t31296;
  t43258 = t18462*t39428*t39309;
  t43274 = -1.*t4536*t6746*t22697;
  t44498 = t18462*t4536*t17637*t22697;
  t44513 = -1.*t4536*t39309*t18140;
  t39289 = -1.*t18462*t21358;
  t39299 = t31945 + t39289;
  t46571 = -1.*t17352*t8624;
  t46705 = -1.*t10916*t17566;
  t46848 = t46571 + t46705;
  t47127 = 0.325*t17352;
  t47138 = t47127 + t21256 + t21259;
  t20284 = t18248*t20225;
  t20289 = -1.*t1163*t20269;
  t20291 = t20284 + t20289;
  t47007 = -0.325*t10916;
  t47008 = -1.*t17352*t20452;
  t47058 = -1.*t10916*t20916;
  t47074 = t47007 + t47008 + t47058;
  t46918 = t18462*t21133*t20223;
  t47109 = Power(t18462,2);
  t47153 = t47109*t47138*t18068;
  t48115 = -1.*t4536*t6746*t47138;
  t48117 = t47074*t18070;
  t48118 = t48115 + t48117;
  t47647 = -1.*t4536*t6746*t20223;
  t47661 = t46848*t18070;
  t47690 = t47647 + t47661;
  t48025 = t4536*t47074;
  t48028 = t6746*t47138*t18070;
  t48106 = t48025 + t48028;
  t48162 = t4536*t46848;
  t48177 = t6746*t20223*t18070;
  t48223 = t48162 + t48177;
  t48122 = -1.*t18462*t4536*t48118;
  t48144 = t48118*t20225;
  t48250 = t22697*t47690;
  t48332 = t18462*t20223*t18742;
  t48337 = t18555*t48223;
  t48343 = t48332 + t48337;
  t48352 = t18462*t47138*t18742;
  t48357 = t18555*t48106;
  t48374 = t48352 + t48357;
  t48389 = t18462*t18555*t47138;
  t48413 = -1.*t18742*t48106;
  t48438 = t48389 + t48413;
  t43025 = -1.*t21264*t20223;
  t43027 = t6746*t21358*t18068;
  t43033 = t43025 + t32665 + t43027;
  t43058 = -1.*t6746*t21358*t17637;
  t43059 = t21264*t18068;
  t43060 = t32655 + t43058 + t43059;
  t47266 = Power(t6746,2);
  t39346 = t21264*t20223;
  t39351 = -1.*t6746*t21358*t18068;
  t50923 = -1.*t47074*t20223;
  t50924 = -1.*t21264*t46848;
  t50947 = t47074*t18068;
  t50943 = t47109*t47138*t17637;
  t50902 = -1.*t18462*t21133*t20223;
  t50926 = -1.*t47109*t47138*t18068;
  t51117 = t48118*t18140;
  t51146 = -1.*t48118*t20225;
  t51202 = -1.*t22697*t47690;
  t49329 = t18462*t18555*t20223;
  t49335 = -1.*t18742*t48223;
  t49337 = t49329 + t49335;
  t43191 = t18462*t21358;
  t43192 = t35768 + t43191;
  t52152 = -1.*t47109*t47138*t17637;
  t53296 = t18462*t4536*t48118;
  t53324 = -1.*t48118*t18140;
  t56752 = -0.28*t8624;
  t56912 = 0.0641*t17566;
  t56993 = t56752 + t56912;
  t57604 = t10916*t20452;
  t57704 = t17352*t56993;
  t57721 = t57604 + t57704;
  t58980 = t4536*t17637;
  t58999 = t6746*t46848*t18070;
  t59014 = t58980 + t58999;
  t59056 = -1.*t4536*t6746*t46848;
  t59061 = t17637*t18070;
  t59062 = t59056 + t59061;
  t59079 = t18462*t18555*t46848;
  t59088 = -1.*t18742*t59014;
  t59094 = t59079 + t59088;
  t57204 = -1.*t10916*t56993;
  t57377 = t20528 + t57204;
  t57832 = t47109*t57721*t18068;
  t59562 = -1.*t4536*t6746*t57721;
  t59575 = t57377*t18070;
  t59581 = t59562 + t59575;
  t59414 = t4536*t57377;
  t59536 = t6746*t57721*t18070;
  t59542 = t59414 + t59536;
  t59587 = -1.*t18462*t4536*t59581;
  t59608 = t59581*t20225;
  t59668 = t18462*t57721*t18742;
  t59672 = t18555*t59542;
  t59679 = t59668 + t59672;
  t59681 = t18462*t18555*t57721;
  t59682 = -1.*t18742*t59542;
  t59688 = t59681 + t59682;
  t43207 = t6746*t21358*t17637;
  t43208 = -1.*t21264*t18068;
  t50985 = t20991*t17637;
  t50991 = t50985 + t43059;
  t51075 = -1.*t20991*t18068;
  t51079 = t43025 + t51075;
  t59854 = -1.*t57377*t20223;
  t59865 = t21264*t17637;
  t59872 = t57377*t18068;
  t59866 = t47109*t57721*t17637;
  t59869 = t18462*t21133*t46848;
  t59858 = -1.*t47109*t57721*t18068;
  t59998 = t22697*t59062;
  t60003 = t59581*t18140;
  t58965 = t18462*t46848*t18742;
  t59016 = t18555*t59014;
  t59041 = t58965 + t59016;
  t60009 = -1.*t59581*t20225;
  t20101 = t18248*t18140;
  t20103 = -1.*t1163*t20082;
  t20109 = t20101 + t20103;
  t60096 = -1.*t47109*t57721*t17637;
  t60101 = -1.*t18462*t21133*t46848;
  t60132 = t18462*t4536*t59581;
  t60135 = -1.*t22697*t59062;
  t60145 = -1.*t59581*t18140;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=(-1.*t1163*t18140 - 1.*t18248*t20082)*var2[1] + t20109*var2[2];
  p_output1[10]=(-1.*t18248*t20135 - 1.*t1163*t18462*t4536)*var2[1] + (-1.*t1163*t20135 + t18248*t18462*t4536)*var2[2];
  p_output1[11]=(-1.*t1163*t20225 - 1.*t18248*t20269)*var2[1] + t20291*var2[2];
  p_output1[12]=t20082*var2[0] - 1.*t1163*t20339*var2[1] + t18248*t20339*var2[2] + (t20397*(-1.*t20135*t21388 - 1.*t20135*t21415 - 1.*t21687*t21804 - 1.*t21804*t22272) + t20269*t23301 + t21687*(t20269*t21388 + t20269*t21415 + t20397*t21804 + t21804*t24423) + t20135*t25206)*var2[3];
  p_output1[13]=t20135*var2[0] - 1.*t1163*t22272*var2[1] + t18248*t22272*var2[2] + ((-1.*t20269*t21388 - 1.*t20269*t21415 - 1.*t20397*t21804 - 1.*t21804*t24423)*t27684 + t20397*(t20082*t21388 + t20082*t21415 + t20339*t21804 + t21804*t27684) + t20269*t29854 + t20082*t30021)*var2[3];
  p_output1[14]=t20269*var2[0] - 1.*t1163*t24423*var2[1] + t18248*t24423*var2[2] + ((t20135*t21388 + t20135*t21415 + t21687*t21804 + t21804*t22272)*t27684 + t21687*(-1.*t20082*t21388 - 1.*t20082*t21415 - 1.*t20339*t21804 - 1.*t21804*t27684) + t20082*t31052 + t20135*t31333)*var2[3];
  p_output1[15]=t18555*t31571*var2[0] + (t18248*t20079 + t1163*t18742*t31571)*var2[1] + (t1163*t20079 - 1.*t18248*t18742*t31571)*var2[2] + (t18555*t23301*t32212 + t21687*(-1.*t18742*t20269*t31974 + t18555*t20397*t31974 + t18555*t21415*t32212 - 1.*t18742*t21804*t32212 + t32214 + t32238) - 1.*t18462*t18555*t25206*t4536 + t20397*(t18742*t20135*t31974 - 1.*t18555*t21687*t31974 + t32149 - 1.*t18462*t21382*t4536 + t18462*t18555*t21415*t4536 - 1.*t18462*t18742*t21804*t4536))*var2[3] + (t20250*t31955 + t20225*(t18070*t18462*t31974 + t32149) - 1.*t18070*t18462*t32204 + t18462*(t20250*t31974 + t21382*t32212 + t32214 + t32238)*t4536)*var2[4];
  p_output1[16]=-1.*t18462*t18555*t4536*var2[0] + (-1.*t18070*t18248*t18462 - 1.*t1163*t18462*t18742*t4536)*var2[1] + (-1.*t1163*t18070*t18462 + t18248*t18462*t18742*t4536)*var2[2] + (t18555*t30021*t31571 + t18555*t29854*t32212 + t20397*(t18555*t21415*t31571 - 1.*t18742*t21804*t31571 - 1.*t18742*t20082*t31974 + t18555*t27684*t31974 + t32547 + t32604) + t27684*(t18742*t20269*t31974 - 1.*t18555*t20397*t31974 - 1.*t18555*t21415*t32212 + t18742*t21804*t32212 + t32720 + t32774))*var2[3] + (t20225*(t21382*t31571 + t20079*t31974 + t32547 + t32604) + t20250*t32662 + t20079*t32698 + t18140*(-1.*t20250*t31974 - 1.*t21382*t32212 + t32720 + t32774))*var2[4];
  p_output1[17]=t18555*t32212*var2[0] + (t18248*t20250 + t1163*t18742*t32212)*var2[1] + (t1163*t20250 - 1.*t18248*t18742*t32212)*var2[2] + (t18555*t31052*t31571 + t21687*(-1.*t18555*t21415*t31571 + t18742*t21804*t31571 + t18742*t20082*t31974 - 1.*t18555*t27684*t31974 + t38466 + t38683) - 1.*t18462*t18555*t31333*t4536 + t27684*(-1.*t18742*t20135*t31974 + t18555*t21687*t31974 + t36666 + t18462*t21382*t4536 - 1.*t18462*t18555*t21415*t4536 + t18462*t18742*t21804*t4536))*var2[3] + (t20079*t36094 + t18140*(-1.*t18070*t18462*t31974 + t36666) - 1.*t18070*t18462*t39211 + t18462*(-1.*t21382*t31571 - 1.*t20079*t31974 + t38466 + t38683)*t4536)*var2[4];
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=t39405*var2[0] + (-1.*t1163*t39414 - 1.*t17637*t18248*t18462*t4536)*var2[1] + (t18248*t39414 - 1.*t1163*t17637*t18462*t4536)*var2[2] + (t23301*t39515 + t25206*t39764 + t20397*(t39429 + t39433 - 1.*t21687*t39573 - 1.*t20135*t39605 - 1.*t21415*t39764 - 1.*t21804*t40176) + t21687*(t39437 + t39438 + t21415*t39515 + t20397*t39573 + t20269*t39605 + t21804*t40967))*var2[3] + (-1.*t18068*t18462*t31955*t4536 + t18462*(t18068*t18070*t18462*t21382 - 1.*t18070*t20250*t39309 + t39390 + t39392 + t39437 + t39438)*t4536 - 1.*t32204*t4536*t6746 + t20225*(t39324 + t39333 + t39429 - 1.*t18462*t39309*t39430 + t39433 - 1.*t18070*t21382*t6746))*var2[4] + (t18462*(t32188 + t39346 + t39351) - 1.*t18068*t39299*t6746 + t18068*t18462*(-1.*t18462*t39309 + t39324 + t39333 + t21358*t6746) + t6746*(-1.*t18068*t18462*t21358 + t39390 + t39392 - 1.*t18068*t39309*t6746))*var2[5];
  p_output1[46]=t39764*var2[0] + (-1.*t1163*t40176 - 1.*t18248*t4536*t6746)*var2[1] + (t18248*t40176 - 1.*t1163*t4536*t6746)*var2[2] + (t30021*t39405 + t29854*t39515 + t20397*(t21415*t39405 + t21804*t39414 + t27684*t39573 + t20082*t39605 + t43123 + t43126) + t27684*(-1.*t21415*t39515 - 1.*t20397*t39573 - 1.*t20269*t39605 - 1.*t21804*t40967 + t43137 + t43138))*var2[3] + (t20225*(t17637*t18070*t18462*t21382 - 1.*t18070*t20079*t39309 + t41975 + t42001 + t43123 + t43126) + t18140*(-1.*t18068*t18070*t18462*t21382 + t18070*t20250*t39309 + t43040 + t43046 + t43137 + t43138) - 1.*t18068*t18462*t32662*t4536 - 1.*t17637*t18462*t32698*t4536)*var2[4] + (-1.*t17637*t43033*t6746 - 1.*t18068*t43060*t6746 + t18068*t18462*(-1.*t17637*t18462*t21358 + t41975 + t42001 - 1.*t17637*t39309*t6746) + t17637*t18462*(t18068*t18462*t21358 + t43040 + t43046 + t18068*t39309*t6746))*var2[5];
  p_output1[47]=t39515*var2[0] + (-1.*t1163*t40967 - 1.*t18068*t18248*t18462*t4536)*var2[1] + (t18248*t40967 - 1.*t1163*t18068*t18462*t4536)*var2[2] + (t31052*t39405 + t31333*t39764 + t27684*(t21687*t39573 + t20135*t39605 + t21415*t39764 + t21804*t40176 + t43258 + t43274) + t21687*(-1.*t21415*t39405 - 1.*t21804*t39414 - 1.*t27684*t39573 - 1.*t20082*t39605 + t44498 + t44513))*var2[3] + (-1.*t17637*t18462*t36094*t4536 + t18462*(-1.*t17637*t18070*t18462*t21382 + t18070*t20079*t39309 + t43201 + t43203 + t44498 + t44513)*t4536 - 1.*t39211*t4536*t6746 + t18140*(t18462*t39309*t39430 + t43195 + t43197 + t43258 + t43274 + t18070*t21382*t6746))*var2[4] + (t18462*(t39209 + t43207 + t43208) - 1.*t17637*t43192*t6746 + t17637*t18462*(t18462*t39309 + t43195 + t43197 - 1.*t21358*t6746) + t6746*(t17637*t18462*t21358 + t43201 + t43203 + t17637*t39309*t6746))*var2[5];
  p_output1[48]=t20397*var2[0] + t20291*var2[1] + (t1163*t20225 + t18248*t20269)*var2[2] + (t23301*t48343 + t20397*(t48122 - 1.*t21687*t48374 - 1.*t20135*t48438) + t21687*(t48144 + t48250 + t21415*t48343 + t20397*t48374 + t20269*t48438 + t21804*t49337))*var2[3] + (t31955*t47690 + t18462*t4536*(t46918 + t47153 + t20250*t48106 + t48144 + t21382*t48223 + t48250) + t20225*(t18070*t18462*t48106 + t48122 - 1.*t18462*t47138*t6746))*var2[4] + (t18462*t20223*t39299 + t6746*(t21264*t46848 + t46918 + t20223*t47074 + t47153 + t18068*t47138*t47266 - 1.*t20223*t21358*t6746))*var2[5] + (0.1575*t18068 + 0.2255*t46848)*var2[15];
  p_output1[49]=(t20397*t30021 + t29854*t48343 + t20397*(t25062 + t25089 + t25139 + t27684*t48374 + t20082*t48438 + t51117) + t27684*(-1.*t21415*t48343 - 1.*t20397*t48374 - 1.*t20269*t48438 - 1.*t21804*t49337 + t51146 + t51202))*var2[3] + (t20225*t32698 + t32662*t47690 + t20225*(t25062 + t32188 + t32203 + t20079*t48106 + t50943 + t51117) + t18140*(-1.*t20250*t48106 - 1.*t21382*t48223 + t50902 + t50926 + t51146 + t51202))*var2[4] + (t18068*t18462*t43033 + t18462*t20223*t43060 + t18068*t18462*(t32188 + t39346 + t39351 + t17637*t47138*t47266 + t50943 + t50947) + t17637*t18462*(-1.*t18068*t47138*t47266 + t50902 + t50923 + t50924 + t50926 + t20223*t21358*t6746))*var2[5] + (t18068*(-1.*t20223*t20991 - 1.*t18068*t47138 + t50923 + t50924) + t20223*(t18068*t20991 + t39346 + t17637*t47138 + t50947) + t46848*t50991 + t20223*t51079)*var2[15];
  p_output1[50]=t48343*var2[0] + (t18248*t47690 - 1.*t1163*t49337)*var2[1] + (t1163*t47690 + t18248*t49337)*var2[2] + (t20397*t31052 + t27684*(t21687*t48374 + t20135*t48438 + t53296) + t21687*(t30007 + t30009 + t30016 - 1.*t27684*t48374 - 1.*t20082*t48438 + t53324))*var2[3] + (t20225*t36094 + t18462*t4536*(t30007 + t32665 + t32680 - 1.*t20079*t48106 + t52152 + t53324) + t18140*(-1.*t18070*t18462*t48106 + t53296 + t18462*t47138*t6746))*var2[4] + (t18068*t18462*t43192 + (t32665 + t43025 + t43027 - 1.*t18068*t47074 - 1.*t17637*t47138*t47266 + t52152)*t6746)*var2[5] - 0.068*t20223*var2[15];
  p_output1[51]=t59041*var2[0] + (t18248*t59062 - 1.*t1163*t59094)*var2[1] + (t1163*t59062 + t18248*t59094)*var2[2] + (t23301*t27684 + t20397*(t59587 - 1.*t21687*t59679 - 1.*t20135*t59688) + t21687*(t29808 + t29851 + t29853 + t59608 + t20397*t59679 + t20269*t59688))*var2[3] + (t18140*t31955 + t18462*t4536*(t29808 + t32655 + t32659 + t57832 + t20250*t59542 + t59608) + t20225*(t18070*t18462*t59542 + t59587 - 1.*t18462*t57721*t6746))*var2[4] + (t17637*t18462*t39299 + (t32655 + t43058 + t43059 + t20223*t57377 + t18068*t47266*t57721 + t57832)*t6746)*var2[5] + (0.2255*t18068 + 0.1575*t46848)*var2[15] + (-0.325*t8624 - 1.*t20916*t8624 - 1.*t56993*t8624)*var2[16];
  p_output1[52]=(t27684*t29854 + t30021*t59041 + t20397*(t21415*t59041 + t21804*t59094 + t27684*t59679 + t20082*t59688 + t59998 + t60003) + t27684*(t31296 + t31300 + t31301 - 1.*t20397*t59679 - 1.*t20269*t59688 + t60009))*var2[3] + (t18140*t32662 + t32698*t59062 + t20225*(t21382*t59014 + t20079*t59542 + t59866 + t59869 + t59998 + t60003) + t18140*(t31296 + t39209 + t39210 - 1.*t20250*t59542 + t59858 + t60009))*var2[4] + (t17637*t18462*t43060 + t18462*t43033*t46848 + t17637*t18462*(t39209 + t43207 + t43208 - 1.*t18068*t47266*t57721 + t59854 + t59858) + t18068*t18462*(t17637*t47266*t57721 + t59865 + t59866 + t59869 + t59872 - 1.*t21358*t46848*t6746))*var2[5] + (t18068*t50991 + t17637*t51079 + t18068*(-1.*t17637*t20991 + t43208 - 1.*t18068*t57721 + t59854) + t20223*(t20991*t46848 + t17637*t57721 + t59865 + t59872))*var2[15];
  p_output1[53]=t27684*var2[0] + t20109*var2[1] + (t1163*t18140 + t18248*t20082)*var2[2] + (t31052*t59041 + t27684*(t21687*t59679 + t20135*t59688 + t60132) + t21687*(-1.*t21415*t59041 - 1.*t21804*t59094 - 1.*t27684*t59679 - 1.*t20082*t59688 + t60135 + t60145))*var2[3] + (t36094*t59062 + t18462*t4536*(-1.*t21382*t59014 - 1.*t20079*t59542 + t60096 + t60101 + t60135 + t60145) + t18140*(-1.*t18070*t18462*t59542 + t60132 + t18462*t57721*t6746))*var2[4] + (t18462*t43192*t46848 + t6746*(-1.*t17637*t21264 - 1.*t18068*t57377 - 1.*t17637*t47266*t57721 + t60096 + t60101 + t21358*t46848*t6746))*var2[5] - 0.068*t17637*var2[15] + (-0.325*t17566 - 1.*t17566*t20916 - 1.*t17566*t56993)*var2[16];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 18, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "dJh_RrFoot_ParallelStance.hh"

namespace SymFunction
{

void dJh_RrFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
