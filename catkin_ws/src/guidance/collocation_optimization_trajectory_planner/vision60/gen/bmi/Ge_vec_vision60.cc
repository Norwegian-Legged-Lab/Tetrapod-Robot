/*
 * Automatically Generated from Mathematica.
 * Tue 7 Jun 2022 14:10:35 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t1088;
  double t1677;
  double t1220;
  double t1314;
  double t2692;
  double t1008;
  double t1074;
  double t13908;
  double t19416;
  double t20003;
  double t20228;
  double t1510;
  double t6918;
  double t13447;
  double t22113;
  double t41930;
  double t13694;
  double t42574;
  double t42577;
  double t1177;
  double t18595;
  double t18815;
  double t20348;
  double t20545;
  double t20916;
  double t20987;
  double t42588;
  double t42594;
  double t42595;
  double t42596;
  double t42597;
  double t22314;
  double t42563;
  double t42564;
  double t42565;
  double t42567;
  double t42568;
  double t42569;
  double t42606;
  double t42612;
  double t42613;
  double t42614;
  double t42616;
  double t42576;
  double t42578;
  double t42579;
  double t42580;
  double t42581;
  double t42582;
  double t42584;
  double t42626;
  double t42829;
  double t42830;
  double t42832;
  double t42833;
  double t42589;
  double t42590;
  double t42592;
  double t42593;
  double t42598;
  double t42600;
  double t42601;
  double t42602;
  double t42843;
  double t42844;
  double t42845;
  double t42846;
  double t42848;
  double t42608;
  double t42609;
  double t42610;
  double t42611;
  double t42617;
  double t42618;
  double t42619;
  double t42620;
  double t42860;
  double t42861;
  double t42862;
  double t42864;
  double t42866;
  double t42627;
  double t42635;
  double t42827;
  double t42828;
  double t42835;
  double t42836;
  double t42837;
  double t42838;
  double t42878;
  double t42879;
  double t42880;
  double t42881;
  double t42884;
  double t22344;
  double t43064;
  double t43069;
  double t43066;
  double t43067;
  double t43068;
  double t43070;
  double t43071;
  double t43072;
  double t43073;
  double t43078;
  double t43084;
  double t43085;
  double t43086;
  double t43088;
  double t43079;
  double t43080;
  double t43081;
  double t43082;
  double t43089;
  double t43091;
  double t43092;
  double t43093;
  double t43097;
  double t43102;
  double t43103;
  double t43104;
  double t43105;
  double t43115;
  double t43116;
  double t43117;
  double t43119;
  double t43120;
  double t43121;
  double t43147;
  double t43149;
  double t43150;
  double t43126;
  double t43128;
  double t43129;
  double t43130;
  double t43131;
  double t43162;
  double t43163;
  double t43166;
  double t43135;
  double t43137;
  double t43138;
  double t43139;
  double t43140;
  double t43180;
  double t43182;
  double t43198;
  double t43144;
  double t43145;
  double t43151;
  double t42849;
  double t42851;
  double t43152;
  double t43153;
  double t43154;
  double t43402;
  double t43405;
  double t43412;
  double t43159;
  double t43160;
  double t43168;
  double t42867;
  double t42868;
  double t43169;
  double t43171;
  double t43173;
  double t43459;
  double t43460;
  double t43461;
  double t43178;
  double t43179;
  double t43244;
  double t42885;
  double t42886;
  double t43320;
  double t43369;
  double t43376;
  double t43470;
  double t43471;
  double t43472;
  double t43125;
  double t43481;
  double t43482;
  double t43483;
  double t43484;
  double t43485;
  double t43493;
  double t43494;
  double t43495;
  double t43490;
  double t43492;
  double t43496;
  double t43098;
  double t43100;
  double t43497;
  double t43498;
  double t43500;
  double t43506;
  double t43508;
  double t43509;
  double t43521;
  double t43522;
  double t43523;
  double t43527;
  double t43528;
  double t43530;
  double t43531;
  double t43543;
  double t43524;
  double t43540;
  double t43535;
  double t43552;
  double t43554;
  double t43555;
  double t43556;
  double t43558;
  double t43559;
  double t43585;
  double t43586;
  double t43587;
  double t43564;
  double t43566;
  double t43567;
  double t43568;
  double t43570;
  double t43571;
  double t43729;
  double t43731;
  double t43732;
  double t43575;
  double t43576;
  double t43577;
  double t43578;
  double t43579;
  double t43580;
  double t43745;
  double t43746;
  double t43747;
  double t43547;
  double t43756;
  double t43758;
  double t43759;
  double t43760;
  double t43761;
  double t43763;
  double t43769;
  double t43770;
  double t43771;
  double t43782;
  double t43783;
  double t43784;
  double t43786;
  double t43787;
  double t43792;
  double t43795;
  double t43797;
  double t43798;
  double t43813;
  double t43814;
  double t43815;
  double t43812;
  double t43816;
  double t43817;
  double t43818;
  double t43820;
  double t43825;
  double t43826;
  double t43827;
  double t43897;
  double t43902;
  double t43903;
  double t43911;
  double t43912;
  double t43913;
  double t43914;
  double t43916;
  double t43927;
  double t43928;
  double t43929;
  double t43924;
  double t43944;
  double t43945;
  double t43946;
  double t43947;
  double t43948;
  double t43953;
  double t43954;
  double t43955;
  double t43969;
  double t43970;
  double t43971;
  double t43980;
  double t43981;
  double t43982;
  double t43983;
  double t43984;
  double t43991;
  double t43992;
  double t43994;
  double t43985;
  double t44005;
  double t44006;
  double t44007;
  double t44008;
  double t44009;
  double t44015;
  double t44016;
  double t44017;
  double t44028;
  double t44029;
  double t44030;
  double t44038;
  double t44039;
  double t44040;
  double t44041;
  double t44042;
  double t44050;
  double t44051;
  double t44052;
  double t44043;
  double t44063;
  double t44065;
  double t44066;
  double t44067;
  double t44068;
  double t44073;
  double t44074;
  double t44075;
  double t44086;
  double t44087;
  double t44088;
  t1088 = Sin(var1[3]);
  t1677 = Cos(var1[3]);
  t1220 = Cos(var1[5]);
  t1314 = Sin(var1[4]);
  t2692 = Sin(var1[5]);
  t1008 = Cos(var1[4]);
  t1074 = Sin(var1[9]);
  t13908 = Cos(var1[9]);
  t19416 = t1677*t1220;
  t20003 = -1.*t1088*t1314*t2692;
  t20228 = t19416 + t20003;
  t1510 = t1220*t1088*t1314;
  t6918 = t1677*t2692;
  t13447 = t1510 + t6918;
  t22113 = Sin(var1[12]);
  t41930 = Cos(var1[12]);
  t13694 = -0.325*t13447;
  t42574 = Sin(var1[15]);
  t42577 = Cos(var1[15]);
  t1177 = 0.1575*t1008*t1074*t1088;
  t18595 = -1.*t13908;
  t18815 = 1. + t18595;
  t20348 = 0.1575*t18815*t20228;
  t20545 = -1.*t1008*t1074*t1088;
  t20916 = t13908*t20228;
  t20987 = t20545 + t20916;
  t42588 = Cos(var1[10]);
  t42594 = Sin(var1[10]);
  t42595 = -1.*t13908*t1008*t1088;
  t42596 = -1.*t1074*t20228;
  t42597 = t42595 + t42596;
  t22314 = -0.1575*t1008*t22113*t1088;
  t42563 = -1.*t41930;
  t42564 = 1. + t42563;
  t42565 = -0.1575*t42564*t20228;
  t42567 = -1.*t1008*t22113*t1088;
  t42568 = t41930*t20228;
  t42569 = t42567 + t42568;
  t42606 = Cos(var1[13]);
  t42612 = Sin(var1[13]);
  t42613 = -1.*t41930*t1008*t1088;
  t42614 = -1.*t22113*t20228;
  t42616 = t42613 + t42614;
  t42576 = -0.1575*t1008*t42574*t1088;
  t42578 = -1.*t42577;
  t42579 = 1. + t42578;
  t42580 = -0.1575*t42579*t20228;
  t42581 = -1.*t1008*t42574*t1088;
  t42582 = t42577*t20228;
  t42584 = t42581 + t42582;
  t42626 = Cos(var1[16]);
  t42829 = Sin(var1[16]);
  t42830 = -1.*t42577*t1008*t1088;
  t42832 = -1.*t42574*t20228;
  t42833 = t42830 + t42832;
  t42589 = -1.*t42588;
  t42590 = 1. + t42589;
  t42592 = -0.325*t42590*t13447;
  t42593 = 0.2255*t20987;
  t42598 = 0.325*t42594*t42597;
  t42600 = t42588*t13447;
  t42601 = t42594*t42597;
  t42602 = t42600 + t42601;
  t42843 = Sin(var1[11]);
  t42844 = -1.*t42594*t13447;
  t42845 = t42588*t42597;
  t42846 = t42844 + t42845;
  t42848 = Cos(var1[11]);
  t42608 = -1.*t42606;
  t42609 = 1. + t42608;
  t42610 = 0.325*t42609*t13447;
  t42611 = -0.2255*t42569;
  t42617 = -0.325*t42612*t42616;
  t42618 = t42606*t13447;
  t42619 = t42612*t42616;
  t42620 = t42618 + t42619;
  t42860 = Sin(var1[14]);
  t42861 = -1.*t42612*t13447;
  t42862 = t42606*t42616;
  t42864 = t42861 + t42862;
  t42866 = Cos(var1[14]);
  t42627 = -1.*t42626;
  t42635 = 1. + t42627;
  t42827 = -0.325*t42635*t13447;
  t42828 = -0.2255*t42584;
  t42835 = 0.325*t42829*t42833;
  t42836 = t42626*t13447;
  t42837 = t42829*t42833;
  t42838 = t42836 + t42837;
  t42878 = Sin(var1[17]);
  t42879 = -1.*t42829*t13447;
  t42880 = t42626*t42833;
  t42881 = t42879 + t42880;
  t42884 = Cos(var1[17]);
  t22344 = 0.325*t13447;
  t43064 = Cos(var1[6]);
  t43069 = Sin(var1[6]);
  t43066 = -1.*t43064;
  t43067 = 1. + t43066;
  t43068 = 0.1575*t43067*t20228;
  t43070 = 0.1575*t1008*t1088*t43069;
  t43071 = t43064*t20228;
  t43072 = -1.*t1008*t1088*t43069;
  t43073 = t43071 + t43072;
  t43078 = Cos(var1[7]);
  t43084 = -1.*t1008*t43064*t1088;
  t43085 = -1.*t20228*t43069;
  t43086 = t43084 + t43085;
  t43088 = Sin(var1[7]);
  t43079 = -1.*t43078;
  t43080 = 1. + t43079;
  t43081 = 0.325*t43080*t13447;
  t43082 = 0.2255*t43073;
  t43089 = -0.325*t43086*t43088;
  t43091 = t43078*t13447;
  t43092 = t43086*t43088;
  t43093 = t43091 + t43092;
  t43097 = Cos(var1[8]);
  t43102 = t43078*t43086;
  t43103 = -1.*t13447*t43088;
  t43104 = t43102 + t43103;
  t43105 = Sin(var1[8]);
  t43115 = 0.325*t1677*t1008*t1220;
  t43116 = 0.1575*t1677*t1074*t1314;
  t43117 = 0.1575*t18815*t1677*t1008*t2692;
  t43119 = -1.*t1677*t1074*t1314;
  t43120 = t13908*t1677*t1008*t2692;
  t43121 = t43119 + t43120;
  t43147 = -1.*t13908*t1677*t1314;
  t43149 = -1.*t1677*t1008*t1074*t2692;
  t43150 = t43147 + t43149;
  t43126 = -0.1575*t1677*t22113*t1314;
  t43128 = -0.1575*t42564*t1677*t1008*t2692;
  t43129 = -1.*t1677*t22113*t1314;
  t43130 = t41930*t1677*t1008*t2692;
  t43131 = t43129 + t43130;
  t43162 = -1.*t41930*t1677*t1314;
  t43163 = -1.*t1677*t1008*t22113*t2692;
  t43166 = t43162 + t43163;
  t43135 = -0.1575*t1677*t42574*t1314;
  t43137 = -0.1575*t42579*t1677*t1008*t2692;
  t43138 = -1.*t1677*t42574*t1314;
  t43139 = t42577*t1677*t1008*t2692;
  t43140 = t43138 + t43139;
  t43180 = -1.*t42577*t1677*t1314;
  t43182 = -1.*t1677*t1008*t42574*t2692;
  t43198 = t43180 + t43182;
  t43144 = 0.325*t42590*t1677*t1008*t1220;
  t43145 = 0.2255*t43121;
  t43151 = 0.325*t42594*t43150;
  t42849 = -1.*t42848;
  t42851 = 1. + t42849;
  t43152 = -1.*t42588*t1677*t1008*t1220;
  t43153 = t42594*t43150;
  t43154 = t43152 + t43153;
  t43402 = t1677*t1008*t1220*t42594;
  t43405 = t42588*t43150;
  t43412 = t43402 + t43405;
  t43159 = -0.325*t42609*t1677*t1008*t1220;
  t43160 = -0.2255*t43131;
  t43168 = -0.325*t42612*t43166;
  t42867 = -1.*t42866;
  t42868 = 1. + t42867;
  t43169 = -1.*t42606*t1677*t1008*t1220;
  t43171 = t42612*t43166;
  t43173 = t43169 + t43171;
  t43459 = t1677*t1008*t1220*t42612;
  t43460 = t42606*t43166;
  t43461 = t43459 + t43460;
  t43178 = 0.325*t42635*t1677*t1008*t1220;
  t43179 = -0.2255*t43140;
  t43244 = 0.325*t42829*t43198;
  t42885 = -1.*t42884;
  t42886 = 1. + t42885;
  t43320 = -1.*t42626*t1677*t1008*t1220;
  t43369 = t42829*t43198;
  t43376 = t43320 + t43369;
  t43470 = t1677*t1008*t1220*t42829;
  t43471 = t42626*t43198;
  t43472 = t43470 + t43471;
  t43125 = -0.325*t1677*t1008*t1220;
  t43481 = 0.1575*t1677*t1008*t43067*t2692;
  t43482 = 0.1575*t1677*t1314*t43069;
  t43483 = t1677*t1008*t43064*t2692;
  t43484 = -1.*t1677*t1314*t43069;
  t43485 = t43483 + t43484;
  t43493 = -1.*t1677*t43064*t1314;
  t43494 = -1.*t1677*t1008*t2692*t43069;
  t43495 = t43493 + t43494;
  t43490 = -0.325*t1677*t1008*t1220*t43080;
  t43492 = 0.2255*t43485;
  t43496 = -0.325*t43495*t43088;
  t43098 = -1.*t43097;
  t43100 = 1. + t43098;
  t43497 = -1.*t1677*t1008*t1220*t43078;
  t43498 = t43495*t43088;
  t43500 = t43497 + t43498;
  t43506 = t43078*t43495;
  t43508 = t1677*t1008*t1220*t43088;
  t43509 = t43506 + t43508;
  t43521 = t1677*t1220*t1314;
  t43522 = -1.*t1088*t2692;
  t43523 = t43521 + t43522;
  t43527 = t1220*t1088;
  t43528 = t1677*t1314*t2692;
  t43530 = t43527 + t43528;
  t43531 = -0.325*t43530;
  t43543 = 0.325*t43530;
  t43524 = 0.1575*t18815*t43523;
  t43540 = -0.1575*t42564*t43523;
  t43535 = -0.1575*t42579*t43523;
  t43552 = 0.2255*t13908*t43523;
  t43554 = -0.325*t1074*t42594*t43523;
  t43555 = -0.325*t42590*t43530;
  t43556 = -1.*t1074*t42594*t43523;
  t43558 = t42588*t43530;
  t43559 = t43556 + t43558;
  t43585 = -1.*t42588*t1074*t43523;
  t43586 = -1.*t42594*t43530;
  t43587 = t43585 + t43586;
  t43564 = -0.2255*t41930*t43523;
  t43566 = 0.325*t22113*t42612*t43523;
  t43567 = 0.325*t42609*t43530;
  t43568 = -1.*t22113*t42612*t43523;
  t43570 = t42606*t43530;
  t43571 = t43568 + t43570;
  t43729 = -1.*t42606*t22113*t43523;
  t43731 = -1.*t42612*t43530;
  t43732 = t43729 + t43731;
  t43575 = -0.2255*t42577*t43523;
  t43576 = -0.325*t42574*t42829*t43523;
  t43577 = -0.325*t42635*t43530;
  t43578 = -1.*t42574*t42829*t43523;
  t43579 = t42626*t43530;
  t43580 = t43578 + t43579;
  t43745 = -1.*t42626*t42574*t43523;
  t43746 = -1.*t42829*t43530;
  t43747 = t43745 + t43746;
  t43547 = 0.1575*t43067*t43523;
  t43756 = 0.2255*t43064*t43523;
  t43758 = 0.325*t43080*t43530;
  t43759 = 0.325*t43523*t43069*t43088;
  t43760 = t43078*t43530;
  t43761 = -1.*t43523*t43069*t43088;
  t43763 = t43760 + t43761;
  t43769 = -1.*t43078*t43523*t43069;
  t43770 = -1.*t43530*t43088;
  t43771 = t43769 + t43770;
  t43782 = -0.1575*t1677*t1008*t43064;
  t43783 = 0.1575*t43530*t43069;
  t43784 = t1677*t1008*t43064;
  t43786 = -1.*t43530*t43069;
  t43787 = t43784 + t43786;
  t43792 = 0.2255*t43787;
  t43795 = -1.*t43064*t43530;
  t43797 = -1.*t1677*t1008*t43069;
  t43798 = t43795 + t43797;
  t43813 = -1.*t1677*t1220*t1314;
  t43814 = t1088*t2692;
  t43815 = t43813 + t43814;
  t43812 = -0.325*t43078*t43787;
  t43816 = 0.325*t43815*t43088;
  t43817 = t43078*t43787;
  t43818 = -1.*t43815*t43088;
  t43820 = t43817 + t43818;
  t43825 = -1.*t43078*t43815;
  t43826 = -1.*t43787*t43088;
  t43827 = t43825 + t43826;
  t43897 = t43078*t43815;
  t43902 = t43787*t43088;
  t43903 = t43897 + t43902;
  t43911 = -0.1575*t13908*t1677*t1008;
  t43912 = 0.1575*t1074*t43530;
  t43913 = t13908*t1677*t1008;
  t43914 = -1.*t1074*t43530;
  t43916 = t43913 + t43914;
  t43927 = -1.*t1677*t1008*t1074;
  t43928 = -1.*t13908*t43530;
  t43929 = t43927 + t43928;
  t43924 = 0.2255*t43916;
  t43944 = -0.325*t42594*t43815;
  t43945 = 0.325*t42588*t43916;
  t43946 = -1.*t42594*t43815;
  t43947 = t42588*t43916;
  t43948 = t43946 + t43947;
  t43953 = -1.*t42588*t43815;
  t43954 = -1.*t42594*t43916;
  t43955 = t43953 + t43954;
  t43969 = t42588*t43815;
  t43970 = t42594*t43916;
  t43971 = t43969 + t43970;
  t43980 = 0.1575*t41930*t1677*t1008;
  t43981 = -0.1575*t22113*t43530;
  t43982 = t41930*t1677*t1008;
  t43983 = -1.*t22113*t43530;
  t43984 = t43982 + t43983;
  t43991 = -1.*t1677*t1008*t22113;
  t43992 = -1.*t41930*t43530;
  t43994 = t43991 + t43992;
  t43985 = -0.2255*t43984;
  t44005 = 0.325*t42612*t43815;
  t44006 = -0.325*t42606*t43984;
  t44007 = -1.*t42612*t43815;
  t44008 = t42606*t43984;
  t44009 = t44007 + t44008;
  t44015 = -1.*t42606*t43815;
  t44016 = -1.*t42612*t43984;
  t44017 = t44015 + t44016;
  t44028 = t42606*t43815;
  t44029 = t42612*t43984;
  t44030 = t44028 + t44029;
  t44038 = 0.1575*t42577*t1677*t1008;
  t44039 = -0.1575*t42574*t43530;
  t44040 = t42577*t1677*t1008;
  t44041 = -1.*t42574*t43530;
  t44042 = t44040 + t44041;
  t44050 = -1.*t1677*t1008*t42574;
  t44051 = -1.*t42577*t43530;
  t44052 = t44050 + t44051;
  t44043 = -0.2255*t44042;
  t44063 = -0.325*t42829*t43815;
  t44065 = 0.325*t42626*t44042;
  t44066 = -1.*t42829*t43815;
  t44067 = t42626*t44042;
  t44068 = t44066 + t44067;
  t44073 = -1.*t42626*t43815;
  t44074 = -1.*t42829*t44042;
  t44075 = t44073 + t44074;
  t44086 = t42626*t43815;
  t44087 = t42829*t44042;
  t44088 = t44086 + t44087;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=-258.00300000000004;
  p_output1[3]=-26.977500000000003*(t1177 + t13694 + t20348 + 0.1575*t20987) - 26.977500000000003*(t22314 + t22344 + t42565 - 0.1575*t42569) - 26.977500000000003*(t13694 + t42576 + t42580 - 0.1575*t42584) - 6.1312500000000005*(t1177 + t20348 + t42592 + t42593 + t42598 - 0.325*t42602) - 6.1312500000000005*(t22314 + t42565 + t42610 + t42611 + t42617 + 0.325*t42620) - 6.1312500000000005*(t42576 + t42580 + t42827 + t42828 + t42835 - 0.325*t42838) - 1.9620000000000002*(t1177 + t20348 + t42592 + t42593 + t42598 - 0.575*t42843*t42846 - 0.575*(-1.*t42843*t42846 + t42602*t42848) - 0.575*t42602*t42851) - 1.9620000000000002*(t22314 + t42565 + t42610 + t42611 + t42617 + 0.075*t42860*t42864 + 0.075*(-1.*t42860*t42864 + t42620*t42866) + 0.075*t42620*t42868) - 1.9620000000000002*(t42576 + t42580 + t42827 + t42828 + t42835 - 0.575*t42878*t42881 - 0.575*(-1.*t42878*t42881 + t42838*t42884) - 0.575*t42838*t42886) - 26.977500000000003*(t22344 + t43068 + t43070 + 0.1575*t43073) - 6.1312500000000005*(t43068 + t43070 + t43081 + t43082 + t43089 + 0.325*t43093) - 1.9620000000000002*(t43068 + t43070 + t43081 + t43082 + t43089 + 0.075*t43093*t43100 + 0.075*t43104*t43105 + 0.075*(t43093*t43097 - 1.*t43104*t43105));
  p_output1[4]=-26.977500000000003*(t43115 + t43116 + t43117 + 0.1575*t43121) - 26.977500000000003*(t43125 + t43126 + t43128 - 0.1575*t43131) - 26.977500000000003*(t43115 + t43135 + t43137 - 0.1575*t43140) - 6.1312500000000005*(t43116 + t43117 + t43144 + t43145 + t43151 - 0.325*t43154) - 6.1312500000000005*(t43126 + t43128 + t43159 + t43160 + t43168 + 0.325*t43173) - 6.1312500000000005*(t43135 + t43137 + t43178 + t43179 + t43244 - 0.325*t43376) - 1.9620000000000002*(t43116 + t43117 + t43144 + t43145 + t43151 - 0.575*t42851*t43154 - 0.575*t42843*t43412 - 0.575*(t42848*t43154 - 1.*t42843*t43412)) - 1.9620000000000002*(t43126 + t43128 + t43159 + t43160 + t43168 + 0.075*t42868*t43173 + 0.075*t42860*t43461 + 0.075*(t42866*t43173 - 1.*t42860*t43461)) - 1.9620000000000002*(t43135 + t43137 + t43178 + t43179 + t43244 - 0.575*t42886*t43376 - 0.575*t42878*t43472 - 0.575*(t42884*t43376 - 1.*t42878*t43472)) - 26.977500000000003*(t43125 + t43481 + t43482 + 0.1575*t43485) - 6.1312500000000005*(t43481 + t43482 + t43490 + t43492 + t43496 + 0.325*t43500) - 1.9620000000000002*(t43481 + t43482 + t43490 + t43492 + t43496 + 0.075*t43100*t43500 + 0.075*t43105*t43509 + 0.075*(t43097*t43500 - 1.*t43105*t43509));
  p_output1[5]=-26.977500000000003*(0.1575*t13908*t43523 + t43524 + t43531) - 26.977500000000003*(-0.1575*t42577*t43523 + t43531 + t43535) - 26.977500000000003*(-0.1575*t41930*t43523 + t43540 + t43543) - 26.977500000000003*(0.1575*t43064*t43523 + t43543 + t43547) - 6.1312500000000005*(t43524 + t43552 + t43554 + t43555 - 0.325*t43559) - 6.1312500000000005*(t43540 + t43564 + t43566 + t43567 + 0.325*t43571) - 6.1312500000000005*(t43535 + t43575 + t43576 + t43577 - 0.325*t43580) - 1.9620000000000002*(t43524 + t43552 + t43554 + t43555 - 0.575*t42851*t43559 - 0.575*t42843*t43587 - 0.575*(t42848*t43559 - 1.*t42843*t43587)) - 1.9620000000000002*(t43540 + t43564 + t43566 + t43567 + 0.075*t42868*t43571 + 0.075*t42860*t43732 + 0.075*(t42866*t43571 - 1.*t42860*t43732)) - 1.9620000000000002*(t43535 + t43575 + t43576 + t43577 - 0.575*t42886*t43580 - 0.575*t42878*t43747 - 0.575*(t42884*t43580 - 1.*t42878*t43747)) - 6.1312500000000005*(t43547 + t43756 + t43758 + t43759 + 0.325*t43763) - 1.9620000000000002*(t43547 + t43756 + t43758 + t43759 + 0.075*t43100*t43763 + 0.075*t43105*t43771 + 0.075*(t43097*t43763 - 1.*t43105*t43771));
  p_output1[6]=-26.977500000000003*(t43782 + t43783 + 0.1575*t43787) - 6.1312500000000005*(t43782 + t43783 + t43792) - 1.9620000000000002*(t43782 + t43783 + t43792 - 0.325*t43088*t43798 + 0.075*t43088*t43100*t43798 + 0.075*t43078*t43105*t43798 + 0.075*(t43088*t43097*t43798 - 1.*t43078*t43105*t43798));
  p_output1[7]=-6.1312500000000005*(t43812 + t43816 + 0.325*t43820) - 1.9620000000000002*(t43812 + t43816 + 0.075*t43100*t43820 + 0.075*t43105*t43827 + 0.075*(t43097*t43820 - 1.*t43105*t43827));
  p_output1[8]=-1.9620000000000002*(0.075*t43097*t43820 + 0.075*t43105*t43903 + 0.075*(-1.*t43097*t43820 - 1.*t43105*t43903));
  p_output1[9]=-26.977500000000003*(t43911 + t43912 + 0.1575*t43916) - 6.1312500000000005*(t43911 + t43912 + t43924) - 1.9620000000000002*(t43911 + t43912 + t43924 + 0.325*t42594*t43929 - 0.575*t42588*t42843*t43929 - 0.575*t42594*t42851*t43929 - 0.575*(-1.*t42588*t42843*t43929 + t42594*t42848*t43929));
  p_output1[10]=-6.1312500000000005*(t43944 + t43945 - 0.325*t43948) - 1.9620000000000002*(t43944 + t43945 - 0.575*t42851*t43948 - 0.575*t42843*t43955 - 0.575*(t42848*t43948 - 1.*t42843*t43955));
  p_output1[11]=-1.9620000000000002*(-0.575*t42848*t43948 - 0.575*t42843*t43971 - 0.575*(-1.*t42848*t43948 - 1.*t42843*t43971));
  p_output1[12]=-26.977500000000003*(t43980 + t43981 - 0.1575*t43984) - 6.1312500000000005*(t43980 + t43981 + t43985) - 1.9620000000000002*(t43980 + t43981 + t43985 - 0.325*t42612*t43994 + 0.075*t42606*t42860*t43994 + 0.075*t42612*t42868*t43994 + 0.075*(-1.*t42606*t42860*t43994 + t42612*t42866*t43994));
  p_output1[13]=-6.1312500000000005*(t44005 + t44006 + 0.325*t44009) - 1.9620000000000002*(t44005 + t44006 + 0.075*t42868*t44009 + 0.075*t42860*t44017 + 0.075*(t42866*t44009 - 1.*t42860*t44017));
  p_output1[14]=-1.9620000000000002*(0.075*t42866*t44009 + 0.075*t42860*t44030 + 0.075*(-1.*t42866*t44009 - 1.*t42860*t44030));
  p_output1[15]=-26.977500000000003*(t44038 + t44039 - 0.1575*t44042) - 6.1312500000000005*(t44038 + t44039 + t44043) - 1.9620000000000002*(t44038 + t44039 + t44043 + 0.325*t42829*t44052 - 0.575*t42626*t42878*t44052 - 0.575*t42829*t42886*t44052 - 0.575*(-1.*t42626*t42878*t44052 + t42829*t42884*t44052));
  p_output1[16]=-6.1312500000000005*(t44063 + t44065 - 0.325*t44068) - 1.9620000000000002*(t44063 + t44065 - 0.575*t42886*t44068 - 0.575*t42878*t44075 - 0.575*(t42884*t44068 - 1.*t42878*t44075));
  p_output1[17]=-1.9620000000000002*(-0.575*t42884*t44068 - 0.575*t42878*t44088 - 0.575*(-1.*t42884*t44068 - 1.*t42878*t44088));
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ge_vec_vision60.hh"

namespace SymFunction
{

void Ge_vec_vision60_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
