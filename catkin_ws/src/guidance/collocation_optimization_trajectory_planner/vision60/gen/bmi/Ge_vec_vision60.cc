/*
 * Automatically Generated from Mathematica.
 * Fri 10 Jun 2022 21:56:12 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t610;
  double t938;
  double t654;
  double t856;
  double t1040;
  double t402;
  double t568;
  double t1853;
  double t1961;
  double t2174;
  double t2276;
  double t868;
  double t1051;
  double t1065;
  double t2938;
  double t4890;
  double t1728;
  double t6607;
  double t6631;
  double t627;
  double t1899;
  double t1930;
  double t2368;
  double t2755;
  double t2767;
  double t2769;
  double t6834;
  double t8430;
  double t8535;
  double t8807;
  double t9031;
  double t4625;
  double t4920;
  double t4973;
  double t5531;
  double t5628;
  double t5641;
  double t6157;
  double t12074;
  double t12675;
  double t13583;
  double t14229;
  double t15265;
  double t6630;
  double t6653;
  double t6656;
  double t6708;
  double t6720;
  double t6733;
  double t6734;
  double t20786;
  double t24227;
  double t24235;
  double t24482;
  double t24593;
  double t6835;
  double t6869;
  double t8030;
  double t8401;
  double t9038;
  double t9571;
  double t10146;
  double t11239;
  double t33782;
  double t38519;
  double t40012;
  double t40791;
  double t44741;
  double t12103;
  double t12397;
  double t12571;
  double t12673;
  double t15301;
  double t15306;
  double t15317;
  double t15390;
  double t51152;
  double t51291;
  double t51300;
  double t51314;
  double t51341;
  double t22665;
  double t24169;
  double t24219;
  double t24224;
  double t24614;
  double t25334;
  double t27061;
  double t28002;
  double t51555;
  double t51697;
  double t51702;
  double t51830;
  double t51923;
  double t4808;
  double t51976;
  double t51981;
  double t51977;
  double t51978;
  double t51979;
  double t51982;
  double t51983;
  double t51986;
  double t51987;
  double t52045;
  double t52060;
  double t52067;
  double t52068;
  double t52070;
  double t52052;
  double t52055;
  double t52056;
  double t52057;
  double t52073;
  double t52074;
  double t52076;
  double t52081;
  double t52086;
  double t52113;
  double t52114;
  double t52115;
  double t52116;
  double t52125;
  double t52126;
  double t52127;
  double t52128;
  double t52129;
  double t52130;
  double t52165;
  double t52170;
  double t52177;
  double t52135;
  double t52136;
  double t52138;
  double t52139;
  double t52140;
  double t52326;
  double t52413;
  double t53908;
  double t52145;
  double t52146;
  double t52147;
  double t52148;
  double t52149;
  double t55782;
  double t55822;
  double t55847;
  double t52154;
  double t52158;
  double t52182;
  double t45490;
  double t46147;
  double t52190;
  double t52194;
  double t52200;
  double t56750;
  double t56770;
  double t56777;
  double t52239;
  double t52244;
  double t53917;
  double t51342;
  double t51344;
  double t53918;
  double t53924;
  double t53926;
  double t57111;
  double t57113;
  double t57550;
  double t54209;
  double t54219;
  double t56129;
  double t51924;
  double t51943;
  double t56144;
  double t56514;
  double t56589;
  double t59243;
  double t59253;
  double t59263;
  double t52134;
  double t59496;
  double t59497;
  double t59498;
  double t59499;
  double t59540;
  double t59588;
  double t59591;
  double t59594;
  double t59582;
  double t59585;
  double t59600;
  double t52087;
  double t52110;
  double t59603;
  double t59606;
  double t59609;
  double t59622;
  double t59623;
  double t59627;
  double t59664;
  double t59669;
  double t59670;
  double t59680;
  double t59681;
  double t59685;
  double t59712;
  double t59771;
  double t59673;
  double t59766;
  double t59753;
  double t59805;
  double t59809;
  double t59810;
  double t59813;
  double t59814;
  double t59815;
  double t60036;
  double t60041;
  double t60042;
  double t59915;
  double t59916;
  double t59925;
  double t59928;
  double t59956;
  double t59957;
  double t60169;
  double t60182;
  double t60183;
  double t59976;
  double t59977;
  double t59982;
  double t59984;
  double t59992;
  double t59993;
  double t60248;
  double t60249;
  double t60252;
  double t59795;
  double t60279;
  double t60280;
  double t60283;
  double t60284;
  double t60291;
  double t60292;
  double t60415;
  double t60417;
  double t60426;
  double t60464;
  double t60465;
  double t60468;
  double t60469;
  double t60482;
  double t60498;
  double t60569;
  double t60687;
  double t60720;
  double t60760;
  double t60761;
  double t60766;
  double t60750;
  double t60768;
  double t60771;
  double t60774;
  double t60781;
  double t60814;
  double t60815;
  double t60816;
  double t60846;
  double t60853;
  double t60854;
  double t61894;
  double t61895;
  double t62087;
  double t62165;
  double t62343;
  double t62440;
  double t62451;
  double t62465;
  double t62384;
  double t62642;
  double t62668;
  double t62669;
  double t62725;
  double t62777;
  double t62855;
  double t62884;
  double t62910;
  double t63165;
  double t63182;
  double t63184;
  double t63282;
  double t63286;
  double t63305;
  double t63335;
  double t63357;
  double t64855;
  double t64856;
  double t64857;
  double t63358;
  double t64868;
  double t64869;
  double t64870;
  double t64871;
  double t64872;
  double t64877;
  double t64878;
  double t64879;
  double t64889;
  double t64890;
  double t64891;
  double t64899;
  double t64900;
  double t64901;
  double t64902;
  double t64903;
  double t65085;
  double t65086;
  double t65087;
  double t64904;
  double t65098;
  double t65099;
  double t65100;
  double t65101;
  double t65102;
  double t65107;
  double t65108;
  double t65109;
  double t65119;
  double t65120;
  double t65121;
  t610 = Sin(var1[3]);
  t938 = Cos(var1[3]);
  t654 = Cos(var1[5]);
  t856 = Sin(var1[4]);
  t1040 = Sin(var1[5]);
  t402 = Cos(var1[4]);
  t568 = Sin(var1[9]);
  t1853 = Cos(var1[9]);
  t1961 = t938*t654;
  t2174 = -1.*t610*t856*t1040;
  t2276 = t1961 + t2174;
  t868 = t654*t610*t856;
  t1051 = t938*t1040;
  t1065 = t868 + t1051;
  t2938 = Sin(var1[12]);
  t4890 = Cos(var1[12]);
  t1728 = -0.325*t1065;
  t6607 = Sin(var1[15]);
  t6631 = Cos(var1[15]);
  t627 = 0.1575*t402*t568*t610;
  t1899 = -1.*t1853;
  t1930 = 1. + t1899;
  t2368 = 0.1575*t1930*t2276;
  t2755 = -1.*t402*t568*t610;
  t2767 = t1853*t2276;
  t2769 = t2755 + t2767;
  t6834 = Cos(var1[10]);
  t8430 = Sin(var1[10]);
  t8535 = -1.*t1853*t402*t610;
  t8807 = -1.*t568*t2276;
  t9031 = t8535 + t8807;
  t4625 = -0.1575*t402*t2938*t610;
  t4920 = -1.*t4890;
  t4973 = 1. + t4920;
  t5531 = -0.1575*t4973*t2276;
  t5628 = -1.*t402*t2938*t610;
  t5641 = t4890*t2276;
  t6157 = t5628 + t5641;
  t12074 = Cos(var1[13]);
  t12675 = Sin(var1[13]);
  t13583 = -1.*t4890*t402*t610;
  t14229 = -1.*t2938*t2276;
  t15265 = t13583 + t14229;
  t6630 = -0.1575*t402*t6607*t610;
  t6653 = -1.*t6631;
  t6656 = 1. + t6653;
  t6708 = -0.1575*t6656*t2276;
  t6720 = -1.*t402*t6607*t610;
  t6733 = t6631*t2276;
  t6734 = t6720 + t6733;
  t20786 = Cos(var1[16]);
  t24227 = Sin(var1[16]);
  t24235 = -1.*t6631*t402*t610;
  t24482 = -1.*t6607*t2276;
  t24593 = t24235 + t24482;
  t6835 = -1.*t6834;
  t6869 = 1. + t6835;
  t8030 = -0.325*t6869*t1065;
  t8401 = 0.2255*t2769;
  t9038 = 0.325*t8430*t9031;
  t9571 = t6834*t1065;
  t10146 = t8430*t9031;
  t11239 = t9571 + t10146;
  t33782 = Sin(var1[11]);
  t38519 = -1.*t8430*t1065;
  t40012 = t6834*t9031;
  t40791 = t38519 + t40012;
  t44741 = Cos(var1[11]);
  t12103 = -1.*t12074;
  t12397 = 1. + t12103;
  t12571 = 0.325*t12397*t1065;
  t12673 = -0.2255*t6157;
  t15301 = -0.325*t12675*t15265;
  t15306 = t12074*t1065;
  t15317 = t12675*t15265;
  t15390 = t15306 + t15317;
  t51152 = Sin(var1[14]);
  t51291 = -1.*t12675*t1065;
  t51300 = t12074*t15265;
  t51314 = t51291 + t51300;
  t51341 = Cos(var1[14]);
  t22665 = -1.*t20786;
  t24169 = 1. + t22665;
  t24219 = -0.325*t24169*t1065;
  t24224 = -0.2255*t6734;
  t24614 = 0.325*t24227*t24593;
  t25334 = t20786*t1065;
  t27061 = t24227*t24593;
  t28002 = t25334 + t27061;
  t51555 = Sin(var1[17]);
  t51697 = -1.*t24227*t1065;
  t51702 = t20786*t24593;
  t51830 = t51697 + t51702;
  t51923 = Cos(var1[17]);
  t4808 = 0.325*t1065;
  t51976 = Cos(var1[6]);
  t51981 = Sin(var1[6]);
  t51977 = -1.*t51976;
  t51978 = 1. + t51977;
  t51979 = 0.1575*t51978*t2276;
  t51982 = 0.1575*t402*t610*t51981;
  t51983 = t51976*t2276;
  t51986 = -1.*t402*t610*t51981;
  t51987 = t51983 + t51986;
  t52045 = Cos(var1[7]);
  t52060 = -1.*t402*t51976*t610;
  t52067 = -1.*t2276*t51981;
  t52068 = t52060 + t52067;
  t52070 = Sin(var1[7]);
  t52052 = -1.*t52045;
  t52055 = 1. + t52052;
  t52056 = 0.325*t52055*t1065;
  t52057 = 0.2255*t51987;
  t52073 = -0.325*t52068*t52070;
  t52074 = t52045*t1065;
  t52076 = t52068*t52070;
  t52081 = t52074 + t52076;
  t52086 = Cos(var1[8]);
  t52113 = t52045*t52068;
  t52114 = -1.*t1065*t52070;
  t52115 = t52113 + t52114;
  t52116 = Sin(var1[8]);
  t52125 = 0.325*t938*t402*t654;
  t52126 = 0.1575*t938*t568*t856;
  t52127 = 0.1575*t1930*t938*t402*t1040;
  t52128 = -1.*t938*t568*t856;
  t52129 = t1853*t938*t402*t1040;
  t52130 = t52128 + t52129;
  t52165 = -1.*t1853*t938*t856;
  t52170 = -1.*t938*t402*t568*t1040;
  t52177 = t52165 + t52170;
  t52135 = -0.1575*t938*t2938*t856;
  t52136 = -0.1575*t4973*t938*t402*t1040;
  t52138 = -1.*t938*t2938*t856;
  t52139 = t4890*t938*t402*t1040;
  t52140 = t52138 + t52139;
  t52326 = -1.*t4890*t938*t856;
  t52413 = -1.*t938*t402*t2938*t1040;
  t53908 = t52326 + t52413;
  t52145 = -0.1575*t938*t6607*t856;
  t52146 = -0.1575*t6656*t938*t402*t1040;
  t52147 = -1.*t938*t6607*t856;
  t52148 = t6631*t938*t402*t1040;
  t52149 = t52147 + t52148;
  t55782 = -1.*t6631*t938*t856;
  t55822 = -1.*t938*t402*t6607*t1040;
  t55847 = t55782 + t55822;
  t52154 = 0.325*t6869*t938*t402*t654;
  t52158 = 0.2255*t52130;
  t52182 = 0.325*t8430*t52177;
  t45490 = -1.*t44741;
  t46147 = 1. + t45490;
  t52190 = -1.*t6834*t938*t402*t654;
  t52194 = t8430*t52177;
  t52200 = t52190 + t52194;
  t56750 = t938*t402*t654*t8430;
  t56770 = t6834*t52177;
  t56777 = t56750 + t56770;
  t52239 = -0.325*t12397*t938*t402*t654;
  t52244 = -0.2255*t52140;
  t53917 = -0.325*t12675*t53908;
  t51342 = -1.*t51341;
  t51344 = 1. + t51342;
  t53918 = -1.*t12074*t938*t402*t654;
  t53924 = t12675*t53908;
  t53926 = t53918 + t53924;
  t57111 = t938*t402*t654*t12675;
  t57113 = t12074*t53908;
  t57550 = t57111 + t57113;
  t54209 = 0.325*t24169*t938*t402*t654;
  t54219 = -0.2255*t52149;
  t56129 = 0.325*t24227*t55847;
  t51924 = -1.*t51923;
  t51943 = 1. + t51924;
  t56144 = -1.*t20786*t938*t402*t654;
  t56514 = t24227*t55847;
  t56589 = t56144 + t56514;
  t59243 = t938*t402*t654*t24227;
  t59253 = t20786*t55847;
  t59263 = t59243 + t59253;
  t52134 = -0.325*t938*t402*t654;
  t59496 = 0.1575*t938*t402*t51978*t1040;
  t59497 = 0.1575*t938*t856*t51981;
  t59498 = t938*t402*t51976*t1040;
  t59499 = -1.*t938*t856*t51981;
  t59540 = t59498 + t59499;
  t59588 = -1.*t938*t51976*t856;
  t59591 = -1.*t938*t402*t1040*t51981;
  t59594 = t59588 + t59591;
  t59582 = -0.325*t938*t402*t654*t52055;
  t59585 = 0.2255*t59540;
  t59600 = -0.325*t59594*t52070;
  t52087 = -1.*t52086;
  t52110 = 1. + t52087;
  t59603 = -1.*t938*t402*t654*t52045;
  t59606 = t59594*t52070;
  t59609 = t59603 + t59606;
  t59622 = t52045*t59594;
  t59623 = t938*t402*t654*t52070;
  t59627 = t59622 + t59623;
  t59664 = t938*t654*t856;
  t59669 = -1.*t610*t1040;
  t59670 = t59664 + t59669;
  t59680 = t654*t610;
  t59681 = t938*t856*t1040;
  t59685 = t59680 + t59681;
  t59712 = -0.325*t59685;
  t59771 = 0.325*t59685;
  t59673 = 0.1575*t1930*t59670;
  t59766 = -0.1575*t4973*t59670;
  t59753 = -0.1575*t6656*t59670;
  t59805 = 0.2255*t1853*t59670;
  t59809 = -0.325*t568*t8430*t59670;
  t59810 = -0.325*t6869*t59685;
  t59813 = -1.*t568*t8430*t59670;
  t59814 = t6834*t59685;
  t59815 = t59813 + t59814;
  t60036 = -1.*t6834*t568*t59670;
  t60041 = -1.*t8430*t59685;
  t60042 = t60036 + t60041;
  t59915 = -0.2255*t4890*t59670;
  t59916 = 0.325*t2938*t12675*t59670;
  t59925 = 0.325*t12397*t59685;
  t59928 = -1.*t2938*t12675*t59670;
  t59956 = t12074*t59685;
  t59957 = t59928 + t59956;
  t60169 = -1.*t12074*t2938*t59670;
  t60182 = -1.*t12675*t59685;
  t60183 = t60169 + t60182;
  t59976 = -0.2255*t6631*t59670;
  t59977 = -0.325*t6607*t24227*t59670;
  t59982 = -0.325*t24169*t59685;
  t59984 = -1.*t6607*t24227*t59670;
  t59992 = t20786*t59685;
  t59993 = t59984 + t59992;
  t60248 = -1.*t20786*t6607*t59670;
  t60249 = -1.*t24227*t59685;
  t60252 = t60248 + t60249;
  t59795 = 0.1575*t51978*t59670;
  t60279 = 0.2255*t51976*t59670;
  t60280 = 0.325*t52055*t59685;
  t60283 = 0.325*t59670*t51981*t52070;
  t60284 = t52045*t59685;
  t60291 = -1.*t59670*t51981*t52070;
  t60292 = t60284 + t60291;
  t60415 = -1.*t52045*t59670*t51981;
  t60417 = -1.*t59685*t52070;
  t60426 = t60415 + t60417;
  t60464 = -0.1575*t938*t402*t51976;
  t60465 = 0.1575*t59685*t51981;
  t60468 = t938*t402*t51976;
  t60469 = -1.*t59685*t51981;
  t60482 = t60468 + t60469;
  t60498 = 0.2255*t60482;
  t60569 = -1.*t51976*t59685;
  t60687 = -1.*t938*t402*t51981;
  t60720 = t60569 + t60687;
  t60760 = -1.*t938*t654*t856;
  t60761 = t610*t1040;
  t60766 = t60760 + t60761;
  t60750 = -0.325*t52045*t60482;
  t60768 = 0.325*t60766*t52070;
  t60771 = t52045*t60482;
  t60774 = -1.*t60766*t52070;
  t60781 = t60771 + t60774;
  t60814 = -1.*t52045*t60766;
  t60815 = -1.*t60482*t52070;
  t60816 = t60814 + t60815;
  t60846 = t52045*t60766;
  t60853 = t60482*t52070;
  t60854 = t60846 + t60853;
  t61894 = -0.1575*t1853*t938*t402;
  t61895 = 0.1575*t568*t59685;
  t62087 = t1853*t938*t402;
  t62165 = -1.*t568*t59685;
  t62343 = t62087 + t62165;
  t62440 = -1.*t938*t402*t568;
  t62451 = -1.*t1853*t59685;
  t62465 = t62440 + t62451;
  t62384 = 0.2255*t62343;
  t62642 = -0.325*t8430*t60766;
  t62668 = 0.325*t6834*t62343;
  t62669 = -1.*t8430*t60766;
  t62725 = t6834*t62343;
  t62777 = t62669 + t62725;
  t62855 = -1.*t6834*t60766;
  t62884 = -1.*t8430*t62343;
  t62910 = t62855 + t62884;
  t63165 = t6834*t60766;
  t63182 = t8430*t62343;
  t63184 = t63165 + t63182;
  t63282 = 0.1575*t4890*t938*t402;
  t63286 = -0.1575*t2938*t59685;
  t63305 = t4890*t938*t402;
  t63335 = -1.*t2938*t59685;
  t63357 = t63305 + t63335;
  t64855 = -1.*t938*t402*t2938;
  t64856 = -1.*t4890*t59685;
  t64857 = t64855 + t64856;
  t63358 = -0.2255*t63357;
  t64868 = 0.325*t12675*t60766;
  t64869 = -0.325*t12074*t63357;
  t64870 = -1.*t12675*t60766;
  t64871 = t12074*t63357;
  t64872 = t64870 + t64871;
  t64877 = -1.*t12074*t60766;
  t64878 = -1.*t12675*t63357;
  t64879 = t64877 + t64878;
  t64889 = t12074*t60766;
  t64890 = t12675*t63357;
  t64891 = t64889 + t64890;
  t64899 = 0.1575*t6631*t938*t402;
  t64900 = -0.1575*t6607*t59685;
  t64901 = t6631*t938*t402;
  t64902 = -1.*t6607*t59685;
  t64903 = t64901 + t64902;
  t65085 = -1.*t938*t402*t6607;
  t65086 = -1.*t6631*t59685;
  t65087 = t65085 + t65086;
  t64904 = -0.2255*t64903;
  t65098 = -0.325*t24227*t60766;
  t65099 = 0.325*t20786*t64903;
  t65100 = -1.*t24227*t60766;
  t65101 = t20786*t64903;
  t65102 = t65100 + t65101;
  t65107 = -1.*t20786*t60766;
  t65108 = -1.*t24227*t64903;
  t65109 = t65107 + t65108;
  t65119 = t20786*t60766;
  t65120 = t24227*t64903;
  t65121 = t65119 + t65120;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=-258.00300000000004;
  p_output1[3]=-26.977500000000003*(t4808 + t51979 + t51982 + 0.1575*t51987) - 6.1312500000000005*(t51979 + t51982 + t52056 + t52057 + t52073 + 0.325*t52081) - 1.9620000000000002*(t51979 + t51982 + t52056 + t52057 + t52073 + 0.075*t52081*t52110 + 0.075*t52115*t52116 + 0.075*(t52081*t52086 - 1.*t52115*t52116)) - 6.1312500000000005*(t12571 + t12673 + t15301 + 0.325*t15390 + t4625 + t5531) - 1.9620000000000002*(t12571 + t12673 + t15301 + t4625 + 0.075*t51152*t51314 + 0.075*(-1.*t51152*t51314 + t15390*t51341) + 0.075*t15390*t51344 + t5531) - 26.977500000000003*(t4625 + t4808 + t5531 - 0.1575*t6157) - 26.977500000000003*(t1728 + t2368 + 0.1575*t2769 + t627) - 6.1312500000000005*(t24219 + t24224 + t24614 - 0.325*t28002 + t6630 + t6708) - 1.9620000000000002*(t24219 + t24224 + t24614 - 0.575*t51555*t51830 - 0.575*(-1.*t51555*t51830 + t28002*t51923) - 0.575*t28002*t51943 + t6630 + t6708) - 26.977500000000003*(t1728 + t6630 + t6708 - 0.1575*t6734) - 6.1312500000000005*(-0.325*t11239 + t2368 + t627 + t8030 + t8401 + t9038) - 1.9620000000000002*(t2368 - 0.575*t33782*t40791 - 0.575*(-1.*t33782*t40791 + t11239*t44741) - 0.575*t11239*t46147 + t627 + t8030 + t8401 + t9038);
  p_output1[4]=-26.977500000000003*(t52125 + t52126 + t52127 + 0.1575*t52130) - 26.977500000000003*(t52134 + t52135 + t52136 - 0.1575*t52140) - 26.977500000000003*(t52125 + t52145 + t52146 - 0.1575*t52149) - 6.1312500000000005*(t52126 + t52127 + t52154 + t52158 + t52182 - 0.325*t52200) - 6.1312500000000005*(t52135 + t52136 + t52239 + t52244 + t53917 + 0.325*t53926) - 6.1312500000000005*(t52145 + t52146 + t54209 + t54219 + t56129 - 0.325*t56589) - 1.9620000000000002*(t52126 + t52127 + t52154 + t52158 + t52182 - 0.575*t46147*t52200 - 0.575*t33782*t56777 - 0.575*(t44741*t52200 - 1.*t33782*t56777)) - 1.9620000000000002*(t52135 + t52136 + t52239 + t52244 + t53917 + 0.075*t51344*t53926 + 0.075*t51152*t57550 + 0.075*(t51341*t53926 - 1.*t51152*t57550)) - 1.9620000000000002*(t52145 + t52146 + t54209 + t54219 + t56129 - 0.575*t51943*t56589 - 0.575*t51555*t59263 - 0.575*(t51923*t56589 - 1.*t51555*t59263)) - 26.977500000000003*(t52134 + t59496 + t59497 + 0.1575*t59540) - 6.1312500000000005*(t59496 + t59497 + t59582 + t59585 + t59600 + 0.325*t59609) - 1.9620000000000002*(t59496 + t59497 + t59582 + t59585 + t59600 + 0.075*t52110*t59609 + 0.075*t52116*t59627 + 0.075*(t52086*t59609 - 1.*t52116*t59627));
  p_output1[5]=-26.977500000000003*(0.1575*t1853*t59670 + t59673 + t59712) - 26.977500000000003*(-0.1575*t4890*t59670 + t59766 + t59771) - 26.977500000000003*(0.1575*t51976*t59670 + t59771 + t59795) - 6.1312500000000005*(t59673 + t59805 + t59809 + t59810 - 0.325*t59815) - 6.1312500000000005*(t59766 + t59915 + t59916 + t59925 + 0.325*t59957) - 6.1312500000000005*(t59753 + t59976 + t59977 + t59982 - 0.325*t59993) - 1.9620000000000002*(t59673 + t59805 + t59809 + t59810 - 0.575*t46147*t59815 - 0.575*t33782*t60042 - 0.575*(t44741*t59815 - 1.*t33782*t60042)) - 1.9620000000000002*(t59766 + t59915 + t59916 + t59925 + 0.075*t51344*t59957 + 0.075*t51152*t60183 + 0.075*(t51341*t59957 - 1.*t51152*t60183)) - 1.9620000000000002*(t59753 + t59976 + t59977 + t59982 - 0.575*t51943*t59993 - 0.575*t51555*t60252 - 0.575*(t51923*t59993 - 1.*t51555*t60252)) - 6.1312500000000005*(t59795 + t60279 + t60280 + t60283 + 0.325*t60292) - 1.9620000000000002*(t59795 + t60279 + t60280 + t60283 + 0.075*t52110*t60292 + 0.075*t52116*t60426 + 0.075*(t52086*t60292 - 1.*t52116*t60426)) - 26.977500000000003*(t59712 + t59753 - 0.1575*t59670*t6631);
  p_output1[6]=-26.977500000000003*(t60464 + t60465 + 0.1575*t60482) - 6.1312500000000005*(t60464 + t60465 + t60498) - 1.9620000000000002*(t60464 + t60465 + t60498 - 0.325*t52070*t60720 + 0.075*t52070*t52110*t60720 + 0.075*t52045*t52116*t60720 + 0.075*(t52070*t52086*t60720 - 1.*t52045*t52116*t60720));
  p_output1[7]=-6.1312500000000005*(t60750 + t60768 + 0.325*t60781) - 1.9620000000000002*(t60750 + t60768 + 0.075*t52110*t60781 + 0.075*t52116*t60816 + 0.075*(t52086*t60781 - 1.*t52116*t60816));
  p_output1[8]=-1.9620000000000002*(0.075*t52086*t60781 + 0.075*t52116*t60854 + 0.075*(-1.*t52086*t60781 - 1.*t52116*t60854));
  p_output1[9]=-26.977500000000003*(t61894 + t61895 + 0.1575*t62343) - 6.1312500000000005*(t61894 + t61895 + t62384) - 1.9620000000000002*(t61894 + t61895 + t62384 - 0.575*t33782*t62465*t6834 + 0.325*t62465*t8430 - 0.575*t46147*t62465*t8430 - 0.575*(-1.*t33782*t62465*t6834 + t44741*t62465*t8430));
  p_output1[10]=-6.1312500000000005*(t62642 + t62668 - 0.325*t62777) - 1.9620000000000002*(t62642 + t62668 - 0.575*t46147*t62777 - 0.575*t33782*t62910 - 0.575*(t44741*t62777 - 1.*t33782*t62910));
  p_output1[11]=-1.9620000000000002*(-0.575*t44741*t62777 - 0.575*t33782*t63184 - 0.575*(-1.*t44741*t62777 - 1.*t33782*t63184));
  p_output1[12]=-26.977500000000003*(t63282 + t63286 - 0.1575*t63357) - 6.1312500000000005*(t63282 + t63286 + t63358) - 1.9620000000000002*(t63282 + t63286 + t63358 - 0.325*t12675*t64857 + 0.075*t12074*t51152*t64857 + 0.075*t12675*t51344*t64857 + 0.075*(-1.*t12074*t51152*t64857 + t12675*t51341*t64857));
  p_output1[13]=-6.1312500000000005*(t64868 + t64869 + 0.325*t64872) - 1.9620000000000002*(t64868 + t64869 + 0.075*t51344*t64872 + 0.075*t51152*t64879 + 0.075*(t51341*t64872 - 1.*t51152*t64879));
  p_output1[14]=-1.9620000000000002*(0.075*t51341*t64872 + 0.075*t51152*t64891 + 0.075*(-1.*t51341*t64872 - 1.*t51152*t64891));
  p_output1[15]=-26.977500000000003*(t64899 + t64900 - 0.1575*t64903) - 6.1312500000000005*(t64899 + t64900 + t64904) - 1.9620000000000002*(t64899 + t64900 + t64904 + 0.325*t24227*t65087 - 0.575*t20786*t51555*t65087 - 0.575*t24227*t51943*t65087 - 0.575*(-1.*t20786*t51555*t65087 + t24227*t51923*t65087));
  p_output1[16]=-6.1312500000000005*(t65098 + t65099 - 0.325*t65102) - 1.9620000000000002*(t65098 + t65099 - 0.575*t51943*t65102 - 0.575*t51555*t65109 - 0.575*(t51923*t65102 - 1.*t51555*t65109));
  p_output1[17]=-1.9620000000000002*(-0.575*t51923*t65102 - 0.575*t51555*t65121 - 0.575*(-1.*t51923*t65102 - 1.*t51555*t65121));
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ge_vec_vision60.hh"

namespace SymFunction
{

void Ge_vec_vision60_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
