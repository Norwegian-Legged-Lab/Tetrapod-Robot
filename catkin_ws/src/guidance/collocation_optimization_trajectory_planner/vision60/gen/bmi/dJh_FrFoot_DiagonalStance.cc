/*
 * Automatically Generated from Mathematica.
 * Tue 7 Jun 2022 14:10:37 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t6485;
  double t6463;
  double t6465;
  double t7032;
  double t6480;
  double t7111;
  double t7131;
  double t2456;
  double t7179;
  double t10534;
  double t10598;
  double t6461;
  double t10603;
  double t10609;
  double t7149;
  double t10604;
  double t10605;
  double t1969;
  double t10610;
  double t10611;
  double t10629;
  double t10631;
  double t10632;
  double t10636;
  double t10637;
  double t10641;
  double t10714;
  double t10742;
  double t10744;
  double t10745;
  double t10781;
  double t10790;
  double t10791;
  double t10776;
  double t10792;
  double t10794;
  double t10796;
  double t10804;
  double t10806;
  double t10807;
  double t26899;
  double t33421;
  double t43455;
  double t43459;
  double t43460;
  double t43470;
  double t43544;
  double t43551;
  double t43560;
  double t43563;
  double t43570;
  double t43572;
  double t43573;
  double t43574;
  double t43469;
  double t43558;
  double t43581;
  double t43582;
  double t43468;
  double t43583;
  double t43584;
  double t43590;
  double t43711;
  double t43722;
  double t43724;
  double t43728;
  double t43734;
  double t43736;
  double t43737;
  double t43740;
  double t43741;
  double t43742;
  double t43743;
  double t43748;
  double t43751;
  double t43752;
  double t43778;
  double t43780;
  double t43784;
  double t43774;
  double t43776;
  double t43777;
  double t43764;
  double t43765;
  double t43768;
  double t43465;
  double t43466;
  double t43467;
  double t43589;
  double t43753;
  double t43755;
  double t43803;
  double t43804;
  double t43805;
  double t43790;
  double t43793;
  double t43794;
  double t43913;
  double t43917;
  double t43922;
  double t43821;
  double t43822;
  double t43823;
  double t44008;
  double t44011;
  double t44012;
  double t43806;
  double t43894;
  double t44031;
  double t44032;
  double t44033;
  double t44035;
  double t44048;
  double t44049;
  double t44053;
  double t43807;
  double t43809;
  double t43811;
  double t44055;
  double t44057;
  double t43895;
  double t43896;
  double t43897;
  double t43932;
  double t43951;
  double t44100;
  double t44103;
  double t43933;
  double t43934;
  double t43935;
  double t44115;
  double t44117;
  double t43952;
  double t43960;
  double t43961;
  double t43977;
  double t43997;
  double t44157;
  double t43978;
  double t43979;
  double t43982;
  double t44161;
  double t44163;
  double t43998;
  double t43999;
  double t44000;
  double t44025;
  double t44040;
  double t44195;
  double t44196;
  double t44197;
  double t44201;
  double t44202;
  double t44225;
  double t44226;
  double t44227;
  double t44026;
  double t44028;
  double t44199;
  double t44203;
  double t44212;
  double t44214;
  double t44044;
  double t44045;
  double t44236;
  double t44237;
  double t44242;
  double t44246;
  double t44247;
  double t44254;
  double t44255;
  double t44256;
  double t44259;
  double t44260;
  double t44261;
  double t44263;
  double t44264;
  double t44265;
  double t44267;
  double t44268;
  double t44269;
  double t44110;
  double t44106;
  double t44271;
  double t44272;
  double t44274;
  double t44297;
  double t44300;
  double t44107;
  double t44108;
  double t44313;
  double t44315;
  double t44111;
  double t44112;
  double t44342;
  double t44345;
  double t44219;
  double t44221;
  double t44222;
  double t44351;
  double t44353;
  double t44280;
  double t44281;
  double t44282;
  double t44151;
  double t44167;
  double t44152;
  double t44153;
  double t44384;
  double t44386;
  double t44238;
  double t44392;
  double t44394;
  double t44168;
  double t44169;
  double t44414;
  double t44417;
  double t44421;
  double t44423;
  double t44192;
  double t44193;
  double t44451;
  double t44452;
  double t44453;
  double t44474;
  double t44475;
  double t43133;
  double t43134;
  double t43143;
  double t44464;
  double t44465;
  double t44467;
  double t44468;
  double t44461;
  double t44473;
  double t44477;
  double t44506;
  double t44507;
  double t44509;
  double t44494;
  double t44495;
  double t44497;
  double t44501;
  double t44502;
  double t44503;
  double t44515;
  double t44517;
  double t44518;
  double t44510;
  double t44514;
  double t44520;
  double t44526;
  double t44527;
  double t44528;
  double t44530;
  double t44531;
  double t44532;
  double t44534;
  double t44535;
  double t44536;
  double t44306;
  double t44307;
  double t44309;
  double t44319;
  double t44320;
  double t44322;
  double t44478;
  double t44207;
  double t44208;
  double t44561;
  double t44563;
  double t44572;
  double t44569;
  double t44559;
  double t44564;
  double t44603;
  double t44607;
  double t44610;
  double t44543;
  double t44544;
  double t44545;
  double t44380;
  double t44381;
  double t44641;
  double t44661;
  double t44665;
  double t44689;
  double t44691;
  double t44692;
  double t44705;
  double t44706;
  double t44707;
  double t44716;
  double t44717;
  double t44718;
  double t44723;
  double t44724;
  double t44725;
  double t44727;
  double t44728;
  double t44729;
  double t44702;
  double t44703;
  double t44709;
  double t44744;
  double t44745;
  double t44746;
  double t44740;
  double t44741;
  double t44742;
  double t44747;
  double t44751;
  double t44758;
  double t44759;
  double t44760;
  double t44763;
  double t44764;
  double t44765;
  double t44397;
  double t44398;
  double t44578;
  double t44580;
  double t44588;
  double t44589;
  double t44780;
  double t44785;
  double t44790;
  double t44786;
  double t44788;
  double t44781;
  double t44810;
  double t44813;
  double t44715;
  double t44719;
  double t44720;
  double t44817;
  double t10723;
  double t10725;
  double t10726;
  double t44849;
  double t44851;
  double t44869;
  double t44872;
  double t44875;
  t6485 = Cos(var1[13]);
  t6463 = Cos(var1[14]);
  t6465 = Sin(var1[13]);
  t7032 = Sin(var1[14]);
  t6480 = t6463*t6465;
  t7111 = -1.*t6485*t7032;
  t7131 = t6480 + t7111;
  t2456 = Cos(var1[5]);
  t7179 = t6485*t6463;
  t10534 = t6465*t7032;
  t10598 = t7179 + t10534;
  t6461 = Sin(var1[12]);
  t10603 = Sin(var1[5]);
  t10609 = Cos(var1[3]);
  t7149 = -1.*t2456*t6461*t7131;
  t10604 = t10598*t10603;
  t10605 = t7149 + t10604;
  t1969 = Sin(var1[3]);
  t10610 = Cos(var1[12]);
  t10611 = Cos(var1[4]);
  t10629 = t10610*t10611*t7131;
  t10631 = Sin(var1[4]);
  t10632 = t2456*t10598;
  t10636 = t6461*t7131*t10603;
  t10637 = t10632 + t10636;
  t10641 = -1.*t10631*t10637;
  t10714 = t10629 + t10641;
  t10742 = t10611*t6461;
  t10744 = t10610*t10631*t10603;
  t10745 = t10742 + t10744;
  t10781 = -1.*t6463*t6465;
  t10790 = t6485*t7032;
  t10791 = t10781 + t10790;
  t10776 = -1.*t2456*t6461*t10598;
  t10792 = t10791*t10603;
  t10794 = t10776 + t10792;
  t10796 = t10610*t10611*t10598;
  t10804 = t2456*t10791;
  t10806 = t6461*t10598*t10603;
  t10807 = t10804 + t10806;
  t26899 = -1.*t10631*t10807;
  t33421 = t10796 + t26899;
  t43455 = -1.*t10610*t7131*t10631;
  t43459 = -1.*t10611*t10637;
  t43460 = t43455 + t43459;
  t43470 = -0.0641*t6463;
  t43544 = -0.28*t7032;
  t43551 = t43470 + t43544;
  t43560 = -1.*t6463;
  t43563 = 1. + t43560;
  t43570 = 0.075*t43563;
  t43572 = 0.355*t6463;
  t43573 = -0.0641*t7032;
  t43574 = t43570 + t43572 + t43573;
  t43469 = -0.325*t6465;
  t43558 = t6485*t43551;
  t43581 = t6465*t43574;
  t43582 = t43469 + t43558 + t43581;
  t43468 = -0.068*t6461;
  t43583 = t10610*t43582;
  t43584 = t43468 + t43583;
  t43590 = -1.*t6485;
  t43711 = 1. + t43590;
  t43722 = 0.325*t43711;
  t43724 = -1.*t6465*t43551;
  t43728 = t6485*t43574;
  t43734 = t43722 + t43724 + t43728;
  t43736 = t2456*t43734;
  t43737 = -1.*t10610;
  t43740 = 1. + t43737;
  t43741 = -0.1575*t43740;
  t43742 = -0.2255*t10610;
  t43743 = -1.*t6461*t43582;
  t43748 = t43741 + t43742 + t43743;
  t43751 = -1.*t43748*t10603;
  t43752 = t43736 + t43751;
  t43778 = t10611*t43584;
  t43780 = -1.*t10631*t43752;
  t43784 = t43778 + t43780;
  t43774 = t6461*t10631;
  t43776 = -1.*t10610*t10611*t10603;
  t43777 = t43774 + t43776;
  t43764 = t43584*t10631;
  t43765 = t10611*t43752;
  t43768 = t43764 + t43765;
  t43465 = t10610*t10598*t10631;
  t43466 = t10611*t10807;
  t43467 = t43465 + t43466;
  t43589 = -1.*t43584*t10631;
  t43753 = -1.*t10611*t43752;
  t43755 = t43589 + t43753;
  t43803 = t2456*t43748;
  t43804 = t43734*t10603;
  t43805 = t43803 + t43804;
  t43790 = -1.*t6461*t10631;
  t43793 = t10610*t10611*t10603;
  t43794 = t43790 + t43793;
  t43913 = t10610*t7131*t10631;
  t43917 = t10611*t10637;
  t43922 = t43913 + t43917;
  t43821 = -1.*t10610*t10598*t10631;
  t43822 = -1.*t10611*t10807;
  t43823 = t43821 + t43822;
  t44008 = t2456*t6461*t7131;
  t44011 = -1.*t10598*t10603;
  t44012 = t44008 + t44011;
  t43806 = -1.*t10610*t2456*t43805;
  t43894 = t43805*t10794;
  t44031 = -1.*t2456*t43748;
  t44032 = -1.*t43734*t10603;
  t44033 = t44031 + t44032;
  t44035 = t10610*t10603*t43805;
  t44048 = t2456*t6461*t10598;
  t44049 = -1.*t10791*t10603;
  t44053 = t44048 + t44049;
  t43807 = -1.*t43777*t43768;
  t43809 = -1.*t10745*t43784;
  t43811 = t43806 + t43807 + t43809;
  t44055 = t43752*t10794;
  t44057 = t43805*t10807;
  t43895 = t43768*t43467;
  t43896 = t43784*t33421;
  t43897 = t43894 + t43895 + t43896;
  t43932 = t43805*t10605;
  t43951 = -1.*t43805*t10794;
  t44100 = t43805*t10637;
  t44103 = t43752*t10605;
  t43933 = t43768*t43922;
  t43934 = t43784*t10714;
  t43935 = t43932 + t43933 + t43934;
  t44115 = -1.*t43752*t10794;
  t44117 = -1.*t43805*t10807;
  t43952 = -1.*t43768*t43467;
  t43960 = -1.*t43784*t33421;
  t43961 = t43951 + t43952 + t43960;
  t43977 = t10610*t2456*t43805;
  t43997 = -1.*t43805*t10605;
  t44157 = -1.*t10610*t10603*t43805;
  t43978 = t43777*t43768;
  t43979 = t10745*t43784;
  t43982 = t43977 + t43978 + t43979;
  t44161 = -1.*t43805*t10637;
  t44163 = -1.*t43752*t10605;
  t43998 = -1.*t43768*t43922;
  t43999 = -1.*t43784*t10714;
  t44000 = t43997 + t43998 + t43999;
  t44025 = -1.*t6461*t43584;
  t44040 = t10610*t43584*t10598;
  t44195 = 0.068*t6461;
  t44196 = -1.*t10610*t43582;
  t44197 = t44195 + t44196;
  t44201 = -0.068*t10610;
  t44202 = t44201 + t43743;
  t44225 = -1.*t10611*t6461*t7131;
  t44226 = -1.*t10610*t7131*t10631*t10603;
  t44227 = t44225 + t44226;
  t44026 = t10610*t10603*t43752;
  t44028 = t44025 + t44026 + t43806;
  t44199 = -1.*t10610*t43584;
  t44203 = -1.*t6461*t44202;
  t44212 = -1.*t6461*t43584*t10598;
  t44214 = t10610*t44202*t10598;
  t44044 = t43752*t10807;
  t44045 = t44040 + t43894 + t44044;
  t44236 = Power(t2456,2);
  t44237 = -1.*t10610*t44236*t44197;
  t44242 = t2456*t6461*t43805;
  t44246 = -1.*t10610*t2456*t10598*t43805;
  t44247 = t2456*t44197*t10794;
  t44254 = -1.*t6461*t10598*t10631;
  t44255 = t10610*t10611*t10598*t10603;
  t44256 = t44254 + t44255;
  t44259 = t44202*t10631;
  t44260 = -1.*t10611*t44197*t10603;
  t44261 = t44259 + t44260;
  t44263 = t10611*t44202;
  t44264 = t44197*t10631*t10603;
  t44265 = t44263 + t44264;
  t44267 = t10610*t10631;
  t44268 = t10611*t6461*t10603;
  t44269 = t44267 + t44268;
  t44110 = -1.*t10610*t43584*t10598;
  t44106 = t10610*t43584*t7131;
  t44271 = t10610*t10611;
  t44272 = -1.*t6461*t10631*t10603;
  t44274 = t44271 + t44272;
  t44297 = -1.*t6461*t43584*t7131;
  t44300 = t10610*t44202*t7131;
  t44107 = t43752*t10637;
  t44108 = t44106 + t44107 + t43932;
  t44313 = t6461*t43584*t10598;
  t44315 = -1.*t10610*t44202*t10598;
  t44111 = -1.*t43752*t10807;
  t44112 = t44110 + t43951 + t44111;
  t44342 = -1.*t10610*t2456*t7131*t43805;
  t44345 = t2456*t44197*t10605;
  t44219 = -1.*t6461*t7131*t10631;
  t44221 = t10610*t10611*t7131*t10603;
  t44222 = t44219 + t44221;
  t44351 = t10610*t2456*t10598*t43805;
  t44353 = -1.*t2456*t44197*t10794;
  t44280 = -1.*t10611*t6461*t10598;
  t44281 = -1.*t10610*t10598*t10631*t10603;
  t44282 = t44280 + t44281;
  t44151 = t6461*t43584;
  t44167 = -1.*t10610*t43584*t7131;
  t44152 = -1.*t10610*t10603*t43752;
  t44153 = t44151 + t44152 + t43977;
  t44384 = t10610*t43584;
  t44386 = t6461*t44202;
  t44238 = Power(t10603,2);
  t44392 = t6461*t43584*t7131;
  t44394 = -1.*t10610*t44202*t7131;
  t44168 = -1.*t43752*t10637;
  t44169 = t44167 + t44168 + t43997;
  t44414 = t10610*t44236*t44197;
  t44417 = -1.*t2456*t6461*t43805;
  t44421 = t10610*t2456*t7131*t43805;
  t44423 = -1.*t2456*t44197*t10605;
  t44192 = -1.*t10610*t43748;
  t44193 = t44025 + t44192;
  t44451 = -1.*t6485*t6463;
  t44452 = -1.*t6465*t7032;
  t44453 = t44451 + t44452;
  t44474 = -0.325*t6485;
  t44475 = t44474 + t43724 + t43728;
  t43133 = t10609*t10794;
  t43134 = -1.*t1969*t33421;
  t43143 = t43133 + t43134;
  t44464 = 0.325*t6465;
  t44465 = -1.*t6485*t43551;
  t44467 = -1.*t6465*t43574;
  t44468 = t44464 + t44465 + t44467;
  t44461 = t10610*t43584*t10791;
  t44473 = Power(t10610,2);
  t44477 = t44473*t44475*t10598;
  t44506 = -1.*t2456*t6461*t44475;
  t44507 = t44468*t10603;
  t44509 = t44506 + t44507;
  t44494 = -1.*t2456*t6461*t10791;
  t44495 = t44453*t10603;
  t44497 = t44494 + t44495;
  t44501 = t2456*t44468;
  t44502 = t6461*t44475*t10603;
  t44503 = t44501 + t44502;
  t44515 = t2456*t44453;
  t44517 = t6461*t10791*t10603;
  t44518 = t44515 + t44517;
  t44510 = -1.*t10610*t2456*t44509;
  t44514 = t44509*t10794;
  t44520 = t43805*t44497;
  t44526 = t10610*t10791*t10631;
  t44527 = t10611*t44518;
  t44528 = t44526 + t44527;
  t44530 = t10610*t44475*t10631;
  t44531 = t10611*t44503;
  t44532 = t44530 + t44531;
  t44534 = t10610*t10611*t44475;
  t44535 = -1.*t10631*t44503;
  t44536 = t44534 + t44535;
  t44306 = -1.*t43734*t10791;
  t44307 = t6461*t43748*t10598;
  t44309 = t44306 + t44110 + t44307;
  t44319 = -1.*t6461*t43748*t7131;
  t44320 = t43734*t10598;
  t44322 = t44106 + t44319 + t44320;
  t44478 = Power(t6461,2);
  t44207 = t43734*t10791;
  t44208 = -1.*t6461*t43748*t10598;
  t44561 = -1.*t44468*t10791;
  t44563 = -1.*t43734*t44453;
  t44572 = t44468*t10598;
  t44569 = t44473*t44475*t7131;
  t44559 = -1.*t10610*t43584*t10791;
  t44564 = -1.*t44473*t44475*t10598;
  t44603 = t44509*t10605;
  t44607 = -1.*t44509*t10794;
  t44610 = -1.*t43805*t44497;
  t44543 = t10610*t10611*t10791;
  t44544 = -1.*t10631*t44518;
  t44545 = t44543 + t44544;
  t44380 = t10610*t43748;
  t44381 = t44151 + t44380;
  t44641 = -1.*t44473*t44475*t7131;
  t44661 = t10610*t2456*t44509;
  t44665 = -1.*t44509*t10605;
  t44689 = -0.28*t6463;
  t44691 = 0.0641*t7032;
  t44692 = t44689 + t44691;
  t44705 = t6465*t43551;
  t44706 = t6485*t44692;
  t44707 = t44705 + t44706;
  t44716 = t2456*t7131;
  t44717 = t6461*t44453*t10603;
  t44718 = t44716 + t44717;
  t44723 = -1.*t2456*t6461*t44453;
  t44724 = t7131*t10603;
  t44725 = t44723 + t44724;
  t44727 = t10610*t10611*t44453;
  t44728 = -1.*t10631*t44718;
  t44729 = t44727 + t44728;
  t44702 = -1.*t6465*t44692;
  t44703 = t43558 + t44702;
  t44709 = t44473*t44707*t10598;
  t44744 = -1.*t2456*t6461*t44707;
  t44745 = t44703*t10603;
  t44746 = t44744 + t44745;
  t44740 = t2456*t44703;
  t44741 = t6461*t44707*t10603;
  t44742 = t44740 + t44741;
  t44747 = -1.*t10610*t2456*t44746;
  t44751 = t44746*t10794;
  t44758 = t10610*t44707*t10631;
  t44759 = t10611*t44742;
  t44760 = t44758 + t44759;
  t44763 = t10610*t10611*t44707;
  t44764 = -1.*t10631*t44742;
  t44765 = t44763 + t44764;
  t44397 = t6461*t43748*t7131;
  t44398 = -1.*t43734*t10598;
  t44578 = t43582*t7131;
  t44580 = t44578 + t44320;
  t44588 = -1.*t43582*t10598;
  t44589 = t44306 + t44588;
  t44780 = -1.*t44703*t10791;
  t44785 = t43734*t7131;
  t44790 = t44703*t10598;
  t44786 = t44473*t44707*t7131;
  t44788 = t10610*t43584*t44453;
  t44781 = -1.*t44473*t44707*t10598;
  t44810 = t43805*t44725;
  t44813 = t44746*t10605;
  t44715 = t10610*t44453*t10631;
  t44719 = t10611*t44718;
  t44720 = t44715 + t44719;
  t44817 = -1.*t44746*t10794;
  t10723 = t10609*t10605;
  t10725 = -1.*t1969*t10714;
  t10726 = t10723 + t10725;
  t44849 = -1.*t44473*t44707*t7131;
  t44851 = -1.*t10610*t43584*t44453;
  t44869 = t10610*t2456*t44746;
  t44872 = -1.*t43805*t44725;
  t44875 = -1.*t44746*t10605;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=(-1.*t10609*t10714 - 1.*t10605*t1969)*var2[1] + t10726*var2[2];
  p_output1[10]=(-1.*t10609*t10745 - 1.*t10610*t1969*t2456)*var2[1] + (-1.*t10745*t1969 + t10609*t10610*t2456)*var2[2];
  p_output1[11]=(-1.*t10794*t1969 - 1.*t10609*t33421)*var2[1] + t43143*var2[2];
  p_output1[12]=t10714*var2[0] - 1.*t1969*t43460*var2[1] + t10609*t43460*var2[2] + (t43467*(-1.*t10745*t43755 - 1.*t10745*t43768 - 1.*t43777*t43784 - 1.*t43784*t43794) + t33421*t43811 + t43777*(t33421*t43755 + t33421*t43768 + t43467*t43784 + t43784*t43823) + t10745*t43897)*var2[3];
  p_output1[13]=t10745*var2[0] - 1.*t1969*t43794*var2[1] + t10609*t43794*var2[2] + ((-1.*t33421*t43755 - 1.*t33421*t43768 - 1.*t43467*t43784 - 1.*t43784*t43823)*t43922 + t43467*(t10714*t43755 + t10714*t43768 + t43460*t43784 + t43784*t43922) + t33421*t43935 + t10714*t43961)*var2[3];
  p_output1[14]=t33421*var2[0] - 1.*t1969*t43823*var2[1] + t10609*t43823*var2[2] + ((t10745*t43755 + t10745*t43768 + t43777*t43784 + t43784*t43794)*t43922 + t43777*(-1.*t10714*t43755 - 1.*t10714*t43768 - 1.*t43460*t43784 - 1.*t43784*t43922) + t10714*t43982 + t10745*t44000)*var2[3];
  p_output1[15]=t10611*t44012*var2[0] + (t10609*t10637 + t10631*t1969*t44012)*var2[1] + (t10637*t1969 - 1.*t10609*t10631*t44012)*var2[2] + (-1.*t10610*t10611*t2456*t43897 + t43467*(-1.*t10610*t2456*t43752 + t10610*t10611*t2456*t43768 - 1.*t10610*t10631*t2456*t43784 + t10631*t10745*t44033 - 1.*t10611*t43777*t44033 + t44035) + t10611*t43811*t44053 + t43777*(-1.*t10631*t33421*t44033 + t10611*t43467*t44033 + t10611*t43768*t44053 - 1.*t10631*t43784*t44053 + t44055 + t44057))*var2[3] + (t10807*t44028 + t10794*(t10603*t10610*t44033 + t44035) - 1.*t10603*t10610*t44045 + t10610*t2456*(t10807*t44033 + t43752*t44053 + t44055 + t44057))*var2[4];
  p_output1[16]=-1.*t10610*t10611*t2456*var2[0] + (-1.*t10603*t10609*t10610 - 1.*t10610*t10631*t1969*t2456)*var2[1] + (-1.*t10603*t10610*t1969 + t10609*t10610*t10631*t2456)*var2[2] + (t10611*t43961*t44012 + t10611*t43935*t44053 + t43467*(t10611*t43768*t44012 - 1.*t10631*t43784*t44012 - 1.*t10631*t10714*t44033 + t10611*t43922*t44033 + t44100 + t44103) + t43922*(t10631*t33421*t44033 - 1.*t10611*t43467*t44033 - 1.*t10611*t43768*t44053 + t10631*t43784*t44053 + t44115 + t44117))*var2[3] + (t10794*(t43752*t44012 + t10637*t44033 + t44100 + t44103) + t10807*t44108 + t10637*t44112 + t10605*(-1.*t10807*t44033 - 1.*t43752*t44053 + t44115 + t44117))*var2[4];
  p_output1[17]=t10611*t44053*var2[0] + (t10609*t10807 + t10631*t1969*t44053)*var2[1] + (t10807*t1969 - 1.*t10609*t10631*t44053)*var2[2] + (-1.*t10610*t10611*t2456*t44000 + t10611*t43982*t44012 + t43922*(t10610*t2456*t43752 - 1.*t10610*t10611*t2456*t43768 + t10610*t10631*t2456*t43784 - 1.*t10631*t10745*t44033 + t10611*t43777*t44033 + t44157) + t43777*(-1.*t10611*t43768*t44012 + t10631*t43784*t44012 + t10631*t10714*t44033 - 1.*t10611*t43922*t44033 + t44161 + t44163))*var2[3] + (t10637*t44153 + t10605*(-1.*t10603*t10610*t44033 + t44157) + t10610*t2456*(-1.*t43752*t44012 - 1.*t10637*t44033 + t44161 + t44163) - 1.*t10603*t10610*t44169)*var2[4];
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=t44222*var2[0] + (-1.*t1969*t44227 - 1.*t10609*t10610*t2456*t7131)*var2[1] + (t10609*t44227 - 1.*t10610*t1969*t2456*t7131)*var2[2] + (t43811*t44256 + t43897*t44269 + t43467*(t44237 + t44242 - 1.*t43777*t44261 - 1.*t10745*t44265 - 1.*t43768*t44269 - 1.*t43784*t44274) + t43777*(t44246 + t44247 + t43768*t44256 + t43467*t44261 + t33421*t44265 + t43784*t44282))*var2[3] + (-1.*t10598*t10610*t2456*t44028 + t10610*t2456*(t10598*t10603*t10610*t43752 - 1.*t10603*t10807*t44197 + t44212 + t44214 + t44246 + t44247) - 1.*t2456*t44045*t6461 + t10794*(t44199 + t44203 + t44237 - 1.*t10610*t44197*t44238 + t44242 - 1.*t10603*t43752*t6461))*var2[4] + (t10610*(t44040 + t44207 + t44208) - 1.*t10598*t44193*t6461 + t10598*t10610*(-1.*t10610*t44197 + t44199 + t44203 + t43748*t6461) + t6461*(-1.*t10598*t10610*t43748 + t44212 + t44214 - 1.*t10598*t44197*t6461))*var2[5];
  p_output1[37]=t44269*var2[0] + (-1.*t1969*t44274 - 1.*t10609*t2456*t6461)*var2[1] + (t10609*t44274 - 1.*t1969*t2456*t6461)*var2[2] + (t43961*t44222 + t43935*t44256 + t43467*(t43768*t44222 + t43784*t44227 + t43922*t44261 + t10714*t44265 + t44342 + t44345) + t43922*(-1.*t43768*t44256 - 1.*t43467*t44261 - 1.*t33421*t44265 - 1.*t43784*t44282 + t44351 + t44353))*var2[3] + (-1.*t10598*t10610*t2456*t44108 + t10605*(-1.*t10598*t10603*t10610*t43752 + t10603*t10807*t44197 + t44313 + t44315 + t44351 + t44353) - 1.*t10610*t2456*t44112*t7131 + t10794*(-1.*t10603*t10637*t44197 + t44297 + t44300 + t44342 + t44345 + t10603*t10610*t43752*t7131))*var2[4] + (-1.*t10598*t44322*t6461 - 1.*t44309*t6461*t7131 + t10610*(t10598*t10610*t43748 + t44313 + t44315 + t10598*t44197*t6461)*t7131 + t10598*t10610*(t44297 + t44300 - 1.*t10610*t43748*t7131 - 1.*t44197*t6461*t7131))*var2[5];
  p_output1[38]=t44256*var2[0] + (-1.*t10598*t10609*t10610*t2456 - 1.*t1969*t44282)*var2[1] + (-1.*t10598*t10610*t1969*t2456 + t10609*t44282)*var2[2] + (t43982*t44222 + t44000*t44269 + t43922*(t43777*t44261 + t10745*t44265 + t43768*t44269 + t43784*t44274 + t44414 + t44417) + t43777*(-1.*t43768*t44222 - 1.*t43784*t44227 - 1.*t43922*t44261 - 1.*t10714*t44265 + t44421 + t44423))*var2[3] + (-1.*t2456*t44169*t6461 + t10605*(t10610*t44197*t44238 + t44384 + t44386 + t44414 + t44417 + t10603*t43752*t6461) - 1.*t10610*t2456*t44153*t7131 + t10610*t2456*(t10603*t10637*t44197 + t44392 + t44394 + t44421 + t44423 - 1.*t10603*t10610*t43752*t7131))*var2[4] + (t10610*(t44167 + t44397 + t44398) - 1.*t44381*t6461*t7131 + t10610*(t10610*t44197 + t44384 + t44386 - 1.*t43748*t6461)*t7131 + t6461*(t44392 + t44394 + t10610*t43748*t7131 + t44197*t6461*t7131))*var2[5];
  p_output1[39]=t43467*var2[0] + t43143*var2[1] + (t10794*t1969 + t10609*t33421)*var2[2] + (t43811*t44528 + t43467*(t44510 - 1.*t43777*t44532 - 1.*t10745*t44536) + t43777*(t44514 + t44520 + t43768*t44528 + t43467*t44532 + t33421*t44536 + t43784*t44545))*var2[3] + (t44028*t44497 + t10610*t2456*(t44461 + t44477 + t10807*t44503 + t44514 + t43752*t44518 + t44520) + t10794*(t10603*t10610*t44503 + t44510 - 1.*t10610*t44475*t6461))*var2[4] + (t10610*t10791*t44193 + t6461*(t43734*t44453 + t44461 + t10791*t44468 + t44477 + t10598*t44475*t44478 - 1.*t10791*t43748*t6461))*var2[5] + (0.1575*t10598 + 0.2255*t44453)*var2[12];
  p_output1[40]=(t43467*t43961 + t43935*t44528 + t43467*(t43894 + t43895 + t43896 + t43922*t44532 + t10714*t44536 + t44603) + t43922*(-1.*t43768*t44528 - 1.*t43467*t44532 - 1.*t33421*t44536 - 1.*t43784*t44545 + t44607 + t44610))*var2[3] + (t10794*t44112 + t44108*t44497 + t10794*(t43894 + t44040 + t44044 + t10637*t44503 + t44569 + t44603) + t10605*(-1.*t10807*t44503 - 1.*t43752*t44518 + t44559 + t44564 + t44607 + t44610))*var2[4] + (t10598*t10610*t44309 + t10610*t10791*t44322 + t10610*(-1.*t10598*t44475*t44478 + t44559 + t44561 + t44563 + t44564 + t10791*t43748*t6461)*t7131 + t10598*t10610*(t44040 + t44207 + t44208 + t44569 + t44572 + t44475*t44478*t7131))*var2[5] + (t10598*(-1.*t10791*t43582 - 1.*t10598*t44475 + t44561 + t44563) + t44453*t44580 + t10791*t44589 + t10791*(t10598*t43582 + t44207 + t44572 + t44475*t7131))*var2[12];
  p_output1[41]=t44528*var2[0] + (t10609*t44497 - 1.*t1969*t44545)*var2[1] + (t1969*t44497 + t10609*t44545)*var2[2] + (t43467*t43982 + t43922*(t43777*t44532 + t10745*t44536 + t44661) + t43777*(t43951 + t43952 + t43960 - 1.*t43922*t44532 - 1.*t10714*t44536 + t44665))*var2[3] + (t10794*t44153 + t10610*t2456*(t43951 + t44110 + t44111 - 1.*t10637*t44503 + t44641 + t44665) + t10605*(-1.*t10603*t10610*t44503 + t44661 + t10610*t44475*t6461))*var2[4] + (t10598*t10610*t44381 + t6461*(t44110 + t44306 + t44307 - 1.*t10598*t44468 + t44641 - 1.*t44475*t44478*t7131))*var2[5] - 0.068*t10791*var2[12];
  p_output1[42]=t44720*var2[0] + (t10609*t44725 - 1.*t1969*t44729)*var2[1] + (t1969*t44725 + t10609*t44729)*var2[2] + (t43811*t43922 + t43467*(t44747 - 1.*t43777*t44760 - 1.*t10745*t44765) + t43777*(t43932 + t43933 + t43934 + t44751 + t43467*t44760 + t33421*t44765))*var2[3] + (t10605*t44028 + t10610*t2456*(t43932 + t44106 + t44107 + t44709 + t10807*t44742 + t44751) + t10794*(t10603*t10610*t44742 + t44747 - 1.*t10610*t44707*t6461))*var2[4] + ((t44106 + t44319 + t44320 + t10791*t44703 + t10598*t44478*t44707 + t44709)*t6461 + t10610*t44193*t7131)*var2[5] + (0.2255*t10598 + 0.1575*t44453)*var2[12] + (0.325*t6463 - 1.*t43574*t6463 - 1.*t44692*t6463)*var2[13];
  p_output1[43]=(t43922*t43935 + t43961*t44720 + t43467*(t43768*t44720 + t43784*t44729 + t43922*t44760 + t10714*t44765 + t44810 + t44813) + t43922*(t43997 + t43998 + t43999 - 1.*t43467*t44760 - 1.*t33421*t44765 + t44817))*var2[3] + (t10605*t44108 + t44112*t44725 + t10794*(t43752*t44718 + t10637*t44742 + t44786 + t44788 + t44810 + t44813) + t10605*(t43997 + t44167 + t44168 - 1.*t10807*t44742 + t44781 + t44817))*var2[4] + (t10610*t44309*t44453 + t10610*t44322*t7131 + t10610*(t44167 + t44397 + t44398 - 1.*t10598*t44478*t44707 + t44780 + t44781)*t7131 + t10598*t10610*(t44785 + t44786 + t44788 + t44790 - 1.*t43748*t44453*t6461 + t44478*t44707*t7131))*var2[5] + (t10598*t44580 + t44589*t7131 + t10598*(t44398 - 1.*t10598*t44707 + t44780 - 1.*t43582*t7131) + t10791*(t43582*t44453 + t44785 + t44790 + t44707*t7131))*var2[12];
  p_output1[44]=t43922*var2[0] + t10726*var2[1] + (t10609*t10714 + t10605*t1969)*var2[2] + (t43982*t44720 + t43922*(t43777*t44760 + t10745*t44765 + t44869) + t43777*(-1.*t43768*t44720 - 1.*t43784*t44729 - 1.*t43922*t44760 - 1.*t10714*t44765 + t44872 + t44875))*var2[3] + (t44153*t44725 + t10610*t2456*(-1.*t43752*t44718 - 1.*t10637*t44742 + t44849 + t44851 + t44872 + t44875) + t10605*(-1.*t10603*t10610*t44742 + t44869 + t10610*t44707*t6461))*var2[4] + (t10610*t44381*t44453 + t6461*(-1.*t10598*t44703 + t44849 + t44851 + t43748*t44453*t6461 - 1.*t43734*t7131 - 1.*t44478*t44707*t7131))*var2[5] - 0.068*t7131*var2[12] + (0.325*t7032 - 1.*t43574*t7032 - 1.*t44692*t7032)*var2[13];
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 18, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "dJh_FrFoot_DiagonalStance.hh"

namespace SymFunction
{

void dJh_FrFoot_DiagonalStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
