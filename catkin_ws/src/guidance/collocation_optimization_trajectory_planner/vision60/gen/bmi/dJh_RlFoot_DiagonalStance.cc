/*
 * Automatically Generated from Mathematica.
 * Tue 7 Jun 2022 14:10:39 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t39060;
  double t34842;
  double t34844;
  double t43716;
  double t39056;
  double t43800;
  double t43889;
  double t34581;
  double t43906;
  double t43910;
  double t43947;
  double t34582;
  double t43963;
  double t43967;
  double t43893;
  double t43964;
  double t43965;
  double t6344;
  double t43968;
  double t43969;
  double t43970;
  double t43972;
  double t43974;
  double t43975;
  double t44076;
  double t44080;
  double t44082;
  double t44095;
  double t44097;
  double t44098;
  double t44122;
  double t44123;
  double t44124;
  double t44121;
  double t44126;
  double t44127;
  double t44130;
  double t44131;
  double t44132;
  double t44133;
  double t44136;
  double t44137;
  double t44150;
  double t44154;
  double t44155;
  double t44172;
  double t44174;
  double t44175;
  double t44177;
  double t44179;
  double t44180;
  double t44181;
  double t44182;
  double t44183;
  double t44171;
  double t44176;
  double t44184;
  double t44185;
  double t44170;
  double t44187;
  double t44188;
  double t44190;
  double t44191;
  double t44194;
  double t44198;
  double t44200;
  double t44205;
  double t44206;
  double t44209;
  double t44210;
  double t44211;
  double t44213;
  double t44215;
  double t44216;
  double t44217;
  double t44218;
  double t44240;
  double t44241;
  double t44243;
  double t44233;
  double t44234;
  double t44235;
  double t44229;
  double t44230;
  double t44231;
  double t44162;
  double t44164;
  double t44165;
  double t44189;
  double t44223;
  double t44224;
  double t44253;
  double t44258;
  double t44262;
  double t44245;
  double t44248;
  double t44249;
  double t44317;
  double t44318;
  double t44323;
  double t44279;
  double t44284;
  double t44285;
  double t44396;
  double t44399;
  double t44400;
  double t44266;
  double t44294;
  double t44415;
  double t44416;
  double t44418;
  double t44420;
  double t44429;
  double t44430;
  double t44431;
  double t44270;
  double t44275;
  double t44277;
  double t44434;
  double t44436;
  double t44296;
  double t44298;
  double t44299;
  double t44331;
  double t44347;
  double t44505;
  double t44513;
  double t44332;
  double t44334;
  double t44335;
  double t44541;
  double t44547;
  double t44349;
  double t44350;
  double t44352;
  double t44369;
  double t44382;
  double t44601;
  double t44370;
  double t44371;
  double t44372;
  double t44606;
  double t44611;
  double t44383;
  double t44385;
  double t44388;
  double t44410;
  double t44646;
  double t44647;
  double t44648;
  double t44651;
  double t44652;
  double t44425;
  double t44677;
  double t44678;
  double t44679;
  double t44411;
  double t44412;
  double t44650;
  double t44653;
  double t44658;
  double t44659;
  double t44426;
  double t44427;
  double t44693;
  double t44694;
  double t44698;
  double t44704;
  double t44710;
  double t44730;
  double t44731;
  double t44732;
  double t44734;
  double t44736;
  double t44737;
  double t44739;
  double t44743;
  double t44748;
  double t44752;
  double t44753;
  double t44754;
  double t44529;
  double t44522;
  double t44756;
  double t44757;
  double t44761;
  double t44792;
  double t44793;
  double t44523;
  double t44524;
  double t44798;
  double t44799;
  double t44533;
  double t44537;
  double t44828;
  double t44830;
  double t44672;
  double t44673;
  double t44674;
  double t44835;
  double t44837;
  double t44771;
  double t44772;
  double t44773;
  double t44596;
  double t44614;
  double t44597;
  double t44598;
  double t44871;
  double t44873;
  double t44695;
  double t44879;
  double t44880;
  double t44615;
  double t44616;
  double t44901;
  double t44905;
  double t44909;
  double t44911;
  double t44643;
  double t44644;
  double t44935;
  double t44937;
  double t44938;
  double t44954;
  double t44955;
  double t44142;
  double t44143;
  double t44146;
  double t44946;
  double t44947;
  double t44948;
  double t44949;
  double t44944;
  double t44953;
  double t44956;
  double t44979;
  double t44980;
  double t44981;
  double t44970;
  double t44971;
  double t44972;
  double t44975;
  double t44976;
  double t44977;
  double t44987;
  double t44988;
  double t44989;
  double t44982;
  double t44985;
  double t44991;
  double t44997;
  double t44998;
  double t44999;
  double t45001;
  double t45003;
  double t45004;
  double t45006;
  double t45007;
  double t45008;
  double t44803;
  double t44805;
  double t44806;
  double t44808;
  double t44809;
  double t44811;
  double t44957;
  double t44664;
  double t44667;
  double t45029;
  double t45030;
  double t45038;
  double t45035;
  double t45027;
  double t45031;
  double t45063;
  double t45066;
  double t45069;
  double t45013;
  double t45014;
  double t45015;
  double t44865;
  double t44866;
  double t45093;
  double t45113;
  double t45117;
  double t45138;
  double t45139;
  double t45140;
  double t45153;
  double t45154;
  double t45155;
  double t45164;
  double t45165;
  double t45166;
  double t45170;
  double t45171;
  double t45172;
  double t45174;
  double t45175;
  double t45176;
  double t45150;
  double t45151;
  double t45156;
  double t45191;
  double t45192;
  double t45194;
  double t45187;
  double t45188;
  double t45189;
  double t45195;
  double t45198;
  double t45205;
  double t45206;
  double t45207;
  double t45210;
  double t45211;
  double t45212;
  double t44884;
  double t44885;
  double t45043;
  double t45044;
  double t45050;
  double t45051;
  double t45225;
  double t45231;
  double t45236;
  double t45232;
  double t45234;
  double t45226;
  double t45255;
  double t45258;
  double t45163;
  double t45167;
  double t45168;
  double t45263;
  double t44087;
  double t44089;
  double t44090;
  double t45292;
  double t45294;
  double t45310;
  double t45313;
  double t45316;
  t39060 = Cos(var1[10]);
  t34842 = Cos(var1[11]);
  t34844 = Sin(var1[10]);
  t43716 = Sin(var1[11]);
  t39056 = t34842*t34844;
  t43800 = -1.*t39060*t43716;
  t43889 = t39056 + t43800;
  t34581 = Cos(var1[5]);
  t43906 = t39060*t34842;
  t43910 = t34844*t43716;
  t43947 = t43906 + t43910;
  t34582 = Sin(var1[9]);
  t43963 = Sin(var1[5]);
  t43967 = Cos(var1[3]);
  t43893 = -1.*t34581*t34582*t43889;
  t43964 = t43947*t43963;
  t43965 = t43893 + t43964;
  t6344 = Sin(var1[3]);
  t43968 = Cos(var1[9]);
  t43969 = Cos(var1[4]);
  t43970 = t43968*t43969*t43889;
  t43972 = Sin(var1[4]);
  t43974 = t34581*t43947;
  t43975 = t34582*t43889*t43963;
  t44076 = t43974 + t43975;
  t44080 = -1.*t43972*t44076;
  t44082 = t43970 + t44080;
  t44095 = t43969*t34582;
  t44097 = t43968*t43972*t43963;
  t44098 = t44095 + t44097;
  t44122 = -1.*t34842*t34844;
  t44123 = t39060*t43716;
  t44124 = t44122 + t44123;
  t44121 = -1.*t34581*t34582*t43947;
  t44126 = t44124*t43963;
  t44127 = t44121 + t44126;
  t44130 = t43968*t43969*t43947;
  t44131 = t34581*t44124;
  t44132 = t34582*t43947*t43963;
  t44133 = t44131 + t44132;
  t44136 = -1.*t43972*t44133;
  t44137 = t44130 + t44136;
  t44150 = -1.*t43968*t43889*t43972;
  t44154 = -1.*t43969*t44076;
  t44155 = t44150 + t44154;
  t44172 = -0.0641*t34842;
  t44174 = -0.28*t43716;
  t44175 = t44172 + t44174;
  t44177 = -1.*t34842;
  t44179 = 1. + t44177;
  t44180 = -0.575*t44179;
  t44181 = -0.295*t34842;
  t44182 = -0.0641*t43716;
  t44183 = t44180 + t44181 + t44182;
  t44171 = 0.325*t34844;
  t44176 = t39060*t44175;
  t44184 = t34844*t44183;
  t44185 = t44171 + t44176 + t44184;
  t44170 = 0.068*t34582;
  t44187 = t43968*t44185;
  t44188 = t44170 + t44187;
  t44190 = -1.*t39060;
  t44191 = 1. + t44190;
  t44194 = -0.325*t44191;
  t44198 = -1.*t34844*t44175;
  t44200 = t39060*t44183;
  t44205 = t44194 + t44198 + t44200;
  t44206 = t34581*t44205;
  t44209 = -1.*t43968;
  t44210 = 1. + t44209;
  t44211 = 0.1575*t44210;
  t44213 = 0.2255*t43968;
  t44215 = -1.*t34582*t44185;
  t44216 = t44211 + t44213 + t44215;
  t44217 = -1.*t44216*t43963;
  t44218 = t44206 + t44217;
  t44240 = t43969*t44188;
  t44241 = -1.*t43972*t44218;
  t44243 = t44240 + t44241;
  t44233 = t34582*t43972;
  t44234 = -1.*t43968*t43969*t43963;
  t44235 = t44233 + t44234;
  t44229 = t44188*t43972;
  t44230 = t43969*t44218;
  t44231 = t44229 + t44230;
  t44162 = t43968*t43947*t43972;
  t44164 = t43969*t44133;
  t44165 = t44162 + t44164;
  t44189 = -1.*t44188*t43972;
  t44223 = -1.*t43969*t44218;
  t44224 = t44189 + t44223;
  t44253 = t34581*t44216;
  t44258 = t44205*t43963;
  t44262 = t44253 + t44258;
  t44245 = -1.*t34582*t43972;
  t44248 = t43968*t43969*t43963;
  t44249 = t44245 + t44248;
  t44317 = t43968*t43889*t43972;
  t44318 = t43969*t44076;
  t44323 = t44317 + t44318;
  t44279 = -1.*t43968*t43947*t43972;
  t44284 = -1.*t43969*t44133;
  t44285 = t44279 + t44284;
  t44396 = t34581*t34582*t43889;
  t44399 = -1.*t43947*t43963;
  t44400 = t44396 + t44399;
  t44266 = -1.*t43968*t34581*t44262;
  t44294 = t44262*t44127;
  t44415 = -1.*t34581*t44216;
  t44416 = -1.*t44205*t43963;
  t44418 = t44415 + t44416;
  t44420 = t43968*t43963*t44262;
  t44429 = t34581*t34582*t43947;
  t44430 = -1.*t44124*t43963;
  t44431 = t44429 + t44430;
  t44270 = -1.*t44235*t44231;
  t44275 = -1.*t44098*t44243;
  t44277 = t44266 + t44270 + t44275;
  t44434 = t44218*t44127;
  t44436 = t44262*t44133;
  t44296 = t44231*t44165;
  t44298 = t44243*t44137;
  t44299 = t44294 + t44296 + t44298;
  t44331 = t44262*t43965;
  t44347 = -1.*t44262*t44127;
  t44505 = t44262*t44076;
  t44513 = t44218*t43965;
  t44332 = t44231*t44323;
  t44334 = t44243*t44082;
  t44335 = t44331 + t44332 + t44334;
  t44541 = -1.*t44218*t44127;
  t44547 = -1.*t44262*t44133;
  t44349 = -1.*t44231*t44165;
  t44350 = -1.*t44243*t44137;
  t44352 = t44347 + t44349 + t44350;
  t44369 = t43968*t34581*t44262;
  t44382 = -1.*t44262*t43965;
  t44601 = -1.*t43968*t43963*t44262;
  t44370 = t44235*t44231;
  t44371 = t44098*t44243;
  t44372 = t44369 + t44370 + t44371;
  t44606 = -1.*t44262*t44076;
  t44611 = -1.*t44218*t43965;
  t44383 = -1.*t44231*t44323;
  t44385 = -1.*t44243*t44082;
  t44388 = t44382 + t44383 + t44385;
  t44410 = -1.*t34582*t44188;
  t44646 = -0.068*t34582;
  t44647 = -1.*t43968*t44185;
  t44648 = t44646 + t44647;
  t44651 = 0.068*t43968;
  t44652 = t44651 + t44215;
  t44425 = t43968*t44188*t43947;
  t44677 = -1.*t43969*t34582*t43889;
  t44678 = -1.*t43968*t43889*t43972*t43963;
  t44679 = t44677 + t44678;
  t44411 = t43968*t43963*t44218;
  t44412 = t44410 + t44411 + t44266;
  t44650 = -1.*t43968*t44188;
  t44653 = -1.*t34582*t44652;
  t44658 = -1.*t34582*t44188*t43947;
  t44659 = t43968*t44652*t43947;
  t44426 = t44218*t44133;
  t44427 = t44425 + t44294 + t44426;
  t44693 = Power(t34581,2);
  t44694 = -1.*t43968*t44693*t44648;
  t44698 = t34581*t34582*t44262;
  t44704 = -1.*t43968*t34581*t43947*t44262;
  t44710 = t34581*t44648*t44127;
  t44730 = -1.*t34582*t43947*t43972;
  t44731 = t43968*t43969*t43947*t43963;
  t44732 = t44730 + t44731;
  t44734 = t44652*t43972;
  t44736 = -1.*t43969*t44648*t43963;
  t44737 = t44734 + t44736;
  t44739 = t43969*t44652;
  t44743 = t44648*t43972*t43963;
  t44748 = t44739 + t44743;
  t44752 = t43968*t43972;
  t44753 = t43969*t34582*t43963;
  t44754 = t44752 + t44753;
  t44529 = -1.*t43968*t44188*t43947;
  t44522 = t43968*t44188*t43889;
  t44756 = t43968*t43969;
  t44757 = -1.*t34582*t43972*t43963;
  t44761 = t44756 + t44757;
  t44792 = -1.*t34582*t44188*t43889;
  t44793 = t43968*t44652*t43889;
  t44523 = t44218*t44076;
  t44524 = t44522 + t44523 + t44331;
  t44798 = t34582*t44188*t43947;
  t44799 = -1.*t43968*t44652*t43947;
  t44533 = -1.*t44218*t44133;
  t44537 = t44529 + t44347 + t44533;
  t44828 = -1.*t43968*t34581*t43889*t44262;
  t44830 = t34581*t44648*t43965;
  t44672 = -1.*t34582*t43889*t43972;
  t44673 = t43968*t43969*t43889*t43963;
  t44674 = t44672 + t44673;
  t44835 = t43968*t34581*t43947*t44262;
  t44837 = -1.*t34581*t44648*t44127;
  t44771 = -1.*t43969*t34582*t43947;
  t44772 = -1.*t43968*t43947*t43972*t43963;
  t44773 = t44771 + t44772;
  t44596 = t34582*t44188;
  t44614 = -1.*t43968*t44188*t43889;
  t44597 = -1.*t43968*t43963*t44218;
  t44598 = t44596 + t44597 + t44369;
  t44871 = t43968*t44188;
  t44873 = t34582*t44652;
  t44695 = Power(t43963,2);
  t44879 = t34582*t44188*t43889;
  t44880 = -1.*t43968*t44652*t43889;
  t44615 = -1.*t44218*t44076;
  t44616 = t44614 + t44615 + t44382;
  t44901 = t43968*t44693*t44648;
  t44905 = -1.*t34581*t34582*t44262;
  t44909 = t43968*t34581*t43889*t44262;
  t44911 = -1.*t34581*t44648*t43965;
  t44643 = -1.*t43968*t44216;
  t44644 = t44410 + t44643;
  t44935 = -1.*t39060*t34842;
  t44937 = -1.*t34844*t43716;
  t44938 = t44935 + t44937;
  t44954 = 0.325*t39060;
  t44955 = t44954 + t44198 + t44200;
  t44142 = t43967*t44127;
  t44143 = -1.*t6344*t44137;
  t44146 = t44142 + t44143;
  t44946 = -0.325*t34844;
  t44947 = -1.*t39060*t44175;
  t44948 = -1.*t34844*t44183;
  t44949 = t44946 + t44947 + t44948;
  t44944 = t43968*t44188*t44124;
  t44953 = Power(t43968,2);
  t44956 = t44953*t44955*t43947;
  t44979 = -1.*t34581*t34582*t44955;
  t44980 = t44949*t43963;
  t44981 = t44979 + t44980;
  t44970 = -1.*t34581*t34582*t44124;
  t44971 = t44938*t43963;
  t44972 = t44970 + t44971;
  t44975 = t34581*t44949;
  t44976 = t34582*t44955*t43963;
  t44977 = t44975 + t44976;
  t44987 = t34581*t44938;
  t44988 = t34582*t44124*t43963;
  t44989 = t44987 + t44988;
  t44982 = -1.*t43968*t34581*t44981;
  t44985 = t44981*t44127;
  t44991 = t44262*t44972;
  t44997 = t43968*t44124*t43972;
  t44998 = t43969*t44989;
  t44999 = t44997 + t44998;
  t45001 = t43968*t44955*t43972;
  t45003 = t43969*t44977;
  t45004 = t45001 + t45003;
  t45006 = t43968*t43969*t44955;
  t45007 = -1.*t43972*t44977;
  t45008 = t45006 + t45007;
  t44803 = -1.*t44205*t44124;
  t44805 = t34582*t44216*t43947;
  t44806 = t44803 + t44529 + t44805;
  t44808 = -1.*t34582*t44216*t43889;
  t44809 = t44205*t43947;
  t44811 = t44522 + t44808 + t44809;
  t44957 = Power(t34582,2);
  t44664 = t44205*t44124;
  t44667 = -1.*t34582*t44216*t43947;
  t45029 = -1.*t44949*t44124;
  t45030 = -1.*t44205*t44938;
  t45038 = t44949*t43947;
  t45035 = t44953*t44955*t43889;
  t45027 = -1.*t43968*t44188*t44124;
  t45031 = -1.*t44953*t44955*t43947;
  t45063 = t44981*t43965;
  t45066 = -1.*t44981*t44127;
  t45069 = -1.*t44262*t44972;
  t45013 = t43968*t43969*t44124;
  t45014 = -1.*t43972*t44989;
  t45015 = t45013 + t45014;
  t44865 = t43968*t44216;
  t44866 = t44596 + t44865;
  t45093 = -1.*t44953*t44955*t43889;
  t45113 = t43968*t34581*t44981;
  t45117 = -1.*t44981*t43965;
  t45138 = -0.28*t34842;
  t45139 = 0.0641*t43716;
  t45140 = t45138 + t45139;
  t45153 = t34844*t44175;
  t45154 = t39060*t45140;
  t45155 = t45153 + t45154;
  t45164 = t34581*t43889;
  t45165 = t34582*t44938*t43963;
  t45166 = t45164 + t45165;
  t45170 = -1.*t34581*t34582*t44938;
  t45171 = t43889*t43963;
  t45172 = t45170 + t45171;
  t45174 = t43968*t43969*t44938;
  t45175 = -1.*t43972*t45166;
  t45176 = t45174 + t45175;
  t45150 = -1.*t34844*t45140;
  t45151 = t44176 + t45150;
  t45156 = t44953*t45155*t43947;
  t45191 = -1.*t34581*t34582*t45155;
  t45192 = t45151*t43963;
  t45194 = t45191 + t45192;
  t45187 = t34581*t45151;
  t45188 = t34582*t45155*t43963;
  t45189 = t45187 + t45188;
  t45195 = -1.*t43968*t34581*t45194;
  t45198 = t45194*t44127;
  t45205 = t43968*t45155*t43972;
  t45206 = t43969*t45189;
  t45207 = t45205 + t45206;
  t45210 = t43968*t43969*t45155;
  t45211 = -1.*t43972*t45189;
  t45212 = t45210 + t45211;
  t44884 = t34582*t44216*t43889;
  t44885 = -1.*t44205*t43947;
  t45043 = t44185*t43889;
  t45044 = t45043 + t44809;
  t45050 = -1.*t44185*t43947;
  t45051 = t44803 + t45050;
  t45225 = -1.*t45151*t44124;
  t45231 = t44205*t43889;
  t45236 = t45151*t43947;
  t45232 = t44953*t45155*t43889;
  t45234 = t43968*t44188*t44938;
  t45226 = -1.*t44953*t45155*t43947;
  t45255 = t44262*t45172;
  t45258 = t45194*t43965;
  t45163 = t43968*t44938*t43972;
  t45167 = t43969*t45166;
  t45168 = t45163 + t45167;
  t45263 = -1.*t45194*t44127;
  t44087 = t43967*t43965;
  t44089 = -1.*t6344*t44082;
  t44090 = t44087 + t44089;
  t45292 = -1.*t44953*t45155*t43889;
  t45294 = -1.*t43968*t44188*t44938;
  t45310 = t43968*t34581*t45194;
  t45313 = -1.*t44262*t45172;
  t45316 = -1.*t45194*t43965;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=(-1.*t43967*t44082 - 1.*t43965*t6344)*var2[1] + t44090*var2[2];
  p_output1[10]=(-1.*t43967*t44098 - 1.*t34581*t43968*t6344)*var2[1] + (t34581*t43967*t43968 - 1.*t44098*t6344)*var2[2];
  p_output1[11]=(-1.*t43967*t44137 - 1.*t44127*t6344)*var2[1] + t44146*var2[2];
  p_output1[12]=t44082*var2[0] - 1.*t44155*t6344*var2[1] + t43967*t44155*var2[2] + (t44165*(-1.*t44098*t44224 - 1.*t44098*t44231 - 1.*t44235*t44243 - 1.*t44243*t44249) + t44137*t44277 + t44235*(t44137*t44224 + t44137*t44231 + t44165*t44243 + t44243*t44285) + t44098*t44299)*var2[3];
  p_output1[13]=t44098*var2[0] - 1.*t44249*t6344*var2[1] + t43967*t44249*var2[2] + ((-1.*t44137*t44224 - 1.*t44137*t44231 - 1.*t44165*t44243 - 1.*t44243*t44285)*t44323 + t44165*(t44082*t44224 + t44082*t44231 + t44155*t44243 + t44243*t44323) + t44137*t44335 + t44082*t44352)*var2[3];
  p_output1[14]=t44137*var2[0] - 1.*t44285*t6344*var2[1] + t43967*t44285*var2[2] + ((t44098*t44224 + t44098*t44231 + t44235*t44243 + t44243*t44249)*t44323 + t44235*(-1.*t44082*t44224 - 1.*t44082*t44231 - 1.*t44155*t44243 - 1.*t44243*t44323) + t44082*t44372 + t44098*t44388)*var2[3];
  p_output1[15]=t43969*t44400*var2[0] + (t43967*t44076 + t43972*t44400*t6344)*var2[1] + (-1.*t43967*t43972*t44400 + t44076*t6344)*var2[2] + (-1.*t34581*t43968*t43969*t44299 + t44165*(-1.*t34581*t43968*t44218 + t34581*t43968*t43969*t44231 - 1.*t34581*t43968*t43972*t44243 + t43972*t44098*t44418 - 1.*t43969*t44235*t44418 + t44420) + t43969*t44277*t44431 + t44235*(-1.*t43972*t44137*t44418 + t43969*t44165*t44418 + t43969*t44231*t44431 - 1.*t43972*t44243*t44431 + t44434 + t44436))*var2[3] + (t44133*t44412 + t44127*(t43963*t43968*t44418 + t44420) - 1.*t43963*t43968*t44427 + t34581*t43968*(t44133*t44418 + t44218*t44431 + t44434 + t44436))*var2[4];
  p_output1[16]=-1.*t34581*t43968*t43969*var2[0] + (-1.*t43963*t43967*t43968 - 1.*t34581*t43968*t43972*t6344)*var2[1] + (t34581*t43967*t43968*t43972 - 1.*t43963*t43968*t6344)*var2[2] + (t43969*t44352*t44400 + t43969*t44335*t44431 + t44165*(t43969*t44231*t44400 - 1.*t43972*t44243*t44400 - 1.*t43972*t44082*t44418 + t43969*t44323*t44418 + t44505 + t44513) + t44323*(t43972*t44137*t44418 - 1.*t43969*t44165*t44418 - 1.*t43969*t44231*t44431 + t43972*t44243*t44431 + t44541 + t44547))*var2[3] + (t44127*(t44218*t44400 + t44076*t44418 + t44505 + t44513) + t44133*t44524 + t44076*t44537 + t43965*(-1.*t44133*t44418 - 1.*t44218*t44431 + t44541 + t44547))*var2[4];
  p_output1[17]=t43969*t44431*var2[0] + (t43967*t44133 + t43972*t44431*t6344)*var2[1] + (-1.*t43967*t43972*t44431 + t44133*t6344)*var2[2] + (-1.*t34581*t43968*t43969*t44388 + t43969*t44372*t44400 + t44323*(t34581*t43968*t44218 - 1.*t34581*t43968*t43969*t44231 + t34581*t43968*t43972*t44243 - 1.*t43972*t44098*t44418 + t43969*t44235*t44418 + t44601) + t44235*(-1.*t43969*t44231*t44400 + t43972*t44243*t44400 + t43972*t44082*t44418 - 1.*t43969*t44323*t44418 + t44606 + t44611))*var2[3] + (t44076*t44598 + t43965*(-1.*t43963*t43968*t44418 + t44601) + t34581*t43968*(-1.*t44218*t44400 - 1.*t44076*t44418 + t44606 + t44611) - 1.*t43963*t43968*t44616)*var2[4];
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=t44674*var2[0] + (-1.*t34581*t43889*t43967*t43968 - 1.*t44679*t6344)*var2[1] + (t43967*t44679 - 1.*t34581*t43889*t43968*t6344)*var2[2] + (t44277*t44732 + t44299*t44754 + t44165*(t44694 + t44698 - 1.*t44235*t44737 - 1.*t44098*t44748 - 1.*t44231*t44754 - 1.*t44243*t44761) + t44235*(t44704 + t44710 + t44231*t44732 + t44165*t44737 + t44137*t44748 + t44243*t44773))*var2[3] + (-1.*t34581*t43947*t43968*t44412 - 1.*t34581*t34582*t44427 + t44127*(-1.*t34582*t43963*t44218 + t44650 + t44653 + t44694 - 1.*t43968*t44648*t44695 + t44698) + t34581*t43968*(t43947*t43963*t43968*t44218 - 1.*t43963*t44133*t44648 + t44658 + t44659 + t44704 + t44710))*var2[4] + (-1.*t34582*t43947*t44644 + t43947*t43968*(t34582*t44216 - 1.*t43968*t44648 + t44650 + t44653) + t34582*(-1.*t43947*t43968*t44216 - 1.*t34582*t43947*t44648 + t44658 + t44659) + t43968*(t44425 + t44664 + t44667))*var2[5];
  p_output1[28]=t44754*var2[0] + (-1.*t34581*t34582*t43967 - 1.*t44761*t6344)*var2[1] + (t43967*t44761 - 1.*t34581*t34582*t6344)*var2[2] + (t44352*t44674 + t44335*t44732 + t44165*(t44231*t44674 + t44243*t44679 + t44323*t44737 + t44082*t44748 + t44828 + t44830) + t44323*(-1.*t44231*t44732 - 1.*t44165*t44737 - 1.*t44137*t44748 - 1.*t44243*t44773 + t44835 + t44837))*var2[3] + (-1.*t34581*t43947*t43968*t44524 - 1.*t34581*t43889*t43968*t44537 + t44127*(t43889*t43963*t43968*t44218 - 1.*t43963*t44076*t44648 + t44792 + t44793 + t44828 + t44830) + t43965*(-1.*t43947*t43963*t43968*t44218 + t43963*t44133*t44648 + t44798 + t44799 + t44835 + t44837))*var2[4] + (t43947*t43968*(-1.*t43889*t43968*t44216 - 1.*t34582*t43889*t44648 + t44792 + t44793) + t43889*t43968*(t43947*t43968*t44216 + t34582*t43947*t44648 + t44798 + t44799) - 1.*t34582*t43889*t44806 - 1.*t34582*t43947*t44811)*var2[5];
  p_output1[29]=t44732*var2[0] + (-1.*t34581*t43947*t43967*t43968 - 1.*t44773*t6344)*var2[1] + (t43967*t44773 - 1.*t34581*t43947*t43968*t6344)*var2[2] + (t44372*t44674 + t44388*t44754 + t44323*(t44235*t44737 + t44098*t44748 + t44231*t44754 + t44243*t44761 + t44901 + t44905) + t44235*(-1.*t44231*t44674 - 1.*t44243*t44679 - 1.*t44323*t44737 - 1.*t44082*t44748 + t44909 + t44911))*var2[3] + (-1.*t34581*t43889*t43968*t44598 - 1.*t34581*t34582*t44616 + t43965*(t34582*t43963*t44218 + t43968*t44648*t44695 + t44871 + t44873 + t44901 + t44905) + t34581*t43968*(-1.*t43889*t43963*t43968*t44218 + t43963*t44076*t44648 + t44879 + t44880 + t44909 + t44911))*var2[4] + (-1.*t34582*t43889*t44866 + t43889*t43968*(-1.*t34582*t44216 + t43968*t44648 + t44871 + t44873) + t34582*(t43889*t43968*t44216 + t34582*t43889*t44648 + t44879 + t44880) + t43968*(t44614 + t44884 + t44885))*var2[5];
  p_output1[30]=t44165*var2[0] + t44146*var2[1] + (t43967*t44137 + t44127*t6344)*var2[2] + (t44277*t44999 + t44165*(t44982 - 1.*t44235*t45004 - 1.*t44098*t45008) + t44235*(t44985 + t44991 + t44231*t44999 + t44165*t45004 + t44137*t45008 + t44243*t45015))*var2[3] + (t44412*t44972 + t44127*(-1.*t34582*t43968*t44955 + t43963*t43968*t44977 + t44982) + t34581*t43968*(t44944 + t44956 + t44133*t44977 + t44985 + t44218*t44989 + t44991))*var2[4] + (t43968*t44124*t44644 + t34582*(-1.*t34582*t44124*t44216 + t44205*t44938 + t44944 + t44124*t44949 + t44956 + t43947*t44955*t44957))*var2[5] + (-0.1575*t43947 - 0.2255*t44938)*var2[9];
  p_output1[31]=(t44165*t44352 + t44335*t44999 + t44165*(t44294 + t44296 + t44298 + t44323*t45004 + t44082*t45008 + t45063) + t44323*(-1.*t44231*t44999 - 1.*t44165*t45004 - 1.*t44137*t45008 - 1.*t44243*t45015 + t45066 + t45069))*var2[3] + (t44127*t44537 + t44524*t44972 + t44127*(t44294 + t44425 + t44426 + t44076*t44977 + t45035 + t45063) + t43965*(-1.*t44133*t44977 - 1.*t44218*t44989 + t45027 + t45031 + t45066 + t45069))*var2[4] + (t43947*t43968*t44806 + t43968*t44124*t44811 + t43889*t43968*(t34582*t44124*t44216 - 1.*t43947*t44955*t44957 + t45027 + t45029 + t45030 + t45031) + t43947*t43968*(t44425 + t44664 + t44667 + t43889*t44955*t44957 + t45035 + t45038))*var2[5] + (t43947*(-1.*t44124*t44185 - 1.*t43947*t44955 + t45029 + t45030) + t44124*(t43947*t44185 + t44664 + t43889*t44955 + t45038) + t44938*t45044 + t44124*t45051)*var2[9];
  p_output1[32]=t44999*var2[0] + (t43967*t44972 - 1.*t45015*t6344)*var2[1] + (t43967*t45015 + t44972*t6344)*var2[2] + (t44165*t44372 + t44323*(t44235*t45004 + t44098*t45008 + t45113) + t44235*(t44347 + t44349 + t44350 - 1.*t44323*t45004 - 1.*t44082*t45008 + t45117))*var2[3] + (t44127*t44598 + t43965*(t34582*t43968*t44955 - 1.*t43963*t43968*t44977 + t45113) + t34581*t43968*(t44347 + t44529 + t44533 - 1.*t44076*t44977 + t45093 + t45117))*var2[4] + (t43947*t43968*t44866 + t34582*(t44529 + t44803 + t44805 - 1.*t43947*t44949 - 1.*t43889*t44955*t44957 + t45093))*var2[5] + 0.068*t44124*var2[9];
  p_output1[33]=t45168*var2[0] + (t43967*t45172 - 1.*t45176*t6344)*var2[1] + (t43967*t45176 + t45172*t6344)*var2[2] + (t44277*t44323 + t44165*(t45195 - 1.*t44235*t45207 - 1.*t44098*t45212) + t44235*(t44331 + t44332 + t44334 + t45198 + t44165*t45207 + t44137*t45212))*var2[3] + (t43965*t44412 + t44127*(-1.*t34582*t43968*t45155 + t43963*t43968*t45189 + t45195) + t34581*t43968*(t44331 + t44522 + t44523 + t45156 + t44133*t45189 + t45198))*var2[4] + (t43889*t43968*t44644 + t34582*(t44522 + t44808 + t44809 + t44124*t45151 + t43947*t44957*t45155 + t45156))*var2[5] + (-0.2255*t43947 - 0.1575*t44938)*var2[9] + (-0.325*t34842 - 1.*t34842*t44183 - 1.*t34842*t45140)*var2[10];
  p_output1[34]=(t44323*t44335 + t44352*t45168 + t44165*(t44231*t45168 + t44243*t45176 + t44323*t45207 + t44082*t45212 + t45255 + t45258) + t44323*(t44382 + t44383 + t44385 - 1.*t44165*t45207 - 1.*t44137*t45212 + t45263))*var2[3] + (t43965*t44524 + t44537*t45172 + t44127*(t44218*t45166 + t44076*t45189 + t45232 + t45234 + t45255 + t45258) + t43965*(t44382 + t44614 + t44615 - 1.*t44133*t45189 + t45226 + t45263))*var2[4] + (t43889*t43968*t44811 + t43968*t44806*t44938 + t43889*t43968*(t44614 + t44884 + t44885 - 1.*t43947*t44957*t45155 + t45225 + t45226) + t43947*t43968*(-1.*t34582*t44216*t44938 + t43889*t44957*t45155 + t45231 + t45232 + t45234 + t45236))*var2[5] + (t43947*t45044 + t43889*t45051 + t43947*(-1.*t43889*t44185 + t44885 - 1.*t43947*t45155 + t45225) + t44124*(t44185*t44938 + t43889*t45155 + t45231 + t45236))*var2[9];
  p_output1[35]=t44323*var2[0] + t44090*var2[1] + (t43967*t44082 + t43965*t6344)*var2[2] + (t44372*t45168 + t44323*(t44235*t45207 + t44098*t45212 + t45310) + t44235*(-1.*t44231*t45168 - 1.*t44243*t45176 - 1.*t44323*t45207 - 1.*t44082*t45212 + t45313 + t45316))*var2[3] + (t44598*t45172 + t43965*(t34582*t43968*t45155 - 1.*t43963*t43968*t45189 + t45310) + t34581*t43968*(-1.*t44218*t45166 - 1.*t44076*t45189 + t45292 + t45294 + t45313 + t45316))*var2[4] + (t43968*t44866*t44938 + t34582*(-1.*t43889*t44205 + t34582*t44216*t44938 - 1.*t43947*t45151 - 1.*t43889*t44957*t45155 + t45292 + t45294))*var2[5] + 0.068*t43889*var2[9] + (-0.325*t43716 - 1.*t43716*t44183 - 1.*t43716*t45140)*var2[10];
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 18, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "dJh_RlFoot_DiagonalStance.hh"

namespace SymFunction
{

void dJh_RlFoot_DiagonalStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
