/*
 * Automatically Generated from Mathematica.
 * Fri 10 Jun 2022 21:56:17 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t8232;
  double t1460;
  double t1465;
  double t8433;
  double t1476;
  double t8590;
  double t10217;
  double t626;
  double t16858;
  double t17425;
  double t25337;
  double t1459;
  double t26666;
  double t31712;
  double t11908;
  double t26673;
  double t28876;
  double t400;
  double t31717;
  double t32042;
  double t32045;
  double t32555;
  double t32689;
  double t32859;
  double t34543;
  double t34592;
  double t34594;
  double t40149;
  double t40158;
  double t40160;
  double t40239;
  double t40270;
  double t40280;
  double t40225;
  double t40292;
  double t40299;
  double t40371;
  double t40380;
  double t45564;
  double t48408;
  double t52131;
  double t52148;
  double t53064;
  double t53065;
  double t53069;
  double t53091;
  double t53094;
  double t53096;
  double t53098;
  double t53099;
  double t53100;
  double t53101;
  double t53114;
  double t53117;
  double t53090;
  double t53097;
  double t53118;
  double t53119;
  double t53087;
  double t53126;
  double t53128;
  double t53131;
  double t53132;
  double t53141;
  double t53167;
  double t53172;
  double t53178;
  double t53182;
  double t53187;
  double t53192;
  double t53209;
  double t53214;
  double t53220;
  double t53224;
  double t54083;
  double t54096;
  double t57138;
  double t57155;
  double t57157;
  double t57123;
  double t57126;
  double t57133;
  double t55981;
  double t56091;
  double t56715;
  double t53076;
  double t53084;
  double t53085;
  double t53130;
  double t54133;
  double t54348;
  double t57207;
  double t57256;
  double t57260;
  double t57173;
  double t57182;
  double t57184;
  double t59710;
  double t59716;
  double t59718;
  double t59558;
  double t59560;
  double t59566;
  double t60439;
  double t60441;
  double t60449;
  double t59439;
  double t59622;
  double t60738;
  double t60741;
  double t60744;
  double t60747;
  double t60810;
  double t60811;
  double t60817;
  double t59486;
  double t59490;
  double t59498;
  double t60823;
  double t60829;
  double t59623;
  double t59632;
  double t59639;
  double t59783;
  double t59972;
  double t62834;
  double t62911;
  double t59784;
  double t59817;
  double t59859;
  double t63099;
  double t63140;
  double t59981;
  double t59985;
  double t59992;
  double t60157;
  double t60313;
  double t64890;
  double t60189;
  double t60214;
  double t60232;
  double t64897;
  double t64908;
  double t60315;
  double t60317;
  double t60322;
  double t60710;
  double t65290;
  double t65291;
  double t65295;
  double t65307;
  double t65311;
  double t60771;
  double t65346;
  double t65347;
  double t65348;
  double t60726;
  double t60732;
  double t65303;
  double t65312;
  double t65320;
  double t65321;
  double t60785;
  double t60786;
  double t65357;
  double t65358;
  double t65364;
  double t65370;
  double t65371;
  double t65378;
  double t65379;
  double t65380;
  double t65382;
  double t65383;
  double t65384;
  double t65386;
  double t65572;
  double t65573;
  double t65575;
  double t65578;
  double t65579;
  double t62961;
  double t62942;
  double t65583;
  double t65584;
  double t65585;
  double t65608;
  double t65609;
  double t62954;
  double t62959;
  double t65617;
  double t65618;
  double t62971;
  double t63044;
  double t65645;
  double t65648;
  double t65336;
  double t65337;
  double t65339;
  double t65662;
  double t65663;
  double t65594;
  double t65595;
  double t65596;
  double t64885;
  double t65094;
  double t64886;
  double t64887;
  double t65843;
  double t65844;
  double t65360;
  double t65849;
  double t65852;
  double t65095;
  double t65096;
  double t65884;
  double t65887;
  double t65895;
  double t65897;
  double t65287;
  double t65288;
  double t65980;
  double t65981;
  double t65982;
  double t66001;
  double t66003;
  double t53049;
  double t53055;
  double t53056;
  double t65993;
  double t65994;
  double t65995;
  double t65996;
  double t65991;
  double t66000;
  double t66007;
  double t66035;
  double t66036;
  double t66037;
  double t66020;
  double t66021;
  double t66025;
  double t66031;
  double t66032;
  double t66033;
  double t66048;
  double t66049;
  double t66056;
  double t66040;
  double t66047;
  double t66064;
  double t66070;
  double t66071;
  double t66072;
  double t66081;
  double t66082;
  double t66084;
  double t66086;
  double t66087;
  double t66088;
  double t65622;
  double t65623;
  double t65624;
  double t65626;
  double t65627;
  double t65628;
  double t66008;
  double t65325;
  double t65326;
  double t66120;
  double t66121;
  double t66128;
  double t66126;
  double t66116;
  double t66122;
  double t66155;
  double t66158;
  double t66160;
  double t66099;
  double t66100;
  double t66101;
  double t65835;
  double t65839;
  double t66185;
  double t66207;
  double t66211;
  double t66230;
  double t66231;
  double t66232;
  double t66244;
  double t66245;
  double t66246;
  double t66254;
  double t66255;
  double t66256;
  double t66260;
  double t66261;
  double t66262;
  double t66264;
  double t66265;
  double t66266;
  double t66241;
  double t66242;
  double t66247;
  double t66280;
  double t66281;
  double t66282;
  double t66276;
  double t66277;
  double t66278;
  double t66283;
  double t66286;
  double t66293;
  double t66294;
  double t66295;
  double t66297;
  double t66298;
  double t66299;
  double t65860;
  double t65863;
  double t66133;
  double t66134;
  double t66142;
  double t66143;
  double t66312;
  double t66317;
  double t66322;
  double t66318;
  double t66320;
  double t66313;
  double t66340;
  double t66343;
  double t66253;
  double t66257;
  double t66258;
  double t66347;
  double t34857;
  double t34862;
  double t35469;
  double t66376;
  double t66378;
  double t66394;
  double t66397;
  double t66400;
  t8232 = Cos(var1[10]);
  t1460 = Cos(var1[11]);
  t1465 = Sin(var1[10]);
  t8433 = Sin(var1[11]);
  t1476 = t1460*t1465;
  t8590 = -1.*t8232*t8433;
  t10217 = t1476 + t8590;
  t626 = Cos(var1[5]);
  t16858 = t8232*t1460;
  t17425 = t1465*t8433;
  t25337 = t16858 + t17425;
  t1459 = Sin(var1[9]);
  t26666 = Sin(var1[5]);
  t31712 = Cos(var1[3]);
  t11908 = -1.*t626*t1459*t10217;
  t26673 = t25337*t26666;
  t28876 = t11908 + t26673;
  t400 = Sin(var1[3]);
  t31717 = Cos(var1[9]);
  t32042 = Cos(var1[4]);
  t32045 = t31717*t32042*t10217;
  t32555 = Sin(var1[4]);
  t32689 = t626*t25337;
  t32859 = t1459*t10217*t26666;
  t34543 = t32689 + t32859;
  t34592 = -1.*t32555*t34543;
  t34594 = t32045 + t34592;
  t40149 = t32042*t1459;
  t40158 = t31717*t32555*t26666;
  t40160 = t40149 + t40158;
  t40239 = -1.*t1460*t1465;
  t40270 = t8232*t8433;
  t40280 = t40239 + t40270;
  t40225 = -1.*t626*t1459*t25337;
  t40292 = t40280*t26666;
  t40299 = t40225 + t40292;
  t40371 = t31717*t32042*t25337;
  t40380 = t626*t40280;
  t45564 = t1459*t25337*t26666;
  t48408 = t40380 + t45564;
  t52131 = -1.*t32555*t48408;
  t52148 = t40371 + t52131;
  t53064 = -1.*t31717*t10217*t32555;
  t53065 = -1.*t32042*t34543;
  t53069 = t53064 + t53065;
  t53091 = -0.0641*t1460;
  t53094 = -0.28*t8433;
  t53096 = t53091 + t53094;
  t53098 = -1.*t1460;
  t53099 = 1. + t53098;
  t53100 = -0.575*t53099;
  t53101 = -0.295*t1460;
  t53114 = -0.0641*t8433;
  t53117 = t53100 + t53101 + t53114;
  t53090 = 0.325*t1465;
  t53097 = t8232*t53096;
  t53118 = t1465*t53117;
  t53119 = t53090 + t53097 + t53118;
  t53087 = 0.068*t1459;
  t53126 = t31717*t53119;
  t53128 = t53087 + t53126;
  t53131 = -1.*t8232;
  t53132 = 1. + t53131;
  t53141 = -0.325*t53132;
  t53167 = -1.*t1465*t53096;
  t53172 = t8232*t53117;
  t53178 = t53141 + t53167 + t53172;
  t53182 = t626*t53178;
  t53187 = -1.*t31717;
  t53192 = 1. + t53187;
  t53209 = 0.1575*t53192;
  t53214 = 0.2255*t31717;
  t53220 = -1.*t1459*t53119;
  t53224 = t53209 + t53214 + t53220;
  t54083 = -1.*t53224*t26666;
  t54096 = t53182 + t54083;
  t57138 = t32042*t53128;
  t57155 = -1.*t32555*t54096;
  t57157 = t57138 + t57155;
  t57123 = t1459*t32555;
  t57126 = -1.*t31717*t32042*t26666;
  t57133 = t57123 + t57126;
  t55981 = t53128*t32555;
  t56091 = t32042*t54096;
  t56715 = t55981 + t56091;
  t53076 = t31717*t25337*t32555;
  t53084 = t32042*t48408;
  t53085 = t53076 + t53084;
  t53130 = -1.*t53128*t32555;
  t54133 = -1.*t32042*t54096;
  t54348 = t53130 + t54133;
  t57207 = t626*t53224;
  t57256 = t53178*t26666;
  t57260 = t57207 + t57256;
  t57173 = -1.*t1459*t32555;
  t57182 = t31717*t32042*t26666;
  t57184 = t57173 + t57182;
  t59710 = t31717*t10217*t32555;
  t59716 = t32042*t34543;
  t59718 = t59710 + t59716;
  t59558 = -1.*t31717*t25337*t32555;
  t59560 = -1.*t32042*t48408;
  t59566 = t59558 + t59560;
  t60439 = t626*t1459*t10217;
  t60441 = -1.*t25337*t26666;
  t60449 = t60439 + t60441;
  t59439 = -1.*t31717*t626*t57260;
  t59622 = t57260*t40299;
  t60738 = -1.*t626*t53224;
  t60741 = -1.*t53178*t26666;
  t60744 = t60738 + t60741;
  t60747 = t31717*t26666*t57260;
  t60810 = t626*t1459*t25337;
  t60811 = -1.*t40280*t26666;
  t60817 = t60810 + t60811;
  t59486 = -1.*t57133*t56715;
  t59490 = -1.*t40160*t57157;
  t59498 = t59439 + t59486 + t59490;
  t60823 = t54096*t40299;
  t60829 = t57260*t48408;
  t59623 = t56715*t53085;
  t59632 = t57157*t52148;
  t59639 = t59622 + t59623 + t59632;
  t59783 = t57260*t28876;
  t59972 = -1.*t57260*t40299;
  t62834 = t57260*t34543;
  t62911 = t54096*t28876;
  t59784 = t56715*t59718;
  t59817 = t57157*t34594;
  t59859 = t59783 + t59784 + t59817;
  t63099 = -1.*t54096*t40299;
  t63140 = -1.*t57260*t48408;
  t59981 = -1.*t56715*t53085;
  t59985 = -1.*t57157*t52148;
  t59992 = t59972 + t59981 + t59985;
  t60157 = t31717*t626*t57260;
  t60313 = -1.*t57260*t28876;
  t64890 = -1.*t31717*t26666*t57260;
  t60189 = t57133*t56715;
  t60214 = t40160*t57157;
  t60232 = t60157 + t60189 + t60214;
  t64897 = -1.*t57260*t34543;
  t64908 = -1.*t54096*t28876;
  t60315 = -1.*t56715*t59718;
  t60317 = -1.*t57157*t34594;
  t60322 = t60313 + t60315 + t60317;
  t60710 = -1.*t1459*t53128;
  t65290 = -0.068*t1459;
  t65291 = -1.*t31717*t53119;
  t65295 = t65290 + t65291;
  t65307 = 0.068*t31717;
  t65311 = t65307 + t53220;
  t60771 = t31717*t53128*t25337;
  t65346 = -1.*t32042*t1459*t10217;
  t65347 = -1.*t31717*t10217*t32555*t26666;
  t65348 = t65346 + t65347;
  t60726 = t31717*t26666*t54096;
  t60732 = t60710 + t60726 + t59439;
  t65303 = -1.*t31717*t53128;
  t65312 = -1.*t1459*t65311;
  t65320 = -1.*t1459*t53128*t25337;
  t65321 = t31717*t65311*t25337;
  t60785 = t54096*t48408;
  t60786 = t60771 + t59622 + t60785;
  t65357 = Power(t626,2);
  t65358 = -1.*t31717*t65357*t65295;
  t65364 = t626*t1459*t57260;
  t65370 = -1.*t31717*t626*t25337*t57260;
  t65371 = t626*t65295*t40299;
  t65378 = -1.*t1459*t25337*t32555;
  t65379 = t31717*t32042*t25337*t26666;
  t65380 = t65378 + t65379;
  t65382 = t65311*t32555;
  t65383 = -1.*t32042*t65295*t26666;
  t65384 = t65382 + t65383;
  t65386 = t32042*t65311;
  t65572 = t65295*t32555*t26666;
  t65573 = t65386 + t65572;
  t65575 = t31717*t32555;
  t65578 = t32042*t1459*t26666;
  t65579 = t65575 + t65578;
  t62961 = -1.*t31717*t53128*t25337;
  t62942 = t31717*t53128*t10217;
  t65583 = t31717*t32042;
  t65584 = -1.*t1459*t32555*t26666;
  t65585 = t65583 + t65584;
  t65608 = -1.*t1459*t53128*t10217;
  t65609 = t31717*t65311*t10217;
  t62954 = t54096*t34543;
  t62959 = t62942 + t62954 + t59783;
  t65617 = t1459*t53128*t25337;
  t65618 = -1.*t31717*t65311*t25337;
  t62971 = -1.*t54096*t48408;
  t63044 = t62961 + t59972 + t62971;
  t65645 = -1.*t31717*t626*t10217*t57260;
  t65648 = t626*t65295*t28876;
  t65336 = -1.*t1459*t10217*t32555;
  t65337 = t31717*t32042*t10217*t26666;
  t65339 = t65336 + t65337;
  t65662 = t31717*t626*t25337*t57260;
  t65663 = -1.*t626*t65295*t40299;
  t65594 = -1.*t32042*t1459*t25337;
  t65595 = -1.*t31717*t25337*t32555*t26666;
  t65596 = t65594 + t65595;
  t64885 = t1459*t53128;
  t65094 = -1.*t31717*t53128*t10217;
  t64886 = -1.*t31717*t26666*t54096;
  t64887 = t64885 + t64886 + t60157;
  t65843 = t31717*t53128;
  t65844 = t1459*t65311;
  t65360 = Power(t26666,2);
  t65849 = t1459*t53128*t10217;
  t65852 = -1.*t31717*t65311*t10217;
  t65095 = -1.*t54096*t34543;
  t65096 = t65094 + t65095 + t60313;
  t65884 = t31717*t65357*t65295;
  t65887 = -1.*t626*t1459*t57260;
  t65895 = t31717*t626*t10217*t57260;
  t65897 = -1.*t626*t65295*t28876;
  t65287 = -1.*t31717*t53224;
  t65288 = t60710 + t65287;
  t65980 = -1.*t8232*t1460;
  t65981 = -1.*t1465*t8433;
  t65982 = t65980 + t65981;
  t66001 = 0.325*t8232;
  t66003 = t66001 + t53167 + t53172;
  t53049 = t31712*t40299;
  t53055 = -1.*t400*t52148;
  t53056 = t53049 + t53055;
  t65993 = -0.325*t1465;
  t65994 = -1.*t8232*t53096;
  t65995 = -1.*t1465*t53117;
  t65996 = t65993 + t65994 + t65995;
  t65991 = t31717*t53128*t40280;
  t66000 = Power(t31717,2);
  t66007 = t66000*t66003*t25337;
  t66035 = -1.*t626*t1459*t66003;
  t66036 = t65996*t26666;
  t66037 = t66035 + t66036;
  t66020 = -1.*t626*t1459*t40280;
  t66021 = t65982*t26666;
  t66025 = t66020 + t66021;
  t66031 = t626*t65996;
  t66032 = t1459*t66003*t26666;
  t66033 = t66031 + t66032;
  t66048 = t626*t65982;
  t66049 = t1459*t40280*t26666;
  t66056 = t66048 + t66049;
  t66040 = -1.*t31717*t626*t66037;
  t66047 = t66037*t40299;
  t66064 = t57260*t66025;
  t66070 = t31717*t40280*t32555;
  t66071 = t32042*t66056;
  t66072 = t66070 + t66071;
  t66081 = t31717*t66003*t32555;
  t66082 = t32042*t66033;
  t66084 = t66081 + t66082;
  t66086 = t31717*t32042*t66003;
  t66087 = -1.*t32555*t66033;
  t66088 = t66086 + t66087;
  t65622 = -1.*t53178*t40280;
  t65623 = t1459*t53224*t25337;
  t65624 = t65622 + t62961 + t65623;
  t65626 = -1.*t1459*t53224*t10217;
  t65627 = t53178*t25337;
  t65628 = t62942 + t65626 + t65627;
  t66008 = Power(t1459,2);
  t65325 = t53178*t40280;
  t65326 = -1.*t1459*t53224*t25337;
  t66120 = -1.*t65996*t40280;
  t66121 = -1.*t53178*t65982;
  t66128 = t65996*t25337;
  t66126 = t66000*t66003*t10217;
  t66116 = -1.*t31717*t53128*t40280;
  t66122 = -1.*t66000*t66003*t25337;
  t66155 = t66037*t28876;
  t66158 = -1.*t66037*t40299;
  t66160 = -1.*t57260*t66025;
  t66099 = t31717*t32042*t40280;
  t66100 = -1.*t32555*t66056;
  t66101 = t66099 + t66100;
  t65835 = t31717*t53224;
  t65839 = t64885 + t65835;
  t66185 = -1.*t66000*t66003*t10217;
  t66207 = t31717*t626*t66037;
  t66211 = -1.*t66037*t28876;
  t66230 = -0.28*t1460;
  t66231 = 0.0641*t8433;
  t66232 = t66230 + t66231;
  t66244 = t1465*t53096;
  t66245 = t8232*t66232;
  t66246 = t66244 + t66245;
  t66254 = t626*t10217;
  t66255 = t1459*t65982*t26666;
  t66256 = t66254 + t66255;
  t66260 = -1.*t626*t1459*t65982;
  t66261 = t10217*t26666;
  t66262 = t66260 + t66261;
  t66264 = t31717*t32042*t65982;
  t66265 = -1.*t32555*t66256;
  t66266 = t66264 + t66265;
  t66241 = -1.*t1465*t66232;
  t66242 = t53097 + t66241;
  t66247 = t66000*t66246*t25337;
  t66280 = -1.*t626*t1459*t66246;
  t66281 = t66242*t26666;
  t66282 = t66280 + t66281;
  t66276 = t626*t66242;
  t66277 = t1459*t66246*t26666;
  t66278 = t66276 + t66277;
  t66283 = -1.*t31717*t626*t66282;
  t66286 = t66282*t40299;
  t66293 = t31717*t66246*t32555;
  t66294 = t32042*t66278;
  t66295 = t66293 + t66294;
  t66297 = t31717*t32042*t66246;
  t66298 = -1.*t32555*t66278;
  t66299 = t66297 + t66298;
  t65860 = t1459*t53224*t10217;
  t65863 = -1.*t53178*t25337;
  t66133 = t53119*t10217;
  t66134 = t66133 + t65627;
  t66142 = -1.*t53119*t25337;
  t66143 = t65622 + t66142;
  t66312 = -1.*t66242*t40280;
  t66317 = t53178*t10217;
  t66322 = t66242*t25337;
  t66318 = t66000*t66246*t10217;
  t66320 = t31717*t53128*t65982;
  t66313 = -1.*t66000*t66246*t25337;
  t66340 = t57260*t66262;
  t66343 = t66282*t28876;
  t66253 = t31717*t65982*t32555;
  t66257 = t32042*t66256;
  t66258 = t66253 + t66257;
  t66347 = -1.*t66282*t40299;
  t34857 = t31712*t28876;
  t34862 = -1.*t400*t34594;
  t35469 = t34857 + t34862;
  t66376 = -1.*t66000*t66246*t10217;
  t66378 = -1.*t31717*t53128*t65982;
  t66394 = t31717*t626*t66282;
  t66397 = -1.*t57260*t66262;
  t66400 = -1.*t66282*t28876;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=(-1.*t31712*t34594 - 1.*t28876*t400)*var2[1] + t35469*var2[2];
  p_output1[10]=(-1.*t31712*t40160 - 1.*t31717*t400*t626)*var2[1] + (-1.*t400*t40160 + t31712*t31717*t626)*var2[2];
  p_output1[11]=(-1.*t400*t40299 - 1.*t31712*t52148)*var2[1] + t53056*var2[2];
  p_output1[12]=t34594*var2[0] - 1.*t400*t53069*var2[1] + t31712*t53069*var2[2] + (t53085*(-1.*t40160*t54348 - 1.*t40160*t56715 - 1.*t57133*t57157 - 1.*t57157*t57184) + t52148*t59498 + t57133*(t52148*t54348 + t52148*t56715 + t53085*t57157 + t57157*t59566) + t40160*t59639)*var2[3];
  p_output1[13]=t40160*var2[0] - 1.*t400*t57184*var2[1] + t31712*t57184*var2[2] + ((-1.*t52148*t54348 - 1.*t52148*t56715 - 1.*t53085*t57157 - 1.*t57157*t59566)*t59718 + t53085*(t34594*t54348 + t34594*t56715 + t53069*t57157 + t57157*t59718) + t52148*t59859 + t34594*t59992)*var2[3];
  p_output1[14]=t52148*var2[0] - 1.*t400*t59566*var2[1] + t31712*t59566*var2[2] + ((t40160*t54348 + t40160*t56715 + t57133*t57157 + t57157*t57184)*t59718 + t57133*(-1.*t34594*t54348 - 1.*t34594*t56715 - 1.*t53069*t57157 - 1.*t57157*t59718) + t34594*t60232 + t40160*t60322)*var2[3];
  p_output1[15]=t32042*t60449*var2[0] + (t31712*t34543 + t32555*t400*t60449)*var2[1] + (t34543*t400 - 1.*t31712*t32555*t60449)*var2[2] + (t32042*t59498*t60817 + t57133*(-1.*t32555*t52148*t60744 + t32042*t53085*t60744 + t32042*t56715*t60817 - 1.*t32555*t57157*t60817 + t60823 + t60829) - 1.*t31717*t32042*t59639*t626 + t53085*(t32555*t40160*t60744 - 1.*t32042*t57133*t60744 + t60747 - 1.*t31717*t54096*t626 + t31717*t32042*t56715*t626 - 1.*t31717*t32555*t57157*t626))*var2[3] + (t48408*t60732 + t40299*(t26666*t31717*t60744 + t60747) - 1.*t26666*t31717*t60786 + t31717*(t48408*t60744 + t54096*t60817 + t60823 + t60829)*t626)*var2[4];
  p_output1[16]=-1.*t31717*t32042*t626*var2[0] + (-1.*t26666*t31712*t31717 - 1.*t31717*t32555*t400*t626)*var2[1] + (-1.*t26666*t31717*t400 + t31712*t31717*t32555*t626)*var2[2] + (t32042*t59992*t60449 + t32042*t59859*t60817 + t53085*(t32042*t56715*t60449 - 1.*t32555*t57157*t60449 - 1.*t32555*t34594*t60744 + t32042*t59718*t60744 + t62834 + t62911) + t59718*(t32555*t52148*t60744 - 1.*t32042*t53085*t60744 - 1.*t32042*t56715*t60817 + t32555*t57157*t60817 + t63099 + t63140))*var2[3] + (t40299*(t54096*t60449 + t34543*t60744 + t62834 + t62911) + t48408*t62959 + t34543*t63044 + t28876*(-1.*t48408*t60744 - 1.*t54096*t60817 + t63099 + t63140))*var2[4];
  p_output1[17]=t32042*t60817*var2[0] + (t31712*t48408 + t32555*t400*t60817)*var2[1] + (t400*t48408 - 1.*t31712*t32555*t60817)*var2[2] + (t32042*t60232*t60449 - 1.*t31717*t32042*t60322*t626 + t59718*(-1.*t32555*t40160*t60744 + t32042*t57133*t60744 + t31717*t54096*t626 - 1.*t31717*t32042*t56715*t626 + t31717*t32555*t57157*t626 + t64890) + t57133*(-1.*t32042*t56715*t60449 + t32555*t57157*t60449 + t32555*t34594*t60744 - 1.*t32042*t59718*t60744 + t64897 + t64908))*var2[3] + (t34543*t64887 + t28876*(-1.*t26666*t31717*t60744 + t64890) + t31717*t626*(-1.*t54096*t60449 - 1.*t34543*t60744 + t64897 + t64908) - 1.*t26666*t31717*t65096)*var2[4];
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=t65339*var2[0] + (-1.*t10217*t31712*t31717*t626 - 1.*t400*t65348)*var2[1] + (-1.*t10217*t31717*t400*t626 + t31712*t65348)*var2[2] + (t59498*t65380 + t59639*t65579 + t53085*(t65358 + t65364 - 1.*t57133*t65384 - 1.*t40160*t65573 - 1.*t56715*t65579 - 1.*t57157*t65585) + t57133*(t65370 + t65371 + t56715*t65380 + t53085*t65384 + t52148*t65573 + t57157*t65596))*var2[3] + (-1.*t25337*t31717*t60732*t626 - 1.*t1459*t60786*t626 + t40299*(-1.*t1459*t26666*t54096 + t65303 + t65312 + t65358 - 1.*t31717*t65295*t65360 + t65364) + t31717*t626*(t25337*t26666*t31717*t54096 - 1.*t26666*t48408*t65295 + t65320 + t65321 + t65370 + t65371))*var2[4] + (-1.*t1459*t25337*t65288 + t25337*t31717*(t1459*t53224 - 1.*t31717*t65295 + t65303 + t65312) + t1459*(-1.*t25337*t31717*t53224 - 1.*t1459*t25337*t65295 + t65320 + t65321) + t31717*(t60771 + t65325 + t65326))*var2[5];
  p_output1[28]=t65579*var2[0] + (-1.*t1459*t31712*t626 - 1.*t400*t65585)*var2[1] + (-1.*t1459*t400*t626 + t31712*t65585)*var2[2] + (t59992*t65339 + t59859*t65380 + t53085*(t56715*t65339 + t57157*t65348 + t59718*t65384 + t34594*t65573 + t65645 + t65648) + t59718*(-1.*t56715*t65380 - 1.*t53085*t65384 - 1.*t52148*t65573 - 1.*t57157*t65596 + t65662 + t65663))*var2[3] + (-1.*t25337*t31717*t626*t62959 - 1.*t10217*t31717*t626*t63044 + t40299*(t10217*t26666*t31717*t54096 - 1.*t26666*t34543*t65295 + t65608 + t65609 + t65645 + t65648) + t28876*(-1.*t25337*t26666*t31717*t54096 + t26666*t48408*t65295 + t65617 + t65618 + t65662 + t65663))*var2[4] + (t25337*t31717*(-1.*t10217*t31717*t53224 - 1.*t10217*t1459*t65295 + t65608 + t65609) + t10217*t31717*(t25337*t31717*t53224 + t1459*t25337*t65295 + t65617 + t65618) - 1.*t10217*t1459*t65624 - 1.*t1459*t25337*t65628)*var2[5];
  p_output1[29]=t65380*var2[0] + (-1.*t25337*t31712*t31717*t626 - 1.*t400*t65596)*var2[1] + (-1.*t25337*t31717*t400*t626 + t31712*t65596)*var2[2] + (t60232*t65339 + t60322*t65579 + t59718*(t57133*t65384 + t40160*t65573 + t56715*t65579 + t57157*t65585 + t65884 + t65887) + t57133*(-1.*t56715*t65339 - 1.*t57157*t65348 - 1.*t59718*t65384 - 1.*t34594*t65573 + t65895 + t65897))*var2[3] + (-1.*t10217*t31717*t626*t64887 - 1.*t1459*t626*t65096 + t28876*(t1459*t26666*t54096 + t31717*t65295*t65360 + t65843 + t65844 + t65884 + t65887) + t31717*t626*(-1.*t10217*t26666*t31717*t54096 + t26666*t34543*t65295 + t65849 + t65852 + t65895 + t65897))*var2[4] + (-1.*t10217*t1459*t65839 + t10217*t31717*(-1.*t1459*t53224 + t31717*t65295 + t65843 + t65844) + t1459*(t10217*t31717*t53224 + t10217*t1459*t65295 + t65849 + t65852) + t31717*(t65094 + t65860 + t65863))*var2[5];
  p_output1[30]=t53085*var2[0] + t53056*var2[1] + (t400*t40299 + t31712*t52148)*var2[2] + (t59498*t66072 + t53085*(t66040 - 1.*t57133*t66084 - 1.*t40160*t66088) + t57133*(t66047 + t66064 + t56715*t66072 + t53085*t66084 + t52148*t66088 + t57157*t66101))*var2[3] + (t60732*t66025 + t40299*(-1.*t1459*t31717*t66003 + t26666*t31717*t66033 + t66040) + t31717*t626*(t65991 + t66007 + t48408*t66033 + t66047 + t54096*t66056 + t66064))*var2[4] + (t31717*t40280*t65288 + t1459*(-1.*t1459*t40280*t53224 + t53178*t65982 + t65991 + t40280*t65996 + t66007 + t25337*t66003*t66008))*var2[5] + (-0.1575*t25337 - 0.2255*t65982)*var2[9];
  p_output1[31]=(t53085*t59992 + t59859*t66072 + t53085*(t59622 + t59623 + t59632 + t59718*t66084 + t34594*t66088 + t66155) + t59718*(-1.*t56715*t66072 - 1.*t53085*t66084 - 1.*t52148*t66088 - 1.*t57157*t66101 + t66158 + t66160))*var2[3] + (t40299*t63044 + t62959*t66025 + t40299*(t59622 + t60771 + t60785 + t34543*t66033 + t66126 + t66155) + t28876*(-1.*t48408*t66033 - 1.*t54096*t66056 + t66116 + t66122 + t66158 + t66160))*var2[4] + (t25337*t31717*t65624 + t31717*t40280*t65628 + t10217*t31717*(t1459*t40280*t53224 - 1.*t25337*t66003*t66008 + t66116 + t66120 + t66121 + t66122) + t25337*t31717*(t60771 + t65325 + t65326 + t10217*t66003*t66008 + t66126 + t66128))*var2[5] + (t25337*(-1.*t40280*t53119 - 1.*t25337*t66003 + t66120 + t66121) + t40280*(t25337*t53119 + t65325 + t10217*t66003 + t66128) + t65982*t66134 + t40280*t66143)*var2[9];
  p_output1[32]=t66072*var2[0] + (t31712*t66025 - 1.*t400*t66101)*var2[1] + (t400*t66025 + t31712*t66101)*var2[2] + (t53085*t60232 + t59718*(t57133*t66084 + t40160*t66088 + t66207) + t57133*(t59972 + t59981 + t59985 - 1.*t59718*t66084 - 1.*t34594*t66088 + t66211))*var2[3] + (t40299*t64887 + t28876*(t1459*t31717*t66003 - 1.*t26666*t31717*t66033 + t66207) + t31717*t626*(t59972 + t62961 + t62971 - 1.*t34543*t66033 + t66185 + t66211))*var2[4] + (t25337*t31717*t65839 + t1459*(t62961 + t65622 + t65623 - 1.*t25337*t65996 - 1.*t10217*t66003*t66008 + t66185))*var2[5] + 0.068*t40280*var2[9];
  p_output1[33]=t66258*var2[0] + (t31712*t66262 - 1.*t400*t66266)*var2[1] + (t400*t66262 + t31712*t66266)*var2[2] + (t59498*t59718 + t53085*(t66283 - 1.*t57133*t66295 - 1.*t40160*t66299) + t57133*(t59783 + t59784 + t59817 + t66286 + t53085*t66295 + t52148*t66299))*var2[3] + (t28876*t60732 + t40299*(-1.*t1459*t31717*t66246 + t26666*t31717*t66278 + t66283) + t31717*t626*(t59783 + t62942 + t62954 + t66247 + t48408*t66278 + t66286))*var2[4] + (t10217*t31717*t65288 + t1459*(t62942 + t65626 + t65627 + t40280*t66242 + t25337*t66008*t66246 + t66247))*var2[5] + (-0.2255*t25337 - 0.1575*t65982)*var2[9] + (-0.325*t1460 - 1.*t1460*t53117 - 1.*t1460*t66232)*var2[10];
  p_output1[34]=(t59718*t59859 + t59992*t66258 + t53085*(t56715*t66258 + t57157*t66266 + t59718*t66295 + t34594*t66299 + t66340 + t66343) + t59718*(t60313 + t60315 + t60317 - 1.*t53085*t66295 - 1.*t52148*t66299 + t66347))*var2[3] + (t28876*t62959 + t63044*t66262 + t40299*(t54096*t66256 + t34543*t66278 + t66318 + t66320 + t66340 + t66343) + t28876*(t60313 + t65094 + t65095 - 1.*t48408*t66278 + t66313 + t66347))*var2[4] + (t10217*t31717*t65628 + t31717*t65624*t65982 + t10217*t31717*(t65094 + t65860 + t65863 - 1.*t25337*t66008*t66246 + t66312 + t66313) + t25337*t31717*(-1.*t1459*t53224*t65982 + t10217*t66008*t66246 + t66317 + t66318 + t66320 + t66322))*var2[5] + (t25337*t66134 + t10217*t66143 + t25337*(-1.*t10217*t53119 + t65863 - 1.*t25337*t66246 + t66312) + t40280*(t53119*t65982 + t10217*t66246 + t66317 + t66322))*var2[9];
  p_output1[35]=t59718*var2[0] + t35469*var2[1] + (t31712*t34594 + t28876*t400)*var2[2] + (t60232*t66258 + t59718*(t57133*t66295 + t40160*t66299 + t66394) + t57133*(-1.*t56715*t66258 - 1.*t57157*t66266 - 1.*t59718*t66295 - 1.*t34594*t66299 + t66397 + t66400))*var2[3] + (t64887*t66262 + t28876*(t1459*t31717*t66246 - 1.*t26666*t31717*t66278 + t66394) + t31717*t626*(-1.*t54096*t66256 - 1.*t34543*t66278 + t66376 + t66378 + t66397 + t66400))*var2[4] + (t31717*t65839*t65982 + t1459*(-1.*t10217*t53178 + t1459*t53224*t65982 - 1.*t25337*t66242 - 1.*t10217*t66008*t66246 + t66376 + t66378))*var2[5] + 0.068*t10217*var2[9] + (-0.325*t8433 - 1.*t53117*t8433 - 1.*t66232*t8433)*var2[10];
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 18, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "dJh_RlFoot_DiagonalStance.hh"

namespace SymFunction
{

void dJh_RlFoot_DiagonalStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
