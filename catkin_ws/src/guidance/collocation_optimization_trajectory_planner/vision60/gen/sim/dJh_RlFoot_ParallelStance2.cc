/*
 * Automatically Generated from Mathematica.
 * Sat 11 Jun 2022 23:25:24 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t24443;
  double t22793;
  double t24433;
  double t24458;
  double t24442;
  double t24504;
  double t24575;
  double t17799;
  double t24592;
  double t24603;
  double t24608;
  double t21143;
  double t24612;
  double t24617;
  double t24588;
  double t24613;
  double t24614;
  double t11535;
  double t24619;
  double t24620;
  double t24679;
  double t24686;
  double t24687;
  double t24688;
  double t24690;
  double t24691;
  double t24692;
  double t24719;
  double t24720;
  double t24722;
  double t24735;
  double t24736;
  double t24738;
  double t24734;
  double t24739;
  double t24740;
  double t24743;
  double t24744;
  double t24745;
  double t24747;
  double t24748;
  double t24749;
  double t24770;
  double t24771;
  double t24772;
  double t24782;
  double t24784;
  double t24785;
  double t24787;
  double t24788;
  double t24789;
  double t24790;
  double t24791;
  double t24792;
  double t24781;
  double t24786;
  double t24793;
  double t24794;
  double t24780;
  double t24795;
  double t24796;
  double t24801;
  double t24803;
  double t24804;
  double t24805;
  double t24807;
  double t24809;
  double t24810;
  double t24814;
  double t24815;
  double t24816;
  double t24817;
  double t24818;
  double t24819;
  double t24820;
  double t24821;
  double t24832;
  double t24833;
  double t24834;
  double t24829;
  double t24830;
  double t24831;
  double t24825;
  double t24826;
  double t24827;
  double t24776;
  double t24777;
  double t24779;
  double t24800;
  double t24822;
  double t24823;
  double t24848;
  double t24849;
  double t24852;
  double t24839;
  double t24843;
  double t24844;
  double t24905;
  double t24910;
  double t24914;
  double t24867;
  double t24868;
  double t24869;
  double t24985;
  double t24986;
  double t24987;
  double t24856;
  double t24882;
  double t25001;
  double t25002;
  double t25003;
  double t25007;
  double t25018;
  double t25021;
  double t25022;
  double t24861;
  double t24862;
  double t24863;
  double t25024;
  double t25026;
  double t24883;
  double t24884;
  double t24885;
  double t24923;
  double t24934;
  double t25066;
  double t25073;
  double t24924;
  double t24925;
  double t24926;
  double t25093;
  double t25102;
  double t24935;
  double t24936;
  double t24937;
  double t24962;
  double t24977;
  double t25163;
  double t24963;
  double t24965;
  double t24967;
  double t25169;
  double t25171;
  double t24978;
  double t24979;
  double t24980;
  double t24997;
  double t25205;
  double t25206;
  double t25207;
  double t25211;
  double t25212;
  double t25012;
  double t25237;
  double t25238;
  double t25239;
  double t24998;
  double t24999;
  double t25210;
  double t25213;
  double t25218;
  double t25219;
  double t25013;
  double t25016;
  double t25248;
  double t25249;
  double t25256;
  double t25266;
  double t25267;
  double t25283;
  double t25287;
  double t25288;
  double t25290;
  double t25291;
  double t25292;
  double t25294;
  double t25298;
  double t25303;
  double t25305;
  double t25307;
  double t25308;
  double t25085;
  double t25081;
  double t25310;
  double t25311;
  double t25312;
  double t25341;
  double t25344;
  double t25082;
  double t25083;
  double t25349;
  double t25350;
  double t25086;
  double t25087;
  double t25377;
  double t25379;
  double t25232;
  double t25233;
  double t25234;
  double t25384;
  double t25385;
  double t25323;
  double t25324;
  double t25325;
  double t25156;
  double t25174;
  double t25157;
  double t25158;
  double t25416;
  double t25417;
  double t25253;
  double t25424;
  double t25425;
  double t25175;
  double t25176;
  double t25445;
  double t25448;
  double t25452;
  double t25454;
  double t25202;
  double t25203;
  double t25477;
  double t25478;
  double t25479;
  double t25494;
  double t25495;
  double t24762;
  double t24765;
  double t24767;
  double t25487;
  double t25488;
  double t25489;
  double t25490;
  double t25485;
  double t25493;
  double t25496;
  double t25518;
  double t25519;
  double t25520;
  double t25509;
  double t25510;
  double t25511;
  double t25514;
  double t25515;
  double t25516;
  double t25525;
  double t25526;
  double t25527;
  double t25521;
  double t25524;
  double t25529;
  double t25535;
  double t25536;
  double t25537;
  double t25539;
  double t25540;
  double t25541;
  double t25543;
  double t25544;
  double t25545;
  double t25354;
  double t25355;
  double t25356;
  double t25358;
  double t25359;
  double t25360;
  double t25497;
  double t25224;
  double t25226;
  double t25565;
  double t25566;
  double t25573;
  double t25571;
  double t25563;
  double t25567;
  double t25597;
  double t25600;
  double t25602;
  double t25550;
  double t25551;
  double t25552;
  double t25411;
  double t25412;
  double t25625;
  double t25644;
  double t25648;
  double t25667;
  double t25668;
  double t25669;
  double t25681;
  double t25682;
  double t25683;
  double t25691;
  double t25692;
  double t25693;
  double t25697;
  double t25698;
  double t25699;
  double t25701;
  double t25702;
  double t25703;
  double t25678;
  double t25679;
  double t25684;
  double t25717;
  double t25718;
  double t25719;
  double t25713;
  double t25714;
  double t25715;
  double t25720;
  double t25723;
  double t25730;
  double t25731;
  double t25732;
  double t25734;
  double t25735;
  double t25736;
  double t25429;
  double t25430;
  double t25578;
  double t25579;
  double t25585;
  double t25586;
  double t25749;
  double t25754;
  double t25759;
  double t25755;
  double t25757;
  double t25750;
  double t25777;
  double t25780;
  double t25690;
  double t25694;
  double t25695;
  double t25784;
  double t24701;
  double t24705;
  double t24709;
  double t25813;
  double t25815;
  double t25831;
  double t25834;
  double t25837;
  t24443 = Cos(var1[10]);
  t22793 = Cos(var1[11]);
  t24433 = Sin(var1[10]);
  t24458 = Sin(var1[11]);
  t24442 = t22793*t24433;
  t24504 = -1.*t24443*t24458;
  t24575 = t24442 + t24504;
  t17799 = Cos(var1[5]);
  t24592 = t24443*t22793;
  t24603 = t24433*t24458;
  t24608 = t24592 + t24603;
  t21143 = Sin(var1[9]);
  t24612 = Sin(var1[5]);
  t24617 = Cos(var1[3]);
  t24588 = -1.*t17799*t21143*t24575;
  t24613 = t24608*t24612;
  t24614 = t24588 + t24613;
  t11535 = Sin(var1[3]);
  t24619 = Cos(var1[9]);
  t24620 = Cos(var1[4]);
  t24679 = t24619*t24620*t24575;
  t24686 = Sin(var1[4]);
  t24687 = t17799*t24608;
  t24688 = t21143*t24575*t24612;
  t24690 = t24687 + t24688;
  t24691 = -1.*t24686*t24690;
  t24692 = t24679 + t24691;
  t24719 = t24620*t21143;
  t24720 = t24619*t24686*t24612;
  t24722 = t24719 + t24720;
  t24735 = -1.*t22793*t24433;
  t24736 = t24443*t24458;
  t24738 = t24735 + t24736;
  t24734 = -1.*t17799*t21143*t24608;
  t24739 = t24738*t24612;
  t24740 = t24734 + t24739;
  t24743 = t24619*t24620*t24608;
  t24744 = t17799*t24738;
  t24745 = t21143*t24608*t24612;
  t24747 = t24744 + t24745;
  t24748 = -1.*t24686*t24747;
  t24749 = t24743 + t24748;
  t24770 = -1.*t24619*t24575*t24686;
  t24771 = -1.*t24620*t24690;
  t24772 = t24770 + t24771;
  t24782 = -0.0641*t22793;
  t24784 = -0.28*t24458;
  t24785 = t24782 + t24784;
  t24787 = -1.*t22793;
  t24788 = 1. + t24787;
  t24789 = -0.575*t24788;
  t24790 = -0.295*t22793;
  t24791 = -0.0641*t24458;
  t24792 = t24789 + t24790 + t24791;
  t24781 = 0.325*t24433;
  t24786 = t24443*t24785;
  t24793 = t24433*t24792;
  t24794 = t24781 + t24786 + t24793;
  t24780 = 0.068*t21143;
  t24795 = t24619*t24794;
  t24796 = t24780 + t24795;
  t24801 = -1.*t24443;
  t24803 = 1. + t24801;
  t24804 = -0.325*t24803;
  t24805 = -1.*t24433*t24785;
  t24807 = t24443*t24792;
  t24809 = t24804 + t24805 + t24807;
  t24810 = t17799*t24809;
  t24814 = -1.*t24619;
  t24815 = 1. + t24814;
  t24816 = 0.1575*t24815;
  t24817 = 0.2255*t24619;
  t24818 = -1.*t21143*t24794;
  t24819 = t24816 + t24817 + t24818;
  t24820 = -1.*t24819*t24612;
  t24821 = t24810 + t24820;
  t24832 = t24620*t24796;
  t24833 = -1.*t24686*t24821;
  t24834 = t24832 + t24833;
  t24829 = t21143*t24686;
  t24830 = -1.*t24619*t24620*t24612;
  t24831 = t24829 + t24830;
  t24825 = t24796*t24686;
  t24826 = t24620*t24821;
  t24827 = t24825 + t24826;
  t24776 = t24619*t24608*t24686;
  t24777 = t24620*t24747;
  t24779 = t24776 + t24777;
  t24800 = -1.*t24796*t24686;
  t24822 = -1.*t24620*t24821;
  t24823 = t24800 + t24822;
  t24848 = t17799*t24819;
  t24849 = t24809*t24612;
  t24852 = t24848 + t24849;
  t24839 = -1.*t21143*t24686;
  t24843 = t24619*t24620*t24612;
  t24844 = t24839 + t24843;
  t24905 = t24619*t24575*t24686;
  t24910 = t24620*t24690;
  t24914 = t24905 + t24910;
  t24867 = -1.*t24619*t24608*t24686;
  t24868 = -1.*t24620*t24747;
  t24869 = t24867 + t24868;
  t24985 = t17799*t21143*t24575;
  t24986 = -1.*t24608*t24612;
  t24987 = t24985 + t24986;
  t24856 = -1.*t24619*t17799*t24852;
  t24882 = t24852*t24740;
  t25001 = -1.*t17799*t24819;
  t25002 = -1.*t24809*t24612;
  t25003 = t25001 + t25002;
  t25007 = t24619*t24612*t24852;
  t25018 = t17799*t21143*t24608;
  t25021 = -1.*t24738*t24612;
  t25022 = t25018 + t25021;
  t24861 = -1.*t24831*t24827;
  t24862 = -1.*t24722*t24834;
  t24863 = t24856 + t24861 + t24862;
  t25024 = t24821*t24740;
  t25026 = t24852*t24747;
  t24883 = t24827*t24779;
  t24884 = t24834*t24749;
  t24885 = t24882 + t24883 + t24884;
  t24923 = t24852*t24614;
  t24934 = -1.*t24852*t24740;
  t25066 = t24852*t24690;
  t25073 = t24821*t24614;
  t24924 = t24827*t24914;
  t24925 = t24834*t24692;
  t24926 = t24923 + t24924 + t24925;
  t25093 = -1.*t24821*t24740;
  t25102 = -1.*t24852*t24747;
  t24935 = -1.*t24827*t24779;
  t24936 = -1.*t24834*t24749;
  t24937 = t24934 + t24935 + t24936;
  t24962 = t24619*t17799*t24852;
  t24977 = -1.*t24852*t24614;
  t25163 = -1.*t24619*t24612*t24852;
  t24963 = t24831*t24827;
  t24965 = t24722*t24834;
  t24967 = t24962 + t24963 + t24965;
  t25169 = -1.*t24852*t24690;
  t25171 = -1.*t24821*t24614;
  t24978 = -1.*t24827*t24914;
  t24979 = -1.*t24834*t24692;
  t24980 = t24977 + t24978 + t24979;
  t24997 = -1.*t21143*t24796;
  t25205 = -0.068*t21143;
  t25206 = -1.*t24619*t24794;
  t25207 = t25205 + t25206;
  t25211 = 0.068*t24619;
  t25212 = t25211 + t24818;
  t25012 = t24619*t24796*t24608;
  t25237 = -1.*t24620*t21143*t24575;
  t25238 = -1.*t24619*t24575*t24686*t24612;
  t25239 = t25237 + t25238;
  t24998 = t24619*t24612*t24821;
  t24999 = t24997 + t24998 + t24856;
  t25210 = -1.*t24619*t24796;
  t25213 = -1.*t21143*t25212;
  t25218 = -1.*t21143*t24796*t24608;
  t25219 = t24619*t25212*t24608;
  t25013 = t24821*t24747;
  t25016 = t25012 + t24882 + t25013;
  t25248 = Power(t17799,2);
  t25249 = -1.*t24619*t25248*t25207;
  t25256 = t17799*t21143*t24852;
  t25266 = -1.*t24619*t17799*t24608*t24852;
  t25267 = t17799*t25207*t24740;
  t25283 = -1.*t21143*t24608*t24686;
  t25287 = t24619*t24620*t24608*t24612;
  t25288 = t25283 + t25287;
  t25290 = t25212*t24686;
  t25291 = -1.*t24620*t25207*t24612;
  t25292 = t25290 + t25291;
  t25294 = t24620*t25212;
  t25298 = t25207*t24686*t24612;
  t25303 = t25294 + t25298;
  t25305 = t24619*t24686;
  t25307 = t24620*t21143*t24612;
  t25308 = t25305 + t25307;
  t25085 = -1.*t24619*t24796*t24608;
  t25081 = t24619*t24796*t24575;
  t25310 = t24619*t24620;
  t25311 = -1.*t21143*t24686*t24612;
  t25312 = t25310 + t25311;
  t25341 = -1.*t21143*t24796*t24575;
  t25344 = t24619*t25212*t24575;
  t25082 = t24821*t24690;
  t25083 = t25081 + t25082 + t24923;
  t25349 = t21143*t24796*t24608;
  t25350 = -1.*t24619*t25212*t24608;
  t25086 = -1.*t24821*t24747;
  t25087 = t25085 + t24934 + t25086;
  t25377 = -1.*t24619*t17799*t24575*t24852;
  t25379 = t17799*t25207*t24614;
  t25232 = -1.*t21143*t24575*t24686;
  t25233 = t24619*t24620*t24575*t24612;
  t25234 = t25232 + t25233;
  t25384 = t24619*t17799*t24608*t24852;
  t25385 = -1.*t17799*t25207*t24740;
  t25323 = -1.*t24620*t21143*t24608;
  t25324 = -1.*t24619*t24608*t24686*t24612;
  t25325 = t25323 + t25324;
  t25156 = t21143*t24796;
  t25174 = -1.*t24619*t24796*t24575;
  t25157 = -1.*t24619*t24612*t24821;
  t25158 = t25156 + t25157 + t24962;
  t25416 = t24619*t24796;
  t25417 = t21143*t25212;
  t25253 = Power(t24612,2);
  t25424 = t21143*t24796*t24575;
  t25425 = -1.*t24619*t25212*t24575;
  t25175 = -1.*t24821*t24690;
  t25176 = t25174 + t25175 + t24977;
  t25445 = t24619*t25248*t25207;
  t25448 = -1.*t17799*t21143*t24852;
  t25452 = t24619*t17799*t24575*t24852;
  t25454 = -1.*t17799*t25207*t24614;
  t25202 = -1.*t24619*t24819;
  t25203 = t24997 + t25202;
  t25477 = -1.*t24443*t22793;
  t25478 = -1.*t24433*t24458;
  t25479 = t25477 + t25478;
  t25494 = 0.325*t24443;
  t25495 = t25494 + t24805 + t24807;
  t24762 = t24617*t24740;
  t24765 = -1.*t11535*t24749;
  t24767 = t24762 + t24765;
  t25487 = -0.325*t24433;
  t25488 = -1.*t24443*t24785;
  t25489 = -1.*t24433*t24792;
  t25490 = t25487 + t25488 + t25489;
  t25485 = t24619*t24796*t24738;
  t25493 = Power(t24619,2);
  t25496 = t25493*t25495*t24608;
  t25518 = -1.*t17799*t21143*t25495;
  t25519 = t25490*t24612;
  t25520 = t25518 + t25519;
  t25509 = -1.*t17799*t21143*t24738;
  t25510 = t25479*t24612;
  t25511 = t25509 + t25510;
  t25514 = t17799*t25490;
  t25515 = t21143*t25495*t24612;
  t25516 = t25514 + t25515;
  t25525 = t17799*t25479;
  t25526 = t21143*t24738*t24612;
  t25527 = t25525 + t25526;
  t25521 = -1.*t24619*t17799*t25520;
  t25524 = t25520*t24740;
  t25529 = t24852*t25511;
  t25535 = t24619*t24738*t24686;
  t25536 = t24620*t25527;
  t25537 = t25535 + t25536;
  t25539 = t24619*t25495*t24686;
  t25540 = t24620*t25516;
  t25541 = t25539 + t25540;
  t25543 = t24619*t24620*t25495;
  t25544 = -1.*t24686*t25516;
  t25545 = t25543 + t25544;
  t25354 = -1.*t24809*t24738;
  t25355 = t21143*t24819*t24608;
  t25356 = t25354 + t25085 + t25355;
  t25358 = -1.*t21143*t24819*t24575;
  t25359 = t24809*t24608;
  t25360 = t25081 + t25358 + t25359;
  t25497 = Power(t21143,2);
  t25224 = t24809*t24738;
  t25226 = -1.*t21143*t24819*t24608;
  t25565 = -1.*t25490*t24738;
  t25566 = -1.*t24809*t25479;
  t25573 = t25490*t24608;
  t25571 = t25493*t25495*t24575;
  t25563 = -1.*t24619*t24796*t24738;
  t25567 = -1.*t25493*t25495*t24608;
  t25597 = t25520*t24614;
  t25600 = -1.*t25520*t24740;
  t25602 = -1.*t24852*t25511;
  t25550 = t24619*t24620*t24738;
  t25551 = -1.*t24686*t25527;
  t25552 = t25550 + t25551;
  t25411 = t24619*t24819;
  t25412 = t25156 + t25411;
  t25625 = -1.*t25493*t25495*t24575;
  t25644 = t24619*t17799*t25520;
  t25648 = -1.*t25520*t24614;
  t25667 = -0.28*t22793;
  t25668 = 0.0641*t24458;
  t25669 = t25667 + t25668;
  t25681 = t24433*t24785;
  t25682 = t24443*t25669;
  t25683 = t25681 + t25682;
  t25691 = t17799*t24575;
  t25692 = t21143*t25479*t24612;
  t25693 = t25691 + t25692;
  t25697 = -1.*t17799*t21143*t25479;
  t25698 = t24575*t24612;
  t25699 = t25697 + t25698;
  t25701 = t24619*t24620*t25479;
  t25702 = -1.*t24686*t25693;
  t25703 = t25701 + t25702;
  t25678 = -1.*t24433*t25669;
  t25679 = t24786 + t25678;
  t25684 = t25493*t25683*t24608;
  t25717 = -1.*t17799*t21143*t25683;
  t25718 = t25679*t24612;
  t25719 = t25717 + t25718;
  t25713 = t17799*t25679;
  t25714 = t21143*t25683*t24612;
  t25715 = t25713 + t25714;
  t25720 = -1.*t24619*t17799*t25719;
  t25723 = t25719*t24740;
  t25730 = t24619*t25683*t24686;
  t25731 = t24620*t25715;
  t25732 = t25730 + t25731;
  t25734 = t24619*t24620*t25683;
  t25735 = -1.*t24686*t25715;
  t25736 = t25734 + t25735;
  t25429 = t21143*t24819*t24575;
  t25430 = -1.*t24809*t24608;
  t25578 = t24794*t24575;
  t25579 = t25578 + t25359;
  t25585 = -1.*t24794*t24608;
  t25586 = t25354 + t25585;
  t25749 = -1.*t25679*t24738;
  t25754 = t24809*t24575;
  t25759 = t25679*t24608;
  t25755 = t25493*t25683*t24575;
  t25757 = t24619*t24796*t25479;
  t25750 = -1.*t25493*t25683*t24608;
  t25777 = t24852*t25699;
  t25780 = t25719*t24614;
  t25690 = t24619*t25479*t24686;
  t25694 = t24620*t25693;
  t25695 = t25690 + t25694;
  t25784 = -1.*t25719*t24740;
  t24701 = t24617*t24614;
  t24705 = -1.*t11535*t24692;
  t24709 = t24701 + t24705;
  t25813 = -1.*t25493*t25683*t24575;
  t25815 = -1.*t24619*t24796*t25479;
  t25831 = t24619*t17799*t25719;
  t25834 = -1.*t24852*t25699;
  t25837 = -1.*t25719*t24614;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=(-1.*t11535*t24614 - 1.*t24617*t24692)*var2[1] + t24709*var2[2];
  p_output1[10]=(-1.*t11535*t17799*t24619 - 1.*t24617*t24722)*var2[1] + (t17799*t24617*t24619 - 1.*t11535*t24722)*var2[2];
  p_output1[11]=(-1.*t11535*t24740 - 1.*t24617*t24749)*var2[1] + t24767*var2[2];
  p_output1[12]=t24692*var2[0] - 1.*t11535*t24772*var2[1] + t24617*t24772*var2[2] + (t24779*(-1.*t24722*t24823 - 1.*t24722*t24827 - 1.*t24831*t24834 - 1.*t24834*t24844) + t24749*t24863 + t24831*(t24749*t24823 + t24749*t24827 + t24779*t24834 + t24834*t24869) + t24722*t24885)*var2[3];
  p_output1[13]=t24722*var2[0] - 1.*t11535*t24844*var2[1] + t24617*t24844*var2[2] + ((-1.*t24749*t24823 - 1.*t24749*t24827 - 1.*t24779*t24834 - 1.*t24834*t24869)*t24914 + t24779*(t24692*t24823 + t24692*t24827 + t24772*t24834 + t24834*t24914) + t24749*t24926 + t24692*t24937)*var2[3];
  p_output1[14]=t24749*var2[0] - 1.*t11535*t24869*var2[1] + t24617*t24869*var2[2] + ((t24722*t24823 + t24722*t24827 + t24831*t24834 + t24834*t24844)*t24914 + t24831*(-1.*t24692*t24823 - 1.*t24692*t24827 - 1.*t24772*t24834 - 1.*t24834*t24914) + t24692*t24967 + t24722*t24980)*var2[3];
  p_output1[15]=t24620*t24987*var2[0] + (t24617*t24690 + t11535*t24686*t24987)*var2[1] + (t11535*t24690 - 1.*t24617*t24686*t24987)*var2[2] + (-1.*t17799*t24619*t24620*t24885 + t24779*(-1.*t17799*t24619*t24821 + t17799*t24619*t24620*t24827 - 1.*t17799*t24619*t24686*t24834 + t24686*t24722*t25003 - 1.*t24620*t24831*t25003 + t25007) + t24620*t24863*t25022 + t24831*(-1.*t24686*t24749*t25003 + t24620*t24779*t25003 + t24620*t24827*t25022 - 1.*t24686*t24834*t25022 + t25024 + t25026))*var2[3] + (t24747*t24999 + t24740*(t24612*t24619*t25003 + t25007) - 1.*t24612*t24619*t25016 + t17799*t24619*(t24747*t25003 + t24821*t25022 + t25024 + t25026))*var2[4];
  p_output1[16]=-1.*t17799*t24619*t24620*var2[0] + (-1.*t24612*t24617*t24619 - 1.*t11535*t17799*t24619*t24686)*var2[1] + (-1.*t11535*t24612*t24619 + t17799*t24617*t24619*t24686)*var2[2] + (t24620*t24937*t24987 + t24620*t24926*t25022 + t24779*(t24620*t24827*t24987 - 1.*t24686*t24834*t24987 - 1.*t24686*t24692*t25003 + t24620*t24914*t25003 + t25066 + t25073) + t24914*(t24686*t24749*t25003 - 1.*t24620*t24779*t25003 - 1.*t24620*t24827*t25022 + t24686*t24834*t25022 + t25093 + t25102))*var2[3] + (t24740*(t24821*t24987 + t24690*t25003 + t25066 + t25073) + t24747*t25083 + t24690*t25087 + t24614*(-1.*t24747*t25003 - 1.*t24821*t25022 + t25093 + t25102))*var2[4];
  p_output1[17]=t24620*t25022*var2[0] + (t24617*t24747 + t11535*t24686*t25022)*var2[1] + (t11535*t24747 - 1.*t24617*t24686*t25022)*var2[2] + (-1.*t17799*t24619*t24620*t24980 + t24620*t24967*t24987 + t24914*(t17799*t24619*t24821 - 1.*t17799*t24619*t24620*t24827 + t17799*t24619*t24686*t24834 - 1.*t24686*t24722*t25003 + t24620*t24831*t25003 + t25163) + t24831*(-1.*t24620*t24827*t24987 + t24686*t24834*t24987 + t24686*t24692*t25003 - 1.*t24620*t24914*t25003 + t25169 + t25171))*var2[3] + (t24690*t25158 + t24614*(-1.*t24612*t24619*t25003 + t25163) + t17799*t24619*(-1.*t24821*t24987 - 1.*t24690*t25003 + t25169 + t25171) - 1.*t24612*t24619*t25176)*var2[4];
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=t25234*var2[0] + (-1.*t17799*t24575*t24617*t24619 - 1.*t11535*t25239)*var2[1] + (-1.*t11535*t17799*t24575*t24619 + t24617*t25239)*var2[2] + (t24863*t25288 + t24885*t25308 + t24779*(t25249 + t25256 - 1.*t24831*t25292 - 1.*t24722*t25303 - 1.*t24827*t25308 - 1.*t24834*t25312) + t24831*(t25266 + t25267 + t24827*t25288 + t24779*t25292 + t24749*t25303 + t24834*t25325))*var2[3] + (-1.*t17799*t24608*t24619*t24999 - 1.*t17799*t21143*t25016 + t24740*(-1.*t21143*t24612*t24821 + t25210 + t25213 + t25249 - 1.*t24619*t25207*t25253 + t25256) + t17799*t24619*(t24608*t24612*t24619*t24821 - 1.*t24612*t24747*t25207 + t25218 + t25219 + t25266 + t25267))*var2[4] + (-1.*t21143*t24608*t25203 + t24608*t24619*(t21143*t24819 - 1.*t24619*t25207 + t25210 + t25213) + t21143*(-1.*t24608*t24619*t24819 - 1.*t21143*t24608*t25207 + t25218 + t25219) + t24619*(t25012 + t25224 + t25226))*var2[5];
  p_output1[28]=t25308*var2[0] + (-1.*t17799*t21143*t24617 - 1.*t11535*t25312)*var2[1] + (-1.*t11535*t17799*t21143 + t24617*t25312)*var2[2] + (t24937*t25234 + t24926*t25288 + t24779*(t24827*t25234 + t24834*t25239 + t24914*t25292 + t24692*t25303 + t25377 + t25379) + t24914*(-1.*t24827*t25288 - 1.*t24779*t25292 - 1.*t24749*t25303 - 1.*t24834*t25325 + t25384 + t25385))*var2[3] + (-1.*t17799*t24608*t24619*t25083 - 1.*t17799*t24575*t24619*t25087 + t24740*(t24575*t24612*t24619*t24821 - 1.*t24612*t24690*t25207 + t25341 + t25344 + t25377 + t25379) + t24614*(-1.*t24608*t24612*t24619*t24821 + t24612*t24747*t25207 + t25349 + t25350 + t25384 + t25385))*var2[4] + (t24608*t24619*(-1.*t24575*t24619*t24819 - 1.*t21143*t24575*t25207 + t25341 + t25344) + t24575*t24619*(t24608*t24619*t24819 + t21143*t24608*t25207 + t25349 + t25350) - 1.*t21143*t24575*t25356 - 1.*t21143*t24608*t25360)*var2[5];
  p_output1[29]=t25288*var2[0] + (-1.*t17799*t24608*t24617*t24619 - 1.*t11535*t25325)*var2[1] + (-1.*t11535*t17799*t24608*t24619 + t24617*t25325)*var2[2] + (t24967*t25234 + t24980*t25308 + t24914*(t24831*t25292 + t24722*t25303 + t24827*t25308 + t24834*t25312 + t25445 + t25448) + t24831*(-1.*t24827*t25234 - 1.*t24834*t25239 - 1.*t24914*t25292 - 1.*t24692*t25303 + t25452 + t25454))*var2[3] + (-1.*t17799*t24575*t24619*t25158 - 1.*t17799*t21143*t25176 + t24614*(t21143*t24612*t24821 + t24619*t25207*t25253 + t25416 + t25417 + t25445 + t25448) + t17799*t24619*(-1.*t24575*t24612*t24619*t24821 + t24612*t24690*t25207 + t25424 + t25425 + t25452 + t25454))*var2[4] + (-1.*t21143*t24575*t25412 + t24575*t24619*(-1.*t21143*t24819 + t24619*t25207 + t25416 + t25417) + t21143*(t24575*t24619*t24819 + t21143*t24575*t25207 + t25424 + t25425) + t24619*(t25174 + t25429 + t25430))*var2[5];
  p_output1[30]=t24779*var2[0] + t24767*var2[1] + (t11535*t24740 + t24617*t24749)*var2[2] + (t24863*t25537 + t24779*(t25521 - 1.*t24831*t25541 - 1.*t24722*t25545) + t24831*(t25524 + t25529 + t24827*t25537 + t24779*t25541 + t24749*t25545 + t24834*t25552))*var2[3] + (t24999*t25511 + t24740*(-1.*t21143*t24619*t25495 + t24612*t24619*t25516 + t25521) + t17799*t24619*(t25485 + t25496 + t24747*t25516 + t25524 + t24821*t25527 + t25529))*var2[4] + (t24619*t24738*t25203 + t21143*(-1.*t21143*t24738*t24819 + t24809*t25479 + t25485 + t24738*t25490 + t25496 + t24608*t25495*t25497))*var2[5] + (-0.1575*t24608 - 0.2255*t25479)*var2[9];
  p_output1[31]=(t24779*t24937 + t24926*t25537 + t24779*(t24882 + t24883 + t24884 + t24914*t25541 + t24692*t25545 + t25597) + t24914*(-1.*t24827*t25537 - 1.*t24779*t25541 - 1.*t24749*t25545 - 1.*t24834*t25552 + t25600 + t25602))*var2[3] + (t24740*t25087 + t25083*t25511 + t24740*(t24882 + t25012 + t25013 + t24690*t25516 + t25571 + t25597) + t24614*(-1.*t24747*t25516 - 1.*t24821*t25527 + t25563 + t25567 + t25600 + t25602))*var2[4] + (t24608*t24619*t25356 + t24619*t24738*t25360 + t24575*t24619*(t21143*t24738*t24819 - 1.*t24608*t25495*t25497 + t25563 + t25565 + t25566 + t25567) + t24608*t24619*(t25012 + t25224 + t25226 + t24575*t25495*t25497 + t25571 + t25573))*var2[5] + (t24608*(-1.*t24738*t24794 - 1.*t24608*t25495 + t25565 + t25566) + t24738*(t24608*t24794 + t25224 + t24575*t25495 + t25573) + t25479*t25579 + t24738*t25586)*var2[9];
  p_output1[32]=t25537*var2[0] + (t24617*t25511 - 1.*t11535*t25552)*var2[1] + (t11535*t25511 + t24617*t25552)*var2[2] + (t24779*t24967 + t24914*(t24831*t25541 + t24722*t25545 + t25644) + t24831*(t24934 + t24935 + t24936 - 1.*t24914*t25541 - 1.*t24692*t25545 + t25648))*var2[3] + (t24740*t25158 + t24614*(t21143*t24619*t25495 - 1.*t24612*t24619*t25516 + t25644) + t17799*t24619*(t24934 + t25085 + t25086 - 1.*t24690*t25516 + t25625 + t25648))*var2[4] + (t24608*t24619*t25412 + t21143*(t25085 + t25354 + t25355 - 1.*t24608*t25490 - 1.*t24575*t25495*t25497 + t25625))*var2[5] + 0.068*t24738*var2[9];
  p_output1[33]=t25695*var2[0] + (t24617*t25699 - 1.*t11535*t25703)*var2[1] + (t11535*t25699 + t24617*t25703)*var2[2] + (t24863*t24914 + t24779*(t25720 - 1.*t24831*t25732 - 1.*t24722*t25736) + t24831*(t24923 + t24924 + t24925 + t25723 + t24779*t25732 + t24749*t25736))*var2[3] + (t24614*t24999 + t24740*(-1.*t21143*t24619*t25683 + t24612*t24619*t25715 + t25720) + t17799*t24619*(t24923 + t25081 + t25082 + t25684 + t24747*t25715 + t25723))*var2[4] + (t24575*t24619*t25203 + t21143*(t25081 + t25358 + t25359 + t24738*t25679 + t24608*t25497*t25683 + t25684))*var2[5] + (-0.2255*t24608 - 0.1575*t25479)*var2[9] + (-0.325*t22793 - 1.*t22793*t24792 - 1.*t22793*t25669)*var2[10];
  p_output1[34]=(t24914*t24926 + t24937*t25695 + t24779*(t24827*t25695 + t24834*t25703 + t24914*t25732 + t24692*t25736 + t25777 + t25780) + t24914*(t24977 + t24978 + t24979 - 1.*t24779*t25732 - 1.*t24749*t25736 + t25784))*var2[3] + (t24614*t25083 + t25087*t25699 + t24740*(t24821*t25693 + t24690*t25715 + t25755 + t25757 + t25777 + t25780) + t24614*(t24977 + t25174 + t25175 - 1.*t24747*t25715 + t25750 + t25784))*var2[4] + (t24575*t24619*t25360 + t24619*t25356*t25479 + t24575*t24619*(t25174 + t25429 + t25430 - 1.*t24608*t25497*t25683 + t25749 + t25750) + t24608*t24619*(-1.*t21143*t24819*t25479 + t24575*t25497*t25683 + t25754 + t25755 + t25757 + t25759))*var2[5] + (t24608*t25579 + t24575*t25586 + t24608*(-1.*t24575*t24794 + t25430 - 1.*t24608*t25683 + t25749) + t24738*(t24794*t25479 + t24575*t25683 + t25754 + t25759))*var2[9];
  p_output1[35]=t24914*var2[0] + t24709*var2[1] + (t11535*t24614 + t24617*t24692)*var2[2] + (t24967*t25695 + t24914*(t24831*t25732 + t24722*t25736 + t25831) + t24831*(-1.*t24827*t25695 - 1.*t24834*t25703 - 1.*t24914*t25732 - 1.*t24692*t25736 + t25834 + t25837))*var2[3] + (t25158*t25699 + t24614*(t21143*t24619*t25683 - 1.*t24612*t24619*t25715 + t25831) + t17799*t24619*(-1.*t24821*t25693 - 1.*t24690*t25715 + t25813 + t25815 + t25834 + t25837))*var2[4] + (t24619*t25412*t25479 + t21143*(-1.*t24575*t24809 + t21143*t24819*t25479 - 1.*t24608*t25679 - 1.*t24575*t25497*t25683 + t25813 + t25815))*var2[5] + 0.068*t24575*var2[9] + (-0.325*t24458 - 1.*t24458*t24792 - 1.*t24458*t25669)*var2[10];
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 18, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "dJh_RlFoot_ParallelStance2.hh"

namespace SymFunction
{

void dJh_RlFoot_ParallelStance2_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
