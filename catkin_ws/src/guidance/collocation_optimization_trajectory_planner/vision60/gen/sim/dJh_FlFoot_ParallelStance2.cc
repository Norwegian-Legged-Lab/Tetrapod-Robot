/*
 * Automatically Generated from Mathematica.
 * Sat 11 Jun 2022 23:25:21 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t24330;
  double t21145;
  double t24303;
  double t24334;
  double t24329;
  double t24341;
  double t24349;
  double t24368;
  double t20933;
  double t9290;
  double t24369;
  double t24370;
  double t24371;
  double t24375;
  double t24362;
  double t24372;
  double t24373;
  double t5233;
  double t24376;
  double t24377;
  double t24379;
  double t24417;
  double t24421;
  double t24427;
  double t24428;
  double t24431;
  double t24432;
  double t24444;
  double t24445;
  double t24446;
  double t24466;
  double t24467;
  double t24469;
  double t24470;
  double t24482;
  double t24486;
  double t24488;
  double t24490;
  double t24491;
  double t24492;
  double t24494;
  double t24498;
  double t24520;
  double t24521;
  double t24522;
  double t24542;
  double t24543;
  double t24544;
  double t24546;
  double t24547;
  double t24548;
  double t24549;
  double t24550;
  double t24551;
  double t24540;
  double t24545;
  double t24552;
  double t24553;
  double t24530;
  double t24533;
  double t24534;
  double t24535;
  double t24554;
  double t24555;
  double t24556;
  double t24557;
  double t24558;
  double t24560;
  double t24562;
  double t24564;
  double t24565;
  double t24566;
  double t24568;
  double t24569;
  double t24570;
  double t24571;
  double t24572;
  double t24573;
  double t24574;
  double t24576;
  double t24577;
  double t24578;
  double t24584;
  double t24585;
  double t24586;
  double t24596;
  double t24598;
  double t24600;
  double t24589;
  double t24590;
  double t24591;
  double t24580;
  double t24581;
  double t24582;
  double t24526;
  double t24527;
  double t24528;
  double t24628;
  double t24629;
  double t24630;
  double t24609;
  double t24610;
  double t24611;
  double t24683;
  double t24684;
  double t24685;
  double t24601;
  double t24604;
  double t24695;
  double t24696;
  double t24697;
  double t24593;
  double t24594;
  double t24602;
  double t24711;
  double t24712;
  double t24713;
  double t24699;
  double t24605;
  double t24606;
  double t24607;
  double t24710;
  double t24716;
  double t24627;
  double t24641;
  double t24631;
  double t24632;
  double t24633;
  double t24750;
  double t24752;
  double t24642;
  double t24643;
  double t24644;
  double t24763;
  double t24766;
  double t24666;
  double t24669;
  double t24664;
  double t24665;
  double t24667;
  double t24802;
  double t24670;
  double t24671;
  double t24672;
  double t24806;
  double t24808;
  double t24840;
  double t24841;
  double t24842;
  double t24703;
  double t24853;
  double t24854;
  double t24855;
  double t24858;
  double t24859;
  double t24706;
  double t24702;
  double t24704;
  double t24857;
  double t24860;
  double t24707;
  double t24708;
  double t24865;
  double t24866;
  double t24878;
  double t24879;
  double t24880;
  double t24902;
  double t24903;
  double t24904;
  double t24887;
  double t24888;
  double t24894;
  double t24895;
  double t24896;
  double t24911;
  double t24912;
  double t24913;
  double t24907;
  double t24908;
  double t24909;
  double t24898;
  double t24899;
  double t24900;
  double t24759;
  double t24755;
  double t24756;
  double t24757;
  double t24940;
  double t24941;
  double t24760;
  double t24761;
  double t24947;
  double t24948;
  double t24964;
  double t24835;
  double t24836;
  double t24837;
  double t24966;
  double t24971;
  double t24918;
  double t24919;
  double t24920;
  double t24972;
  double t24798;
  double t24811;
  double t24797;
  double t24799;
  double t24881;
  double t25008;
  double t25009;
  double t24812;
  double t24813;
  double t25014;
  double t25015;
  double t25027;
  double t25028;
  double t25034;
  double t25036;
  double t24850;
  double t24851;
  double t25058;
  double t25059;
  double t25060;
  double t25076;
  double t25077;
  double t24508;
  double t24509;
  double t24511;
  double t25069;
  double t25070;
  double t25071;
  double t25072;
  double t25067;
  double t25075;
  double t25078;
  double t25090;
  double t25091;
  double t25092;
  double t25098;
  double t25099;
  double t25100;
  double t25094;
  double t25095;
  double t25096;
  double t25105;
  double t25106;
  double t25107;
  double t25101;
  double t25109;
  double t25110;
  double t25116;
  double t25117;
  double t25118;
  double t25124;
  double t25125;
  double t25126;
  double t25120;
  double t25121;
  double t25122;
  double t24952;
  double t24953;
  double t24954;
  double t24956;
  double t24957;
  double t24958;
  double t25079;
  double t24870;
  double t24871;
  double t25146;
  double t25147;
  double t25154;
  double t25152;
  double t25144;
  double t25148;
  double t25178;
  double t25183;
  double t25184;
  double t25131;
  double t25132;
  double t25133;
  double t25004;
  double t25005;
  double t25208;
  double t25225;
  double t25231;
  double t25250;
  double t25251;
  double t25252;
  double t25271;
  double t25272;
  double t25273;
  double t25261;
  double t25262;
  double t25263;
  double t25280;
  double t25281;
  double t25282;
  double t25284;
  double t25285;
  double t25286;
  double t25268;
  double t25269;
  double t25274;
  double t25299;
  double t25300;
  double t25301;
  double t25295;
  double t25296;
  double t25297;
  double t25302;
  double t25306;
  double t25317;
  double t25318;
  double t25319;
  double t25313;
  double t25314;
  double t25315;
  double t25019;
  double t25020;
  double t25159;
  double t25160;
  double t25166;
  double t25167;
  double t25332;
  double t25337;
  double t25342;
  double t25338;
  double t25340;
  double t25333;
  double t25361;
  double t25364;
  double t25260;
  double t25264;
  double t25265;
  double t25368;
  double t24437;
  double t24438;
  double t24439;
  double t25398;
  double t25400;
  double t25414;
  double t25418;
  double t25421;
  t24330 = Cos(var1[7]);
  t21145 = Cos(var1[8]);
  t24303 = Sin(var1[7]);
  t24334 = Sin(var1[8]);
  t24329 = t21145*t24303;
  t24341 = -1.*t24330*t24334;
  t24349 = t24329 + t24341;
  t24368 = Sin(var1[5]);
  t20933 = Sin(var1[6]);
  t9290 = Cos(var1[5]);
  t24369 = t24330*t21145;
  t24370 = t24303*t24334;
  t24371 = t24369 + t24370;
  t24375 = Cos(var1[3]);
  t24362 = -1.*t9290*t20933*t24349;
  t24372 = t24368*t24371;
  t24373 = t24362 + t24372;
  t5233 = Sin(var1[3]);
  t24376 = Cos(var1[4]);
  t24377 = Cos(var1[6]);
  t24379 = t24376*t24377*t24349;
  t24417 = Sin(var1[4]);
  t24421 = t24368*t20933*t24349;
  t24427 = t9290*t24371;
  t24428 = t24421 + t24427;
  t24431 = -1.*t24417*t24428;
  t24432 = t24379 + t24431;
  t24444 = t24377*t24417*t24368;
  t24445 = t24376*t20933;
  t24446 = t24444 + t24445;
  t24466 = -1.*t21145*t24303;
  t24467 = t24330*t24334;
  t24469 = t24466 + t24467;
  t24470 = t24368*t24469;
  t24482 = -1.*t9290*t20933*t24371;
  t24486 = t24470 + t24482;
  t24488 = t24376*t24377*t24371;
  t24490 = t9290*t24469;
  t24491 = t24368*t20933*t24371;
  t24492 = t24490 + t24491;
  t24494 = -1.*t24417*t24492;
  t24498 = t24488 + t24494;
  t24520 = -1.*t24377*t24417*t24349;
  t24521 = -1.*t24376*t24428;
  t24522 = t24520 + t24521;
  t24542 = -0.0641*t21145;
  t24543 = -0.28*t24334;
  t24544 = t24542 + t24543;
  t24546 = -1.*t21145;
  t24547 = 1. + t24546;
  t24548 = 0.075*t24547;
  t24549 = 0.355*t21145;
  t24550 = -0.0641*t24334;
  t24551 = t24548 + t24549 + t24550;
  t24540 = -0.325*t24303;
  t24545 = t24330*t24544;
  t24552 = t24303*t24551;
  t24553 = t24540 + t24545 + t24552;
  t24530 = -1.*t24377;
  t24533 = 1. + t24530;
  t24534 = 0.1575*t24533;
  t24535 = 0.2255*t24377;
  t24554 = -1.*t20933*t24553;
  t24555 = t24534 + t24535 + t24554;
  t24556 = -1.*t24368*t24555;
  t24557 = -1.*t24330;
  t24558 = 1. + t24557;
  t24560 = 0.325*t24558;
  t24562 = -1.*t24303*t24544;
  t24564 = t24330*t24551;
  t24565 = t24560 + t24562 + t24564;
  t24566 = t9290*t24565;
  t24568 = t24556 + t24566;
  t24569 = -1.*t24417*t24568;
  t24570 = 0.068*t20933;
  t24571 = t24377*t24553;
  t24572 = t24570 + t24571;
  t24573 = t24376*t24572;
  t24574 = t24569 + t24573;
  t24576 = -1.*t24376*t24377*t24368;
  t24577 = t24417*t20933;
  t24578 = t24576 + t24577;
  t24584 = t24376*t24568;
  t24585 = t24417*t24572;
  t24586 = t24584 + t24585;
  t24596 = t9290*t24555;
  t24598 = t24368*t24565;
  t24600 = t24596 + t24598;
  t24589 = t24377*t24417*t24371;
  t24590 = t24376*t24492;
  t24591 = t24589 + t24590;
  t24580 = -1.*t24376*t24568;
  t24581 = -1.*t24417*t24572;
  t24582 = t24580 + t24581;
  t24526 = t24376*t24377*t24368;
  t24527 = -1.*t24417*t20933;
  t24528 = t24526 + t24527;
  t24628 = t24377*t24417*t24349;
  t24629 = t24376*t24428;
  t24630 = t24628 + t24629;
  t24609 = -1.*t24377*t24417*t24371;
  t24610 = -1.*t24376*t24492;
  t24611 = t24609 + t24610;
  t24683 = t9290*t20933*t24349;
  t24684 = -1.*t24368*t24371;
  t24685 = t24683 + t24684;
  t24601 = -1.*t9290*t24377*t24600;
  t24604 = t24600*t24486;
  t24695 = -1.*t9290*t24555;
  t24696 = -1.*t24368*t24565;
  t24697 = t24695 + t24696;
  t24593 = -1.*t24446*t24574;
  t24594 = -1.*t24578*t24586;
  t24602 = t24593 + t24594 + t24601;
  t24711 = -1.*t24368*t24469;
  t24712 = t9290*t20933*t24371;
  t24713 = t24711 + t24712;
  t24699 = t24377*t24368*t24600;
  t24605 = t24586*t24591;
  t24606 = t24574*t24498;
  t24607 = t24604 + t24605 + t24606;
  t24710 = t24568*t24486;
  t24716 = t24600*t24492;
  t24627 = t24600*t24373;
  t24641 = -1.*t24600*t24486;
  t24631 = t24586*t24630;
  t24632 = t24574*t24432;
  t24633 = t24627 + t24631 + t24632;
  t24750 = t24600*t24428;
  t24752 = t24568*t24373;
  t24642 = -1.*t24586*t24591;
  t24643 = -1.*t24574*t24498;
  t24644 = t24641 + t24642 + t24643;
  t24763 = -1.*t24568*t24486;
  t24766 = -1.*t24600*t24492;
  t24666 = t9290*t24377*t24600;
  t24669 = -1.*t24600*t24373;
  t24664 = t24446*t24574;
  t24665 = t24578*t24586;
  t24667 = t24664 + t24665 + t24666;
  t24802 = -1.*t24377*t24368*t24600;
  t24670 = -1.*t24586*t24630;
  t24671 = -1.*t24574*t24432;
  t24672 = t24669 + t24670 + t24671;
  t24806 = -1.*t24600*t24428;
  t24808 = -1.*t24568*t24373;
  t24840 = -1.*t24377*t24417*t24368*t24349;
  t24841 = -1.*t24376*t20933*t24349;
  t24842 = t24840 + t24841;
  t24703 = -1.*t20933*t24572;
  t24853 = -0.068*t20933;
  t24854 = -1.*t24377*t24553;
  t24855 = t24853 + t24854;
  t24858 = 0.068*t24377;
  t24859 = t24858 + t24554;
  t24706 = t24377*t24572*t24371;
  t24702 = t24377*t24368*t24568;
  t24704 = t24702 + t24601 + t24703;
  t24857 = -1.*t24377*t24572;
  t24860 = -1.*t20933*t24859;
  t24707 = t24568*t24492;
  t24708 = t24706 + t24604 + t24707;
  t24865 = -1.*t20933*t24572*t24371;
  t24866 = t24377*t24859*t24371;
  t24878 = t9290*t20933*t24600;
  t24879 = Power(t9290,2);
  t24880 = -1.*t24879*t24377*t24855;
  t24902 = t24377*t24417;
  t24903 = t24376*t24368*t20933;
  t24904 = t24902 + t24903;
  t24887 = -1.*t9290*t24377*t24600*t24371;
  t24888 = t9290*t24855*t24486;
  t24894 = t24376*t24377*t24368*t24371;
  t24895 = -1.*t24417*t20933*t24371;
  t24896 = t24894 + t24895;
  t24911 = -1.*t24376*t24368*t24855;
  t24912 = t24417*t24859;
  t24913 = t24911 + t24912;
  t24907 = t24417*t24368*t24855;
  t24908 = t24376*t24859;
  t24909 = t24907 + t24908;
  t24898 = t24376*t24377;
  t24899 = -1.*t24417*t24368*t20933;
  t24900 = t24898 + t24899;
  t24759 = -1.*t24377*t24572*t24371;
  t24755 = t24377*t24572*t24349;
  t24756 = t24568*t24428;
  t24757 = t24755 + t24756 + t24627;
  t24940 = -1.*t20933*t24572*t24349;
  t24941 = t24377*t24859*t24349;
  t24760 = -1.*t24568*t24492;
  t24761 = t24759 + t24641 + t24760;
  t24947 = t20933*t24572*t24371;
  t24948 = -1.*t24377*t24859*t24371;
  t24964 = -1.*t9290*t24377*t24600*t24349;
  t24835 = t24376*t24377*t24368*t24349;
  t24836 = -1.*t24417*t20933*t24349;
  t24837 = t24835 + t24836;
  t24966 = t9290*t24855*t24373;
  t24971 = t9290*t24377*t24600*t24371;
  t24918 = -1.*t24377*t24417*t24368*t24371;
  t24919 = -1.*t24376*t20933*t24371;
  t24920 = t24918 + t24919;
  t24972 = -1.*t9290*t24855*t24486;
  t24798 = t20933*t24572;
  t24811 = -1.*t24377*t24572*t24349;
  t24797 = -1.*t24377*t24368*t24568;
  t24799 = t24797 + t24666 + t24798;
  t24881 = Power(t24368,2);
  t25008 = t24377*t24572;
  t25009 = t20933*t24859;
  t24812 = -1.*t24568*t24428;
  t24813 = t24811 + t24812 + t24669;
  t25014 = t20933*t24572*t24349;
  t25015 = -1.*t24377*t24859*t24349;
  t25027 = -1.*t9290*t20933*t24600;
  t25028 = t24879*t24377*t24855;
  t25034 = t9290*t24377*t24600*t24349;
  t25036 = -1.*t9290*t24855*t24373;
  t24850 = -1.*t24377*t24555;
  t24851 = t24703 + t24850;
  t25058 = -1.*t24330*t21145;
  t25059 = -1.*t24303*t24334;
  t25060 = t25058 + t25059;
  t25076 = -0.325*t24330;
  t25077 = t25076 + t24562 + t24564;
  t24508 = t24375*t24486;
  t24509 = -1.*t5233*t24498;
  t24511 = t24508 + t24509;
  t25069 = 0.325*t24303;
  t25070 = -1.*t24330*t24544;
  t25071 = -1.*t24303*t24551;
  t25072 = t25069 + t25070 + t25071;
  t25067 = t24377*t24572*t24469;
  t25075 = Power(t24377,2);
  t25078 = t25075*t25077*t24371;
  t25090 = -1.*t9290*t20933*t24469;
  t25091 = t24368*t25060;
  t25092 = t25090 + t25091;
  t25098 = -1.*t9290*t20933*t25077;
  t25099 = t24368*t25072;
  t25100 = t25098 + t25099;
  t25094 = t24368*t20933*t25077;
  t25095 = t9290*t25072;
  t25096 = t25094 + t25095;
  t25105 = t24368*t20933*t24469;
  t25106 = t9290*t25060;
  t25107 = t25105 + t25106;
  t25101 = -1.*t9290*t24377*t25100;
  t25109 = t24600*t25092;
  t25110 = t25100*t24486;
  t25116 = t24377*t24417*t24469;
  t25117 = t24376*t25107;
  t25118 = t25116 + t25117;
  t25124 = t24376*t25096;
  t25125 = t24377*t24417*t25077;
  t25126 = t25124 + t25125;
  t25120 = -1.*t24417*t25096;
  t25121 = t24376*t24377*t25077;
  t25122 = t25120 + t25121;
  t24952 = -1.*t24565*t24469;
  t24953 = t20933*t24555*t24371;
  t24954 = t24952 + t24759 + t24953;
  t24956 = -1.*t20933*t24555*t24349;
  t24957 = t24565*t24371;
  t24958 = t24755 + t24956 + t24957;
  t25079 = Power(t20933,2);
  t24870 = t24565*t24469;
  t24871 = -1.*t20933*t24555*t24371;
  t25146 = -1.*t25072*t24469;
  t25147 = -1.*t24565*t25060;
  t25154 = t25072*t24371;
  t25152 = t25075*t25077*t24349;
  t25144 = -1.*t24377*t24572*t24469;
  t25148 = -1.*t25075*t25077*t24371;
  t25178 = t25100*t24373;
  t25183 = -1.*t24600*t25092;
  t25184 = -1.*t25100*t24486;
  t25131 = t24376*t24377*t24469;
  t25132 = -1.*t24417*t25107;
  t25133 = t25131 + t25132;
  t25004 = t24377*t24555;
  t25005 = t24798 + t25004;
  t25208 = -1.*t25075*t25077*t24349;
  t25225 = t9290*t24377*t25100;
  t25231 = -1.*t25100*t24373;
  t25250 = -0.28*t21145;
  t25251 = 0.0641*t24334;
  t25252 = t25250 + t25251;
  t25271 = t24303*t24544;
  t25272 = t24330*t25252;
  t25273 = t25271 + t25272;
  t25261 = t9290*t24349;
  t25262 = t24368*t20933*t25060;
  t25263 = t25261 + t25262;
  t25280 = t24368*t24349;
  t25281 = -1.*t9290*t20933*t25060;
  t25282 = t25280 + t25281;
  t25284 = t24376*t24377*t25060;
  t25285 = -1.*t24417*t25263;
  t25286 = t25284 + t25285;
  t25268 = -1.*t24303*t25252;
  t25269 = t24545 + t25268;
  t25274 = t25075*t25273*t24371;
  t25299 = -1.*t9290*t20933*t25273;
  t25300 = t24368*t25269;
  t25301 = t25299 + t25300;
  t25295 = t24368*t20933*t25273;
  t25296 = t9290*t25269;
  t25297 = t25295 + t25296;
  t25302 = -1.*t9290*t24377*t25301;
  t25306 = t25301*t24486;
  t25317 = t24376*t25297;
  t25318 = t24377*t24417*t25273;
  t25319 = t25317 + t25318;
  t25313 = -1.*t24417*t25297;
  t25314 = t24376*t24377*t25273;
  t25315 = t25313 + t25314;
  t25019 = t20933*t24555*t24349;
  t25020 = -1.*t24565*t24371;
  t25159 = t24553*t24349;
  t25160 = t25159 + t24957;
  t25166 = -1.*t24553*t24371;
  t25167 = t24952 + t25166;
  t25332 = -1.*t25269*t24469;
  t25337 = t24565*t24349;
  t25342 = t25269*t24371;
  t25338 = t25075*t25273*t24349;
  t25340 = t24377*t24572*t25060;
  t25333 = -1.*t25075*t25273*t24371;
  t25361 = t24600*t25282;
  t25364 = t25301*t24373;
  t25260 = t24377*t24417*t25060;
  t25264 = t24376*t25263;
  t25265 = t25260 + t25264;
  t25368 = -1.*t25301*t24486;
  t24437 = t24375*t24373;
  t24438 = -1.*t5233*t24432;
  t24439 = t24437 + t24438;
  t25398 = -1.*t25075*t25273*t24349;
  t25400 = -1.*t24377*t24572*t25060;
  t25414 = t9290*t24377*t25301;
  t25418 = -1.*t24600*t25282;
  t25421 = -1.*t25301*t24373;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=(-1.*t24375*t24432 - 1.*t24373*t5233)*var2[1] + t24439*var2[2];
  p_output1[10]=(-1.*t24375*t24446 - 1.*t24377*t5233*t9290)*var2[1] + (-1.*t24446*t5233 + t24375*t24377*t9290)*var2[2];
  p_output1[11]=(-1.*t24375*t24498 - 1.*t24486*t5233)*var2[1] + t24511*var2[2];
  p_output1[12]=t24432*var2[0] - 1.*t24522*t5233*var2[1] + t24375*t24522*var2[2] + ((-1.*t24528*t24574 - 1.*t24574*t24578 - 1.*t24446*t24582 - 1.*t24446*t24586)*t24591 + t24498*t24602 + t24446*t24607 + t24578*(t24498*t24582 + t24498*t24586 + t24574*t24591 + t24574*t24611))*var2[3];
  p_output1[13]=t24446*var2[0] - 1.*t24528*t5233*var2[1] + t24375*t24528*var2[2] + ((-1.*t24498*t24582 - 1.*t24498*t24586 - 1.*t24574*t24591 - 1.*t24574*t24611)*t24630 + t24591*(t24522*t24574 + t24432*t24582 + t24432*t24586 + t24574*t24630) + t24498*t24633 + t24432*t24644)*var2[3];
  p_output1[14]=t24498*var2[0] - 1.*t24611*t5233*var2[1] + t24375*t24611*var2[2] + ((t24528*t24574 + t24574*t24578 + t24446*t24582 + t24446*t24586)*t24630 + t24578*(-1.*t24522*t24574 - 1.*t24432*t24582 - 1.*t24432*t24586 - 1.*t24574*t24630) + t24432*t24667 + t24446*t24672)*var2[3];
  p_output1[15]=t24376*t24685*var2[0] + (t24375*t24428 + t24417*t24685*t5233)*var2[1] + (-1.*t24375*t24417*t24685 + t24428*t5233)*var2[2] + (t24376*t24602*t24713 + t24578*(-1.*t24417*t24498*t24697 + t24376*t24591*t24697 + t24710 - 1.*t24417*t24574*t24713 + t24376*t24586*t24713 + t24716) - 1.*t24376*t24377*t24607*t9290 + t24591*(t24417*t24446*t24697 - 1.*t24376*t24578*t24697 + t24699 - 1.*t24377*t24568*t9290 - 1.*t24377*t24417*t24574*t9290 + t24376*t24377*t24586*t9290))*var2[3] + (t24486*(t24368*t24377*t24697 + t24699) + t24492*t24704 - 1.*t24368*t24377*t24708 + t24377*(t24492*t24697 + t24710 + t24568*t24713 + t24716)*t9290)*var2[4];
  p_output1[16]=-1.*t24376*t24377*t9290*var2[0] + (-1.*t24368*t24375*t24377 - 1.*t24377*t24417*t5233*t9290)*var2[1] + (-1.*t24368*t24377*t5233 + t24375*t24377*t24417*t9290)*var2[2] + (t24376*t24644*t24685 + t24376*t24633*t24713 + t24591*(-1.*t24417*t24574*t24685 + t24376*t24586*t24685 - 1.*t24417*t24432*t24697 + t24376*t24630*t24697 + t24750 + t24752) + t24630*(t24417*t24498*t24697 - 1.*t24376*t24591*t24697 + t24417*t24574*t24713 - 1.*t24376*t24586*t24713 + t24763 + t24766))*var2[3] + (t24486*(t24568*t24685 + t24428*t24697 + t24750 + t24752) + t24492*t24757 + t24428*t24761 + t24373*(-1.*t24492*t24697 - 1.*t24568*t24713 + t24763 + t24766))*var2[4];
  p_output1[17]=t24376*t24713*var2[0] + (t24375*t24492 + t24417*t24713*t5233)*var2[1] + (-1.*t24375*t24417*t24713 + t24492*t5233)*var2[2] + (t24376*t24667*t24685 + t24578*(t24417*t24574*t24685 - 1.*t24376*t24586*t24685 + t24417*t24432*t24697 - 1.*t24376*t24630*t24697 + t24806 + t24808) - 1.*t24376*t24377*t24672*t9290 + t24630*(-1.*t24417*t24446*t24697 + t24376*t24578*t24697 + t24802 + t24377*t24568*t9290 + t24377*t24417*t24574*t9290 - 1.*t24376*t24377*t24586*t9290))*var2[3] + (t24428*t24799 + t24373*(-1.*t24368*t24377*t24697 + t24802) - 1.*t24368*t24377*t24813 + t24377*(-1.*t24568*t24685 - 1.*t24428*t24697 + t24806 + t24808)*t9290)*var2[4];
  p_output1[18]=t24837*var2[0] + (-1.*t24842*t5233 - 1.*t24349*t24375*t24377*t9290)*var2[1] + (t24375*t24842 - 1.*t24349*t24377*t5233*t9290)*var2[2] + (t24602*t24896 + t24607*t24904 + t24591*(t24878 + t24880 - 1.*t24574*t24900 - 1.*t24586*t24904 - 1.*t24446*t24909 - 1.*t24578*t24913) + t24578*(t24887 + t24888 + t24586*t24896 + t24498*t24909 + t24591*t24913 + t24574*t24920))*var2[3] + (t24486*(-1.*t20933*t24368*t24568 + t24857 + t24860 + t24878 + t24880 - 1.*t24377*t24855*t24881) - 1.*t24371*t24377*t24704*t9290 - 1.*t20933*t24708*t9290 + t24377*(t24368*t24371*t24377*t24568 - 1.*t24368*t24492*t24855 + t24865 + t24866 + t24887 + t24888)*t9290)*var2[4] + (-1.*t20933*t24371*t24851 + t24371*t24377*(t20933*t24555 - 1.*t24377*t24855 + t24857 + t24860) + t20933*(-1.*t24371*t24377*t24555 - 1.*t20933*t24371*t24855 + t24865 + t24866) + t24377*(t24706 + t24870 + t24871))*var2[5];
  p_output1[19]=t24904*var2[0] + (-1.*t24900*t5233 - 1.*t20933*t24375*t9290)*var2[1] + (t24375*t24900 - 1.*t20933*t5233*t9290)*var2[2] + (t24644*t24837 + t24633*t24896 + t24591*(t24586*t24837 + t24574*t24842 + t24432*t24909 + t24630*t24913 + t24964 + t24966) + t24630*(-1.*t24586*t24896 - 1.*t24498*t24909 - 1.*t24591*t24913 - 1.*t24574*t24920 + t24971 + t24972))*var2[3] + (t24486*(t24349*t24368*t24377*t24568 - 1.*t24368*t24428*t24855 + t24940 + t24941 + t24964 + t24966) + t24373*(-1.*t24368*t24371*t24377*t24568 + t24368*t24492*t24855 + t24947 + t24948 + t24971 + t24972) - 1.*t24371*t24377*t24757*t9290 - 1.*t24349*t24377*t24761*t9290)*var2[4] + (t24371*t24377*(-1.*t24349*t24377*t24555 - 1.*t20933*t24349*t24855 + t24940 + t24941) + t24349*t24377*(t24371*t24377*t24555 + t20933*t24371*t24855 + t24947 + t24948) - 1.*t20933*t24349*t24954 - 1.*t20933*t24371*t24958)*var2[5];
  p_output1[20]=t24896*var2[0] + (-1.*t24920*t5233 - 1.*t24371*t24375*t24377*t9290)*var2[1] + (t24375*t24920 - 1.*t24371*t24377*t5233*t9290)*var2[2] + (t24667*t24837 + t24672*t24904 + t24630*(t24574*t24900 + t24586*t24904 + t24446*t24909 + t24578*t24913 + t25027 + t25028) + t24578*(-1.*t24586*t24837 - 1.*t24574*t24842 - 1.*t24432*t24909 - 1.*t24630*t24913 + t25034 + t25036))*var2[3] + (t24373*(t20933*t24368*t24568 + t24377*t24855*t24881 + t25008 + t25009 + t25027 + t25028) - 1.*t24349*t24377*t24799*t9290 - 1.*t20933*t24813*t9290 + t24377*(-1.*t24349*t24368*t24377*t24568 + t24368*t24428*t24855 + t25014 + t25015 + t25034 + t25036)*t9290)*var2[4] + (-1.*t20933*t24349*t25005 + t24349*t24377*(-1.*t20933*t24555 + t24377*t24855 + t25008 + t25009) + t20933*(t24349*t24377*t24555 + t20933*t24349*t24855 + t25014 + t25015) + t24377*(t24811 + t25019 + t25020))*var2[5];
  p_output1[21]=t24591*var2[0] + t24511*var2[1] + (t24375*t24498 + t24486*t5233)*var2[2] + (t24602*t25118 + t24591*(t25101 - 1.*t24446*t25122 - 1.*t24578*t25126) + t24578*(t25109 + t25110 + t24586*t25118 + t24498*t25122 + t24591*t25126 + t24574*t25133))*var2[3] + (t24704*t25092 + t24486*(-1.*t20933*t24377*t25077 + t24368*t24377*t25096 + t25101) + t24377*(t25067 + t25078 + t24492*t25096 + t24568*t25107 + t25109 + t25110)*t9290)*var2[4] + (t24377*t24469*t24851 + t20933*(-1.*t20933*t24469*t24555 + t24565*t25060 + t25067 + t24469*t25072 + t25078 + t24371*t25077*t25079))*var2[5] + (-0.1575*t24371 - 0.2255*t25060)*var2[6];
  p_output1[22]=(t24591*t24644 + t24633*t25118 + t24591*(t24604 + t24605 + t24606 + t24432*t25122 + t24630*t25126 + t25178) + t24630*(-1.*t24586*t25118 - 1.*t24498*t25122 - 1.*t24591*t25126 - 1.*t24574*t25133 + t25183 + t25184))*var2[3] + (t24486*t24761 + t24757*t25092 + t24486*(t24604 + t24706 + t24707 + t24428*t25096 + t25152 + t25178) + t24373*(-1.*t24492*t25096 - 1.*t24568*t25107 + t25144 + t25148 + t25183 + t25184))*var2[4] + (t24371*t24377*t24954 + t24377*t24469*t24958 + t24349*t24377*(t20933*t24469*t24555 - 1.*t24371*t25077*t25079 + t25144 + t25146 + t25147 + t25148) + t24371*t24377*(t24706 + t24870 + t24871 + t24349*t25077*t25079 + t25152 + t25154))*var2[5] + (t24371*(-1.*t24469*t24553 - 1.*t24371*t25077 + t25146 + t25147) + t24469*(t24371*t24553 + t24870 + t24349*t25077 + t25154) + t25060*t25160 + t24469*t25167)*var2[6];
  p_output1[23]=t25118*var2[0] + (t24375*t25092 - 1.*t25133*t5233)*var2[1] + (t24375*t25133 + t25092*t5233)*var2[2] + (t24591*t24667 + t24630*(t24446*t25122 + t24578*t25126 + t25225) + t24578*(t24641 + t24642 + t24643 - 1.*t24432*t25122 - 1.*t24630*t25126 + t25231))*var2[3] + (t24486*t24799 + t24373*(t20933*t24377*t25077 - 1.*t24368*t24377*t25096 + t25225) + t24377*(t24641 + t24759 + t24760 - 1.*t24428*t25096 + t25208 + t25231)*t9290)*var2[4] + (t24371*t24377*t25005 + t20933*(t24759 + t24952 + t24953 - 1.*t24371*t25072 - 1.*t24349*t25077*t25079 + t25208))*var2[5] + 0.068*t24469*var2[6];
  p_output1[24]=t25265*var2[0] + (t24375*t25282 - 1.*t25286*t5233)*var2[1] + (t24375*t25286 + t25282*t5233)*var2[2] + (t24602*t24630 + t24591*(t25302 - 1.*t24446*t25315 - 1.*t24578*t25319) + t24578*(t24627 + t24631 + t24632 + t25306 + t24498*t25315 + t24591*t25319))*var2[3] + (t24373*t24704 + t24486*(-1.*t20933*t24377*t25273 + t24368*t24377*t25297 + t25302) + t24377*(t24627 + t24755 + t24756 + t25274 + t24492*t25297 + t25306)*t9290)*var2[4] + (t24349*t24377*t24851 + t20933*(t24755 + t24956 + t24957 + t24469*t25269 + t24371*t25079*t25273 + t25274))*var2[5] + (-0.2255*t24371 - 0.1575*t25060)*var2[6] + (0.325*t21145 - 1.*t21145*t24551 - 1.*t21145*t25252)*var2[7];
  p_output1[25]=(t24630*t24633 + t24644*t25265 + t24591*(t24586*t25265 + t24574*t25286 + t24432*t25315 + t24630*t25319 + t25361 + t25364) + t24630*(t24669 + t24670 + t24671 - 1.*t24498*t25315 - 1.*t24591*t25319 + t25368))*var2[3] + (t24373*t24757 + t24761*t25282 + t24486*(t24568*t25263 + t24428*t25297 + t25338 + t25340 + t25361 + t25364) + t24373*(t24669 + t24811 + t24812 - 1.*t24492*t25297 + t25333 + t25368))*var2[4] + (t24349*t24377*t24958 + t24377*t24954*t25060 + t24349*t24377*(t24811 + t25019 + t25020 - 1.*t24371*t25079*t25273 + t25332 + t25333) + t24371*t24377*(-1.*t20933*t24555*t25060 + t24349*t25079*t25273 + t25337 + t25338 + t25340 + t25342))*var2[5] + (t24371*t25160 + t24349*t25167 + t24371*(-1.*t24349*t24553 + t25020 - 1.*t24371*t25273 + t25332) + t24469*(t24553*t25060 + t24349*t25273 + t25337 + t25342))*var2[6];
  p_output1[26]=t24630*var2[0] + t24439*var2[1] + (t24375*t24432 + t24373*t5233)*var2[2] + (t24667*t25265 + t24630*(t24446*t25315 + t24578*t25319 + t25414) + t24578*(-1.*t24586*t25265 - 1.*t24574*t25286 - 1.*t24432*t25315 - 1.*t24630*t25319 + t25418 + t25421))*var2[3] + (t24799*t25282 + t24373*(t20933*t24377*t25273 - 1.*t24368*t24377*t25297 + t25414) + t24377*(-1.*t24568*t25263 - 1.*t24428*t25297 + t25398 + t25400 + t25418 + t25421)*t9290)*var2[4] + (t24377*t25005*t25060 + t20933*(-1.*t24349*t24565 + t20933*t24555*t25060 - 1.*t24371*t25269 - 1.*t24349*t25079*t25273 + t25398 + t25400))*var2[5] + 0.068*t24349*var2[6] + (0.325*t24334 - 1.*t24334*t24551 - 1.*t24334*t25252)*var2[7];
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 18, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "dJh_FlFoot_ParallelStance2.hh"

namespace SymFunction
{

void dJh_FlFoot_ParallelStance2_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
