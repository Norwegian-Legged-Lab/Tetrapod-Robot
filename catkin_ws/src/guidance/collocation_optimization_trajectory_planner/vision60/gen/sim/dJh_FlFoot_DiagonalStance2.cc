/*
 * Automatically Generated from Mathematica.
 * Sat 11 Jun 2022 23:25:02 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t22983;
  double t22911;
  double t22978;
  double t22997;
  double t22982;
  double t23003;
  double t23022;
  double t23032;
  double t17477;
  double t12413;
  double t23035;
  double t23036;
  double t23037;
  double t23041;
  double t23030;
  double t23038;
  double t23039;
  double t6883;
  double t23042;
  double t23043;
  double t23085;
  double t23089;
  double t23094;
  double t23099;
  double t23101;
  double t23103;
  double t23104;
  double t23134;
  double t23135;
  double t23136;
  double t23166;
  double t23172;
  double t23173;
  double t23175;
  double t23187;
  double t23192;
  double t23198;
  double t23199;
  double t23200;
  double t23202;
  double t23203;
  double t23204;
  double t23232;
  double t23233;
  double t23234;
  double t23255;
  double t23257;
  double t23258;
  double t23261;
  double t23262;
  double t23264;
  double t23265;
  double t23267;
  double t23268;
  double t23253;
  double t23259;
  double t23269;
  double t23270;
  double t23243;
  double t23245;
  double t23248;
  double t23250;
  double t23271;
  double t23272;
  double t23273;
  double t23274;
  double t23275;
  double t23276;
  double t23278;
  double t23279;
  double t23281;
  double t23282;
  double t23283;
  double t23285;
  double t23286;
  double t23287;
  double t23288;
  double t23289;
  double t23290;
  double t23292;
  double t23293;
  double t23294;
  double t23300;
  double t23301;
  double t23302;
  double t23311;
  double t23312;
  double t23314;
  double t23305;
  double t23306;
  double t23307;
  double t23296;
  double t23297;
  double t23298;
  double t23238;
  double t23239;
  double t23241;
  double t23343;
  double t23344;
  double t23345;
  double t23324;
  double t23325;
  double t23326;
  double t23398;
  double t23399;
  double t23400;
  double t23316;
  double t23319;
  double t23410;
  double t23411;
  double t23412;
  double t23309;
  double t23310;
  double t23317;
  double t23426;
  double t23427;
  double t23428;
  double t23414;
  double t23320;
  double t23321;
  double t23322;
  double t23425;
  double t23431;
  double t23342;
  double t23356;
  double t23346;
  double t23347;
  double t23348;
  double t23464;
  double t23466;
  double t23357;
  double t23358;
  double t23359;
  double t23477;
  double t23480;
  double t23381;
  double t23384;
  double t23379;
  double t23380;
  double t23382;
  double t23516;
  double t23385;
  double t23386;
  double t23387;
  double t23520;
  double t23522;
  double t23554;
  double t23555;
  double t23556;
  double t23418;
  double t23567;
  double t23568;
  double t23569;
  double t23572;
  double t23573;
  double t23421;
  double t23417;
  double t23419;
  double t23571;
  double t23574;
  double t23422;
  double t23423;
  double t23579;
  double t23580;
  double t23592;
  double t23593;
  double t23594;
  double t23616;
  double t23617;
  double t23618;
  double t23601;
  double t23602;
  double t23608;
  double t23609;
  double t23610;
  double t23624;
  double t23625;
  double t23626;
  double t23620;
  double t23621;
  double t23622;
  double t23612;
  double t23613;
  double t23614;
  double t23473;
  double t23469;
  double t23470;
  double t23471;
  double t23653;
  double t23654;
  double t23474;
  double t23475;
  double t23659;
  double t23660;
  double t23676;
  double t23549;
  double t23550;
  double t23551;
  double t23678;
  double t23683;
  double t23631;
  double t23632;
  double t23633;
  double t23684;
  double t23512;
  double t23525;
  double t23511;
  double t23513;
  double t23595;
  double t23720;
  double t23721;
  double t23526;
  double t23527;
  double t23726;
  double t23727;
  double t23739;
  double t23740;
  double t23746;
  double t23748;
  double t23564;
  double t23565;
  double t23770;
  double t23771;
  double t23772;
  double t23788;
  double t23789;
  double t23220;
  double t23222;
  double t23223;
  double t23781;
  double t23782;
  double t23783;
  double t23784;
  double t23779;
  double t23787;
  double t23790;
  double t23802;
  double t23803;
  double t23804;
  double t23810;
  double t23811;
  double t23812;
  double t23806;
  double t23807;
  double t23808;
  double t23817;
  double t23818;
  double t23819;
  double t23813;
  double t23821;
  double t23822;
  double t23828;
  double t23829;
  double t23830;
  double t23836;
  double t23837;
  double t23838;
  double t23832;
  double t23833;
  double t23834;
  double t23664;
  double t23665;
  double t23666;
  double t23668;
  double t23669;
  double t23670;
  double t23791;
  double t23584;
  double t23585;
  double t23858;
  double t23859;
  double t23866;
  double t23864;
  double t23856;
  double t23860;
  double t23890;
  double t23894;
  double t23895;
  double t23843;
  double t23844;
  double t23845;
  double t23716;
  double t23717;
  double t23919;
  double t23935;
  double t23941;
  double t23960;
  double t23961;
  double t23962;
  double t23982;
  double t23983;
  double t23984;
  double t23971;
  double t23973;
  double t23974;
  double t23991;
  double t23992;
  double t23993;
  double t23995;
  double t23996;
  double t23997;
  double t23979;
  double t23980;
  double t23985;
  double t24010;
  double t24011;
  double t24012;
  double t24006;
  double t24007;
  double t24008;
  double t24013;
  double t24017;
  double t24028;
  double t24029;
  double t24030;
  double t24024;
  double t24025;
  double t24026;
  double t23731;
  double t23732;
  double t23871;
  double t23872;
  double t23878;
  double t23879;
  double t24043;
  double t24048;
  double t24053;
  double t24049;
  double t24051;
  double t24044;
  double t24071;
  double t24074;
  double t23970;
  double t23975;
  double t23976;
  double t24078;
  double t23115;
  double t23116;
  double t23117;
  double t24108;
  double t24110;
  double t24124;
  double t24128;
  double t24131;
  t22983 = Cos(var1[7]);
  t22911 = Cos(var1[8]);
  t22978 = Sin(var1[7]);
  t22997 = Sin(var1[8]);
  t22982 = t22911*t22978;
  t23003 = -1.*t22983*t22997;
  t23022 = t22982 + t23003;
  t23032 = Sin(var1[5]);
  t17477 = Sin(var1[6]);
  t12413 = Cos(var1[5]);
  t23035 = t22983*t22911;
  t23036 = t22978*t22997;
  t23037 = t23035 + t23036;
  t23041 = Cos(var1[3]);
  t23030 = -1.*t12413*t17477*t23022;
  t23038 = t23032*t23037;
  t23039 = t23030 + t23038;
  t6883 = Sin(var1[3]);
  t23042 = Cos(var1[4]);
  t23043 = Cos(var1[6]);
  t23085 = t23042*t23043*t23022;
  t23089 = Sin(var1[4]);
  t23094 = t23032*t17477*t23022;
  t23099 = t12413*t23037;
  t23101 = t23094 + t23099;
  t23103 = -1.*t23089*t23101;
  t23104 = t23085 + t23103;
  t23134 = t23043*t23089*t23032;
  t23135 = t23042*t17477;
  t23136 = t23134 + t23135;
  t23166 = -1.*t22911*t22978;
  t23172 = t22983*t22997;
  t23173 = t23166 + t23172;
  t23175 = t23032*t23173;
  t23187 = -1.*t12413*t17477*t23037;
  t23192 = t23175 + t23187;
  t23198 = t23042*t23043*t23037;
  t23199 = t12413*t23173;
  t23200 = t23032*t17477*t23037;
  t23202 = t23199 + t23200;
  t23203 = -1.*t23089*t23202;
  t23204 = t23198 + t23203;
  t23232 = -1.*t23043*t23089*t23022;
  t23233 = -1.*t23042*t23101;
  t23234 = t23232 + t23233;
  t23255 = -0.0641*t22911;
  t23257 = -0.28*t22997;
  t23258 = t23255 + t23257;
  t23261 = -1.*t22911;
  t23262 = 1. + t23261;
  t23264 = 0.075*t23262;
  t23265 = 0.355*t22911;
  t23267 = -0.0641*t22997;
  t23268 = t23264 + t23265 + t23267;
  t23253 = -0.325*t22978;
  t23259 = t22983*t23258;
  t23269 = t22978*t23268;
  t23270 = t23253 + t23259 + t23269;
  t23243 = -1.*t23043;
  t23245 = 1. + t23243;
  t23248 = 0.1575*t23245;
  t23250 = 0.2255*t23043;
  t23271 = -1.*t17477*t23270;
  t23272 = t23248 + t23250 + t23271;
  t23273 = -1.*t23032*t23272;
  t23274 = -1.*t22983;
  t23275 = 1. + t23274;
  t23276 = 0.325*t23275;
  t23278 = -1.*t22978*t23258;
  t23279 = t22983*t23268;
  t23281 = t23276 + t23278 + t23279;
  t23282 = t12413*t23281;
  t23283 = t23273 + t23282;
  t23285 = -1.*t23089*t23283;
  t23286 = 0.068*t17477;
  t23287 = t23043*t23270;
  t23288 = t23286 + t23287;
  t23289 = t23042*t23288;
  t23290 = t23285 + t23289;
  t23292 = -1.*t23042*t23043*t23032;
  t23293 = t23089*t17477;
  t23294 = t23292 + t23293;
  t23300 = t23042*t23283;
  t23301 = t23089*t23288;
  t23302 = t23300 + t23301;
  t23311 = t12413*t23272;
  t23312 = t23032*t23281;
  t23314 = t23311 + t23312;
  t23305 = t23043*t23089*t23037;
  t23306 = t23042*t23202;
  t23307 = t23305 + t23306;
  t23296 = -1.*t23042*t23283;
  t23297 = -1.*t23089*t23288;
  t23298 = t23296 + t23297;
  t23238 = t23042*t23043*t23032;
  t23239 = -1.*t23089*t17477;
  t23241 = t23238 + t23239;
  t23343 = t23043*t23089*t23022;
  t23344 = t23042*t23101;
  t23345 = t23343 + t23344;
  t23324 = -1.*t23043*t23089*t23037;
  t23325 = -1.*t23042*t23202;
  t23326 = t23324 + t23325;
  t23398 = t12413*t17477*t23022;
  t23399 = -1.*t23032*t23037;
  t23400 = t23398 + t23399;
  t23316 = -1.*t12413*t23043*t23314;
  t23319 = t23314*t23192;
  t23410 = -1.*t12413*t23272;
  t23411 = -1.*t23032*t23281;
  t23412 = t23410 + t23411;
  t23309 = -1.*t23136*t23290;
  t23310 = -1.*t23294*t23302;
  t23317 = t23309 + t23310 + t23316;
  t23426 = -1.*t23032*t23173;
  t23427 = t12413*t17477*t23037;
  t23428 = t23426 + t23427;
  t23414 = t23043*t23032*t23314;
  t23320 = t23302*t23307;
  t23321 = t23290*t23204;
  t23322 = t23319 + t23320 + t23321;
  t23425 = t23283*t23192;
  t23431 = t23314*t23202;
  t23342 = t23314*t23039;
  t23356 = -1.*t23314*t23192;
  t23346 = t23302*t23345;
  t23347 = t23290*t23104;
  t23348 = t23342 + t23346 + t23347;
  t23464 = t23314*t23101;
  t23466 = t23283*t23039;
  t23357 = -1.*t23302*t23307;
  t23358 = -1.*t23290*t23204;
  t23359 = t23356 + t23357 + t23358;
  t23477 = -1.*t23283*t23192;
  t23480 = -1.*t23314*t23202;
  t23381 = t12413*t23043*t23314;
  t23384 = -1.*t23314*t23039;
  t23379 = t23136*t23290;
  t23380 = t23294*t23302;
  t23382 = t23379 + t23380 + t23381;
  t23516 = -1.*t23043*t23032*t23314;
  t23385 = -1.*t23302*t23345;
  t23386 = -1.*t23290*t23104;
  t23387 = t23384 + t23385 + t23386;
  t23520 = -1.*t23314*t23101;
  t23522 = -1.*t23283*t23039;
  t23554 = -1.*t23043*t23089*t23032*t23022;
  t23555 = -1.*t23042*t17477*t23022;
  t23556 = t23554 + t23555;
  t23418 = -1.*t17477*t23288;
  t23567 = -0.068*t17477;
  t23568 = -1.*t23043*t23270;
  t23569 = t23567 + t23568;
  t23572 = 0.068*t23043;
  t23573 = t23572 + t23271;
  t23421 = t23043*t23288*t23037;
  t23417 = t23043*t23032*t23283;
  t23419 = t23417 + t23316 + t23418;
  t23571 = -1.*t23043*t23288;
  t23574 = -1.*t17477*t23573;
  t23422 = t23283*t23202;
  t23423 = t23421 + t23319 + t23422;
  t23579 = -1.*t17477*t23288*t23037;
  t23580 = t23043*t23573*t23037;
  t23592 = t12413*t17477*t23314;
  t23593 = Power(t12413,2);
  t23594 = -1.*t23593*t23043*t23569;
  t23616 = t23043*t23089;
  t23617 = t23042*t23032*t17477;
  t23618 = t23616 + t23617;
  t23601 = -1.*t12413*t23043*t23314*t23037;
  t23602 = t12413*t23569*t23192;
  t23608 = t23042*t23043*t23032*t23037;
  t23609 = -1.*t23089*t17477*t23037;
  t23610 = t23608 + t23609;
  t23624 = -1.*t23042*t23032*t23569;
  t23625 = t23089*t23573;
  t23626 = t23624 + t23625;
  t23620 = t23089*t23032*t23569;
  t23621 = t23042*t23573;
  t23622 = t23620 + t23621;
  t23612 = t23042*t23043;
  t23613 = -1.*t23089*t23032*t17477;
  t23614 = t23612 + t23613;
  t23473 = -1.*t23043*t23288*t23037;
  t23469 = t23043*t23288*t23022;
  t23470 = t23283*t23101;
  t23471 = t23469 + t23470 + t23342;
  t23653 = -1.*t17477*t23288*t23022;
  t23654 = t23043*t23573*t23022;
  t23474 = -1.*t23283*t23202;
  t23475 = t23473 + t23356 + t23474;
  t23659 = t17477*t23288*t23037;
  t23660 = -1.*t23043*t23573*t23037;
  t23676 = -1.*t12413*t23043*t23314*t23022;
  t23549 = t23042*t23043*t23032*t23022;
  t23550 = -1.*t23089*t17477*t23022;
  t23551 = t23549 + t23550;
  t23678 = t12413*t23569*t23039;
  t23683 = t12413*t23043*t23314*t23037;
  t23631 = -1.*t23043*t23089*t23032*t23037;
  t23632 = -1.*t23042*t17477*t23037;
  t23633 = t23631 + t23632;
  t23684 = -1.*t12413*t23569*t23192;
  t23512 = t17477*t23288;
  t23525 = -1.*t23043*t23288*t23022;
  t23511 = -1.*t23043*t23032*t23283;
  t23513 = t23511 + t23381 + t23512;
  t23595 = Power(t23032,2);
  t23720 = t23043*t23288;
  t23721 = t17477*t23573;
  t23526 = -1.*t23283*t23101;
  t23527 = t23525 + t23526 + t23384;
  t23726 = t17477*t23288*t23022;
  t23727 = -1.*t23043*t23573*t23022;
  t23739 = -1.*t12413*t17477*t23314;
  t23740 = t23593*t23043*t23569;
  t23746 = t12413*t23043*t23314*t23022;
  t23748 = -1.*t12413*t23569*t23039;
  t23564 = -1.*t23043*t23272;
  t23565 = t23418 + t23564;
  t23770 = -1.*t22983*t22911;
  t23771 = -1.*t22978*t22997;
  t23772 = t23770 + t23771;
  t23788 = -0.325*t22983;
  t23789 = t23788 + t23278 + t23279;
  t23220 = t23041*t23192;
  t23222 = -1.*t6883*t23204;
  t23223 = t23220 + t23222;
  t23781 = 0.325*t22978;
  t23782 = -1.*t22983*t23258;
  t23783 = -1.*t22978*t23268;
  t23784 = t23781 + t23782 + t23783;
  t23779 = t23043*t23288*t23173;
  t23787 = Power(t23043,2);
  t23790 = t23787*t23789*t23037;
  t23802 = -1.*t12413*t17477*t23173;
  t23803 = t23032*t23772;
  t23804 = t23802 + t23803;
  t23810 = -1.*t12413*t17477*t23789;
  t23811 = t23032*t23784;
  t23812 = t23810 + t23811;
  t23806 = t23032*t17477*t23789;
  t23807 = t12413*t23784;
  t23808 = t23806 + t23807;
  t23817 = t23032*t17477*t23173;
  t23818 = t12413*t23772;
  t23819 = t23817 + t23818;
  t23813 = -1.*t12413*t23043*t23812;
  t23821 = t23314*t23804;
  t23822 = t23812*t23192;
  t23828 = t23043*t23089*t23173;
  t23829 = t23042*t23819;
  t23830 = t23828 + t23829;
  t23836 = t23042*t23808;
  t23837 = t23043*t23089*t23789;
  t23838 = t23836 + t23837;
  t23832 = -1.*t23089*t23808;
  t23833 = t23042*t23043*t23789;
  t23834 = t23832 + t23833;
  t23664 = -1.*t23281*t23173;
  t23665 = t17477*t23272*t23037;
  t23666 = t23664 + t23473 + t23665;
  t23668 = -1.*t17477*t23272*t23022;
  t23669 = t23281*t23037;
  t23670 = t23469 + t23668 + t23669;
  t23791 = Power(t17477,2);
  t23584 = t23281*t23173;
  t23585 = -1.*t17477*t23272*t23037;
  t23858 = -1.*t23784*t23173;
  t23859 = -1.*t23281*t23772;
  t23866 = t23784*t23037;
  t23864 = t23787*t23789*t23022;
  t23856 = -1.*t23043*t23288*t23173;
  t23860 = -1.*t23787*t23789*t23037;
  t23890 = t23812*t23039;
  t23894 = -1.*t23314*t23804;
  t23895 = -1.*t23812*t23192;
  t23843 = t23042*t23043*t23173;
  t23844 = -1.*t23089*t23819;
  t23845 = t23843 + t23844;
  t23716 = t23043*t23272;
  t23717 = t23512 + t23716;
  t23919 = -1.*t23787*t23789*t23022;
  t23935 = t12413*t23043*t23812;
  t23941 = -1.*t23812*t23039;
  t23960 = -0.28*t22911;
  t23961 = 0.0641*t22997;
  t23962 = t23960 + t23961;
  t23982 = t22978*t23258;
  t23983 = t22983*t23962;
  t23984 = t23982 + t23983;
  t23971 = t12413*t23022;
  t23973 = t23032*t17477*t23772;
  t23974 = t23971 + t23973;
  t23991 = t23032*t23022;
  t23992 = -1.*t12413*t17477*t23772;
  t23993 = t23991 + t23992;
  t23995 = t23042*t23043*t23772;
  t23996 = -1.*t23089*t23974;
  t23997 = t23995 + t23996;
  t23979 = -1.*t22978*t23962;
  t23980 = t23259 + t23979;
  t23985 = t23787*t23984*t23037;
  t24010 = -1.*t12413*t17477*t23984;
  t24011 = t23032*t23980;
  t24012 = t24010 + t24011;
  t24006 = t23032*t17477*t23984;
  t24007 = t12413*t23980;
  t24008 = t24006 + t24007;
  t24013 = -1.*t12413*t23043*t24012;
  t24017 = t24012*t23192;
  t24028 = t23042*t24008;
  t24029 = t23043*t23089*t23984;
  t24030 = t24028 + t24029;
  t24024 = -1.*t23089*t24008;
  t24025 = t23042*t23043*t23984;
  t24026 = t24024 + t24025;
  t23731 = t17477*t23272*t23022;
  t23732 = -1.*t23281*t23037;
  t23871 = t23270*t23022;
  t23872 = t23871 + t23669;
  t23878 = -1.*t23270*t23037;
  t23879 = t23664 + t23878;
  t24043 = -1.*t23980*t23173;
  t24048 = t23281*t23022;
  t24053 = t23980*t23037;
  t24049 = t23787*t23984*t23022;
  t24051 = t23043*t23288*t23772;
  t24044 = -1.*t23787*t23984*t23037;
  t24071 = t23314*t23993;
  t24074 = t24012*t23039;
  t23970 = t23043*t23089*t23772;
  t23975 = t23042*t23974;
  t23976 = t23970 + t23975;
  t24078 = -1.*t24012*t23192;
  t23115 = t23041*t23039;
  t23116 = -1.*t6883*t23104;
  t23117 = t23115 + t23116;
  t24108 = -1.*t23787*t23984*t23022;
  t24110 = -1.*t23043*t23288*t23772;
  t24124 = t12413*t23043*t24012;
  t24128 = -1.*t23314*t23993;
  t24131 = -1.*t24012*t23039;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=(-1.*t23041*t23104 - 1.*t23039*t6883)*var2[1] + t23117*var2[2];
  p_output1[10]=(-1.*t23041*t23136 - 1.*t12413*t23043*t6883)*var2[1] + (t12413*t23041*t23043 - 1.*t23136*t6883)*var2[2];
  p_output1[11]=(-1.*t23041*t23204 - 1.*t23192*t6883)*var2[1] + t23223*var2[2];
  p_output1[12]=t23104*var2[0] - 1.*t23234*t6883*var2[1] + t23041*t23234*var2[2] + ((-1.*t23241*t23290 - 1.*t23290*t23294 - 1.*t23136*t23298 - 1.*t23136*t23302)*t23307 + t23204*t23317 + t23136*t23322 + t23294*(t23204*t23298 + t23204*t23302 + t23290*t23307 + t23290*t23326))*var2[3];
  p_output1[13]=t23136*var2[0] - 1.*t23241*t6883*var2[1] + t23041*t23241*var2[2] + ((-1.*t23204*t23298 - 1.*t23204*t23302 - 1.*t23290*t23307 - 1.*t23290*t23326)*t23345 + t23307*(t23234*t23290 + t23104*t23298 + t23104*t23302 + t23290*t23345) + t23204*t23348 + t23104*t23359)*var2[3];
  p_output1[14]=t23204*var2[0] - 1.*t23326*t6883*var2[1] + t23041*t23326*var2[2] + ((t23241*t23290 + t23290*t23294 + t23136*t23298 + t23136*t23302)*t23345 + t23294*(-1.*t23234*t23290 - 1.*t23104*t23298 - 1.*t23104*t23302 - 1.*t23290*t23345) + t23104*t23382 + t23136*t23387)*var2[3];
  p_output1[15]=t23042*t23400*var2[0] + (t23041*t23101 + t23089*t23400*t6883)*var2[1] + (-1.*t23041*t23089*t23400 + t23101*t6883)*var2[2] + (-1.*t12413*t23042*t23043*t23322 + t23307*(-1.*t12413*t23043*t23283 - 1.*t12413*t23043*t23089*t23290 + t12413*t23042*t23043*t23302 + t23089*t23136*t23412 - 1.*t23042*t23294*t23412 + t23414) + t23042*t23317*t23428 + t23294*(-1.*t23089*t23204*t23412 + t23042*t23307*t23412 + t23425 - 1.*t23089*t23290*t23428 + t23042*t23302*t23428 + t23431))*var2[3] + (t23192*(t23032*t23043*t23412 + t23414) + t23202*t23419 - 1.*t23032*t23043*t23423 + t12413*t23043*(t23202*t23412 + t23425 + t23283*t23428 + t23431))*var2[4];
  p_output1[16]=-1.*t12413*t23042*t23043*var2[0] + (-1.*t23032*t23041*t23043 - 1.*t12413*t23043*t23089*t6883)*var2[1] + (t12413*t23041*t23043*t23089 - 1.*t23032*t23043*t6883)*var2[2] + (t23042*t23359*t23400 + t23042*t23348*t23428 + t23307*(-1.*t23089*t23290*t23400 + t23042*t23302*t23400 - 1.*t23089*t23104*t23412 + t23042*t23345*t23412 + t23464 + t23466) + t23345*(t23089*t23204*t23412 - 1.*t23042*t23307*t23412 + t23089*t23290*t23428 - 1.*t23042*t23302*t23428 + t23477 + t23480))*var2[3] + (t23192*(t23283*t23400 + t23101*t23412 + t23464 + t23466) + t23202*t23471 + t23101*t23475 + t23039*(-1.*t23202*t23412 - 1.*t23283*t23428 + t23477 + t23480))*var2[4];
  p_output1[17]=t23042*t23428*var2[0] + (t23041*t23202 + t23089*t23428*t6883)*var2[1] + (-1.*t23041*t23089*t23428 + t23202*t6883)*var2[2] + (-1.*t12413*t23042*t23043*t23387 + t23042*t23382*t23400 + t23345*(t12413*t23043*t23283 + t12413*t23043*t23089*t23290 - 1.*t12413*t23042*t23043*t23302 - 1.*t23089*t23136*t23412 + t23042*t23294*t23412 + t23516) + t23294*(t23089*t23290*t23400 - 1.*t23042*t23302*t23400 + t23089*t23104*t23412 - 1.*t23042*t23345*t23412 + t23520 + t23522))*var2[3] + (t23101*t23513 + t23039*(-1.*t23032*t23043*t23412 + t23516) + t12413*t23043*(-1.*t23283*t23400 - 1.*t23101*t23412 + t23520 + t23522) - 1.*t23032*t23043*t23527)*var2[4];
  p_output1[18]=t23551*var2[0] + (-1.*t12413*t23022*t23041*t23043 - 1.*t23556*t6883)*var2[1] + (t23041*t23556 - 1.*t12413*t23022*t23043*t6883)*var2[2] + (t23317*t23610 + t23322*t23618 + t23307*(t23592 + t23594 - 1.*t23290*t23614 - 1.*t23302*t23618 - 1.*t23136*t23622 - 1.*t23294*t23626) + t23294*(t23601 + t23602 + t23302*t23610 + t23204*t23622 + t23307*t23626 + t23290*t23633))*var2[3] + (-1.*t12413*t23037*t23043*t23419 - 1.*t12413*t17477*t23423 + t23192*(-1.*t17477*t23032*t23283 + t23571 + t23574 + t23592 + t23594 - 1.*t23043*t23569*t23595) + t12413*t23043*(t23032*t23037*t23043*t23283 - 1.*t23032*t23202*t23569 + t23579 + t23580 + t23601 + t23602))*var2[4] + (-1.*t17477*t23037*t23565 + t23037*t23043*(t17477*t23272 - 1.*t23043*t23569 + t23571 + t23574) + t17477*(-1.*t23037*t23043*t23272 - 1.*t17477*t23037*t23569 + t23579 + t23580) + t23043*(t23421 + t23584 + t23585))*var2[5];
  p_output1[19]=t23618*var2[0] + (-1.*t12413*t17477*t23041 - 1.*t23614*t6883)*var2[1] + (t23041*t23614 - 1.*t12413*t17477*t6883)*var2[2] + (t23359*t23551 + t23348*t23610 + t23307*(t23302*t23551 + t23290*t23556 + t23104*t23622 + t23345*t23626 + t23676 + t23678) + t23345*(-1.*t23302*t23610 - 1.*t23204*t23622 - 1.*t23307*t23626 - 1.*t23290*t23633 + t23683 + t23684))*var2[3] + (-1.*t12413*t23037*t23043*t23471 - 1.*t12413*t23022*t23043*t23475 + t23192*(t23022*t23032*t23043*t23283 - 1.*t23032*t23101*t23569 + t23653 + t23654 + t23676 + t23678) + t23039*(-1.*t23032*t23037*t23043*t23283 + t23032*t23202*t23569 + t23659 + t23660 + t23683 + t23684))*var2[4] + (t23037*t23043*(-1.*t23022*t23043*t23272 - 1.*t17477*t23022*t23569 + t23653 + t23654) + t23022*t23043*(t23037*t23043*t23272 + t17477*t23037*t23569 + t23659 + t23660) - 1.*t17477*t23022*t23666 - 1.*t17477*t23037*t23670)*var2[5];
  p_output1[20]=t23610*var2[0] + (-1.*t12413*t23037*t23041*t23043 - 1.*t23633*t6883)*var2[1] + (t23041*t23633 - 1.*t12413*t23037*t23043*t6883)*var2[2] + (t23382*t23551 + t23387*t23618 + t23345*(t23290*t23614 + t23302*t23618 + t23136*t23622 + t23294*t23626 + t23739 + t23740) + t23294*(-1.*t23302*t23551 - 1.*t23290*t23556 - 1.*t23104*t23622 - 1.*t23345*t23626 + t23746 + t23748))*var2[3] + (-1.*t12413*t23022*t23043*t23513 - 1.*t12413*t17477*t23527 + t23039*(t17477*t23032*t23283 + t23043*t23569*t23595 + t23720 + t23721 + t23739 + t23740) + t12413*t23043*(-1.*t23022*t23032*t23043*t23283 + t23032*t23101*t23569 + t23726 + t23727 + t23746 + t23748))*var2[4] + (-1.*t17477*t23022*t23717 + t23022*t23043*(-1.*t17477*t23272 + t23043*t23569 + t23720 + t23721) + t17477*(t23022*t23043*t23272 + t17477*t23022*t23569 + t23726 + t23727) + t23043*(t23525 + t23731 + t23732))*var2[5];
  p_output1[21]=t23307*var2[0] + t23223*var2[1] + (t23041*t23204 + t23192*t6883)*var2[2] + (t23317*t23830 + t23307*(t23813 - 1.*t23136*t23834 - 1.*t23294*t23838) + t23294*(t23821 + t23822 + t23302*t23830 + t23204*t23834 + t23307*t23838 + t23290*t23845))*var2[3] + (t23419*t23804 + t23192*(-1.*t17477*t23043*t23789 + t23032*t23043*t23808 + t23813) + t12413*t23043*(t23779 + t23790 + t23202*t23808 + t23283*t23819 + t23821 + t23822))*var2[4] + (t23043*t23173*t23565 + t17477*(-1.*t17477*t23173*t23272 + t23281*t23772 + t23779 + t23173*t23784 + t23790 + t23037*t23789*t23791))*var2[5] + (-0.1575*t23037 - 0.2255*t23772)*var2[6];
  p_output1[22]=(t23307*t23359 + t23348*t23830 + t23307*(t23319 + t23320 + t23321 + t23104*t23834 + t23345*t23838 + t23890) + t23345*(-1.*t23302*t23830 - 1.*t23204*t23834 - 1.*t23307*t23838 - 1.*t23290*t23845 + t23894 + t23895))*var2[3] + (t23192*t23475 + t23471*t23804 + t23192*(t23319 + t23421 + t23422 + t23101*t23808 + t23864 + t23890) + t23039*(-1.*t23202*t23808 - 1.*t23283*t23819 + t23856 + t23860 + t23894 + t23895))*var2[4] + (t23037*t23043*t23666 + t23043*t23173*t23670 + t23022*t23043*(t17477*t23173*t23272 - 1.*t23037*t23789*t23791 + t23856 + t23858 + t23859 + t23860) + t23037*t23043*(t23421 + t23584 + t23585 + t23022*t23789*t23791 + t23864 + t23866))*var2[5] + (t23037*(-1.*t23173*t23270 - 1.*t23037*t23789 + t23858 + t23859) + t23173*(t23037*t23270 + t23584 + t23022*t23789 + t23866) + t23772*t23872 + t23173*t23879)*var2[6];
  p_output1[23]=t23830*var2[0] + (t23041*t23804 - 1.*t23845*t6883)*var2[1] + (t23041*t23845 + t23804*t6883)*var2[2] + (t23307*t23382 + t23345*(t23136*t23834 + t23294*t23838 + t23935) + t23294*(t23356 + t23357 + t23358 - 1.*t23104*t23834 - 1.*t23345*t23838 + t23941))*var2[3] + (t23192*t23513 + t23039*(t17477*t23043*t23789 - 1.*t23032*t23043*t23808 + t23935) + t12413*t23043*(t23356 + t23473 + t23474 - 1.*t23101*t23808 + t23919 + t23941))*var2[4] + (t23037*t23043*t23717 + t17477*(t23473 + t23664 + t23665 - 1.*t23037*t23784 - 1.*t23022*t23789*t23791 + t23919))*var2[5] + 0.068*t23173*var2[6];
  p_output1[24]=t23976*var2[0] + (t23041*t23993 - 1.*t23997*t6883)*var2[1] + (t23041*t23997 + t23993*t6883)*var2[2] + (t23317*t23345 + t23307*(t24013 - 1.*t23136*t24026 - 1.*t23294*t24030) + t23294*(t23342 + t23346 + t23347 + t24017 + t23204*t24026 + t23307*t24030))*var2[3] + (t23039*t23419 + t23192*(-1.*t17477*t23043*t23984 + t23032*t23043*t24008 + t24013) + t12413*t23043*(t23342 + t23469 + t23470 + t23985 + t23202*t24008 + t24017))*var2[4] + (t23022*t23043*t23565 + t17477*(t23469 + t23668 + t23669 + t23173*t23980 + t23037*t23791*t23984 + t23985))*var2[5] + (-0.2255*t23037 - 0.1575*t23772)*var2[6] + (0.325*t22911 - 1.*t22911*t23268 - 1.*t22911*t23962)*var2[7];
  p_output1[25]=(t23345*t23348 + t23359*t23976 + t23307*(t23302*t23976 + t23290*t23997 + t23104*t24026 + t23345*t24030 + t24071 + t24074) + t23345*(t23384 + t23385 + t23386 - 1.*t23204*t24026 - 1.*t23307*t24030 + t24078))*var2[3] + (t23039*t23471 + t23475*t23993 + t23192*(t23283*t23974 + t23101*t24008 + t24049 + t24051 + t24071 + t24074) + t23039*(t23384 + t23525 + t23526 - 1.*t23202*t24008 + t24044 + t24078))*var2[4] + (t23022*t23043*t23670 + t23043*t23666*t23772 + t23022*t23043*(t23525 + t23731 + t23732 - 1.*t23037*t23791*t23984 + t24043 + t24044) + t23037*t23043*(-1.*t17477*t23272*t23772 + t23022*t23791*t23984 + t24048 + t24049 + t24051 + t24053))*var2[5] + (t23037*t23872 + t23022*t23879 + t23037*(-1.*t23022*t23270 + t23732 - 1.*t23037*t23984 + t24043) + t23173*(t23270*t23772 + t23022*t23984 + t24048 + t24053))*var2[6];
  p_output1[26]=t23345*var2[0] + t23117*var2[1] + (t23041*t23104 + t23039*t6883)*var2[2] + (t23382*t23976 + t23345*(t23136*t24026 + t23294*t24030 + t24124) + t23294*(-1.*t23302*t23976 - 1.*t23290*t23997 - 1.*t23104*t24026 - 1.*t23345*t24030 + t24128 + t24131))*var2[3] + (t23513*t23993 + t23039*(t17477*t23043*t23984 - 1.*t23032*t23043*t24008 + t24124) + t12413*t23043*(-1.*t23283*t23974 - 1.*t23101*t24008 + t24108 + t24110 + t24128 + t24131))*var2[4] + (t23043*t23717*t23772 + t17477*(-1.*t23022*t23281 + t17477*t23272*t23772 - 1.*t23037*t23980 - 1.*t23022*t23791*t23984 + t24108 + t24110))*var2[5] + 0.068*t23022*var2[6] + (0.325*t22997 - 1.*t22997*t23268 - 1.*t22997*t23962)*var2[7];
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 18, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "dJh_FlFoot_DiagonalStance2.hh"

namespace SymFunction
{

void dJh_FlFoot_DiagonalStance2_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
