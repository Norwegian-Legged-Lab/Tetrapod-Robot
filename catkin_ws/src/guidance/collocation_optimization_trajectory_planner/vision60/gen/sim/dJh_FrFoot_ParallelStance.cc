/*
 * Automatically Generated from Mathematica.
 * Sat 11 Jun 2022 23:24:43 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t22155;
  double t20640;
  double t22133;
  double t22161;
  double t22146;
  double t22168;
  double t22175;
  double t14225;
  double t22209;
  double t22210;
  double t22211;
  double t14226;
  double t22212;
  double t22219;
  double t22195;
  double t22216;
  double t22217;
  double t6269;
  double t22220;
  double t22221;
  double t22222;
  double t22274;
  double t22278;
  double t22279;
  double t22280;
  double t22282;
  double t22283;
  double t22296;
  double t22297;
  double t22298;
  double t22313;
  double t22314;
  double t22315;
  double t22310;
  double t22317;
  double t22318;
  double t22320;
  double t22322;
  double t22323;
  double t22324;
  double t22326;
  double t22327;
  double t22343;
  double t22348;
  double t22349;
  double t22371;
  double t22372;
  double t22374;
  double t22379;
  double t22384;
  double t22385;
  double t22387;
  double t22388;
  double t22389;
  double t22370;
  double t22375;
  double t22390;
  double t22391;
  double t22369;
  double t22392;
  double t22396;
  double t22401;
  double t22402;
  double t22403;
  double t22404;
  double t22405;
  double t22406;
  double t22407;
  double t22408;
  double t22409;
  double t22410;
  double t22411;
  double t22414;
  double t22415;
  double t22416;
  double t22419;
  double t22432;
  double t22433;
  double t22434;
  double t22429;
  double t22430;
  double t22431;
  double t22425;
  double t22426;
  double t22427;
  double t22359;
  double t22363;
  double t22367;
  double t22400;
  double t22421;
  double t22423;
  double t22444;
  double t22445;
  double t22446;
  double t22436;
  double t22437;
  double t22438;
  double t22474;
  double t22475;
  double t22477;
  double t22453;
  double t22454;
  double t22455;
  double t22534;
  double t22535;
  double t22536;
  double t22448;
  double t22462;
  double t22550;
  double t22551;
  double t22552;
  double t22554;
  double t22561;
  double t22562;
  double t22563;
  double t22449;
  double t22450;
  double t22451;
  double t22565;
  double t22567;
  double t22463;
  double t22464;
  double t22465;
  double t22484;
  double t22496;
  double t22600;
  double t22602;
  double t22485;
  double t22486;
  double t22487;
  double t22614;
  double t22616;
  double t22498;
  double t22499;
  double t22501;
  double t22515;
  double t22526;
  double t22652;
  double t22516;
  double t22517;
  double t22518;
  double t22656;
  double t22658;
  double t22527;
  double t22528;
  double t22529;
  double t22546;
  double t22557;
  double t22688;
  double t22689;
  double t22690;
  double t22694;
  double t22695;
  double t22716;
  double t22717;
  double t22718;
  double t22547;
  double t22548;
  double t22692;
  double t22696;
  double t22704;
  double t22706;
  double t22558;
  double t22559;
  double t22727;
  double t22728;
  double t22732;
  double t22736;
  double t22737;
  double t22744;
  double t22745;
  double t22746;
  double t22748;
  double t22749;
  double t22750;
  double t22752;
  double t22753;
  double t22754;
  double t22756;
  double t22757;
  double t22758;
  double t22609;
  double t22605;
  double t22760;
  double t22761;
  double t22762;
  double t22780;
  double t22782;
  double t22606;
  double t22607;
  double t22790;
  double t22792;
  double t22610;
  double t22611;
  double t22811;
  double t22813;
  double t22711;
  double t22712;
  double t22713;
  double t22818;
  double t22819;
  double t22767;
  double t22768;
  double t22769;
  double t22647;
  double t22661;
  double t22648;
  double t22649;
  double t22847;
  double t22849;
  double t22729;
  double t22853;
  double t22855;
  double t22662;
  double t22663;
  double t22874;
  double t22877;
  double t22881;
  double t22883;
  double t22685;
  double t22686;
  double t22906;
  double t22907;
  double t22908;
  double t22923;
  double t22924;
  double t22335;
  double t22336;
  double t22338;
  double t22916;
  double t22917;
  double t22918;
  double t22919;
  double t22914;
  double t22922;
  double t22925;
  double t22947;
  double t22948;
  double t22949;
  double t22938;
  double t22939;
  double t22940;
  double t22943;
  double t22944;
  double t22945;
  double t22954;
  double t22955;
  double t22956;
  double t22950;
  double t22953;
  double t22958;
  double t22964;
  double t22965;
  double t22966;
  double t22968;
  double t22969;
  double t22970;
  double t22972;
  double t22973;
  double t22974;
  double t22785;
  double t22786;
  double t22787;
  double t22795;
  double t22796;
  double t22797;
  double t22926;
  double t22699;
  double t22700;
  double t22994;
  double t22995;
  double t23002;
  double t23000;
  double t22992;
  double t22996;
  double t23026;
  double t23029;
  double t23031;
  double t22979;
  double t22980;
  double t22981;
  double t22843;
  double t22844;
  double t23054;
  double t23073;
  double t23077;
  double t23096;
  double t23097;
  double t23098;
  double t23110;
  double t23111;
  double t23112;
  double t23120;
  double t23121;
  double t23122;
  double t23126;
  double t23127;
  double t23128;
  double t23130;
  double t23131;
  double t23132;
  double t23107;
  double t23108;
  double t23113;
  double t23146;
  double t23147;
  double t23148;
  double t23142;
  double t23143;
  double t23144;
  double t23149;
  double t23152;
  double t23159;
  double t23160;
  double t23161;
  double t23163;
  double t23164;
  double t23165;
  double t22858;
  double t22859;
  double t23007;
  double t23008;
  double t23014;
  double t23015;
  double t23178;
  double t23183;
  double t23188;
  double t23184;
  double t23186;
  double t23179;
  double t23206;
  double t23209;
  double t23119;
  double t23123;
  double t23124;
  double t23213;
  double t22289;
  double t22290;
  double t22291;
  double t23242;
  double t23244;
  double t23260;
  double t23263;
  double t23266;
  t22155 = Cos(var1[13]);
  t20640 = Cos(var1[14]);
  t22133 = Sin(var1[13]);
  t22161 = Sin(var1[14]);
  t22146 = t20640*t22133;
  t22168 = -1.*t22155*t22161;
  t22175 = t22146 + t22168;
  t14225 = Cos(var1[5]);
  t22209 = t22155*t20640;
  t22210 = t22133*t22161;
  t22211 = t22209 + t22210;
  t14226 = Sin(var1[12]);
  t22212 = Sin(var1[5]);
  t22219 = Cos(var1[3]);
  t22195 = -1.*t14225*t14226*t22175;
  t22216 = t22211*t22212;
  t22217 = t22195 + t22216;
  t6269 = Sin(var1[3]);
  t22220 = Cos(var1[12]);
  t22221 = Cos(var1[4]);
  t22222 = t22220*t22221*t22175;
  t22274 = Sin(var1[4]);
  t22278 = t14225*t22211;
  t22279 = t14226*t22175*t22212;
  t22280 = t22278 + t22279;
  t22282 = -1.*t22274*t22280;
  t22283 = t22222 + t22282;
  t22296 = t22221*t14226;
  t22297 = t22220*t22274*t22212;
  t22298 = t22296 + t22297;
  t22313 = -1.*t20640*t22133;
  t22314 = t22155*t22161;
  t22315 = t22313 + t22314;
  t22310 = -1.*t14225*t14226*t22211;
  t22317 = t22315*t22212;
  t22318 = t22310 + t22317;
  t22320 = t22220*t22221*t22211;
  t22322 = t14225*t22315;
  t22323 = t14226*t22211*t22212;
  t22324 = t22322 + t22323;
  t22326 = -1.*t22274*t22324;
  t22327 = t22320 + t22326;
  t22343 = -1.*t22220*t22175*t22274;
  t22348 = -1.*t22221*t22280;
  t22349 = t22343 + t22348;
  t22371 = -0.0641*t20640;
  t22372 = -0.28*t22161;
  t22374 = t22371 + t22372;
  t22379 = -1.*t20640;
  t22384 = 1. + t22379;
  t22385 = 0.075*t22384;
  t22387 = 0.355*t20640;
  t22388 = -0.0641*t22161;
  t22389 = t22385 + t22387 + t22388;
  t22370 = -0.325*t22133;
  t22375 = t22155*t22374;
  t22390 = t22133*t22389;
  t22391 = t22370 + t22375 + t22390;
  t22369 = -0.068*t14226;
  t22392 = t22220*t22391;
  t22396 = t22369 + t22392;
  t22401 = -1.*t22155;
  t22402 = 1. + t22401;
  t22403 = 0.325*t22402;
  t22404 = -1.*t22133*t22374;
  t22405 = t22155*t22389;
  t22406 = t22403 + t22404 + t22405;
  t22407 = t14225*t22406;
  t22408 = -1.*t22220;
  t22409 = 1. + t22408;
  t22410 = -0.1575*t22409;
  t22411 = -0.2255*t22220;
  t22414 = -1.*t14226*t22391;
  t22415 = t22410 + t22411 + t22414;
  t22416 = -1.*t22415*t22212;
  t22419 = t22407 + t22416;
  t22432 = t22221*t22396;
  t22433 = -1.*t22274*t22419;
  t22434 = t22432 + t22433;
  t22429 = t14226*t22274;
  t22430 = -1.*t22220*t22221*t22212;
  t22431 = t22429 + t22430;
  t22425 = t22396*t22274;
  t22426 = t22221*t22419;
  t22427 = t22425 + t22426;
  t22359 = t22220*t22211*t22274;
  t22363 = t22221*t22324;
  t22367 = t22359 + t22363;
  t22400 = -1.*t22396*t22274;
  t22421 = -1.*t22221*t22419;
  t22423 = t22400 + t22421;
  t22444 = t14225*t22415;
  t22445 = t22406*t22212;
  t22446 = t22444 + t22445;
  t22436 = -1.*t14226*t22274;
  t22437 = t22220*t22221*t22212;
  t22438 = t22436 + t22437;
  t22474 = t22220*t22175*t22274;
  t22475 = t22221*t22280;
  t22477 = t22474 + t22475;
  t22453 = -1.*t22220*t22211*t22274;
  t22454 = -1.*t22221*t22324;
  t22455 = t22453 + t22454;
  t22534 = t14225*t14226*t22175;
  t22535 = -1.*t22211*t22212;
  t22536 = t22534 + t22535;
  t22448 = -1.*t22220*t14225*t22446;
  t22462 = t22446*t22318;
  t22550 = -1.*t14225*t22415;
  t22551 = -1.*t22406*t22212;
  t22552 = t22550 + t22551;
  t22554 = t22220*t22212*t22446;
  t22561 = t14225*t14226*t22211;
  t22562 = -1.*t22315*t22212;
  t22563 = t22561 + t22562;
  t22449 = -1.*t22431*t22427;
  t22450 = -1.*t22298*t22434;
  t22451 = t22448 + t22449 + t22450;
  t22565 = t22419*t22318;
  t22567 = t22446*t22324;
  t22463 = t22427*t22367;
  t22464 = t22434*t22327;
  t22465 = t22462 + t22463 + t22464;
  t22484 = t22446*t22217;
  t22496 = -1.*t22446*t22318;
  t22600 = t22446*t22280;
  t22602 = t22419*t22217;
  t22485 = t22427*t22477;
  t22486 = t22434*t22283;
  t22487 = t22484 + t22485 + t22486;
  t22614 = -1.*t22419*t22318;
  t22616 = -1.*t22446*t22324;
  t22498 = -1.*t22427*t22367;
  t22499 = -1.*t22434*t22327;
  t22501 = t22496 + t22498 + t22499;
  t22515 = t22220*t14225*t22446;
  t22526 = -1.*t22446*t22217;
  t22652 = -1.*t22220*t22212*t22446;
  t22516 = t22431*t22427;
  t22517 = t22298*t22434;
  t22518 = t22515 + t22516 + t22517;
  t22656 = -1.*t22446*t22280;
  t22658 = -1.*t22419*t22217;
  t22527 = -1.*t22427*t22477;
  t22528 = -1.*t22434*t22283;
  t22529 = t22526 + t22527 + t22528;
  t22546 = -1.*t14226*t22396;
  t22557 = t22220*t22396*t22211;
  t22688 = 0.068*t14226;
  t22689 = -1.*t22220*t22391;
  t22690 = t22688 + t22689;
  t22694 = -0.068*t22220;
  t22695 = t22694 + t22414;
  t22716 = -1.*t22221*t14226*t22175;
  t22717 = -1.*t22220*t22175*t22274*t22212;
  t22718 = t22716 + t22717;
  t22547 = t22220*t22212*t22419;
  t22548 = t22546 + t22547 + t22448;
  t22692 = -1.*t22220*t22396;
  t22696 = -1.*t14226*t22695;
  t22704 = -1.*t14226*t22396*t22211;
  t22706 = t22220*t22695*t22211;
  t22558 = t22419*t22324;
  t22559 = t22557 + t22462 + t22558;
  t22727 = Power(t14225,2);
  t22728 = -1.*t22220*t22727*t22690;
  t22732 = t14225*t14226*t22446;
  t22736 = -1.*t22220*t14225*t22211*t22446;
  t22737 = t14225*t22690*t22318;
  t22744 = -1.*t14226*t22211*t22274;
  t22745 = t22220*t22221*t22211*t22212;
  t22746 = t22744 + t22745;
  t22748 = t22695*t22274;
  t22749 = -1.*t22221*t22690*t22212;
  t22750 = t22748 + t22749;
  t22752 = t22221*t22695;
  t22753 = t22690*t22274*t22212;
  t22754 = t22752 + t22753;
  t22756 = t22220*t22274;
  t22757 = t22221*t14226*t22212;
  t22758 = t22756 + t22757;
  t22609 = -1.*t22220*t22396*t22211;
  t22605 = t22220*t22396*t22175;
  t22760 = t22220*t22221;
  t22761 = -1.*t14226*t22274*t22212;
  t22762 = t22760 + t22761;
  t22780 = -1.*t14226*t22396*t22175;
  t22782 = t22220*t22695*t22175;
  t22606 = t22419*t22280;
  t22607 = t22605 + t22606 + t22484;
  t22790 = t14226*t22396*t22211;
  t22792 = -1.*t22220*t22695*t22211;
  t22610 = -1.*t22419*t22324;
  t22611 = t22609 + t22496 + t22610;
  t22811 = -1.*t22220*t14225*t22175*t22446;
  t22813 = t14225*t22690*t22217;
  t22711 = -1.*t14226*t22175*t22274;
  t22712 = t22220*t22221*t22175*t22212;
  t22713 = t22711 + t22712;
  t22818 = t22220*t14225*t22211*t22446;
  t22819 = -1.*t14225*t22690*t22318;
  t22767 = -1.*t22221*t14226*t22211;
  t22768 = -1.*t22220*t22211*t22274*t22212;
  t22769 = t22767 + t22768;
  t22647 = t14226*t22396;
  t22661 = -1.*t22220*t22396*t22175;
  t22648 = -1.*t22220*t22212*t22419;
  t22649 = t22647 + t22648 + t22515;
  t22847 = t22220*t22396;
  t22849 = t14226*t22695;
  t22729 = Power(t22212,2);
  t22853 = t14226*t22396*t22175;
  t22855 = -1.*t22220*t22695*t22175;
  t22662 = -1.*t22419*t22280;
  t22663 = t22661 + t22662 + t22526;
  t22874 = t22220*t22727*t22690;
  t22877 = -1.*t14225*t14226*t22446;
  t22881 = t22220*t14225*t22175*t22446;
  t22883 = -1.*t14225*t22690*t22217;
  t22685 = -1.*t22220*t22415;
  t22686 = t22546 + t22685;
  t22906 = -1.*t22155*t20640;
  t22907 = -1.*t22133*t22161;
  t22908 = t22906 + t22907;
  t22923 = -0.325*t22155;
  t22924 = t22923 + t22404 + t22405;
  t22335 = t22219*t22318;
  t22336 = -1.*t6269*t22327;
  t22338 = t22335 + t22336;
  t22916 = 0.325*t22133;
  t22917 = -1.*t22155*t22374;
  t22918 = -1.*t22133*t22389;
  t22919 = t22916 + t22917 + t22918;
  t22914 = t22220*t22396*t22315;
  t22922 = Power(t22220,2);
  t22925 = t22922*t22924*t22211;
  t22947 = -1.*t14225*t14226*t22924;
  t22948 = t22919*t22212;
  t22949 = t22947 + t22948;
  t22938 = -1.*t14225*t14226*t22315;
  t22939 = t22908*t22212;
  t22940 = t22938 + t22939;
  t22943 = t14225*t22919;
  t22944 = t14226*t22924*t22212;
  t22945 = t22943 + t22944;
  t22954 = t14225*t22908;
  t22955 = t14226*t22315*t22212;
  t22956 = t22954 + t22955;
  t22950 = -1.*t22220*t14225*t22949;
  t22953 = t22949*t22318;
  t22958 = t22446*t22940;
  t22964 = t22220*t22315*t22274;
  t22965 = t22221*t22956;
  t22966 = t22964 + t22965;
  t22968 = t22220*t22924*t22274;
  t22969 = t22221*t22945;
  t22970 = t22968 + t22969;
  t22972 = t22220*t22221*t22924;
  t22973 = -1.*t22274*t22945;
  t22974 = t22972 + t22973;
  t22785 = -1.*t22406*t22315;
  t22786 = t14226*t22415*t22211;
  t22787 = t22785 + t22609 + t22786;
  t22795 = -1.*t14226*t22415*t22175;
  t22796 = t22406*t22211;
  t22797 = t22605 + t22795 + t22796;
  t22926 = Power(t14226,2);
  t22699 = t22406*t22315;
  t22700 = -1.*t14226*t22415*t22211;
  t22994 = -1.*t22919*t22315;
  t22995 = -1.*t22406*t22908;
  t23002 = t22919*t22211;
  t23000 = t22922*t22924*t22175;
  t22992 = -1.*t22220*t22396*t22315;
  t22996 = -1.*t22922*t22924*t22211;
  t23026 = t22949*t22217;
  t23029 = -1.*t22949*t22318;
  t23031 = -1.*t22446*t22940;
  t22979 = t22220*t22221*t22315;
  t22980 = -1.*t22274*t22956;
  t22981 = t22979 + t22980;
  t22843 = t22220*t22415;
  t22844 = t22647 + t22843;
  t23054 = -1.*t22922*t22924*t22175;
  t23073 = t22220*t14225*t22949;
  t23077 = -1.*t22949*t22217;
  t23096 = -0.28*t20640;
  t23097 = 0.0641*t22161;
  t23098 = t23096 + t23097;
  t23110 = t22133*t22374;
  t23111 = t22155*t23098;
  t23112 = t23110 + t23111;
  t23120 = t14225*t22175;
  t23121 = t14226*t22908*t22212;
  t23122 = t23120 + t23121;
  t23126 = -1.*t14225*t14226*t22908;
  t23127 = t22175*t22212;
  t23128 = t23126 + t23127;
  t23130 = t22220*t22221*t22908;
  t23131 = -1.*t22274*t23122;
  t23132 = t23130 + t23131;
  t23107 = -1.*t22133*t23098;
  t23108 = t22375 + t23107;
  t23113 = t22922*t23112*t22211;
  t23146 = -1.*t14225*t14226*t23112;
  t23147 = t23108*t22212;
  t23148 = t23146 + t23147;
  t23142 = t14225*t23108;
  t23143 = t14226*t23112*t22212;
  t23144 = t23142 + t23143;
  t23149 = -1.*t22220*t14225*t23148;
  t23152 = t23148*t22318;
  t23159 = t22220*t23112*t22274;
  t23160 = t22221*t23144;
  t23161 = t23159 + t23160;
  t23163 = t22220*t22221*t23112;
  t23164 = -1.*t22274*t23144;
  t23165 = t23163 + t23164;
  t22858 = t14226*t22415*t22175;
  t22859 = -1.*t22406*t22211;
  t23007 = t22391*t22175;
  t23008 = t23007 + t22796;
  t23014 = -1.*t22391*t22211;
  t23015 = t22785 + t23014;
  t23178 = -1.*t23108*t22315;
  t23183 = t22406*t22175;
  t23188 = t23108*t22211;
  t23184 = t22922*t23112*t22175;
  t23186 = t22220*t22396*t22908;
  t23179 = -1.*t22922*t23112*t22211;
  t23206 = t22446*t23128;
  t23209 = t23148*t22217;
  t23119 = t22220*t22908*t22274;
  t23123 = t22221*t23122;
  t23124 = t23119 + t23123;
  t23213 = -1.*t23148*t22318;
  t22289 = t22219*t22217;
  t22290 = -1.*t6269*t22283;
  t22291 = t22289 + t22290;
  t23242 = -1.*t22922*t23112*t22175;
  t23244 = -1.*t22220*t22396*t22908;
  t23260 = t22220*t14225*t23148;
  t23263 = -1.*t22446*t23128;
  t23266 = -1.*t23148*t22217;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=(-1.*t22219*t22283 - 1.*t22217*t6269)*var2[1] + t22291*var2[2];
  p_output1[10]=(-1.*t22219*t22298 - 1.*t14225*t22220*t6269)*var2[1] + (t14225*t22219*t22220 - 1.*t22298*t6269)*var2[2];
  p_output1[11]=(-1.*t22219*t22327 - 1.*t22318*t6269)*var2[1] + t22338*var2[2];
  p_output1[12]=t22283*var2[0] - 1.*t22349*t6269*var2[1] + t22219*t22349*var2[2] + (t22367*(-1.*t22298*t22423 - 1.*t22298*t22427 - 1.*t22431*t22434 - 1.*t22434*t22438) + t22327*t22451 + t22431*(t22327*t22423 + t22327*t22427 + t22367*t22434 + t22434*t22455) + t22298*t22465)*var2[3];
  p_output1[13]=t22298*var2[0] - 1.*t22438*t6269*var2[1] + t22219*t22438*var2[2] + ((-1.*t22327*t22423 - 1.*t22327*t22427 - 1.*t22367*t22434 - 1.*t22434*t22455)*t22477 + t22367*(t22283*t22423 + t22283*t22427 + t22349*t22434 + t22434*t22477) + t22327*t22487 + t22283*t22501)*var2[3];
  p_output1[14]=t22327*var2[0] - 1.*t22455*t6269*var2[1] + t22219*t22455*var2[2] + ((t22298*t22423 + t22298*t22427 + t22431*t22434 + t22434*t22438)*t22477 + t22431*(-1.*t22283*t22423 - 1.*t22283*t22427 - 1.*t22349*t22434 - 1.*t22434*t22477) + t22283*t22518 + t22298*t22529)*var2[3];
  p_output1[15]=t22221*t22536*var2[0] + (t22219*t22280 + t22274*t22536*t6269)*var2[1] + (-1.*t22219*t22274*t22536 + t22280*t6269)*var2[2] + (-1.*t14225*t22220*t22221*t22465 + t22367*(-1.*t14225*t22220*t22419 + t14225*t22220*t22221*t22427 - 1.*t14225*t22220*t22274*t22434 + t22274*t22298*t22552 - 1.*t22221*t22431*t22552 + t22554) + t22221*t22451*t22563 + t22431*(-1.*t22274*t22327*t22552 + t22221*t22367*t22552 + t22221*t22427*t22563 - 1.*t22274*t22434*t22563 + t22565 + t22567))*var2[3] + (t22324*t22548 + t22318*(t22212*t22220*t22552 + t22554) - 1.*t22212*t22220*t22559 + t14225*t22220*(t22324*t22552 + t22419*t22563 + t22565 + t22567))*var2[4];
  p_output1[16]=-1.*t14225*t22220*t22221*var2[0] + (-1.*t22212*t22219*t22220 - 1.*t14225*t22220*t22274*t6269)*var2[1] + (t14225*t22219*t22220*t22274 - 1.*t22212*t22220*t6269)*var2[2] + (t22221*t22501*t22536 + t22221*t22487*t22563 + t22367*(t22221*t22427*t22536 - 1.*t22274*t22434*t22536 - 1.*t22274*t22283*t22552 + t22221*t22477*t22552 + t22600 + t22602) + t22477*(t22274*t22327*t22552 - 1.*t22221*t22367*t22552 - 1.*t22221*t22427*t22563 + t22274*t22434*t22563 + t22614 + t22616))*var2[3] + (t22318*(t22419*t22536 + t22280*t22552 + t22600 + t22602) + t22324*t22607 + t22280*t22611 + t22217*(-1.*t22324*t22552 - 1.*t22419*t22563 + t22614 + t22616))*var2[4];
  p_output1[17]=t22221*t22563*var2[0] + (t22219*t22324 + t22274*t22563*t6269)*var2[1] + (-1.*t22219*t22274*t22563 + t22324*t6269)*var2[2] + (-1.*t14225*t22220*t22221*t22529 + t22221*t22518*t22536 + t22477*(t14225*t22220*t22419 - 1.*t14225*t22220*t22221*t22427 + t14225*t22220*t22274*t22434 - 1.*t22274*t22298*t22552 + t22221*t22431*t22552 + t22652) + t22431*(-1.*t22221*t22427*t22536 + t22274*t22434*t22536 + t22274*t22283*t22552 - 1.*t22221*t22477*t22552 + t22656 + t22658))*var2[3] + (t22280*t22649 + t22217*(-1.*t22212*t22220*t22552 + t22652) + t14225*t22220*(-1.*t22419*t22536 - 1.*t22280*t22552 + t22656 + t22658) - 1.*t22212*t22220*t22663)*var2[4];
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=t22713*var2[0] + (-1.*t14225*t22175*t22219*t22220 - 1.*t22718*t6269)*var2[1] + (t22219*t22718 - 1.*t14225*t22175*t22220*t6269)*var2[2] + (t22451*t22746 + t22465*t22758 + t22367*(t22728 + t22732 - 1.*t22431*t22750 - 1.*t22298*t22754 - 1.*t22427*t22758 - 1.*t22434*t22762) + t22431*(t22736 + t22737 + t22427*t22746 + t22367*t22750 + t22327*t22754 + t22434*t22769))*var2[3] + (-1.*t14225*t22211*t22220*t22548 - 1.*t14225*t14226*t22559 + t22318*(-1.*t14226*t22212*t22419 + t22692 + t22696 + t22728 - 1.*t22220*t22690*t22729 + t22732) + t14225*t22220*(t22211*t22212*t22220*t22419 - 1.*t22212*t22324*t22690 + t22704 + t22706 + t22736 + t22737))*var2[4] + (-1.*t14226*t22211*t22686 + t22211*t22220*(t14226*t22415 - 1.*t22220*t22690 + t22692 + t22696) + t22220*(t22557 + t22699 + t22700) + t14226*(-1.*t22211*t22220*t22415 - 1.*t14226*t22211*t22690 + t22704 + t22706))*var2[5];
  p_output1[37]=t22758*var2[0] + (-1.*t14225*t14226*t22219 - 1.*t22762*t6269)*var2[1] + (t22219*t22762 - 1.*t14225*t14226*t6269)*var2[2] + (t22501*t22713 + t22487*t22746 + t22367*(t22427*t22713 + t22434*t22718 + t22477*t22750 + t22283*t22754 + t22811 + t22813) + t22477*(-1.*t22427*t22746 - 1.*t22367*t22750 - 1.*t22327*t22754 - 1.*t22434*t22769 + t22818 + t22819))*var2[3] + (-1.*t14225*t22211*t22220*t22607 - 1.*t14225*t22175*t22220*t22611 + t22318*(t22175*t22212*t22220*t22419 - 1.*t22212*t22280*t22690 + t22780 + t22782 + t22811 + t22813) + t22217*(-1.*t22211*t22212*t22220*t22419 + t22212*t22324*t22690 + t22790 + t22792 + t22818 + t22819))*var2[4] + (t22211*t22220*(-1.*t22175*t22220*t22415 - 1.*t14226*t22175*t22690 + t22780 + t22782) - 1.*t14226*t22175*t22787 + t22175*t22220*(t22211*t22220*t22415 + t14226*t22211*t22690 + t22790 + t22792) - 1.*t14226*t22211*t22797)*var2[5];
  p_output1[38]=t22746*var2[0] + (-1.*t14225*t22211*t22219*t22220 - 1.*t22769*t6269)*var2[1] + (t22219*t22769 - 1.*t14225*t22211*t22220*t6269)*var2[2] + (t22518*t22713 + t22529*t22758 + t22477*(t22431*t22750 + t22298*t22754 + t22427*t22758 + t22434*t22762 + t22874 + t22877) + t22431*(-1.*t22427*t22713 - 1.*t22434*t22718 - 1.*t22477*t22750 - 1.*t22283*t22754 + t22881 + t22883))*var2[3] + (-1.*t14225*t22175*t22220*t22649 - 1.*t14225*t14226*t22663 + t22217*(t14226*t22212*t22419 + t22220*t22690*t22729 + t22847 + t22849 + t22874 + t22877) + t14225*t22220*(-1.*t22175*t22212*t22220*t22419 + t22212*t22280*t22690 + t22853 + t22855 + t22881 + t22883))*var2[4] + (-1.*t14226*t22175*t22844 + t22175*t22220*(-1.*t14226*t22415 + t22220*t22690 + t22847 + t22849) + t14226*(t22175*t22220*t22415 + t14226*t22175*t22690 + t22853 + t22855) + t22220*(t22661 + t22858 + t22859))*var2[5];
  p_output1[39]=t22367*var2[0] + t22338*var2[1] + (t22219*t22327 + t22318*t6269)*var2[2] + (t22451*t22966 + t22367*(t22950 - 1.*t22431*t22970 - 1.*t22298*t22974) + t22431*(t22953 + t22958 + t22427*t22966 + t22367*t22970 + t22327*t22974 + t22434*t22981))*var2[3] + (t22548*t22940 + t22318*(-1.*t14226*t22220*t22924 + t22212*t22220*t22945 + t22950) + t14225*t22220*(t22914 + t22925 + t22324*t22945 + t22953 + t22419*t22956 + t22958))*var2[4] + (t22220*t22315*t22686 + t14226*(-1.*t14226*t22315*t22415 + t22406*t22908 + t22914 + t22315*t22919 + t22925 + t22211*t22924*t22926))*var2[5] + (0.1575*t22211 + 0.2255*t22908)*var2[12];
  p_output1[40]=(t22367*t22501 + t22487*t22966 + t22367*(t22462 + t22463 + t22464 + t22477*t22970 + t22283*t22974 + t23026) + t22477*(-1.*t22427*t22966 - 1.*t22367*t22970 - 1.*t22327*t22974 - 1.*t22434*t22981 + t23029 + t23031))*var2[3] + (t22318*t22611 + t22607*t22940 + t22318*(t22462 + t22557 + t22558 + t22280*t22945 + t23000 + t23026) + t22217*(-1.*t22324*t22945 - 1.*t22419*t22956 + t22992 + t22996 + t23029 + t23031))*var2[4] + (t22211*t22220*t22787 + t22220*t22315*t22797 + t22175*t22220*(t14226*t22315*t22415 - 1.*t22211*t22924*t22926 + t22992 + t22994 + t22995 + t22996) + t22211*t22220*(t22557 + t22699 + t22700 + t22175*t22924*t22926 + t23000 + t23002))*var2[5] + (t22211*(-1.*t22315*t22391 - 1.*t22211*t22924 + t22994 + t22995) + t22315*(t22211*t22391 + t22699 + t22175*t22924 + t23002) + t22908*t23008 + t22315*t23015)*var2[12];
  p_output1[41]=t22966*var2[0] + (t22219*t22940 - 1.*t22981*t6269)*var2[1] + (t22219*t22981 + t22940*t6269)*var2[2] + (t22367*t22518 + t22477*(t22431*t22970 + t22298*t22974 + t23073) + t22431*(t22496 + t22498 + t22499 - 1.*t22477*t22970 - 1.*t22283*t22974 + t23077))*var2[3] + (t22318*t22649 + t22217*(t14226*t22220*t22924 - 1.*t22212*t22220*t22945 + t23073) + t14225*t22220*(t22496 + t22609 + t22610 - 1.*t22280*t22945 + t23054 + t23077))*var2[4] + (t22211*t22220*t22844 + t14226*(t22609 + t22785 + t22786 - 1.*t22211*t22919 - 1.*t22175*t22924*t22926 + t23054))*var2[5] - 0.068*t22315*var2[12];
  p_output1[42]=t23124*var2[0] + (t22219*t23128 - 1.*t23132*t6269)*var2[1] + (t22219*t23132 + t23128*t6269)*var2[2] + (t22451*t22477 + t22367*(t23149 - 1.*t22431*t23161 - 1.*t22298*t23165) + t22431*(t22484 + t22485 + t22486 + t23152 + t22367*t23161 + t22327*t23165))*var2[3] + (t22217*t22548 + t22318*(-1.*t14226*t22220*t23112 + t22212*t22220*t23144 + t23149) + t14225*t22220*(t22484 + t22605 + t22606 + t23113 + t22324*t23144 + t23152))*var2[4] + (t22175*t22220*t22686 + t14226*(t22605 + t22795 + t22796 + t22315*t23108 + t22211*t22926*t23112 + t23113))*var2[5] + (0.2255*t22211 + 0.1575*t22908)*var2[12] + (0.325*t20640 - 1.*t20640*t22389 - 1.*t20640*t23098)*var2[13];
  p_output1[43]=(t22477*t22487 + t22501*t23124 + t22367*(t22427*t23124 + t22434*t23132 + t22477*t23161 + t22283*t23165 + t23206 + t23209) + t22477*(t22526 + t22527 + t22528 - 1.*t22367*t23161 - 1.*t22327*t23165 + t23213))*var2[3] + (t22217*t22607 + t22611*t23128 + t22318*(t22419*t23122 + t22280*t23144 + t23184 + t23186 + t23206 + t23209) + t22217*(t22526 + t22661 + t22662 - 1.*t22324*t23144 + t23179 + t23213))*var2[4] + (t22175*t22220*t22797 + t22220*t22787*t22908 + t22175*t22220*(t22661 + t22858 + t22859 - 1.*t22211*t22926*t23112 + t23178 + t23179) + t22211*t22220*(-1.*t14226*t22415*t22908 + t22175*t22926*t23112 + t23183 + t23184 + t23186 + t23188))*var2[5] + (t22211*t23008 + t22175*t23015 + t22211*(-1.*t22175*t22391 + t22859 - 1.*t22211*t23112 + t23178) + t22315*(t22391*t22908 + t22175*t23112 + t23183 + t23188))*var2[12];
  p_output1[44]=t22477*var2[0] + t22291*var2[1] + (t22219*t22283 + t22217*t6269)*var2[2] + (t22518*t23124 + t22477*(t22431*t23161 + t22298*t23165 + t23260) + t22431*(-1.*t22427*t23124 - 1.*t22434*t23132 - 1.*t22477*t23161 - 1.*t22283*t23165 + t23263 + t23266))*var2[3] + (t22649*t23128 + t22217*(t14226*t22220*t23112 - 1.*t22212*t22220*t23144 + t23260) + t14225*t22220*(-1.*t22419*t23122 - 1.*t22280*t23144 + t23242 + t23244 + t23263 + t23266))*var2[4] + (t22220*t22844*t22908 + t14226*(-1.*t22175*t22406 + t14226*t22415*t22908 - 1.*t22211*t23108 - 1.*t22175*t22926*t23112 + t23242 + t23244))*var2[5] - 0.068*t22175*var2[12] + (0.325*t22161 - 1.*t22161*t22389 - 1.*t22161*t23098)*var2[13];
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 18, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "dJh_FrFoot_ParallelStance.hh"

namespace SymFunction
{

void dJh_FrFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
