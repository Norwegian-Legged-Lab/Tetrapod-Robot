/*
 * Automatically Generated from Mathematica.
 * Sat 11 Jun 2022 23:25:05 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t23416;
  double t23377;
  double t23395;
  double t23430;
  double t23396;
  double t23432;
  double t23433;
  double t23375;
  double t23435;
  double t23436;
  double t23437;
  double t23376;
  double t23438;
  double t23490;
  double t23434;
  double t23439;
  double t23440;
  double t23370;
  double t23494;
  double t23495;
  double t23496;
  double t23498;
  double t23499;
  double t23500;
  double t23501;
  double t23502;
  double t23504;
  double t23521;
  double t23523;
  double t23524;
  double t23540;
  double t23541;
  double t23542;
  double t23539;
  double t23544;
  double t23545;
  double t23548;
  double t23552;
  double t23553;
  double t23557;
  double t23559;
  double t23560;
  double t23581;
  double t23582;
  double t23583;
  double t23600;
  double t23603;
  double t23604;
  double t23606;
  double t23607;
  double t23611;
  double t23615;
  double t23619;
  double t23623;
  double t23599;
  double t23605;
  double t23627;
  double t23628;
  double t23598;
  double t23629;
  double t23630;
  double t23635;
  double t23636;
  double t23637;
  double t23638;
  double t23639;
  double t23640;
  double t23641;
  double t23642;
  double t23643;
  double t23644;
  double t23645;
  double t23646;
  double t23647;
  double t23648;
  double t23649;
  double t23667;
  double t23671;
  double t23672;
  double t23661;
  double t23662;
  double t23663;
  double t23655;
  double t23656;
  double t23657;
  double t23590;
  double t23591;
  double t23596;
  double t23634;
  double t23650;
  double t23651;
  double t23682;
  double t23685;
  double t23686;
  double t23674;
  double t23675;
  double t23677;
  double t23713;
  double t23714;
  double t23715;
  double t23692;
  double t23693;
  double t23694;
  double t23793;
  double t23794;
  double t23795;
  double t23687;
  double t23701;
  double t23824;
  double t23825;
  double t23826;
  double t23831;
  double t23847;
  double t23848;
  double t23849;
  double t23688;
  double t23689;
  double t23690;
  double t23851;
  double t23853;
  double t23702;
  double t23703;
  double t23704;
  double t23725;
  double t23742;
  double t23899;
  double t23901;
  double t23728;
  double t23729;
  double t23730;
  double t23913;
  double t23915;
  double t23743;
  double t23744;
  double t23745;
  double t23761;
  double t23775;
  double t23954;
  double t23762;
  double t23763;
  double t23764;
  double t23958;
  double t23963;
  double t23776;
  double t23777;
  double t23778;
  double t23815;
  double t23840;
  double t24020;
  double t24021;
  double t24022;
  double t24032;
  double t24033;
  double t24060;
  double t24061;
  double t24062;
  double t23816;
  double t23820;
  double t24027;
  double t24034;
  double t24042;
  double t24046;
  double t23841;
  double t23842;
  double t24072;
  double t24073;
  double t24079;
  double t24083;
  double t24084;
  double t24091;
  double t24092;
  double t24093;
  double t24095;
  double t24096;
  double t24097;
  double t24099;
  double t24100;
  double t24101;
  double t24103;
  double t24104;
  double t24105;
  double t23908;
  double t23904;
  double t24107;
  double t24109;
  double t24111;
  double t24132;
  double t24134;
  double t23905;
  double t23906;
  double t24142;
  double t24144;
  double t23909;
  double t23910;
  double t24163;
  double t24165;
  double t24055;
  double t24056;
  double t24057;
  double t24170;
  double t24171;
  double t24116;
  double t24117;
  double t24118;
  double t23949;
  double t23966;
  double t23950;
  double t23951;
  double t24199;
  double t24201;
  double t24075;
  double t24205;
  double t24207;
  double t23967;
  double t23968;
  double t24226;
  double t24229;
  double t24233;
  double t24235;
  double t24016;
  double t24018;
  double t24258;
  double t24259;
  double t24260;
  double t24275;
  double t24276;
  double t23570;
  double t23575;
  double t23576;
  double t24268;
  double t24269;
  double t24270;
  double t24271;
  double t24266;
  double t24274;
  double t24277;
  double t24299;
  double t24300;
  double t24301;
  double t24290;
  double t24291;
  double t24292;
  double t24295;
  double t24296;
  double t24297;
  double t24306;
  double t24307;
  double t24308;
  double t24302;
  double t24305;
  double t24310;
  double t24316;
  double t24317;
  double t24318;
  double t24320;
  double t24321;
  double t24322;
  double t24324;
  double t24325;
  double t24326;
  double t24137;
  double t24138;
  double t24139;
  double t24147;
  double t24148;
  double t24149;
  double t24278;
  double t24037;
  double t24038;
  double t24346;
  double t24347;
  double t24354;
  double t24352;
  double t24344;
  double t24348;
  double t24378;
  double t24381;
  double t24383;
  double t24331;
  double t24332;
  double t24333;
  double t24195;
  double t24196;
  double t24406;
  double t24425;
  double t24429;
  double t24448;
  double t24449;
  double t24450;
  double t24462;
  double t24463;
  double t24464;
  double t24472;
  double t24473;
  double t24474;
  double t24479;
  double t24480;
  double t24481;
  double t24483;
  double t24484;
  double t24485;
  double t24459;
  double t24460;
  double t24465;
  double t24499;
  double t24500;
  double t24501;
  double t24495;
  double t24496;
  double t24497;
  double t24502;
  double t24505;
  double t24512;
  double t24513;
  double t24514;
  double t24516;
  double t24517;
  double t24518;
  double t24210;
  double t24211;
  double t24359;
  double t24360;
  double t24366;
  double t24367;
  double t24531;
  double t24536;
  double t24541;
  double t24537;
  double t24539;
  double t24532;
  double t24559;
  double t24563;
  double t24471;
  double t24475;
  double t24477;
  double t24567;
  double t23509;
  double t23510;
  double t23514;
  double t24597;
  double t24599;
  double t24615;
  double t24618;
  double t24621;
  t23416 = Cos(var1[16]);
  t23377 = Cos(var1[17]);
  t23395 = Sin(var1[16]);
  t23430 = Sin(var1[17]);
  t23396 = t23377*t23395;
  t23432 = -1.*t23416*t23430;
  t23433 = t23396 + t23432;
  t23375 = Cos(var1[5]);
  t23435 = t23416*t23377;
  t23436 = t23395*t23430;
  t23437 = t23435 + t23436;
  t23376 = Sin(var1[15]);
  t23438 = Sin(var1[5]);
  t23490 = Cos(var1[3]);
  t23434 = -1.*t23375*t23376*t23433;
  t23439 = t23437*t23438;
  t23440 = t23434 + t23439;
  t23370 = Sin(var1[3]);
  t23494 = Cos(var1[15]);
  t23495 = Cos(var1[4]);
  t23496 = t23494*t23495*t23433;
  t23498 = Sin(var1[4]);
  t23499 = t23375*t23437;
  t23500 = t23376*t23433*t23438;
  t23501 = t23499 + t23500;
  t23502 = -1.*t23498*t23501;
  t23504 = t23496 + t23502;
  t23521 = t23495*t23376;
  t23523 = t23494*t23498*t23438;
  t23524 = t23521 + t23523;
  t23540 = -1.*t23377*t23395;
  t23541 = t23416*t23430;
  t23542 = t23540 + t23541;
  t23539 = -1.*t23375*t23376*t23437;
  t23544 = t23542*t23438;
  t23545 = t23539 + t23544;
  t23548 = t23494*t23495*t23437;
  t23552 = t23375*t23542;
  t23553 = t23376*t23437*t23438;
  t23557 = t23552 + t23553;
  t23559 = -1.*t23498*t23557;
  t23560 = t23548 + t23559;
  t23581 = -1.*t23494*t23433*t23498;
  t23582 = -1.*t23495*t23501;
  t23583 = t23581 + t23582;
  t23600 = -0.0641*t23377;
  t23603 = -0.28*t23430;
  t23604 = t23600 + t23603;
  t23606 = -1.*t23377;
  t23607 = 1. + t23606;
  t23611 = -0.575*t23607;
  t23615 = -0.295*t23377;
  t23619 = -0.0641*t23430;
  t23623 = t23611 + t23615 + t23619;
  t23599 = 0.325*t23395;
  t23605 = t23416*t23604;
  t23627 = t23395*t23623;
  t23628 = t23599 + t23605 + t23627;
  t23598 = -0.068*t23376;
  t23629 = t23494*t23628;
  t23630 = t23598 + t23629;
  t23635 = -1.*t23416;
  t23636 = 1. + t23635;
  t23637 = -0.325*t23636;
  t23638 = -1.*t23395*t23604;
  t23639 = t23416*t23623;
  t23640 = t23637 + t23638 + t23639;
  t23641 = t23375*t23640;
  t23642 = -1.*t23494;
  t23643 = 1. + t23642;
  t23644 = -0.1575*t23643;
  t23645 = -0.2255*t23494;
  t23646 = -1.*t23376*t23628;
  t23647 = t23644 + t23645 + t23646;
  t23648 = -1.*t23647*t23438;
  t23649 = t23641 + t23648;
  t23667 = t23495*t23630;
  t23671 = -1.*t23498*t23649;
  t23672 = t23667 + t23671;
  t23661 = t23376*t23498;
  t23662 = -1.*t23494*t23495*t23438;
  t23663 = t23661 + t23662;
  t23655 = t23630*t23498;
  t23656 = t23495*t23649;
  t23657 = t23655 + t23656;
  t23590 = t23494*t23437*t23498;
  t23591 = t23495*t23557;
  t23596 = t23590 + t23591;
  t23634 = -1.*t23630*t23498;
  t23650 = -1.*t23495*t23649;
  t23651 = t23634 + t23650;
  t23682 = t23375*t23647;
  t23685 = t23640*t23438;
  t23686 = t23682 + t23685;
  t23674 = -1.*t23376*t23498;
  t23675 = t23494*t23495*t23438;
  t23677 = t23674 + t23675;
  t23713 = t23494*t23433*t23498;
  t23714 = t23495*t23501;
  t23715 = t23713 + t23714;
  t23692 = -1.*t23494*t23437*t23498;
  t23693 = -1.*t23495*t23557;
  t23694 = t23692 + t23693;
  t23793 = t23375*t23376*t23433;
  t23794 = -1.*t23437*t23438;
  t23795 = t23793 + t23794;
  t23687 = -1.*t23494*t23375*t23686;
  t23701 = t23686*t23545;
  t23824 = -1.*t23375*t23647;
  t23825 = -1.*t23640*t23438;
  t23826 = t23824 + t23825;
  t23831 = t23494*t23438*t23686;
  t23847 = t23375*t23376*t23437;
  t23848 = -1.*t23542*t23438;
  t23849 = t23847 + t23848;
  t23688 = -1.*t23663*t23657;
  t23689 = -1.*t23524*t23672;
  t23690 = t23687 + t23688 + t23689;
  t23851 = t23649*t23545;
  t23853 = t23686*t23557;
  t23702 = t23657*t23596;
  t23703 = t23672*t23560;
  t23704 = t23701 + t23702 + t23703;
  t23725 = t23686*t23440;
  t23742 = -1.*t23686*t23545;
  t23899 = t23686*t23501;
  t23901 = t23649*t23440;
  t23728 = t23657*t23715;
  t23729 = t23672*t23504;
  t23730 = t23725 + t23728 + t23729;
  t23913 = -1.*t23649*t23545;
  t23915 = -1.*t23686*t23557;
  t23743 = -1.*t23657*t23596;
  t23744 = -1.*t23672*t23560;
  t23745 = t23742 + t23743 + t23744;
  t23761 = t23494*t23375*t23686;
  t23775 = -1.*t23686*t23440;
  t23954 = -1.*t23494*t23438*t23686;
  t23762 = t23663*t23657;
  t23763 = t23524*t23672;
  t23764 = t23761 + t23762 + t23763;
  t23958 = -1.*t23686*t23501;
  t23963 = -1.*t23649*t23440;
  t23776 = -1.*t23657*t23715;
  t23777 = -1.*t23672*t23504;
  t23778 = t23775 + t23776 + t23777;
  t23815 = -1.*t23376*t23630;
  t23840 = t23494*t23630*t23437;
  t24020 = 0.068*t23376;
  t24021 = -1.*t23494*t23628;
  t24022 = t24020 + t24021;
  t24032 = -0.068*t23494;
  t24033 = t24032 + t23646;
  t24060 = -1.*t23495*t23376*t23433;
  t24061 = -1.*t23494*t23433*t23498*t23438;
  t24062 = t24060 + t24061;
  t23816 = t23494*t23438*t23649;
  t23820 = t23815 + t23816 + t23687;
  t24027 = -1.*t23494*t23630;
  t24034 = -1.*t23376*t24033;
  t24042 = -1.*t23376*t23630*t23437;
  t24046 = t23494*t24033*t23437;
  t23841 = t23649*t23557;
  t23842 = t23840 + t23701 + t23841;
  t24072 = Power(t23375,2);
  t24073 = -1.*t23494*t24072*t24022;
  t24079 = t23375*t23376*t23686;
  t24083 = -1.*t23494*t23375*t23437*t23686;
  t24084 = t23375*t24022*t23545;
  t24091 = -1.*t23376*t23437*t23498;
  t24092 = t23494*t23495*t23437*t23438;
  t24093 = t24091 + t24092;
  t24095 = t24033*t23498;
  t24096 = -1.*t23495*t24022*t23438;
  t24097 = t24095 + t24096;
  t24099 = t23495*t24033;
  t24100 = t24022*t23498*t23438;
  t24101 = t24099 + t24100;
  t24103 = t23494*t23498;
  t24104 = t23495*t23376*t23438;
  t24105 = t24103 + t24104;
  t23908 = -1.*t23494*t23630*t23437;
  t23904 = t23494*t23630*t23433;
  t24107 = t23494*t23495;
  t24109 = -1.*t23376*t23498*t23438;
  t24111 = t24107 + t24109;
  t24132 = -1.*t23376*t23630*t23433;
  t24134 = t23494*t24033*t23433;
  t23905 = t23649*t23501;
  t23906 = t23904 + t23905 + t23725;
  t24142 = t23376*t23630*t23437;
  t24144 = -1.*t23494*t24033*t23437;
  t23909 = -1.*t23649*t23557;
  t23910 = t23908 + t23742 + t23909;
  t24163 = -1.*t23494*t23375*t23433*t23686;
  t24165 = t23375*t24022*t23440;
  t24055 = -1.*t23376*t23433*t23498;
  t24056 = t23494*t23495*t23433*t23438;
  t24057 = t24055 + t24056;
  t24170 = t23494*t23375*t23437*t23686;
  t24171 = -1.*t23375*t24022*t23545;
  t24116 = -1.*t23495*t23376*t23437;
  t24117 = -1.*t23494*t23437*t23498*t23438;
  t24118 = t24116 + t24117;
  t23949 = t23376*t23630;
  t23966 = -1.*t23494*t23630*t23433;
  t23950 = -1.*t23494*t23438*t23649;
  t23951 = t23949 + t23950 + t23761;
  t24199 = t23494*t23630;
  t24201 = t23376*t24033;
  t24075 = Power(t23438,2);
  t24205 = t23376*t23630*t23433;
  t24207 = -1.*t23494*t24033*t23433;
  t23967 = -1.*t23649*t23501;
  t23968 = t23966 + t23967 + t23775;
  t24226 = t23494*t24072*t24022;
  t24229 = -1.*t23375*t23376*t23686;
  t24233 = t23494*t23375*t23433*t23686;
  t24235 = -1.*t23375*t24022*t23440;
  t24016 = -1.*t23494*t23647;
  t24018 = t23815 + t24016;
  t24258 = -1.*t23416*t23377;
  t24259 = -1.*t23395*t23430;
  t24260 = t24258 + t24259;
  t24275 = 0.325*t23416;
  t24276 = t24275 + t23638 + t23639;
  t23570 = t23490*t23545;
  t23575 = -1.*t23370*t23560;
  t23576 = t23570 + t23575;
  t24268 = -0.325*t23395;
  t24269 = -1.*t23416*t23604;
  t24270 = -1.*t23395*t23623;
  t24271 = t24268 + t24269 + t24270;
  t24266 = t23494*t23630*t23542;
  t24274 = Power(t23494,2);
  t24277 = t24274*t24276*t23437;
  t24299 = -1.*t23375*t23376*t24276;
  t24300 = t24271*t23438;
  t24301 = t24299 + t24300;
  t24290 = -1.*t23375*t23376*t23542;
  t24291 = t24260*t23438;
  t24292 = t24290 + t24291;
  t24295 = t23375*t24271;
  t24296 = t23376*t24276*t23438;
  t24297 = t24295 + t24296;
  t24306 = t23375*t24260;
  t24307 = t23376*t23542*t23438;
  t24308 = t24306 + t24307;
  t24302 = -1.*t23494*t23375*t24301;
  t24305 = t24301*t23545;
  t24310 = t23686*t24292;
  t24316 = t23494*t23542*t23498;
  t24317 = t23495*t24308;
  t24318 = t24316 + t24317;
  t24320 = t23494*t24276*t23498;
  t24321 = t23495*t24297;
  t24322 = t24320 + t24321;
  t24324 = t23494*t23495*t24276;
  t24325 = -1.*t23498*t24297;
  t24326 = t24324 + t24325;
  t24137 = -1.*t23640*t23542;
  t24138 = t23376*t23647*t23437;
  t24139 = t24137 + t23908 + t24138;
  t24147 = -1.*t23376*t23647*t23433;
  t24148 = t23640*t23437;
  t24149 = t23904 + t24147 + t24148;
  t24278 = Power(t23376,2);
  t24037 = t23640*t23542;
  t24038 = -1.*t23376*t23647*t23437;
  t24346 = -1.*t24271*t23542;
  t24347 = -1.*t23640*t24260;
  t24354 = t24271*t23437;
  t24352 = t24274*t24276*t23433;
  t24344 = -1.*t23494*t23630*t23542;
  t24348 = -1.*t24274*t24276*t23437;
  t24378 = t24301*t23440;
  t24381 = -1.*t24301*t23545;
  t24383 = -1.*t23686*t24292;
  t24331 = t23494*t23495*t23542;
  t24332 = -1.*t23498*t24308;
  t24333 = t24331 + t24332;
  t24195 = t23494*t23647;
  t24196 = t23949 + t24195;
  t24406 = -1.*t24274*t24276*t23433;
  t24425 = t23494*t23375*t24301;
  t24429 = -1.*t24301*t23440;
  t24448 = -0.28*t23377;
  t24449 = 0.0641*t23430;
  t24450 = t24448 + t24449;
  t24462 = t23395*t23604;
  t24463 = t23416*t24450;
  t24464 = t24462 + t24463;
  t24472 = t23375*t23433;
  t24473 = t23376*t24260*t23438;
  t24474 = t24472 + t24473;
  t24479 = -1.*t23375*t23376*t24260;
  t24480 = t23433*t23438;
  t24481 = t24479 + t24480;
  t24483 = t23494*t23495*t24260;
  t24484 = -1.*t23498*t24474;
  t24485 = t24483 + t24484;
  t24459 = -1.*t23395*t24450;
  t24460 = t23605 + t24459;
  t24465 = t24274*t24464*t23437;
  t24499 = -1.*t23375*t23376*t24464;
  t24500 = t24460*t23438;
  t24501 = t24499 + t24500;
  t24495 = t23375*t24460;
  t24496 = t23376*t24464*t23438;
  t24497 = t24495 + t24496;
  t24502 = -1.*t23494*t23375*t24501;
  t24505 = t24501*t23545;
  t24512 = t23494*t24464*t23498;
  t24513 = t23495*t24497;
  t24514 = t24512 + t24513;
  t24516 = t23494*t23495*t24464;
  t24517 = -1.*t23498*t24497;
  t24518 = t24516 + t24517;
  t24210 = t23376*t23647*t23433;
  t24211 = -1.*t23640*t23437;
  t24359 = t23628*t23433;
  t24360 = t24359 + t24148;
  t24366 = -1.*t23628*t23437;
  t24367 = t24137 + t24366;
  t24531 = -1.*t24460*t23542;
  t24536 = t23640*t23433;
  t24541 = t24460*t23437;
  t24537 = t24274*t24464*t23433;
  t24539 = t23494*t23630*t24260;
  t24532 = -1.*t24274*t24464*t23437;
  t24559 = t23686*t24481;
  t24563 = t24501*t23440;
  t24471 = t23494*t24260*t23498;
  t24475 = t23495*t24474;
  t24477 = t24471 + t24475;
  t24567 = -1.*t24501*t23545;
  t23509 = t23490*t23440;
  t23510 = -1.*t23370*t23504;
  t23514 = t23509 + t23510;
  t24597 = -1.*t24274*t24464*t23433;
  t24599 = -1.*t23494*t23630*t24260;
  t24615 = t23494*t23375*t24501;
  t24618 = -1.*t23686*t24481;
  t24621 = -1.*t24501*t23440;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=(-1.*t23370*t23440 - 1.*t23490*t23504)*var2[1] + t23514*var2[2];
  p_output1[10]=(-1.*t23370*t23375*t23494 - 1.*t23490*t23524)*var2[1] + (t23375*t23490*t23494 - 1.*t23370*t23524)*var2[2];
  p_output1[11]=(-1.*t23370*t23545 - 1.*t23490*t23560)*var2[1] + t23576*var2[2];
  p_output1[12]=t23504*var2[0] - 1.*t23370*t23583*var2[1] + t23490*t23583*var2[2] + (t23596*(-1.*t23524*t23651 - 1.*t23524*t23657 - 1.*t23663*t23672 - 1.*t23672*t23677) + t23560*t23690 + t23663*(t23560*t23651 + t23560*t23657 + t23596*t23672 + t23672*t23694) + t23524*t23704)*var2[3];
  p_output1[13]=t23524*var2[0] - 1.*t23370*t23677*var2[1] + t23490*t23677*var2[2] + ((-1.*t23560*t23651 - 1.*t23560*t23657 - 1.*t23596*t23672 - 1.*t23672*t23694)*t23715 + t23596*(t23504*t23651 + t23504*t23657 + t23583*t23672 + t23672*t23715) + t23560*t23730 + t23504*t23745)*var2[3];
  p_output1[14]=t23560*var2[0] - 1.*t23370*t23694*var2[1] + t23490*t23694*var2[2] + ((t23524*t23651 + t23524*t23657 + t23663*t23672 + t23672*t23677)*t23715 + t23663*(-1.*t23504*t23651 - 1.*t23504*t23657 - 1.*t23583*t23672 - 1.*t23672*t23715) + t23504*t23764 + t23524*t23778)*var2[3];
  p_output1[15]=t23495*t23795*var2[0] + (t23490*t23501 + t23370*t23498*t23795)*var2[1] + (t23370*t23501 - 1.*t23490*t23498*t23795)*var2[2] + (-1.*t23375*t23494*t23495*t23704 + t23596*(-1.*t23375*t23494*t23649 + t23375*t23494*t23495*t23657 - 1.*t23375*t23494*t23498*t23672 + t23498*t23524*t23826 - 1.*t23495*t23663*t23826 + t23831) + t23495*t23690*t23849 + t23663*(-1.*t23498*t23560*t23826 + t23495*t23596*t23826 + t23495*t23657*t23849 - 1.*t23498*t23672*t23849 + t23851 + t23853))*var2[3] + (t23557*t23820 + t23545*(t23438*t23494*t23826 + t23831) - 1.*t23438*t23494*t23842 + t23375*t23494*(t23557*t23826 + t23649*t23849 + t23851 + t23853))*var2[4];
  p_output1[16]=-1.*t23375*t23494*t23495*var2[0] + (-1.*t23438*t23490*t23494 - 1.*t23370*t23375*t23494*t23498)*var2[1] + (-1.*t23370*t23438*t23494 + t23375*t23490*t23494*t23498)*var2[2] + (t23495*t23745*t23795 + t23495*t23730*t23849 + t23596*(t23495*t23657*t23795 - 1.*t23498*t23672*t23795 - 1.*t23498*t23504*t23826 + t23495*t23715*t23826 + t23899 + t23901) + t23715*(t23498*t23560*t23826 - 1.*t23495*t23596*t23826 - 1.*t23495*t23657*t23849 + t23498*t23672*t23849 + t23913 + t23915))*var2[3] + (t23545*(t23649*t23795 + t23501*t23826 + t23899 + t23901) + t23557*t23906 + t23501*t23910 + t23440*(-1.*t23557*t23826 - 1.*t23649*t23849 + t23913 + t23915))*var2[4];
  p_output1[17]=t23495*t23849*var2[0] + (t23490*t23557 + t23370*t23498*t23849)*var2[1] + (t23370*t23557 - 1.*t23490*t23498*t23849)*var2[2] + (-1.*t23375*t23494*t23495*t23778 + t23495*t23764*t23795 + t23715*(t23375*t23494*t23649 - 1.*t23375*t23494*t23495*t23657 + t23375*t23494*t23498*t23672 - 1.*t23498*t23524*t23826 + t23495*t23663*t23826 + t23954) + t23663*(-1.*t23495*t23657*t23795 + t23498*t23672*t23795 + t23498*t23504*t23826 - 1.*t23495*t23715*t23826 + t23958 + t23963))*var2[3] + (t23501*t23951 + t23440*(-1.*t23438*t23494*t23826 + t23954) + t23375*t23494*(-1.*t23649*t23795 - 1.*t23501*t23826 + t23958 + t23963) - 1.*t23438*t23494*t23968)*var2[4];
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=t24057*var2[0] + (-1.*t23375*t23433*t23490*t23494 - 1.*t23370*t24062)*var2[1] + (-1.*t23370*t23375*t23433*t23494 + t23490*t24062)*var2[2] + (t23690*t24093 + t23704*t24105 + t23596*(t24073 + t24079 - 1.*t23663*t24097 - 1.*t23524*t24101 - 1.*t23657*t24105 - 1.*t23672*t24111) + t23663*(t24083 + t24084 + t23657*t24093 + t23596*t24097 + t23560*t24101 + t23672*t24118))*var2[3] + (-1.*t23375*t23437*t23494*t23820 - 1.*t23375*t23376*t23842 + t23545*(-1.*t23376*t23438*t23649 + t24027 + t24034 + t24073 - 1.*t23494*t24022*t24075 + t24079) + t23375*t23494*(t23437*t23438*t23494*t23649 - 1.*t23438*t23557*t24022 + t24042 + t24046 + t24083 + t24084))*var2[4] + (-1.*t23376*t23437*t24018 + t23437*t23494*(t23376*t23647 - 1.*t23494*t24022 + t24027 + t24034) + t23494*(t23840 + t24037 + t24038) + t23376*(-1.*t23437*t23494*t23647 - 1.*t23376*t23437*t24022 + t24042 + t24046))*var2[5];
  p_output1[46]=t24105*var2[0] + (-1.*t23375*t23376*t23490 - 1.*t23370*t24111)*var2[1] + (-1.*t23370*t23375*t23376 + t23490*t24111)*var2[2] + (t23745*t24057 + t23730*t24093 + t23596*(t23657*t24057 + t23672*t24062 + t23715*t24097 + t23504*t24101 + t24163 + t24165) + t23715*(-1.*t23657*t24093 - 1.*t23596*t24097 - 1.*t23560*t24101 - 1.*t23672*t24118 + t24170 + t24171))*var2[3] + (-1.*t23375*t23437*t23494*t23906 - 1.*t23375*t23433*t23494*t23910 + t23545*(t23433*t23438*t23494*t23649 - 1.*t23438*t23501*t24022 + t24132 + t24134 + t24163 + t24165) + t23440*(-1.*t23437*t23438*t23494*t23649 + t23438*t23557*t24022 + t24142 + t24144 + t24170 + t24171))*var2[4] + (t23437*t23494*(-1.*t23433*t23494*t23647 - 1.*t23376*t23433*t24022 + t24132 + t24134) - 1.*t23376*t23433*t24139 + t23433*t23494*(t23437*t23494*t23647 + t23376*t23437*t24022 + t24142 + t24144) - 1.*t23376*t23437*t24149)*var2[5];
  p_output1[47]=t24093*var2[0] + (-1.*t23375*t23437*t23490*t23494 - 1.*t23370*t24118)*var2[1] + (-1.*t23370*t23375*t23437*t23494 + t23490*t24118)*var2[2] + (t23764*t24057 + t23778*t24105 + t23715*(t23663*t24097 + t23524*t24101 + t23657*t24105 + t23672*t24111 + t24226 + t24229) + t23663*(-1.*t23657*t24057 - 1.*t23672*t24062 - 1.*t23715*t24097 - 1.*t23504*t24101 + t24233 + t24235))*var2[3] + (-1.*t23375*t23433*t23494*t23951 - 1.*t23375*t23376*t23968 + t23440*(t23376*t23438*t23649 + t23494*t24022*t24075 + t24199 + t24201 + t24226 + t24229) + t23375*t23494*(-1.*t23433*t23438*t23494*t23649 + t23438*t23501*t24022 + t24205 + t24207 + t24233 + t24235))*var2[4] + (-1.*t23376*t23433*t24196 + t23433*t23494*(-1.*t23376*t23647 + t23494*t24022 + t24199 + t24201) + t23376*(t23433*t23494*t23647 + t23376*t23433*t24022 + t24205 + t24207) + t23494*(t23966 + t24210 + t24211))*var2[5];
  p_output1[48]=t23596*var2[0] + t23576*var2[1] + (t23370*t23545 + t23490*t23560)*var2[2] + (t23690*t24318 + t23596*(t24302 - 1.*t23663*t24322 - 1.*t23524*t24326) + t23663*(t24305 + t24310 + t23657*t24318 + t23596*t24322 + t23560*t24326 + t23672*t24333))*var2[3] + (t23820*t24292 + t23545*(-1.*t23376*t23494*t24276 + t23438*t23494*t24297 + t24302) + t23375*t23494*(t24266 + t24277 + t23557*t24297 + t24305 + t23649*t24308 + t24310))*var2[4] + (t23494*t23542*t24018 + t23376*(-1.*t23376*t23542*t23647 + t23640*t24260 + t24266 + t23542*t24271 + t24277 + t23437*t24276*t24278))*var2[5] + (0.1575*t23437 + 0.2255*t24260)*var2[15];
  p_output1[49]=(t23596*t23745 + t23730*t24318 + t23596*(t23701 + t23702 + t23703 + t23715*t24322 + t23504*t24326 + t24378) + t23715*(-1.*t23657*t24318 - 1.*t23596*t24322 - 1.*t23560*t24326 - 1.*t23672*t24333 + t24381 + t24383))*var2[3] + (t23545*t23910 + t23906*t24292 + t23545*(t23701 + t23840 + t23841 + t23501*t24297 + t24352 + t24378) + t23440*(-1.*t23557*t24297 - 1.*t23649*t24308 + t24344 + t24348 + t24381 + t24383))*var2[4] + (t23437*t23494*t24139 + t23494*t23542*t24149 + t23433*t23494*(t23376*t23542*t23647 - 1.*t23437*t24276*t24278 + t24344 + t24346 + t24347 + t24348) + t23437*t23494*(t23840 + t24037 + t24038 + t23433*t24276*t24278 + t24352 + t24354))*var2[5] + (t23437*(-1.*t23542*t23628 - 1.*t23437*t24276 + t24346 + t24347) + t23542*(t23437*t23628 + t24037 + t23433*t24276 + t24354) + t24260*t24360 + t23542*t24367)*var2[15];
  p_output1[50]=t24318*var2[0] + (t23490*t24292 - 1.*t23370*t24333)*var2[1] + (t23370*t24292 + t23490*t24333)*var2[2] + (t23596*t23764 + t23715*(t23663*t24322 + t23524*t24326 + t24425) + t23663*(t23742 + t23743 + t23744 - 1.*t23715*t24322 - 1.*t23504*t24326 + t24429))*var2[3] + (t23545*t23951 + t23440*(t23376*t23494*t24276 - 1.*t23438*t23494*t24297 + t24425) + t23375*t23494*(t23742 + t23908 + t23909 - 1.*t23501*t24297 + t24406 + t24429))*var2[4] + (t23437*t23494*t24196 + t23376*(t23908 + t24137 + t24138 - 1.*t23437*t24271 - 1.*t23433*t24276*t24278 + t24406))*var2[5] - 0.068*t23542*var2[15];
  p_output1[51]=t24477*var2[0] + (t23490*t24481 - 1.*t23370*t24485)*var2[1] + (t23370*t24481 + t23490*t24485)*var2[2] + (t23690*t23715 + t23596*(t24502 - 1.*t23663*t24514 - 1.*t23524*t24518) + t23663*(t23725 + t23728 + t23729 + t24505 + t23596*t24514 + t23560*t24518))*var2[3] + (t23440*t23820 + t23545*(-1.*t23376*t23494*t24464 + t23438*t23494*t24497 + t24502) + t23375*t23494*(t23725 + t23904 + t23905 + t24465 + t23557*t24497 + t24505))*var2[4] + (t23433*t23494*t24018 + t23376*(t23904 + t24147 + t24148 + t23542*t24460 + t23437*t24278*t24464 + t24465))*var2[5] + (0.2255*t23437 + 0.1575*t24260)*var2[15] + (-0.325*t23377 - 1.*t23377*t23623 - 1.*t23377*t24450)*var2[16];
  p_output1[52]=(t23715*t23730 + t23745*t24477 + t23596*(t23657*t24477 + t23672*t24485 + t23715*t24514 + t23504*t24518 + t24559 + t24563) + t23715*(t23775 + t23776 + t23777 - 1.*t23596*t24514 - 1.*t23560*t24518 + t24567))*var2[3] + (t23440*t23906 + t23910*t24481 + t23545*(t23649*t24474 + t23501*t24497 + t24537 + t24539 + t24559 + t24563) + t23440*(t23775 + t23966 + t23967 - 1.*t23557*t24497 + t24532 + t24567))*var2[4] + (t23433*t23494*t24149 + t23494*t24139*t24260 + t23433*t23494*(t23966 + t24210 + t24211 - 1.*t23437*t24278*t24464 + t24531 + t24532) + t23437*t23494*(-1.*t23376*t23647*t24260 + t23433*t24278*t24464 + t24536 + t24537 + t24539 + t24541))*var2[5] + (t23437*t24360 + t23433*t24367 + t23437*(-1.*t23433*t23628 + t24211 - 1.*t23437*t24464 + t24531) + t23542*(t23628*t24260 + t23433*t24464 + t24536 + t24541))*var2[15];
  p_output1[53]=t23715*var2[0] + t23514*var2[1] + (t23370*t23440 + t23490*t23504)*var2[2] + (t23764*t24477 + t23715*(t23663*t24514 + t23524*t24518 + t24615) + t23663*(-1.*t23657*t24477 - 1.*t23672*t24485 - 1.*t23715*t24514 - 1.*t23504*t24518 + t24618 + t24621))*var2[3] + (t23951*t24481 + t23440*(t23376*t23494*t24464 - 1.*t23438*t23494*t24497 + t24615) + t23375*t23494*(-1.*t23649*t24474 - 1.*t23501*t24497 + t24597 + t24599 + t24618 + t24621))*var2[4] + (t23494*t24196*t24260 + t23376*(-1.*t23433*t23640 + t23376*t23647*t24260 - 1.*t23437*t24460 - 1.*t23433*t24278*t24464 + t24597 + t24599))*var2[5] - 0.068*t23433*var2[15] + (-0.325*t23430 - 1.*t23430*t23623 - 1.*t23430*t24450)*var2[16];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 18, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "dJh_RrFoot_DiagonalStance2.hh"

namespace SymFunction
{

void dJh_RrFoot_DiagonalStance2_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
