/*
 * Automatically Generated from Mathematica.
 * Sat 11 Jun 2022 23:24:26 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t8985;
  double t7813;
  double t7831;
  double t9377;
  double t7876;
  double t10218;
  double t10777;
  double t2269;
  double t11438;
  double t11441;
  double t11516;
  double t5831;
  double t11647;
  double t12086;
  double t11283;
  double t11771;
  double t12027;
  double t2268;
  double t12637;
  double t12815;
  double t13444;
  double t13492;
  double t14120;
  double t14126;
  double t14136;
  double t14146;
  double t14150;
  double t14339;
  double t14626;
  double t14754;
  double t14800;
  double t14801;
  double t14805;
  double t14798;
  double t14806;
  double t14807;
  double t14816;
  double t14817;
  double t14818;
  double t14821;
  double t14823;
  double t14825;
  double t14867;
  double t14904;
  double t17214;
  double t18365;
  double t18398;
  double t18466;
  double t20410;
  double t20411;
  double t20412;
  double t20413;
  double t20414;
  double t20415;
  double t18335;
  double t18467;
  double t20416;
  double t20417;
  double t18257;
  double t20418;
  double t20419;
  double t20425;
  double t20428;
  double t20429;
  double t20430;
  double t20431;
  double t20435;
  double t20436;
  double t20437;
  double t20438;
  double t20439;
  double t20440;
  double t20441;
  double t20442;
  double t20443;
  double t20444;
  double t20460;
  double t20461;
  double t20638;
  double t20453;
  double t20456;
  double t20459;
  double t20449;
  double t20450;
  double t20451;
  double t18004;
  double t18163;
  double t18224;
  double t20422;
  double t20445;
  double t20447;
  double t20649;
  double t20650;
  double t20651;
  double t20643;
  double t20644;
  double t20645;
  double t20691;
  double t20839;
  double t20840;
  double t20661;
  double t20665;
  double t20666;
  double t20916;
  double t20917;
  double t20918;
  double t20652;
  double t20673;
  double t20936;
  double t20937;
  double t20938;
  double t21125;
  double t21132;
  double t21133;
  double t21134;
  double t20656;
  double t20658;
  double t20659;
  double t21136;
  double t21138;
  double t20674;
  double t20675;
  double t20677;
  double t20849;
  double t20867;
  double t21171;
  double t21173;
  double t20850;
  double t20851;
  double t20852;
  double t21185;
  double t21187;
  double t20868;
  double t20869;
  double t20870;
  double t20885;
  double t20904;
  double t21223;
  double t20888;
  double t20892;
  double t20893;
  double t21227;
  double t21229;
  double t20905;
  double t20906;
  double t20907;
  double t20931;
  double t21128;
  double t21383;
  double t21384;
  double t21385;
  double t21389;
  double t21390;
  double t21413;
  double t21415;
  double t21416;
  double t20932;
  double t20934;
  double t21387;
  double t21391;
  double t21400;
  double t21402;
  double t21129;
  double t21130;
  double t21426;
  double t21427;
  double t21431;
  double t21436;
  double t21437;
  double t21444;
  double t21446;
  double t21447;
  double t21449;
  double t21450;
  double t21451;
  double t21453;
  double t21510;
  double t21511;
  double t21513;
  double t21514;
  double t21515;
  double t21180;
  double t21176;
  double t21517;
  double t21518;
  double t21519;
  double t21543;
  double t21545;
  double t21177;
  double t21178;
  double t21553;
  double t21555;
  double t21181;
  double t21182;
  double t21580;
  double t21582;
  double t21408;
  double t21409;
  double t21410;
  double t21587;
  double t21588;
  double t21527;
  double t21528;
  double t21529;
  double t21218;
  double t21232;
  double t21219;
  double t21220;
  double t21616;
  double t21618;
  double t21428;
  double t21622;
  double t21624;
  double t21233;
  double t21234;
  double t21644;
  double t21647;
  double t21651;
  double t21653;
  double t21379;
  double t21380;
  double t21676;
  double t21677;
  double t21678;
  double t21693;
  double t21694;
  double t14838;
  double t14842;
  double t14851;
  double t21686;
  double t21687;
  double t21688;
  double t21689;
  double t21684;
  double t21692;
  double t21695;
  double t21717;
  double t21718;
  double t21719;
  double t21708;
  double t21709;
  double t21710;
  double t21713;
  double t21714;
  double t21715;
  double t21724;
  double t21725;
  double t21726;
  double t21720;
  double t21723;
  double t21728;
  double t21734;
  double t21735;
  double t21736;
  double t21738;
  double t21739;
  double t21740;
  double t21742;
  double t21743;
  double t21744;
  double t21548;
  double t21549;
  double t21550;
  double t21561;
  double t21562;
  double t21563;
  double t21696;
  double t21395;
  double t21396;
  double t21764;
  double t21765;
  double t21772;
  double t21770;
  double t21762;
  double t21766;
  double t21796;
  double t21799;
  double t21801;
  double t21749;
  double t21750;
  double t21751;
  double t21612;
  double t21613;
  double t21824;
  double t21843;
  double t21847;
  double t21866;
  double t21867;
  double t21868;
  double t21880;
  double t21881;
  double t21882;
  double t21890;
  double t21891;
  double t21892;
  double t21896;
  double t21897;
  double t21898;
  double t21900;
  double t21901;
  double t21902;
  double t21877;
  double t21878;
  double t21883;
  double t21916;
  double t21917;
  double t21918;
  double t21912;
  double t21913;
  double t21914;
  double t21919;
  double t21922;
  double t21929;
  double t21930;
  double t21931;
  double t21933;
  double t21934;
  double t21935;
  double t21627;
  double t21628;
  double t21777;
  double t21778;
  double t21784;
  double t21785;
  double t21948;
  double t21953;
  double t21958;
  double t21954;
  double t21956;
  double t21949;
  double t21976;
  double t21979;
  double t21889;
  double t21893;
  double t21894;
  double t21983;
  double t14224;
  double t14227;
  double t14230;
  double t22012;
  double t22014;
  double t22030;
  double t22033;
  double t22036;
  t8985 = Cos(var1[13]);
  t7813 = Cos(var1[14]);
  t7831 = Sin(var1[13]);
  t9377 = Sin(var1[14]);
  t7876 = t7813*t7831;
  t10218 = -1.*t8985*t9377;
  t10777 = t7876 + t10218;
  t2269 = Cos(var1[5]);
  t11438 = t8985*t7813;
  t11441 = t7831*t9377;
  t11516 = t11438 + t11441;
  t5831 = Sin(var1[12]);
  t11647 = Sin(var1[5]);
  t12086 = Cos(var1[3]);
  t11283 = -1.*t2269*t5831*t10777;
  t11771 = t11516*t11647;
  t12027 = t11283 + t11771;
  t2268 = Sin(var1[3]);
  t12637 = Cos(var1[12]);
  t12815 = Cos(var1[4]);
  t13444 = t12637*t12815*t10777;
  t13492 = Sin(var1[4]);
  t14120 = t2269*t11516;
  t14126 = t5831*t10777*t11647;
  t14136 = t14120 + t14126;
  t14146 = -1.*t13492*t14136;
  t14150 = t13444 + t14146;
  t14339 = t12815*t5831;
  t14626 = t12637*t13492*t11647;
  t14754 = t14339 + t14626;
  t14800 = -1.*t7813*t7831;
  t14801 = t8985*t9377;
  t14805 = t14800 + t14801;
  t14798 = -1.*t2269*t5831*t11516;
  t14806 = t14805*t11647;
  t14807 = t14798 + t14806;
  t14816 = t12637*t12815*t11516;
  t14817 = t2269*t14805;
  t14818 = t5831*t11516*t11647;
  t14821 = t14817 + t14818;
  t14823 = -1.*t13492*t14821;
  t14825 = t14816 + t14823;
  t14867 = -1.*t12637*t10777*t13492;
  t14904 = -1.*t12815*t14136;
  t17214 = t14867 + t14904;
  t18365 = -0.0641*t7813;
  t18398 = -0.28*t9377;
  t18466 = t18365 + t18398;
  t20410 = -1.*t7813;
  t20411 = 1. + t20410;
  t20412 = 0.075*t20411;
  t20413 = 0.355*t7813;
  t20414 = -0.0641*t9377;
  t20415 = t20412 + t20413 + t20414;
  t18335 = -0.325*t7831;
  t18467 = t8985*t18466;
  t20416 = t7831*t20415;
  t20417 = t18335 + t18467 + t20416;
  t18257 = -0.068*t5831;
  t20418 = t12637*t20417;
  t20419 = t18257 + t20418;
  t20425 = -1.*t8985;
  t20428 = 1. + t20425;
  t20429 = 0.325*t20428;
  t20430 = -1.*t7831*t18466;
  t20431 = t8985*t20415;
  t20435 = t20429 + t20430 + t20431;
  t20436 = t2269*t20435;
  t20437 = -1.*t12637;
  t20438 = 1. + t20437;
  t20439 = -0.1575*t20438;
  t20440 = -0.2255*t12637;
  t20441 = -1.*t5831*t20417;
  t20442 = t20439 + t20440 + t20441;
  t20443 = -1.*t20442*t11647;
  t20444 = t20436 + t20443;
  t20460 = t12815*t20419;
  t20461 = -1.*t13492*t20444;
  t20638 = t20460 + t20461;
  t20453 = t5831*t13492;
  t20456 = -1.*t12637*t12815*t11647;
  t20459 = t20453 + t20456;
  t20449 = t20419*t13492;
  t20450 = t12815*t20444;
  t20451 = t20449 + t20450;
  t18004 = t12637*t11516*t13492;
  t18163 = t12815*t14821;
  t18224 = t18004 + t18163;
  t20422 = -1.*t20419*t13492;
  t20445 = -1.*t12815*t20444;
  t20447 = t20422 + t20445;
  t20649 = t2269*t20442;
  t20650 = t20435*t11647;
  t20651 = t20649 + t20650;
  t20643 = -1.*t5831*t13492;
  t20644 = t12637*t12815*t11647;
  t20645 = t20643 + t20644;
  t20691 = t12637*t10777*t13492;
  t20839 = t12815*t14136;
  t20840 = t20691 + t20839;
  t20661 = -1.*t12637*t11516*t13492;
  t20665 = -1.*t12815*t14821;
  t20666 = t20661 + t20665;
  t20916 = t2269*t5831*t10777;
  t20917 = -1.*t11516*t11647;
  t20918 = t20916 + t20917;
  t20652 = -1.*t12637*t2269*t20651;
  t20673 = t20651*t14807;
  t20936 = -1.*t2269*t20442;
  t20937 = -1.*t20435*t11647;
  t20938 = t20936 + t20937;
  t21125 = t12637*t11647*t20651;
  t21132 = t2269*t5831*t11516;
  t21133 = -1.*t14805*t11647;
  t21134 = t21132 + t21133;
  t20656 = -1.*t20459*t20451;
  t20658 = -1.*t14754*t20638;
  t20659 = t20652 + t20656 + t20658;
  t21136 = t20444*t14807;
  t21138 = t20651*t14821;
  t20674 = t20451*t18224;
  t20675 = t20638*t14825;
  t20677 = t20673 + t20674 + t20675;
  t20849 = t20651*t12027;
  t20867 = -1.*t20651*t14807;
  t21171 = t20651*t14136;
  t21173 = t20444*t12027;
  t20850 = t20451*t20840;
  t20851 = t20638*t14150;
  t20852 = t20849 + t20850 + t20851;
  t21185 = -1.*t20444*t14807;
  t21187 = -1.*t20651*t14821;
  t20868 = -1.*t20451*t18224;
  t20869 = -1.*t20638*t14825;
  t20870 = t20867 + t20868 + t20869;
  t20885 = t12637*t2269*t20651;
  t20904 = -1.*t20651*t12027;
  t21223 = -1.*t12637*t11647*t20651;
  t20888 = t20459*t20451;
  t20892 = t14754*t20638;
  t20893 = t20885 + t20888 + t20892;
  t21227 = -1.*t20651*t14136;
  t21229 = -1.*t20444*t12027;
  t20905 = -1.*t20451*t20840;
  t20906 = -1.*t20638*t14150;
  t20907 = t20904 + t20905 + t20906;
  t20931 = -1.*t5831*t20419;
  t21128 = t12637*t20419*t11516;
  t21383 = 0.068*t5831;
  t21384 = -1.*t12637*t20417;
  t21385 = t21383 + t21384;
  t21389 = -0.068*t12637;
  t21390 = t21389 + t20441;
  t21413 = -1.*t12815*t5831*t10777;
  t21415 = -1.*t12637*t10777*t13492*t11647;
  t21416 = t21413 + t21415;
  t20932 = t12637*t11647*t20444;
  t20934 = t20931 + t20932 + t20652;
  t21387 = -1.*t12637*t20419;
  t21391 = -1.*t5831*t21390;
  t21400 = -1.*t5831*t20419*t11516;
  t21402 = t12637*t21390*t11516;
  t21129 = t20444*t14821;
  t21130 = t21128 + t20673 + t21129;
  t21426 = Power(t2269,2);
  t21427 = -1.*t12637*t21426*t21385;
  t21431 = t2269*t5831*t20651;
  t21436 = -1.*t12637*t2269*t11516*t20651;
  t21437 = t2269*t21385*t14807;
  t21444 = -1.*t5831*t11516*t13492;
  t21446 = t12637*t12815*t11516*t11647;
  t21447 = t21444 + t21446;
  t21449 = t21390*t13492;
  t21450 = -1.*t12815*t21385*t11647;
  t21451 = t21449 + t21450;
  t21453 = t12815*t21390;
  t21510 = t21385*t13492*t11647;
  t21511 = t21453 + t21510;
  t21513 = t12637*t13492;
  t21514 = t12815*t5831*t11647;
  t21515 = t21513 + t21514;
  t21180 = -1.*t12637*t20419*t11516;
  t21176 = t12637*t20419*t10777;
  t21517 = t12637*t12815;
  t21518 = -1.*t5831*t13492*t11647;
  t21519 = t21517 + t21518;
  t21543 = -1.*t5831*t20419*t10777;
  t21545 = t12637*t21390*t10777;
  t21177 = t20444*t14136;
  t21178 = t21176 + t21177 + t20849;
  t21553 = t5831*t20419*t11516;
  t21555 = -1.*t12637*t21390*t11516;
  t21181 = -1.*t20444*t14821;
  t21182 = t21180 + t20867 + t21181;
  t21580 = -1.*t12637*t2269*t10777*t20651;
  t21582 = t2269*t21385*t12027;
  t21408 = -1.*t5831*t10777*t13492;
  t21409 = t12637*t12815*t10777*t11647;
  t21410 = t21408 + t21409;
  t21587 = t12637*t2269*t11516*t20651;
  t21588 = -1.*t2269*t21385*t14807;
  t21527 = -1.*t12815*t5831*t11516;
  t21528 = -1.*t12637*t11516*t13492*t11647;
  t21529 = t21527 + t21528;
  t21218 = t5831*t20419;
  t21232 = -1.*t12637*t20419*t10777;
  t21219 = -1.*t12637*t11647*t20444;
  t21220 = t21218 + t21219 + t20885;
  t21616 = t12637*t20419;
  t21618 = t5831*t21390;
  t21428 = Power(t11647,2);
  t21622 = t5831*t20419*t10777;
  t21624 = -1.*t12637*t21390*t10777;
  t21233 = -1.*t20444*t14136;
  t21234 = t21232 + t21233 + t20904;
  t21644 = t12637*t21426*t21385;
  t21647 = -1.*t2269*t5831*t20651;
  t21651 = t12637*t2269*t10777*t20651;
  t21653 = -1.*t2269*t21385*t12027;
  t21379 = -1.*t12637*t20442;
  t21380 = t20931 + t21379;
  t21676 = -1.*t8985*t7813;
  t21677 = -1.*t7831*t9377;
  t21678 = t21676 + t21677;
  t21693 = -0.325*t8985;
  t21694 = t21693 + t20430 + t20431;
  t14838 = t12086*t14807;
  t14842 = -1.*t2268*t14825;
  t14851 = t14838 + t14842;
  t21686 = 0.325*t7831;
  t21687 = -1.*t8985*t18466;
  t21688 = -1.*t7831*t20415;
  t21689 = t21686 + t21687 + t21688;
  t21684 = t12637*t20419*t14805;
  t21692 = Power(t12637,2);
  t21695 = t21692*t21694*t11516;
  t21717 = -1.*t2269*t5831*t21694;
  t21718 = t21689*t11647;
  t21719 = t21717 + t21718;
  t21708 = -1.*t2269*t5831*t14805;
  t21709 = t21678*t11647;
  t21710 = t21708 + t21709;
  t21713 = t2269*t21689;
  t21714 = t5831*t21694*t11647;
  t21715 = t21713 + t21714;
  t21724 = t2269*t21678;
  t21725 = t5831*t14805*t11647;
  t21726 = t21724 + t21725;
  t21720 = -1.*t12637*t2269*t21719;
  t21723 = t21719*t14807;
  t21728 = t20651*t21710;
  t21734 = t12637*t14805*t13492;
  t21735 = t12815*t21726;
  t21736 = t21734 + t21735;
  t21738 = t12637*t21694*t13492;
  t21739 = t12815*t21715;
  t21740 = t21738 + t21739;
  t21742 = t12637*t12815*t21694;
  t21743 = -1.*t13492*t21715;
  t21744 = t21742 + t21743;
  t21548 = -1.*t20435*t14805;
  t21549 = t5831*t20442*t11516;
  t21550 = t21548 + t21180 + t21549;
  t21561 = -1.*t5831*t20442*t10777;
  t21562 = t20435*t11516;
  t21563 = t21176 + t21561 + t21562;
  t21696 = Power(t5831,2);
  t21395 = t20435*t14805;
  t21396 = -1.*t5831*t20442*t11516;
  t21764 = -1.*t21689*t14805;
  t21765 = -1.*t20435*t21678;
  t21772 = t21689*t11516;
  t21770 = t21692*t21694*t10777;
  t21762 = -1.*t12637*t20419*t14805;
  t21766 = -1.*t21692*t21694*t11516;
  t21796 = t21719*t12027;
  t21799 = -1.*t21719*t14807;
  t21801 = -1.*t20651*t21710;
  t21749 = t12637*t12815*t14805;
  t21750 = -1.*t13492*t21726;
  t21751 = t21749 + t21750;
  t21612 = t12637*t20442;
  t21613 = t21218 + t21612;
  t21824 = -1.*t21692*t21694*t10777;
  t21843 = t12637*t2269*t21719;
  t21847 = -1.*t21719*t12027;
  t21866 = -0.28*t7813;
  t21867 = 0.0641*t9377;
  t21868 = t21866 + t21867;
  t21880 = t7831*t18466;
  t21881 = t8985*t21868;
  t21882 = t21880 + t21881;
  t21890 = t2269*t10777;
  t21891 = t5831*t21678*t11647;
  t21892 = t21890 + t21891;
  t21896 = -1.*t2269*t5831*t21678;
  t21897 = t10777*t11647;
  t21898 = t21896 + t21897;
  t21900 = t12637*t12815*t21678;
  t21901 = -1.*t13492*t21892;
  t21902 = t21900 + t21901;
  t21877 = -1.*t7831*t21868;
  t21878 = t18467 + t21877;
  t21883 = t21692*t21882*t11516;
  t21916 = -1.*t2269*t5831*t21882;
  t21917 = t21878*t11647;
  t21918 = t21916 + t21917;
  t21912 = t2269*t21878;
  t21913 = t5831*t21882*t11647;
  t21914 = t21912 + t21913;
  t21919 = -1.*t12637*t2269*t21918;
  t21922 = t21918*t14807;
  t21929 = t12637*t21882*t13492;
  t21930 = t12815*t21914;
  t21931 = t21929 + t21930;
  t21933 = t12637*t12815*t21882;
  t21934 = -1.*t13492*t21914;
  t21935 = t21933 + t21934;
  t21627 = t5831*t20442*t10777;
  t21628 = -1.*t20435*t11516;
  t21777 = t20417*t10777;
  t21778 = t21777 + t21562;
  t21784 = -1.*t20417*t11516;
  t21785 = t21548 + t21784;
  t21948 = -1.*t21878*t14805;
  t21953 = t20435*t10777;
  t21958 = t21878*t11516;
  t21954 = t21692*t21882*t10777;
  t21956 = t12637*t20419*t21678;
  t21949 = -1.*t21692*t21882*t11516;
  t21976 = t20651*t21898;
  t21979 = t21918*t12027;
  t21889 = t12637*t21678*t13492;
  t21893 = t12815*t21892;
  t21894 = t21889 + t21893;
  t21983 = -1.*t21918*t14807;
  t14224 = t12086*t12027;
  t14227 = -1.*t2268*t14150;
  t14230 = t14224 + t14227;
  t22012 = -1.*t21692*t21882*t10777;
  t22014 = -1.*t12637*t20419*t21678;
  t22030 = t12637*t2269*t21918;
  t22033 = -1.*t20651*t21898;
  t22036 = -1.*t21918*t12027;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=(-1.*t12086*t14150 - 1.*t12027*t2268)*var2[1] + t14230*var2[2];
  p_output1[10]=(-1.*t12086*t14754 - 1.*t12637*t2268*t2269)*var2[1] + (-1.*t14754*t2268 + t12086*t12637*t2269)*var2[2];
  p_output1[11]=(-1.*t12086*t14825 - 1.*t14807*t2268)*var2[1] + t14851*var2[2];
  p_output1[12]=t14150*var2[0] - 1.*t17214*t2268*var2[1] + t12086*t17214*var2[2] + (t18224*(-1.*t14754*t20447 - 1.*t14754*t20451 - 1.*t20459*t20638 - 1.*t20638*t20645) + t14825*t20659 + t20459*(t14825*t20447 + t14825*t20451 + t18224*t20638 + t20638*t20666) + t14754*t20677)*var2[3];
  p_output1[13]=t14754*var2[0] - 1.*t20645*t2268*var2[1] + t12086*t20645*var2[2] + ((-1.*t14825*t20447 - 1.*t14825*t20451 - 1.*t18224*t20638 - 1.*t20638*t20666)*t20840 + t18224*(t14150*t20447 + t14150*t20451 + t17214*t20638 + t20638*t20840) + t14825*t20852 + t14150*t20870)*var2[3];
  p_output1[14]=t14825*var2[0] - 1.*t20666*t2268*var2[1] + t12086*t20666*var2[2] + ((t14754*t20447 + t14754*t20451 + t20459*t20638 + t20638*t20645)*t20840 + t20459*(-1.*t14150*t20447 - 1.*t14150*t20451 - 1.*t17214*t20638 - 1.*t20638*t20840) + t14150*t20893 + t14754*t20907)*var2[3];
  p_output1[15]=t12815*t20918*var2[0] + (t12086*t14136 + t13492*t20918*t2268)*var2[1] + (-1.*t12086*t13492*t20918 + t14136*t2268)*var2[2] + (t12815*t20659*t21134 + t20459*(-1.*t13492*t14825*t20938 + t12815*t18224*t20938 + t12815*t20451*t21134 - 1.*t13492*t20638*t21134 + t21136 + t21138) - 1.*t12637*t12815*t20677*t2269 + t18224*(t13492*t14754*t20938 - 1.*t12815*t20459*t20938 + t21125 - 1.*t12637*t20444*t2269 + t12637*t12815*t20451*t2269 - 1.*t12637*t13492*t20638*t2269))*var2[3] + (t14821*t20934 + t14807*(t11647*t12637*t20938 + t21125) - 1.*t11647*t12637*t21130 + t12637*(t14821*t20938 + t20444*t21134 + t21136 + t21138)*t2269)*var2[4];
  p_output1[16]=-1.*t12637*t12815*t2269*var2[0] + (-1.*t11647*t12086*t12637 - 1.*t12637*t13492*t2268*t2269)*var2[1] + (-1.*t11647*t12637*t2268 + t12086*t12637*t13492*t2269)*var2[2] + (t12815*t20870*t20918 + t12815*t20852*t21134 + t18224*(t12815*t20451*t20918 - 1.*t13492*t20638*t20918 - 1.*t13492*t14150*t20938 + t12815*t20840*t20938 + t21171 + t21173) + t20840*(t13492*t14825*t20938 - 1.*t12815*t18224*t20938 - 1.*t12815*t20451*t21134 + t13492*t20638*t21134 + t21185 + t21187))*var2[3] + (t14807*(t20444*t20918 + t14136*t20938 + t21171 + t21173) + t14821*t21178 + t14136*t21182 + t12027*(-1.*t14821*t20938 - 1.*t20444*t21134 + t21185 + t21187))*var2[4];
  p_output1[17]=t12815*t21134*var2[0] + (t12086*t14821 + t13492*t21134*t2268)*var2[1] + (-1.*t12086*t13492*t21134 + t14821*t2268)*var2[2] + (t12815*t20893*t20918 + t20459*(-1.*t12815*t20451*t20918 + t13492*t20638*t20918 + t13492*t14150*t20938 - 1.*t12815*t20840*t20938 + t21227 + t21229) - 1.*t12637*t12815*t20907*t2269 + t20840*(-1.*t13492*t14754*t20938 + t12815*t20459*t20938 + t21223 + t12637*t20444*t2269 - 1.*t12637*t12815*t20451*t2269 + t12637*t13492*t20638*t2269))*var2[3] + (t14136*t21220 + t12027*(-1.*t11647*t12637*t20938 + t21223) - 1.*t11647*t12637*t21234 + t12637*(-1.*t20444*t20918 - 1.*t14136*t20938 + t21227 + t21229)*t2269)*var2[4];
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=t21410*var2[0] + (-1.*t21416*t2268 - 1.*t10777*t12086*t12637*t2269)*var2[1] + (t12086*t21416 - 1.*t10777*t12637*t2268*t2269)*var2[2] + (t20659*t21447 + t20677*t21515 + t18224*(t21427 + t21431 - 1.*t20459*t21451 - 1.*t14754*t21511 - 1.*t20451*t21515 - 1.*t20638*t21519) + t20459*(t21436 + t21437 + t20451*t21447 + t18224*t21451 + t14825*t21511 + t20638*t21529))*var2[3] + (-1.*t11516*t12637*t20934*t2269 + t12637*(t11516*t11647*t12637*t20444 - 1.*t11647*t14821*t21385 + t21400 + t21402 + t21436 + t21437)*t2269 - 1.*t21130*t2269*t5831 + t14807*(t21387 + t21391 + t21427 - 1.*t12637*t21385*t21428 + t21431 - 1.*t11647*t20444*t5831))*var2[4] + (t12637*(t21128 + t21395 + t21396) - 1.*t11516*t21380*t5831 + t11516*t12637*(-1.*t12637*t21385 + t21387 + t21391 + t20442*t5831) + t5831*(-1.*t11516*t12637*t20442 + t21400 + t21402 - 1.*t11516*t21385*t5831))*var2[5];
  p_output1[37]=t21515*var2[0] + (-1.*t21519*t2268 - 1.*t12086*t2269*t5831)*var2[1] + (t12086*t21519 - 1.*t2268*t2269*t5831)*var2[2] + (t20870*t21410 + t20852*t21447 + t18224*(t20451*t21410 + t20638*t21416 + t20840*t21451 + t14150*t21511 + t21580 + t21582) + t20840*(-1.*t20451*t21447 - 1.*t18224*t21451 - 1.*t14825*t21511 - 1.*t20638*t21529 + t21587 + t21588))*var2[3] + (t14807*(t10777*t11647*t12637*t20444 - 1.*t11647*t14136*t21385 + t21543 + t21545 + t21580 + t21582) + t12027*(-1.*t11516*t11647*t12637*t20444 + t11647*t14821*t21385 + t21553 + t21555 + t21587 + t21588) - 1.*t11516*t12637*t21178*t2269 - 1.*t10777*t12637*t21182*t2269)*var2[4] + (-1.*t10777*t21550*t5831 - 1.*t11516*t21563*t5831 + t11516*t12637*(-1.*t10777*t12637*t20442 + t21543 + t21545 - 1.*t10777*t21385*t5831) + t10777*t12637*(t11516*t12637*t20442 + t21553 + t21555 + t11516*t21385*t5831))*var2[5];
  p_output1[38]=t21447*var2[0] + (-1.*t21529*t2268 - 1.*t11516*t12086*t12637*t2269)*var2[1] + (t12086*t21529 - 1.*t11516*t12637*t2268*t2269)*var2[2] + (t20893*t21410 + t20907*t21515 + t20840*(t20459*t21451 + t14754*t21511 + t20451*t21515 + t20638*t21519 + t21644 + t21647) + t20459*(-1.*t20451*t21410 - 1.*t20638*t21416 - 1.*t20840*t21451 - 1.*t14150*t21511 + t21651 + t21653))*var2[3] + (-1.*t10777*t12637*t21220*t2269 + t12637*(-1.*t10777*t11647*t12637*t20444 + t11647*t14136*t21385 + t21622 + t21624 + t21651 + t21653)*t2269 - 1.*t21234*t2269*t5831 + t12027*(t12637*t21385*t21428 + t21616 + t21618 + t21644 + t21647 + t11647*t20444*t5831))*var2[4] + (t12637*(t21232 + t21627 + t21628) - 1.*t10777*t21613*t5831 + t10777*t12637*(t12637*t21385 + t21616 + t21618 - 1.*t20442*t5831) + t5831*(t10777*t12637*t20442 + t21622 + t21624 + t10777*t21385*t5831))*var2[5];
  p_output1[39]=t18224*var2[0] + t14851*var2[1] + (t12086*t14825 + t14807*t2268)*var2[2] + (t20659*t21736 + t18224*(t21720 - 1.*t20459*t21740 - 1.*t14754*t21744) + t20459*(t21723 + t21728 + t20451*t21736 + t18224*t21740 + t14825*t21744 + t20638*t21751))*var2[3] + (t20934*t21710 + t12637*(t21684 + t21695 + t14821*t21715 + t21723 + t20444*t21726 + t21728)*t2269 + t14807*(t11647*t12637*t21715 + t21720 - 1.*t12637*t21694*t5831))*var2[4] + (t12637*t14805*t21380 + t5831*(t20435*t21678 + t21684 + t14805*t21689 + t21695 + t11516*t21694*t21696 - 1.*t14805*t20442*t5831))*var2[5] + (0.1575*t11516 + 0.2255*t21678)*var2[12];
  p_output1[40]=(t18224*t20870 + t20852*t21736 + t18224*(t20673 + t20674 + t20675 + t20840*t21740 + t14150*t21744 + t21796) + t20840*(-1.*t20451*t21736 - 1.*t18224*t21740 - 1.*t14825*t21744 - 1.*t20638*t21751 + t21799 + t21801))*var2[3] + (t14807*t21182 + t21178*t21710 + t14807*(t20673 + t21128 + t21129 + t14136*t21715 + t21770 + t21796) + t12027*(-1.*t14821*t21715 - 1.*t20444*t21726 + t21762 + t21766 + t21799 + t21801))*var2[4] + (t11516*t12637*t21550 + t12637*t14805*t21563 + t11516*t12637*(t21128 + t21395 + t21396 + t10777*t21694*t21696 + t21770 + t21772) + t10777*t12637*(-1.*t11516*t21694*t21696 + t21762 + t21764 + t21765 + t21766 + t14805*t20442*t5831))*var2[5] + (t11516*(-1.*t14805*t20417 - 1.*t11516*t21694 + t21764 + t21765) + t14805*(t11516*t20417 + t21395 + t10777*t21694 + t21772) + t21678*t21778 + t14805*t21785)*var2[12];
  p_output1[41]=t21736*var2[0] + (t12086*t21710 - 1.*t21751*t2268)*var2[1] + (t12086*t21751 + t21710*t2268)*var2[2] + (t18224*t20893 + t20840*(t20459*t21740 + t14754*t21744 + t21843) + t20459*(t20867 + t20868 + t20869 - 1.*t20840*t21740 - 1.*t14150*t21744 + t21847))*var2[3] + (t14807*t21220 + t12637*(t20867 + t21180 + t21181 - 1.*t14136*t21715 + t21824 + t21847)*t2269 + t12027*(-1.*t11647*t12637*t21715 + t21843 + t12637*t21694*t5831))*var2[4] + (t11516*t12637*t21613 + (t21180 + t21548 + t21549 - 1.*t11516*t21689 - 1.*t10777*t21694*t21696 + t21824)*t5831)*var2[5] - 0.068*t14805*var2[12];
  p_output1[42]=t21894*var2[0] + (t12086*t21898 - 1.*t21902*t2268)*var2[1] + (t12086*t21902 + t21898*t2268)*var2[2] + (t20659*t20840 + t18224*(t21919 - 1.*t20459*t21931 - 1.*t14754*t21935) + t20459*(t20849 + t20850 + t20851 + t21922 + t18224*t21931 + t14825*t21935))*var2[3] + (t12027*t20934 + t12637*(t20849 + t21176 + t21177 + t21883 + t14821*t21914 + t21922)*t2269 + t14807*(t11647*t12637*t21914 + t21919 - 1.*t12637*t21882*t5831))*var2[4] + (t10777*t12637*t21380 + (t21176 + t21561 + t21562 + t14805*t21878 + t11516*t21696*t21882 + t21883)*t5831)*var2[5] + (0.2255*t11516 + 0.1575*t21678)*var2[12] + (0.325*t7813 - 1.*t20415*t7813 - 1.*t21868*t7813)*var2[13];
  p_output1[43]=(t20840*t20852 + t20870*t21894 + t18224*(t20451*t21894 + t20638*t21902 + t20840*t21931 + t14150*t21935 + t21976 + t21979) + t20840*(t20904 + t20905 + t20906 - 1.*t18224*t21931 - 1.*t14825*t21935 + t21983))*var2[3] + (t12027*t21178 + t21182*t21898 + t14807*(t20444*t21892 + t14136*t21914 + t21954 + t21956 + t21976 + t21979) + t12027*(t20904 + t21232 + t21233 - 1.*t14821*t21914 + t21949 + t21983))*var2[4] + (t10777*t12637*t21563 + t12637*t21550*t21678 + t10777*t12637*(t21232 + t21627 + t21628 - 1.*t11516*t21696*t21882 + t21948 + t21949) + t11516*t12637*(t10777*t21696*t21882 + t21953 + t21954 + t21956 + t21958 - 1.*t20442*t21678*t5831))*var2[5] + (t11516*t21778 + t10777*t21785 + t11516*(-1.*t10777*t20417 + t21628 - 1.*t11516*t21882 + t21948) + t14805*(t20417*t21678 + t10777*t21882 + t21953 + t21958))*var2[12];
  p_output1[44]=t20840*var2[0] + t14230*var2[1] + (t12086*t14150 + t12027*t2268)*var2[2] + (t20893*t21894 + t20840*(t20459*t21931 + t14754*t21935 + t22030) + t20459*(-1.*t20451*t21894 - 1.*t20638*t21902 - 1.*t20840*t21931 - 1.*t14150*t21935 + t22033 + t22036))*var2[3] + (t21220*t21898 + t12637*(-1.*t20444*t21892 - 1.*t14136*t21914 + t22012 + t22014 + t22033 + t22036)*t2269 + t12027*(-1.*t11647*t12637*t21914 + t22030 + t12637*t21882*t5831))*var2[4] + (t12637*t21613*t21678 + t5831*(-1.*t10777*t20435 - 1.*t11516*t21878 - 1.*t10777*t21696*t21882 + t22012 + t22014 + t20442*t21678*t5831))*var2[5] - 0.068*t10777*var2[12] + (0.325*t9377 - 1.*t20415*t9377 - 1.*t21868*t9377)*var2[13];
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 18, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "dJh_FrFoot_DiagonalStance.hh"

namespace SymFunction
{

void dJh_FrFoot_DiagonalStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
