/*
 * Automatically Generated from Mathematica.
 * Tue 7 Jun 2022 10:40:28 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t28547;
  double t4301;
  double t21520;
  double t28548;
  double t28531;
  double t28549;
  double t28562;
  double t3726;
  double t28572;
  double t28576;
  double t28577;
  double t4178;
  double t28578;
  double t28583;
  double t28567;
  double t28579;
  double t28580;
  double t3524;
  double t28584;
  double t28585;
  double t28586;
  double t28587;
  double t28631;
  double t28641;
  double t28642;
  double t28643;
  double t28645;
  double t28672;
  double t28677;
  double t28678;
  double t28697;
  double t28699;
  double t28700;
  double t28696;
  double t28701;
  double t28703;
  double t28707;
  double t28708;
  double t28712;
  double t28714;
  double t28716;
  double t28718;
  double t28729;
  double t28730;
  double t28731;
  double t28744;
  double t28745;
  double t28746;
  double t28749;
  double t28750;
  double t28751;
  double t28752;
  double t28753;
  double t28754;
  double t28743;
  double t28748;
  double t28755;
  double t28756;
  double t28741;
  double t28757;
  double t28758;
  double t28760;
  double t28761;
  double t28762;
  double t28763;
  double t28764;
  double t28765;
  double t28766;
  double t28767;
  double t28768;
  double t28770;
  double t28772;
  double t28773;
  double t28774;
  double t28775;
  double t28776;
  double t28788;
  double t28789;
  double t28791;
  double t28784;
  double t28785;
  double t28786;
  double t28780;
  double t28781;
  double t28782;
  double t28737;
  double t28738;
  double t28739;
  double t28759;
  double t28777;
  double t28778;
  double t28800;
  double t28801;
  double t28802;
  double t28794;
  double t28795;
  double t28796;
  double t28829;
  double t28830;
  double t28831;
  double t28808;
  double t28809;
  double t28810;
  double t28884;
  double t28885;
  double t28886;
  double t28803;
  double t28817;
  double t28900;
  double t28901;
  double t28902;
  double t28904;
  double t28911;
  double t28912;
  double t28913;
  double t28804;
  double t28805;
  double t28806;
  double t28915;
  double t28917;
  double t28818;
  double t28819;
  double t28820;
  double t28837;
  double t28848;
  double t28950;
  double t28952;
  double t28838;
  double t28839;
  double t28840;
  double t28964;
  double t28966;
  double t28849;
  double t28850;
  double t28851;
  double t28865;
  double t28876;
  double t29002;
  double t28866;
  double t28867;
  double t28868;
  double t29006;
  double t29008;
  double t28877;
  double t28878;
  double t28879;
  double t28896;
  double t28907;
  double t29038;
  double t29039;
  double t29040;
  double t29044;
  double t29045;
  double t29066;
  double t29067;
  double t29068;
  double t28897;
  double t28898;
  double t29042;
  double t29046;
  double t29054;
  double t29056;
  double t28908;
  double t28909;
  double t29077;
  double t29078;
  double t29082;
  double t29086;
  double t29087;
  double t29094;
  double t29095;
  double t29096;
  double t29098;
  double t29099;
  double t29100;
  double t29102;
  double t29103;
  double t29104;
  double t29106;
  double t29107;
  double t29108;
  double t28959;
  double t28955;
  double t29110;
  double t29111;
  double t29112;
  double t29130;
  double t29132;
  double t28956;
  double t28957;
  double t29140;
  double t29142;
  double t28960;
  double t28961;
  double t29161;
  double t29163;
  double t29061;
  double t29062;
  double t29063;
  double t29168;
  double t29169;
  double t29117;
  double t29118;
  double t29119;
  double t28997;
  double t29011;
  double t28998;
  double t28999;
  double t29197;
  double t29199;
  double t29079;
  double t29203;
  double t29205;
  double t29012;
  double t29013;
  double t29224;
  double t29227;
  double t29231;
  double t29233;
  double t29035;
  double t29036;
  double t29256;
  double t29257;
  double t29258;
  double t29273;
  double t29274;
  double t28723;
  double t28724;
  double t28725;
  double t29266;
  double t29267;
  double t29268;
  double t29269;
  double t29264;
  double t29272;
  double t29275;
  double t29297;
  double t29298;
  double t29299;
  double t29288;
  double t29289;
  double t29290;
  double t29293;
  double t29294;
  double t29295;
  double t29304;
  double t29305;
  double t29306;
  double t29300;
  double t29303;
  double t29308;
  double t29314;
  double t29315;
  double t29316;
  double t29318;
  double t29319;
  double t29320;
  double t29322;
  double t29323;
  double t29324;
  double t29135;
  double t29136;
  double t29137;
  double t29145;
  double t29146;
  double t29147;
  double t29276;
  double t29049;
  double t29050;
  double t29344;
  double t29345;
  double t29352;
  double t29350;
  double t29342;
  double t29346;
  double t29376;
  double t29379;
  double t29381;
  double t29329;
  double t29330;
  double t29331;
  double t29193;
  double t29194;
  double t29404;
  double t29423;
  double t29427;
  double t29446;
  double t29447;
  double t29448;
  double t29460;
  double t29461;
  double t29462;
  double t29470;
  double t29471;
  double t29472;
  double t29476;
  double t29477;
  double t29478;
  double t29480;
  double t29481;
  double t29482;
  double t29457;
  double t29458;
  double t29463;
  double t29496;
  double t29497;
  double t29498;
  double t29492;
  double t29493;
  double t29494;
  double t29499;
  double t29502;
  double t29509;
  double t29510;
  double t29511;
  double t29513;
  double t29514;
  double t29515;
  double t29208;
  double t29209;
  double t29357;
  double t29358;
  double t29364;
  double t29365;
  double t29528;
  double t29533;
  double t29538;
  double t29534;
  double t29536;
  double t29529;
  double t29556;
  double t29559;
  double t29469;
  double t29473;
  double t29474;
  double t29563;
  double t28661;
  double t28663;
  double t28664;
  double t29592;
  double t29594;
  double t29610;
  double t29613;
  double t29616;
  t28547 = Cos(var1[13]);
  t4301 = Cos(var1[14]);
  t21520 = Sin(var1[13]);
  t28548 = Sin(var1[14]);
  t28531 = t4301*t21520;
  t28549 = -1.*t28547*t28548;
  t28562 = t28531 + t28549;
  t3726 = Cos(var1[5]);
  t28572 = t28547*t4301;
  t28576 = t21520*t28548;
  t28577 = t28572 + t28576;
  t4178 = Sin(var1[12]);
  t28578 = Sin(var1[5]);
  t28583 = Cos(var1[3]);
  t28567 = -1.*t3726*t4178*t28562;
  t28579 = t28577*t28578;
  t28580 = t28567 + t28579;
  t3524 = Sin(var1[3]);
  t28584 = Cos(var1[12]);
  t28585 = Cos(var1[4]);
  t28586 = t28584*t28585*t28562;
  t28587 = Sin(var1[4]);
  t28631 = t3726*t28577;
  t28641 = t4178*t28562*t28578;
  t28642 = t28631 + t28641;
  t28643 = -1.*t28587*t28642;
  t28645 = t28586 + t28643;
  t28672 = t28585*t4178;
  t28677 = t28584*t28587*t28578;
  t28678 = t28672 + t28677;
  t28697 = -1.*t4301*t21520;
  t28699 = t28547*t28548;
  t28700 = t28697 + t28699;
  t28696 = -1.*t3726*t4178*t28577;
  t28701 = t28700*t28578;
  t28703 = t28696 + t28701;
  t28707 = t28584*t28585*t28577;
  t28708 = t3726*t28700;
  t28712 = t4178*t28577*t28578;
  t28714 = t28708 + t28712;
  t28716 = -1.*t28587*t28714;
  t28718 = t28707 + t28716;
  t28729 = -1.*t28584*t28562*t28587;
  t28730 = -1.*t28585*t28642;
  t28731 = t28729 + t28730;
  t28744 = -0.0641*t4301;
  t28745 = -0.28*t28548;
  t28746 = t28744 + t28745;
  t28749 = -1.*t4301;
  t28750 = 1. + t28749;
  t28751 = 0.075*t28750;
  t28752 = 0.355*t4301;
  t28753 = -0.0641*t28548;
  t28754 = t28751 + t28752 + t28753;
  t28743 = -0.325*t21520;
  t28748 = t28547*t28746;
  t28755 = t21520*t28754;
  t28756 = t28743 + t28748 + t28755;
  t28741 = -0.068*t4178;
  t28757 = t28584*t28756;
  t28758 = t28741 + t28757;
  t28760 = -1.*t28547;
  t28761 = 1. + t28760;
  t28762 = 0.325*t28761;
  t28763 = -1.*t21520*t28746;
  t28764 = t28547*t28754;
  t28765 = t28762 + t28763 + t28764;
  t28766 = t3726*t28765;
  t28767 = -1.*t28584;
  t28768 = 1. + t28767;
  t28770 = -0.1575*t28768;
  t28772 = -0.2255*t28584;
  t28773 = -1.*t4178*t28756;
  t28774 = t28770 + t28772 + t28773;
  t28775 = -1.*t28774*t28578;
  t28776 = t28766 + t28775;
  t28788 = t28585*t28758;
  t28789 = -1.*t28587*t28776;
  t28791 = t28788 + t28789;
  t28784 = t4178*t28587;
  t28785 = -1.*t28584*t28585*t28578;
  t28786 = t28784 + t28785;
  t28780 = t28758*t28587;
  t28781 = t28585*t28776;
  t28782 = t28780 + t28781;
  t28737 = t28584*t28577*t28587;
  t28738 = t28585*t28714;
  t28739 = t28737 + t28738;
  t28759 = -1.*t28758*t28587;
  t28777 = -1.*t28585*t28776;
  t28778 = t28759 + t28777;
  t28800 = t3726*t28774;
  t28801 = t28765*t28578;
  t28802 = t28800 + t28801;
  t28794 = -1.*t4178*t28587;
  t28795 = t28584*t28585*t28578;
  t28796 = t28794 + t28795;
  t28829 = t28584*t28562*t28587;
  t28830 = t28585*t28642;
  t28831 = t28829 + t28830;
  t28808 = -1.*t28584*t28577*t28587;
  t28809 = -1.*t28585*t28714;
  t28810 = t28808 + t28809;
  t28884 = t3726*t4178*t28562;
  t28885 = -1.*t28577*t28578;
  t28886 = t28884 + t28885;
  t28803 = -1.*t28584*t3726*t28802;
  t28817 = t28802*t28703;
  t28900 = -1.*t3726*t28774;
  t28901 = -1.*t28765*t28578;
  t28902 = t28900 + t28901;
  t28904 = t28584*t28578*t28802;
  t28911 = t3726*t4178*t28577;
  t28912 = -1.*t28700*t28578;
  t28913 = t28911 + t28912;
  t28804 = -1.*t28786*t28782;
  t28805 = -1.*t28678*t28791;
  t28806 = t28803 + t28804 + t28805;
  t28915 = t28776*t28703;
  t28917 = t28802*t28714;
  t28818 = t28782*t28739;
  t28819 = t28791*t28718;
  t28820 = t28817 + t28818 + t28819;
  t28837 = t28802*t28580;
  t28848 = -1.*t28802*t28703;
  t28950 = t28802*t28642;
  t28952 = t28776*t28580;
  t28838 = t28782*t28831;
  t28839 = t28791*t28645;
  t28840 = t28837 + t28838 + t28839;
  t28964 = -1.*t28776*t28703;
  t28966 = -1.*t28802*t28714;
  t28849 = -1.*t28782*t28739;
  t28850 = -1.*t28791*t28718;
  t28851 = t28848 + t28849 + t28850;
  t28865 = t28584*t3726*t28802;
  t28876 = -1.*t28802*t28580;
  t29002 = -1.*t28584*t28578*t28802;
  t28866 = t28786*t28782;
  t28867 = t28678*t28791;
  t28868 = t28865 + t28866 + t28867;
  t29006 = -1.*t28802*t28642;
  t29008 = -1.*t28776*t28580;
  t28877 = -1.*t28782*t28831;
  t28878 = -1.*t28791*t28645;
  t28879 = t28876 + t28877 + t28878;
  t28896 = -1.*t4178*t28758;
  t28907 = t28584*t28758*t28577;
  t29038 = 0.068*t4178;
  t29039 = -1.*t28584*t28756;
  t29040 = t29038 + t29039;
  t29044 = -0.068*t28584;
  t29045 = t29044 + t28773;
  t29066 = -1.*t28585*t4178*t28562;
  t29067 = -1.*t28584*t28562*t28587*t28578;
  t29068 = t29066 + t29067;
  t28897 = t28584*t28578*t28776;
  t28898 = t28896 + t28897 + t28803;
  t29042 = -1.*t28584*t28758;
  t29046 = -1.*t4178*t29045;
  t29054 = -1.*t4178*t28758*t28577;
  t29056 = t28584*t29045*t28577;
  t28908 = t28776*t28714;
  t28909 = t28907 + t28817 + t28908;
  t29077 = Power(t3726,2);
  t29078 = -1.*t28584*t29077*t29040;
  t29082 = t3726*t4178*t28802;
  t29086 = -1.*t28584*t3726*t28577*t28802;
  t29087 = t3726*t29040*t28703;
  t29094 = -1.*t4178*t28577*t28587;
  t29095 = t28584*t28585*t28577*t28578;
  t29096 = t29094 + t29095;
  t29098 = t29045*t28587;
  t29099 = -1.*t28585*t29040*t28578;
  t29100 = t29098 + t29099;
  t29102 = t28585*t29045;
  t29103 = t29040*t28587*t28578;
  t29104 = t29102 + t29103;
  t29106 = t28584*t28587;
  t29107 = t28585*t4178*t28578;
  t29108 = t29106 + t29107;
  t28959 = -1.*t28584*t28758*t28577;
  t28955 = t28584*t28758*t28562;
  t29110 = t28584*t28585;
  t29111 = -1.*t4178*t28587*t28578;
  t29112 = t29110 + t29111;
  t29130 = -1.*t4178*t28758*t28562;
  t29132 = t28584*t29045*t28562;
  t28956 = t28776*t28642;
  t28957 = t28955 + t28956 + t28837;
  t29140 = t4178*t28758*t28577;
  t29142 = -1.*t28584*t29045*t28577;
  t28960 = -1.*t28776*t28714;
  t28961 = t28959 + t28848 + t28960;
  t29161 = -1.*t28584*t3726*t28562*t28802;
  t29163 = t3726*t29040*t28580;
  t29061 = -1.*t4178*t28562*t28587;
  t29062 = t28584*t28585*t28562*t28578;
  t29063 = t29061 + t29062;
  t29168 = t28584*t3726*t28577*t28802;
  t29169 = -1.*t3726*t29040*t28703;
  t29117 = -1.*t28585*t4178*t28577;
  t29118 = -1.*t28584*t28577*t28587*t28578;
  t29119 = t29117 + t29118;
  t28997 = t4178*t28758;
  t29011 = -1.*t28584*t28758*t28562;
  t28998 = -1.*t28584*t28578*t28776;
  t28999 = t28997 + t28998 + t28865;
  t29197 = t28584*t28758;
  t29199 = t4178*t29045;
  t29079 = Power(t28578,2);
  t29203 = t4178*t28758*t28562;
  t29205 = -1.*t28584*t29045*t28562;
  t29012 = -1.*t28776*t28642;
  t29013 = t29011 + t29012 + t28876;
  t29224 = t28584*t29077*t29040;
  t29227 = -1.*t3726*t4178*t28802;
  t29231 = t28584*t3726*t28562*t28802;
  t29233 = -1.*t3726*t29040*t28580;
  t29035 = -1.*t28584*t28774;
  t29036 = t28896 + t29035;
  t29256 = -1.*t28547*t4301;
  t29257 = -1.*t21520*t28548;
  t29258 = t29256 + t29257;
  t29273 = -0.325*t28547;
  t29274 = t29273 + t28763 + t28764;
  t28723 = t28583*t28703;
  t28724 = -1.*t3524*t28718;
  t28725 = t28723 + t28724;
  t29266 = 0.325*t21520;
  t29267 = -1.*t28547*t28746;
  t29268 = -1.*t21520*t28754;
  t29269 = t29266 + t29267 + t29268;
  t29264 = t28584*t28758*t28700;
  t29272 = Power(t28584,2);
  t29275 = t29272*t29274*t28577;
  t29297 = -1.*t3726*t4178*t29274;
  t29298 = t29269*t28578;
  t29299 = t29297 + t29298;
  t29288 = -1.*t3726*t4178*t28700;
  t29289 = t29258*t28578;
  t29290 = t29288 + t29289;
  t29293 = t3726*t29269;
  t29294 = t4178*t29274*t28578;
  t29295 = t29293 + t29294;
  t29304 = t3726*t29258;
  t29305 = t4178*t28700*t28578;
  t29306 = t29304 + t29305;
  t29300 = -1.*t28584*t3726*t29299;
  t29303 = t29299*t28703;
  t29308 = t28802*t29290;
  t29314 = t28584*t28700*t28587;
  t29315 = t28585*t29306;
  t29316 = t29314 + t29315;
  t29318 = t28584*t29274*t28587;
  t29319 = t28585*t29295;
  t29320 = t29318 + t29319;
  t29322 = t28584*t28585*t29274;
  t29323 = -1.*t28587*t29295;
  t29324 = t29322 + t29323;
  t29135 = -1.*t28765*t28700;
  t29136 = t4178*t28774*t28577;
  t29137 = t29135 + t28959 + t29136;
  t29145 = -1.*t4178*t28774*t28562;
  t29146 = t28765*t28577;
  t29147 = t28955 + t29145 + t29146;
  t29276 = Power(t4178,2);
  t29049 = t28765*t28700;
  t29050 = -1.*t4178*t28774*t28577;
  t29344 = -1.*t29269*t28700;
  t29345 = -1.*t28765*t29258;
  t29352 = t29269*t28577;
  t29350 = t29272*t29274*t28562;
  t29342 = -1.*t28584*t28758*t28700;
  t29346 = -1.*t29272*t29274*t28577;
  t29376 = t29299*t28580;
  t29379 = -1.*t29299*t28703;
  t29381 = -1.*t28802*t29290;
  t29329 = t28584*t28585*t28700;
  t29330 = -1.*t28587*t29306;
  t29331 = t29329 + t29330;
  t29193 = t28584*t28774;
  t29194 = t28997 + t29193;
  t29404 = -1.*t29272*t29274*t28562;
  t29423 = t28584*t3726*t29299;
  t29427 = -1.*t29299*t28580;
  t29446 = -0.28*t4301;
  t29447 = 0.0641*t28548;
  t29448 = t29446 + t29447;
  t29460 = t21520*t28746;
  t29461 = t28547*t29448;
  t29462 = t29460 + t29461;
  t29470 = t3726*t28562;
  t29471 = t4178*t29258*t28578;
  t29472 = t29470 + t29471;
  t29476 = -1.*t3726*t4178*t29258;
  t29477 = t28562*t28578;
  t29478 = t29476 + t29477;
  t29480 = t28584*t28585*t29258;
  t29481 = -1.*t28587*t29472;
  t29482 = t29480 + t29481;
  t29457 = -1.*t21520*t29448;
  t29458 = t28748 + t29457;
  t29463 = t29272*t29462*t28577;
  t29496 = -1.*t3726*t4178*t29462;
  t29497 = t29458*t28578;
  t29498 = t29496 + t29497;
  t29492 = t3726*t29458;
  t29493 = t4178*t29462*t28578;
  t29494 = t29492 + t29493;
  t29499 = -1.*t28584*t3726*t29498;
  t29502 = t29498*t28703;
  t29509 = t28584*t29462*t28587;
  t29510 = t28585*t29494;
  t29511 = t29509 + t29510;
  t29513 = t28584*t28585*t29462;
  t29514 = -1.*t28587*t29494;
  t29515 = t29513 + t29514;
  t29208 = t4178*t28774*t28562;
  t29209 = -1.*t28765*t28577;
  t29357 = t28756*t28562;
  t29358 = t29357 + t29146;
  t29364 = -1.*t28756*t28577;
  t29365 = t29135 + t29364;
  t29528 = -1.*t29458*t28700;
  t29533 = t28765*t28562;
  t29538 = t29458*t28577;
  t29534 = t29272*t29462*t28562;
  t29536 = t28584*t28758*t29258;
  t29529 = -1.*t29272*t29462*t28577;
  t29556 = t28802*t29478;
  t29559 = t29498*t28580;
  t29469 = t28584*t29258*t28587;
  t29473 = t28585*t29472;
  t29474 = t29469 + t29473;
  t29563 = -1.*t29498*t28703;
  t28661 = t28583*t28580;
  t28663 = -1.*t3524*t28645;
  t28664 = t28661 + t28663;
  t29592 = -1.*t29272*t29462*t28562;
  t29594 = -1.*t28584*t28758*t29258;
  t29610 = t28584*t3726*t29498;
  t29613 = -1.*t28802*t29478;
  t29616 = -1.*t29498*t28580;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=(-1.*t28583*t28645 - 1.*t28580*t3524)*var2[1] + t28664*var2[2];
  p_output1[10]=(-1.*t28583*t28678 - 1.*t28584*t3524*t3726)*var2[1] + (-1.*t28678*t3524 + t28583*t28584*t3726)*var2[2];
  p_output1[11]=(-1.*t28583*t28718 - 1.*t28703*t3524)*var2[1] + t28725*var2[2];
  p_output1[12]=t28645*var2[0] - 1.*t28731*t3524*var2[1] + t28583*t28731*var2[2] + (t28739*(-1.*t28678*t28778 - 1.*t28678*t28782 - 1.*t28786*t28791 - 1.*t28791*t28796) + t28718*t28806 + t28786*(t28718*t28778 + t28718*t28782 + t28739*t28791 + t28791*t28810) + t28678*t28820)*var2[3];
  p_output1[13]=t28678*var2[0] - 1.*t28796*t3524*var2[1] + t28583*t28796*var2[2] + ((-1.*t28718*t28778 - 1.*t28718*t28782 - 1.*t28739*t28791 - 1.*t28791*t28810)*t28831 + t28739*(t28645*t28778 + t28645*t28782 + t28731*t28791 + t28791*t28831) + t28718*t28840 + t28645*t28851)*var2[3];
  p_output1[14]=t28718*var2[0] - 1.*t28810*t3524*var2[1] + t28583*t28810*var2[2] + ((t28678*t28778 + t28678*t28782 + t28786*t28791 + t28791*t28796)*t28831 + t28786*(-1.*t28645*t28778 - 1.*t28645*t28782 - 1.*t28731*t28791 - 1.*t28791*t28831) + t28645*t28868 + t28678*t28879)*var2[3];
  p_output1[15]=t28585*t28886*var2[0] + (t28583*t28642 + t28587*t28886*t3524)*var2[1] + (-1.*t28583*t28587*t28886 + t28642*t3524)*var2[2] + (t28585*t28806*t28913 + t28786*(-1.*t28587*t28718*t28902 + t28585*t28739*t28902 + t28585*t28782*t28913 - 1.*t28587*t28791*t28913 + t28915 + t28917) - 1.*t28584*t28585*t28820*t3726 + t28739*(t28587*t28678*t28902 - 1.*t28585*t28786*t28902 + t28904 - 1.*t28584*t28776*t3726 + t28584*t28585*t28782*t3726 - 1.*t28584*t28587*t28791*t3726))*var2[3] + (t28714*t28898 + t28703*(t28578*t28584*t28902 + t28904) - 1.*t28578*t28584*t28909 + t28584*(t28714*t28902 + t28776*t28913 + t28915 + t28917)*t3726)*var2[4];
  p_output1[16]=-1.*t28584*t28585*t3726*var2[0] + (-1.*t28578*t28583*t28584 - 1.*t28584*t28587*t3524*t3726)*var2[1] + (-1.*t28578*t28584*t3524 + t28583*t28584*t28587*t3726)*var2[2] + (t28585*t28851*t28886 + t28585*t28840*t28913 + t28739*(t28585*t28782*t28886 - 1.*t28587*t28791*t28886 - 1.*t28587*t28645*t28902 + t28585*t28831*t28902 + t28950 + t28952) + t28831*(t28587*t28718*t28902 - 1.*t28585*t28739*t28902 - 1.*t28585*t28782*t28913 + t28587*t28791*t28913 + t28964 + t28966))*var2[3] + (t28703*(t28776*t28886 + t28642*t28902 + t28950 + t28952) + t28714*t28957 + t28642*t28961 + t28580*(-1.*t28714*t28902 - 1.*t28776*t28913 + t28964 + t28966))*var2[4];
  p_output1[17]=t28585*t28913*var2[0] + (t28583*t28714 + t28587*t28913*t3524)*var2[1] + (-1.*t28583*t28587*t28913 + t28714*t3524)*var2[2] + (t28585*t28868*t28886 + t28786*(-1.*t28585*t28782*t28886 + t28587*t28791*t28886 + t28587*t28645*t28902 - 1.*t28585*t28831*t28902 + t29006 + t29008) - 1.*t28584*t28585*t28879*t3726 + t28831*(-1.*t28587*t28678*t28902 + t28585*t28786*t28902 + t29002 + t28584*t28776*t3726 - 1.*t28584*t28585*t28782*t3726 + t28584*t28587*t28791*t3726))*var2[3] + (t28642*t28999 + t28580*(-1.*t28578*t28584*t28902 + t29002) - 1.*t28578*t28584*t29013 + t28584*(-1.*t28776*t28886 - 1.*t28642*t28902 + t29006 + t29008)*t3726)*var2[4];
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=t29063*var2[0] + (-1.*t29068*t3524 - 1.*t28562*t28583*t28584*t3726)*var2[1] + (t28583*t29068 - 1.*t28562*t28584*t3524*t3726)*var2[2] + (t28806*t29096 + t28820*t29108 + t28739*(t29078 + t29082 - 1.*t28786*t29100 - 1.*t28678*t29104 - 1.*t28782*t29108 - 1.*t28791*t29112) + t28786*(t29086 + t29087 + t28782*t29096 + t28739*t29100 + t28718*t29104 + t28791*t29119))*var2[3] + (-1.*t28577*t28584*t28898*t3726 + t28584*(t28577*t28578*t28584*t28776 - 1.*t28578*t28714*t29040 + t29054 + t29056 + t29086 + t29087)*t3726 - 1.*t28909*t3726*t4178 + t28703*(t29042 + t29046 + t29078 - 1.*t28584*t29040*t29079 + t29082 - 1.*t28578*t28776*t4178))*var2[4] + (t28584*(t28907 + t29049 + t29050) - 1.*t28577*t29036*t4178 + t28577*t28584*(-1.*t28584*t29040 + t29042 + t29046 + t28774*t4178) + t4178*(-1.*t28577*t28584*t28774 + t29054 + t29056 - 1.*t28577*t29040*t4178))*var2[5];
  p_output1[37]=t29108*var2[0] + (-1.*t29112*t3524 - 1.*t28583*t3726*t4178)*var2[1] + (t28583*t29112 - 1.*t3524*t3726*t4178)*var2[2] + (t28851*t29063 + t28840*t29096 + t28739*(t28782*t29063 + t28791*t29068 + t28831*t29100 + t28645*t29104 + t29161 + t29163) + t28831*(-1.*t28782*t29096 - 1.*t28739*t29100 - 1.*t28718*t29104 - 1.*t28791*t29119 + t29168 + t29169))*var2[3] + (t28703*(t28562*t28578*t28584*t28776 - 1.*t28578*t28642*t29040 + t29130 + t29132 + t29161 + t29163) + t28580*(-1.*t28577*t28578*t28584*t28776 + t28578*t28714*t29040 + t29140 + t29142 + t29168 + t29169) - 1.*t28577*t28584*t28957*t3726 - 1.*t28562*t28584*t28961*t3726)*var2[4] + (-1.*t28562*t29137*t4178 - 1.*t28577*t29147*t4178 + t28577*t28584*(-1.*t28562*t28584*t28774 + t29130 + t29132 - 1.*t28562*t29040*t4178) + t28562*t28584*(t28577*t28584*t28774 + t29140 + t29142 + t28577*t29040*t4178))*var2[5];
  p_output1[38]=t29096*var2[0] + (-1.*t29119*t3524 - 1.*t28577*t28583*t28584*t3726)*var2[1] + (t28583*t29119 - 1.*t28577*t28584*t3524*t3726)*var2[2] + (t28868*t29063 + t28879*t29108 + t28831*(t28786*t29100 + t28678*t29104 + t28782*t29108 + t28791*t29112 + t29224 + t29227) + t28786*(-1.*t28782*t29063 - 1.*t28791*t29068 - 1.*t28831*t29100 - 1.*t28645*t29104 + t29231 + t29233))*var2[3] + (-1.*t28562*t28584*t28999*t3726 + t28584*(-1.*t28562*t28578*t28584*t28776 + t28578*t28642*t29040 + t29203 + t29205 + t29231 + t29233)*t3726 - 1.*t29013*t3726*t4178 + t28580*(t28584*t29040*t29079 + t29197 + t29199 + t29224 + t29227 + t28578*t28776*t4178))*var2[4] + (t28584*(t29011 + t29208 + t29209) - 1.*t28562*t29194*t4178 + t28562*t28584*(t28584*t29040 + t29197 + t29199 - 1.*t28774*t4178) + t4178*(t28562*t28584*t28774 + t29203 + t29205 + t28562*t29040*t4178))*var2[5];
  p_output1[39]=t28739*var2[0] + t28725*var2[1] + (t28583*t28718 + t28703*t3524)*var2[2] + (t28806*t29316 + t28739*(t29300 - 1.*t28786*t29320 - 1.*t28678*t29324) + t28786*(t29303 + t29308 + t28782*t29316 + t28739*t29320 + t28718*t29324 + t28791*t29331))*var2[3] + (t28898*t29290 + t28584*(t29264 + t29275 + t28714*t29295 + t29303 + t28776*t29306 + t29308)*t3726 + t28703*(t28578*t28584*t29295 + t29300 - 1.*t28584*t29274*t4178))*var2[4] + (t28584*t28700*t29036 + t4178*(t28765*t29258 + t29264 + t28700*t29269 + t29275 + t28577*t29274*t29276 - 1.*t28700*t28774*t4178))*var2[5] + (0.1575*t28577 + 0.2255*t29258)*var2[12];
  p_output1[40]=(t28739*t28851 + t28840*t29316 + t28739*(t28817 + t28818 + t28819 + t28831*t29320 + t28645*t29324 + t29376) + t28831*(-1.*t28782*t29316 - 1.*t28739*t29320 - 1.*t28718*t29324 - 1.*t28791*t29331 + t29379 + t29381))*var2[3] + (t28703*t28961 + t28957*t29290 + t28703*(t28817 + t28907 + t28908 + t28642*t29295 + t29350 + t29376) + t28580*(-1.*t28714*t29295 - 1.*t28776*t29306 + t29342 + t29346 + t29379 + t29381))*var2[4] + (t28577*t28584*t29137 + t28584*t28700*t29147 + t28577*t28584*(t28907 + t29049 + t29050 + t28562*t29274*t29276 + t29350 + t29352) + t28562*t28584*(-1.*t28577*t29274*t29276 + t29342 + t29344 + t29345 + t29346 + t28700*t28774*t4178))*var2[5] + (t28577*(-1.*t28700*t28756 - 1.*t28577*t29274 + t29344 + t29345) + t28700*(t28577*t28756 + t29049 + t28562*t29274 + t29352) + t29258*t29358 + t28700*t29365)*var2[12];
  p_output1[41]=t29316*var2[0] + (t28583*t29290 - 1.*t29331*t3524)*var2[1] + (t28583*t29331 + t29290*t3524)*var2[2] + (t28739*t28868 + t28831*(t28786*t29320 + t28678*t29324 + t29423) + t28786*(t28848 + t28849 + t28850 - 1.*t28831*t29320 - 1.*t28645*t29324 + t29427))*var2[3] + (t28703*t28999 + t28584*(t28848 + t28959 + t28960 - 1.*t28642*t29295 + t29404 + t29427)*t3726 + t28580*(-1.*t28578*t28584*t29295 + t29423 + t28584*t29274*t4178))*var2[4] + (t28577*t28584*t29194 + (t28959 + t29135 + t29136 - 1.*t28577*t29269 - 1.*t28562*t29274*t29276 + t29404)*t4178)*var2[5] - 0.068*t28700*var2[12];
  p_output1[42]=t29474*var2[0] + (t28583*t29478 - 1.*t29482*t3524)*var2[1] + (t28583*t29482 + t29478*t3524)*var2[2] + (t28806*t28831 + t28739*(t29499 - 1.*t28786*t29511 - 1.*t28678*t29515) + t28786*(t28837 + t28838 + t28839 + t29502 + t28739*t29511 + t28718*t29515))*var2[3] + (t28580*t28898 + t28584*(t28837 + t28955 + t28956 + t29463 + t28714*t29494 + t29502)*t3726 + t28703*(t28578*t28584*t29494 + t29499 - 1.*t28584*t29462*t4178))*var2[4] + (t28562*t28584*t29036 + (t28955 + t29145 + t29146 + t28700*t29458 + t28577*t29276*t29462 + t29463)*t4178)*var2[5] + (0.2255*t28577 + 0.1575*t29258)*var2[12] + (0.325*t4301 - 1.*t28754*t4301 - 1.*t29448*t4301)*var2[13];
  p_output1[43]=(t28831*t28840 + t28851*t29474 + t28739*(t28782*t29474 + t28791*t29482 + t28831*t29511 + t28645*t29515 + t29556 + t29559) + t28831*(t28876 + t28877 + t28878 - 1.*t28739*t29511 - 1.*t28718*t29515 + t29563))*var2[3] + (t28580*t28957 + t28961*t29478 + t28703*(t28776*t29472 + t28642*t29494 + t29534 + t29536 + t29556 + t29559) + t28580*(t28876 + t29011 + t29012 - 1.*t28714*t29494 + t29529 + t29563))*var2[4] + (t28562*t28584*t29147 + t28584*t29137*t29258 + t28562*t28584*(t29011 + t29208 + t29209 - 1.*t28577*t29276*t29462 + t29528 + t29529) + t28577*t28584*(t28562*t29276*t29462 + t29533 + t29534 + t29536 + t29538 - 1.*t28774*t29258*t4178))*var2[5] + (t28577*t29358 + t28562*t29365 + t28577*(-1.*t28562*t28756 + t29209 - 1.*t28577*t29462 + t29528) + t28700*(t28756*t29258 + t28562*t29462 + t29533 + t29538))*var2[12];
  p_output1[44]=t28831*var2[0] + t28664*var2[1] + (t28583*t28645 + t28580*t3524)*var2[2] + (t28868*t29474 + t28831*(t28786*t29511 + t28678*t29515 + t29610) + t28786*(-1.*t28782*t29474 - 1.*t28791*t29482 - 1.*t28831*t29511 - 1.*t28645*t29515 + t29613 + t29616))*var2[3] + (t28999*t29478 + t28584*(-1.*t28776*t29472 - 1.*t28642*t29494 + t29592 + t29594 + t29613 + t29616)*t3726 + t28580*(-1.*t28578*t28584*t29494 + t29610 + t28584*t29462*t4178))*var2[4] + (t28584*t29194*t29258 + t4178*(-1.*t28562*t28765 - 1.*t28577*t29458 - 1.*t28562*t29276*t29462 + t29592 + t29594 + t28774*t29258*t4178))*var2[5] - 0.068*t28562*var2[12] + (0.325*t28548 - 1.*t28548*t28754 - 1.*t28548*t29448)*var2[13];
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 18, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "dJh_FrFoot_ParallelStance.hh"

namespace SymFunction
{

void dJh_FrFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
