/*
 * Automatically Generated from Mathematica.
 * Tue 7 Jun 2022 10:40:10 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t3728;
  double t3974;
  double t3934;
  double t3952;
  double t4172;
  double t2402;
  double t3505;
  double t4407;
  double t6489;
  double t6494;
  double t6520;
  double t3960;
  double t4181;
  double t4374;
  double t7050;
  double t7075;
  double t4377;
  double t8029;
  double t8032;
  double t3836;
  double t5100;
  double t6428;
  double t6604;
  double t6893;
  double t6896;
  double t6983;
  double t8812;
  double t9751;
  double t9790;
  double t9974;
  double t10173;
  double t7061;
  double t7117;
  double t7137;
  double t7156;
  double t7315;
  double t7365;
  double t7540;
  double t11979;
  double t12103;
  double t12104;
  double t12109;
  double t12111;
  double t8031;
  double t8135;
  double t8167;
  double t8180;
  double t8406;
  double t8484;
  double t8526;
  double t13080;
  double t17485;
  double t17490;
  double t17578;
  double t17607;
  double t8833;
  double t9551;
  double t9727;
  double t9737;
  double t11077;
  double t11136;
  double t11153;
  double t11183;
  double t17808;
  double t17810;
  double t17813;
  double t17885;
  double t17891;
  double t12005;
  double t12065;
  double t12072;
  double t12102;
  double t12114;
  double t12115;
  double t12116;
  double t12121;
  double t18038;
  double t18047;
  double t18109;
  double t18114;
  double t18126;
  double t13528;
  double t13556;
  double t13600;
  double t17482;
  double t17697;
  double t17709;
  double t17711;
  double t17717;
  double t18441;
  double t18457;
  double t18468;
  double t18475;
  double t18489;
  double t7066;
  double t22716;
  double t24272;
  double t22718;
  double t22721;
  double t22723;
  double t24387;
  double t24410;
  double t24508;
  double t24516;
  double t24570;
  double t24629;
  double t24639;
  double t24647;
  double t24663;
  double t24582;
  double t24592;
  double t24601;
  double t24618;
  double t24674;
  double t24681;
  double t24686;
  double t24696;
  double t24732;
  double t26421;
  double t26422;
  double t26423;
  double t26424;
  double t26433;
  double t26434;
  double t26435;
  double t26436;
  double t26437;
  double t26438;
  double t26461;
  double t26462;
  double t26463;
  double t26443;
  double t26444;
  double t26445;
  double t26446;
  double t26447;
  double t26648;
  double t26649;
  double t26650;
  double t26451;
  double t26452;
  double t26453;
  double t26454;
  double t26455;
  double t26660;
  double t26661;
  double t26662;
  double t26459;
  double t26460;
  double t26464;
  double t17980;
  double t17985;
  double t26465;
  double t26466;
  double t26467;
  double t26670;
  double t26671;
  double t26672;
  double t26471;
  double t26472;
  double t26651;
  double t18212;
  double t18248;
  double t26652;
  double t26653;
  double t26654;
  double t26681;
  double t26682;
  double t26683;
  double t26658;
  double t26659;
  double t26663;
  double t18536;
  double t18541;
  double t26664;
  double t26665;
  double t26666;
  double t26692;
  double t26693;
  double t26694;
  double t26442;
  double t26850;
  double t26851;
  double t26852;
  double t26853;
  double t26854;
  double t26860;
  double t26861;
  double t26862;
  double t26858;
  double t26859;
  double t26863;
  double t26418;
  double t26419;
  double t26864;
  double t26865;
  double t26866;
  double t26871;
  double t26872;
  double t26873;
  double t26882;
  double t26883;
  double t26884;
  double t26887;
  double t26888;
  double t26889;
  double t26890;
  double t26899;
  double t26885;
  double t26897;
  double t26893;
  double t26906;
  double t26907;
  double t26908;
  double t26909;
  double t26910;
  double t26911;
  double t26934;
  double t26935;
  double t26936;
  double t26915;
  double t26916;
  double t26917;
  double t26918;
  double t26919;
  double t26920;
  double t26945;
  double t26946;
  double t26947;
  double t26924;
  double t26925;
  double t26926;
  double t26927;
  double t26928;
  double t26929;
  double t27141;
  double t27142;
  double t27143;
  double t26902;
  double t27151;
  double t27152;
  double t27153;
  double t27154;
  double t27155;
  double t27156;
  double t27161;
  double t27162;
  double t27163;
  double t27172;
  double t27173;
  double t27174;
  double t27175;
  double t27176;
  double t27180;
  double t27183;
  double t27184;
  double t27185;
  double t27197;
  double t27198;
  double t27199;
  double t27196;
  double t27200;
  double t27201;
  double t27202;
  double t27203;
  double t27208;
  double t27209;
  double t27210;
  double t27220;
  double t27221;
  double t27222;
  double t27230;
  double t27231;
  double t27232;
  double t27233;
  double t27234;
  double t27241;
  double t27242;
  double t27243;
  double t27238;
  double t27374;
  double t27376;
  double t27377;
  double t27379;
  double t27380;
  double t27386;
  double t27387;
  double t27388;
  double t27399;
  double t27400;
  double t27401;
  double t27410;
  double t27411;
  double t27412;
  double t27413;
  double t27415;
  double t27422;
  double t27423;
  double t27424;
  double t27416;
  double t27437;
  double t27438;
  double t27439;
  double t27440;
  double t27441;
  double t27447;
  double t27448;
  double t27449;
  double t27460;
  double t27461;
  double t27462;
  double t27526;
  double t27527;
  double t27528;
  double t27529;
  double t27530;
  double t27540;
  double t27541;
  double t27542;
  double t27534;
  double t27556;
  double t27557;
  double t27558;
  double t27559;
  double t27560;
  double t27565;
  double t27566;
  double t27570;
  double t27580;
  double t27581;
  double t27582;
  t3728 = Sin(var1[3]);
  t3974 = Cos(var1[3]);
  t3934 = Cos(var1[5]);
  t3952 = Sin(var1[4]);
  t4172 = Sin(var1[5]);
  t2402 = Cos(var1[4]);
  t3505 = Sin(var1[9]);
  t4407 = Cos(var1[9]);
  t6489 = t3974*t3934;
  t6494 = -1.*t3728*t3952*t4172;
  t6520 = t6489 + t6494;
  t3960 = t3934*t3728*t3952;
  t4181 = t3974*t4172;
  t4374 = t3960 + t4181;
  t7050 = Sin(var1[12]);
  t7075 = Cos(var1[12]);
  t4377 = -0.325*t4374;
  t8029 = Sin(var1[15]);
  t8032 = Cos(var1[15]);
  t3836 = 0.1575*t2402*t3505*t3728;
  t5100 = -1.*t4407;
  t6428 = 1. + t5100;
  t6604 = 0.1575*t6428*t6520;
  t6893 = -1.*t2402*t3505*t3728;
  t6896 = t4407*t6520;
  t6983 = t6893 + t6896;
  t8812 = Cos(var1[10]);
  t9751 = Sin(var1[10]);
  t9790 = -1.*t4407*t2402*t3728;
  t9974 = -1.*t3505*t6520;
  t10173 = t9790 + t9974;
  t7061 = -0.1575*t2402*t7050*t3728;
  t7117 = -1.*t7075;
  t7137 = 1. + t7117;
  t7156 = -0.1575*t7137*t6520;
  t7315 = -1.*t2402*t7050*t3728;
  t7365 = t7075*t6520;
  t7540 = t7315 + t7365;
  t11979 = Cos(var1[13]);
  t12103 = Sin(var1[13]);
  t12104 = -1.*t7075*t2402*t3728;
  t12109 = -1.*t7050*t6520;
  t12111 = t12104 + t12109;
  t8031 = -0.1575*t2402*t8029*t3728;
  t8135 = -1.*t8032;
  t8167 = 1. + t8135;
  t8180 = -0.1575*t8167*t6520;
  t8406 = -1.*t2402*t8029*t3728;
  t8484 = t8032*t6520;
  t8526 = t8406 + t8484;
  t13080 = Cos(var1[16]);
  t17485 = Sin(var1[16]);
  t17490 = -1.*t8032*t2402*t3728;
  t17578 = -1.*t8029*t6520;
  t17607 = t17490 + t17578;
  t8833 = -1.*t8812;
  t9551 = 1. + t8833;
  t9727 = -0.325*t9551*t4374;
  t9737 = 0.2255*t6983;
  t11077 = 0.325*t9751*t10173;
  t11136 = t8812*t4374;
  t11153 = t9751*t10173;
  t11183 = t11136 + t11153;
  t17808 = Sin(var1[11]);
  t17810 = -1.*t9751*t4374;
  t17813 = t8812*t10173;
  t17885 = t17810 + t17813;
  t17891 = Cos(var1[11]);
  t12005 = -1.*t11979;
  t12065 = 1. + t12005;
  t12072 = 0.325*t12065*t4374;
  t12102 = -0.2255*t7540;
  t12114 = -0.325*t12103*t12111;
  t12115 = t11979*t4374;
  t12116 = t12103*t12111;
  t12121 = t12115 + t12116;
  t18038 = Sin(var1[14]);
  t18047 = -1.*t12103*t4374;
  t18109 = t11979*t12111;
  t18114 = t18047 + t18109;
  t18126 = Cos(var1[14]);
  t13528 = -1.*t13080;
  t13556 = 1. + t13528;
  t13600 = -0.325*t13556*t4374;
  t17482 = -0.2255*t8526;
  t17697 = 0.325*t17485*t17607;
  t17709 = t13080*t4374;
  t17711 = t17485*t17607;
  t17717 = t17709 + t17711;
  t18441 = Sin(var1[17]);
  t18457 = -1.*t17485*t4374;
  t18468 = t13080*t17607;
  t18475 = t18457 + t18468;
  t18489 = Cos(var1[17]);
  t7066 = 0.325*t4374;
  t22716 = Cos(var1[6]);
  t24272 = Sin(var1[6]);
  t22718 = -1.*t22716;
  t22721 = 1. + t22718;
  t22723 = 0.1575*t22721*t6520;
  t24387 = 0.1575*t2402*t3728*t24272;
  t24410 = t22716*t6520;
  t24508 = -1.*t2402*t3728*t24272;
  t24516 = t24410 + t24508;
  t24570 = Cos(var1[7]);
  t24629 = -1.*t2402*t22716*t3728;
  t24639 = -1.*t6520*t24272;
  t24647 = t24629 + t24639;
  t24663 = Sin(var1[7]);
  t24582 = -1.*t24570;
  t24592 = 1. + t24582;
  t24601 = 0.325*t24592*t4374;
  t24618 = 0.2255*t24516;
  t24674 = -0.325*t24647*t24663;
  t24681 = t24570*t4374;
  t24686 = t24647*t24663;
  t24696 = t24681 + t24686;
  t24732 = Cos(var1[8]);
  t26421 = t24570*t24647;
  t26422 = -1.*t4374*t24663;
  t26423 = t26421 + t26422;
  t26424 = Sin(var1[8]);
  t26433 = 0.325*t3974*t2402*t3934;
  t26434 = 0.1575*t3974*t3505*t3952;
  t26435 = 0.1575*t6428*t3974*t2402*t4172;
  t26436 = -1.*t3974*t3505*t3952;
  t26437 = t4407*t3974*t2402*t4172;
  t26438 = t26436 + t26437;
  t26461 = -1.*t4407*t3974*t3952;
  t26462 = -1.*t3974*t2402*t3505*t4172;
  t26463 = t26461 + t26462;
  t26443 = -0.1575*t3974*t7050*t3952;
  t26444 = -0.1575*t7137*t3974*t2402*t4172;
  t26445 = -1.*t3974*t7050*t3952;
  t26446 = t7075*t3974*t2402*t4172;
  t26447 = t26445 + t26446;
  t26648 = -1.*t7075*t3974*t3952;
  t26649 = -1.*t3974*t2402*t7050*t4172;
  t26650 = t26648 + t26649;
  t26451 = -0.1575*t3974*t8029*t3952;
  t26452 = -0.1575*t8167*t3974*t2402*t4172;
  t26453 = -1.*t3974*t8029*t3952;
  t26454 = t8032*t3974*t2402*t4172;
  t26455 = t26453 + t26454;
  t26660 = -1.*t8032*t3974*t3952;
  t26661 = -1.*t3974*t2402*t8029*t4172;
  t26662 = t26660 + t26661;
  t26459 = 0.325*t9551*t3974*t2402*t3934;
  t26460 = 0.2255*t26438;
  t26464 = 0.325*t9751*t26463;
  t17980 = -1.*t17891;
  t17985 = 1. + t17980;
  t26465 = -1.*t8812*t3974*t2402*t3934;
  t26466 = t9751*t26463;
  t26467 = t26465 + t26466;
  t26670 = t3974*t2402*t3934*t9751;
  t26671 = t8812*t26463;
  t26672 = t26670 + t26671;
  t26471 = -0.325*t12065*t3974*t2402*t3934;
  t26472 = -0.2255*t26447;
  t26651 = -0.325*t12103*t26650;
  t18212 = -1.*t18126;
  t18248 = 1. + t18212;
  t26652 = -1.*t11979*t3974*t2402*t3934;
  t26653 = t12103*t26650;
  t26654 = t26652 + t26653;
  t26681 = t3974*t2402*t3934*t12103;
  t26682 = t11979*t26650;
  t26683 = t26681 + t26682;
  t26658 = 0.325*t13556*t3974*t2402*t3934;
  t26659 = -0.2255*t26455;
  t26663 = 0.325*t17485*t26662;
  t18536 = -1.*t18489;
  t18541 = 1. + t18536;
  t26664 = -1.*t13080*t3974*t2402*t3934;
  t26665 = t17485*t26662;
  t26666 = t26664 + t26665;
  t26692 = t3974*t2402*t3934*t17485;
  t26693 = t13080*t26662;
  t26694 = t26692 + t26693;
  t26442 = -0.325*t3974*t2402*t3934;
  t26850 = 0.1575*t3974*t2402*t22721*t4172;
  t26851 = 0.1575*t3974*t3952*t24272;
  t26852 = t3974*t2402*t22716*t4172;
  t26853 = -1.*t3974*t3952*t24272;
  t26854 = t26852 + t26853;
  t26860 = -1.*t3974*t22716*t3952;
  t26861 = -1.*t3974*t2402*t4172*t24272;
  t26862 = t26860 + t26861;
  t26858 = -0.325*t3974*t2402*t3934*t24592;
  t26859 = 0.2255*t26854;
  t26863 = -0.325*t26862*t24663;
  t26418 = -1.*t24732;
  t26419 = 1. + t26418;
  t26864 = -1.*t3974*t2402*t3934*t24570;
  t26865 = t26862*t24663;
  t26866 = t26864 + t26865;
  t26871 = t24570*t26862;
  t26872 = t3974*t2402*t3934*t24663;
  t26873 = t26871 + t26872;
  t26882 = t3974*t3934*t3952;
  t26883 = -1.*t3728*t4172;
  t26884 = t26882 + t26883;
  t26887 = t3934*t3728;
  t26888 = t3974*t3952*t4172;
  t26889 = t26887 + t26888;
  t26890 = -0.325*t26889;
  t26899 = 0.325*t26889;
  t26885 = 0.1575*t6428*t26884;
  t26897 = -0.1575*t7137*t26884;
  t26893 = -0.1575*t8167*t26884;
  t26906 = 0.2255*t4407*t26884;
  t26907 = -0.325*t3505*t9751*t26884;
  t26908 = -0.325*t9551*t26889;
  t26909 = -1.*t3505*t9751*t26884;
  t26910 = t8812*t26889;
  t26911 = t26909 + t26910;
  t26934 = -1.*t8812*t3505*t26884;
  t26935 = -1.*t9751*t26889;
  t26936 = t26934 + t26935;
  t26915 = -0.2255*t7075*t26884;
  t26916 = 0.325*t7050*t12103*t26884;
  t26917 = 0.325*t12065*t26889;
  t26918 = -1.*t7050*t12103*t26884;
  t26919 = t11979*t26889;
  t26920 = t26918 + t26919;
  t26945 = -1.*t11979*t7050*t26884;
  t26946 = -1.*t12103*t26889;
  t26947 = t26945 + t26946;
  t26924 = -0.2255*t8032*t26884;
  t26925 = -0.325*t8029*t17485*t26884;
  t26926 = -0.325*t13556*t26889;
  t26927 = -1.*t8029*t17485*t26884;
  t26928 = t13080*t26889;
  t26929 = t26927 + t26928;
  t27141 = -1.*t13080*t8029*t26884;
  t27142 = -1.*t17485*t26889;
  t27143 = t27141 + t27142;
  t26902 = 0.1575*t22721*t26884;
  t27151 = 0.2255*t22716*t26884;
  t27152 = 0.325*t24592*t26889;
  t27153 = 0.325*t26884*t24272*t24663;
  t27154 = t24570*t26889;
  t27155 = -1.*t26884*t24272*t24663;
  t27156 = t27154 + t27155;
  t27161 = -1.*t24570*t26884*t24272;
  t27162 = -1.*t26889*t24663;
  t27163 = t27161 + t27162;
  t27172 = -0.1575*t3974*t2402*t22716;
  t27173 = 0.1575*t26889*t24272;
  t27174 = t3974*t2402*t22716;
  t27175 = -1.*t26889*t24272;
  t27176 = t27174 + t27175;
  t27180 = 0.2255*t27176;
  t27183 = -1.*t22716*t26889;
  t27184 = -1.*t3974*t2402*t24272;
  t27185 = t27183 + t27184;
  t27197 = -1.*t3974*t3934*t3952;
  t27198 = t3728*t4172;
  t27199 = t27197 + t27198;
  t27196 = -0.325*t24570*t27176;
  t27200 = 0.325*t27199*t24663;
  t27201 = t24570*t27176;
  t27202 = -1.*t27199*t24663;
  t27203 = t27201 + t27202;
  t27208 = -1.*t24570*t27199;
  t27209 = -1.*t27176*t24663;
  t27210 = t27208 + t27209;
  t27220 = t24570*t27199;
  t27221 = t27176*t24663;
  t27222 = t27220 + t27221;
  t27230 = -0.1575*t4407*t3974*t2402;
  t27231 = 0.1575*t3505*t26889;
  t27232 = t4407*t3974*t2402;
  t27233 = -1.*t3505*t26889;
  t27234 = t27232 + t27233;
  t27241 = -1.*t3974*t2402*t3505;
  t27242 = -1.*t4407*t26889;
  t27243 = t27241 + t27242;
  t27238 = 0.2255*t27234;
  t27374 = -0.325*t9751*t27199;
  t27376 = 0.325*t8812*t27234;
  t27377 = -1.*t9751*t27199;
  t27379 = t8812*t27234;
  t27380 = t27377 + t27379;
  t27386 = -1.*t8812*t27199;
  t27387 = -1.*t9751*t27234;
  t27388 = t27386 + t27387;
  t27399 = t8812*t27199;
  t27400 = t9751*t27234;
  t27401 = t27399 + t27400;
  t27410 = 0.1575*t7075*t3974*t2402;
  t27411 = -0.1575*t7050*t26889;
  t27412 = t7075*t3974*t2402;
  t27413 = -1.*t7050*t26889;
  t27415 = t27412 + t27413;
  t27422 = -1.*t3974*t2402*t7050;
  t27423 = -1.*t7075*t26889;
  t27424 = t27422 + t27423;
  t27416 = -0.2255*t27415;
  t27437 = 0.325*t12103*t27199;
  t27438 = -0.325*t11979*t27415;
  t27439 = -1.*t12103*t27199;
  t27440 = t11979*t27415;
  t27441 = t27439 + t27440;
  t27447 = -1.*t11979*t27199;
  t27448 = -1.*t12103*t27415;
  t27449 = t27447 + t27448;
  t27460 = t11979*t27199;
  t27461 = t12103*t27415;
  t27462 = t27460 + t27461;
  t27526 = 0.1575*t8032*t3974*t2402;
  t27527 = -0.1575*t8029*t26889;
  t27528 = t8032*t3974*t2402;
  t27529 = -1.*t8029*t26889;
  t27530 = t27528 + t27529;
  t27540 = -1.*t3974*t2402*t8029;
  t27541 = -1.*t8032*t26889;
  t27542 = t27540 + t27541;
  t27534 = -0.2255*t27530;
  t27556 = -0.325*t17485*t27199;
  t27557 = 0.325*t13080*t27530;
  t27558 = -1.*t17485*t27199;
  t27559 = t13080*t27530;
  t27560 = t27558 + t27559;
  t27565 = -1.*t13080*t27199;
  t27566 = -1.*t17485*t27530;
  t27570 = t27565 + t27566;
  t27580 = t13080*t27199;
  t27581 = t17485*t27530;
  t27582 = t27580 + t27581;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=-258.00300000000004;
  p_output1[3]=-6.1312500000000005*(t22723 + t24387 + t24601 + t24618 + t24674 + 0.325*t24696) - 1.9620000000000002*(t22723 + t24387 + t24601 + t24618 + t24674 + 0.075*t24696*t26419 + 0.075*t26423*t26424 + 0.075*(t24696*t24732 - 1.*t26423*t26424)) - 26.977500000000003*(t3836 + t4377 + t6604 + 0.1575*t6983) - 26.977500000000003*(t22723 + t24387 + 0.1575*t24516 + t7066) - 6.1312500000000005*(t12072 + t12102 + t12114 + 0.325*t12121 + t7061 + t7156) - 1.9620000000000002*(t12072 + t12102 + t12114 + 0.075*t18038*t18114 + 0.075*(-1.*t18038*t18114 + t12121*t18126) + 0.075*t12121*t18248 + t7061 + t7156) - 26.977500000000003*(t7061 + t7066 + t7156 - 0.1575*t7540) - 6.1312500000000005*(t13600 + t17482 + t17697 - 0.325*t17717 + t8031 + t8180) - 1.9620000000000002*(t13600 + t17482 + t17697 - 0.575*t18441*t18475 - 0.575*(-1.*t18441*t18475 + t17717*t18489) - 0.575*t17717*t18541 + t8031 + t8180) - 26.977500000000003*(t4377 + t8031 + t8180 - 0.1575*t8526) - 6.1312500000000005*(t11077 - 0.325*t11183 + t3836 + t6604 + t9727 + t9737) - 1.9620000000000002*(t11077 - 0.575*t17808*t17885 - 0.575*(-1.*t17808*t17885 + t11183*t17891) - 0.575*t11183*t17985 + t3836 + t6604 + t9727 + t9737);
  p_output1[4]=-26.977500000000003*(t26433 + t26434 + t26435 + 0.1575*t26438) - 26.977500000000003*(t26442 + t26443 + t26444 - 0.1575*t26447) - 26.977500000000003*(t26433 + t26451 + t26452 - 0.1575*t26455) - 6.1312500000000005*(t26434 + t26435 + t26459 + t26460 + t26464 - 0.325*t26467) - 6.1312500000000005*(t26443 + t26444 + t26471 + t26472 + t26651 + 0.325*t26654) - 6.1312500000000005*(t26451 + t26452 + t26658 + t26659 + t26663 - 0.325*t26666) - 1.9620000000000002*(t26434 + t26435 + t26459 + t26460 + t26464 - 0.575*t17985*t26467 - 0.575*t17808*t26672 - 0.575*(t17891*t26467 - 1.*t17808*t26672)) - 1.9620000000000002*(t26443 + t26444 + t26471 + t26472 + t26651 + 0.075*t18248*t26654 + 0.075*t18038*t26683 + 0.075*(t18126*t26654 - 1.*t18038*t26683)) - 1.9620000000000002*(t26451 + t26452 + t26658 + t26659 + t26663 - 0.575*t18541*t26666 - 0.575*t18441*t26694 - 0.575*(t18489*t26666 - 1.*t18441*t26694)) - 26.977500000000003*(t26442 + t26850 + t26851 + 0.1575*t26854) - 6.1312500000000005*(t26850 + t26851 + t26858 + t26859 + t26863 + 0.325*t26866) - 1.9620000000000002*(t26850 + t26851 + t26858 + t26859 + t26863 + 0.075*t26419*t26866 + 0.075*t26424*t26873 + 0.075*(t24732*t26866 - 1.*t26424*t26873));
  p_output1[5]=-26.977500000000003*(0.1575*t22716*t26884 + t26899 + t26902) - 6.1312500000000005*(t26885 + t26906 + t26907 + t26908 - 0.325*t26911) - 6.1312500000000005*(t26897 + t26915 + t26916 + t26917 + 0.325*t26920) - 6.1312500000000005*(t26893 + t26924 + t26925 + t26926 - 0.325*t26929) - 1.9620000000000002*(t26885 + t26906 + t26907 + t26908 - 0.575*t17985*t26911 - 0.575*t17808*t26936 - 0.575*(t17891*t26911 - 1.*t17808*t26936)) - 1.9620000000000002*(t26897 + t26915 + t26916 + t26917 + 0.075*t18248*t26920 + 0.075*t18038*t26947 + 0.075*(t18126*t26920 - 1.*t18038*t26947)) - 1.9620000000000002*(t26893 + t26924 + t26925 + t26926 - 0.575*t18541*t26929 - 0.575*t18441*t27143 - 0.575*(t18489*t26929 - 1.*t18441*t27143)) - 6.1312500000000005*(t26902 + t27151 + t27152 + t27153 + 0.325*t27156) - 1.9620000000000002*(t26902 + t27151 + t27152 + t27153 + 0.075*t26419*t27156 + 0.075*t26424*t27163 + 0.075*(t24732*t27156 - 1.*t26424*t27163)) - 26.977500000000003*(t26885 + t26890 + 0.1575*t26884*t4407) - 26.977500000000003*(t26897 + t26899 - 0.1575*t26884*t7075) - 26.977500000000003*(t26890 + t26893 - 0.1575*t26884*t8032);
  p_output1[6]=-26.977500000000003*(t27172 + t27173 + 0.1575*t27176) - 6.1312500000000005*(t27172 + t27173 + t27180) - 1.9620000000000002*(t27172 + t27173 + t27180 - 0.325*t24663*t27185 + 0.075*t24663*t26419*t27185 + 0.075*t24570*t26424*t27185 + 0.075*(t24663*t24732*t27185 - 1.*t24570*t26424*t27185));
  p_output1[7]=-6.1312500000000005*(t27196 + t27200 + 0.325*t27203) - 1.9620000000000002*(t27196 + t27200 + 0.075*t26419*t27203 + 0.075*t26424*t27210 + 0.075*(t24732*t27203 - 1.*t26424*t27210));
  p_output1[8]=-1.9620000000000002*(0.075*t24732*t27203 + 0.075*t26424*t27222 + 0.075*(-1.*t24732*t27203 - 1.*t26424*t27222));
  p_output1[9]=-26.977500000000003*(t27230 + t27231 + 0.1575*t27234) - 6.1312500000000005*(t27230 + t27231 + t27238) - 1.9620000000000002*(t27230 + t27231 + t27238 - 0.575*t17808*t27243*t8812 + 0.325*t27243*t9751 - 0.575*t17985*t27243*t9751 - 0.575*(-1.*t17808*t27243*t8812 + t17891*t27243*t9751));
  p_output1[10]=-6.1312500000000005*(t27374 + t27376 - 0.325*t27380) - 1.9620000000000002*(t27374 + t27376 - 0.575*t17985*t27380 - 0.575*t17808*t27388 - 0.575*(t17891*t27380 - 1.*t17808*t27388));
  p_output1[11]=-1.9620000000000002*(-0.575*t17891*t27380 - 0.575*t17808*t27401 - 0.575*(-1.*t17891*t27380 - 1.*t17808*t27401));
  p_output1[12]=-26.977500000000003*(t27410 + t27411 - 0.1575*t27415) - 6.1312500000000005*(t27410 + t27411 + t27416) - 1.9620000000000002*(t27410 + t27411 + t27416 - 0.325*t12103*t27424 + 0.075*t11979*t18038*t27424 + 0.075*t12103*t18248*t27424 + 0.075*(-1.*t11979*t18038*t27424 + t12103*t18126*t27424));
  p_output1[13]=-6.1312500000000005*(t27437 + t27438 + 0.325*t27441) - 1.9620000000000002*(t27437 + t27438 + 0.075*t18248*t27441 + 0.075*t18038*t27449 + 0.075*(t18126*t27441 - 1.*t18038*t27449));
  p_output1[14]=-1.9620000000000002*(0.075*t18126*t27441 + 0.075*t18038*t27462 + 0.075*(-1.*t18126*t27441 - 1.*t18038*t27462));
  p_output1[15]=-26.977500000000003*(t27526 + t27527 - 0.1575*t27530) - 6.1312500000000005*(t27526 + t27527 + t27534) - 1.9620000000000002*(t27526 + t27527 + t27534 + 0.325*t17485*t27542 - 0.575*t13080*t18441*t27542 - 0.575*t17485*t18541*t27542 - 0.575*(-1.*t13080*t18441*t27542 + t17485*t18489*t27542));
  p_output1[16]=-6.1312500000000005*(t27556 + t27557 - 0.325*t27560) - 1.9620000000000002*(t27556 + t27557 - 0.575*t18541*t27560 - 0.575*t18441*t27570 - 0.575*(t18489*t27560 - 1.*t18441*t27570));
  p_output1[17]=-1.9620000000000002*(-0.575*t18489*t27560 - 0.575*t18441*t27582 - 0.575*(-1.*t18489*t27560 - 1.*t18441*t27582));
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ge_vec_vision60.hh"

namespace SymFunction
{

void Ge_vec_vision60_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
