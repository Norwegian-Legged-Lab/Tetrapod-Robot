/*
 * Automatically Generated from Mathematica.
 * Tue 7 Jun 2022 10:40:30 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t28857;
  double t28836;
  double t28855;
  double t28871;
  double t28856;
  double t28875;
  double t28883;
  double t17823;
  double t28891;
  double t28892;
  double t28893;
  double t17892;
  double t28894;
  double t28905;
  double t28890;
  double t28895;
  double t28899;
  double t5774;
  double t28906;
  double t28910;
  double t28962;
  double t28968;
  double t28969;
  double t28970;
  double t28972;
  double t28973;
  double t28974;
  double t28986;
  double t28987;
  double t28989;
  double t29005;
  double t29007;
  double t29010;
  double t29004;
  double t29014;
  double t29015;
  double t29018;
  double t29019;
  double t29020;
  double t29022;
  double t29023;
  double t29024;
  double t29037;
  double t29041;
  double t29043;
  double t29060;
  double t29065;
  double t29069;
  double t29071;
  double t29072;
  double t29073;
  double t29074;
  double t29075;
  double t29076;
  double t29059;
  double t29070;
  double t29080;
  double t29081;
  double t29058;
  double t29083;
  double t29084;
  double t29088;
  double t29089;
  double t29090;
  double t29091;
  double t29092;
  double t29093;
  double t29097;
  double t29101;
  double t29105;
  double t29109;
  double t29113;
  double t29114;
  double t29115;
  double t29116;
  double t29120;
  double t29133;
  double t29134;
  double t29138;
  double t29128;
  double t29129;
  double t29131;
  double t29124;
  double t29125;
  double t29126;
  double t29052;
  double t29053;
  double t29057;
  double t29085;
  double t29121;
  double t29122;
  double t29151;
  double t29152;
  double t29153;
  double t29141;
  double t29143;
  double t29144;
  double t29184;
  double t29185;
  double t29186;
  double t29159;
  double t29160;
  double t29162;
  double t29251;
  double t29252;
  double t29253;
  double t29154;
  double t29172;
  double t29280;
  double t29281;
  double t29282;
  double t29284;
  double t29301;
  double t29302;
  double t29307;
  double t29155;
  double t29156;
  double t29157;
  double t29310;
  double t29312;
  double t29173;
  double t29174;
  double t29175;
  double t29192;
  double t29211;
  double t29367;
  double t29369;
  double t29195;
  double t29196;
  double t29198;
  double t29384;
  double t29386;
  double t29212;
  double t29213;
  double t29214;
  double t29230;
  double t29243;
  double t29424;
  double t29232;
  double t29234;
  double t29235;
  double t29429;
  double t29431;
  double t29244;
  double t29245;
  double t29246;
  double t29271;
  double t29287;
  double t29479;
  double t29483;
  double t29484;
  double t29488;
  double t29489;
  double t29524;
  double t29525;
  double t29526;
  double t29277;
  double t29278;
  double t29486;
  double t29490;
  double t29506;
  double t29508;
  double t29291;
  double t29292;
  double t29541;
  double t29542;
  double t29546;
  double t29550;
  double t29551;
  double t29560;
  double t29561;
  double t29562;
  double t29565;
  double t29566;
  double t29567;
  double t29569;
  double t29570;
  double t29571;
  double t29573;
  double t29574;
  double t29575;
  double t29377;
  double t29372;
  double t29577;
  double t29578;
  double t29579;
  double t29599;
  double t29601;
  double t29373;
  double t29374;
  double t29609;
  double t29612;
  double t29378;
  double t29380;
  double t29633;
  double t29635;
  double t29519;
  double t29520;
  double t29521;
  double t29640;
  double t29641;
  double t29584;
  double t29585;
  double t29586;
  double t29418;
  double t29434;
  double t29419;
  double t29420;
  double t29669;
  double t29671;
  double t29543;
  double t29675;
  double t29677;
  double t29435;
  double t29436;
  double t29696;
  double t29699;
  double t29703;
  double t29705;
  double t29467;
  double t29468;
  double t29728;
  double t29729;
  double t29730;
  double t29745;
  double t29746;
  double t29029;
  double t29031;
  double t29032;
  double t29738;
  double t29739;
  double t29740;
  double t29741;
  double t29736;
  double t29744;
  double t29747;
  double t29769;
  double t29770;
  double t29771;
  double t29760;
  double t29761;
  double t29762;
  double t29765;
  double t29766;
  double t29767;
  double t29776;
  double t29777;
  double t29778;
  double t29772;
  double t29775;
  double t29780;
  double t29786;
  double t29787;
  double t29788;
  double t29790;
  double t29791;
  double t29792;
  double t29794;
  double t29795;
  double t29796;
  double t29604;
  double t29605;
  double t29606;
  double t29617;
  double t29618;
  double t29619;
  double t29748;
  double t29500;
  double t29501;
  double t29816;
  double t29817;
  double t29824;
  double t29822;
  double t29814;
  double t29818;
  double t29848;
  double t29851;
  double t29853;
  double t29801;
  double t29802;
  double t29803;
  double t29665;
  double t29666;
  double t29876;
  double t29895;
  double t29899;
  double t29918;
  double t29919;
  double t29920;
  double t29932;
  double t29933;
  double t29934;
  double t29942;
  double t29943;
  double t29944;
  double t29948;
  double t29949;
  double t29950;
  double t29952;
  double t29953;
  double t29954;
  double t29929;
  double t29930;
  double t29935;
  double t29968;
  double t29969;
  double t29970;
  double t29964;
  double t29965;
  double t29966;
  double t29971;
  double t29974;
  double t29981;
  double t29982;
  double t29983;
  double t29985;
  double t29986;
  double t29987;
  double t29680;
  double t29681;
  double t29829;
  double t29830;
  double t29836;
  double t29837;
  double t30000;
  double t30005;
  double t30010;
  double t30006;
  double t30008;
  double t30001;
  double t30028;
  double t30031;
  double t29941;
  double t29945;
  double t29946;
  double t30035;
  double t28979;
  double t28980;
  double t28981;
  double t30064;
  double t30066;
  double t30082;
  double t30085;
  double t30088;
  t28857 = Cos(var1[16]);
  t28836 = Cos(var1[17]);
  t28855 = Sin(var1[16]);
  t28871 = Sin(var1[17]);
  t28856 = t28836*t28855;
  t28875 = -1.*t28857*t28871;
  t28883 = t28856 + t28875;
  t17823 = Cos(var1[5]);
  t28891 = t28857*t28836;
  t28892 = t28855*t28871;
  t28893 = t28891 + t28892;
  t17892 = Sin(var1[15]);
  t28894 = Sin(var1[5]);
  t28905 = Cos(var1[3]);
  t28890 = -1.*t17823*t17892*t28883;
  t28895 = t28893*t28894;
  t28899 = t28890 + t28895;
  t5774 = Sin(var1[3]);
  t28906 = Cos(var1[15]);
  t28910 = Cos(var1[4]);
  t28962 = t28906*t28910*t28883;
  t28968 = Sin(var1[4]);
  t28969 = t17823*t28893;
  t28970 = t17892*t28883*t28894;
  t28972 = t28969 + t28970;
  t28973 = -1.*t28968*t28972;
  t28974 = t28962 + t28973;
  t28986 = t28910*t17892;
  t28987 = t28906*t28968*t28894;
  t28989 = t28986 + t28987;
  t29005 = -1.*t28836*t28855;
  t29007 = t28857*t28871;
  t29010 = t29005 + t29007;
  t29004 = -1.*t17823*t17892*t28893;
  t29014 = t29010*t28894;
  t29015 = t29004 + t29014;
  t29018 = t28906*t28910*t28893;
  t29019 = t17823*t29010;
  t29020 = t17892*t28893*t28894;
  t29022 = t29019 + t29020;
  t29023 = -1.*t28968*t29022;
  t29024 = t29018 + t29023;
  t29037 = -1.*t28906*t28883*t28968;
  t29041 = -1.*t28910*t28972;
  t29043 = t29037 + t29041;
  t29060 = -0.0641*t28836;
  t29065 = -0.28*t28871;
  t29069 = t29060 + t29065;
  t29071 = -1.*t28836;
  t29072 = 1. + t29071;
  t29073 = -0.575*t29072;
  t29074 = -0.295*t28836;
  t29075 = -0.0641*t28871;
  t29076 = t29073 + t29074 + t29075;
  t29059 = 0.325*t28855;
  t29070 = t28857*t29069;
  t29080 = t28855*t29076;
  t29081 = t29059 + t29070 + t29080;
  t29058 = -0.068*t17892;
  t29083 = t28906*t29081;
  t29084 = t29058 + t29083;
  t29088 = -1.*t28857;
  t29089 = 1. + t29088;
  t29090 = -0.325*t29089;
  t29091 = -1.*t28855*t29069;
  t29092 = t28857*t29076;
  t29093 = t29090 + t29091 + t29092;
  t29097 = t17823*t29093;
  t29101 = -1.*t28906;
  t29105 = 1. + t29101;
  t29109 = -0.1575*t29105;
  t29113 = -0.2255*t28906;
  t29114 = -1.*t17892*t29081;
  t29115 = t29109 + t29113 + t29114;
  t29116 = -1.*t29115*t28894;
  t29120 = t29097 + t29116;
  t29133 = t28910*t29084;
  t29134 = -1.*t28968*t29120;
  t29138 = t29133 + t29134;
  t29128 = t17892*t28968;
  t29129 = -1.*t28906*t28910*t28894;
  t29131 = t29128 + t29129;
  t29124 = t29084*t28968;
  t29125 = t28910*t29120;
  t29126 = t29124 + t29125;
  t29052 = t28906*t28893*t28968;
  t29053 = t28910*t29022;
  t29057 = t29052 + t29053;
  t29085 = -1.*t29084*t28968;
  t29121 = -1.*t28910*t29120;
  t29122 = t29085 + t29121;
  t29151 = t17823*t29115;
  t29152 = t29093*t28894;
  t29153 = t29151 + t29152;
  t29141 = -1.*t17892*t28968;
  t29143 = t28906*t28910*t28894;
  t29144 = t29141 + t29143;
  t29184 = t28906*t28883*t28968;
  t29185 = t28910*t28972;
  t29186 = t29184 + t29185;
  t29159 = -1.*t28906*t28893*t28968;
  t29160 = -1.*t28910*t29022;
  t29162 = t29159 + t29160;
  t29251 = t17823*t17892*t28883;
  t29252 = -1.*t28893*t28894;
  t29253 = t29251 + t29252;
  t29154 = -1.*t28906*t17823*t29153;
  t29172 = t29153*t29015;
  t29280 = -1.*t17823*t29115;
  t29281 = -1.*t29093*t28894;
  t29282 = t29280 + t29281;
  t29284 = t28906*t28894*t29153;
  t29301 = t17823*t17892*t28893;
  t29302 = -1.*t29010*t28894;
  t29307 = t29301 + t29302;
  t29155 = -1.*t29131*t29126;
  t29156 = -1.*t28989*t29138;
  t29157 = t29154 + t29155 + t29156;
  t29310 = t29120*t29015;
  t29312 = t29153*t29022;
  t29173 = t29126*t29057;
  t29174 = t29138*t29024;
  t29175 = t29172 + t29173 + t29174;
  t29192 = t29153*t28899;
  t29211 = -1.*t29153*t29015;
  t29367 = t29153*t28972;
  t29369 = t29120*t28899;
  t29195 = t29126*t29186;
  t29196 = t29138*t28974;
  t29198 = t29192 + t29195 + t29196;
  t29384 = -1.*t29120*t29015;
  t29386 = -1.*t29153*t29022;
  t29212 = -1.*t29126*t29057;
  t29213 = -1.*t29138*t29024;
  t29214 = t29211 + t29212 + t29213;
  t29230 = t28906*t17823*t29153;
  t29243 = -1.*t29153*t28899;
  t29424 = -1.*t28906*t28894*t29153;
  t29232 = t29131*t29126;
  t29234 = t28989*t29138;
  t29235 = t29230 + t29232 + t29234;
  t29429 = -1.*t29153*t28972;
  t29431 = -1.*t29120*t28899;
  t29244 = -1.*t29126*t29186;
  t29245 = -1.*t29138*t28974;
  t29246 = t29243 + t29244 + t29245;
  t29271 = -1.*t17892*t29084;
  t29287 = t28906*t29084*t28893;
  t29479 = 0.068*t17892;
  t29483 = -1.*t28906*t29081;
  t29484 = t29479 + t29483;
  t29488 = -0.068*t28906;
  t29489 = t29488 + t29114;
  t29524 = -1.*t28910*t17892*t28883;
  t29525 = -1.*t28906*t28883*t28968*t28894;
  t29526 = t29524 + t29525;
  t29277 = t28906*t28894*t29120;
  t29278 = t29271 + t29277 + t29154;
  t29486 = -1.*t28906*t29084;
  t29490 = -1.*t17892*t29489;
  t29506 = -1.*t17892*t29084*t28893;
  t29508 = t28906*t29489*t28893;
  t29291 = t29120*t29022;
  t29292 = t29287 + t29172 + t29291;
  t29541 = Power(t17823,2);
  t29542 = -1.*t28906*t29541*t29484;
  t29546 = t17823*t17892*t29153;
  t29550 = -1.*t28906*t17823*t28893*t29153;
  t29551 = t17823*t29484*t29015;
  t29560 = -1.*t17892*t28893*t28968;
  t29561 = t28906*t28910*t28893*t28894;
  t29562 = t29560 + t29561;
  t29565 = t29489*t28968;
  t29566 = -1.*t28910*t29484*t28894;
  t29567 = t29565 + t29566;
  t29569 = t28910*t29489;
  t29570 = t29484*t28968*t28894;
  t29571 = t29569 + t29570;
  t29573 = t28906*t28968;
  t29574 = t28910*t17892*t28894;
  t29575 = t29573 + t29574;
  t29377 = -1.*t28906*t29084*t28893;
  t29372 = t28906*t29084*t28883;
  t29577 = t28906*t28910;
  t29578 = -1.*t17892*t28968*t28894;
  t29579 = t29577 + t29578;
  t29599 = -1.*t17892*t29084*t28883;
  t29601 = t28906*t29489*t28883;
  t29373 = t29120*t28972;
  t29374 = t29372 + t29373 + t29192;
  t29609 = t17892*t29084*t28893;
  t29612 = -1.*t28906*t29489*t28893;
  t29378 = -1.*t29120*t29022;
  t29380 = t29377 + t29211 + t29378;
  t29633 = -1.*t28906*t17823*t28883*t29153;
  t29635 = t17823*t29484*t28899;
  t29519 = -1.*t17892*t28883*t28968;
  t29520 = t28906*t28910*t28883*t28894;
  t29521 = t29519 + t29520;
  t29640 = t28906*t17823*t28893*t29153;
  t29641 = -1.*t17823*t29484*t29015;
  t29584 = -1.*t28910*t17892*t28893;
  t29585 = -1.*t28906*t28893*t28968*t28894;
  t29586 = t29584 + t29585;
  t29418 = t17892*t29084;
  t29434 = -1.*t28906*t29084*t28883;
  t29419 = -1.*t28906*t28894*t29120;
  t29420 = t29418 + t29419 + t29230;
  t29669 = t28906*t29084;
  t29671 = t17892*t29489;
  t29543 = Power(t28894,2);
  t29675 = t17892*t29084*t28883;
  t29677 = -1.*t28906*t29489*t28883;
  t29435 = -1.*t29120*t28972;
  t29436 = t29434 + t29435 + t29243;
  t29696 = t28906*t29541*t29484;
  t29699 = -1.*t17823*t17892*t29153;
  t29703 = t28906*t17823*t28883*t29153;
  t29705 = -1.*t17823*t29484*t28899;
  t29467 = -1.*t28906*t29115;
  t29468 = t29271 + t29467;
  t29728 = -1.*t28857*t28836;
  t29729 = -1.*t28855*t28871;
  t29730 = t29728 + t29729;
  t29745 = 0.325*t28857;
  t29746 = t29745 + t29091 + t29092;
  t29029 = t28905*t29015;
  t29031 = -1.*t5774*t29024;
  t29032 = t29029 + t29031;
  t29738 = -0.325*t28855;
  t29739 = -1.*t28857*t29069;
  t29740 = -1.*t28855*t29076;
  t29741 = t29738 + t29739 + t29740;
  t29736 = t28906*t29084*t29010;
  t29744 = Power(t28906,2);
  t29747 = t29744*t29746*t28893;
  t29769 = -1.*t17823*t17892*t29746;
  t29770 = t29741*t28894;
  t29771 = t29769 + t29770;
  t29760 = -1.*t17823*t17892*t29010;
  t29761 = t29730*t28894;
  t29762 = t29760 + t29761;
  t29765 = t17823*t29741;
  t29766 = t17892*t29746*t28894;
  t29767 = t29765 + t29766;
  t29776 = t17823*t29730;
  t29777 = t17892*t29010*t28894;
  t29778 = t29776 + t29777;
  t29772 = -1.*t28906*t17823*t29771;
  t29775 = t29771*t29015;
  t29780 = t29153*t29762;
  t29786 = t28906*t29010*t28968;
  t29787 = t28910*t29778;
  t29788 = t29786 + t29787;
  t29790 = t28906*t29746*t28968;
  t29791 = t28910*t29767;
  t29792 = t29790 + t29791;
  t29794 = t28906*t28910*t29746;
  t29795 = -1.*t28968*t29767;
  t29796 = t29794 + t29795;
  t29604 = -1.*t29093*t29010;
  t29605 = t17892*t29115*t28893;
  t29606 = t29604 + t29377 + t29605;
  t29617 = -1.*t17892*t29115*t28883;
  t29618 = t29093*t28893;
  t29619 = t29372 + t29617 + t29618;
  t29748 = Power(t17892,2);
  t29500 = t29093*t29010;
  t29501 = -1.*t17892*t29115*t28893;
  t29816 = -1.*t29741*t29010;
  t29817 = -1.*t29093*t29730;
  t29824 = t29741*t28893;
  t29822 = t29744*t29746*t28883;
  t29814 = -1.*t28906*t29084*t29010;
  t29818 = -1.*t29744*t29746*t28893;
  t29848 = t29771*t28899;
  t29851 = -1.*t29771*t29015;
  t29853 = -1.*t29153*t29762;
  t29801 = t28906*t28910*t29010;
  t29802 = -1.*t28968*t29778;
  t29803 = t29801 + t29802;
  t29665 = t28906*t29115;
  t29666 = t29418 + t29665;
  t29876 = -1.*t29744*t29746*t28883;
  t29895 = t28906*t17823*t29771;
  t29899 = -1.*t29771*t28899;
  t29918 = -0.28*t28836;
  t29919 = 0.0641*t28871;
  t29920 = t29918 + t29919;
  t29932 = t28855*t29069;
  t29933 = t28857*t29920;
  t29934 = t29932 + t29933;
  t29942 = t17823*t28883;
  t29943 = t17892*t29730*t28894;
  t29944 = t29942 + t29943;
  t29948 = -1.*t17823*t17892*t29730;
  t29949 = t28883*t28894;
  t29950 = t29948 + t29949;
  t29952 = t28906*t28910*t29730;
  t29953 = -1.*t28968*t29944;
  t29954 = t29952 + t29953;
  t29929 = -1.*t28855*t29920;
  t29930 = t29070 + t29929;
  t29935 = t29744*t29934*t28893;
  t29968 = -1.*t17823*t17892*t29934;
  t29969 = t29930*t28894;
  t29970 = t29968 + t29969;
  t29964 = t17823*t29930;
  t29965 = t17892*t29934*t28894;
  t29966 = t29964 + t29965;
  t29971 = -1.*t28906*t17823*t29970;
  t29974 = t29970*t29015;
  t29981 = t28906*t29934*t28968;
  t29982 = t28910*t29966;
  t29983 = t29981 + t29982;
  t29985 = t28906*t28910*t29934;
  t29986 = -1.*t28968*t29966;
  t29987 = t29985 + t29986;
  t29680 = t17892*t29115*t28883;
  t29681 = -1.*t29093*t28893;
  t29829 = t29081*t28883;
  t29830 = t29829 + t29618;
  t29836 = -1.*t29081*t28893;
  t29837 = t29604 + t29836;
  t30000 = -1.*t29930*t29010;
  t30005 = t29093*t28883;
  t30010 = t29930*t28893;
  t30006 = t29744*t29934*t28883;
  t30008 = t28906*t29084*t29730;
  t30001 = -1.*t29744*t29934*t28893;
  t30028 = t29153*t29950;
  t30031 = t29970*t28899;
  t29941 = t28906*t29730*t28968;
  t29945 = t28910*t29944;
  t29946 = t29941 + t29945;
  t30035 = -1.*t29970*t29015;
  t28979 = t28905*t28899;
  t28980 = -1.*t5774*t28974;
  t28981 = t28979 + t28980;
  t30064 = -1.*t29744*t29934*t28883;
  t30066 = -1.*t28906*t29084*t29730;
  t30082 = t28906*t17823*t29970;
  t30085 = -1.*t29153*t29950;
  t30088 = -1.*t29970*t28899;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=(-1.*t28905*t28974 - 1.*t28899*t5774)*var2[1] + t28981*var2[2];
  p_output1[10]=(-1.*t28905*t28989 - 1.*t17823*t28906*t5774)*var2[1] + (t17823*t28905*t28906 - 1.*t28989*t5774)*var2[2];
  p_output1[11]=(-1.*t28905*t29024 - 1.*t29015*t5774)*var2[1] + t29032*var2[2];
  p_output1[12]=t28974*var2[0] - 1.*t29043*t5774*var2[1] + t28905*t29043*var2[2] + (t29057*(-1.*t28989*t29122 - 1.*t28989*t29126 - 1.*t29131*t29138 - 1.*t29138*t29144) + t29024*t29157 + t29131*(t29024*t29122 + t29024*t29126 + t29057*t29138 + t29138*t29162) + t28989*t29175)*var2[3];
  p_output1[13]=t28989*var2[0] - 1.*t29144*t5774*var2[1] + t28905*t29144*var2[2] + ((-1.*t29024*t29122 - 1.*t29024*t29126 - 1.*t29057*t29138 - 1.*t29138*t29162)*t29186 + t29057*(t28974*t29122 + t28974*t29126 + t29043*t29138 + t29138*t29186) + t29024*t29198 + t28974*t29214)*var2[3];
  p_output1[14]=t29024*var2[0] - 1.*t29162*t5774*var2[1] + t28905*t29162*var2[2] + ((t28989*t29122 + t28989*t29126 + t29131*t29138 + t29138*t29144)*t29186 + t29131*(-1.*t28974*t29122 - 1.*t28974*t29126 - 1.*t29043*t29138 - 1.*t29138*t29186) + t28974*t29235 + t28989*t29246)*var2[3];
  p_output1[15]=t28910*t29253*var2[0] + (t28905*t28972 + t28968*t29253*t5774)*var2[1] + (-1.*t28905*t28968*t29253 + t28972*t5774)*var2[2] + (-1.*t17823*t28906*t28910*t29175 + t29057*(-1.*t17823*t28906*t29120 + t17823*t28906*t28910*t29126 - 1.*t17823*t28906*t28968*t29138 + t28968*t28989*t29282 - 1.*t28910*t29131*t29282 + t29284) + t28910*t29157*t29307 + t29131*(-1.*t28968*t29024*t29282 + t28910*t29057*t29282 + t28910*t29126*t29307 - 1.*t28968*t29138*t29307 + t29310 + t29312))*var2[3] + (t29022*t29278 + t29015*(t28894*t28906*t29282 + t29284) - 1.*t28894*t28906*t29292 + t17823*t28906*(t29022*t29282 + t29120*t29307 + t29310 + t29312))*var2[4];
  p_output1[16]=-1.*t17823*t28906*t28910*var2[0] + (-1.*t28894*t28905*t28906 - 1.*t17823*t28906*t28968*t5774)*var2[1] + (t17823*t28905*t28906*t28968 - 1.*t28894*t28906*t5774)*var2[2] + (t28910*t29214*t29253 + t28910*t29198*t29307 + t29057*(t28910*t29126*t29253 - 1.*t28968*t29138*t29253 - 1.*t28968*t28974*t29282 + t28910*t29186*t29282 + t29367 + t29369) + t29186*(t28968*t29024*t29282 - 1.*t28910*t29057*t29282 - 1.*t28910*t29126*t29307 + t28968*t29138*t29307 + t29384 + t29386))*var2[3] + (t29015*(t29120*t29253 + t28972*t29282 + t29367 + t29369) + t29022*t29374 + t28972*t29380 + t28899*(-1.*t29022*t29282 - 1.*t29120*t29307 + t29384 + t29386))*var2[4];
  p_output1[17]=t28910*t29307*var2[0] + (t28905*t29022 + t28968*t29307*t5774)*var2[1] + (-1.*t28905*t28968*t29307 + t29022*t5774)*var2[2] + (-1.*t17823*t28906*t28910*t29246 + t28910*t29235*t29253 + t29186*(t17823*t28906*t29120 - 1.*t17823*t28906*t28910*t29126 + t17823*t28906*t28968*t29138 - 1.*t28968*t28989*t29282 + t28910*t29131*t29282 + t29424) + t29131*(-1.*t28910*t29126*t29253 + t28968*t29138*t29253 + t28968*t28974*t29282 - 1.*t28910*t29186*t29282 + t29429 + t29431))*var2[3] + (t28972*t29420 + t28899*(-1.*t28894*t28906*t29282 + t29424) + t17823*t28906*(-1.*t29120*t29253 - 1.*t28972*t29282 + t29429 + t29431) - 1.*t28894*t28906*t29436)*var2[4];
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=t29521*var2[0] + (-1.*t17823*t28883*t28905*t28906 - 1.*t29526*t5774)*var2[1] + (t28905*t29526 - 1.*t17823*t28883*t28906*t5774)*var2[2] + (t29157*t29562 + t29175*t29575 + t29057*(t29542 + t29546 - 1.*t29131*t29567 - 1.*t28989*t29571 - 1.*t29126*t29575 - 1.*t29138*t29579) + t29131*(t29550 + t29551 + t29126*t29562 + t29057*t29567 + t29024*t29571 + t29138*t29586))*var2[3] + (-1.*t17823*t28893*t28906*t29278 - 1.*t17823*t17892*t29292 + t29015*(-1.*t17892*t28894*t29120 + t29486 + t29490 + t29542 - 1.*t28906*t29484*t29543 + t29546) + t17823*t28906*(t28893*t28894*t28906*t29120 - 1.*t28894*t29022*t29484 + t29506 + t29508 + t29550 + t29551))*var2[4] + (-1.*t17892*t28893*t29468 + t28893*t28906*(t17892*t29115 - 1.*t28906*t29484 + t29486 + t29490) + t28906*(t29287 + t29500 + t29501) + t17892*(-1.*t28893*t28906*t29115 - 1.*t17892*t28893*t29484 + t29506 + t29508))*var2[5];
  p_output1[46]=t29575*var2[0] + (-1.*t17823*t17892*t28905 - 1.*t29579*t5774)*var2[1] + (t28905*t29579 - 1.*t17823*t17892*t5774)*var2[2] + (t29214*t29521 + t29198*t29562 + t29057*(t29126*t29521 + t29138*t29526 + t29186*t29567 + t28974*t29571 + t29633 + t29635) + t29186*(-1.*t29126*t29562 - 1.*t29057*t29567 - 1.*t29024*t29571 - 1.*t29138*t29586 + t29640 + t29641))*var2[3] + (-1.*t17823*t28893*t28906*t29374 - 1.*t17823*t28883*t28906*t29380 + t29015*(t28883*t28894*t28906*t29120 - 1.*t28894*t28972*t29484 + t29599 + t29601 + t29633 + t29635) + t28899*(-1.*t28893*t28894*t28906*t29120 + t28894*t29022*t29484 + t29609 + t29612 + t29640 + t29641))*var2[4] + (t28893*t28906*(-1.*t28883*t28906*t29115 - 1.*t17892*t28883*t29484 + t29599 + t29601) - 1.*t17892*t28883*t29606 + t28883*t28906*(t28893*t28906*t29115 + t17892*t28893*t29484 + t29609 + t29612) - 1.*t17892*t28893*t29619)*var2[5];
  p_output1[47]=t29562*var2[0] + (-1.*t17823*t28893*t28905*t28906 - 1.*t29586*t5774)*var2[1] + (t28905*t29586 - 1.*t17823*t28893*t28906*t5774)*var2[2] + (t29235*t29521 + t29246*t29575 + t29186*(t29131*t29567 + t28989*t29571 + t29126*t29575 + t29138*t29579 + t29696 + t29699) + t29131*(-1.*t29126*t29521 - 1.*t29138*t29526 - 1.*t29186*t29567 - 1.*t28974*t29571 + t29703 + t29705))*var2[3] + (-1.*t17823*t28883*t28906*t29420 - 1.*t17823*t17892*t29436 + t28899*(t17892*t28894*t29120 + t28906*t29484*t29543 + t29669 + t29671 + t29696 + t29699) + t17823*t28906*(-1.*t28883*t28894*t28906*t29120 + t28894*t28972*t29484 + t29675 + t29677 + t29703 + t29705))*var2[4] + (-1.*t17892*t28883*t29666 + t28883*t28906*(-1.*t17892*t29115 + t28906*t29484 + t29669 + t29671) + t17892*(t28883*t28906*t29115 + t17892*t28883*t29484 + t29675 + t29677) + t28906*(t29434 + t29680 + t29681))*var2[5];
  p_output1[48]=t29057*var2[0] + t29032*var2[1] + (t28905*t29024 + t29015*t5774)*var2[2] + (t29157*t29788 + t29057*(t29772 - 1.*t29131*t29792 - 1.*t28989*t29796) + t29131*(t29775 + t29780 + t29126*t29788 + t29057*t29792 + t29024*t29796 + t29138*t29803))*var2[3] + (t29278*t29762 + t29015*(-1.*t17892*t28906*t29746 + t28894*t28906*t29767 + t29772) + t17823*t28906*(t29736 + t29747 + t29022*t29767 + t29775 + t29120*t29778 + t29780))*var2[4] + (t28906*t29010*t29468 + t17892*(-1.*t17892*t29010*t29115 + t29093*t29730 + t29736 + t29010*t29741 + t29747 + t28893*t29746*t29748))*var2[5] + (0.1575*t28893 + 0.2255*t29730)*var2[15];
  p_output1[49]=(t29057*t29214 + t29198*t29788 + t29057*(t29172 + t29173 + t29174 + t29186*t29792 + t28974*t29796 + t29848) + t29186*(-1.*t29126*t29788 - 1.*t29057*t29792 - 1.*t29024*t29796 - 1.*t29138*t29803 + t29851 + t29853))*var2[3] + (t29015*t29380 + t29374*t29762 + t29015*(t29172 + t29287 + t29291 + t28972*t29767 + t29822 + t29848) + t28899*(-1.*t29022*t29767 - 1.*t29120*t29778 + t29814 + t29818 + t29851 + t29853))*var2[4] + (t28893*t28906*t29606 + t28906*t29010*t29619 + t28883*t28906*(t17892*t29010*t29115 - 1.*t28893*t29746*t29748 + t29814 + t29816 + t29817 + t29818) + t28893*t28906*(t29287 + t29500 + t29501 + t28883*t29746*t29748 + t29822 + t29824))*var2[5] + (t28893*(-1.*t29010*t29081 - 1.*t28893*t29746 + t29816 + t29817) + t29010*(t28893*t29081 + t29500 + t28883*t29746 + t29824) + t29730*t29830 + t29010*t29837)*var2[15];
  p_output1[50]=t29788*var2[0] + (t28905*t29762 - 1.*t29803*t5774)*var2[1] + (t28905*t29803 + t29762*t5774)*var2[2] + (t29057*t29235 + t29186*(t29131*t29792 + t28989*t29796 + t29895) + t29131*(t29211 + t29212 + t29213 - 1.*t29186*t29792 - 1.*t28974*t29796 + t29899))*var2[3] + (t29015*t29420 + t28899*(t17892*t28906*t29746 - 1.*t28894*t28906*t29767 + t29895) + t17823*t28906*(t29211 + t29377 + t29378 - 1.*t28972*t29767 + t29876 + t29899))*var2[4] + (t28893*t28906*t29666 + t17892*(t29377 + t29604 + t29605 - 1.*t28893*t29741 - 1.*t28883*t29746*t29748 + t29876))*var2[5] - 0.068*t29010*var2[15];
  p_output1[51]=t29946*var2[0] + (t28905*t29950 - 1.*t29954*t5774)*var2[1] + (t28905*t29954 + t29950*t5774)*var2[2] + (t29157*t29186 + t29057*(t29971 - 1.*t29131*t29983 - 1.*t28989*t29987) + t29131*(t29192 + t29195 + t29196 + t29974 + t29057*t29983 + t29024*t29987))*var2[3] + (t28899*t29278 + t29015*(-1.*t17892*t28906*t29934 + t28894*t28906*t29966 + t29971) + t17823*t28906*(t29192 + t29372 + t29373 + t29935 + t29022*t29966 + t29974))*var2[4] + (t28883*t28906*t29468 + t17892*(t29372 + t29617 + t29618 + t29010*t29930 + t28893*t29748*t29934 + t29935))*var2[5] + (0.2255*t28893 + 0.1575*t29730)*var2[15] + (-0.325*t28836 - 1.*t28836*t29076 - 1.*t28836*t29920)*var2[16];
  p_output1[52]=(t29186*t29198 + t29214*t29946 + t29057*(t29126*t29946 + t29138*t29954 + t29186*t29983 + t28974*t29987 + t30028 + t30031) + t29186*(t29243 + t29244 + t29245 - 1.*t29057*t29983 - 1.*t29024*t29987 + t30035))*var2[3] + (t28899*t29374 + t29380*t29950 + t29015*(t29120*t29944 + t28972*t29966 + t30006 + t30008 + t30028 + t30031) + t28899*(t29243 + t29434 + t29435 - 1.*t29022*t29966 + t30001 + t30035))*var2[4] + (t28883*t28906*t29619 + t28906*t29606*t29730 + t28883*t28906*(t29434 + t29680 + t29681 - 1.*t28893*t29748*t29934 + t30000 + t30001) + t28893*t28906*(-1.*t17892*t29115*t29730 + t28883*t29748*t29934 + t30005 + t30006 + t30008 + t30010))*var2[5] + (t28893*t29830 + t28883*t29837 + t28893*(-1.*t28883*t29081 + t29681 - 1.*t28893*t29934 + t30000) + t29010*(t29081*t29730 + t28883*t29934 + t30005 + t30010))*var2[15];
  p_output1[53]=t29186*var2[0] + t28981*var2[1] + (t28905*t28974 + t28899*t5774)*var2[2] + (t29235*t29946 + t29186*(t29131*t29983 + t28989*t29987 + t30082) + t29131*(-1.*t29126*t29946 - 1.*t29138*t29954 - 1.*t29186*t29983 - 1.*t28974*t29987 + t30085 + t30088))*var2[3] + (t29420*t29950 + t28899*(t17892*t28906*t29934 - 1.*t28894*t28906*t29966 + t30082) + t17823*t28906*(-1.*t29120*t29944 - 1.*t28972*t29966 + t30064 + t30066 + t30085 + t30088))*var2[4] + (t28906*t29666*t29730 + t17892*(-1.*t28883*t29093 + t17892*t29115*t29730 - 1.*t28893*t29930 - 1.*t28883*t29748*t29934 + t30064 + t30066))*var2[5] - 0.068*t28883*var2[15] + (-0.325*t28871 - 1.*t28871*t29076 - 1.*t28871*t29920)*var2[16];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 18, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "dJh_RrFoot_ParallelStance.hh"

namespace SymFunction
{

void dJh_RrFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
