/*
 * Automatically Generated from Mathematica.
 * Tue 7 Jun 2022 10:40:12 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t26446;
  double t26425;
  double t26426;
  double t26458;
  double t26441;
  double t26667;
  double t26668;
  double t24686;
  double t26670;
  double t26671;
  double t26673;
  double t26421;
  double t26674;
  double t26678;
  double t26669;
  double t26675;
  double t26676;
  double t6787;
  double t26879;
  double t26886;
  double t26887;
  double t26888;
  double t26892;
  double t26894;
  double t26895;
  double t26896;
  double t26898;
  double t26923;
  double t26928;
  double t26930;
  double t26949;
  double t27135;
  double t27136;
  double t26944;
  double t27137;
  double t27139;
  double t27144;
  double t27146;
  double t27147;
  double t27148;
  double t27149;
  double t27154;
  double t27169;
  double t27170;
  double t27171;
  double t27190;
  double t27191;
  double t27192;
  double t27194;
  double t27195;
  double t27198;
  double t27201;
  double t27204;
  double t27205;
  double t27189;
  double t27193;
  double t27206;
  double t27207;
  double t27187;
  double t27211;
  double t27212;
  double t27214;
  double t27215;
  double t27216;
  double t27217;
  double t27218;
  double t27219;
  double t27220;
  double t27221;
  double t27223;
  double t27224;
  double t27225;
  double t27226;
  double t27227;
  double t27228;
  double t27229;
  double t27248;
  double t27249;
  double t27368;
  double t27245;
  double t27246;
  double t27247;
  double t27237;
  double t27239;
  double t27240;
  double t27181;
  double t27182;
  double t27186;
  double t27213;
  double t27232;
  double t27235;
  double t27385;
  double t27389;
  double t27390;
  double t27371;
  double t27373;
  double t27379;
  double t27430;
  double t27431;
  double t27432;
  double t27397;
  double t27398;
  double t27399;
  double t27576;
  double t27577;
  double t27578;
  double t27391;
  double t27408;
  double t27596;
  double t27597;
  double t27598;
  double t27600;
  double t27607;
  double t27608;
  double t27609;
  double t27392;
  double t27394;
  double t27395;
  double t27611;
  double t27613;
  double t27409;
  double t27412;
  double t27417;
  double t27443;
  double t27459;
  double t27646;
  double t27648;
  double t27444;
  double t27445;
  double t27450;
  double t27660;
  double t27662;
  double t27460;
  double t27461;
  double t27463;
  double t27544;
  double t27562;
  double t27698;
  double t27545;
  double t27546;
  double t27547;
  double t27702;
  double t27704;
  double t27563;
  double t27564;
  double t27571;
  double t27592;
  double t27603;
  double t27734;
  double t27735;
  double t27736;
  double t27740;
  double t27741;
  double t27762;
  double t27763;
  double t27764;
  double t27593;
  double t27594;
  double t27738;
  double t27742;
  double t27750;
  double t27752;
  double t27604;
  double t27605;
  double t27773;
  double t27774;
  double t27778;
  double t27782;
  double t27783;
  double t27790;
  double t27791;
  double t27792;
  double t27794;
  double t27795;
  double t27796;
  double t27798;
  double t27799;
  double t27800;
  double t27802;
  double t27803;
  double t27804;
  double t27655;
  double t27651;
  double t27806;
  double t27807;
  double t27808;
  double t27826;
  double t27828;
  double t27652;
  double t27653;
  double t27836;
  double t27838;
  double t27656;
  double t27657;
  double t27857;
  double t27859;
  double t27757;
  double t27758;
  double t27759;
  double t27864;
  double t27865;
  double t27813;
  double t27814;
  double t27815;
  double t27693;
  double t27707;
  double t27694;
  double t27695;
  double t27893;
  double t27895;
  double t27775;
  double t27899;
  double t27901;
  double t27708;
  double t27709;
  double t27920;
  double t27923;
  double t27927;
  double t27929;
  double t27731;
  double t27732;
  double t27952;
  double t27953;
  double t27954;
  double t27969;
  double t27970;
  double t27164;
  double t27165;
  double t27166;
  double t27962;
  double t27963;
  double t27964;
  double t27965;
  double t27960;
  double t27968;
  double t27971;
  double t27993;
  double t27994;
  double t27995;
  double t27984;
  double t27985;
  double t27986;
  double t27989;
  double t27990;
  double t27991;
  double t28000;
  double t28001;
  double t28002;
  double t27996;
  double t27999;
  double t28004;
  double t28010;
  double t28011;
  double t28012;
  double t28014;
  double t28015;
  double t28016;
  double t28018;
  double t28019;
  double t28020;
  double t27831;
  double t27832;
  double t27833;
  double t27841;
  double t27842;
  double t27843;
  double t27972;
  double t27745;
  double t27746;
  double t28040;
  double t28041;
  double t28048;
  double t28046;
  double t28038;
  double t28042;
  double t28072;
  double t28075;
  double t28077;
  double t28025;
  double t28026;
  double t28027;
  double t27889;
  double t27890;
  double t28100;
  double t28119;
  double t28123;
  double t28142;
  double t28143;
  double t28144;
  double t28156;
  double t28157;
  double t28158;
  double t28166;
  double t28167;
  double t28168;
  double t28172;
  double t28173;
  double t28174;
  double t28176;
  double t28177;
  double t28178;
  double t28153;
  double t28154;
  double t28159;
  double t28192;
  double t28193;
  double t28194;
  double t28188;
  double t28189;
  double t28190;
  double t28195;
  double t28198;
  double t28205;
  double t28206;
  double t28207;
  double t28209;
  double t28210;
  double t28211;
  double t27904;
  double t27905;
  double t28053;
  double t28054;
  double t28060;
  double t28061;
  double t28224;
  double t28229;
  double t28234;
  double t28230;
  double t28232;
  double t28225;
  double t28252;
  double t28255;
  double t28165;
  double t28169;
  double t28170;
  double t28259;
  double t26905;
  double t26912;
  double t26913;
  double t28288;
  double t28290;
  double t28306;
  double t28309;
  double t28312;
  t26446 = Cos(var1[13]);
  t26425 = Cos(var1[14]);
  t26426 = Sin(var1[13]);
  t26458 = Sin(var1[14]);
  t26441 = t26425*t26426;
  t26667 = -1.*t26446*t26458;
  t26668 = t26441 + t26667;
  t24686 = Cos(var1[5]);
  t26670 = t26446*t26425;
  t26671 = t26426*t26458;
  t26673 = t26670 + t26671;
  t26421 = Sin(var1[12]);
  t26674 = Sin(var1[5]);
  t26678 = Cos(var1[3]);
  t26669 = -1.*t24686*t26421*t26668;
  t26675 = t26673*t26674;
  t26676 = t26669 + t26675;
  t6787 = Sin(var1[3]);
  t26879 = Cos(var1[12]);
  t26886 = Cos(var1[4]);
  t26887 = t26879*t26886*t26668;
  t26888 = Sin(var1[4]);
  t26892 = t24686*t26673;
  t26894 = t26421*t26668*t26674;
  t26895 = t26892 + t26894;
  t26896 = -1.*t26888*t26895;
  t26898 = t26887 + t26896;
  t26923 = t26886*t26421;
  t26928 = t26879*t26888*t26674;
  t26930 = t26923 + t26928;
  t26949 = -1.*t26425*t26426;
  t27135 = t26446*t26458;
  t27136 = t26949 + t27135;
  t26944 = -1.*t24686*t26421*t26673;
  t27137 = t27136*t26674;
  t27139 = t26944 + t27137;
  t27144 = t26879*t26886*t26673;
  t27146 = t24686*t27136;
  t27147 = t26421*t26673*t26674;
  t27148 = t27146 + t27147;
  t27149 = -1.*t26888*t27148;
  t27154 = t27144 + t27149;
  t27169 = -1.*t26879*t26668*t26888;
  t27170 = -1.*t26886*t26895;
  t27171 = t27169 + t27170;
  t27190 = -0.0641*t26425;
  t27191 = -0.28*t26458;
  t27192 = t27190 + t27191;
  t27194 = -1.*t26425;
  t27195 = 1. + t27194;
  t27198 = 0.075*t27195;
  t27201 = 0.355*t26425;
  t27204 = -0.0641*t26458;
  t27205 = t27198 + t27201 + t27204;
  t27189 = -0.325*t26426;
  t27193 = t26446*t27192;
  t27206 = t26426*t27205;
  t27207 = t27189 + t27193 + t27206;
  t27187 = -0.068*t26421;
  t27211 = t26879*t27207;
  t27212 = t27187 + t27211;
  t27214 = -1.*t26446;
  t27215 = 1. + t27214;
  t27216 = 0.325*t27215;
  t27217 = -1.*t26426*t27192;
  t27218 = t26446*t27205;
  t27219 = t27216 + t27217 + t27218;
  t27220 = t24686*t27219;
  t27221 = -1.*t26879;
  t27223 = 1. + t27221;
  t27224 = -0.1575*t27223;
  t27225 = -0.2255*t26879;
  t27226 = -1.*t26421*t27207;
  t27227 = t27224 + t27225 + t27226;
  t27228 = -1.*t27227*t26674;
  t27229 = t27220 + t27228;
  t27248 = t26886*t27212;
  t27249 = -1.*t26888*t27229;
  t27368 = t27248 + t27249;
  t27245 = t26421*t26888;
  t27246 = -1.*t26879*t26886*t26674;
  t27247 = t27245 + t27246;
  t27237 = t27212*t26888;
  t27239 = t26886*t27229;
  t27240 = t27237 + t27239;
  t27181 = t26879*t26673*t26888;
  t27182 = t26886*t27148;
  t27186 = t27181 + t27182;
  t27213 = -1.*t27212*t26888;
  t27232 = -1.*t26886*t27229;
  t27235 = t27213 + t27232;
  t27385 = t24686*t27227;
  t27389 = t27219*t26674;
  t27390 = t27385 + t27389;
  t27371 = -1.*t26421*t26888;
  t27373 = t26879*t26886*t26674;
  t27379 = t27371 + t27373;
  t27430 = t26879*t26668*t26888;
  t27431 = t26886*t26895;
  t27432 = t27430 + t27431;
  t27397 = -1.*t26879*t26673*t26888;
  t27398 = -1.*t26886*t27148;
  t27399 = t27397 + t27398;
  t27576 = t24686*t26421*t26668;
  t27577 = -1.*t26673*t26674;
  t27578 = t27576 + t27577;
  t27391 = -1.*t26879*t24686*t27390;
  t27408 = t27390*t27139;
  t27596 = -1.*t24686*t27227;
  t27597 = -1.*t27219*t26674;
  t27598 = t27596 + t27597;
  t27600 = t26879*t26674*t27390;
  t27607 = t24686*t26421*t26673;
  t27608 = -1.*t27136*t26674;
  t27609 = t27607 + t27608;
  t27392 = -1.*t27247*t27240;
  t27394 = -1.*t26930*t27368;
  t27395 = t27391 + t27392 + t27394;
  t27611 = t27229*t27139;
  t27613 = t27390*t27148;
  t27409 = t27240*t27186;
  t27412 = t27368*t27154;
  t27417 = t27408 + t27409 + t27412;
  t27443 = t27390*t26676;
  t27459 = -1.*t27390*t27139;
  t27646 = t27390*t26895;
  t27648 = t27229*t26676;
  t27444 = t27240*t27432;
  t27445 = t27368*t26898;
  t27450 = t27443 + t27444 + t27445;
  t27660 = -1.*t27229*t27139;
  t27662 = -1.*t27390*t27148;
  t27460 = -1.*t27240*t27186;
  t27461 = -1.*t27368*t27154;
  t27463 = t27459 + t27460 + t27461;
  t27544 = t26879*t24686*t27390;
  t27562 = -1.*t27390*t26676;
  t27698 = -1.*t26879*t26674*t27390;
  t27545 = t27247*t27240;
  t27546 = t26930*t27368;
  t27547 = t27544 + t27545 + t27546;
  t27702 = -1.*t27390*t26895;
  t27704 = -1.*t27229*t26676;
  t27563 = -1.*t27240*t27432;
  t27564 = -1.*t27368*t26898;
  t27571 = t27562 + t27563 + t27564;
  t27592 = -1.*t26421*t27212;
  t27603 = t26879*t27212*t26673;
  t27734 = 0.068*t26421;
  t27735 = -1.*t26879*t27207;
  t27736 = t27734 + t27735;
  t27740 = -0.068*t26879;
  t27741 = t27740 + t27226;
  t27762 = -1.*t26886*t26421*t26668;
  t27763 = -1.*t26879*t26668*t26888*t26674;
  t27764 = t27762 + t27763;
  t27593 = t26879*t26674*t27229;
  t27594 = t27592 + t27593 + t27391;
  t27738 = -1.*t26879*t27212;
  t27742 = -1.*t26421*t27741;
  t27750 = -1.*t26421*t27212*t26673;
  t27752 = t26879*t27741*t26673;
  t27604 = t27229*t27148;
  t27605 = t27603 + t27408 + t27604;
  t27773 = Power(t24686,2);
  t27774 = -1.*t26879*t27773*t27736;
  t27778 = t24686*t26421*t27390;
  t27782 = -1.*t26879*t24686*t26673*t27390;
  t27783 = t24686*t27736*t27139;
  t27790 = -1.*t26421*t26673*t26888;
  t27791 = t26879*t26886*t26673*t26674;
  t27792 = t27790 + t27791;
  t27794 = t27741*t26888;
  t27795 = -1.*t26886*t27736*t26674;
  t27796 = t27794 + t27795;
  t27798 = t26886*t27741;
  t27799 = t27736*t26888*t26674;
  t27800 = t27798 + t27799;
  t27802 = t26879*t26888;
  t27803 = t26886*t26421*t26674;
  t27804 = t27802 + t27803;
  t27655 = -1.*t26879*t27212*t26673;
  t27651 = t26879*t27212*t26668;
  t27806 = t26879*t26886;
  t27807 = -1.*t26421*t26888*t26674;
  t27808 = t27806 + t27807;
  t27826 = -1.*t26421*t27212*t26668;
  t27828 = t26879*t27741*t26668;
  t27652 = t27229*t26895;
  t27653 = t27651 + t27652 + t27443;
  t27836 = t26421*t27212*t26673;
  t27838 = -1.*t26879*t27741*t26673;
  t27656 = -1.*t27229*t27148;
  t27657 = t27655 + t27459 + t27656;
  t27857 = -1.*t26879*t24686*t26668*t27390;
  t27859 = t24686*t27736*t26676;
  t27757 = -1.*t26421*t26668*t26888;
  t27758 = t26879*t26886*t26668*t26674;
  t27759 = t27757 + t27758;
  t27864 = t26879*t24686*t26673*t27390;
  t27865 = -1.*t24686*t27736*t27139;
  t27813 = -1.*t26886*t26421*t26673;
  t27814 = -1.*t26879*t26673*t26888*t26674;
  t27815 = t27813 + t27814;
  t27693 = t26421*t27212;
  t27707 = -1.*t26879*t27212*t26668;
  t27694 = -1.*t26879*t26674*t27229;
  t27695 = t27693 + t27694 + t27544;
  t27893 = t26879*t27212;
  t27895 = t26421*t27741;
  t27775 = Power(t26674,2);
  t27899 = t26421*t27212*t26668;
  t27901 = -1.*t26879*t27741*t26668;
  t27708 = -1.*t27229*t26895;
  t27709 = t27707 + t27708 + t27562;
  t27920 = t26879*t27773*t27736;
  t27923 = -1.*t24686*t26421*t27390;
  t27927 = t26879*t24686*t26668*t27390;
  t27929 = -1.*t24686*t27736*t26676;
  t27731 = -1.*t26879*t27227;
  t27732 = t27592 + t27731;
  t27952 = -1.*t26446*t26425;
  t27953 = -1.*t26426*t26458;
  t27954 = t27952 + t27953;
  t27969 = -0.325*t26446;
  t27970 = t27969 + t27217 + t27218;
  t27164 = t26678*t27139;
  t27165 = -1.*t6787*t27154;
  t27166 = t27164 + t27165;
  t27962 = 0.325*t26426;
  t27963 = -1.*t26446*t27192;
  t27964 = -1.*t26426*t27205;
  t27965 = t27962 + t27963 + t27964;
  t27960 = t26879*t27212*t27136;
  t27968 = Power(t26879,2);
  t27971 = t27968*t27970*t26673;
  t27993 = -1.*t24686*t26421*t27970;
  t27994 = t27965*t26674;
  t27995 = t27993 + t27994;
  t27984 = -1.*t24686*t26421*t27136;
  t27985 = t27954*t26674;
  t27986 = t27984 + t27985;
  t27989 = t24686*t27965;
  t27990 = t26421*t27970*t26674;
  t27991 = t27989 + t27990;
  t28000 = t24686*t27954;
  t28001 = t26421*t27136*t26674;
  t28002 = t28000 + t28001;
  t27996 = -1.*t26879*t24686*t27995;
  t27999 = t27995*t27139;
  t28004 = t27390*t27986;
  t28010 = t26879*t27136*t26888;
  t28011 = t26886*t28002;
  t28012 = t28010 + t28011;
  t28014 = t26879*t27970*t26888;
  t28015 = t26886*t27991;
  t28016 = t28014 + t28015;
  t28018 = t26879*t26886*t27970;
  t28019 = -1.*t26888*t27991;
  t28020 = t28018 + t28019;
  t27831 = -1.*t27219*t27136;
  t27832 = t26421*t27227*t26673;
  t27833 = t27831 + t27655 + t27832;
  t27841 = -1.*t26421*t27227*t26668;
  t27842 = t27219*t26673;
  t27843 = t27651 + t27841 + t27842;
  t27972 = Power(t26421,2);
  t27745 = t27219*t27136;
  t27746 = -1.*t26421*t27227*t26673;
  t28040 = -1.*t27965*t27136;
  t28041 = -1.*t27219*t27954;
  t28048 = t27965*t26673;
  t28046 = t27968*t27970*t26668;
  t28038 = -1.*t26879*t27212*t27136;
  t28042 = -1.*t27968*t27970*t26673;
  t28072 = t27995*t26676;
  t28075 = -1.*t27995*t27139;
  t28077 = -1.*t27390*t27986;
  t28025 = t26879*t26886*t27136;
  t28026 = -1.*t26888*t28002;
  t28027 = t28025 + t28026;
  t27889 = t26879*t27227;
  t27890 = t27693 + t27889;
  t28100 = -1.*t27968*t27970*t26668;
  t28119 = t26879*t24686*t27995;
  t28123 = -1.*t27995*t26676;
  t28142 = -0.28*t26425;
  t28143 = 0.0641*t26458;
  t28144 = t28142 + t28143;
  t28156 = t26426*t27192;
  t28157 = t26446*t28144;
  t28158 = t28156 + t28157;
  t28166 = t24686*t26668;
  t28167 = t26421*t27954*t26674;
  t28168 = t28166 + t28167;
  t28172 = -1.*t24686*t26421*t27954;
  t28173 = t26668*t26674;
  t28174 = t28172 + t28173;
  t28176 = t26879*t26886*t27954;
  t28177 = -1.*t26888*t28168;
  t28178 = t28176 + t28177;
  t28153 = -1.*t26426*t28144;
  t28154 = t27193 + t28153;
  t28159 = t27968*t28158*t26673;
  t28192 = -1.*t24686*t26421*t28158;
  t28193 = t28154*t26674;
  t28194 = t28192 + t28193;
  t28188 = t24686*t28154;
  t28189 = t26421*t28158*t26674;
  t28190 = t28188 + t28189;
  t28195 = -1.*t26879*t24686*t28194;
  t28198 = t28194*t27139;
  t28205 = t26879*t28158*t26888;
  t28206 = t26886*t28190;
  t28207 = t28205 + t28206;
  t28209 = t26879*t26886*t28158;
  t28210 = -1.*t26888*t28190;
  t28211 = t28209 + t28210;
  t27904 = t26421*t27227*t26668;
  t27905 = -1.*t27219*t26673;
  t28053 = t27207*t26668;
  t28054 = t28053 + t27842;
  t28060 = -1.*t27207*t26673;
  t28061 = t27831 + t28060;
  t28224 = -1.*t28154*t27136;
  t28229 = t27219*t26668;
  t28234 = t28154*t26673;
  t28230 = t27968*t28158*t26668;
  t28232 = t26879*t27212*t27954;
  t28225 = -1.*t27968*t28158*t26673;
  t28252 = t27390*t28174;
  t28255 = t28194*t26676;
  t28165 = t26879*t27954*t26888;
  t28169 = t26886*t28168;
  t28170 = t28165 + t28169;
  t28259 = -1.*t28194*t27139;
  t26905 = t26678*t26676;
  t26912 = -1.*t6787*t26898;
  t26913 = t26905 + t26912;
  t28288 = -1.*t27968*t28158*t26668;
  t28290 = -1.*t26879*t27212*t27954;
  t28306 = t26879*t24686*t28194;
  t28309 = -1.*t27390*t28174;
  t28312 = -1.*t28194*t26676;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=(-1.*t26678*t26898 - 1.*t26676*t6787)*var2[1] + t26913*var2[2];
  p_output1[10]=(-1.*t26678*t26930 - 1.*t24686*t26879*t6787)*var2[1] + (t24686*t26678*t26879 - 1.*t26930*t6787)*var2[2];
  p_output1[11]=(-1.*t26678*t27154 - 1.*t27139*t6787)*var2[1] + t27166*var2[2];
  p_output1[12]=t26898*var2[0] - 1.*t27171*t6787*var2[1] + t26678*t27171*var2[2] + (t27186*(-1.*t26930*t27235 - 1.*t26930*t27240 - 1.*t27247*t27368 - 1.*t27368*t27379) + t27154*t27395 + t27247*(t27154*t27235 + t27154*t27240 + t27186*t27368 + t27368*t27399) + t26930*t27417)*var2[3];
  p_output1[13]=t26930*var2[0] - 1.*t27379*t6787*var2[1] + t26678*t27379*var2[2] + ((-1.*t27154*t27235 - 1.*t27154*t27240 - 1.*t27186*t27368 - 1.*t27368*t27399)*t27432 + t27186*(t26898*t27235 + t26898*t27240 + t27171*t27368 + t27368*t27432) + t27154*t27450 + t26898*t27463)*var2[3];
  p_output1[14]=t27154*var2[0] - 1.*t27399*t6787*var2[1] + t26678*t27399*var2[2] + ((t26930*t27235 + t26930*t27240 + t27247*t27368 + t27368*t27379)*t27432 + t27247*(-1.*t26898*t27235 - 1.*t26898*t27240 - 1.*t27171*t27368 - 1.*t27368*t27432) + t26898*t27547 + t26930*t27571)*var2[3];
  p_output1[15]=t26886*t27578*var2[0] + (t26678*t26895 + t26888*t27578*t6787)*var2[1] + (-1.*t26678*t26888*t27578 + t26895*t6787)*var2[2] + (-1.*t24686*t26879*t26886*t27417 + t27186*(-1.*t24686*t26879*t27229 + t24686*t26879*t26886*t27240 - 1.*t24686*t26879*t26888*t27368 + t26888*t26930*t27598 - 1.*t26886*t27247*t27598 + t27600) + t26886*t27395*t27609 + t27247*(-1.*t26888*t27154*t27598 + t26886*t27186*t27598 + t26886*t27240*t27609 - 1.*t26888*t27368*t27609 + t27611 + t27613))*var2[3] + (t27148*t27594 + t27139*(t26674*t26879*t27598 + t27600) - 1.*t26674*t26879*t27605 + t24686*t26879*(t27148*t27598 + t27229*t27609 + t27611 + t27613))*var2[4];
  p_output1[16]=-1.*t24686*t26879*t26886*var2[0] + (-1.*t26674*t26678*t26879 - 1.*t24686*t26879*t26888*t6787)*var2[1] + (t24686*t26678*t26879*t26888 - 1.*t26674*t26879*t6787)*var2[2] + (t26886*t27463*t27578 + t26886*t27450*t27609 + t27186*(t26886*t27240*t27578 - 1.*t26888*t27368*t27578 - 1.*t26888*t26898*t27598 + t26886*t27432*t27598 + t27646 + t27648) + t27432*(t26888*t27154*t27598 - 1.*t26886*t27186*t27598 - 1.*t26886*t27240*t27609 + t26888*t27368*t27609 + t27660 + t27662))*var2[3] + (t27139*(t27229*t27578 + t26895*t27598 + t27646 + t27648) + t27148*t27653 + t26895*t27657 + t26676*(-1.*t27148*t27598 - 1.*t27229*t27609 + t27660 + t27662))*var2[4];
  p_output1[17]=t26886*t27609*var2[0] + (t26678*t27148 + t26888*t27609*t6787)*var2[1] + (-1.*t26678*t26888*t27609 + t27148*t6787)*var2[2] + (-1.*t24686*t26879*t26886*t27571 + t26886*t27547*t27578 + t27432*(t24686*t26879*t27229 - 1.*t24686*t26879*t26886*t27240 + t24686*t26879*t26888*t27368 - 1.*t26888*t26930*t27598 + t26886*t27247*t27598 + t27698) + t27247*(-1.*t26886*t27240*t27578 + t26888*t27368*t27578 + t26888*t26898*t27598 - 1.*t26886*t27432*t27598 + t27702 + t27704))*var2[3] + (t26895*t27695 + t26676*(-1.*t26674*t26879*t27598 + t27698) + t24686*t26879*(-1.*t27229*t27578 - 1.*t26895*t27598 + t27702 + t27704) - 1.*t26674*t26879*t27709)*var2[4];
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=t27759*var2[0] + (-1.*t24686*t26668*t26678*t26879 - 1.*t27764*t6787)*var2[1] + (t26678*t27764 - 1.*t24686*t26668*t26879*t6787)*var2[2] + (t27395*t27792 + t27417*t27804 + t27186*(t27774 + t27778 - 1.*t27247*t27796 - 1.*t26930*t27800 - 1.*t27240*t27804 - 1.*t27368*t27808) + t27247*(t27782 + t27783 + t27240*t27792 + t27186*t27796 + t27154*t27800 + t27368*t27815))*var2[3] + (-1.*t24686*t26673*t26879*t27594 - 1.*t24686*t26421*t27605 + t27139*(-1.*t26421*t26674*t27229 + t27738 + t27742 + t27774 - 1.*t26879*t27736*t27775 + t27778) + t24686*t26879*(t26673*t26674*t26879*t27229 - 1.*t26674*t27148*t27736 + t27750 + t27752 + t27782 + t27783))*var2[4] + (-1.*t26421*t26673*t27732 + t26673*t26879*(t26421*t27227 - 1.*t26879*t27736 + t27738 + t27742) + t26879*(t27603 + t27745 + t27746) + t26421*(-1.*t26673*t26879*t27227 - 1.*t26421*t26673*t27736 + t27750 + t27752))*var2[5];
  p_output1[37]=t27804*var2[0] + (-1.*t24686*t26421*t26678 - 1.*t27808*t6787)*var2[1] + (t26678*t27808 - 1.*t24686*t26421*t6787)*var2[2] + (t27463*t27759 + t27450*t27792 + t27186*(t27240*t27759 + t27368*t27764 + t27432*t27796 + t26898*t27800 + t27857 + t27859) + t27432*(-1.*t27240*t27792 - 1.*t27186*t27796 - 1.*t27154*t27800 - 1.*t27368*t27815 + t27864 + t27865))*var2[3] + (-1.*t24686*t26673*t26879*t27653 - 1.*t24686*t26668*t26879*t27657 + t27139*(t26668*t26674*t26879*t27229 - 1.*t26674*t26895*t27736 + t27826 + t27828 + t27857 + t27859) + t26676*(-1.*t26673*t26674*t26879*t27229 + t26674*t27148*t27736 + t27836 + t27838 + t27864 + t27865))*var2[4] + (t26673*t26879*(-1.*t26668*t26879*t27227 - 1.*t26421*t26668*t27736 + t27826 + t27828) - 1.*t26421*t26668*t27833 + t26668*t26879*(t26673*t26879*t27227 + t26421*t26673*t27736 + t27836 + t27838) - 1.*t26421*t26673*t27843)*var2[5];
  p_output1[38]=t27792*var2[0] + (-1.*t24686*t26673*t26678*t26879 - 1.*t27815*t6787)*var2[1] + (t26678*t27815 - 1.*t24686*t26673*t26879*t6787)*var2[2] + (t27547*t27759 + t27571*t27804 + t27432*(t27247*t27796 + t26930*t27800 + t27240*t27804 + t27368*t27808 + t27920 + t27923) + t27247*(-1.*t27240*t27759 - 1.*t27368*t27764 - 1.*t27432*t27796 - 1.*t26898*t27800 + t27927 + t27929))*var2[3] + (-1.*t24686*t26668*t26879*t27695 - 1.*t24686*t26421*t27709 + t26676*(t26421*t26674*t27229 + t26879*t27736*t27775 + t27893 + t27895 + t27920 + t27923) + t24686*t26879*(-1.*t26668*t26674*t26879*t27229 + t26674*t26895*t27736 + t27899 + t27901 + t27927 + t27929))*var2[4] + (-1.*t26421*t26668*t27890 + t26668*t26879*(-1.*t26421*t27227 + t26879*t27736 + t27893 + t27895) + t26421*(t26668*t26879*t27227 + t26421*t26668*t27736 + t27899 + t27901) + t26879*(t27707 + t27904 + t27905))*var2[5];
  p_output1[39]=t27186*var2[0] + t27166*var2[1] + (t26678*t27154 + t27139*t6787)*var2[2] + (t27395*t28012 + t27186*(t27996 - 1.*t27247*t28016 - 1.*t26930*t28020) + t27247*(t27999 + t28004 + t27240*t28012 + t27186*t28016 + t27154*t28020 + t27368*t28027))*var2[3] + (t27594*t27986 + t27139*(-1.*t26421*t26879*t27970 + t26674*t26879*t27991 + t27996) + t24686*t26879*(t27960 + t27971 + t27148*t27991 + t27999 + t27229*t28002 + t28004))*var2[4] + (t26879*t27136*t27732 + t26421*(-1.*t26421*t27136*t27227 + t27219*t27954 + t27960 + t27136*t27965 + t27971 + t26673*t27970*t27972))*var2[5] + (0.1575*t26673 + 0.2255*t27954)*var2[12];
  p_output1[40]=(t27186*t27463 + t27450*t28012 + t27186*(t27408 + t27409 + t27412 + t27432*t28016 + t26898*t28020 + t28072) + t27432*(-1.*t27240*t28012 - 1.*t27186*t28016 - 1.*t27154*t28020 - 1.*t27368*t28027 + t28075 + t28077))*var2[3] + (t27139*t27657 + t27653*t27986 + t27139*(t27408 + t27603 + t27604 + t26895*t27991 + t28046 + t28072) + t26676*(-1.*t27148*t27991 - 1.*t27229*t28002 + t28038 + t28042 + t28075 + t28077))*var2[4] + (t26673*t26879*t27833 + t26879*t27136*t27843 + t26668*t26879*(t26421*t27136*t27227 - 1.*t26673*t27970*t27972 + t28038 + t28040 + t28041 + t28042) + t26673*t26879*(t27603 + t27745 + t27746 + t26668*t27970*t27972 + t28046 + t28048))*var2[5] + (t26673*(-1.*t27136*t27207 - 1.*t26673*t27970 + t28040 + t28041) + t27136*(t26673*t27207 + t27745 + t26668*t27970 + t28048) + t27954*t28054 + t27136*t28061)*var2[12];
  p_output1[41]=t28012*var2[0] + (t26678*t27986 - 1.*t28027*t6787)*var2[1] + (t26678*t28027 + t27986*t6787)*var2[2] + (t27186*t27547 + t27432*(t27247*t28016 + t26930*t28020 + t28119) + t27247*(t27459 + t27460 + t27461 - 1.*t27432*t28016 - 1.*t26898*t28020 + t28123))*var2[3] + (t27139*t27695 + t26676*(t26421*t26879*t27970 - 1.*t26674*t26879*t27991 + t28119) + t24686*t26879*(t27459 + t27655 + t27656 - 1.*t26895*t27991 + t28100 + t28123))*var2[4] + (t26673*t26879*t27890 + t26421*(t27655 + t27831 + t27832 - 1.*t26673*t27965 - 1.*t26668*t27970*t27972 + t28100))*var2[5] - 0.068*t27136*var2[12];
  p_output1[42]=t28170*var2[0] + (t26678*t28174 - 1.*t28178*t6787)*var2[1] + (t26678*t28178 + t28174*t6787)*var2[2] + (t27395*t27432 + t27186*(t28195 - 1.*t27247*t28207 - 1.*t26930*t28211) + t27247*(t27443 + t27444 + t27445 + t28198 + t27186*t28207 + t27154*t28211))*var2[3] + (t26676*t27594 + t27139*(-1.*t26421*t26879*t28158 + t26674*t26879*t28190 + t28195) + t24686*t26879*(t27443 + t27651 + t27652 + t28159 + t27148*t28190 + t28198))*var2[4] + (t26668*t26879*t27732 + t26421*(t27651 + t27841 + t27842 + t27136*t28154 + t26673*t27972*t28158 + t28159))*var2[5] + (0.2255*t26673 + 0.1575*t27954)*var2[12] + (0.325*t26425 - 1.*t26425*t27205 - 1.*t26425*t28144)*var2[13];
  p_output1[43]=(t27432*t27450 + t27463*t28170 + t27186*(t27240*t28170 + t27368*t28178 + t27432*t28207 + t26898*t28211 + t28252 + t28255) + t27432*(t27562 + t27563 + t27564 - 1.*t27186*t28207 - 1.*t27154*t28211 + t28259))*var2[3] + (t26676*t27653 + t27657*t28174 + t27139*(t27229*t28168 + t26895*t28190 + t28230 + t28232 + t28252 + t28255) + t26676*(t27562 + t27707 + t27708 - 1.*t27148*t28190 + t28225 + t28259))*var2[4] + (t26668*t26879*t27843 + t26879*t27833*t27954 + t26668*t26879*(t27707 + t27904 + t27905 - 1.*t26673*t27972*t28158 + t28224 + t28225) + t26673*t26879*(-1.*t26421*t27227*t27954 + t26668*t27972*t28158 + t28229 + t28230 + t28232 + t28234))*var2[5] + (t26673*t28054 + t26668*t28061 + t26673*(-1.*t26668*t27207 + t27905 - 1.*t26673*t28158 + t28224) + t27136*(t27207*t27954 + t26668*t28158 + t28229 + t28234))*var2[12];
  p_output1[44]=t27432*var2[0] + t26913*var2[1] + (t26678*t26898 + t26676*t6787)*var2[2] + (t27547*t28170 + t27432*(t27247*t28207 + t26930*t28211 + t28306) + t27247*(-1.*t27240*t28170 - 1.*t27368*t28178 - 1.*t27432*t28207 - 1.*t26898*t28211 + t28309 + t28312))*var2[3] + (t27695*t28174 + t26676*(t26421*t26879*t28158 - 1.*t26674*t26879*t28190 + t28306) + t24686*t26879*(-1.*t27229*t28168 - 1.*t26895*t28190 + t28288 + t28290 + t28309 + t28312))*var2[4] + (t26879*t27890*t27954 + t26421*(-1.*t26668*t27219 + t26421*t27227*t27954 - 1.*t26673*t28154 - 1.*t26668*t27972*t28158 + t28288 + t28290))*var2[5] - 0.068*t26668*var2[12] + (0.325*t26458 - 1.*t26458*t27205 - 1.*t26458*t28144)*var2[13];
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 18, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "dJh_FrFoot_DiagonalStance.hh"

namespace SymFunction
{

void dJh_FrFoot_DiagonalStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
