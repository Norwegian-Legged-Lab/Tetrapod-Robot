/*
 * Automatically Generated from Mathematica.
 * Sat 28 May 2022 18:48:23 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t2648;
  double t2312;
  double t2321;
  double t2839;
  double t3161;
  double t3170;
  double t3217;
  double t460;
  double t3142;
  double t3393;
  double t3045;
  double t3519;
  double t4267;
  double t4310;
  double t4354;
  double t4414;
  double t3015;
  double t2570;
  double t2909;
  double t2938;
  double t7217;
  double t7259;
  double t7315;
  double t7979;
  double t7980;
  double t7995;
  double t7996;
  double t7359;
  double t7392;
  double t7401;
  double t8179;
  double t8192;
  double t8203;
  double t8210;
  double t3337;
  double t3645;
  double t3672;
  double t4643;
  double t4991;
  double t5111;
  double t14231;
  double t13364;
  double t14081;
  double t14483;
  double t15631;
  double t15805;
  double t15914;
  double t16000;
  double t15247;
  double t16189;
  double t16218;
  double t16242;
  double t16254;
  double t16276;
  double t16281;
  double t16335;
  double t14115;
  double t14643;
  double t14720;
  double t16782;
  double t16784;
  double t16868;
  double t16870;
  double t16419;
  double t16491;
  double t16516;
  double t16531;
  double t16537;
  double t16543;
  double t16921;
  double t16924;
  double t16932;
  double t16936;
  double t15968;
  double t16061;
  double t16103;
  double t2977;
  double t3779;
  double t4217;
  double t17058;
  double t17086;
  double t17179;
  double t17183;
  double t17186;
  double t5686;
  double t6750;
  double t7028;
  double t8000;
  double t8145;
  double t8148;
  double t7598;
  double t7661;
  double t7909;
  double t17600;
  double t17604;
  double t17617;
  double t17295;
  double t17297;
  double t17298;
  double t17698;
  double t17811;
  double t17812;
  double t17068;
  double t17077;
  double t17081;
  double t9069;
  double t9691;
  double t11434;
  double t15245;
  double t16141;
  double t16171;
  double t18034;
  double t18044;
  double t18050;
  double t16341;
  double t16350;
  double t16386;
  double t16871;
  double t16911;
  double t16920;
  double t16682;
  double t16708;
  double t16773;
  double t18136;
  double t18141;
  double t18145;
  double t18061;
  double t18062;
  double t18066;
  double t18269;
  double t18270;
  double t18271;
  double t17845;
  double t17849;
  double t17889;
  double t17033;
  double t17037;
  double t17038;
  double t17822;
  double t17828;
  double t17832;
  double t17104;
  double t17138;
  double t17142;
  double t18412;
  double t18493;
  double t18506;
  double t17191;
  double t17195;
  double t17198;
  double t17238;
  double t17255;
  double t17265;
  double t17575;
  double t17579;
  double t17585;
  double t19092;
  double t19115;
  double t19153;
  double t17307;
  double t17384;
  double t17456;
  double t17622;
  double t17637;
  double t17643;
  double t19209;
  double t19228;
  double t19245;
  double t17833;
  double t17834;
  double t17835;
  double t17839;
  double t17840;
  double t17841;
  double t18272;
  double t18273;
  double t18274;
  double t17961;
  double t17981;
  double t17997;
  double t21517;
  double t21534;
  double t21622;
  double t18051;
  double t18052;
  double t18053;
  double t18056;
  double t18057;
  double t18058;
  double t18113;
  double t18116;
  double t18117;
  double t22104;
  double t22110;
  double t22248;
  double t18067;
  double t18072;
  double t18073;
  double t18205;
  double t18240;
  double t18256;
  double t22385;
  double t22402;
  double t22418;
  double t18282;
  double t18283;
  double t18284;
  double t18294;
  double t18295;
  double t18302;
  double t7169;
  double t7406;
  double t7483;
  double t22469;
  double t22483;
  double t22488;
  double t22588;
  double t22620;
  double t22825;
  double t22827;
  double t22831;
  double t22876;
  double t22881;
  double t22890;
  double t22891;
  double t22894;
  double t22462;
  double t22626;
  double t22641;
  double t22786;
  double t22830;
  double t22895;
  double t22900;
  double t22904;
  double t22905;
  double t22910;
  double t22911;
  double t22915;
  double t22916;
  double t22919;
  double t22920;
  double t22928;
  double t22933;
  double t22936;
  double t22787;
  double t22923;
  double t22924;
  double t22947;
  double t22948;
  double t22949;
  double t22942;
  double t22943;
  double t22944;
  double t22945;
  double t22946;
  double t22950;
  double t22951;
  double t22972;
  double t22973;
  double t22974;
  double t22961;
  double t22962;
  double t22963;
  double t22964;
  double t22969;
  double t22979;
  double t22971;
  double t22976;
  double t22997;
  double t22998;
  double t22999;
  double t23000;
  double t23001;
  double t23002;
  double t23003;
  double t22982;
  double t22983;
  double t22986;
  double t23006;
  double t23007;
  double t23008;
  double t22990;
  double t22991;
  double t22994;
  double t23040;
  double t23041;
  double t23042;
  double t23043;
  double t23046;
  double t23047;
  double t23048;
  double t8228;
  double t8268;
  double t8432;
  double t23019;
  double t23037;
  double t23038;
  double t23045;
  double t23049;
  double t23050;
  double t23052;
  double t23053;
  double t23055;
  double t23078;
  double t23079;
  double t23080;
  double t23087;
  double t23088;
  double t23090;
  double t23094;
  double t23098;
  double t8541;
  double t12364;
  double t13196;
  double t23081;
  double t23084;
  double t23085;
  double t23089;
  double t23102;
  double t23103;
  double t23157;
  double t23176;
  double t23185;
  double t23063;
  double t23067;
  double t23069;
  double t23263;
  double t23268;
  double t23269;
  double t23271;
  double t23298;
  double t23301;
  double t23329;
  double t23490;
  double t23495;
  double t23499;
  double t23500;
  double t23503;
  double t23505;
  double t5439;
  double t7097;
  double t7122;
  double t23601;
  double t23623;
  double t23624;
  double t23715;
  double t23716;
  double t23717;
  double t23718;
  double t23728;
  double t23733;
  double t23738;
  double t23750;
  double t23755;
  double t23760;
  double t23765;
  double t23766;
  double t23779;
  double t16527;
  double t16560;
  double t16610;
  double t23864;
  double t23865;
  double t23866;
  double t23867;
  double t23869;
  double t23874;
  double t23875;
  double t23888;
  double t23889;
  double t23890;
  double t23891;
  double t23892;
  double t23893;
  double t23863;
  double t23870;
  double t23871;
  double t23872;
  double t23876;
  double t23894;
  double t23895;
  double t23896;
  double t23897;
  double t23898;
  double t23899;
  double t23900;
  double t23901;
  double t23902;
  double t23905;
  double t23910;
  double t23911;
  double t23912;
  double t23873;
  double t23906;
  double t23907;
  double t23922;
  double t23929;
  double t23930;
  double t23917;
  double t23918;
  double t23919;
  double t23920;
  double t23921;
  double t23931;
  double t23946;
  double t23963;
  double t23979;
  double t23980;
  double t23954;
  double t23955;
  double t23956;
  double t23957;
  double t23962;
  double t24207;
  double t24803;
  double t24805;
  double t24807;
  double t24809;
  double t24811;
  double t24814;
  double t24816;
  double t24309;
  double t24442;
  double t24676;
  double t24824;
  double t24826;
  double t24831;
  double t24778;
  double t24780;
  double t24791;
  double t25829;
  double t26181;
  double t26183;
  double t26184;
  double t26205;
  double t26209;
  double t26220;
  double t26227;
  double t26231;
  double t16942;
  double t16943;
  double t16944;
  double t26185;
  double t26186;
  double t26187;
  double t26213;
  double t26265;
  double t26266;
  double t26297;
  double t26299;
  double t26300;
  double t26318;
  double t26321;
  double t26329;
  double t26330;
  double t26331;
  double t26334;
  double t26335;
  double t26336;
  double t16958;
  double t17042;
  double t17043;
  double t26322;
  double t26323;
  double t26324;
  double t26332;
  double t26337;
  double t26338;
  double t26340;
  double t26341;
  double t26343;
  double t26308;
  double t26312;
  double t26313;
  double t26441;
  double t26448;
  double t26456;
  double t26470;
  double t26516;
  double t26519;
  double t26524;
  double t26525;
  double t26529;
  double t26534;
  double t26535;
  double t26538;
  double t26539;
  double t16267;
  double t16402;
  double t16404;
  double t26565;
  double t26634;
  double t26635;
  double t26696;
  double t26697;
  double t26699;
  double t26700;
  double t26733;
  double t26737;
  double t26740;
  double t26743;
  double t26744;
  double t26749;
  double t26755;
  double t26756;
  double t26760;
  double t22981;
  double t22987;
  double t26951;
  double t26952;
  double t26953;
  double t23009;
  double t26955;
  double t23012;
  double t26959;
  double t26962;
  double t26963;
  double t26964;
  double t26965;
  double t23039;
  double t23062;
  double t23086;
  double t23243;
  double t23244;
  double t23302;
  double t23496;
  double t26978;
  double t26983;
  double t23507;
  double t27000;
  double t27003;
  double t27004;
  double t27005;
  double t27006;
  double t23512;
  double t27008;
  double t27011;
  double t27012;
  double t23588;
  double t23590;
  double t23599;
  double t23658;
  double t23663;
  double t23664;
  double t23748;
  double t23761;
  double t27029;
  double t27033;
  double t27055;
  double t27056;
  double t27058;
  double t23786;
  double t27060;
  double t23793;
  double t27065;
  double t27068;
  double t27069;
  double t23804;
  double t23811;
  double t23812;
  double t23822;
  double t23841;
  double t24233;
  double t24726;
  double t27160;
  double t27186;
  double t27187;
  double t24836;
  double t27189;
  double t24857;
  double t27193;
  double t27196;
  double t27197;
  double t27198;
  double t27199;
  double t26191;
  double t26306;
  double t26326;
  double t26349;
  double t26350;
  double t26521;
  double t26530;
  double t27215;
  double t27218;
  double t26542;
  double t27236;
  double t27240;
  double t27241;
  double t27242;
  double t27243;
  double t26549;
  double t27245;
  double t27248;
  double t27249;
  double t26555;
  double t26556;
  double t26564;
  double t26672;
  double t26680;
  double t26682;
  double t26742;
  double t26750;
  double t27265;
  double t27268;
  double t27287;
  double t27288;
  double t27289;
  double t26769;
  double t27291;
  double t26797;
  double t27298;
  double t27301;
  double t27302;
  double t26824;
  double t26928;
  double t26929;
  double t26937;
  double t26944;
  double t27383;
  double t27384;
  double t27397;
  double t27022;
  double t27023;
  double t27418;
  double t27420;
  double t27030;
  double t27414;
  double t27415;
  double t27416;
  double t27039;
  double t27045;
  double t27046;
  double t27433;
  double t27434;
  double t27435;
  double t27459;
  double t27460;
  double t27461;
  double t27470;
  double t27472;
  double t27474;
  double t27258;
  double t27259;
  double t27491;
  double t27493;
  double t27266;
  double t27499;
  double t27500;
  double t27501;
  double t27275;
  double t27510;
  double t27511;
  double t27512;
  double t27280;
  double t27281;
  double t27537;
  double t27538;
  double t27539;
  double t27542;
  double t27543;
  double t27544;
  double t27545;
  double t27546;
  double t27552;
  double t27553;
  double t27580;
  double t27581;
  double t27586;
  double t27587;
  double t27605;
  double t27606;
  double t27607;
  t2648 = Cos(var1[13]);
  t2312 = Cos(var1[14]);
  t2321 = Sin(var1[13]);
  t2839 = Sin(var1[14]);
  t3161 = t2648*t2312;
  t3170 = t2321*t2839;
  t3217 = t3161 + t3170;
  t460 = Cos(var1[4]);
  t3142 = Cos(var1[5]);
  t3393 = Sin(var1[12]);
  t3045 = Cos(var1[12]);
  t3519 = Sin(var1[5]);
  t4267 = -1.*t3142*t3393*t3217;
  t4310 = -1.*t3045*t3217*t3519;
  t4354 = t4267 + t4310;
  t4414 = t460*t4354;
  t3015 = Sin(var1[4]);
  t2570 = -1.*t2312*t2321;
  t2909 = t2648*t2839;
  t2938 = t2570 + t2909;
  t7217 = t2312*t2321;
  t7259 = -1.*t2648*t2839;
  t7315 = t7217 + t7259;
  t7979 = -1.*t3045*t3142;
  t7980 = t3393*t3519;
  t7995 = t7979 + t7980;
  t7996 = t460*t7995;
  t7359 = t3045*t3142*t7315;
  t7392 = -1.*t3393*t7315*t3519;
  t7401 = t7359 + t7392;
  t8179 = -1.*t3142*t3393*t7315;
  t8192 = -1.*t3045*t7315*t3519;
  t8203 = t8179 + t8192;
  t8210 = t460*t8203;
  t3337 = t3045*t3142*t3217;
  t3645 = -1.*t3393*t3217*t3519;
  t3672 = t3337 + t3645;
  t4643 = -1.*t2648*t2312;
  t4991 = -1.*t2321*t2839;
  t5111 = t4643 + t4991;
  t14231 = Cos(var1[10]);
  t13364 = Cos(var1[11]);
  t14081 = Sin(var1[10]);
  t14483 = Sin(var1[11]);
  t15631 = -1.*t14231*t13364;
  t15805 = -1.*t14081*t14483;
  t15914 = t15631 + t15805;
  t16000 = Sin(var1[9]);
  t15247 = Cos(var1[9]);
  t16189 = -1.*t3142*t16000*t15914;
  t16218 = -1.*t15247*t15914*t3519;
  t16242 = t16189 + t16218;
  t16254 = t460*t16242;
  t16276 = t13364*t14081;
  t16281 = -1.*t14231*t14483;
  t16335 = t16276 + t16281;
  t14115 = -1.*t13364*t14081;
  t14643 = t14231*t14483;
  t14720 = t14115 + t14643;
  t16782 = t15247*t3142;
  t16784 = -1.*t16000*t3519;
  t16868 = t16782 + t16784;
  t16870 = t460*t16868;
  t16419 = t14231*t13364;
  t16491 = t14081*t14483;
  t16516 = t16419 + t16491;
  t16531 = t15247*t3142*t14720;
  t16537 = -1.*t16000*t14720*t3519;
  t16543 = t16531 + t16537;
  t16921 = -1.*t3142*t16000*t14720;
  t16924 = -1.*t15247*t14720*t3519;
  t16932 = t16921 + t16924;
  t16936 = t460*t16932;
  t15968 = t15247*t3142*t15914;
  t16061 = -1.*t16000*t15914*t3519;
  t16103 = t15968 + t16061;
  t2977 = t460*t2938;
  t3779 = -1.*t3015*t3672;
  t4217 = t2977 + t3779;
  t17058 = Sin(var1[3]);
  t17086 = Cos(var1[3]);
  t17179 = t17058*t3015*t4354;
  t17183 = t17086*t3672;
  t17186 = t17179 + t17183;
  t5686 = t3045*t3142*t2938;
  t6750 = -1.*t3393*t2938*t3519;
  t7028 = t5686 + t6750;
  t8000 = t460*t3217;
  t8145 = -1.*t3015*t7401;
  t8148 = t8000 + t8145;
  t7598 = -1.*t3142*t3393;
  t7661 = -1.*t3045*t3519;
  t7909 = t7598 + t7661;
  t17600 = t17086*t7909;
  t17604 = t17058*t3015*t7995;
  t17617 = t17600 + t17604;
  t17295 = t3142*t3393*t7315;
  t17297 = t3045*t7315*t3519;
  t17298 = t17295 + t17297;
  t17698 = t17058*t3015*t8203;
  t17811 = t17086*t7401;
  t17812 = t17698 + t17811;
  t17068 = t3142*t3393*t3217;
  t17077 = t3045*t3217*t3519;
  t17081 = t17068 + t17077;
  t9069 = t3045*t3142*t5111;
  t9691 = -1.*t3393*t5111*t3519;
  t11434 = t9069 + t9691;
  t15245 = t460*t14720;
  t16141 = -1.*t3015*t16103;
  t16171 = t15245 + t16141;
  t18034 = t17058*t3015*t16242;
  t18044 = t17086*t16103;
  t18050 = t18034 + t18044;
  t16341 = t15247*t3142*t16335;
  t16350 = -1.*t16000*t16335*t3519;
  t16386 = t16341 + t16350;
  t16871 = t460*t16516;
  t16911 = -1.*t3015*t16543;
  t16920 = t16871 + t16911;
  t16682 = t3142*t16000;
  t16708 = t15247*t3519;
  t16773 = t16682 + t16708;
  t18136 = t17086*t16773;
  t18141 = t17058*t3015*t16868;
  t18145 = t18136 + t18141;
  t18061 = t3142*t16000*t14720;
  t18062 = t15247*t14720*t3519;
  t18066 = t18061 + t18062;
  t18269 = t17058*t3015*t16932;
  t18270 = t17086*t16543;
  t18271 = t18269 + t18270;
  t17845 = t3142*t16000*t15914;
  t17849 = t15247*t15914*t3519;
  t17889 = t17845 + t17849;
  t17033 = t15247*t3142*t16516;
  t17037 = -1.*t16000*t16516*t3519;
  t17038 = t17033 + t17037;
  t17822 = t17086*t17081;
  t17828 = -1.*t17058*t4217;
  t17832 = t17822 + t17828;
  t17104 = -1.*t2938*t3015;
  t17138 = -1.*t460*t3672;
  t17142 = t17104 + t17138;
  t18412 = -1.*t17086*t3015*t4354;
  t18493 = t17058*t3672;
  t18506 = t18412 + t18493;
  t17191 = t3142*t3393*t2938;
  t17195 = t3045*t2938*t3519;
  t17198 = t17191 + t17195;
  t17238 = t460*t5111;
  t17255 = -1.*t3015*t7028;
  t17265 = t17238 + t17255;
  t17575 = t3045*t3142;
  t17579 = -1.*t3393*t3519;
  t17585 = t17575 + t17579;
  t19092 = t17058*t7909;
  t19115 = -1.*t17086*t3015*t7995;
  t19153 = t19092 + t19115;
  t17307 = t17086*t17298;
  t17384 = -1.*t17058*t8148;
  t17456 = t17307 + t17384;
  t17622 = -1.*t3217*t3015;
  t17637 = -1.*t460*t7401;
  t17643 = t17622 + t17637;
  t19209 = -1.*t17086*t3015*t8203;
  t19228 = t17058*t7401;
  t19245 = t19209 + t19228;
  t17833 = t3142*t3393*t5111;
  t17834 = t3045*t5111*t3519;
  t17835 = t17833 + t17834;
  t17839 = t460*t7315;
  t17840 = -1.*t3015*t11434;
  t17841 = t17839 + t17840;
  t18272 = t17086*t17889;
  t18273 = -1.*t17058*t16171;
  t18274 = t18272 + t18273;
  t17961 = -1.*t14720*t3015;
  t17981 = -1.*t460*t16103;
  t17997 = t17961 + t17981;
  t21517 = -1.*t17086*t3015*t16242;
  t21534 = t17058*t16103;
  t21622 = t21517 + t21534;
  t18051 = t3142*t16000*t16335;
  t18052 = t15247*t16335*t3519;
  t18053 = t18051 + t18052;
  t18056 = t460*t15914;
  t18057 = -1.*t3015*t16386;
  t18058 = t18056 + t18057;
  t18113 = -1.*t15247*t3142;
  t18116 = t16000*t3519;
  t18117 = t18113 + t18116;
  t22104 = t17058*t16773;
  t22110 = -1.*t17086*t3015*t16868;
  t22248 = t22104 + t22110;
  t18067 = t17086*t18066;
  t18072 = -1.*t17058*t16920;
  t18073 = t18067 + t18072;
  t18205 = -1.*t16516*t3015;
  t18240 = -1.*t460*t16543;
  t18256 = t18205 + t18240;
  t22385 = -1.*t17086*t3015*t16932;
  t22402 = t17058*t16543;
  t22418 = t22385 + t22402;
  t18282 = t3142*t16000*t16516;
  t18283 = t15247*t16516*t3519;
  t18284 = t18282 + t18283;
  t18294 = t460*t16335;
  t18295 = -1.*t3015*t17038;
  t18302 = t18294 + t18295;
  t7169 = t3217*t3015;
  t7406 = t460*t7401;
  t7483 = t7169 + t7406;
  t22469 = -1.*t2312;
  t22483 = 1. + t22469;
  t22488 = 0.50321*t22483;
  t22588 = 0.19821*t2312;
  t22620 = t22488 + t22588;
  t22825 = -1.*t3045;
  t22827 = 1. + t22825;
  t22831 = -1.*t2648;
  t22876 = 1. + t22831;
  t22881 = 0.28121*t22876;
  t22890 = t2648*t22620;
  t22891 = -0.305*t2321*t2839;
  t22894 = t22881 + t22890 + t22891;
  t22462 = 0.28121*t2321;
  t22626 = -1.*t22620*t2321;
  t22641 = -0.305*t2648*t2839;
  t22786 = t22462 + t22626 + t22641;
  t22830 = 0.15121*t22827;
  t22895 = t3045*t22894;
  t22900 = t22830 + t22895;
  t22904 = t3142*t22900;
  t22905 = -0.15121*t22827;
  t22910 = -0.15121*t3045;
  t22911 = -0.15121*t3393;
  t22915 = t3393*t22894;
  t22916 = t22905 + t22910 + t22911 + t22915;
  t22919 = -1.*t22916*t3519;
  t22920 = t22904 + t22919;
  t22928 = t22786*t3015;
  t22933 = t460*t22920;
  t22936 = t22928 + t22933;
  t22787 = -1.*t22786*t3015;
  t22923 = -1.*t460*t22920;
  t22924 = t22787 + t22923;
  t22947 = t460*t22786;
  t22948 = -1.*t3015*t22920;
  t22949 = t22947 + t22948;
  t22942 = t3142*t22916;
  t22943 = t22900*t3519;
  t22944 = t22942 + t22943;
  t22945 = -1.*t17585*t22944;
  t22946 = -1.*t460*t7909*t22936;
  t22950 = t3015*t7909*t22949;
  t22951 = t22945 + t22946 + t22950;
  t22972 = -1.*t3142*t22916;
  t22973 = -1.*t22900*t3519;
  t22974 = t22972 + t22973;
  t22961 = t17298*t22944;
  t22962 = t7483*t22936;
  t22963 = t8148*t22949;
  t22964 = t22961 + t22962 + t22963;
  t22969 = t460*t8203*t22951;
  t22979 = -1.*t7909*t22944;
  t22971 = Power(t460,2);
  t22976 = Power(t3015,2);
  t22997 = 0.15121*t3393;
  t22998 = -1.*t3393*t22894;
  t22999 = t22997 + t22998;
  t23000 = t3142*t22999;
  t23001 = t22910 + t22895;
  t23002 = -1.*t23001*t3519;
  t23003 = t23000 + t23002;
  t22982 = -1.*t460*t7995*t22936;
  t22983 = t3015*t7995*t22949;
  t22986 = t7401*t22944;
  t23006 = t3142*t23001;
  t23007 = t22999*t3519;
  t23008 = t23006 + t23007;
  t22990 = t460*t8203*t22936;
  t22991 = -1.*t3015*t8203*t22949;
  t22994 = t460*t7995*t22964;
  t23040 = 0.28121*t2648;
  t23041 = -1.*t2648*t22620;
  t23042 = 0.305*t2321*t2839;
  t23043 = t23040 + t23041 + t23042;
  t23046 = t3045*t3142*t22786;
  t23047 = -1.*t3393*t22786*t3519;
  t23048 = t23046 + t23047;
  t8228 = t2938*t3015;
  t8268 = t460*t3672;
  t8432 = t8228 + t8268;
  t23019 = t3142*t3393*t22786;
  t23037 = t3045*t22786*t3519;
  t23038 = t23019 + t23037;
  t23045 = t23043*t3015;
  t23049 = t460*t23048;
  t23050 = t23045 + t23049;
  t23052 = t460*t23043;
  t23053 = -1.*t3015*t23048;
  t23055 = t23052 + t23053;
  t23078 = -0.305*t2312*t2321;
  t23079 = 0.305*t2648*t2839;
  t23080 = t23078 + t23079;
  t23087 = -0.305*t2648*t2312;
  t23088 = t23087 + t22891;
  t23090 = t3045*t3142*t23080;
  t23094 = -1.*t3393*t23080*t3519;
  t23098 = t23090 + t23094;
  t8541 = t7315*t3015;
  t12364 = t460*t11434;
  t13196 = t8541 + t12364;
  t23081 = t3142*t3393*t23080;
  t23084 = t3045*t23080*t3519;
  t23085 = t23081 + t23084;
  t23089 = t23088*t3015;
  t23102 = t460*t23098;
  t23103 = t23089 + t23102;
  t23157 = t460*t23088;
  t23176 = -1.*t3015*t23098;
  t23185 = t23157 + t23176;
  t23063 = t17081*t22944;
  t23067 = t8432*t22936;
  t23069 = t4217*t22949;
  t23263 = -1.*t17298*t22944;
  t23268 = -1.*t7483*t22936;
  t23269 = -1.*t8148*t22949;
  t23271 = t23263 + t23268 + t23269;
  t23298 = t23063 + t23067 + t23069;
  t23301 = -1.*t7401*t22944;
  t23329 = -1.*t460*t8203*t22936;
  t23490 = t3015*t8203*t22949;
  t23495 = t3672*t22944;
  t23499 = t460*t4354*t22936;
  t23500 = -1.*t3015*t4354*t22949;
  t23503 = t460*t4354*t23271;
  t23505 = t460*t8203*t23298;
  t5439 = t5111*t3015;
  t7097 = t460*t7028;
  t7122 = t5439 + t7097;
  t23601 = -1.*t17081*t22944;
  t23623 = -1.*t8432*t22936;
  t23624 = -1.*t4217*t22949;
  t23715 = t17585*t22944;
  t23716 = t460*t7909*t22936;
  t23717 = -1.*t3015*t7909*t22949;
  t23718 = t23715 + t23716 + t23717;
  t23728 = t23601 + t23623 + t23624;
  t23733 = t460*t4354*t23718;
  t23738 = t7909*t22944;
  t23750 = t460*t7995*t22936;
  t23755 = -1.*t3015*t7995*t22949;
  t23760 = -1.*t3672*t22944;
  t23765 = -1.*t460*t4354*t22936;
  t23766 = t3015*t4354*t22949;
  t23779 = t460*t7995*t23728;
  t16527 = t16516*t3015;
  t16560 = t460*t16543;
  t16610 = t16527 + t16560;
  t23864 = -1.*t13364;
  t23865 = 1. + t23864;
  t23866 = -0.50321*t23865;
  t23867 = -0.19821*t13364;
  t23869 = t23866 + t23867;
  t23874 = -1.*t15247;
  t23875 = 1. + t23874;
  t23888 = -1.*t14231;
  t23889 = 1. + t23888;
  t23890 = -0.28121*t23889;
  t23891 = t14231*t23869;
  t23892 = 0.305*t14081*t14483;
  t23893 = t23890 + t23891 + t23892;
  t23863 = 0.28121*t14081;
  t23870 = t23869*t14081;
  t23871 = -0.305*t14231*t14483;
  t23872 = t23863 + t23870 + t23871;
  t23876 = -0.15121*t23875;
  t23894 = t15247*t23893;
  t23895 = t23876 + t23894;
  t23896 = t3142*t23895;
  t23897 = 0.15121*t23875;
  t23898 = 0.15121*t15247;
  t23899 = 0.15121*t16000;
  t23900 = t16000*t23893;
  t23901 = t23897 + t23898 + t23899 + t23900;
  t23902 = -1.*t23901*t3519;
  t23905 = t23896 + t23902;
  t23910 = t23872*t3015;
  t23911 = t460*t23905;
  t23912 = t23910 + t23911;
  t23873 = -1.*t23872*t3015;
  t23906 = -1.*t460*t23905;
  t23907 = t23873 + t23906;
  t23922 = t460*t23872;
  t23929 = -1.*t3015*t23905;
  t23930 = t23922 + t23929;
  t23917 = t3142*t23901;
  t23918 = t23895*t3519;
  t23919 = t23917 + t23918;
  t23920 = -1.*t18117*t23919;
  t23921 = -1.*t460*t16773*t23912;
  t23931 = t3015*t16773*t23930;
  t23946 = t23920 + t23921 + t23931;
  t23963 = -1.*t3142*t23901;
  t23979 = -1.*t23895*t3519;
  t23980 = t23963 + t23979;
  t23954 = t18066*t23919;
  t23955 = t16610*t23912;
  t23956 = t16920*t23930;
  t23957 = t23954 + t23955 + t23956;
  t23962 = t460*t16932*t23946;
  t24207 = -1.*t16773*t23919;
  t24803 = -0.15121*t16000;
  t24805 = -1.*t16000*t23893;
  t24807 = t24803 + t24805;
  t24809 = t3142*t24807;
  t24811 = t23898 + t23894;
  t24814 = -1.*t24811*t3519;
  t24816 = t24809 + t24814;
  t24309 = -1.*t460*t16868*t23912;
  t24442 = t3015*t16868*t23930;
  t24676 = t16543*t23919;
  t24824 = t3142*t24811;
  t24826 = t24807*t3519;
  t24831 = t24824 + t24826;
  t24778 = t460*t16932*t23912;
  t24780 = -1.*t3015*t16932*t23930;
  t24791 = t460*t16868*t23957;
  t25829 = -0.28121*t14081;
  t26181 = -1.*t23869*t14081;
  t26183 = 0.305*t14231*t14483;
  t26184 = t25829 + t26181 + t26183;
  t26205 = 0.28121*t14231;
  t26209 = t26205 + t23891 + t23892;
  t26220 = t15247*t3142*t26184;
  t26227 = -1.*t16000*t26184*t3519;
  t26231 = t26220 + t26227;
  t16942 = t14720*t3015;
  t16943 = t460*t16103;
  t16944 = t16942 + t16943;
  t26185 = t3142*t16000*t26184;
  t26186 = t15247*t26184*t3519;
  t26187 = t26185 + t26186;
  t26213 = t26209*t3015;
  t26265 = t460*t26231;
  t26266 = t26213 + t26265;
  t26297 = t460*t26209;
  t26299 = -1.*t3015*t26231;
  t26300 = t26297 + t26299;
  t26318 = 0.305*t13364*t14081;
  t26321 = t26318 + t23871;
  t26329 = -0.305*t14231*t13364;
  t26330 = -0.305*t14081*t14483;
  t26331 = t26329 + t26330;
  t26334 = t15247*t3142*t26321;
  t26335 = -1.*t16000*t26321*t3519;
  t26336 = t26334 + t26335;
  t16958 = t16335*t3015;
  t17042 = t460*t17038;
  t17043 = t16958 + t17042;
  t26322 = t3142*t16000*t26321;
  t26323 = t15247*t26321*t3519;
  t26324 = t26322 + t26323;
  t26332 = t26331*t3015;
  t26337 = t460*t26336;
  t26338 = t26332 + t26337;
  t26340 = t460*t26331;
  t26341 = -1.*t3015*t26336;
  t26343 = t26340 + t26341;
  t26308 = t17889*t23919;
  t26312 = t16944*t23912;
  t26313 = t16171*t23930;
  t26441 = -1.*t18066*t23919;
  t26448 = -1.*t16610*t23912;
  t26456 = -1.*t16920*t23930;
  t26470 = t26441 + t26448 + t26456;
  t26516 = t26308 + t26312 + t26313;
  t26519 = -1.*t16543*t23919;
  t26524 = -1.*t460*t16932*t23912;
  t26525 = t3015*t16932*t23930;
  t26529 = t16103*t23919;
  t26534 = t460*t16242*t23912;
  t26535 = -1.*t3015*t16242*t23930;
  t26538 = t460*t16242*t26470;
  t26539 = t460*t16932*t26516;
  t16267 = t15914*t3015;
  t16402 = t460*t16386;
  t16404 = t16267 + t16402;
  t26565 = -1.*t17889*t23919;
  t26634 = -1.*t16944*t23912;
  t26635 = -1.*t16171*t23930;
  t26696 = t18117*t23919;
  t26697 = t460*t16773*t23912;
  t26699 = -1.*t3015*t16773*t23930;
  t26700 = t26696 + t26697 + t26699;
  t26733 = t26565 + t26634 + t26635;
  t26737 = t460*t16242*t26700;
  t26740 = t16773*t23919;
  t26743 = t460*t16868*t23912;
  t26744 = -1.*t3015*t16868*t23930;
  t26749 = -1.*t16103*t23919;
  t26755 = -1.*t460*t16242*t23912;
  t26756 = t3015*t16242*t23930;
  t26760 = t460*t16868*t26733;
  t22981 = -1.*t17585*t22920;
  t22987 = t17298*t22920;
  t26951 = -1.*t7909*t22920;
  t26952 = t22945 + t26951;
  t26953 = t7401*t26952;
  t23009 = -1.*t17585*t23008;
  t26955 = -1.*t7995*t22920;
  t23012 = t17298*t23008;
  t26959 = t8203*t22920;
  t26962 = t22786*t3217;
  t26963 = t7401*t22920;
  t26964 = t26962 + t22961 + t26963;
  t26965 = t7909*t26964;
  t23039 = -1.*t17585*t23038;
  t23062 = t17298*t23038;
  t23086 = -1.*t17585*t23085;
  t23243 = t17298*t23085;
  t23244 = t17835*t22944;
  t23302 = -1.*t17298*t22920;
  t23496 = t17081*t22920;
  t26978 = t22786*t2938;
  t26983 = t3672*t22920;
  t23507 = -1.*t17298*t23008;
  t27000 = -1.*t8203*t22920;
  t27003 = -1.*t22786*t3217;
  t27004 = -1.*t7401*t22920;
  t27005 = t27003 + t23263 + t27004;
  t27006 = t3672*t27005;
  t23512 = t17081*t23008;
  t27008 = t4354*t22920;
  t27011 = t26978 + t23063 + t26983;
  t27012 = t7401*t27011;
  t23588 = t23038*t17081;
  t23590 = t17198*t22944;
  t23599 = -1.*t17298*t23038;
  t23658 = t23085*t17081;
  t23663 = -1.*t17298*t23085;
  t23664 = -1.*t17835*t22944;
  t23748 = t17585*t22920;
  t23761 = -1.*t17081*t22920;
  t27029 = -1.*t22786*t2938;
  t27033 = -1.*t3672*t22920;
  t27055 = t7909*t22920;
  t27056 = t23715 + t27055;
  t27058 = t3672*t27056;
  t23786 = t17585*t23008;
  t27060 = t7995*t22920;
  t23793 = -1.*t17081*t23008;
  t27065 = -1.*t4354*t22920;
  t27068 = t27029 + t23601 + t27033;
  t27069 = t7909*t27068;
  t23804 = t17585*t23038;
  t23811 = -1.*t23038*t17081;
  t23812 = -1.*t17198*t22944;
  t23822 = t17585*t23085;
  t23841 = -1.*t23085*t17081;
  t24233 = -1.*t18117*t23905;
  t24726 = t18066*t23905;
  t27160 = -1.*t16773*t23905;
  t27186 = t23920 + t27160;
  t27187 = t16543*t27186;
  t24836 = -1.*t18117*t24831;
  t27189 = -1.*t16868*t23905;
  t24857 = t18066*t24831;
  t27193 = t16932*t23905;
  t27196 = t23872*t16516;
  t27197 = t16543*t23905;
  t27198 = t27196 + t23954 + t27197;
  t27199 = t16773*t27198;
  t26191 = -1.*t18117*t26187;
  t26306 = t26187*t18066;
  t26326 = -1.*t18117*t26324;
  t26349 = t26324*t18066;
  t26350 = t18284*t23919;
  t26521 = -1.*t18066*t23905;
  t26530 = t17889*t23905;
  t27215 = t23872*t14720;
  t27218 = t16103*t23905;
  t26542 = -1.*t18066*t24831;
  t27236 = -1.*t16932*t23905;
  t27240 = -1.*t23872*t16516;
  t27241 = -1.*t16543*t23905;
  t27242 = t27240 + t26441 + t27241;
  t27243 = t16103*t27242;
  t26549 = t17889*t24831;
  t27245 = t16242*t23905;
  t27248 = t27215 + t26308 + t27218;
  t27249 = t16543*t27248;
  t26555 = t26187*t17889;
  t26556 = t18053*t23919;
  t26564 = -1.*t26187*t18066;
  t26672 = t26324*t17889;
  t26680 = -1.*t26324*t18066;
  t26682 = -1.*t18284*t23919;
  t26742 = t18117*t23905;
  t26750 = -1.*t17889*t23905;
  t27265 = -1.*t23872*t14720;
  t27268 = -1.*t16103*t23905;
  t27287 = t16773*t23905;
  t27288 = t26696 + t27287;
  t27289 = t16103*t27288;
  t26769 = t18117*t24831;
  t27291 = t16868*t23905;
  t26797 = -1.*t17889*t24831;
  t27298 = -1.*t16242*t23905;
  t27301 = t27265 + t26565 + t27268;
  t27302 = t16773*t27301;
  t26824 = t18117*t26187;
  t26928 = -1.*t26187*t17889;
  t26929 = -1.*t18053*t23919;
  t26937 = t18117*t26324;
  t26944 = -1.*t26324*t17889;
  t27383 = t3393*t22900;
  t27384 = -1.*t3045*t22916;
  t27397 = t27383 + t27384;
  t27022 = t22786*t5111;
  t27023 = t2938*t23043;
  t27418 = Power(t3045,2);
  t27420 = Power(t3393,2);
  t27030 = -1.*t23043*t3217;
  t27414 = -1.*t3045*t7315*t22900;
  t27415 = -1.*t3393*t7315*t22916;
  t27416 = t27003 + t27414 + t27415;
  t27039 = t2938*t23088;
  t27045 = -1.*t7315*t22786;
  t27046 = -1.*t23088*t3217;
  t27433 = t3045*t3217*t22900;
  t27434 = t3393*t3217*t22916;
  t27435 = t26978 + t27433 + t27434;
  t27459 = -1.*t3393*t22900;
  t27460 = t3045*t22916;
  t27461 = t27459 + t27460;
  t27470 = -1.*t16000*t23895;
  t27472 = t15247*t23901;
  t27474 = t27470 + t27472;
  t27258 = t23872*t15914;
  t27259 = t14720*t26209;
  t27491 = Power(t15247,2);
  t27493 = Power(t16000,2);
  t27266 = -1.*t26209*t16516;
  t27499 = -1.*t15247*t14720*t23895;
  t27500 = -1.*t16000*t14720*t23901;
  t27501 = t27240 + t27499 + t27500;
  t27275 = t14720*t26331;
  t27510 = t15247*t15914*t23895;
  t27511 = t16000*t15914*t23901;
  t27512 = t27215 + t27510 + t27511;
  t27280 = -1.*t16335*t23872;
  t27281 = -1.*t26331*t16516;
  t27537 = t16000*t23895;
  t27538 = -1.*t15247*t23901;
  t27539 = t27537 + t27538;
  t27542 = 0.15121*t16335;
  t27543 = 0.15121*t14720;
  t27544 = t27542 + t27543;
  t27545 = t15914*t23893;
  t27546 = t27215 + t27545;
  t27552 = -1.*t14720*t23893;
  t27553 = t27552 + t27240;
  t27580 = -1.*t7315*t22894;
  t27581 = t27580 + t27003;
  t27586 = t22894*t3217;
  t27587 = t26978 + t27586;
  t27605 = -0.15121*t5111;
  t27606 = -0.15121*t3217;
  t27607 = t27605 + t27606;
  p_output1[0]=t4217;
  p_output1[1]=t4414;
  p_output1[2]=t4414;
  p_output1[3]=t7122;
  p_output1[4]=t7483;
  p_output1[5]=-1.*t3015*t7909;
  p_output1[6]=t7996;
  p_output1[7]=t7996;
  p_output1[8]=t8148;
  p_output1[9]=t8210;
  p_output1[10]=t8210;
  p_output1[11]=t8432;
  p_output1[12]=t13196;
  p_output1[13]=t16171;
  p_output1[14]=t16254;
  p_output1[15]=t16254;
  p_output1[16]=t16404;
  p_output1[17]=t16610;
  p_output1[18]=-1.*t16773*t3015;
  p_output1[19]=t16870;
  p_output1[20]=t16870;
  p_output1[21]=t16920;
  p_output1[22]=t16936;
  p_output1[23]=t16936;
  p_output1[24]=t16944;
  p_output1[25]=t17043;
  p_output1[26]=-1.*t17058*t17081 - 1.*t17086*t4217;
  p_output1[27]=-1.*t17058*t17142;
  p_output1[28]=t17186;
  p_output1[29]=t17186;
  p_output1[30]=t17086*t17198 - 1.*t17058*t17265;
  p_output1[31]=t17456;
  p_output1[32]=-1.*t17058*t17585 + t17086*t3015*t7909;
  p_output1[33]=t17058*t460*t7909;
  p_output1[34]=t17617;
  p_output1[35]=t17617;
  p_output1[36]=-1.*t17058*t17298 - 1.*t17086*t8148;
  p_output1[37]=-1.*t17058*t17643;
  p_output1[38]=t17812;
  p_output1[39]=t17812;
  p_output1[40]=t17832;
  p_output1[41]=t17086*t17835 - 1.*t17058*t17841;
  p_output1[42]=-1.*t16171*t17086 - 1.*t17058*t17889;
  p_output1[43]=-1.*t17058*t17997;
  p_output1[44]=t18050;
  p_output1[45]=t18050;
  p_output1[46]=t17086*t18053 - 1.*t17058*t18058;
  p_output1[47]=t18073;
  p_output1[48]=-1.*t17058*t18117 + t16773*t17086*t3015;
  p_output1[49]=t16773*t17058*t460;
  p_output1[50]=t18145;
  p_output1[51]=t18145;
  p_output1[52]=-1.*t16920*t17086 - 1.*t17058*t18066;
  p_output1[53]=-1.*t17058*t18256;
  p_output1[54]=t18271;
  p_output1[55]=t18271;
  p_output1[56]=t18274;
  p_output1[57]=t17086*t18284 - 1.*t17058*t18302;
  p_output1[58]=t17832;
  p_output1[59]=t17086*t17142;
  p_output1[60]=t18506;
  p_output1[61]=t18506;
  p_output1[62]=t17058*t17198 + t17086*t17265;
  p_output1[63]=t17058*t17298 + t17086*t8148;
  p_output1[64]=t17086*t17585 + t17058*t3015*t7909;
  p_output1[65]=-1.*t17086*t460*t7909;
  p_output1[66]=t19153;
  p_output1[67]=t19153;
  p_output1[68]=t17456;
  p_output1[69]=t17086*t17643;
  p_output1[70]=t19245;
  p_output1[71]=t19245;
  p_output1[72]=t17058*t17081 + t17086*t4217;
  p_output1[73]=t17058*t17835 + t17086*t17841;
  p_output1[74]=t18274;
  p_output1[75]=t17086*t17997;
  p_output1[76]=t21622;
  p_output1[77]=t21622;
  p_output1[78]=t17058*t18053 + t17086*t18058;
  p_output1[79]=t16920*t17086 + t17058*t18066;
  p_output1[80]=t17086*t18117 + t16773*t17058*t3015;
  p_output1[81]=-1.*t16773*t17086*t460;
  p_output1[82]=t22248;
  p_output1[83]=t22248;
  p_output1[84]=t18073;
  p_output1[85]=t17086*t18256;
  p_output1[86]=t22418;
  p_output1[87]=t22418;
  p_output1[88]=t16171*t17086 + t17058*t17889;
  p_output1[89]=t17058*t18284 + t17086*t18302;
  p_output1[90]=-1.*t22964*t3015*t7909 + t7483*(t22924*t3015*t7909 + t22936*t3015*t7909) + t22951*t8148 + t460*t7909*(t17643*t22949 + t22949*t7483 + t22924*t8148 + t22936*t8148);
  p_output1[91]=t22969 + t22994 + t7483*(t22979 + t22981 + t22982 + t22983 - 1.*t22971*t22974*t7909 - 1.*t22974*t22976*t7909) + t460*t7909*(t22986 + t22987 + t22990 + t22991 + t22974*t460*t7483 - 1.*t22974*t3015*t8148);
  p_output1[92]=t22969 + t22994 + t7483*(t22979 + t22982 + t22983 + t23009 - 1.*t22971*t23003*t7909 - 1.*t22976*t23003*t7909) + t460*t7909*(t22986 + t22990 + t22991 + t23012 + t23003*t460*t7483 - 1.*t23003*t3015*t8148);
  p_output1[93]=t7483*(t23039 + t23055*t3015*t7909 - 1.*t23050*t460*t7909) + t460*t7909*(t23062 + t23063 + t23067 + t23069 + t23050*t7483 + t23055*t8148) + t22951*t8432;
  p_output1[94]=t13196*t22951 + t7483*(t23086 + t23185*t3015*t7909 - 1.*t23103*t460*t7909) + t460*t7909*(t13196*t22936 + t17841*t22949 + t23243 + t23244 + t23103*t7483 + t23185*t8148);
  p_output1[95]=t23271*t4217 + t23298*t8148 + (-1.*t17643*t22949 - 1.*t22949*t7483 - 1.*t22924*t8148 - 1.*t22936*t8148)*t8432 + t7483*(t17142*t22949 + t22924*t4217 + t22936*t4217 + t22949*t8432);
  p_output1[96]=t23503 + t23505 + (t23301 + t23302 + t23329 + t23490 - 1.*t22974*t460*t7483 + t22974*t3015*t8148)*t8432 + t7483*(t23495 + t23496 + t23499 + t23500 - 1.*t22974*t3015*t4217 + t22974*t460*t8432);
  p_output1[97]=t23503 + t23505 + (t23301 + t23329 + t23490 + t23507 - 1.*t23003*t460*t7483 + t23003*t3015*t8148)*t8432 + t7483*(t23495 + t23499 + t23500 + t23512 - 1.*t23003*t3015*t4217 + t23003*t460*t8432);
  p_output1[98]=t23271*t7122 + t23298*t8432 + (t23599 + t23601 + t23623 + t23624 - 1.*t23050*t7483 - 1.*t23055*t8148)*t8432 + t7483*(t17265*t22949 + t23588 + t23590 + t23055*t4217 + t22936*t7122 + t23050*t8432);
  p_output1[99]=t13196*t23298 + t23271*t7483 + (-1.*t13196*t22936 - 1.*t17841*t22949 + t23663 + t23664 - 1.*t23103*t7483 - 1.*t23185*t8148)*t8432 + t7483*(t22961 + t22962 + t22963 + t23658 + t23185*t4217 + t23103*t8432);
  p_output1[100]=t23718*t4217 - 1.*t23728*t3015*t7909 + (-1.*t22924*t3015*t7909 - 1.*t22936*t3015*t7909)*t8432 + t460*t7909*(-1.*t17142*t22949 - 1.*t22924*t4217 - 1.*t22936*t4217 - 1.*t22949*t8432);
  p_output1[101]=t23733 + t23779 + (t23738 + t23748 + t23750 + t23755 + t22971*t22974*t7909 + t22974*t22976*t7909)*t8432 + t460*t7909*(t23760 + t23761 + t23765 + t23766 + t22974*t3015*t4217 - 1.*t22974*t460*t8432);
  p_output1[102]=t23733 + t23779 + (t23738 + t23750 + t23755 + t23786 + t22971*t23003*t7909 + t22976*t23003*t7909)*t8432 + t460*t7909*(t23760 + t23765 + t23766 + t23793 + t23003*t3015*t4217 - 1.*t23003*t460*t8432);
  p_output1[103]=t23718*t7122 + (t23804 - 1.*t23055*t3015*t7909 + t23050*t460*t7909)*t8432 + t460*t7909*(-1.*t17265*t22949 + t23811 + t23812 - 1.*t23055*t4217 - 1.*t22936*t7122 - 1.*t23050*t8432);
  p_output1[104]=t23718*t7483 + (t23822 - 1.*t23185*t3015*t7909 + t23103*t460*t7909)*t8432 + t460*t7909*(t23263 + t23268 + t23269 + t23841 - 1.*t23185*t4217 - 1.*t23103*t8432);
  p_output1[105]=t16920*t23946 - 1.*t16773*t23957*t3015 + t16610*(t16773*t23907*t3015 + t16773*t23912*t3015) + t16773*(t16920*t23907 + t16920*t23912 + t16610*t23930 + t18256*t23930)*t460;
  p_output1[106]=t23962 + t16610*(-1.*t16773*t22971*t23980 - 1.*t16773*t22976*t23980 + t24207 + t24233 + t24309 + t24442) + t24791 + t16773*t460*(t24676 + t24726 + t24778 + t24780 - 1.*t16920*t23980*t3015 + t16610*t23980*t460);
  p_output1[107]=t23962 + t24791 + t16610*(t24207 + t24309 + t24442 - 1.*t16773*t22971*t24816 - 1.*t16773*t22976*t24816 + t24836) + t16773*t460*(t24676 + t24778 + t24780 + t24857 - 1.*t16920*t24816*t3015 + t16610*t24816*t460);
  p_output1[108]=t16944*t23946 + t16773*(t16610*t26266 + t16920*t26300 + t26306 + t26308 + t26312 + t26313)*t460 + t16610*(t26191 + t16773*t26300*t3015 - 1.*t16773*t26266*t460);
  p_output1[109]=t17043*t23946 + t16773*(t17043*t23912 + t18302*t23930 + t16610*t26338 + t16920*t26343 + t26349 + t26350)*t460 + t16610*(t26326 + t16773*t26343*t3015 - 1.*t16773*t26338*t460);
  p_output1[110]=t16610*(t16171*t23907 + t16171*t23912 + t16944*t23930 + t17997*t23930) + t16944*(-1.*t16920*t23907 - 1.*t16920*t23912 - 1.*t16610*t23930 - 1.*t18256*t23930) + t16171*t26470 + t16920*t26516;
  p_output1[111]=t26538 + t26539 + t16944*(t26519 + t26521 + t26524 + t26525 + t16920*t23980*t3015 - 1.*t16610*t23980*t460) + t16610*(t26529 + t26530 + t26534 + t26535 - 1.*t16171*t23980*t3015 + t16944*t23980*t460);
  p_output1[112]=t26538 + t26539 + t16944*(t26519 + t26524 + t26525 + t26542 + t16920*t24816*t3015 - 1.*t16610*t24816*t460) + t16610*(t26529 + t26534 + t26535 + t26549 - 1.*t16171*t24816*t3015 + t16944*t24816*t460);
  p_output1[113]=t16404*t26470 + t16944*t26516 + t16610*(t16404*t23912 + t18058*t23930 + t16944*t26266 + t16171*t26300 + t26555 + t26556) + t16944*(-1.*t16610*t26266 - 1.*t16920*t26300 + t26564 + t26565 + t26634 + t26635);
  p_output1[114]=t16610*t26470 + t17043*t26516 + t16610*(t23954 + t23955 + t23956 + t16944*t26338 + t16171*t26343 + t26672) + t16944*(-1.*t17043*t23912 - 1.*t18302*t23930 - 1.*t16610*t26338 - 1.*t16920*t26343 + t26680 + t26682);
  p_output1[115]=t16171*t26700 - 1.*t16773*t26733*t3015 + t16944*(-1.*t16773*t23907*t3015 - 1.*t16773*t23912*t3015) + t16773*(-1.*t16171*t23907 - 1.*t16171*t23912 - 1.*t16944*t23930 - 1.*t17997*t23930)*t460;
  p_output1[116]=t26737 + t16944*(t16773*t22971*t23980 + t16773*t22976*t23980 + t26740 + t26742 + t26743 + t26744) + t26760 + t16773*t460*(t26749 + t26750 + t26755 + t26756 + t16171*t23980*t3015 - 1.*t16944*t23980*t460);
  p_output1[117]=t26737 + t26760 + t16944*(t16773*t22971*t24816 + t16773*t22976*t24816 + t26740 + t26743 + t26744 + t26769) + t16773*t460*(t26749 + t26755 + t26756 + t26797 + t16171*t24816*t3015 - 1.*t16944*t24816*t460);
  p_output1[118]=t16404*t26700 + t16773*(-1.*t16404*t23912 - 1.*t18058*t23930 - 1.*t16944*t26266 - 1.*t16171*t26300 + t26928 + t26929)*t460 + t16944*(t26824 - 1.*t16773*t26300*t3015 + t16773*t26266*t460);
  p_output1[119]=t16610*t26700 + t16773*(-1.*t16944*t26338 - 1.*t16171*t26343 + t26441 + t26448 + t26456 + t26944)*t460 + t16944*(t26937 - 1.*t16773*t26343*t3015 + t16773*t26338*t460);
  p_output1[120]=t26953 + t26965 + t17585*(t22986 + t22987 + t26959 + t22974*t7401) + t17298*(t22979 + t22981 + t26955 - 1.*t22974*t7909);
  p_output1[121]=t26953 + t26965 + t17585*(t22986 + t23012 + t26959 + t23003*t7401) + t17298*(t22979 + t23009 + t26955 - 1.*t23003*t7909);
  p_output1[122]=t17081*t26952 + t17585*(t23062 + t23063 + t26978 + t26983 + t23043*t3217 + t23048*t7401) + t17298*(t23039 - 1.*t23048*t7909);
  p_output1[123]=t17835*t26952 + t17585*(t11434*t22920 + t23243 + t23244 + t23088*t3217 + t22786*t7315 + t23098*t7401) + t17298*(t23086 - 1.*t23098*t7909);
  p_output1[124]=t27006 + t27012 + t17298*(t23495 + t23496 + t27008 + t22974*t3672) + t17081*(t23301 + t23302 + t27000 - 1.*t22974*t7401);
  p_output1[125]=t27006 + t27012 + t17298*(t23495 + t23512 + t27008 + t23003*t3672) + t17081*(t23301 + t23507 + t27000 - 1.*t23003*t7401);
  p_output1[126]=t17198*t27005 + t17081*t27011 + t17298*(t23588 + t23590 + t27022 + t27023 + t23048*t3672 + t22920*t7028) + t17081*(t23599 + t23601 + t27029 + t27030 + t27033 - 1.*t23048*t7401);
  p_output1[127]=t17298*t27005 + t17835*t27011 + t17298*(t22961 + t23658 + t26962 + t26963 + t27039 + t23098*t3672) + t17081*(-1.*t11434*t22920 + t23663 + t23664 + t27045 + t27046 - 1.*t23098*t7401);
  p_output1[128]=t27058 + t27069 + t17585*(t23760 + t23761 + t27065 - 1.*t22974*t3672) + t17081*(t23738 + t23748 + t27060 + t22974*t7909);
  p_output1[129]=t27058 + t27069 + t17585*(t23760 + t23793 + t27065 - 1.*t23003*t3672) + t17081*(t23738 + t23786 + t27060 + t23003*t7909);
  p_output1[130]=t17198*t27056 + t17585*(t23811 + t23812 - 1.*t23043*t2938 - 1.*t23048*t3672 - 1.*t22786*t5111 - 1.*t22920*t7028) + t17081*(t23804 + t23048*t7909);
  p_output1[131]=t17298*t27056 + t17585*(t23263 + t23841 + t27003 + t27004 - 1.*t23088*t2938 - 1.*t23098*t3672) + t17081*(t23822 + t23098*t7909);
  p_output1[132]=t27187 + t18066*(-1.*t16773*t23980 + t24207 + t24233 + t27189) + t18117*(t16543*t23980 + t24676 + t24726 + t27193) + t27199;
  p_output1[133]=t27187 + t18066*(t24207 - 1.*t16773*t24816 + t24836 + t27189) + t18117*(t24676 + t16543*t24816 + t24857 + t27193) + t27199;
  p_output1[134]=t18066*(t26191 - 1.*t16773*t26231) + t17889*t27186 + t18117*(t16516*t26209 + t16543*t26231 + t26306 + t26308 + t27215 + t27218);
  p_output1[135]=t18066*(t26326 - 1.*t16773*t26336) + t18117*(t16335*t23872 + t17038*t23905 + t16516*t26331 + t16543*t26336 + t26349 + t26350) + t18284*t27186;
  p_output1[136]=t17889*(-1.*t16543*t23980 + t26519 + t26521 + t27236) + t27243 + t18066*(t16103*t23980 + t26529 + t26530 + t27245) + t27249;
  p_output1[137]=t17889*(-1.*t16543*t24816 + t26519 + t26542 + t27236) + t27243 + t18066*(t16103*t24816 + t26529 + t26549 + t27245) + t27249;
  p_output1[138]=t18053*t27242 + t17889*t27248 + t18066*(t16386*t23905 + t16103*t26231 + t26555 + t26556 + t27258 + t27259) + t17889*(-1.*t16543*t26231 + t26564 + t26565 + t27265 + t27266 + t27268);
  p_output1[139]=t18066*t27242 + t18284*t27248 + t18066*(t23954 + t16103*t26336 + t26672 + t27196 + t27197 + t27275) + t17889*(-1.*t17038*t23905 - 1.*t16543*t26336 + t26680 + t26682 + t27280 + t27281);
  p_output1[140]=t27289 + t17889*(t16773*t23980 + t26740 + t26742 + t27291) + t18117*(-1.*t16103*t23980 + t26749 + t26750 + t27298) + t27302;
  p_output1[141]=t27289 + t17889*(t16773*t24816 + t26740 + t26769 + t27291) + t18117*(-1.*t16103*t24816 + t26749 + t26797 + t27298) + t27302;
  p_output1[142]=t17889*(t16773*t26231 + t26824) + t18117*(-1.*t15914*t23872 - 1.*t16386*t23905 - 1.*t14720*t26209 - 1.*t16103*t26231 + t26928 + t26929) + t18053*t27288;
  p_output1[143]=t17889*(t16773*t26336 + t26937) + t18117*(-1.*t14720*t26331 - 1.*t16103*t26336 + t26441 + t26944 + t27240 + t27241) + t18066*t27288;
  p_output1[144]=t3217*(t22900*t3045 - 1.*t23001*t3045 + t22916*t3393 + t22999*t3393);
  p_output1[145]=t27397*t2938;
  p_output1[146]=t27397*t7315;
  p_output1[147]=t3217*(t22916*t3045*t3217 + t22999*t3045*t3217 - 1.*t22900*t3217*t3393 + t23001*t3217*t3393) + t2938*(-1.*t22916*t3045*t7315 - 1.*t22999*t3045*t7315 + t22900*t3393*t7315 - 1.*t23001*t3393*t7315);
  p_output1[148]=t27435*t2938 + t3217*(t27022 + t27023 + t22900*t2938*t3045 + t22786*t27418*t3217 + t22786*t27420*t3217 + t22916*t2938*t3393) + t27416*t5111 + t2938*(t27029 + t27030 - 1.*t22900*t3045*t3217 - 1.*t22916*t3217*t3393 - 1.*t22786*t27418*t7315 - 1.*t22786*t27420*t7315);
  p_output1[149]=t27416*t3217 + t27435*t7315 + t2938*(t27045 + t27046 - 1.*t22900*t3045*t5111 - 1.*t22916*t3393*t5111 - 1.*t23080*t27418*t7315 - 1.*t23080*t27420*t7315) + t3217*(t26962 + t27039 + t23080*t27418*t3217 + t23080*t27420*t3217 + t22900*t3045*t7315 + t22916*t3393*t7315);
  p_output1[150]=t2938*(-1.*t22900*t3045 + t23001*t3045 - 1.*t22916*t3393 - 1.*t22999*t3393);
  p_output1[151]=t27461*t5111;
  p_output1[152]=t27461*t3217;
  p_output1[153]=t16516*(-1.*t15247*t23895 - 1.*t16000*t23901 - 1.*t16000*t24807 + t15247*t24811);
  p_output1[154]=t14720*t27474;
  p_output1[155]=t16335*t27474;
  p_output1[156]=t14720*(t14720*t16000*t23895 - 1.*t14720*t15247*t23901 - 1.*t14720*t15247*t24807 - 1.*t14720*t16000*t24811) + t16516*(-1.*t15914*t16000*t23895 + t15247*t15914*t23901 + t15247*t15914*t24807 + t15914*t16000*t24811);
  p_output1[157]=t14720*(-1.*t15247*t15914*t23895 - 1.*t15914*t16000*t23901 + t27265 + t27266 - 1.*t14720*t26184*t27491 - 1.*t14720*t26184*t27493) + t16516*(t15247*t16335*t23895 + t16000*t16335*t23901 + t27258 + t27259 + t15914*t26184*t27491 + t15914*t26184*t27493) + t15914*t27501 + t14720*t27512;
  p_output1[158]=t14720*(-1.*t15247*t16516*t23895 - 1.*t16000*t16516*t23901 + t27280 + t27281 - 1.*t14720*t26321*t27491 - 1.*t14720*t26321*t27493) + t16516*(t14720*t15247*t23895 + t14720*t16000*t23901 + t27196 + t27275 + t15914*t26321*t27491 + t15914*t26321*t27493) + t16516*t27501 + t16335*t27512;
  p_output1[159]=t14720*(t15247*t23895 + t16000*t23901 + t16000*t24807 - 1.*t15247*t24811);
  p_output1[160]=t15914*t27539;
  p_output1[161]=t16516*t27539;
  p_output1[162]=t27544;
  p_output1[163]=t27544;
  p_output1[164]=t16516*(t16335*t23893 + t15914*t26184 + t27258 + t27259) + t14720*(-1.*t15914*t23893 - 1.*t14720*t26184 + t27265 + t27266) + t14720*t27546 + t15914*t27553;
  p_output1[165]=t16516*(t14720*t23893 + t15914*t26321 + t27196 + t27275) + t14720*(-1.*t16516*t23893 - 1.*t14720*t26321 + t27280 + t27281) + t16335*t27546 + t16516*t27553;
  p_output1[166]=0.28121*t13364 - 0.305*Power(t13364,2) + t13364*t23869;
  p_output1[167]=-0.28121*t14483 + 0.305*t13364*t14483 - 1.*t14483*t23869;
  p_output1[168]=t27587*t2938 + (t26962 + t27022 + t27023 + t22894*t2938)*t3217 + t2938*(t27029 + t27030 + t27045 - 1.*t22894*t3217) + t27581*t5111;
  p_output1[169]=t27581*t3217 + t27587*t7315 + t3217*(t26962 + t27039 + t23080*t3217 + t22894*t7315) + t2938*(t27045 + t27046 - 1.*t22894*t5111 - 1.*t23080*t7315);
  p_output1[170]=t27607;
  p_output1[171]=t27607;
  p_output1[172]=0.28121*t2312 - 1.*t22620*t2312 - 0.305*Power(t2312,2);
  p_output1[173]=-0.28121*t2839 + t22620*t2839 + 0.305*t2312*t2839;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 174, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Je_DiagonalStance.hh"

namespace SymFunction
{

void J_Je_DiagonalStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
