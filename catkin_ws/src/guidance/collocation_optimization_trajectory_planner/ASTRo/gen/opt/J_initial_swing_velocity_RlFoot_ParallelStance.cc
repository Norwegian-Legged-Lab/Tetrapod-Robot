/*
 * Automatically Generated from Mathematica.
 * Sat 14 May 2022 15:43:57 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t1648;
  double t1813;
  double t4259;
  double t4801;
  double t4965;
  double t4972;
  double t619;
  double t10889;
  double t15534;
  double t19658;
  double t19893;
  double t22739;
  double t25024;
  double t26917;
  double t26945;
  double t29339;
  double t17918;
  double t18808;
  double t25023;
  double t25932;
  double t26009;
  double t26089;
  double t26946;
  double t27081;
  double t27103;
  double t27171;
  double t27398;
  double t27404;
  double t27406;
  double t27516;
  double t27733;
  double t5862;
  double t10779;
  double t43830;
  double t4310;
  double t4971;
  double t45032;
  double t45042;
  double t45046;
  double t45066;
  double t45110;
  double t45171;
  double t45544;
  double t45625;
  double t45647;
  double t45873;
  double t45885;
  double t45983;
  double t45857;
  double t45984;
  double t46005;
  double t46024;
  double t46336;
  double t46339;
  double t46654;
  double t46676;
  double t46704;
  double t46783;
  double t46785;
  double t46786;
  double t41028;
  double t29344;
  double t29360;
  double t44737;
  double t44917;
  double t44963;
  double t45024;
  double t45050;
  double t44583;
  double t44731;
  double t46991;
  double t46993;
  double t46994;
  double t46997;
  double t46998;
  double t46999;
  double t5782;
  double t10964;
  double t28248;
  double t46795;
  double t46798;
  double t46800;
  double t46805;
  double t46811;
  double t46827;
  double t46829;
  double t46870;
  double t46872;
  double t46886;
  double t46903;
  double t46904;
  double t46907;
  double t46950;
  double t46957;
  double t46961;
  double t46983;
  double t46986;
  double t46985;
  double t47000;
  double t32601;
  double t43026;
  double t43364;
  double t47068;
  double t47070;
  double t47071;
  double t47072;
  double t47134;
  double t47215;
  double t47219;
  double t47220;
  double t44635;
  double t47338;
  double t47341;
  double t46638;
  double t46639;
  double t46733;
  double t46735;
  double t46748;
  double t46757;
  double t46764;
  double t46766;
  double t46775;
  double t47165;
  double t47222;
  double t47223;
  double t47224;
  double t47226;
  double t47227;
  double t47284;
  double t47412;
  double t47415;
  double t47416;
  double t46006;
  double t46420;
  double t46453;
  double t46460;
  double t46508;
  double t46531;
  double t46599;
  double t47491;
  double t47507;
  double t47508;
  double t47511;
  double t47512;
  double t47513;
  double t47515;
  double t47516;
  double t47613;
  double t47668;
  double t47669;
  double t47683;
  double t47705;
  double t47713;
  double t47725;
  double t47727;
  double t47728;
  double t47729;
  double t47746;
  double t47745;
  double t47747;
  double t47749;
  double t47751;
  double t47752;
  double t47754;
  double t47769;
  double t47778;
  double t47779;
  double t47827;
  double t47835;
  double t47836;
  double t47839;
  double t47840;
  double t47784;
  double t47861;
  double t47863;
  double t47865;
  double t47859;
  double t47866;
  double t47867;
  double t47869;
  double t47873;
  double t47889;
  double t47928;
  double t47931;
  double t47943;
  double t47983;
  double t47984;
  double t47985;
  double t47987;
  double t47988;
  double t47989;
  double t47995;
  double t47997;
  double t47998;
  double t48000;
  double t48002;
  double t48003;
  double t48006;
  double t48007;
  double t48008;
  double t48020;
  double t48021;
  double t48022;
  double t48023;
  double t48025;
  double t48026;
  double t48027;
  double t48028;
  double t48029;
  double t48030;
  double t48031;
  double t48032;
  double t48033;
  double t48034;
  double t47615;
  double t47616;
  double t47617;
  double t47618;
  double t47638;
  double t47640;
  double t47655;
  double t47691;
  double t47726;
  double t47730;
  double t47731;
  double t47732;
  double t47733;
  double t47737;
  double t47741;
  double t48043;
  double t48044;
  double t48045;
  double t48042;
  double t48046;
  double t48047;
  double t48049;
  double t48050;
  double t48051;
  double t48061;
  double t48062;
  double t48063;
  double t47980;
  double t48079;
  double t48080;
  double t48081;
  double t48084;
  double t48085;
  double t48087;
  double t48088;
  double t48018;
  double t48019;
  double t48035;
  double t47837;
  double t47838;
  double t47841;
  double t47843;
  double t47844;
  double t47849;
  double t47850;
  double t47851;
  double t47852;
  double t47854;
  double t47855;
  double t47856;
  double t47857;
  double t48103;
  double t48104;
  double t48105;
  double t48106;
  double t48107;
  double t48109;
  double t47991;
  double t48136;
  double t48138;
  double t47986;
  double t47990;
  double t47992;
  double t47993;
  double t47994;
  double t47999;
  double t48037;
  double t48038;
  double t48039;
  double t47750;
  double t47756;
  double t47780;
  double t47781;
  double t47782;
  double t47783;
  double t47785;
  double t47786;
  double t47787;
  double t47788;
  double t47797;
  double t47807;
  double t47808;
  double t48186;
  double t48187;
  double t48189;
  double t48190;
  double t48193;
  double t48130;
  double t48132;
  double t48133;
  double t48134;
  double t48135;
  double t48139;
  double t48143;
  double t48145;
  double t48146;
  double t48148;
  double t48149;
  double t48152;
  double t48158;
  double t47009;
  double t47010;
  double t48261;
  double t48262;
  double t48059;
  double t48060;
  double t48064;
  double t48065;
  double t48066;
  double t48067;
  double t48068;
  double t48069;
  double t48070;
  double t48119;
  double t48120;
  double t48121;
  double t48122;
  double t48123;
  double t48125;
  double t48127;
  double t48128;
  double t48227;
  double t48231;
  double t48232;
  double t48233;
  double t48234;
  double t48239;
  double t48240;
  double t48241;
  double t47925;
  double t47927;
  double t47945;
  double t47953;
  double t47968;
  double t47969;
  double t47973;
  double t47976;
  double t47977;
  double t48292;
  double t48293;
  double t48294;
  double t48295;
  double t48296;
  double t48299;
  double t48300;
  double t48301;
  double t48319;
  double t48320;
  double t48048;
  double t48052;
  double t48053;
  double t48054;
  double t48055;
  double t48056;
  double t48057;
  double t48110;
  double t48111;
  double t48112;
  double t48113;
  double t48114;
  double t48115;
  double t48117;
  double t48198;
  double t48202;
  double t48203;
  double t48204;
  double t48206;
  double t48208;
  double t48213;
  double t47868;
  double t47915;
  double t47916;
  double t47917;
  double t47920;
  double t47921;
  double t47922;
  double t48298;
  double t48302;
  double t48303;
  double t48305;
  double t48306;
  double t48311;
  double t48312;
  double t48340;
  double t48341;
  double t48342;
  double t48370;
  double t48371;
  double t48373;
  double t48374;
  double t48375;
  double t48376;
  double t48378;
  double t48379;
  double t48381;
  double t48382;
  double t48383;
  double t48384;
  double t48385;
  double t48386;
  double t48387;
  double t48388;
  double t48389;
  double t48390;
  double t48391;
  double t48392;
  double t48393;
  double t48394;
  double t48395;
  double t48396;
  double t48397;
  double t48398;
  double t48399;
  double t48400;
  double t48401;
  double t48402;
  double t48403;
  double t48404;
  double t48405;
  double t48406;
  double t48353;
  double t48354;
  double t48355;
  double t48356;
  double t48357;
  double t48358;
  double t48360;
  double t48361;
  double t48362;
  double t48363;
  double t48367;
  double t48369;
  double t48417;
  double t48418;
  double t48419;
  double t48420;
  double t48421;
  double t48422;
  double t48423;
  double t48407;
  double t48408;
  double t48409;
  double t48410;
  double t48411;
  double t48413;
  double t48414;
  double t48415;
  double t48416;
  double t48439;
  double t48440;
  double t48443;
  double t48444;
  double t48446;
  double t48447;
  double t48448;
  double t48449;
  double t48450;
  double t48451;
  double t48452;
  double t48461;
  double t48462;
  double t48463;
  double t48460;
  double t48464;
  double t48465;
  double t48467;
  double t48468;
  double t48469;
  double t48480;
  double t48481;
  double t48498;
  double t48499;
  double t48500;
  double t48502;
  double t48503;
  double t48505;
  double t48506;
  double t48436;
  double t48438;
  double t48453;
  double t48546;
  double t48548;
  double t48549;
  double t48551;
  double t48552;
  double t48553;
  double t48584;
  double t48585;
  double t48456;
  double t48457;
  double t48458;
  double t48598;
  double t48599;
  double t48576;
  double t48577;
  double t48579;
  double t48580;
  double t48583;
  double t48586;
  double t48587;
  double t48588;
  double t48589;
  double t48590;
  double t48591;
  double t48592;
  double t48593;
  double t48621;
  double t48622;
  double t48478;
  double t48479;
  double t48482;
  double t48483;
  double t48484;
  double t48486;
  double t48487;
  double t48488;
  double t48489;
  double t48566;
  double t48567;
  double t48569;
  double t48570;
  double t48571;
  double t48572;
  double t48573;
  double t48574;
  double t48608;
  double t48609;
  double t48610;
  double t48611;
  double t48612;
  double t48613;
  double t48614;
  double t48615;
  double t48638;
  double t48639;
  double t48640;
  double t48641;
  double t48643;
  double t48644;
  double t48645;
  double t48656;
  double t48657;
  double t48466;
  double t48470;
  double t48471;
  double t48472;
  double t48473;
  double t48474;
  double t48475;
  double t48555;
  double t48557;
  double t48558;
  double t48560;
  double t48562;
  double t48563;
  double t48564;
  double t48600;
  double t48601;
  double t48602;
  double t48603;
  double t48604;
  double t48605;
  double t48606;
  double t48642;
  double t48646;
  double t48647;
  double t48648;
  double t48649;
  double t48650;
  double t48651;
  double t48671;
  double t48672;
  t1648 = Cos(var1[9]);
  t1813 = -1.*t1648;
  t4259 = 1. + t1813;
  t4801 = Sin(var1[9]);
  t4965 = 0.15121*t4801;
  t4972 = Sin(var1[4]);
  t619 = Cos(var1[5]);
  t10889 = Sin(var1[5]);
  t15534 = Cos(var1[10]);
  t19658 = t619*t4801*t4972;
  t19893 = t1648*t4972*t10889;
  t22739 = t19658 + t19893;
  t25024 = Cos(var1[11]);
  t26917 = Sin(var1[10]);
  t26945 = Sin(var1[11]);
  t29339 = 0.15121*t1648;
  t17918 = -1.*t15534;
  t18808 = 1. + t17918;
  t25023 = -0.28121*t18808*t22739;
  t25932 = -1.*t25024;
  t26009 = 1. + t25932;
  t26089 = -0.50321*t15534*t26009*t22739;
  t26946 = 0.50321*t26917*t26945*t22739;
  t27081 = t1648*t619*t4972;
  t27103 = -1.*t4801*t4972*t10889;
  t27171 = t27081 + t27103;
  t27398 = 0.15121*t27171;
  t27404 = t15534*t25024*t22739;
  t27406 = t26917*t26945*t22739;
  t27516 = t27404 + t27406;
  t27733 = -0.23321*t27516;
  t5862 = -0.15121*t4259;
  t10779 = t5862 + t4965;
  t43830 = Cos(var1[4]);
  t4310 = 0.15121*t4259;
  t4971 = t4310 + t4965;
  t45032 = -1.*t1648*t43830*t619;
  t45042 = t43830*t4801*t10889;
  t45046 = t45032 + t45042;
  t45066 = -1.*t26917*t4972;
  t45110 = t15534*t45046;
  t45171 = t45066 + t45110;
  t45544 = -1.*t15534*t4972;
  t45625 = -1.*t26917*t45046;
  t45647 = t45544 + t45625;
  t45873 = -1.*t1648*t619*t4972;
  t45885 = t4801*t4972*t10889;
  t45983 = t45873 + t45885;
  t45857 = t43830*t26917;
  t45984 = t15534*t45983;
  t46005 = t45857 + t45984;
  t46024 = t15534*t43830;
  t46336 = -1.*t26917*t45983;
  t46339 = t46024 + t46336;
  t46654 = -1.*t43830*t26917;
  t46676 = -1.*t15534*t45983;
  t46704 = t46654 + t46676;
  t46783 = -1.*t43830*t619*t4801;
  t46785 = -1.*t1648*t43830*t10889;
  t46786 = t46783 + t46785;
  t41028 = t29339 + t4965;
  t29344 = -0.15121*t4801;
  t29360 = t29339 + t29344;
  t44737 = t43830*t619*t4801;
  t44917 = t1648*t43830*t10889;
  t44963 = t44737 + t44917;
  t45024 = 0.15121*t44963;
  t45050 = -0.28121*t18808*t45046;
  t44583 = -1.*t43830*t619*t10779;
  t44731 = t43830*t4971*t10889;
  t46991 = -0.50321*t15534*t26009*t45046;
  t46993 = 0.50321*t26917*t26945*t45046;
  t46994 = t15534*t25024*t45046;
  t46997 = t26917*t26945*t45046;
  t46998 = t46994 + t46997;
  t46999 = -0.23321*t46998;
  t5782 = t619*t4971*t4972;
  t10964 = t10779*t4972*t10889;
  t28248 = t5782 + t10964 + t25023 + t26089 + t26946 + t27398 + t27733;
  t46795 = 0.50321*t25024*t26917*t46786;
  t46798 = -0.50321*t15534*t26945*t46786;
  t46800 = t25024*t26917*t46786;
  t46805 = -1.*t15534*t26945*t46786;
  t46811 = t46800 + t46805;
  t46827 = -0.23321*t46811;
  t46829 = t46795 + t46798 + t46827;
  t46870 = var2[11]*t46829;
  t46872 = -0.28121*t26917*t46786;
  t46886 = 0.50321*t26009*t26917*t46786;
  t46903 = 0.50321*t15534*t26945*t46786;
  t46904 = -1.*t25024*t26917*t46786;
  t46907 = t15534*t26945*t46786;
  t46950 = t46904 + t46907;
  t46957 = -0.23321*t46950;
  t46961 = t46872 + t46886 + t46903 + t46957;
  t46983 = var2[10]*t46961;
  t46986 = -1.*t43830*t29360*t10889;
  t46985 = -1.*t43830*t619*t41028;
  t47000 = t46985 + t46986 + t45024 + t45050 + t46991 + t46993 + t46999;
  t32601 = -1.*t619*t29360*t4972;
  t43026 = t41028*t4972*t10889;
  t43364 = t32601 + t43026 + t25023 + t26089 + t26946 + t27398 + t27733;
  t47068 = t1648*t43830*t619;
  t47070 = -1.*t43830*t4801*t10889;
  t47071 = t47068 + t47070;
  t47072 = -1.*t15534*t47071;
  t47134 = t45066 + t47072;
  t47215 = t15534*t4972;
  t47219 = -1.*t26917*t47071;
  t47220 = t47215 + t47219;
  t44635 = -0.28121*t26917*t4972;
  t47338 = t26917*t47071;
  t47341 = t45544 + t47338;
  t46638 = 0.28121*t15534*t43830;
  t46639 = -0.28121*t26917*t45983;
  t46733 = -0.50321*t26945*t46704;
  t46735 = -0.50321*t26009*t46339;
  t46748 = -1.*t26945*t46704;
  t46757 = t25024*t46339;
  t46764 = t46748 + t46757;
  t46766 = -0.23321*t46764;
  t46775 = t46638 + t46639 + t46733 + t46735 + t46766;
  t47165 = -0.50321*t25024*t47134;
  t47222 = -0.50321*t26945*t47220;
  t47223 = -1.*t25024*t47134;
  t47224 = -1.*t26945*t47220;
  t47226 = t47223 + t47224;
  t47227 = -0.23321*t47226;
  t47284 = t47165 + t47222 + t47227;
  t47412 = t26917*t4972;
  t47415 = t15534*t47071;
  t47416 = t47412 + t47415;
  t46006 = -0.50321*t26945*t46005;
  t46420 = -0.50321*t25024*t46339;
  t46453 = -1.*t26945*t46005;
  t46460 = -1.*t25024*t46339;
  t46508 = t46453 + t46460;
  t46531 = -0.23321*t46508;
  t46599 = t46006 + t46420 + t46531;
  t47491 = -0.28121*t18808*t46786;
  t47507 = -0.50321*t15534*t26009*t46786;
  t47508 = 0.50321*t26917*t26945*t46786;
  t47511 = 0.15121*t45046;
  t47512 = t15534*t25024*t46786;
  t47513 = t26917*t26945*t46786;
  t47515 = t47512 + t47513;
  t47516 = -0.23321*t47515;
  t47613 = Cos(var1[3]);
  t47668 = t1648*t47613*t43830*t619;
  t47669 = -1.*t47613*t43830*t4801*t10889;
  t47683 = t47668 + t47669;
  t47705 = t47613*t26917*t4972;
  t47713 = t15534*t47683;
  t47725 = t47705 + t47713;
  t47727 = t15534*t47613*t4972;
  t47728 = -1.*t26917*t47683;
  t47729 = t47727 + t47728;
  t47746 = Sin(var1[3]);
  t47745 = t47613*t619*t4972;
  t47747 = -1.*t47746*t10889;
  t47749 = t47745 + t47747;
  t47751 = -1.*t619*t47746;
  t47752 = -1.*t47613*t4972*t10889;
  t47754 = t47751 + t47752;
  t47769 = -1.*t4801*t47749;
  t47778 = t1648*t47754;
  t47779 = t47769 + t47778;
  t47827 = -1.*t47613*t619*t4972;
  t47835 = t47746*t10889;
  t47836 = t47827 + t47835;
  t47839 = t4801*t47836;
  t47840 = t47839 + t47778;
  t47784 = -1.*t4801*t47754;
  t47861 = t1648*t47749;
  t47863 = t4801*t47754;
  t47865 = t47861 + t47863;
  t47859 = -1.*t47613*t43830*t26917;
  t47866 = t15534*t47865;
  t47867 = t47859 + t47866;
  t47869 = -1.*t15534*t47613*t43830;
  t47873 = -1.*t26917*t47865;
  t47889 = t47869 + t47873;
  t47928 = t47613*t43830*t26917;
  t47931 = -1.*t15534*t47865;
  t47943 = t47928 + t47931;
  t47983 = -1.*t619*t47746*t4972;
  t47984 = -1.*t47613*t10889;
  t47985 = t47983 + t47984;
  t47987 = -1.*t47613*t619;
  t47988 = t47746*t4972*t10889;
  t47989 = t47987 + t47988;
  t47995 = t1648*t47985;
  t47997 = t4801*t47989;
  t47998 = t47995 + t47997;
  t48000 = t43830*t26917*t47746;
  t48002 = t15534*t47998;
  t48003 = t48000 + t48002;
  t48006 = t15534*t43830*t47746;
  t48007 = -1.*t26917*t47998;
  t48008 = t48006 + t48007;
  t48020 = -1.*t43830*t619*t4801*t47746;
  t48021 = -1.*t1648*t43830*t47746*t10889;
  t48022 = t48020 + t48021;
  t48023 = -0.28121*t18808*t48022;
  t48025 = -0.50321*t15534*t26009*t48022;
  t48026 = 0.50321*t26917*t26945*t48022;
  t48027 = -1.*t1648*t43830*t619*t47746;
  t48028 = t43830*t4801*t47746*t10889;
  t48029 = t48027 + t48028;
  t48030 = 0.15121*t48029;
  t48031 = t15534*t25024*t48022;
  t48032 = t26917*t26945*t48022;
  t48033 = t48031 + t48032;
  t48034 = -0.23321*t48033;
  t47615 = t47613*t43830*t619*t10779;
  t47616 = 0.28121*t47613*t26917*t4972;
  t47617 = -1.*t47613*t43830*t4971*t10889;
  t47618 = -1.*t47613*t43830*t619*t4801;
  t47638 = -1.*t1648*t47613*t43830*t10889;
  t47640 = t47618 + t47638;
  t47655 = 0.15121*t47640;
  t47691 = -0.28121*t18808*t47683;
  t47726 = -0.50321*t26009*t47725;
  t47730 = -0.50321*t26945*t47729;
  t47731 = t25024*t47725;
  t47732 = -1.*t26945*t47729;
  t47733 = t47731 + t47732;
  t47737 = -0.23321*t47733;
  t47741 = t47615 + t47616 + t47617 + t47655 + t47691 + t47726 + t47730 + t47737;
  t48043 = t1648*t43830*t619*t47746;
  t48044 = -1.*t43830*t4801*t47746*t10889;
  t48045 = t48043 + t48044;
  t48042 = t26917*t47746*t4972;
  t48046 = t15534*t48045;
  t48047 = t48042 + t48046;
  t48049 = t15534*t47746*t4972;
  t48050 = -1.*t26917*t48045;
  t48051 = t48049 + t48050;
  t48061 = -1.*t26917*t47746*t4972;
  t48062 = -1.*t15534*t48045;
  t48063 = t48061 + t48062;
  t47980 = 0.28121*t43830*t26917*t47746;
  t48079 = -1.*t1648*t619*t47746*t4972;
  t48080 = t4801*t47746*t4972*t10889;
  t48081 = t48079 + t48080;
  t48084 = t15534*t48081;
  t48085 = t48000 + t48084;
  t48087 = -1.*t26917*t48081;
  t48088 = t48006 + t48087;
  t48018 = -1.*t43830*t619*t4971*t47746;
  t48019 = -1.*t43830*t10779*t47746*t10889;
  t48035 = t48018 + t48019 + t48023 + t48025 + t48026 + t48030 + t48034;
  t47837 = t4971*t47836;
  t47838 = t10779*t47754;
  t47841 = -0.28121*t18808*t47840;
  t47843 = -0.50321*t15534*t26009*t47840;
  t47844 = 0.50321*t26917*t26945*t47840;
  t47849 = t1648*t47836;
  t47850 = t47849 + t47784;
  t47851 = 0.15121*t47850;
  t47852 = t15534*t25024*t47840;
  t47854 = t26917*t26945*t47840;
  t47855 = t47852 + t47854;
  t47856 = -0.23321*t47855;
  t47857 = t47837 + t47838 + t47841 + t47843 + t47844 + t47851 + t47856;
  t48103 = t4801*t47985;
  t48104 = t47613*t619;
  t48105 = -1.*t47746*t4972*t10889;
  t48106 = t48104 + t48105;
  t48107 = t1648*t48106;
  t48109 = t48103 + t48107;
  t47991 = -1.*t4801*t47985;
  t48136 = -1.*t4801*t48106;
  t48138 = t47995 + t48136;
  t47986 = t10779*t47985;
  t47990 = t4971*t47989;
  t47992 = t1648*t47989;
  t47993 = t47991 + t47992;
  t47994 = 0.15121*t47993;
  t47999 = -0.28121*t18808*t47998;
  t48037 = t43830*t619*t29360*t47746;
  t48038 = -1.*t43830*t41028*t47746*t10889;
  t48039 = t48037 + t48038 + t48023 + t48025 + t48026 + t48030 + t48034;
  t47750 = t29360*t47749;
  t47756 = t41028*t47754;
  t47780 = -0.28121*t18808*t47779;
  t47781 = -0.50321*t15534*t26009*t47779;
  t47782 = 0.50321*t26917*t26945*t47779;
  t47783 = -1.*t1648*t47749;
  t47785 = t47783 + t47784;
  t47786 = 0.15121*t47785;
  t47787 = t15534*t25024*t47779;
  t47788 = t26917*t26945*t47779;
  t47797 = t47787 + t47788;
  t47807 = -0.23321*t47797;
  t47808 = t47750 + t47756 + t47780 + t47781 + t47782 + t47786 + t47807;
  t48186 = t619*t47746*t4972;
  t48187 = t47613*t10889;
  t48189 = t48186 + t48187;
  t48190 = -1.*t4801*t48189;
  t48193 = t48190 + t48107;
  t48130 = t41028*t47985;
  t48132 = t29360*t48106;
  t48133 = -1.*t1648*t48106;
  t48134 = t47991 + t48133;
  t48135 = 0.15121*t48134;
  t48139 = -0.28121*t18808*t48138;
  t48143 = -0.50321*t15534*t26009*t48138;
  t48145 = 0.50321*t26917*t26945*t48138;
  t48146 = t15534*t25024*t48138;
  t48148 = t26917*t26945*t48138;
  t48149 = t48146 + t48148;
  t48152 = -0.23321*t48149;
  t48158 = t48130 + t48132 + t48135 + t48139 + t48143 + t48145 + t48152;
  t47009 = -0.15121*t1648;
  t47010 = t47009 + t29344;
  t48261 = -1.*t1648*t48189;
  t48262 = t48261 + t48136;
  t48059 = 0.28121*t15534*t47746*t4972;
  t48060 = -0.28121*t26917*t48045;
  t48064 = -0.50321*t26945*t48063;
  t48065 = -0.50321*t26009*t48051;
  t48066 = -1.*t26945*t48063;
  t48067 = t25024*t48051;
  t48068 = t48066 + t48067;
  t48069 = -0.23321*t48068;
  t48070 = t48059 + t48060 + t48064 + t48065 + t48069;
  t48119 = -0.28121*t26917*t48109;
  t48120 = 0.50321*t26009*t26917*t48109;
  t48121 = 0.50321*t15534*t26945*t48109;
  t48122 = -1.*t25024*t26917*t48109;
  t48123 = t15534*t26945*t48109;
  t48125 = t48122 + t48123;
  t48127 = -0.23321*t48125;
  t48128 = t48119 + t48120 + t48121 + t48127;
  t48227 = -0.28121*t26917*t48193;
  t48231 = 0.50321*t26009*t26917*t48193;
  t48232 = 0.50321*t15534*t26945*t48193;
  t48233 = -1.*t25024*t26917*t48193;
  t48234 = t15534*t26945*t48193;
  t48239 = t48233 + t48234;
  t48240 = -0.23321*t48239;
  t48241 = t48227 + t48231 + t48232 + t48240;
  t47925 = -0.28121*t15534*t47613*t43830;
  t47927 = -0.28121*t26917*t47865;
  t47945 = -0.50321*t26945*t47943;
  t47953 = -0.50321*t26009*t47889;
  t47968 = -1.*t26945*t47943;
  t47969 = t25024*t47889;
  t47973 = t47968 + t47969;
  t47976 = -0.23321*t47973;
  t47977 = t47925 + t47927 + t47945 + t47953 + t47976;
  t48292 = t1648*t48189;
  t48293 = t4801*t48106;
  t48294 = t48292 + t48293;
  t48295 = -1.*t15534*t48294;
  t48296 = t48000 + t48295;
  t48299 = -1.*t15534*t43830*t47746;
  t48300 = -1.*t26917*t48294;
  t48301 = t48299 + t48300;
  t48319 = t26917*t48294;
  t48320 = t48006 + t48319;
  t48048 = -0.50321*t26945*t48047;
  t48052 = -0.50321*t25024*t48051;
  t48053 = -1.*t26945*t48047;
  t48054 = -1.*t25024*t48051;
  t48055 = t48053 + t48054;
  t48056 = -0.23321*t48055;
  t48057 = t48048 + t48052 + t48056;
  t48110 = 0.50321*t25024*t26917*t48109;
  t48111 = -0.50321*t15534*t26945*t48109;
  t48112 = t25024*t26917*t48109;
  t48113 = -1.*t15534*t26945*t48109;
  t48114 = t48112 + t48113;
  t48115 = -0.23321*t48114;
  t48117 = t48110 + t48111 + t48115;
  t48198 = 0.50321*t25024*t26917*t48193;
  t48202 = -0.50321*t15534*t26945*t48193;
  t48203 = t25024*t26917*t48193;
  t48204 = -1.*t15534*t26945*t48193;
  t48206 = t48203 + t48204;
  t48208 = -0.23321*t48206;
  t48213 = t48198 + t48202 + t48208;
  t47868 = -0.50321*t26945*t47867;
  t47915 = -0.50321*t25024*t47889;
  t47916 = -1.*t26945*t47867;
  t47917 = -1.*t25024*t47889;
  t47920 = t47916 + t47917;
  t47921 = -0.23321*t47920;
  t47922 = t47868 + t47915 + t47921;
  t48298 = -0.50321*t25024*t48296;
  t48302 = -0.50321*t26945*t48301;
  t48303 = -1.*t25024*t48296;
  t48305 = -1.*t26945*t48301;
  t48306 = t48303 + t48305;
  t48311 = -0.23321*t48306;
  t48312 = t48298 + t48302 + t48311;
  t48340 = -1.*t43830*t26917*t47746;
  t48341 = t15534*t48294;
  t48342 = t48340 + t48341;
  t48370 = t43830*t619*t10779*t47746;
  t48371 = 0.28121*t26917*t47746*t4972;
  t48373 = -1.*t43830*t4971*t47746*t10889;
  t48374 = 0.15121*t48022;
  t48375 = -0.28121*t18808*t48045;
  t48376 = -0.50321*t26009*t48047;
  t48378 = -0.50321*t26945*t48051;
  t48379 = t25024*t48047;
  t48381 = -1.*t26945*t48051;
  t48382 = t48379 + t48381;
  t48383 = -0.23321*t48382;
  t48384 = t48370 + t48371 + t48373 + t48374 + t48375 + t48376 + t48378 + t48383;
  t48385 = t4971*t47985;
  t48386 = t10779*t48106;
  t48387 = -0.28121*t18808*t48109;
  t48388 = -0.50321*t15534*t26009*t48109;
  t48389 = 0.50321*t26917*t26945*t48109;
  t48390 = 0.15121*t48138;
  t48391 = t15534*t25024*t48109;
  t48392 = t26917*t26945*t48109;
  t48393 = t48391 + t48392;
  t48394 = -0.23321*t48393;
  t48395 = t48385 + t48386 + t48387 + t48388 + t48389 + t48390 + t48394;
  t48396 = t29360*t48189;
  t48397 = t41028*t48106;
  t48398 = -0.28121*t18808*t48193;
  t48399 = -0.50321*t15534*t26009*t48193;
  t48400 = 0.50321*t26917*t26945*t48193;
  t48401 = 0.15121*t48262;
  t48402 = t15534*t25024*t48193;
  t48403 = t26917*t26945*t48193;
  t48404 = t48402 + t48403;
  t48405 = -0.23321*t48404;
  t48406 = t48396 + t48397 + t48398 + t48399 + t48400 + t48401 + t48405;
  t48353 = -0.28121*t47613*t43830*t26917;
  t48354 = t10779*t47749;
  t48355 = t4971*t47754;
  t48356 = 0.15121*t47779;
  t48357 = -0.28121*t18808*t47865;
  t48358 = -0.50321*t26009*t47867;
  t48360 = -0.50321*t26945*t47889;
  t48361 = t25024*t47867;
  t48362 = -1.*t26945*t47889;
  t48363 = t48361 + t48362;
  t48367 = -0.23321*t48363;
  t48369 = t48353 + t48354 + t48355 + t48356 + t48357 + t48358 + t48360 + t48367;
  t48417 = -0.50321*t26945*t48342;
  t48418 = -0.50321*t25024*t48301;
  t48419 = -1.*t26945*t48342;
  t48420 = -1.*t25024*t48301;
  t48421 = t48419 + t48420;
  t48422 = -0.23321*t48421;
  t48423 = t48417 + t48418 + t48422;
  t48407 = -0.28121*t15534*t43830*t47746;
  t48408 = -0.28121*t26917*t48294;
  t48409 = -0.50321*t26945*t48296;
  t48410 = -0.50321*t26009*t48301;
  t48411 = -1.*t26945*t48296;
  t48413 = t25024*t48301;
  t48414 = t48411 + t48413;
  t48415 = -0.23321*t48414;
  t48416 = t48407 + t48408 + t48409 + t48410 + t48415;
  t48439 = t47613*t43830*t619*t4801;
  t48440 = t1648*t47613*t43830*t10889;
  t48443 = t48439 + t48440;
  t48444 = -0.28121*t18808*t48443;
  t48446 = -0.50321*t15534*t26009*t48443;
  t48447 = 0.50321*t26917*t26945*t48443;
  t48448 = 0.15121*t47683;
  t48449 = t15534*t25024*t48443;
  t48450 = t26917*t26945*t48443;
  t48451 = t48449 + t48450;
  t48452 = -0.23321*t48451;
  t48461 = -1.*t1648*t47613*t43830*t619;
  t48462 = t47613*t43830*t4801*t10889;
  t48463 = t48461 + t48462;
  t48460 = -1.*t47613*t26917*t4972;
  t48464 = t15534*t48463;
  t48465 = t48460 + t48464;
  t48467 = -1.*t15534*t47613*t4972;
  t48468 = -1.*t26917*t48463;
  t48469 = t48467 + t48468;
  t48480 = -1.*t15534*t48463;
  t48481 = t47705 + t48480;
  t48498 = t1648*t47613*t619*t4972;
  t48499 = -1.*t47613*t4801*t4972*t10889;
  t48500 = t48498 + t48499;
  t48502 = t15534*t48500;
  t48503 = t47859 + t48502;
  t48505 = -1.*t26917*t48500;
  t48506 = t47869 + t48505;
  t48436 = t47613*t43830*t619*t4971;
  t48438 = t47613*t43830*t10779*t10889;
  t48453 = t48436 + t48438 + t48444 + t48446 + t48447 + t48448 + t48452;
  t48546 = t4801*t47749;
  t48548 = t619*t47746;
  t48549 = t47613*t4972*t10889;
  t48551 = t48548 + t48549;
  t48552 = t1648*t48551;
  t48553 = t48546 + t48552;
  t48584 = -1.*t4801*t48551;
  t48585 = t47861 + t48584;
  t48456 = -1.*t47613*t43830*t619*t29360;
  t48457 = t47613*t43830*t41028*t10889;
  t48458 = t48456 + t48457 + t48444 + t48446 + t48447 + t48448 + t48452;
  t48598 = -1.*t4801*t47836;
  t48599 = t48598 + t48552;
  t48576 = t41028*t47749;
  t48577 = t29360*t48551;
  t48579 = -1.*t1648*t48551;
  t48580 = t47769 + t48579;
  t48583 = 0.15121*t48580;
  t48586 = -0.28121*t18808*t48585;
  t48587 = -0.50321*t15534*t26009*t48585;
  t48588 = 0.50321*t26917*t26945*t48585;
  t48589 = t15534*t25024*t48585;
  t48590 = t26917*t26945*t48585;
  t48591 = t48589 + t48590;
  t48592 = -0.23321*t48591;
  t48593 = t48576 + t48577 + t48583 + t48586 + t48587 + t48588 + t48592;
  t48621 = -1.*t1648*t47836;
  t48622 = t48621 + t48584;
  t48478 = -0.28121*t15534*t47613*t4972;
  t48479 = -0.28121*t26917*t48463;
  t48482 = -0.50321*t26945*t48481;
  t48483 = -0.50321*t26009*t48469;
  t48484 = -1.*t26945*t48481;
  t48486 = t25024*t48469;
  t48487 = t48484 + t48486;
  t48488 = -0.23321*t48487;
  t48489 = t48478 + t48479 + t48482 + t48483 + t48488;
  t48566 = -0.28121*t26917*t48553;
  t48567 = 0.50321*t26009*t26917*t48553;
  t48569 = 0.50321*t15534*t26945*t48553;
  t48570 = -1.*t25024*t26917*t48553;
  t48571 = t15534*t26945*t48553;
  t48572 = t48570 + t48571;
  t48573 = -0.23321*t48572;
  t48574 = t48566 + t48567 + t48569 + t48573;
  t48608 = -0.28121*t26917*t48599;
  t48609 = 0.50321*t26009*t26917*t48599;
  t48610 = 0.50321*t15534*t26945*t48599;
  t48611 = -1.*t25024*t26917*t48599;
  t48612 = t15534*t26945*t48599;
  t48613 = t48611 + t48612;
  t48614 = -0.23321*t48613;
  t48615 = t48608 + t48609 + t48610 + t48614;
  t48638 = t4801*t48551;
  t48639 = t47849 + t48638;
  t48640 = -1.*t15534*t48639;
  t48641 = t47859 + t48640;
  t48643 = t15534*t47613*t43830;
  t48644 = -1.*t26917*t48639;
  t48645 = t48643 + t48644;
  t48656 = t26917*t48639;
  t48657 = t47869 + t48656;
  t48466 = -0.50321*t26945*t48465;
  t48470 = -0.50321*t25024*t48469;
  t48471 = -1.*t26945*t48465;
  t48472 = -1.*t25024*t48469;
  t48473 = t48471 + t48472;
  t48474 = -0.23321*t48473;
  t48475 = t48466 + t48470 + t48474;
  t48555 = 0.50321*t25024*t26917*t48553;
  t48557 = -0.50321*t15534*t26945*t48553;
  t48558 = t25024*t26917*t48553;
  t48560 = -1.*t15534*t26945*t48553;
  t48562 = t48558 + t48560;
  t48563 = -0.23321*t48562;
  t48564 = t48555 + t48557 + t48563;
  t48600 = 0.50321*t25024*t26917*t48599;
  t48601 = -0.50321*t15534*t26945*t48599;
  t48602 = t25024*t26917*t48599;
  t48603 = -1.*t15534*t26945*t48599;
  t48604 = t48602 + t48603;
  t48605 = -0.23321*t48604;
  t48606 = t48600 + t48601 + t48605;
  t48642 = -0.50321*t25024*t48641;
  t48646 = -0.50321*t26945*t48645;
  t48647 = -1.*t25024*t48641;
  t48648 = -1.*t26945*t48645;
  t48649 = t48647 + t48648;
  t48650 = -0.23321*t48649;
  t48651 = t48642 + t48646 + t48650;
  t48671 = t15534*t48639;
  t48672 = t47928 + t48671;
  p_output1[0]=(t44583 + t44635 + t44731 + t45024 + t45050 - 0.50321*t26009*t45171 - 0.50321*t26945*t45647 - 0.23321*(t25024*t45171 - 1.*t26945*t45647))*var2[4] + t28248*var2[5] + t43364*var2[9] + t46775*var2[10] + t46599*var2[11];
  p_output1[1]=t46870 + t46983 + t28248*var2[4] + (t44583 + t44731 + t45024 + t45050 + t46991 + t46993 + t46999)*var2[5] + t47000*var2[9];
  p_output1[2]=t46870 + t46983 + t43364*var2[4] + t47000*var2[5] + (t45024 + t45050 + t46986 + t46991 + t46993 + t46999 + t43830*t47010*t619)*var2[9];
  p_output1[3]=t46775*var2[4] + t46961*var2[5] + t46961*var2[9] + (t44635 - 0.28121*t15534*t47071 - 0.50321*t26009*t47134 - 0.50321*t26945*t47341 - 0.23321*(t25024*t47134 - 1.*t26945*t47341))*var2[10] + t47284*var2[11];
  p_output1[4]=t46599*var2[4] + t46829*var2[5] + t46829*var2[9] + t47284*var2[10] + (0.50321*t26945*t47220 - 0.50321*t25024*t47416 - 0.23321*(t26945*t47220 - 1.*t25024*t47416))*var2[11];
  p_output1[5]=1.;
  p_output1[6]=0.15121*t22739 + 0.28121*t26917*t43830 - 0.28121*t18808*t45983 - 0.50321*t26009*t46005 - 0.50321*t26945*t46339 - 0.23321*(t25024*t46005 - 1.*t26945*t46339) + t10889*t4971*t4972 - 1.*t10779*t4972*t619;
  p_output1[7]=-1.*t10779*t10889*t43830 + t47491 + t47507 + t47508 + t47511 + t47516 - 1.*t43830*t4971*t619;
  p_output1[8]=-1.*t10889*t41028*t43830 + t47491 + t47507 + t47508 + t47511 + t47516 + t29360*t43830*t619;
  p_output1[9]=-0.28121*t26917*t47071 - 0.50321*t26945*t47134 - 0.50321*t26009*t47220 - 0.23321*(-1.*t26945*t47134 + t25024*t47220) + 0.28121*t15534*t4972;
  p_output1[10]=-0.50321*t25024*t47220 - 0.50321*t26945*t47416 - 0.23321*(-1.*t25024*t47220 - 1.*t26945*t47416);
  p_output1[11]=(t47980 + t47986 + t47990 + t47994 + t47999 - 0.50321*t26009*t48003 - 0.50321*t26945*t48008 - 0.23321*(t25024*t48003 - 1.*t26945*t48008))*var2[3] + t47741*var2[4] + t47857*var2[5] + t47808*var2[9] + t47977*var2[10] + t47922*var2[11];
  p_output1[12]=t47741*var2[3] + (t47980 - 0.28121*t18808*t48081 - 0.50321*t26009*t48085 - 0.50321*t26945*t48088 - 0.23321*(t25024*t48085 - 1.*t26945*t48088) + t10889*t47746*t4971*t4972 - 1.*t10779*t47746*t4972*t619 + 0.15121*(t10889*t1648*t47746*t4972 + t47746*t4801*t4972*t619))*var2[4] + t48035*var2[5] + t48039*var2[9] + t48070*var2[10] + t48057*var2[11];
  p_output1[13]=t47857*var2[3] + t48035*var2[4] + (t47986 + t47990 + t47994 - 0.50321*t15534*t26009*t47998 + 0.50321*t26917*t26945*t47998 - 0.23321*(t15534*t25024*t47998 + t26917*t26945*t47998) + t47999)*var2[5] + t48158*var2[9] + t48128*var2[10] + t48117*var2[11];
  p_output1[14]=t47808*var2[3] + t48039*var2[4] + t48158*var2[5] + (t48132 + t47010*t48189 + 0.15121*(t48133 + t4801*t48189) - 0.28121*t18808*t48262 - 0.50321*t15534*t26009*t48262 + 0.50321*t26917*t26945*t48262 - 0.23321*(t15534*t25024*t48262 + t26917*t26945*t48262))*var2[9] + t48241*var2[10] + t48213*var2[11];
  p_output1[15]=t47977*var2[3] + t48070*var2[4] + t48128*var2[5] + t48241*var2[9] + (t47980 - 0.28121*t15534*t48294 - 0.50321*t26009*t48296 - 0.50321*t26945*t48320 - 0.23321*(t25024*t48296 - 1.*t26945*t48320))*var2[10] + t48312*var2[11];
  p_output1[16]=t47922*var2[3] + t48057*var2[4] + t48117*var2[5] + t48213*var2[9] + t48312*var2[10] + (0.50321*t26945*t48301 - 0.50321*t25024*t48342 - 0.23321*(t26945*t48301 - 1.*t25024*t48342))*var2[11];
  p_output1[17]=1.;
  p_output1[18]=t48369;
  p_output1[19]=t48384;
  p_output1[20]=t48395;
  p_output1[21]=t48406;
  p_output1[22]=t48416;
  p_output1[23]=t48423;
  p_output1[24]=t48369*var2[3] + t48384*var2[4] + t48395*var2[5] + t48406*var2[9] + t48416*var2[10] + t48423*var2[11];
  p_output1[25]=t48384*var2[3] + (t48353 - 0.28121*t18808*t48500 - 0.50321*t26009*t48503 - 0.50321*t26945*t48506 - 0.23321*(t25024*t48503 - 1.*t26945*t48506) - 1.*t10889*t47613*t4971*t4972 + t10779*t47613*t4972*t619 + 0.15121*(-1.*t10889*t1648*t47613*t4972 - 1.*t47613*t4801*t4972*t619))*var2[4] + t48453*var2[5] + t48458*var2[9] + t48489*var2[10] + t48475*var2[11];
  p_output1[26]=t48395*var2[3] + t48453*var2[4] + (-0.50321*t15534*t26009*t47865 + 0.50321*t26917*t26945*t47865 - 0.23321*(t15534*t25024*t47865 + t26917*t26945*t47865) + t48354 + t48355 + t48356 + t48357)*var2[5] + t48593*var2[9] + t48574*var2[10] + t48564*var2[11];
  p_output1[27]=t48406*var2[3] + t48458*var2[4] + t48593*var2[5] + (t47010*t47836 + t48577 + 0.15121*(t47839 + t48579) - 0.28121*t18808*t48622 - 0.50321*t15534*t26009*t48622 + 0.50321*t26917*t26945*t48622 - 0.23321*(t15534*t25024*t48622 + t26917*t26945*t48622))*var2[9] + t48615*var2[10] + t48606*var2[11];
  p_output1[28]=t48416*var2[3] + t48489*var2[4] + t48574*var2[5] + t48615*var2[9] + (t48353 - 0.28121*t15534*t48639 - 0.50321*t26009*t48641 - 0.50321*t26945*t48657 - 0.23321*(t25024*t48641 - 1.*t26945*t48657))*var2[10] + t48651*var2[11];
  p_output1[29]=t48423*var2[3] + t48475*var2[4] + t48564*var2[5] + t48606*var2[9] + t48651*var2[10] + (0.50321*t26945*t48645 - 0.50321*t25024*t48672 - 0.23321*(t26945*t48645 - 1.*t25024*t48672))*var2[11];
  p_output1[30]=1.;
  p_output1[31]=-0.28121*t26917*t43830*t47746 + t10779*t48189 + 0.15121*t48193 - 0.28121*t18808*t48294 + t48302 - 0.50321*t26009*t48342 - 0.23321*(t48305 + t25024*t48342) + t48106*t4971;
  p_output1[32]=0.15121*t48443 - 0.28121*t18808*t48463 - 0.50321*t26009*t48465 - 0.50321*t26945*t48469 - 0.23321*(t25024*t48465 - 1.*t26945*t48469) + t10889*t43830*t47613*t4971 - 0.28121*t26917*t47613*t4972 - 1.*t10779*t43830*t47613*t619;
  p_output1[33]=t10779*t48551 - 0.28121*t18808*t48553 - 0.50321*t15534*t26009*t48553 + 0.50321*t26917*t26945*t48553 - 0.23321*(t15534*t25024*t48553 + t26917*t26945*t48553) + 0.15121*t48585 + t47749*t4971;
  p_output1[34]=t29360*t47836 + t41028*t48551 - 0.28121*t18808*t48599 - 0.50321*t15534*t26009*t48599 + 0.50321*t26917*t26945*t48599 - 0.23321*(t15534*t25024*t48599 + t26917*t26945*t48599) + 0.15121*t48622;
  p_output1[35]=0.28121*t15534*t43830*t47613 - 0.28121*t26917*t48639 - 0.50321*t26945*t48641 - 0.50321*t26009*t48645 - 0.23321*(-1.*t26945*t48641 + t25024*t48645);
  p_output1[36]=-0.50321*t25024*t48645 - 0.50321*t26945*t48672 - 0.23321*(-1.*t25024*t48645 - 1.*t26945*t48672);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 37, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_initial_swing_velocity_RlFoot_ParallelStance.hh"

namespace ParallelStance
{

void J_initial_swing_velocity_RlFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
