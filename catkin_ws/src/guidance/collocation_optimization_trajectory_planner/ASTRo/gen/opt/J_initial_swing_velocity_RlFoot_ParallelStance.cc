/*
 * Automatically Generated from Mathematica.
 * Sat 28 May 2022 17:01:30 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t176;
  double t384;
  double t571;
  double t1628;
  double t1732;
  double t2131;
  double t169;
  double t11306;
  double t13425;
  double t14045;
  double t18386;
  double t18416;
  double t18424;
  double t18925;
  double t18973;
  double t22583;
  double t13734;
  double t13783;
  double t18420;
  double t18426;
  double t18427;
  double t18436;
  double t20226;
  double t22169;
  double t22170;
  double t22172;
  double t22175;
  double t22213;
  double t22391;
  double t22422;
  double t22484;
  double t6394;
  double t6663;
  double t23383;
  double t893;
  double t2081;
  double t24142;
  double t24173;
  double t24186;
  double t24217;
  double t24243;
  double t24409;
  double t24457;
  double t24692;
  double t24769;
  double t25281;
  double t25287;
  double t25321;
  double t25220;
  double t25355;
  double t25363;
  double t25366;
  double t25367;
  double t25368;
  double t25445;
  double t25446;
  double t25449;
  double t25524;
  double t25525;
  double t25526;
  double t22633;
  double t22594;
  double t22613;
  double t23885;
  double t23925;
  double t24097;
  double t24121;
  double t24200;
  double t23565;
  double t23822;
  double t25617;
  double t25622;
  double t25623;
  double t25707;
  double t25747;
  double t25750;
  double t5309;
  double t11560;
  double t22501;
  double t25535;
  double t25541;
  double t25546;
  double t25548;
  double t25549;
  double t25550;
  double t25551;
  double t25561;
  double t25573;
  double t25576;
  double t25586;
  double t25594;
  double t25596;
  double t25597;
  double t25598;
  double t25600;
  double t25610;
  double t25613;
  double t25611;
  double t25751;
  double t22628;
  double t22665;
  double t22750;
  double t25875;
  double t25894;
  double t25905;
  double t25918;
  double t25919;
  double t25925;
  double t25930;
  double t25933;
  double t23589;
  double t26034;
  double t26039;
  double t25404;
  double t25426;
  double t25473;
  double t25475;
  double t25476;
  double t25478;
  double t25479;
  double t25480;
  double t25485;
  double t25920;
  double t25934;
  double t25962;
  double t25997;
  double t26006;
  double t26008;
  double t26016;
  double t26084;
  double t26088;
  double t26092;
  double t25365;
  double t25371;
  double t25378;
  double t25384;
  double t25392;
  double t25393;
  double t25397;
  double t26125;
  double t26127;
  double t26128;
  double t26131;
  double t26132;
  double t26133;
  double t26134;
  double t26136;
  double t26170;
  double t26185;
  double t26186;
  double t26187;
  double t26190;
  double t26191;
  double t26192;
  double t26198;
  double t26201;
  double t26202;
  double t26253;
  double t26251;
  double t26255;
  double t26256;
  double t26258;
  double t26259;
  double t26260;
  double t26262;
  double t26263;
  double t26264;
  double t26281;
  double t26282;
  double t26283;
  double t26289;
  double t26290;
  double t26271;
  double t26321;
  double t26326;
  double t26327;
  double t26319;
  double t26328;
  double t26329;
  double t26335;
  double t26337;
  double t26339;
  double t26350;
  double t26353;
  double t26354;
  double t26371;
  double t26372;
  double t26373;
  double t26380;
  double t26382;
  double t26383;
  double t26391;
  double t26392;
  double t26393;
  double t26395;
  double t26396;
  double t26397;
  double t26399;
  double t26400;
  double t26401;
  double t26412;
  double t26413;
  double t26414;
  double t26415;
  double t26416;
  double t26417;
  double t26418;
  double t26419;
  double t26420;
  double t26421;
  double t26423;
  double t26424;
  double t26425;
  double t26426;
  double t26171;
  double t26176;
  double t26177;
  double t26179;
  double t26180;
  double t26181;
  double t26184;
  double t26189;
  double t26195;
  double t26203;
  double t26206;
  double t26215;
  double t26218;
  double t26246;
  double t26247;
  double t26436;
  double t26438;
  double t26439;
  double t26435;
  double t26447;
  double t26448;
  double t26463;
  double t26466;
  double t26467;
  double t26501;
  double t26505;
  double t26507;
  double t26368;
  double t26541;
  double t26542;
  double t26544;
  double t26547;
  double t26549;
  double t26551;
  double t26553;
  double t26410;
  double t26411;
  double t26427;
  double t26284;
  double t26287;
  double t26292;
  double t26295;
  double t26297;
  double t26299;
  double t26300;
  double t26302;
  double t26304;
  double t26305;
  double t26306;
  double t26308;
  double t26309;
  double t26580;
  double t26581;
  double t26584;
  double t26586;
  double t26587;
  double t26631;
  double t26387;
  double t26702;
  double t26703;
  double t26379;
  double t26385;
  double t26388;
  double t26389;
  double t26390;
  double t26394;
  double t26429;
  double t26430;
  double t26431;
  double t26257;
  double t26261;
  double t26265;
  double t26267;
  double t26268;
  double t26270;
  double t26272;
  double t26273;
  double t26274;
  double t26275;
  double t26277;
  double t26278;
  double t26279;
  double t26769;
  double t26775;
  double t26778;
  double t26779;
  double t26783;
  double t26682;
  double t26684;
  double t26686;
  double t26692;
  double t26693;
  double t26704;
  double t26705;
  double t26706;
  double t26707;
  double t26708;
  double t26709;
  double t26710;
  double t26713;
  double t25789;
  double t25812;
  double t26825;
  double t26826;
  double t26496;
  double t26498;
  double t26510;
  double t26514;
  double t26523;
  double t26526;
  double t26527;
  double t26529;
  double t26531;
  double t26669;
  double t26670;
  double t26672;
  double t26673;
  double t26676;
  double t26677;
  double t26678;
  double t26680;
  double t26803;
  double t26804;
  double t26806;
  double t26807;
  double t26810;
  double t26811;
  double t26812;
  double t26815;
  double t26348;
  double t26349;
  double t26355;
  double t26357;
  double t26359;
  double t26360;
  double t26362;
  double t26363;
  double t26364;
  double t26858;
  double t26859;
  double t26860;
  double t26861;
  double t26862;
  double t26867;
  double t26868;
  double t26870;
  double t26887;
  double t26888;
  double t26462;
  double t26473;
  double t26478;
  double t26479;
  double t26491;
  double t26493;
  double t26494;
  double t26639;
  double t26650;
  double t26655;
  double t26656;
  double t26657;
  double t26664;
  double t26665;
  double t26784;
  double t26789;
  double t26792;
  double t26794;
  double t26797;
  double t26799;
  double t26800;
  double t26332;
  double t26340;
  double t26341;
  double t26343;
  double t26344;
  double t26345;
  double t26346;
  double t26863;
  double t26875;
  double t26876;
  double t26877;
  double t26878;
  double t26880;
  double t26881;
  double t26914;
  double t26915;
  double t26916;
  double t26940;
  double t26943;
  double t26947;
  double t26948;
  double t26949;
  double t26950;
  double t26951;
  double t26952;
  double t26953;
  double t26954;
  double t26955;
  double t26956;
  double t26957;
  double t26958;
  double t26959;
  double t26960;
  double t26962;
  double t26964;
  double t26967;
  double t26999;
  double t27000;
  double t27001;
  double t27002;
  double t27004;
  double t27007;
  double t27018;
  double t27019;
  double t27025;
  double t27028;
  double t27029;
  double t27030;
  double t27039;
  double t27040;
  double t27044;
  double t26928;
  double t26929;
  double t26930;
  double t26931;
  double t26932;
  double t26933;
  double t26934;
  double t26935;
  double t26936;
  double t26937;
  double t26938;
  double t26939;
  double t27074;
  double t27076;
  double t27078;
  double t27083;
  double t27085;
  double t27087;
  double t27088;
  double t27046;
  double t27050;
  double t27052;
  double t27055;
  double t27063;
  double t27066;
  double t27068;
  double t27072;
  double t27073;
  double t27113;
  double t27115;
  double t27117;
  double t27118;
  double t27119;
  double t27120;
  double t27121;
  double t27122;
  double t27123;
  double t27124;
  double t27125;
  double t27141;
  double t27151;
  double t27152;
  double t27140;
  double t27154;
  double t27155;
  double t27159;
  double t27161;
  double t27163;
  double t27183;
  double t27185;
  double t27204;
  double t27205;
  double t27206;
  double t27208;
  double t27209;
  double t27211;
  double t27225;
  double t27111;
  double t27112;
  double t27128;
  double t27300;
  double t27302;
  double t27304;
  double t27305;
  double t27311;
  double t27312;
  double t27374;
  double t27375;
  double t27130;
  double t27133;
  double t27135;
  double t27423;
  double t27424;
  double t27355;
  double t27357;
  double t27361;
  double t27366;
  double t27372;
  double t27376;
  double t27381;
  double t27383;
  double t27384;
  double t27386;
  double t27394;
  double t27395;
  double t27404;
  double t27474;
  double t27475;
  double t27179;
  double t27181;
  double t27186;
  double t27187;
  double t27188;
  double t27189;
  double t27190;
  double t27191;
  double t27192;
  double t27327;
  double t27334;
  double t27337;
  double t27338;
  double t27340;
  double t27341;
  double t27342;
  double t27344;
  double t27438;
  double t27439;
  double t27442;
  double t27445;
  double t27448;
  double t27449;
  double t27450;
  double t27455;
  double t27513;
  double t27515;
  double t27517;
  double t27518;
  double t27521;
  double t27524;
  double t27525;
  double t27545;
  double t27551;
  double t27157;
  double t27164;
  double t27168;
  double t27171;
  double t27173;
  double t27174;
  double t27175;
  double t27313;
  double t27315;
  double t27317;
  double t27322;
  double t27323;
  double t27324;
  double t27325;
  double t27425;
  double t27427;
  double t27428;
  double t27429;
  double t27431;
  double t27432;
  double t27433;
  double t27519;
  double t27527;
  double t27528;
  double t27529;
  double t27530;
  double t27532;
  double t27537;
  double t27581;
  double t27582;
  t176 = Cos(var1[9]);
  t384 = -1.*t176;
  t571 = 1. + t384;
  t1628 = Sin(var1[9]);
  t1732 = 0.15121*t1628;
  t2131 = Sin(var1[4]);
  t169 = Cos(var1[5]);
  t11306 = Sin(var1[5]);
  t13425 = Cos(var1[10]);
  t14045 = t169*t1628*t2131;
  t18386 = t176*t2131*t11306;
  t18416 = t14045 + t18386;
  t18424 = Cos(var1[11]);
  t18925 = Sin(var1[10]);
  t18973 = Sin(var1[11]);
  t22583 = 0.15121*t176;
  t13734 = -1.*t13425;
  t13783 = 1. + t13734;
  t18420 = -0.28121*t13783*t18416;
  t18426 = -1.*t18424;
  t18427 = 1. + t18426;
  t18436 = -0.50321*t13425*t18427*t18416;
  t20226 = 0.50321*t18925*t18973*t18416;
  t22169 = t176*t169*t2131;
  t22170 = -1.*t1628*t2131*t11306;
  t22172 = t22169 + t22170;
  t22175 = 0.15121*t22172;
  t22213 = t13425*t18424*t18416;
  t22391 = t18925*t18973*t18416;
  t22422 = t22213 + t22391;
  t22484 = -0.19821*t22422;
  t6394 = -0.15121*t571;
  t6663 = t6394 + t1732;
  t23383 = Cos(var1[4]);
  t893 = 0.15121*t571;
  t2081 = t893 + t1732;
  t24142 = -1.*t176*t23383*t169;
  t24173 = t23383*t1628*t11306;
  t24186 = t24142 + t24173;
  t24217 = -1.*t18925*t2131;
  t24243 = t13425*t24186;
  t24409 = t24217 + t24243;
  t24457 = -1.*t13425*t2131;
  t24692 = -1.*t18925*t24186;
  t24769 = t24457 + t24692;
  t25281 = -1.*t176*t169*t2131;
  t25287 = t1628*t2131*t11306;
  t25321 = t25281 + t25287;
  t25220 = t23383*t18925;
  t25355 = t13425*t25321;
  t25363 = t25220 + t25355;
  t25366 = t13425*t23383;
  t25367 = -1.*t18925*t25321;
  t25368 = t25366 + t25367;
  t25445 = -1.*t23383*t18925;
  t25446 = -1.*t13425*t25321;
  t25449 = t25445 + t25446;
  t25524 = -1.*t23383*t169*t1628;
  t25525 = -1.*t176*t23383*t11306;
  t25526 = t25524 + t25525;
  t22633 = t22583 + t1732;
  t22594 = -0.15121*t1628;
  t22613 = t22583 + t22594;
  t23885 = t23383*t169*t1628;
  t23925 = t176*t23383*t11306;
  t24097 = t23885 + t23925;
  t24121 = 0.15121*t24097;
  t24200 = -0.28121*t13783*t24186;
  t23565 = -1.*t23383*t169*t6663;
  t23822 = t23383*t2081*t11306;
  t25617 = -0.50321*t13425*t18427*t24186;
  t25622 = 0.50321*t18925*t18973*t24186;
  t25623 = t13425*t18424*t24186;
  t25707 = t18925*t18973*t24186;
  t25747 = t25623 + t25707;
  t25750 = -0.19821*t25747;
  t5309 = t169*t2081*t2131;
  t11560 = t6663*t2131*t11306;
  t22501 = t5309 + t11560 + t18420 + t18436 + t20226 + t22175 + t22484;
  t25535 = 0.50321*t18424*t18925*t25526;
  t25541 = -0.50321*t13425*t18973*t25526;
  t25546 = t18424*t18925*t25526;
  t25548 = -1.*t13425*t18973*t25526;
  t25549 = t25546 + t25548;
  t25550 = -0.19821*t25549;
  t25551 = t25535 + t25541 + t25550;
  t25561 = var2[11]*t25551;
  t25573 = -0.28121*t18925*t25526;
  t25576 = 0.50321*t18427*t18925*t25526;
  t25586 = 0.50321*t13425*t18973*t25526;
  t25594 = -1.*t18424*t18925*t25526;
  t25596 = t13425*t18973*t25526;
  t25597 = t25594 + t25596;
  t25598 = -0.19821*t25597;
  t25600 = t25573 + t25576 + t25586 + t25598;
  t25610 = var2[10]*t25600;
  t25613 = -1.*t23383*t22613*t11306;
  t25611 = -1.*t23383*t169*t22633;
  t25751 = t25611 + t25613 + t24121 + t24200 + t25617 + t25622 + t25750;
  t22628 = -1.*t169*t22613*t2131;
  t22665 = t22633*t2131*t11306;
  t22750 = t22628 + t22665 + t18420 + t18436 + t20226 + t22175 + t22484;
  t25875 = t176*t23383*t169;
  t25894 = -1.*t23383*t1628*t11306;
  t25905 = t25875 + t25894;
  t25918 = -1.*t13425*t25905;
  t25919 = t24217 + t25918;
  t25925 = t13425*t2131;
  t25930 = -1.*t18925*t25905;
  t25933 = t25925 + t25930;
  t23589 = -0.28121*t18925*t2131;
  t26034 = t18925*t25905;
  t26039 = t24457 + t26034;
  t25404 = 0.28121*t13425*t23383;
  t25426 = -0.28121*t18925*t25321;
  t25473 = -0.50321*t18973*t25449;
  t25475 = -0.50321*t18427*t25368;
  t25476 = -1.*t18973*t25449;
  t25478 = t18424*t25368;
  t25479 = t25476 + t25478;
  t25480 = -0.19821*t25479;
  t25485 = t25404 + t25426 + t25473 + t25475 + t25480;
  t25920 = -0.50321*t18424*t25919;
  t25934 = -0.50321*t18973*t25933;
  t25962 = -1.*t18424*t25919;
  t25997 = -1.*t18973*t25933;
  t26006 = t25962 + t25997;
  t26008 = -0.19821*t26006;
  t26016 = t25920 + t25934 + t26008;
  t26084 = t18925*t2131;
  t26088 = t13425*t25905;
  t26092 = t26084 + t26088;
  t25365 = -0.50321*t18973*t25363;
  t25371 = -0.50321*t18424*t25368;
  t25378 = -1.*t18973*t25363;
  t25384 = -1.*t18424*t25368;
  t25392 = t25378 + t25384;
  t25393 = -0.19821*t25392;
  t25397 = t25365 + t25371 + t25393;
  t26125 = -0.28121*t13783*t25526;
  t26127 = -0.50321*t13425*t18427*t25526;
  t26128 = 0.50321*t18925*t18973*t25526;
  t26131 = 0.15121*t24186;
  t26132 = t13425*t18424*t25526;
  t26133 = t18925*t18973*t25526;
  t26134 = t26132 + t26133;
  t26136 = -0.19821*t26134;
  t26170 = Cos(var1[3]);
  t26185 = t176*t26170*t23383*t169;
  t26186 = -1.*t26170*t23383*t1628*t11306;
  t26187 = t26185 + t26186;
  t26190 = t26170*t18925*t2131;
  t26191 = t13425*t26187;
  t26192 = t26190 + t26191;
  t26198 = t13425*t26170*t2131;
  t26201 = -1.*t18925*t26187;
  t26202 = t26198 + t26201;
  t26253 = Sin(var1[3]);
  t26251 = t26170*t169*t2131;
  t26255 = -1.*t26253*t11306;
  t26256 = t26251 + t26255;
  t26258 = -1.*t169*t26253;
  t26259 = -1.*t26170*t2131*t11306;
  t26260 = t26258 + t26259;
  t26262 = -1.*t1628*t26256;
  t26263 = t176*t26260;
  t26264 = t26262 + t26263;
  t26281 = -1.*t26170*t169*t2131;
  t26282 = t26253*t11306;
  t26283 = t26281 + t26282;
  t26289 = t1628*t26283;
  t26290 = t26289 + t26263;
  t26271 = -1.*t1628*t26260;
  t26321 = t176*t26256;
  t26326 = t1628*t26260;
  t26327 = t26321 + t26326;
  t26319 = -1.*t26170*t23383*t18925;
  t26328 = t13425*t26327;
  t26329 = t26319 + t26328;
  t26335 = -1.*t13425*t26170*t23383;
  t26337 = -1.*t18925*t26327;
  t26339 = t26335 + t26337;
  t26350 = t26170*t23383*t18925;
  t26353 = -1.*t13425*t26327;
  t26354 = t26350 + t26353;
  t26371 = -1.*t169*t26253*t2131;
  t26372 = -1.*t26170*t11306;
  t26373 = t26371 + t26372;
  t26380 = -1.*t26170*t169;
  t26382 = t26253*t2131*t11306;
  t26383 = t26380 + t26382;
  t26391 = t176*t26373;
  t26392 = t1628*t26383;
  t26393 = t26391 + t26392;
  t26395 = t23383*t18925*t26253;
  t26396 = t13425*t26393;
  t26397 = t26395 + t26396;
  t26399 = t13425*t23383*t26253;
  t26400 = -1.*t18925*t26393;
  t26401 = t26399 + t26400;
  t26412 = -1.*t23383*t169*t1628*t26253;
  t26413 = -1.*t176*t23383*t26253*t11306;
  t26414 = t26412 + t26413;
  t26415 = -0.28121*t13783*t26414;
  t26416 = -0.50321*t13425*t18427*t26414;
  t26417 = 0.50321*t18925*t18973*t26414;
  t26418 = -1.*t176*t23383*t169*t26253;
  t26419 = t23383*t1628*t26253*t11306;
  t26420 = t26418 + t26419;
  t26421 = 0.15121*t26420;
  t26423 = t13425*t18424*t26414;
  t26424 = t18925*t18973*t26414;
  t26425 = t26423 + t26424;
  t26426 = -0.19821*t26425;
  t26171 = t26170*t23383*t169*t6663;
  t26176 = 0.28121*t26170*t18925*t2131;
  t26177 = -1.*t26170*t23383*t2081*t11306;
  t26179 = -1.*t26170*t23383*t169*t1628;
  t26180 = -1.*t176*t26170*t23383*t11306;
  t26181 = t26179 + t26180;
  t26184 = 0.15121*t26181;
  t26189 = -0.28121*t13783*t26187;
  t26195 = -0.50321*t18427*t26192;
  t26203 = -0.50321*t18973*t26202;
  t26206 = t18424*t26192;
  t26215 = -1.*t18973*t26202;
  t26218 = t26206 + t26215;
  t26246 = -0.19821*t26218;
  t26247 = t26171 + t26176 + t26177 + t26184 + t26189 + t26195 + t26203 + t26246;
  t26436 = t176*t23383*t169*t26253;
  t26438 = -1.*t23383*t1628*t26253*t11306;
  t26439 = t26436 + t26438;
  t26435 = t18925*t26253*t2131;
  t26447 = t13425*t26439;
  t26448 = t26435 + t26447;
  t26463 = t13425*t26253*t2131;
  t26466 = -1.*t18925*t26439;
  t26467 = t26463 + t26466;
  t26501 = -1.*t18925*t26253*t2131;
  t26505 = -1.*t13425*t26439;
  t26507 = t26501 + t26505;
  t26368 = 0.28121*t23383*t18925*t26253;
  t26541 = -1.*t176*t169*t26253*t2131;
  t26542 = t1628*t26253*t2131*t11306;
  t26544 = t26541 + t26542;
  t26547 = t13425*t26544;
  t26549 = t26395 + t26547;
  t26551 = -1.*t18925*t26544;
  t26553 = t26399 + t26551;
  t26410 = -1.*t23383*t169*t2081*t26253;
  t26411 = -1.*t23383*t6663*t26253*t11306;
  t26427 = t26410 + t26411 + t26415 + t26416 + t26417 + t26421 + t26426;
  t26284 = t2081*t26283;
  t26287 = t6663*t26260;
  t26292 = -0.28121*t13783*t26290;
  t26295 = -0.50321*t13425*t18427*t26290;
  t26297 = 0.50321*t18925*t18973*t26290;
  t26299 = t176*t26283;
  t26300 = t26299 + t26271;
  t26302 = 0.15121*t26300;
  t26304 = t13425*t18424*t26290;
  t26305 = t18925*t18973*t26290;
  t26306 = t26304 + t26305;
  t26308 = -0.19821*t26306;
  t26309 = t26284 + t26287 + t26292 + t26295 + t26297 + t26302 + t26308;
  t26580 = t1628*t26373;
  t26581 = t26170*t169;
  t26584 = -1.*t26253*t2131*t11306;
  t26586 = t26581 + t26584;
  t26587 = t176*t26586;
  t26631 = t26580 + t26587;
  t26387 = -1.*t1628*t26373;
  t26702 = -1.*t1628*t26586;
  t26703 = t26391 + t26702;
  t26379 = t6663*t26373;
  t26385 = t2081*t26383;
  t26388 = t176*t26383;
  t26389 = t26387 + t26388;
  t26390 = 0.15121*t26389;
  t26394 = -0.28121*t13783*t26393;
  t26429 = t23383*t169*t22613*t26253;
  t26430 = -1.*t23383*t22633*t26253*t11306;
  t26431 = t26429 + t26430 + t26415 + t26416 + t26417 + t26421 + t26426;
  t26257 = t22613*t26256;
  t26261 = t22633*t26260;
  t26265 = -0.28121*t13783*t26264;
  t26267 = -0.50321*t13425*t18427*t26264;
  t26268 = 0.50321*t18925*t18973*t26264;
  t26270 = -1.*t176*t26256;
  t26272 = t26270 + t26271;
  t26273 = 0.15121*t26272;
  t26274 = t13425*t18424*t26264;
  t26275 = t18925*t18973*t26264;
  t26277 = t26274 + t26275;
  t26278 = -0.19821*t26277;
  t26279 = t26257 + t26261 + t26265 + t26267 + t26268 + t26273 + t26278;
  t26769 = t169*t26253*t2131;
  t26775 = t26170*t11306;
  t26778 = t26769 + t26775;
  t26779 = -1.*t1628*t26778;
  t26783 = t26779 + t26587;
  t26682 = t22633*t26373;
  t26684 = t22613*t26586;
  t26686 = -1.*t176*t26586;
  t26692 = t26387 + t26686;
  t26693 = 0.15121*t26692;
  t26704 = -0.28121*t13783*t26703;
  t26705 = -0.50321*t13425*t18427*t26703;
  t26706 = 0.50321*t18925*t18973*t26703;
  t26707 = t13425*t18424*t26703;
  t26708 = t18925*t18973*t26703;
  t26709 = t26707 + t26708;
  t26710 = -0.19821*t26709;
  t26713 = t26682 + t26684 + t26693 + t26704 + t26705 + t26706 + t26710;
  t25789 = -0.15121*t176;
  t25812 = t25789 + t22594;
  t26825 = -1.*t176*t26778;
  t26826 = t26825 + t26702;
  t26496 = 0.28121*t13425*t26253*t2131;
  t26498 = -0.28121*t18925*t26439;
  t26510 = -0.50321*t18973*t26507;
  t26514 = -0.50321*t18427*t26467;
  t26523 = -1.*t18973*t26507;
  t26526 = t18424*t26467;
  t26527 = t26523 + t26526;
  t26529 = -0.19821*t26527;
  t26531 = t26496 + t26498 + t26510 + t26514 + t26529;
  t26669 = -0.28121*t18925*t26631;
  t26670 = 0.50321*t18427*t18925*t26631;
  t26672 = 0.50321*t13425*t18973*t26631;
  t26673 = -1.*t18424*t18925*t26631;
  t26676 = t13425*t18973*t26631;
  t26677 = t26673 + t26676;
  t26678 = -0.19821*t26677;
  t26680 = t26669 + t26670 + t26672 + t26678;
  t26803 = -0.28121*t18925*t26783;
  t26804 = 0.50321*t18427*t18925*t26783;
  t26806 = 0.50321*t13425*t18973*t26783;
  t26807 = -1.*t18424*t18925*t26783;
  t26810 = t13425*t18973*t26783;
  t26811 = t26807 + t26810;
  t26812 = -0.19821*t26811;
  t26815 = t26803 + t26804 + t26806 + t26812;
  t26348 = -0.28121*t13425*t26170*t23383;
  t26349 = -0.28121*t18925*t26327;
  t26355 = -0.50321*t18973*t26354;
  t26357 = -0.50321*t18427*t26339;
  t26359 = -1.*t18973*t26354;
  t26360 = t18424*t26339;
  t26362 = t26359 + t26360;
  t26363 = -0.19821*t26362;
  t26364 = t26348 + t26349 + t26355 + t26357 + t26363;
  t26858 = t176*t26778;
  t26859 = t1628*t26586;
  t26860 = t26858 + t26859;
  t26861 = -1.*t13425*t26860;
  t26862 = t26395 + t26861;
  t26867 = -1.*t13425*t23383*t26253;
  t26868 = -1.*t18925*t26860;
  t26870 = t26867 + t26868;
  t26887 = t18925*t26860;
  t26888 = t26399 + t26887;
  t26462 = -0.50321*t18973*t26448;
  t26473 = -0.50321*t18424*t26467;
  t26478 = -1.*t18973*t26448;
  t26479 = -1.*t18424*t26467;
  t26491 = t26478 + t26479;
  t26493 = -0.19821*t26491;
  t26494 = t26462 + t26473 + t26493;
  t26639 = 0.50321*t18424*t18925*t26631;
  t26650 = -0.50321*t13425*t18973*t26631;
  t26655 = t18424*t18925*t26631;
  t26656 = -1.*t13425*t18973*t26631;
  t26657 = t26655 + t26656;
  t26664 = -0.19821*t26657;
  t26665 = t26639 + t26650 + t26664;
  t26784 = 0.50321*t18424*t18925*t26783;
  t26789 = -0.50321*t13425*t18973*t26783;
  t26792 = t18424*t18925*t26783;
  t26794 = -1.*t13425*t18973*t26783;
  t26797 = t26792 + t26794;
  t26799 = -0.19821*t26797;
  t26800 = t26784 + t26789 + t26799;
  t26332 = -0.50321*t18973*t26329;
  t26340 = -0.50321*t18424*t26339;
  t26341 = -1.*t18973*t26329;
  t26343 = -1.*t18424*t26339;
  t26344 = t26341 + t26343;
  t26345 = -0.19821*t26344;
  t26346 = t26332 + t26340 + t26345;
  t26863 = -0.50321*t18424*t26862;
  t26875 = -0.50321*t18973*t26870;
  t26876 = -1.*t18424*t26862;
  t26877 = -1.*t18973*t26870;
  t26878 = t26876 + t26877;
  t26880 = -0.19821*t26878;
  t26881 = t26863 + t26875 + t26880;
  t26914 = -1.*t23383*t18925*t26253;
  t26915 = t13425*t26860;
  t26916 = t26914 + t26915;
  t26940 = t23383*t169*t6663*t26253;
  t26943 = 0.28121*t18925*t26253*t2131;
  t26947 = -1.*t23383*t2081*t26253*t11306;
  t26948 = 0.15121*t26414;
  t26949 = -0.28121*t13783*t26439;
  t26950 = -0.50321*t18427*t26448;
  t26951 = -0.50321*t18973*t26467;
  t26952 = t18424*t26448;
  t26953 = -1.*t18973*t26467;
  t26954 = t26952 + t26953;
  t26955 = -0.19821*t26954;
  t26956 = t26940 + t26943 + t26947 + t26948 + t26949 + t26950 + t26951 + t26955;
  t26957 = t2081*t26373;
  t26958 = t6663*t26586;
  t26959 = -0.28121*t13783*t26631;
  t26960 = -0.50321*t13425*t18427*t26631;
  t26962 = 0.50321*t18925*t18973*t26631;
  t26964 = 0.15121*t26703;
  t26967 = t13425*t18424*t26631;
  t26999 = t18925*t18973*t26631;
  t27000 = t26967 + t26999;
  t27001 = -0.19821*t27000;
  t27002 = t26957 + t26958 + t26959 + t26960 + t26962 + t26964 + t27001;
  t27004 = t22613*t26778;
  t27007 = t22633*t26586;
  t27018 = -0.28121*t13783*t26783;
  t27019 = -0.50321*t13425*t18427*t26783;
  t27025 = 0.50321*t18925*t18973*t26783;
  t27028 = 0.15121*t26826;
  t27029 = t13425*t18424*t26783;
  t27030 = t18925*t18973*t26783;
  t27039 = t27029 + t27030;
  t27040 = -0.19821*t27039;
  t27044 = t27004 + t27007 + t27018 + t27019 + t27025 + t27028 + t27040;
  t26928 = -0.28121*t26170*t23383*t18925;
  t26929 = t6663*t26256;
  t26930 = t2081*t26260;
  t26931 = 0.15121*t26264;
  t26932 = -0.28121*t13783*t26327;
  t26933 = -0.50321*t18427*t26329;
  t26934 = -0.50321*t18973*t26339;
  t26935 = t18424*t26329;
  t26936 = -1.*t18973*t26339;
  t26937 = t26935 + t26936;
  t26938 = -0.19821*t26937;
  t26939 = t26928 + t26929 + t26930 + t26931 + t26932 + t26933 + t26934 + t26938;
  t27074 = -0.50321*t18973*t26916;
  t27076 = -0.50321*t18424*t26870;
  t27078 = -1.*t18973*t26916;
  t27083 = -1.*t18424*t26870;
  t27085 = t27078 + t27083;
  t27087 = -0.19821*t27085;
  t27088 = t27074 + t27076 + t27087;
  t27046 = -0.28121*t13425*t23383*t26253;
  t27050 = -0.28121*t18925*t26860;
  t27052 = -0.50321*t18973*t26862;
  t27055 = -0.50321*t18427*t26870;
  t27063 = -1.*t18973*t26862;
  t27066 = t18424*t26870;
  t27068 = t27063 + t27066;
  t27072 = -0.19821*t27068;
  t27073 = t27046 + t27050 + t27052 + t27055 + t27072;
  t27113 = t26170*t23383*t169*t1628;
  t27115 = t176*t26170*t23383*t11306;
  t27117 = t27113 + t27115;
  t27118 = -0.28121*t13783*t27117;
  t27119 = -0.50321*t13425*t18427*t27117;
  t27120 = 0.50321*t18925*t18973*t27117;
  t27121 = 0.15121*t26187;
  t27122 = t13425*t18424*t27117;
  t27123 = t18925*t18973*t27117;
  t27124 = t27122 + t27123;
  t27125 = -0.19821*t27124;
  t27141 = -1.*t176*t26170*t23383*t169;
  t27151 = t26170*t23383*t1628*t11306;
  t27152 = t27141 + t27151;
  t27140 = -1.*t26170*t18925*t2131;
  t27154 = t13425*t27152;
  t27155 = t27140 + t27154;
  t27159 = -1.*t13425*t26170*t2131;
  t27161 = -1.*t18925*t27152;
  t27163 = t27159 + t27161;
  t27183 = -1.*t13425*t27152;
  t27185 = t26190 + t27183;
  t27204 = t176*t26170*t169*t2131;
  t27205 = -1.*t26170*t1628*t2131*t11306;
  t27206 = t27204 + t27205;
  t27208 = t13425*t27206;
  t27209 = t26319 + t27208;
  t27211 = -1.*t18925*t27206;
  t27225 = t26335 + t27211;
  t27111 = t26170*t23383*t169*t2081;
  t27112 = t26170*t23383*t6663*t11306;
  t27128 = t27111 + t27112 + t27118 + t27119 + t27120 + t27121 + t27125;
  t27300 = t1628*t26256;
  t27302 = t169*t26253;
  t27304 = t26170*t2131*t11306;
  t27305 = t27302 + t27304;
  t27311 = t176*t27305;
  t27312 = t27300 + t27311;
  t27374 = -1.*t1628*t27305;
  t27375 = t26321 + t27374;
  t27130 = -1.*t26170*t23383*t169*t22613;
  t27133 = t26170*t23383*t22633*t11306;
  t27135 = t27130 + t27133 + t27118 + t27119 + t27120 + t27121 + t27125;
  t27423 = -1.*t1628*t26283;
  t27424 = t27423 + t27311;
  t27355 = t22633*t26256;
  t27357 = t22613*t27305;
  t27361 = -1.*t176*t27305;
  t27366 = t26262 + t27361;
  t27372 = 0.15121*t27366;
  t27376 = -0.28121*t13783*t27375;
  t27381 = -0.50321*t13425*t18427*t27375;
  t27383 = 0.50321*t18925*t18973*t27375;
  t27384 = t13425*t18424*t27375;
  t27386 = t18925*t18973*t27375;
  t27394 = t27384 + t27386;
  t27395 = -0.19821*t27394;
  t27404 = t27355 + t27357 + t27372 + t27376 + t27381 + t27383 + t27395;
  t27474 = -1.*t176*t26283;
  t27475 = t27474 + t27374;
  t27179 = -0.28121*t13425*t26170*t2131;
  t27181 = -0.28121*t18925*t27152;
  t27186 = -0.50321*t18973*t27185;
  t27187 = -0.50321*t18427*t27163;
  t27188 = -1.*t18973*t27185;
  t27189 = t18424*t27163;
  t27190 = t27188 + t27189;
  t27191 = -0.19821*t27190;
  t27192 = t27179 + t27181 + t27186 + t27187 + t27191;
  t27327 = -0.28121*t18925*t27312;
  t27334 = 0.50321*t18427*t18925*t27312;
  t27337 = 0.50321*t13425*t18973*t27312;
  t27338 = -1.*t18424*t18925*t27312;
  t27340 = t13425*t18973*t27312;
  t27341 = t27338 + t27340;
  t27342 = -0.19821*t27341;
  t27344 = t27327 + t27334 + t27337 + t27342;
  t27438 = -0.28121*t18925*t27424;
  t27439 = 0.50321*t18427*t18925*t27424;
  t27442 = 0.50321*t13425*t18973*t27424;
  t27445 = -1.*t18424*t18925*t27424;
  t27448 = t13425*t18973*t27424;
  t27449 = t27445 + t27448;
  t27450 = -0.19821*t27449;
  t27455 = t27438 + t27439 + t27442 + t27450;
  t27513 = t1628*t27305;
  t27515 = t26299 + t27513;
  t27517 = -1.*t13425*t27515;
  t27518 = t26319 + t27517;
  t27521 = t13425*t26170*t23383;
  t27524 = -1.*t18925*t27515;
  t27525 = t27521 + t27524;
  t27545 = t18925*t27515;
  t27551 = t26335 + t27545;
  t27157 = -0.50321*t18973*t27155;
  t27164 = -0.50321*t18424*t27163;
  t27168 = -1.*t18973*t27155;
  t27171 = -1.*t18424*t27163;
  t27173 = t27168 + t27171;
  t27174 = -0.19821*t27173;
  t27175 = t27157 + t27164 + t27174;
  t27313 = 0.50321*t18424*t18925*t27312;
  t27315 = -0.50321*t13425*t18973*t27312;
  t27317 = t18424*t18925*t27312;
  t27322 = -1.*t13425*t18973*t27312;
  t27323 = t27317 + t27322;
  t27324 = -0.19821*t27323;
  t27325 = t27313 + t27315 + t27324;
  t27425 = 0.50321*t18424*t18925*t27424;
  t27427 = -0.50321*t13425*t18973*t27424;
  t27428 = t18424*t18925*t27424;
  t27429 = -1.*t13425*t18973*t27424;
  t27431 = t27428 + t27429;
  t27432 = -0.19821*t27431;
  t27433 = t27425 + t27427 + t27432;
  t27519 = -0.50321*t18424*t27518;
  t27527 = -0.50321*t18973*t27525;
  t27528 = -1.*t18424*t27518;
  t27529 = -1.*t18973*t27525;
  t27530 = t27528 + t27529;
  t27532 = -0.19821*t27530;
  t27537 = t27519 + t27527 + t27532;
  t27581 = t13425*t27515;
  t27582 = t26350 + t27581;
  p_output1[0]=(t23565 + t23589 + t23822 + t24121 + t24200 - 0.50321*t18427*t24409 - 0.50321*t18973*t24769 - 0.19821*(t18424*t24409 - 1.*t18973*t24769))*var2[4] + t22501*var2[5] + t22750*var2[9] + t25485*var2[10] + t25397*var2[11];
  p_output1[1]=t25561 + t25610 + t22501*var2[4] + (t23565 + t23822 + t24121 + t24200 + t25617 + t25622 + t25750)*var2[5] + t25751*var2[9];
  p_output1[2]=t25561 + t25610 + t22750*var2[4] + t25751*var2[5] + (t24121 + t24200 + t25613 + t25617 + t25622 + t25750 + t169*t23383*t25812)*var2[9];
  p_output1[3]=t25485*var2[4] + t25600*var2[5] + t25600*var2[9] + (t23589 - 0.28121*t13425*t25905 - 0.50321*t18427*t25919 - 0.50321*t18973*t26039 - 0.19821*(t18424*t25919 - 1.*t18973*t26039))*var2[10] + t26016*var2[11];
  p_output1[4]=t25397*var2[4] + t25551*var2[5] + t25551*var2[9] + t26016*var2[10] + (0.50321*t18973*t25933 - 0.50321*t18424*t26092 - 0.19821*(t18973*t25933 - 1.*t18424*t26092))*var2[11];
  p_output1[5]=1.;
  p_output1[6]=0.15121*t18416 + t11306*t2081*t2131 + 0.28121*t18925*t23383 - 0.28121*t13783*t25321 - 0.50321*t18427*t25363 - 0.50321*t18973*t25368 - 0.19821*(t18424*t25363 - 1.*t18973*t25368) - 1.*t169*t2131*t6663;
  p_output1[7]=-1.*t169*t2081*t23383 + t26125 + t26127 + t26128 + t26131 + t26136 - 1.*t11306*t23383*t6663;
  p_output1[8]=t169*t22613*t23383 - 1.*t11306*t22633*t23383 + t26125 + t26127 + t26128 + t26131 + t26136;
  p_output1[9]=0.28121*t13425*t2131 - 0.28121*t18925*t25905 - 0.50321*t18973*t25919 - 0.50321*t18427*t25933 - 0.19821*(-1.*t18973*t25919 + t18424*t25933);
  p_output1[10]=-0.50321*t18424*t25933 - 0.50321*t18973*t26092 - 0.19821*(-1.*t18424*t25933 - 1.*t18973*t26092);
  p_output1[11]=(t26368 + t26379 + t26385 + t26390 + t26394 - 0.50321*t18427*t26397 - 0.50321*t18973*t26401 - 0.19821*(t18424*t26397 - 1.*t18973*t26401))*var2[3] + t26247*var2[4] + t26309*var2[5] + t26279*var2[9] + t26364*var2[10] + t26346*var2[11];
  p_output1[12]=t26247*var2[3] + (t11306*t2081*t2131*t26253 + 0.15121*(t1628*t169*t2131*t26253 + t11306*t176*t2131*t26253) + t26368 - 0.28121*t13783*t26544 - 0.50321*t18427*t26549 - 0.50321*t18973*t26553 - 0.19821*(t18424*t26549 - 1.*t18973*t26553) - 1.*t169*t2131*t26253*t6663)*var2[4] + t26427*var2[5] + t26431*var2[9] + t26531*var2[10] + t26494*var2[11];
  p_output1[13]=t26309*var2[3] + t26427*var2[4] + (t26379 + t26385 + t26390 - 0.50321*t13425*t18427*t26393 + 0.50321*t18925*t18973*t26393 - 0.19821*(t13425*t18424*t26393 + t18925*t18973*t26393) + t26394)*var2[5] + t26713*var2[9] + t26680*var2[10] + t26665*var2[11];
  p_output1[14]=t26279*var2[3] + t26431*var2[4] + t26713*var2[5] + (t26684 + t25812*t26778 + 0.15121*(t26686 + t1628*t26778) - 0.28121*t13783*t26826 - 0.50321*t13425*t18427*t26826 + 0.50321*t18925*t18973*t26826 - 0.19821*(t13425*t18424*t26826 + t18925*t18973*t26826))*var2[9] + t26815*var2[10] + t26800*var2[11];
  p_output1[15]=t26364*var2[3] + t26531*var2[4] + t26680*var2[5] + t26815*var2[9] + (t26368 - 0.28121*t13425*t26860 - 0.50321*t18427*t26862 - 0.50321*t18973*t26888 - 0.19821*(t18424*t26862 - 1.*t18973*t26888))*var2[10] + t26881*var2[11];
  p_output1[16]=t26346*var2[3] + t26494*var2[4] + t26665*var2[5] + t26800*var2[9] + t26881*var2[10] + (0.50321*t18973*t26870 - 0.50321*t18424*t26916 - 0.19821*(t18973*t26870 - 1.*t18424*t26916))*var2[11];
  p_output1[17]=1.;
  p_output1[18]=t26939;
  p_output1[19]=t26956;
  p_output1[20]=t27002;
  p_output1[21]=t27044;
  p_output1[22]=t27073;
  p_output1[23]=t27088;
  p_output1[24]=t26939*var2[3] + t26956*var2[4] + t27002*var2[5] + t27044*var2[9] + t27073*var2[10] + t27088*var2[11];
  p_output1[25]=t26956*var2[3] + (-1.*t11306*t2081*t2131*t26170 + 0.15121*(-1.*t1628*t169*t2131*t26170 - 1.*t11306*t176*t2131*t26170) + t26928 - 0.28121*t13783*t27206 - 0.50321*t18427*t27209 - 0.50321*t18973*t27225 - 0.19821*(t18424*t27209 - 1.*t18973*t27225) + t169*t2131*t26170*t6663)*var2[4] + t27128*var2[5] + t27135*var2[9] + t27192*var2[10] + t27175*var2[11];
  p_output1[26]=t27002*var2[3] + t27128*var2[4] + (-0.50321*t13425*t18427*t26327 + 0.50321*t18925*t18973*t26327 - 0.19821*(t13425*t18424*t26327 + t18925*t18973*t26327) + t26929 + t26930 + t26931 + t26932)*var2[5] + t27404*var2[9] + t27344*var2[10] + t27325*var2[11];
  p_output1[27]=t27044*var2[3] + t27135*var2[4] + t27404*var2[5] + (t25812*t26283 + t27357 + 0.15121*(t26289 + t27361) - 0.28121*t13783*t27475 - 0.50321*t13425*t18427*t27475 + 0.50321*t18925*t18973*t27475 - 0.19821*(t13425*t18424*t27475 + t18925*t18973*t27475))*var2[9] + t27455*var2[10] + t27433*var2[11];
  p_output1[28]=t27073*var2[3] + t27192*var2[4] + t27344*var2[5] + t27455*var2[9] + (t26928 - 0.28121*t13425*t27515 - 0.50321*t18427*t27518 - 0.50321*t18973*t27551 - 0.19821*(t18424*t27518 - 1.*t18973*t27551))*var2[10] + t27537*var2[11];
  p_output1[29]=t27088*var2[3] + t27175*var2[4] + t27325*var2[5] + t27433*var2[9] + t27537*var2[10] + (0.50321*t18973*t27525 - 0.50321*t18424*t27582 - 0.19821*(t18973*t27525 - 1.*t18424*t27582))*var2[11];
  p_output1[30]=1.;
  p_output1[31]=-0.28121*t18925*t23383*t26253 + t2081*t26586 + 0.15121*t26783 - 0.28121*t13783*t26860 + t26875 - 0.50321*t18427*t26916 - 0.19821*(t26877 + t18424*t26916) + t26778*t6663;
  p_output1[32]=-0.28121*t18925*t2131*t26170 + t11306*t2081*t23383*t26170 + 0.15121*t27117 - 0.28121*t13783*t27152 - 0.50321*t18427*t27155 - 0.50321*t18973*t27163 - 0.19821*(t18424*t27155 - 1.*t18973*t27163) - 1.*t169*t23383*t26170*t6663;
  p_output1[33]=t2081*t26256 - 0.28121*t13783*t27312 - 0.50321*t13425*t18427*t27312 + 0.50321*t18925*t18973*t27312 - 0.19821*(t13425*t18424*t27312 + t18925*t18973*t27312) + 0.15121*t27375 + t27305*t6663;
  p_output1[34]=t22613*t26283 + t22633*t27305 - 0.28121*t13783*t27424 - 0.50321*t13425*t18427*t27424 + 0.50321*t18925*t18973*t27424 - 0.19821*(t13425*t18424*t27424 + t18925*t18973*t27424) + 0.15121*t27475;
  p_output1[35]=0.28121*t13425*t23383*t26170 - 0.28121*t18925*t27515 - 0.50321*t18973*t27518 - 0.50321*t18427*t27525 - 0.19821*(-1.*t18973*t27518 + t18424*t27525);
  p_output1[36]=-0.50321*t18424*t27525 - 0.50321*t18973*t27582 - 0.19821*(-1.*t18424*t27525 - 1.*t18973*t27582);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 37, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_initial_swing_velocity_RlFoot_ParallelStance.hh"

namespace ParallelStance
{

void J_initial_swing_velocity_RlFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
