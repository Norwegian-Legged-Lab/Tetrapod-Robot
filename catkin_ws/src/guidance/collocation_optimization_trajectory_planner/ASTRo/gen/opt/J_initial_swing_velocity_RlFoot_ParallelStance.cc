/*
 * Automatically Generated from Mathematica.
 * Sun 12 Jun 2022 14:38:02 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t9269;
  double t10344;
  double t11487;
  double t12757;
  double t12955;
  double t12992;
  double t9138;
  double t13197;
  double t13232;
  double t13506;
  double t13516;
  double t13518;
  double t13529;
  double t13718;
  double t13811;
  double t15276;
  double t13381;
  double t13459;
  double t13526;
  double t13584;
  double t13592;
  double t13607;
  double t13814;
  double t14787;
  double t14918;
  double t14941;
  double t15113;
  double t15148;
  double t15199;
  double t15213;
  double t15225;
  double t13029;
  double t13191;
  double t15559;
  double t11815;
  double t12991;
  double t15644;
  double t15647;
  double t15650;
  double t15682;
  double t15706;
  double t15732;
  double t15750;
  double t15755;
  double t15775;
  double t15933;
  double t15935;
  double t15939;
  double t15923;
  double t15940;
  double t15958;
  double t15960;
  double t15962;
  double t15964;
  double t16666;
  double t16722;
  double t16732;
  double t16831;
  double t16860;
  double t16870;
  double t15461;
  double t15401;
  double t15442;
  double t15636;
  double t15639;
  double t15642;
  double t15643;
  double t15651;
  double t15567;
  double t15570;
  double t17263;
  double t17269;
  double t17273;
  double t17287;
  double t17306;
  double t17313;
  double t13001;
  double t13228;
  double t15255;
  double t16871;
  double t16875;
  double t16926;
  double t16933;
  double t17021;
  double t17058;
  double t17085;
  double t17127;
  double t17128;
  double t17130;
  double t17133;
  double t17149;
  double t17167;
  double t17172;
  double t17219;
  double t17257;
  double t17258;
  double t17260;
  double t17259;
  double t17314;
  double t15443;
  double t15473;
  double t15543;
  double t17515;
  double t17521;
  double t17523;
  double t17524;
  double t17525;
  double t17530;
  double t17531;
  double t17534;
  double t15569;
  double t19447;
  double t19454;
  double t16565;
  double t16581;
  double t16737;
  double t16744;
  double t16749;
  double t16751;
  double t16756;
  double t16758;
  double t16759;
  double t17528;
  double t17831;
  double t18383;
  double t18397;
  double t18476;
  double t18633;
  double t18636;
  double t20716;
  double t20717;
  double t20769;
  double t15959;
  double t15997;
  double t15998;
  double t16219;
  double t16396;
  double t16431;
  double t16432;
  double t25947;
  double t26005;
  double t26024;
  double t26036;
  double t26048;
  double t26066;
  double t26076;
  double t26089;
  double t29371;
  double t30238;
  double t30415;
  double t30428;
  double t30430;
  double t30431;
  double t30433;
  double t30479;
  double t30489;
  double t30555;
  double t30731;
  double t30717;
  double t30735;
  double t30742;
  double t30747;
  double t30748;
  double t30749;
  double t30751;
  double t30753;
  double t30768;
  double t30914;
  double t30931;
  double t30935;
  double t30939;
  double t30940;
  double t30781;
  double t31026;
  double t31028;
  double t31062;
  double t31023;
  double t31069;
  double t31079;
  double t31081;
  double t31082;
  double t31085;
  double t31103;
  double t31106;
  double t31107;
  double t31118;
  double t31119;
  double t31120;
  double t31122;
  double t31123;
  double t31124;
  double t31130;
  double t31131;
  double t31132;
  double t31134;
  double t31135;
  double t31136;
  double t31138;
  double t31139;
  double t31140;
  double t31153;
  double t31154;
  double t31156;
  double t31157;
  double t31158;
  double t31159;
  double t31160;
  double t31161;
  double t31162;
  double t31163;
  double t31165;
  double t31166;
  double t31167;
  double t31168;
  double t29396;
  double t29403;
  double t29410;
  double t29423;
  double t29496;
  double t29689;
  double t29715;
  double t30429;
  double t30442;
  double t30700;
  double t30703;
  double t30704;
  double t30705;
  double t30707;
  double t30713;
  double t31181;
  double t31182;
  double t31186;
  double t31180;
  double t31189;
  double t31191;
  double t31199;
  double t31200;
  double t31201;
  double t31224;
  double t31229;
  double t31230;
  double t31117;
  double t31251;
  double t31252;
  double t31253;
  double t31255;
  double t31256;
  double t31258;
  double t31260;
  double t31151;
  double t31152;
  double t31170;
  double t30936;
  double t30937;
  double t30941;
  double t30946;
  double t30947;
  double t30948;
  double t30949;
  double t30950;
  double t31014;
  double t31015;
  double t31016;
  double t31017;
  double t31018;
  double t31282;
  double t31283;
  double t31285;
  double t31286;
  double t31292;
  double t31305;
  double t31126;
  double t31448;
  double t31449;
  double t31121;
  double t31125;
  double t31127;
  double t31128;
  double t31129;
  double t31133;
  double t31172;
  double t31176;
  double t31177;
  double t30745;
  double t30750;
  double t30777;
  double t30778;
  double t30779;
  double t30780;
  double t30798;
  double t30805;
  double t30817;
  double t30818;
  double t30827;
  double t30829;
  double t30872;
  double t31478;
  double t31484;
  double t31486;
  double t31491;
  double t31492;
  double t31443;
  double t31444;
  double t31445;
  double t31446;
  double t31447;
  double t31450;
  double t31451;
  double t31452;
  double t31453;
  double t31454;
  double t31455;
  double t31456;
  double t31457;
  double t17329;
  double t17332;
  double t31590;
  double t31597;
  double t31214;
  double t31218;
  double t31231;
  double t31232;
  double t31233;
  double t31234;
  double t31235;
  double t31236;
  double t31237;
  double t31416;
  double t31419;
  double t31429;
  double t31437;
  double t31438;
  double t31439;
  double t31440;
  double t31441;
  double t31517;
  double t31518;
  double t31519;
  double t31520;
  double t31521;
  double t31528;
  double t31530;
  double t31535;
  double t31095;
  double t31099;
  double t31108;
  double t31109;
  double t31110;
  double t31111;
  double t31112;
  double t31113;
  double t31115;
  double t31626;
  double t31627;
  double t31628;
  double t31629;
  double t31630;
  double t31632;
  double t31633;
  double t31634;
  double t31709;
  double t31741;
  double t31195;
  double t31206;
  double t31207;
  double t31209;
  double t31210;
  double t31211;
  double t31212;
  double t31307;
  double t31311;
  double t31313;
  double t31329;
  double t31339;
  double t31350;
  double t31382;
  double t31493;
  double t31494;
  double t31496;
  double t31497;
  double t31498;
  double t31504;
  double t31508;
  double t31080;
  double t31087;
  double t31089;
  double t31090;
  double t31091;
  double t31092;
  double t31093;
  double t31631;
  double t31635;
  double t31636;
  double t31637;
  double t31638;
  double t31639;
  double t31640;
  double t31798;
  double t31799;
  double t31803;
  double t31835;
  double t31837;
  double t31838;
  double t31840;
  double t31841;
  double t31842;
  double t31844;
  double t31845;
  double t31847;
  double t31848;
  double t31849;
  double t31850;
  double t31851;
  double t31852;
  double t31853;
  double t31854;
  double t31855;
  double t31856;
  double t31857;
  double t31858;
  double t31859;
  double t31860;
  double t31861;
  double t31862;
  double t31863;
  double t31864;
  double t31865;
  double t31866;
  double t31867;
  double t31868;
  double t31869;
  double t31911;
  double t31949;
  double t31950;
  double t31818;
  double t31821;
  double t31822;
  double t31824;
  double t31825;
  double t31826;
  double t31828;
  double t31829;
  double t31831;
  double t31832;
  double t31833;
  double t31834;
  double t32019;
  double t32020;
  double t32021;
  double t32022;
  double t32023;
  double t32024;
  double t32025;
  double t31966;
  double t31968;
  double t31990;
  double t31992;
  double t31996;
  double t32002;
  double t32007;
  double t32011;
  double t32017;
  double t32144;
  double t32147;
  double t32148;
  double t32149;
  double t32150;
  double t32153;
  double t32154;
  double t32155;
  double t32156;
  double t32157;
  double t32158;
  double t32170;
  double t32171;
  double t32172;
  double t32168;
  double t32173;
  double t32176;
  double t32178;
  double t32179;
  double t32181;
  double t32198;
  double t32199;
  double t32219;
  double t32220;
  double t32221;
  double t32228;
  double t32235;
  double t32247;
  double t32248;
  double t32140;
  double t32143;
  double t32159;
  double t32276;
  double t32277;
  double t32278;
  double t32279;
  double t32280;
  double t32281;
  double t32308;
  double t32309;
  double t32161;
  double t32164;
  double t32165;
  double t32324;
  double t32325;
  double t32301;
  double t32302;
  double t32303;
  double t32304;
  double t32306;
  double t32310;
  double t32311;
  double t32312;
  double t32314;
  double t32316;
  double t32317;
  double t32318;
  double t32319;
  double t32350;
  double t32351;
  double t32196;
  double t32197;
  double t32200;
  double t32201;
  double t32202;
  double t32203;
  double t32206;
  double t32207;
  double t32208;
  double t32290;
  double t32291;
  double t32292;
  double t32293;
  double t32294;
  double t32295;
  double t32297;
  double t32298;
  double t32334;
  double t32336;
  double t32337;
  double t32338;
  double t32339;
  double t32340;
  double t32341;
  double t32342;
  double t32366;
  double t32367;
  double t32368;
  double t32369;
  double t32371;
  double t32372;
  double t32373;
  double t32392;
  double t32393;
  double t32177;
  double t32183;
  double t32186;
  double t32187;
  double t32188;
  double t32190;
  double t32193;
  double t32282;
  double t32283;
  double t32284;
  double t32285;
  double t32286;
  double t32287;
  double t32288;
  double t32326;
  double t32327;
  double t32328;
  double t32329;
  double t32330;
  double t32331;
  double t32332;
  double t32370;
  double t32374;
  double t32375;
  double t32376;
  double t32377;
  double t32378;
  double t32379;
  double t32414;
  double t32415;
  t9269 = Cos(var1[9]);
  t10344 = -1.*t9269;
  t11487 = 1. + t10344;
  t12757 = Sin(var1[9]);
  t12955 = 0.15121*t12757;
  t12992 = Sin(var1[4]);
  t9138 = Cos(var1[5]);
  t13197 = Sin(var1[5]);
  t13232 = Cos(var1[10]);
  t13506 = t9138*t12757*t12992;
  t13516 = t9269*t12992*t13197;
  t13518 = t13506 + t13516;
  t13529 = Cos(var1[11]);
  t13718 = Sin(var1[10]);
  t13811 = Sin(var1[11]);
  t15276 = 0.15121*t9269;
  t13381 = -1.*t13232;
  t13459 = 1. + t13381;
  t13526 = -0.28121*t13459*t13518;
  t13584 = -1.*t13529;
  t13592 = 1. + t13584;
  t13607 = -0.50321*t13232*t13592*t13518;
  t13814 = 0.50321*t13718*t13811*t13518;
  t14787 = t9269*t9138*t12992;
  t14918 = -1.*t12757*t12992*t13197;
  t14941 = t14787 + t14918;
  t15113 = 0.15121*t14941;
  t15148 = t13232*t13529*t13518;
  t15199 = t13718*t13811*t13518;
  t15213 = t15148 + t15199;
  t15225 = -0.19821*t15213;
  t13029 = -0.15121*t11487;
  t13191 = t13029 + t12955;
  t15559 = Cos(var1[4]);
  t11815 = 0.15121*t11487;
  t12991 = t11815 + t12955;
  t15644 = -1.*t9269*t15559*t9138;
  t15647 = t15559*t12757*t13197;
  t15650 = t15644 + t15647;
  t15682 = -1.*t13718*t12992;
  t15706 = t13232*t15650;
  t15732 = t15682 + t15706;
  t15750 = -1.*t13232*t12992;
  t15755 = -1.*t13718*t15650;
  t15775 = t15750 + t15755;
  t15933 = -1.*t9269*t9138*t12992;
  t15935 = t12757*t12992*t13197;
  t15939 = t15933 + t15935;
  t15923 = t15559*t13718;
  t15940 = t13232*t15939;
  t15958 = t15923 + t15940;
  t15960 = t13232*t15559;
  t15962 = -1.*t13718*t15939;
  t15964 = t15960 + t15962;
  t16666 = -1.*t15559*t13718;
  t16722 = -1.*t13232*t15939;
  t16732 = t16666 + t16722;
  t16831 = -1.*t15559*t9138*t12757;
  t16860 = -1.*t9269*t15559*t13197;
  t16870 = t16831 + t16860;
  t15461 = t15276 + t12955;
  t15401 = -0.15121*t12757;
  t15442 = t15276 + t15401;
  t15636 = t15559*t9138*t12757;
  t15639 = t9269*t15559*t13197;
  t15642 = t15636 + t15639;
  t15643 = 0.15121*t15642;
  t15651 = -0.28121*t13459*t15650;
  t15567 = -1.*t15559*t9138*t13191;
  t15570 = t15559*t12991*t13197;
  t17263 = -0.50321*t13232*t13592*t15650;
  t17269 = 0.50321*t13718*t13811*t15650;
  t17273 = t13232*t13529*t15650;
  t17287 = t13718*t13811*t15650;
  t17306 = t17273 + t17287;
  t17313 = -0.19821*t17306;
  t13001 = t9138*t12991*t12992;
  t13228 = t13191*t12992*t13197;
  t15255 = t13001 + t13228 + t13526 + t13607 + t13814 + t15113 + t15225;
  t16871 = 0.50321*t13529*t13718*t16870;
  t16875 = -0.50321*t13232*t13811*t16870;
  t16926 = t13529*t13718*t16870;
  t16933 = -1.*t13232*t13811*t16870;
  t17021 = t16926 + t16933;
  t17058 = -0.19821*t17021;
  t17085 = t16871 + t16875 + t17058;
  t17127 = var2[11]*t17085;
  t17128 = -0.28121*t13718*t16870;
  t17130 = 0.50321*t13592*t13718*t16870;
  t17133 = 0.50321*t13232*t13811*t16870;
  t17149 = -1.*t13529*t13718*t16870;
  t17167 = t13232*t13811*t16870;
  t17172 = t17149 + t17167;
  t17219 = -0.19821*t17172;
  t17257 = t17128 + t17130 + t17133 + t17219;
  t17258 = var2[10]*t17257;
  t17260 = -1.*t15559*t15442*t13197;
  t17259 = -1.*t15559*t9138*t15461;
  t17314 = t17259 + t17260 + t15643 + t15651 + t17263 + t17269 + t17313;
  t15443 = -1.*t9138*t15442*t12992;
  t15473 = t15461*t12992*t13197;
  t15543 = t15443 + t15473 + t13526 + t13607 + t13814 + t15113 + t15225;
  t17515 = t9269*t15559*t9138;
  t17521 = -1.*t15559*t12757*t13197;
  t17523 = t17515 + t17521;
  t17524 = -1.*t13232*t17523;
  t17525 = t15682 + t17524;
  t17530 = t13232*t12992;
  t17531 = -1.*t13718*t17523;
  t17534 = t17530 + t17531;
  t15569 = -0.28121*t13718*t12992;
  t19447 = t13718*t17523;
  t19454 = t15750 + t19447;
  t16565 = 0.28121*t13232*t15559;
  t16581 = -0.28121*t13718*t15939;
  t16737 = -0.50321*t13811*t16732;
  t16744 = -0.50321*t13592*t15964;
  t16749 = -1.*t13811*t16732;
  t16751 = t13529*t15964;
  t16756 = t16749 + t16751;
  t16758 = -0.19821*t16756;
  t16759 = t16565 + t16581 + t16737 + t16744 + t16758;
  t17528 = -0.50321*t13529*t17525;
  t17831 = -0.50321*t13811*t17534;
  t18383 = -1.*t13529*t17525;
  t18397 = -1.*t13811*t17534;
  t18476 = t18383 + t18397;
  t18633 = -0.19821*t18476;
  t18636 = t17528 + t17831 + t18633;
  t20716 = t13718*t12992;
  t20717 = t13232*t17523;
  t20769 = t20716 + t20717;
  t15959 = -0.50321*t13811*t15958;
  t15997 = -0.50321*t13529*t15964;
  t15998 = -1.*t13811*t15958;
  t16219 = -1.*t13529*t15964;
  t16396 = t15998 + t16219;
  t16431 = -0.19821*t16396;
  t16432 = t15959 + t15997 + t16431;
  t25947 = -0.28121*t13459*t16870;
  t26005 = -0.50321*t13232*t13592*t16870;
  t26024 = 0.50321*t13718*t13811*t16870;
  t26036 = 0.15121*t15650;
  t26048 = t13232*t13529*t16870;
  t26066 = t13718*t13811*t16870;
  t26076 = t26048 + t26066;
  t26089 = -0.19821*t26076;
  t29371 = Cos(var1[3]);
  t30238 = t9269*t29371*t15559*t9138;
  t30415 = -1.*t29371*t15559*t12757*t13197;
  t30428 = t30238 + t30415;
  t30430 = t29371*t13718*t12992;
  t30431 = t13232*t30428;
  t30433 = t30430 + t30431;
  t30479 = t13232*t29371*t12992;
  t30489 = -1.*t13718*t30428;
  t30555 = t30479 + t30489;
  t30731 = Sin(var1[3]);
  t30717 = t29371*t9138*t12992;
  t30735 = -1.*t30731*t13197;
  t30742 = t30717 + t30735;
  t30747 = -1.*t9138*t30731;
  t30748 = -1.*t29371*t12992*t13197;
  t30749 = t30747 + t30748;
  t30751 = -1.*t12757*t30742;
  t30753 = t9269*t30749;
  t30768 = t30751 + t30753;
  t30914 = -1.*t29371*t9138*t12992;
  t30931 = t30731*t13197;
  t30935 = t30914 + t30931;
  t30939 = t12757*t30935;
  t30940 = t30939 + t30753;
  t30781 = -1.*t12757*t30749;
  t31026 = t9269*t30742;
  t31028 = t12757*t30749;
  t31062 = t31026 + t31028;
  t31023 = -1.*t29371*t15559*t13718;
  t31069 = t13232*t31062;
  t31079 = t31023 + t31069;
  t31081 = -1.*t13232*t29371*t15559;
  t31082 = -1.*t13718*t31062;
  t31085 = t31081 + t31082;
  t31103 = t29371*t15559*t13718;
  t31106 = -1.*t13232*t31062;
  t31107 = t31103 + t31106;
  t31118 = -1.*t9138*t30731*t12992;
  t31119 = -1.*t29371*t13197;
  t31120 = t31118 + t31119;
  t31122 = -1.*t29371*t9138;
  t31123 = t30731*t12992*t13197;
  t31124 = t31122 + t31123;
  t31130 = t9269*t31120;
  t31131 = t12757*t31124;
  t31132 = t31130 + t31131;
  t31134 = t15559*t13718*t30731;
  t31135 = t13232*t31132;
  t31136 = t31134 + t31135;
  t31138 = t13232*t15559*t30731;
  t31139 = -1.*t13718*t31132;
  t31140 = t31138 + t31139;
  t31153 = -1.*t15559*t9138*t12757*t30731;
  t31154 = -1.*t9269*t15559*t30731*t13197;
  t31156 = t31153 + t31154;
  t31157 = -0.28121*t13459*t31156;
  t31158 = -0.50321*t13232*t13592*t31156;
  t31159 = 0.50321*t13718*t13811*t31156;
  t31160 = -1.*t9269*t15559*t9138*t30731;
  t31161 = t15559*t12757*t30731*t13197;
  t31162 = t31160 + t31161;
  t31163 = 0.15121*t31162;
  t31165 = t13232*t13529*t31156;
  t31166 = t13718*t13811*t31156;
  t31167 = t31165 + t31166;
  t31168 = -0.19821*t31167;
  t29396 = t29371*t15559*t9138*t13191;
  t29403 = 0.28121*t29371*t13718*t12992;
  t29410 = -1.*t29371*t15559*t12991*t13197;
  t29423 = -1.*t29371*t15559*t9138*t12757;
  t29496 = -1.*t9269*t29371*t15559*t13197;
  t29689 = t29423 + t29496;
  t29715 = 0.15121*t29689;
  t30429 = -0.28121*t13459*t30428;
  t30442 = -0.50321*t13592*t30433;
  t30700 = -0.50321*t13811*t30555;
  t30703 = t13529*t30433;
  t30704 = -1.*t13811*t30555;
  t30705 = t30703 + t30704;
  t30707 = -0.19821*t30705;
  t30713 = t29396 + t29403 + t29410 + t29715 + t30429 + t30442 + t30700 + t30707;
  t31181 = t9269*t15559*t9138*t30731;
  t31182 = -1.*t15559*t12757*t30731*t13197;
  t31186 = t31181 + t31182;
  t31180 = t13718*t30731*t12992;
  t31189 = t13232*t31186;
  t31191 = t31180 + t31189;
  t31199 = t13232*t30731*t12992;
  t31200 = -1.*t13718*t31186;
  t31201 = t31199 + t31200;
  t31224 = -1.*t13718*t30731*t12992;
  t31229 = -1.*t13232*t31186;
  t31230 = t31224 + t31229;
  t31117 = 0.28121*t15559*t13718*t30731;
  t31251 = -1.*t9269*t9138*t30731*t12992;
  t31252 = t12757*t30731*t12992*t13197;
  t31253 = t31251 + t31252;
  t31255 = t13232*t31253;
  t31256 = t31134 + t31255;
  t31258 = -1.*t13718*t31253;
  t31260 = t31138 + t31258;
  t31151 = -1.*t15559*t9138*t12991*t30731;
  t31152 = -1.*t15559*t13191*t30731*t13197;
  t31170 = t31151 + t31152 + t31157 + t31158 + t31159 + t31163 + t31168;
  t30936 = t12991*t30935;
  t30937 = t13191*t30749;
  t30941 = -0.28121*t13459*t30940;
  t30946 = -0.50321*t13232*t13592*t30940;
  t30947 = 0.50321*t13718*t13811*t30940;
  t30948 = t9269*t30935;
  t30949 = t30948 + t30781;
  t30950 = 0.15121*t30949;
  t31014 = t13232*t13529*t30940;
  t31015 = t13718*t13811*t30940;
  t31016 = t31014 + t31015;
  t31017 = -0.19821*t31016;
  t31018 = t30936 + t30937 + t30941 + t30946 + t30947 + t30950 + t31017;
  t31282 = t12757*t31120;
  t31283 = t29371*t9138;
  t31285 = -1.*t30731*t12992*t13197;
  t31286 = t31283 + t31285;
  t31292 = t9269*t31286;
  t31305 = t31282 + t31292;
  t31126 = -1.*t12757*t31120;
  t31448 = -1.*t12757*t31286;
  t31449 = t31130 + t31448;
  t31121 = t13191*t31120;
  t31125 = t12991*t31124;
  t31127 = t9269*t31124;
  t31128 = t31126 + t31127;
  t31129 = 0.15121*t31128;
  t31133 = -0.28121*t13459*t31132;
  t31172 = t15559*t9138*t15442*t30731;
  t31176 = -1.*t15559*t15461*t30731*t13197;
  t31177 = t31172 + t31176 + t31157 + t31158 + t31159 + t31163 + t31168;
  t30745 = t15442*t30742;
  t30750 = t15461*t30749;
  t30777 = -0.28121*t13459*t30768;
  t30778 = -0.50321*t13232*t13592*t30768;
  t30779 = 0.50321*t13718*t13811*t30768;
  t30780 = -1.*t9269*t30742;
  t30798 = t30780 + t30781;
  t30805 = 0.15121*t30798;
  t30817 = t13232*t13529*t30768;
  t30818 = t13718*t13811*t30768;
  t30827 = t30817 + t30818;
  t30829 = -0.19821*t30827;
  t30872 = t30745 + t30750 + t30777 + t30778 + t30779 + t30805 + t30829;
  t31478 = t9138*t30731*t12992;
  t31484 = t29371*t13197;
  t31486 = t31478 + t31484;
  t31491 = -1.*t12757*t31486;
  t31492 = t31491 + t31292;
  t31443 = t15461*t31120;
  t31444 = t15442*t31286;
  t31445 = -1.*t9269*t31286;
  t31446 = t31126 + t31445;
  t31447 = 0.15121*t31446;
  t31450 = -0.28121*t13459*t31449;
  t31451 = -0.50321*t13232*t13592*t31449;
  t31452 = 0.50321*t13718*t13811*t31449;
  t31453 = t13232*t13529*t31449;
  t31454 = t13718*t13811*t31449;
  t31455 = t31453 + t31454;
  t31456 = -0.19821*t31455;
  t31457 = t31443 + t31444 + t31447 + t31450 + t31451 + t31452 + t31456;
  t17329 = -0.15121*t9269;
  t17332 = t17329 + t15401;
  t31590 = -1.*t9269*t31486;
  t31597 = t31590 + t31448;
  t31214 = 0.28121*t13232*t30731*t12992;
  t31218 = -0.28121*t13718*t31186;
  t31231 = -0.50321*t13811*t31230;
  t31232 = -0.50321*t13592*t31201;
  t31233 = -1.*t13811*t31230;
  t31234 = t13529*t31201;
  t31235 = t31233 + t31234;
  t31236 = -0.19821*t31235;
  t31237 = t31214 + t31218 + t31231 + t31232 + t31236;
  t31416 = -0.28121*t13718*t31305;
  t31419 = 0.50321*t13592*t13718*t31305;
  t31429 = 0.50321*t13232*t13811*t31305;
  t31437 = -1.*t13529*t13718*t31305;
  t31438 = t13232*t13811*t31305;
  t31439 = t31437 + t31438;
  t31440 = -0.19821*t31439;
  t31441 = t31416 + t31419 + t31429 + t31440;
  t31517 = -0.28121*t13718*t31492;
  t31518 = 0.50321*t13592*t13718*t31492;
  t31519 = 0.50321*t13232*t13811*t31492;
  t31520 = -1.*t13529*t13718*t31492;
  t31521 = t13232*t13811*t31492;
  t31528 = t31520 + t31521;
  t31530 = -0.19821*t31528;
  t31535 = t31517 + t31518 + t31519 + t31530;
  t31095 = -0.28121*t13232*t29371*t15559;
  t31099 = -0.28121*t13718*t31062;
  t31108 = -0.50321*t13811*t31107;
  t31109 = -0.50321*t13592*t31085;
  t31110 = -1.*t13811*t31107;
  t31111 = t13529*t31085;
  t31112 = t31110 + t31111;
  t31113 = -0.19821*t31112;
  t31115 = t31095 + t31099 + t31108 + t31109 + t31113;
  t31626 = t9269*t31486;
  t31627 = t12757*t31286;
  t31628 = t31626 + t31627;
  t31629 = -1.*t13232*t31628;
  t31630 = t31134 + t31629;
  t31632 = -1.*t13232*t15559*t30731;
  t31633 = -1.*t13718*t31628;
  t31634 = t31632 + t31633;
  t31709 = t13718*t31628;
  t31741 = t31138 + t31709;
  t31195 = -0.50321*t13811*t31191;
  t31206 = -0.50321*t13529*t31201;
  t31207 = -1.*t13811*t31191;
  t31209 = -1.*t13529*t31201;
  t31210 = t31207 + t31209;
  t31211 = -0.19821*t31210;
  t31212 = t31195 + t31206 + t31211;
  t31307 = 0.50321*t13529*t13718*t31305;
  t31311 = -0.50321*t13232*t13811*t31305;
  t31313 = t13529*t13718*t31305;
  t31329 = -1.*t13232*t13811*t31305;
  t31339 = t31313 + t31329;
  t31350 = -0.19821*t31339;
  t31382 = t31307 + t31311 + t31350;
  t31493 = 0.50321*t13529*t13718*t31492;
  t31494 = -0.50321*t13232*t13811*t31492;
  t31496 = t13529*t13718*t31492;
  t31497 = -1.*t13232*t13811*t31492;
  t31498 = t31496 + t31497;
  t31504 = -0.19821*t31498;
  t31508 = t31493 + t31494 + t31504;
  t31080 = -0.50321*t13811*t31079;
  t31087 = -0.50321*t13529*t31085;
  t31089 = -1.*t13811*t31079;
  t31090 = -1.*t13529*t31085;
  t31091 = t31089 + t31090;
  t31092 = -0.19821*t31091;
  t31093 = t31080 + t31087 + t31092;
  t31631 = -0.50321*t13529*t31630;
  t31635 = -0.50321*t13811*t31634;
  t31636 = -1.*t13529*t31630;
  t31637 = -1.*t13811*t31634;
  t31638 = t31636 + t31637;
  t31639 = -0.19821*t31638;
  t31640 = t31631 + t31635 + t31639;
  t31798 = -1.*t15559*t13718*t30731;
  t31799 = t13232*t31628;
  t31803 = t31798 + t31799;
  t31835 = t15559*t9138*t13191*t30731;
  t31837 = 0.28121*t13718*t30731*t12992;
  t31838 = -1.*t15559*t12991*t30731*t13197;
  t31840 = 0.15121*t31156;
  t31841 = -0.28121*t13459*t31186;
  t31842 = -0.50321*t13592*t31191;
  t31844 = -0.50321*t13811*t31201;
  t31845 = t13529*t31191;
  t31847 = -1.*t13811*t31201;
  t31848 = t31845 + t31847;
  t31849 = -0.19821*t31848;
  t31850 = t31835 + t31837 + t31838 + t31840 + t31841 + t31842 + t31844 + t31849;
  t31851 = t12991*t31120;
  t31852 = t13191*t31286;
  t31853 = -0.28121*t13459*t31305;
  t31854 = -0.50321*t13232*t13592*t31305;
  t31855 = 0.50321*t13718*t13811*t31305;
  t31856 = 0.15121*t31449;
  t31857 = t13232*t13529*t31305;
  t31858 = t13718*t13811*t31305;
  t31859 = t31857 + t31858;
  t31860 = -0.19821*t31859;
  t31861 = t31851 + t31852 + t31853 + t31854 + t31855 + t31856 + t31860;
  t31862 = t15442*t31486;
  t31863 = t15461*t31286;
  t31864 = -0.28121*t13459*t31492;
  t31865 = -0.50321*t13232*t13592*t31492;
  t31866 = 0.50321*t13718*t13811*t31492;
  t31867 = 0.15121*t31597;
  t31868 = t13232*t13529*t31492;
  t31869 = t13718*t13811*t31492;
  t31911 = t31868 + t31869;
  t31949 = -0.19821*t31911;
  t31950 = t31862 + t31863 + t31864 + t31865 + t31866 + t31867 + t31949;
  t31818 = -0.28121*t29371*t15559*t13718;
  t31821 = t13191*t30742;
  t31822 = t12991*t30749;
  t31824 = 0.15121*t30768;
  t31825 = -0.28121*t13459*t31062;
  t31826 = -0.50321*t13592*t31079;
  t31828 = -0.50321*t13811*t31085;
  t31829 = t13529*t31079;
  t31831 = -1.*t13811*t31085;
  t31832 = t31829 + t31831;
  t31833 = -0.19821*t31832;
  t31834 = t31818 + t31821 + t31822 + t31824 + t31825 + t31826 + t31828 + t31833;
  t32019 = -0.50321*t13811*t31803;
  t32020 = -0.50321*t13529*t31634;
  t32021 = -1.*t13811*t31803;
  t32022 = -1.*t13529*t31634;
  t32023 = t32021 + t32022;
  t32024 = -0.19821*t32023;
  t32025 = t32019 + t32020 + t32024;
  t31966 = -0.28121*t13232*t15559*t30731;
  t31968 = -0.28121*t13718*t31628;
  t31990 = -0.50321*t13811*t31630;
  t31992 = -0.50321*t13592*t31634;
  t31996 = -1.*t13811*t31630;
  t32002 = t13529*t31634;
  t32007 = t31996 + t32002;
  t32011 = -0.19821*t32007;
  t32017 = t31966 + t31968 + t31990 + t31992 + t32011;
  t32144 = t29371*t15559*t9138*t12757;
  t32147 = t9269*t29371*t15559*t13197;
  t32148 = t32144 + t32147;
  t32149 = -0.28121*t13459*t32148;
  t32150 = -0.50321*t13232*t13592*t32148;
  t32153 = 0.50321*t13718*t13811*t32148;
  t32154 = 0.15121*t30428;
  t32155 = t13232*t13529*t32148;
  t32156 = t13718*t13811*t32148;
  t32157 = t32155 + t32156;
  t32158 = -0.19821*t32157;
  t32170 = -1.*t9269*t29371*t15559*t9138;
  t32171 = t29371*t15559*t12757*t13197;
  t32172 = t32170 + t32171;
  t32168 = -1.*t29371*t13718*t12992;
  t32173 = t13232*t32172;
  t32176 = t32168 + t32173;
  t32178 = -1.*t13232*t29371*t12992;
  t32179 = -1.*t13718*t32172;
  t32181 = t32178 + t32179;
  t32198 = -1.*t13232*t32172;
  t32199 = t30430 + t32198;
  t32219 = t9269*t29371*t9138*t12992;
  t32220 = -1.*t29371*t12757*t12992*t13197;
  t32221 = t32219 + t32220;
  t32228 = t13232*t32221;
  t32235 = t31023 + t32228;
  t32247 = -1.*t13718*t32221;
  t32248 = t31081 + t32247;
  t32140 = t29371*t15559*t9138*t12991;
  t32143 = t29371*t15559*t13191*t13197;
  t32159 = t32140 + t32143 + t32149 + t32150 + t32153 + t32154 + t32158;
  t32276 = t12757*t30742;
  t32277 = t9138*t30731;
  t32278 = t29371*t12992*t13197;
  t32279 = t32277 + t32278;
  t32280 = t9269*t32279;
  t32281 = t32276 + t32280;
  t32308 = -1.*t12757*t32279;
  t32309 = t31026 + t32308;
  t32161 = -1.*t29371*t15559*t9138*t15442;
  t32164 = t29371*t15559*t15461*t13197;
  t32165 = t32161 + t32164 + t32149 + t32150 + t32153 + t32154 + t32158;
  t32324 = -1.*t12757*t30935;
  t32325 = t32324 + t32280;
  t32301 = t15461*t30742;
  t32302 = t15442*t32279;
  t32303 = -1.*t9269*t32279;
  t32304 = t30751 + t32303;
  t32306 = 0.15121*t32304;
  t32310 = -0.28121*t13459*t32309;
  t32311 = -0.50321*t13232*t13592*t32309;
  t32312 = 0.50321*t13718*t13811*t32309;
  t32314 = t13232*t13529*t32309;
  t32316 = t13718*t13811*t32309;
  t32317 = t32314 + t32316;
  t32318 = -0.19821*t32317;
  t32319 = t32301 + t32302 + t32306 + t32310 + t32311 + t32312 + t32318;
  t32350 = -1.*t9269*t30935;
  t32351 = t32350 + t32308;
  t32196 = -0.28121*t13232*t29371*t12992;
  t32197 = -0.28121*t13718*t32172;
  t32200 = -0.50321*t13811*t32199;
  t32201 = -0.50321*t13592*t32181;
  t32202 = -1.*t13811*t32199;
  t32203 = t13529*t32181;
  t32206 = t32202 + t32203;
  t32207 = -0.19821*t32206;
  t32208 = t32196 + t32197 + t32200 + t32201 + t32207;
  t32290 = -0.28121*t13718*t32281;
  t32291 = 0.50321*t13592*t13718*t32281;
  t32292 = 0.50321*t13232*t13811*t32281;
  t32293 = -1.*t13529*t13718*t32281;
  t32294 = t13232*t13811*t32281;
  t32295 = t32293 + t32294;
  t32297 = -0.19821*t32295;
  t32298 = t32290 + t32291 + t32292 + t32297;
  t32334 = -0.28121*t13718*t32325;
  t32336 = 0.50321*t13592*t13718*t32325;
  t32337 = 0.50321*t13232*t13811*t32325;
  t32338 = -1.*t13529*t13718*t32325;
  t32339 = t13232*t13811*t32325;
  t32340 = t32338 + t32339;
  t32341 = -0.19821*t32340;
  t32342 = t32334 + t32336 + t32337 + t32341;
  t32366 = t12757*t32279;
  t32367 = t30948 + t32366;
  t32368 = -1.*t13232*t32367;
  t32369 = t31023 + t32368;
  t32371 = t13232*t29371*t15559;
  t32372 = -1.*t13718*t32367;
  t32373 = t32371 + t32372;
  t32392 = t13718*t32367;
  t32393 = t31081 + t32392;
  t32177 = -0.50321*t13811*t32176;
  t32183 = -0.50321*t13529*t32181;
  t32186 = -1.*t13811*t32176;
  t32187 = -1.*t13529*t32181;
  t32188 = t32186 + t32187;
  t32190 = -0.19821*t32188;
  t32193 = t32177 + t32183 + t32190;
  t32282 = 0.50321*t13529*t13718*t32281;
  t32283 = -0.50321*t13232*t13811*t32281;
  t32284 = t13529*t13718*t32281;
  t32285 = -1.*t13232*t13811*t32281;
  t32286 = t32284 + t32285;
  t32287 = -0.19821*t32286;
  t32288 = t32282 + t32283 + t32287;
  t32326 = 0.50321*t13529*t13718*t32325;
  t32327 = -0.50321*t13232*t13811*t32325;
  t32328 = t13529*t13718*t32325;
  t32329 = -1.*t13232*t13811*t32325;
  t32330 = t32328 + t32329;
  t32331 = -0.19821*t32330;
  t32332 = t32326 + t32327 + t32331;
  t32370 = -0.50321*t13529*t32369;
  t32374 = -0.50321*t13811*t32373;
  t32375 = -1.*t13529*t32369;
  t32376 = -1.*t13811*t32373;
  t32377 = t32375 + t32376;
  t32378 = -0.19821*t32377;
  t32379 = t32370 + t32374 + t32378;
  t32414 = t13232*t32367;
  t32415 = t31103 + t32414;
  p_output1[0]=(t15567 + t15569 + t15570 + t15643 + t15651 - 0.50321*t13592*t15732 - 0.50321*t13811*t15775 - 0.19821*(t13529*t15732 - 1.*t13811*t15775))*var2[4] + t15255*var2[5] + t15543*var2[9] + t16759*var2[10] + t16432*var2[11];
  p_output1[1]=t17127 + t17258 + t15255*var2[4] + (t15567 + t15570 + t15643 + t15651 + t17263 + t17269 + t17313)*var2[5] + t17314*var2[9];
  p_output1[2]=t17127 + t17258 + t15543*var2[4] + t17314*var2[5] + (t15643 + t15651 + t17260 + t17263 + t17269 + t17313 + t15559*t17332*t9138)*var2[9];
  p_output1[3]=t16759*var2[4] + t17257*var2[5] + t17257*var2[9] + (t15569 - 0.28121*t13232*t17523 - 0.50321*t13592*t17525 - 0.50321*t13811*t19454 - 0.19821*(t13529*t17525 - 1.*t13811*t19454))*var2[10] + t18636*var2[11];
  p_output1[4]=t16432*var2[4] + t17085*var2[5] + t17085*var2[9] + t18636*var2[10] + (0.50321*t13811*t17534 - 0.50321*t13529*t20769 - 0.19821*(t13811*t17534 - 1.*t13529*t20769))*var2[11];
  p_output1[5]=1.;
  p_output1[6]=t12991*t12992*t13197 + 0.15121*t13518 + 0.28121*t13718*t15559 - 0.28121*t13459*t15939 - 0.50321*t13592*t15958 - 0.50321*t13811*t15964 - 0.19821*(t13529*t15958 - 1.*t13811*t15964) - 1.*t12992*t13191*t9138;
  p_output1[7]=-1.*t13191*t13197*t15559 + t25947 + t26005 + t26024 + t26036 + t26089 - 1.*t12991*t15559*t9138;
  p_output1[8]=-1.*t13197*t15461*t15559 + t25947 + t26005 + t26024 + t26036 + t26089 + t15442*t15559*t9138;
  p_output1[9]=0.28121*t12992*t13232 - 0.28121*t13718*t17523 - 0.50321*t13811*t17525 - 0.50321*t13592*t17534 - 0.19821*(-1.*t13811*t17525 + t13529*t17534);
  p_output1[10]=-0.50321*t13529*t17534 - 0.50321*t13811*t20769 - 0.19821*(-1.*t13529*t17534 - 1.*t13811*t20769);
  p_output1[11]=(t31117 + t31121 + t31125 + t31129 + t31133 - 0.50321*t13592*t31136 - 0.50321*t13811*t31140 - 0.19821*(t13529*t31136 - 1.*t13811*t31140))*var2[3] + t30713*var2[4] + t31018*var2[5] + t30872*var2[9] + t31115*var2[10] + t31093*var2[11];
  p_output1[12]=t30713*var2[3] + (t12991*t12992*t13197*t30731 + t31117 - 0.28121*t13459*t31253 - 0.50321*t13592*t31256 - 0.50321*t13811*t31260 - 0.19821*(t13529*t31256 - 1.*t13811*t31260) - 1.*t12992*t13191*t30731*t9138 + 0.15121*(t12757*t12992*t30731*t9138 + t12992*t13197*t30731*t9269))*var2[4] + t31170*var2[5] + t31177*var2[9] + t31237*var2[10] + t31212*var2[11];
  p_output1[13]=t31018*var2[3] + t31170*var2[4] + (t31121 + t31125 + t31129 - 0.50321*t13232*t13592*t31132 + 0.50321*t13718*t13811*t31132 - 0.19821*(t13232*t13529*t31132 + t13718*t13811*t31132) + t31133)*var2[5] + t31457*var2[9] + t31441*var2[10] + t31382*var2[11];
  p_output1[14]=t30872*var2[3] + t31177*var2[4] + t31457*var2[5] + (t31444 + t17332*t31486 + 0.15121*(t31445 + t12757*t31486) - 0.28121*t13459*t31597 - 0.50321*t13232*t13592*t31597 + 0.50321*t13718*t13811*t31597 - 0.19821*(t13232*t13529*t31597 + t13718*t13811*t31597))*var2[9] + t31535*var2[10] + t31508*var2[11];
  p_output1[15]=t31115*var2[3] + t31237*var2[4] + t31441*var2[5] + t31535*var2[9] + (t31117 - 0.28121*t13232*t31628 - 0.50321*t13592*t31630 - 0.50321*t13811*t31741 - 0.19821*(t13529*t31630 - 1.*t13811*t31741))*var2[10] + t31640*var2[11];
  p_output1[16]=t31093*var2[3] + t31212*var2[4] + t31382*var2[5] + t31508*var2[9] + t31640*var2[10] + (0.50321*t13811*t31634 - 0.50321*t13529*t31803 - 0.19821*(t13811*t31634 - 1.*t13529*t31803))*var2[11];
  p_output1[17]=1.;
  p_output1[18]=t31834;
  p_output1[19]=t31850;
  p_output1[20]=t31861;
  p_output1[21]=t31950;
  p_output1[22]=t32017;
  p_output1[23]=t32025;
  p_output1[24]=t31834*var2[3] + t31850*var2[4] + t31861*var2[5] + t31950*var2[9] + t32017*var2[10] + t32025*var2[11];
  p_output1[25]=t31850*var2[3] + (-1.*t12991*t12992*t13197*t29371 + t31818 - 0.28121*t13459*t32221 - 0.50321*t13592*t32235 - 0.50321*t13811*t32248 - 0.19821*(t13529*t32235 - 1.*t13811*t32248) + t12992*t13191*t29371*t9138 + 0.15121*(-1.*t12757*t12992*t29371*t9138 - 1.*t12992*t13197*t29371*t9269))*var2[4] + t32159*var2[5] + t32165*var2[9] + t32208*var2[10] + t32193*var2[11];
  p_output1[26]=t31861*var2[3] + t32159*var2[4] + (-0.50321*t13232*t13592*t31062 + 0.50321*t13718*t13811*t31062 - 0.19821*(t13232*t13529*t31062 + t13718*t13811*t31062) + t31821 + t31822 + t31824 + t31825)*var2[5] + t32319*var2[9] + t32298*var2[10] + t32288*var2[11];
  p_output1[27]=t31950*var2[3] + t32165*var2[4] + t32319*var2[5] + (t17332*t30935 + t32302 + 0.15121*(t30939 + t32303) - 0.28121*t13459*t32351 - 0.50321*t13232*t13592*t32351 + 0.50321*t13718*t13811*t32351 - 0.19821*(t13232*t13529*t32351 + t13718*t13811*t32351))*var2[9] + t32342*var2[10] + t32332*var2[11];
  p_output1[28]=t32017*var2[3] + t32208*var2[4] + t32298*var2[5] + t32342*var2[9] + (t31818 - 0.28121*t13232*t32367 - 0.50321*t13592*t32369 - 0.50321*t13811*t32393 - 0.19821*(t13529*t32369 - 1.*t13811*t32393))*var2[10] + t32379*var2[11];
  p_output1[29]=t32025*var2[3] + t32193*var2[4] + t32288*var2[5] + t32332*var2[9] + t32379*var2[10] + (0.50321*t13811*t32373 - 0.50321*t13529*t32415 - 0.19821*(t13811*t32373 - 1.*t13529*t32415))*var2[11];
  p_output1[30]=1.;
  p_output1[31]=-0.28121*t13718*t15559*t30731 + t12991*t31286 + t13191*t31486 + 0.15121*t31492 - 0.28121*t13459*t31628 + t31635 - 0.50321*t13592*t31803 - 0.19821*(t31637 + t13529*t31803);
  p_output1[32]=-0.28121*t12992*t13718*t29371 + t12991*t13197*t15559*t29371 + 0.15121*t32148 - 0.28121*t13459*t32172 - 0.50321*t13592*t32176 - 0.50321*t13811*t32181 - 0.19821*(t13529*t32176 - 1.*t13811*t32181) - 1.*t13191*t15559*t29371*t9138;
  p_output1[33]=t12991*t30742 + t13191*t32279 - 0.28121*t13459*t32281 - 0.50321*t13232*t13592*t32281 + 0.50321*t13718*t13811*t32281 - 0.19821*(t13232*t13529*t32281 + t13718*t13811*t32281) + 0.15121*t32309;
  p_output1[34]=t15442*t30935 + t15461*t32279 - 0.28121*t13459*t32325 - 0.50321*t13232*t13592*t32325 + 0.50321*t13718*t13811*t32325 - 0.19821*(t13232*t13529*t32325 + t13718*t13811*t32325) + 0.15121*t32351;
  p_output1[35]=0.28121*t13232*t15559*t29371 - 0.28121*t13718*t32367 - 0.50321*t13811*t32369 - 0.50321*t13592*t32373 - 0.19821*(-1.*t13811*t32369 + t13529*t32373);
  p_output1[36]=-0.50321*t13529*t32373 - 0.50321*t13811*t32415 - 0.19821*(-1.*t13529*t32373 - 1.*t13811*t32415);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 37, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_initial_swing_velocity_RlFoot_ParallelStance.hh"

namespace ParallelStance
{

void J_initial_swing_velocity_RlFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
