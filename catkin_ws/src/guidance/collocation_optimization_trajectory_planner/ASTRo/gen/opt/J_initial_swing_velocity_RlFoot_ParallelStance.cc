/*
 * Automatically Generated from Mathematica.
 * Thu 2 Jun 2022 14:55:09 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t15386;
  double t16038;
  double t16819;
  double t16865;
  double t16948;
  double t16998;
  double t15028;
  double t17484;
  double t17510;
  double t17559;
  double t17566;
  double t17587;
  double t17792;
  double t17803;
  double t17814;
  double t19835;
  double t17516;
  double t17524;
  double t17781;
  double t17796;
  double t17797;
  double t17798;
  double t17876;
  double t17923;
  double t17930;
  double t19678;
  double t19688;
  double t19690;
  double t19762;
  double t19767;
  double t19789;
  double t17015;
  double t17475;
  double t20120;
  double t16820;
  double t16972;
  double t20325;
  double t20366;
  double t20376;
  double t20387;
  double t20392;
  double t20398;
  double t20429;
  double t20485;
  double t20612;
  double t20991;
  double t21172;
  double t21184;
  double t20750;
  double t21259;
  double t21447;
  double t21768;
  double t21782;
  double t21795;
  double t22141;
  double t22158;
  double t22159;
  double t22305;
  double t22311;
  double t22313;
  double t19985;
  double t19850;
  double t19856;
  double t20197;
  double t20206;
  double t20246;
  double t20256;
  double t20381;
  double t20134;
  double t20160;
  double t22541;
  double t22545;
  double t22546;
  double t22547;
  double t22548;
  double t22549;
  double t17001;
  double t17505;
  double t19806;
  double t22314;
  double t22338;
  double t22386;
  double t22393;
  double t22433;
  double t22451;
  double t22452;
  double t22455;
  double t22461;
  double t22463;
  double t22475;
  double t22488;
  double t22529;
  double t22533;
  double t22536;
  double t22537;
  double t22538;
  double t22540;
  double t22539;
  double t22550;
  double t19983;
  double t20018;
  double t20028;
  double t22873;
  double t22874;
  double t22878;
  double t22889;
  double t22902;
  double t23016;
  double t23025;
  double t23026;
  double t20150;
  double t23223;
  double t23227;
  double t22119;
  double t22123;
  double t22161;
  double t22179;
  double t22186;
  double t22193;
  double t22196;
  double t22198;
  double t22199;
  double t22921;
  double t23028;
  double t23029;
  double t23030;
  double t23031;
  double t23032;
  double t23033;
  double t23350;
  double t23351;
  double t23367;
  double t21713;
  double t21804;
  double t21805;
  double t21807;
  double t21811;
  double t21954;
  double t21962;
  double t23557;
  double t23558;
  double t23561;
  double t23562;
  double t23563;
  double t23564;
  double t23565;
  double t23566;
  double t23597;
  double t23610;
  double t23611;
  double t23612;
  double t23614;
  double t23616;
  double t23618;
  double t23620;
  double t23622;
  double t23624;
  double t23633;
  double t23632;
  double t23634;
  double t23635;
  double t23642;
  double t23649;
  double t23650;
  double t23658;
  double t23659;
  double t23661;
  double t23684;
  double t23685;
  double t23686;
  double t23691;
  double t23692;
  double t23673;
  double t23708;
  double t23709;
  double t23710;
  double t23707;
  double t23711;
  double t23712;
  double t23714;
  double t23715;
  double t23716;
  double t23730;
  double t23731;
  double t23732;
  double t23742;
  double t23743;
  double t23744;
  double t23746;
  double t23747;
  double t23748;
  double t23755;
  double t23756;
  double t23757;
  double t23759;
  double t23760;
  double t23761;
  double t23763;
  double t23766;
  double t23767;
  double t23778;
  double t23779;
  double t23780;
  double t23781;
  double t23782;
  double t23783;
  double t23784;
  double t23785;
  double t23786;
  double t23787;
  double t23788;
  double t23789;
  double t23790;
  double t23791;
  double t23599;
  double t23602;
  double t23604;
  double t23605;
  double t23606;
  double t23607;
  double t23609;
  double t23613;
  double t23619;
  double t23625;
  double t23626;
  double t23627;
  double t23628;
  double t23629;
  double t23630;
  double t23800;
  double t23804;
  double t23811;
  double t23799;
  double t23812;
  double t23813;
  double t23815;
  double t23816;
  double t23817;
  double t23829;
  double t23835;
  double t23836;
  double t23741;
  double t23851;
  double t23853;
  double t23856;
  double t23861;
  double t23865;
  double t23867;
  double t23868;
  double t23776;
  double t23777;
  double t23792;
  double t23688;
  double t23690;
  double t23693;
  double t23694;
  double t23697;
  double t23698;
  double t23699;
  double t23700;
  double t23701;
  double t23702;
  double t23703;
  double t23704;
  double t23705;
  double t23885;
  double t23887;
  double t23889;
  double t23891;
  double t23893;
  double t23895;
  double t23750;
  double t24020;
  double t24021;
  double t23745;
  double t23749;
  double t23751;
  double t23753;
  double t23754;
  double t23758;
  double t23794;
  double t23795;
  double t23796;
  double t23637;
  double t23656;
  double t23665;
  double t23666;
  double t23667;
  double t23668;
  double t23675;
  double t23677;
  double t23678;
  double t23679;
  double t23680;
  double t23681;
  double t23682;
  double t24042;
  double t24044;
  double t24046;
  double t24049;
  double t24050;
  double t23973;
  double t24002;
  double t24017;
  double t24018;
  double t24019;
  double t24022;
  double t24023;
  double t24024;
  double t24025;
  double t24026;
  double t24027;
  double t24028;
  double t24029;
  double t22559;
  double t22560;
  double t24267;
  double t24268;
  double t23826;
  double t23827;
  double t23837;
  double t23838;
  double t23839;
  double t23840;
  double t23841;
  double t23842;
  double t23843;
  double t23913;
  double t23915;
  double t23917;
  double t23919;
  double t23921;
  double t23923;
  double t23925;
  double t23944;
  double t24079;
  double t24080;
  double t24081;
  double t24087;
  double t24122;
  double t24139;
  double t24141;
  double t24191;
  double t23728;
  double t23729;
  double t23733;
  double t23734;
  double t23735;
  double t23736;
  double t23737;
  double t23738;
  double t23739;
  double t24285;
  double t24286;
  double t24287;
  double t24288;
  double t24289;
  double t24291;
  double t24292;
  double t24293;
  double t24314;
  double t24315;
  double t23814;
  double t23818;
  double t23819;
  double t23820;
  double t23821;
  double t23822;
  double t23823;
  double t23897;
  double t23899;
  double t23900;
  double t23901;
  double t23903;
  double t23905;
  double t23907;
  double t24052;
  double t24057;
  double t24058;
  double t24059;
  double t24061;
  double t24062;
  double t24076;
  double t23713;
  double t23718;
  double t23720;
  double t23721;
  double t23722;
  double t23723;
  double t23724;
  double t24290;
  double t24294;
  double t24295;
  double t24301;
  double t24306;
  double t24307;
  double t24310;
  double t24366;
  double t24367;
  double t24369;
  double t24393;
  double t24394;
  double t24395;
  double t24396;
  double t24397;
  double t24398;
  double t24399;
  double t24400;
  double t24401;
  double t24402;
  double t24404;
  double t24406;
  double t24410;
  double t24411;
  double t24412;
  double t24417;
  double t24421;
  double t24425;
  double t24426;
  double t24431;
  double t24433;
  double t24434;
  double t24435;
  double t24436;
  double t24437;
  double t24438;
  double t24439;
  double t24473;
  double t24475;
  double t24477;
  double t24478;
  double t24479;
  double t24481;
  double t24483;
  double t24381;
  double t24382;
  double t24383;
  double t24384;
  double t24385;
  double t24386;
  double t24387;
  double t24388;
  double t24389;
  double t24390;
  double t24391;
  double t24392;
  double t24494;
  double t24496;
  double t24497;
  double t24498;
  double t24499;
  double t24500;
  double t24501;
  double t24485;
  double t24486;
  double t24487;
  double t24488;
  double t24489;
  double t24490;
  double t24491;
  double t24492;
  double t24493;
  double t24512;
  double t24517;
  double t24522;
  double t24523;
  double t24524;
  double t24529;
  double t24531;
  double t24532;
  double t24533;
  double t24534;
  double t24535;
  double t24543;
  double t24544;
  double t24546;
  double t24542;
  double t24547;
  double t24548;
  double t24550;
  double t24552;
  double t24554;
  double t24564;
  double t24565;
  double t24581;
  double t24582;
  double t24583;
  double t24585;
  double t24586;
  double t24588;
  double t24589;
  double t24510;
  double t24511;
  double t24536;
  double t24609;
  double t24610;
  double t24612;
  double t24613;
  double t24614;
  double t24615;
  double t24640;
  double t24641;
  double t24538;
  double t24539;
  double t24540;
  double t24654;
  double t24655;
  double t24635;
  double t24636;
  double t24637;
  double t24638;
  double t24639;
  double t24642;
  double t24643;
  double t24644;
  double t24645;
  double t24646;
  double t24647;
  double t24648;
  double t24649;
  double t24677;
  double t24678;
  double t24562;
  double t24563;
  double t24566;
  double t24567;
  double t24568;
  double t24569;
  double t24570;
  double t24571;
  double t24572;
  double t24626;
  double t24627;
  double t24628;
  double t24629;
  double t24630;
  double t24631;
  double t24632;
  double t24633;
  double t24664;
  double t24665;
  double t24666;
  double t24667;
  double t24668;
  double t24669;
  double t24670;
  double t24671;
  double t24693;
  double t24694;
  double t24695;
  double t24696;
  double t24698;
  double t24699;
  double t24700;
  double t24710;
  double t24711;
  double t24549;
  double t24555;
  double t24556;
  double t24557;
  double t24558;
  double t24559;
  double t24560;
  double t24616;
  double t24619;
  double t24620;
  double t24621;
  double t24622;
  double t24623;
  double t24624;
  double t24656;
  double t24657;
  double t24658;
  double t24659;
  double t24660;
  double t24661;
  double t24662;
  double t24697;
  double t24701;
  double t24702;
  double t24703;
  double t24704;
  double t24705;
  double t24706;
  double t24725;
  double t24726;
  t15386 = Cos(var1[9]);
  t16038 = -1.*t15386;
  t16819 = 1. + t16038;
  t16865 = Sin(var1[9]);
  t16948 = 0.15121*t16865;
  t16998 = Sin(var1[4]);
  t15028 = Cos(var1[5]);
  t17484 = Sin(var1[5]);
  t17510 = Cos(var1[10]);
  t17559 = t15028*t16865*t16998;
  t17566 = t15386*t16998*t17484;
  t17587 = t17559 + t17566;
  t17792 = Cos(var1[11]);
  t17803 = Sin(var1[10]);
  t17814 = Sin(var1[11]);
  t19835 = 0.15121*t15386;
  t17516 = -1.*t17510;
  t17524 = 1. + t17516;
  t17781 = -0.28121*t17524*t17587;
  t17796 = -1.*t17792;
  t17797 = 1. + t17796;
  t17798 = -0.50321*t17510*t17797*t17587;
  t17876 = 0.50321*t17803*t17814*t17587;
  t17923 = t15386*t15028*t16998;
  t17930 = -1.*t16865*t16998*t17484;
  t19678 = t17923 + t17930;
  t19688 = 0.15121*t19678;
  t19690 = t17510*t17792*t17587;
  t19762 = t17803*t17814*t17587;
  t19767 = t19690 + t19762;
  t19789 = -0.19821*t19767;
  t17015 = -0.15121*t16819;
  t17475 = t17015 + t16948;
  t20120 = Cos(var1[4]);
  t16820 = 0.15121*t16819;
  t16972 = t16820 + t16948;
  t20325 = -1.*t15386*t20120*t15028;
  t20366 = t20120*t16865*t17484;
  t20376 = t20325 + t20366;
  t20387 = -1.*t17803*t16998;
  t20392 = t17510*t20376;
  t20398 = t20387 + t20392;
  t20429 = -1.*t17510*t16998;
  t20485 = -1.*t17803*t20376;
  t20612 = t20429 + t20485;
  t20991 = -1.*t15386*t15028*t16998;
  t21172 = t16865*t16998*t17484;
  t21184 = t20991 + t21172;
  t20750 = t20120*t17803;
  t21259 = t17510*t21184;
  t21447 = t20750 + t21259;
  t21768 = t17510*t20120;
  t21782 = -1.*t17803*t21184;
  t21795 = t21768 + t21782;
  t22141 = -1.*t20120*t17803;
  t22158 = -1.*t17510*t21184;
  t22159 = t22141 + t22158;
  t22305 = -1.*t20120*t15028*t16865;
  t22311 = -1.*t15386*t20120*t17484;
  t22313 = t22305 + t22311;
  t19985 = t19835 + t16948;
  t19850 = -0.15121*t16865;
  t19856 = t19835 + t19850;
  t20197 = t20120*t15028*t16865;
  t20206 = t15386*t20120*t17484;
  t20246 = t20197 + t20206;
  t20256 = 0.15121*t20246;
  t20381 = -0.28121*t17524*t20376;
  t20134 = -1.*t20120*t15028*t17475;
  t20160 = t20120*t16972*t17484;
  t22541 = -0.50321*t17510*t17797*t20376;
  t22545 = 0.50321*t17803*t17814*t20376;
  t22546 = t17510*t17792*t20376;
  t22547 = t17803*t17814*t20376;
  t22548 = t22546 + t22547;
  t22549 = -0.19821*t22548;
  t17001 = t15028*t16972*t16998;
  t17505 = t17475*t16998*t17484;
  t19806 = t17001 + t17505 + t17781 + t17798 + t17876 + t19688 + t19789;
  t22314 = 0.50321*t17792*t17803*t22313;
  t22338 = -0.50321*t17510*t17814*t22313;
  t22386 = t17792*t17803*t22313;
  t22393 = -1.*t17510*t17814*t22313;
  t22433 = t22386 + t22393;
  t22451 = -0.19821*t22433;
  t22452 = t22314 + t22338 + t22451;
  t22455 = var2[11]*t22452;
  t22461 = -0.28121*t17803*t22313;
  t22463 = 0.50321*t17797*t17803*t22313;
  t22475 = 0.50321*t17510*t17814*t22313;
  t22488 = -1.*t17792*t17803*t22313;
  t22529 = t17510*t17814*t22313;
  t22533 = t22488 + t22529;
  t22536 = -0.19821*t22533;
  t22537 = t22461 + t22463 + t22475 + t22536;
  t22538 = var2[10]*t22537;
  t22540 = -1.*t20120*t19856*t17484;
  t22539 = -1.*t20120*t15028*t19985;
  t22550 = t22539 + t22540 + t20256 + t20381 + t22541 + t22545 + t22549;
  t19983 = -1.*t15028*t19856*t16998;
  t20018 = t19985*t16998*t17484;
  t20028 = t19983 + t20018 + t17781 + t17798 + t17876 + t19688 + t19789;
  t22873 = t15386*t20120*t15028;
  t22874 = -1.*t20120*t16865*t17484;
  t22878 = t22873 + t22874;
  t22889 = -1.*t17510*t22878;
  t22902 = t20387 + t22889;
  t23016 = t17510*t16998;
  t23025 = -1.*t17803*t22878;
  t23026 = t23016 + t23025;
  t20150 = -0.28121*t17803*t16998;
  t23223 = t17803*t22878;
  t23227 = t20429 + t23223;
  t22119 = 0.28121*t17510*t20120;
  t22123 = -0.28121*t17803*t21184;
  t22161 = -0.50321*t17814*t22159;
  t22179 = -0.50321*t17797*t21795;
  t22186 = -1.*t17814*t22159;
  t22193 = t17792*t21795;
  t22196 = t22186 + t22193;
  t22198 = -0.19821*t22196;
  t22199 = t22119 + t22123 + t22161 + t22179 + t22198;
  t22921 = -0.50321*t17792*t22902;
  t23028 = -0.50321*t17814*t23026;
  t23029 = -1.*t17792*t22902;
  t23030 = -1.*t17814*t23026;
  t23031 = t23029 + t23030;
  t23032 = -0.19821*t23031;
  t23033 = t22921 + t23028 + t23032;
  t23350 = t17803*t16998;
  t23351 = t17510*t22878;
  t23367 = t23350 + t23351;
  t21713 = -0.50321*t17814*t21447;
  t21804 = -0.50321*t17792*t21795;
  t21805 = -1.*t17814*t21447;
  t21807 = -1.*t17792*t21795;
  t21811 = t21805 + t21807;
  t21954 = -0.19821*t21811;
  t21962 = t21713 + t21804 + t21954;
  t23557 = -0.28121*t17524*t22313;
  t23558 = -0.50321*t17510*t17797*t22313;
  t23561 = 0.50321*t17803*t17814*t22313;
  t23562 = 0.15121*t20376;
  t23563 = t17510*t17792*t22313;
  t23564 = t17803*t17814*t22313;
  t23565 = t23563 + t23564;
  t23566 = -0.19821*t23565;
  t23597 = Cos(var1[3]);
  t23610 = t15386*t23597*t20120*t15028;
  t23611 = -1.*t23597*t20120*t16865*t17484;
  t23612 = t23610 + t23611;
  t23614 = t23597*t17803*t16998;
  t23616 = t17510*t23612;
  t23618 = t23614 + t23616;
  t23620 = t17510*t23597*t16998;
  t23622 = -1.*t17803*t23612;
  t23624 = t23620 + t23622;
  t23633 = Sin(var1[3]);
  t23632 = t23597*t15028*t16998;
  t23634 = -1.*t23633*t17484;
  t23635 = t23632 + t23634;
  t23642 = -1.*t15028*t23633;
  t23649 = -1.*t23597*t16998*t17484;
  t23650 = t23642 + t23649;
  t23658 = -1.*t16865*t23635;
  t23659 = t15386*t23650;
  t23661 = t23658 + t23659;
  t23684 = -1.*t23597*t15028*t16998;
  t23685 = t23633*t17484;
  t23686 = t23684 + t23685;
  t23691 = t16865*t23686;
  t23692 = t23691 + t23659;
  t23673 = -1.*t16865*t23650;
  t23708 = t15386*t23635;
  t23709 = t16865*t23650;
  t23710 = t23708 + t23709;
  t23707 = -1.*t23597*t20120*t17803;
  t23711 = t17510*t23710;
  t23712 = t23707 + t23711;
  t23714 = -1.*t17510*t23597*t20120;
  t23715 = -1.*t17803*t23710;
  t23716 = t23714 + t23715;
  t23730 = t23597*t20120*t17803;
  t23731 = -1.*t17510*t23710;
  t23732 = t23730 + t23731;
  t23742 = -1.*t15028*t23633*t16998;
  t23743 = -1.*t23597*t17484;
  t23744 = t23742 + t23743;
  t23746 = -1.*t23597*t15028;
  t23747 = t23633*t16998*t17484;
  t23748 = t23746 + t23747;
  t23755 = t15386*t23744;
  t23756 = t16865*t23748;
  t23757 = t23755 + t23756;
  t23759 = t20120*t17803*t23633;
  t23760 = t17510*t23757;
  t23761 = t23759 + t23760;
  t23763 = t17510*t20120*t23633;
  t23766 = -1.*t17803*t23757;
  t23767 = t23763 + t23766;
  t23778 = -1.*t20120*t15028*t16865*t23633;
  t23779 = -1.*t15386*t20120*t23633*t17484;
  t23780 = t23778 + t23779;
  t23781 = -0.28121*t17524*t23780;
  t23782 = -0.50321*t17510*t17797*t23780;
  t23783 = 0.50321*t17803*t17814*t23780;
  t23784 = -1.*t15386*t20120*t15028*t23633;
  t23785 = t20120*t16865*t23633*t17484;
  t23786 = t23784 + t23785;
  t23787 = 0.15121*t23786;
  t23788 = t17510*t17792*t23780;
  t23789 = t17803*t17814*t23780;
  t23790 = t23788 + t23789;
  t23791 = -0.19821*t23790;
  t23599 = t23597*t20120*t15028*t17475;
  t23602 = 0.28121*t23597*t17803*t16998;
  t23604 = -1.*t23597*t20120*t16972*t17484;
  t23605 = -1.*t23597*t20120*t15028*t16865;
  t23606 = -1.*t15386*t23597*t20120*t17484;
  t23607 = t23605 + t23606;
  t23609 = 0.15121*t23607;
  t23613 = -0.28121*t17524*t23612;
  t23619 = -0.50321*t17797*t23618;
  t23625 = -0.50321*t17814*t23624;
  t23626 = t17792*t23618;
  t23627 = -1.*t17814*t23624;
  t23628 = t23626 + t23627;
  t23629 = -0.19821*t23628;
  t23630 = t23599 + t23602 + t23604 + t23609 + t23613 + t23619 + t23625 + t23629;
  t23800 = t15386*t20120*t15028*t23633;
  t23804 = -1.*t20120*t16865*t23633*t17484;
  t23811 = t23800 + t23804;
  t23799 = t17803*t23633*t16998;
  t23812 = t17510*t23811;
  t23813 = t23799 + t23812;
  t23815 = t17510*t23633*t16998;
  t23816 = -1.*t17803*t23811;
  t23817 = t23815 + t23816;
  t23829 = -1.*t17803*t23633*t16998;
  t23835 = -1.*t17510*t23811;
  t23836 = t23829 + t23835;
  t23741 = 0.28121*t20120*t17803*t23633;
  t23851 = -1.*t15386*t15028*t23633*t16998;
  t23853 = t16865*t23633*t16998*t17484;
  t23856 = t23851 + t23853;
  t23861 = t17510*t23856;
  t23865 = t23759 + t23861;
  t23867 = -1.*t17803*t23856;
  t23868 = t23763 + t23867;
  t23776 = -1.*t20120*t15028*t16972*t23633;
  t23777 = -1.*t20120*t17475*t23633*t17484;
  t23792 = t23776 + t23777 + t23781 + t23782 + t23783 + t23787 + t23791;
  t23688 = t16972*t23686;
  t23690 = t17475*t23650;
  t23693 = -0.28121*t17524*t23692;
  t23694 = -0.50321*t17510*t17797*t23692;
  t23697 = 0.50321*t17803*t17814*t23692;
  t23698 = t15386*t23686;
  t23699 = t23698 + t23673;
  t23700 = 0.15121*t23699;
  t23701 = t17510*t17792*t23692;
  t23702 = t17803*t17814*t23692;
  t23703 = t23701 + t23702;
  t23704 = -0.19821*t23703;
  t23705 = t23688 + t23690 + t23693 + t23694 + t23697 + t23700 + t23704;
  t23885 = t16865*t23744;
  t23887 = t23597*t15028;
  t23889 = -1.*t23633*t16998*t17484;
  t23891 = t23887 + t23889;
  t23893 = t15386*t23891;
  t23895 = t23885 + t23893;
  t23750 = -1.*t16865*t23744;
  t24020 = -1.*t16865*t23891;
  t24021 = t23755 + t24020;
  t23745 = t17475*t23744;
  t23749 = t16972*t23748;
  t23751 = t15386*t23748;
  t23753 = t23750 + t23751;
  t23754 = 0.15121*t23753;
  t23758 = -0.28121*t17524*t23757;
  t23794 = t20120*t15028*t19856*t23633;
  t23795 = -1.*t20120*t19985*t23633*t17484;
  t23796 = t23794 + t23795 + t23781 + t23782 + t23783 + t23787 + t23791;
  t23637 = t19856*t23635;
  t23656 = t19985*t23650;
  t23665 = -0.28121*t17524*t23661;
  t23666 = -0.50321*t17510*t17797*t23661;
  t23667 = 0.50321*t17803*t17814*t23661;
  t23668 = -1.*t15386*t23635;
  t23675 = t23668 + t23673;
  t23677 = 0.15121*t23675;
  t23678 = t17510*t17792*t23661;
  t23679 = t17803*t17814*t23661;
  t23680 = t23678 + t23679;
  t23681 = -0.19821*t23680;
  t23682 = t23637 + t23656 + t23665 + t23666 + t23667 + t23677 + t23681;
  t24042 = t15028*t23633*t16998;
  t24044 = t23597*t17484;
  t24046 = t24042 + t24044;
  t24049 = -1.*t16865*t24046;
  t24050 = t24049 + t23893;
  t23973 = t19985*t23744;
  t24002 = t19856*t23891;
  t24017 = -1.*t15386*t23891;
  t24018 = t23750 + t24017;
  t24019 = 0.15121*t24018;
  t24022 = -0.28121*t17524*t24021;
  t24023 = -0.50321*t17510*t17797*t24021;
  t24024 = 0.50321*t17803*t17814*t24021;
  t24025 = t17510*t17792*t24021;
  t24026 = t17803*t17814*t24021;
  t24027 = t24025 + t24026;
  t24028 = -0.19821*t24027;
  t24029 = t23973 + t24002 + t24019 + t24022 + t24023 + t24024 + t24028;
  t22559 = -0.15121*t15386;
  t22560 = t22559 + t19850;
  t24267 = -1.*t15386*t24046;
  t24268 = t24267 + t24020;
  t23826 = 0.28121*t17510*t23633*t16998;
  t23827 = -0.28121*t17803*t23811;
  t23837 = -0.50321*t17814*t23836;
  t23838 = -0.50321*t17797*t23817;
  t23839 = -1.*t17814*t23836;
  t23840 = t17792*t23817;
  t23841 = t23839 + t23840;
  t23842 = -0.19821*t23841;
  t23843 = t23826 + t23827 + t23837 + t23838 + t23842;
  t23913 = -0.28121*t17803*t23895;
  t23915 = 0.50321*t17797*t17803*t23895;
  t23917 = 0.50321*t17510*t17814*t23895;
  t23919 = -1.*t17792*t17803*t23895;
  t23921 = t17510*t17814*t23895;
  t23923 = t23919 + t23921;
  t23925 = -0.19821*t23923;
  t23944 = t23913 + t23915 + t23917 + t23925;
  t24079 = -0.28121*t17803*t24050;
  t24080 = 0.50321*t17797*t17803*t24050;
  t24081 = 0.50321*t17510*t17814*t24050;
  t24087 = -1.*t17792*t17803*t24050;
  t24122 = t17510*t17814*t24050;
  t24139 = t24087 + t24122;
  t24141 = -0.19821*t24139;
  t24191 = t24079 + t24080 + t24081 + t24141;
  t23728 = -0.28121*t17510*t23597*t20120;
  t23729 = -0.28121*t17803*t23710;
  t23733 = -0.50321*t17814*t23732;
  t23734 = -0.50321*t17797*t23716;
  t23735 = -1.*t17814*t23732;
  t23736 = t17792*t23716;
  t23737 = t23735 + t23736;
  t23738 = -0.19821*t23737;
  t23739 = t23728 + t23729 + t23733 + t23734 + t23738;
  t24285 = t15386*t24046;
  t24286 = t16865*t23891;
  t24287 = t24285 + t24286;
  t24288 = -1.*t17510*t24287;
  t24289 = t23759 + t24288;
  t24291 = -1.*t17510*t20120*t23633;
  t24292 = -1.*t17803*t24287;
  t24293 = t24291 + t24292;
  t24314 = t17803*t24287;
  t24315 = t23763 + t24314;
  t23814 = -0.50321*t17814*t23813;
  t23818 = -0.50321*t17792*t23817;
  t23819 = -1.*t17814*t23813;
  t23820 = -1.*t17792*t23817;
  t23821 = t23819 + t23820;
  t23822 = -0.19821*t23821;
  t23823 = t23814 + t23818 + t23822;
  t23897 = 0.50321*t17792*t17803*t23895;
  t23899 = -0.50321*t17510*t17814*t23895;
  t23900 = t17792*t17803*t23895;
  t23901 = -1.*t17510*t17814*t23895;
  t23903 = t23900 + t23901;
  t23905 = -0.19821*t23903;
  t23907 = t23897 + t23899 + t23905;
  t24052 = 0.50321*t17792*t17803*t24050;
  t24057 = -0.50321*t17510*t17814*t24050;
  t24058 = t17792*t17803*t24050;
  t24059 = -1.*t17510*t17814*t24050;
  t24061 = t24058 + t24059;
  t24062 = -0.19821*t24061;
  t24076 = t24052 + t24057 + t24062;
  t23713 = -0.50321*t17814*t23712;
  t23718 = -0.50321*t17792*t23716;
  t23720 = -1.*t17814*t23712;
  t23721 = -1.*t17792*t23716;
  t23722 = t23720 + t23721;
  t23723 = -0.19821*t23722;
  t23724 = t23713 + t23718 + t23723;
  t24290 = -0.50321*t17792*t24289;
  t24294 = -0.50321*t17814*t24293;
  t24295 = -1.*t17792*t24289;
  t24301 = -1.*t17814*t24293;
  t24306 = t24295 + t24301;
  t24307 = -0.19821*t24306;
  t24310 = t24290 + t24294 + t24307;
  t24366 = -1.*t20120*t17803*t23633;
  t24367 = t17510*t24287;
  t24369 = t24366 + t24367;
  t24393 = t20120*t15028*t17475*t23633;
  t24394 = 0.28121*t17803*t23633*t16998;
  t24395 = -1.*t20120*t16972*t23633*t17484;
  t24396 = 0.15121*t23780;
  t24397 = -0.28121*t17524*t23811;
  t24398 = -0.50321*t17797*t23813;
  t24399 = -0.50321*t17814*t23817;
  t24400 = t17792*t23813;
  t24401 = -1.*t17814*t23817;
  t24402 = t24400 + t24401;
  t24404 = -0.19821*t24402;
  t24406 = t24393 + t24394 + t24395 + t24396 + t24397 + t24398 + t24399 + t24404;
  t24410 = t16972*t23744;
  t24411 = t17475*t23891;
  t24412 = -0.28121*t17524*t23895;
  t24417 = -0.50321*t17510*t17797*t23895;
  t24421 = 0.50321*t17803*t17814*t23895;
  t24425 = 0.15121*t24021;
  t24426 = t17510*t17792*t23895;
  t24431 = t17803*t17814*t23895;
  t24433 = t24426 + t24431;
  t24434 = -0.19821*t24433;
  t24435 = t24410 + t24411 + t24412 + t24417 + t24421 + t24425 + t24434;
  t24436 = t19856*t24046;
  t24437 = t19985*t23891;
  t24438 = -0.28121*t17524*t24050;
  t24439 = -0.50321*t17510*t17797*t24050;
  t24473 = 0.50321*t17803*t17814*t24050;
  t24475 = 0.15121*t24268;
  t24477 = t17510*t17792*t24050;
  t24478 = t17803*t17814*t24050;
  t24479 = t24477 + t24478;
  t24481 = -0.19821*t24479;
  t24483 = t24436 + t24437 + t24438 + t24439 + t24473 + t24475 + t24481;
  t24381 = -0.28121*t23597*t20120*t17803;
  t24382 = t17475*t23635;
  t24383 = t16972*t23650;
  t24384 = 0.15121*t23661;
  t24385 = -0.28121*t17524*t23710;
  t24386 = -0.50321*t17797*t23712;
  t24387 = -0.50321*t17814*t23716;
  t24388 = t17792*t23712;
  t24389 = -1.*t17814*t23716;
  t24390 = t24388 + t24389;
  t24391 = -0.19821*t24390;
  t24392 = t24381 + t24382 + t24383 + t24384 + t24385 + t24386 + t24387 + t24391;
  t24494 = -0.50321*t17814*t24369;
  t24496 = -0.50321*t17792*t24293;
  t24497 = -1.*t17814*t24369;
  t24498 = -1.*t17792*t24293;
  t24499 = t24497 + t24498;
  t24500 = -0.19821*t24499;
  t24501 = t24494 + t24496 + t24500;
  t24485 = -0.28121*t17510*t20120*t23633;
  t24486 = -0.28121*t17803*t24287;
  t24487 = -0.50321*t17814*t24289;
  t24488 = -0.50321*t17797*t24293;
  t24489 = -1.*t17814*t24289;
  t24490 = t17792*t24293;
  t24491 = t24489 + t24490;
  t24492 = -0.19821*t24491;
  t24493 = t24485 + t24486 + t24487 + t24488 + t24492;
  t24512 = t23597*t20120*t15028*t16865;
  t24517 = t15386*t23597*t20120*t17484;
  t24522 = t24512 + t24517;
  t24523 = -0.28121*t17524*t24522;
  t24524 = -0.50321*t17510*t17797*t24522;
  t24529 = 0.50321*t17803*t17814*t24522;
  t24531 = 0.15121*t23612;
  t24532 = t17510*t17792*t24522;
  t24533 = t17803*t17814*t24522;
  t24534 = t24532 + t24533;
  t24535 = -0.19821*t24534;
  t24543 = -1.*t15386*t23597*t20120*t15028;
  t24544 = t23597*t20120*t16865*t17484;
  t24546 = t24543 + t24544;
  t24542 = -1.*t23597*t17803*t16998;
  t24547 = t17510*t24546;
  t24548 = t24542 + t24547;
  t24550 = -1.*t17510*t23597*t16998;
  t24552 = -1.*t17803*t24546;
  t24554 = t24550 + t24552;
  t24564 = -1.*t17510*t24546;
  t24565 = t23614 + t24564;
  t24581 = t15386*t23597*t15028*t16998;
  t24582 = -1.*t23597*t16865*t16998*t17484;
  t24583 = t24581 + t24582;
  t24585 = t17510*t24583;
  t24586 = t23707 + t24585;
  t24588 = -1.*t17803*t24583;
  t24589 = t23714 + t24588;
  t24510 = t23597*t20120*t15028*t16972;
  t24511 = t23597*t20120*t17475*t17484;
  t24536 = t24510 + t24511 + t24523 + t24524 + t24529 + t24531 + t24535;
  t24609 = t16865*t23635;
  t24610 = t15028*t23633;
  t24612 = t23597*t16998*t17484;
  t24613 = t24610 + t24612;
  t24614 = t15386*t24613;
  t24615 = t24609 + t24614;
  t24640 = -1.*t16865*t24613;
  t24641 = t23708 + t24640;
  t24538 = -1.*t23597*t20120*t15028*t19856;
  t24539 = t23597*t20120*t19985*t17484;
  t24540 = t24538 + t24539 + t24523 + t24524 + t24529 + t24531 + t24535;
  t24654 = -1.*t16865*t23686;
  t24655 = t24654 + t24614;
  t24635 = t19985*t23635;
  t24636 = t19856*t24613;
  t24637 = -1.*t15386*t24613;
  t24638 = t23658 + t24637;
  t24639 = 0.15121*t24638;
  t24642 = -0.28121*t17524*t24641;
  t24643 = -0.50321*t17510*t17797*t24641;
  t24644 = 0.50321*t17803*t17814*t24641;
  t24645 = t17510*t17792*t24641;
  t24646 = t17803*t17814*t24641;
  t24647 = t24645 + t24646;
  t24648 = -0.19821*t24647;
  t24649 = t24635 + t24636 + t24639 + t24642 + t24643 + t24644 + t24648;
  t24677 = -1.*t15386*t23686;
  t24678 = t24677 + t24640;
  t24562 = -0.28121*t17510*t23597*t16998;
  t24563 = -0.28121*t17803*t24546;
  t24566 = -0.50321*t17814*t24565;
  t24567 = -0.50321*t17797*t24554;
  t24568 = -1.*t17814*t24565;
  t24569 = t17792*t24554;
  t24570 = t24568 + t24569;
  t24571 = -0.19821*t24570;
  t24572 = t24562 + t24563 + t24566 + t24567 + t24571;
  t24626 = -0.28121*t17803*t24615;
  t24627 = 0.50321*t17797*t17803*t24615;
  t24628 = 0.50321*t17510*t17814*t24615;
  t24629 = -1.*t17792*t17803*t24615;
  t24630 = t17510*t17814*t24615;
  t24631 = t24629 + t24630;
  t24632 = -0.19821*t24631;
  t24633 = t24626 + t24627 + t24628 + t24632;
  t24664 = -0.28121*t17803*t24655;
  t24665 = 0.50321*t17797*t17803*t24655;
  t24666 = 0.50321*t17510*t17814*t24655;
  t24667 = -1.*t17792*t17803*t24655;
  t24668 = t17510*t17814*t24655;
  t24669 = t24667 + t24668;
  t24670 = -0.19821*t24669;
  t24671 = t24664 + t24665 + t24666 + t24670;
  t24693 = t16865*t24613;
  t24694 = t23698 + t24693;
  t24695 = -1.*t17510*t24694;
  t24696 = t23707 + t24695;
  t24698 = t17510*t23597*t20120;
  t24699 = -1.*t17803*t24694;
  t24700 = t24698 + t24699;
  t24710 = t17803*t24694;
  t24711 = t23714 + t24710;
  t24549 = -0.50321*t17814*t24548;
  t24555 = -0.50321*t17792*t24554;
  t24556 = -1.*t17814*t24548;
  t24557 = -1.*t17792*t24554;
  t24558 = t24556 + t24557;
  t24559 = -0.19821*t24558;
  t24560 = t24549 + t24555 + t24559;
  t24616 = 0.50321*t17792*t17803*t24615;
  t24619 = -0.50321*t17510*t17814*t24615;
  t24620 = t17792*t17803*t24615;
  t24621 = -1.*t17510*t17814*t24615;
  t24622 = t24620 + t24621;
  t24623 = -0.19821*t24622;
  t24624 = t24616 + t24619 + t24623;
  t24656 = 0.50321*t17792*t17803*t24655;
  t24657 = -0.50321*t17510*t17814*t24655;
  t24658 = t17792*t17803*t24655;
  t24659 = -1.*t17510*t17814*t24655;
  t24660 = t24658 + t24659;
  t24661 = -0.19821*t24660;
  t24662 = t24656 + t24657 + t24661;
  t24697 = -0.50321*t17792*t24696;
  t24701 = -0.50321*t17814*t24700;
  t24702 = -1.*t17792*t24696;
  t24703 = -1.*t17814*t24700;
  t24704 = t24702 + t24703;
  t24705 = -0.19821*t24704;
  t24706 = t24697 + t24701 + t24705;
  t24725 = t17510*t24694;
  t24726 = t23730 + t24725;
  p_output1[0]=(t20134 + t20150 + t20160 + t20256 + t20381 - 0.50321*t17797*t20398 - 0.50321*t17814*t20612 - 0.19821*(t17792*t20398 - 1.*t17814*t20612))*var2[4] + t19806*var2[5] + t20028*var2[9] + t22199*var2[10] + t21962*var2[11];
  p_output1[1]=t22455 + t22538 + t19806*var2[4] + (t20134 + t20160 + t20256 + t20381 + t22541 + t22545 + t22549)*var2[5] + t22550*var2[9];
  p_output1[2]=t22455 + t22538 + t20028*var2[4] + t22550*var2[5] + (t20256 + t20381 + t22540 + t22541 + t22545 + t22549 + t15028*t20120*t22560)*var2[9];
  p_output1[3]=t22199*var2[4] + t22537*var2[5] + t22537*var2[9] + (t20150 - 0.28121*t17510*t22878 - 0.50321*t17797*t22902 - 0.50321*t17814*t23227 - 0.19821*(t17792*t22902 - 1.*t17814*t23227))*var2[10] + t23033*var2[11];
  p_output1[4]=t21962*var2[4] + t22452*var2[5] + t22452*var2[9] + t23033*var2[10] + (0.50321*t17814*t23026 - 0.50321*t17792*t23367 - 0.19821*(t17814*t23026 - 1.*t17792*t23367))*var2[11];
  p_output1[5]=1.;
  p_output1[6]=-1.*t15028*t16998*t17475 + t16972*t16998*t17484 + 0.15121*t17587 + 0.28121*t17803*t20120 - 0.28121*t17524*t21184 - 0.50321*t17797*t21447 - 0.50321*t17814*t21795 - 0.19821*(t17792*t21447 - 1.*t17814*t21795);
  p_output1[7]=-1.*t15028*t16972*t20120 - 1.*t17475*t17484*t20120 + t23557 + t23558 + t23561 + t23562 + t23566;
  p_output1[8]=t15028*t19856*t20120 - 1.*t17484*t19985*t20120 + t23557 + t23558 + t23561 + t23562 + t23566;
  p_output1[9]=0.28121*t16998*t17510 - 0.28121*t17803*t22878 - 0.50321*t17814*t22902 - 0.50321*t17797*t23026 - 0.19821*(-1.*t17814*t22902 + t17792*t23026);
  p_output1[10]=-0.50321*t17792*t23026 - 0.50321*t17814*t23367 - 0.19821*(-1.*t17792*t23026 - 1.*t17814*t23367);
  p_output1[11]=(t23741 + t23745 + t23749 + t23754 + t23758 - 0.50321*t17797*t23761 - 0.50321*t17814*t23767 - 0.19821*(t17792*t23761 - 1.*t17814*t23767))*var2[3] + t23630*var2[4] + t23705*var2[5] + t23682*var2[9] + t23739*var2[10] + t23724*var2[11];
  p_output1[12]=t23630*var2[3] + (-1.*t15028*t16998*t17475*t23633 + t16972*t16998*t17484*t23633 + 0.15121*(t15028*t16865*t16998*t23633 + t15386*t16998*t17484*t23633) + t23741 - 0.28121*t17524*t23856 - 0.50321*t17797*t23865 - 0.50321*t17814*t23868 - 0.19821*(t17792*t23865 - 1.*t17814*t23868))*var2[4] + t23792*var2[5] + t23796*var2[9] + t23843*var2[10] + t23823*var2[11];
  p_output1[13]=t23705*var2[3] + t23792*var2[4] + (t23745 + t23749 + t23754 - 0.50321*t17510*t17797*t23757 + 0.50321*t17803*t17814*t23757 - 0.19821*(t17510*t17792*t23757 + t17803*t17814*t23757) + t23758)*var2[5] + t24029*var2[9] + t23944*var2[10] + t23907*var2[11];
  p_output1[14]=t23682*var2[3] + t23796*var2[4] + t24029*var2[5] + (t24002 + t22560*t24046 + 0.15121*(t24017 + t16865*t24046) - 0.28121*t17524*t24268 - 0.50321*t17510*t17797*t24268 + 0.50321*t17803*t17814*t24268 - 0.19821*(t17510*t17792*t24268 + t17803*t17814*t24268))*var2[9] + t24191*var2[10] + t24076*var2[11];
  p_output1[15]=t23739*var2[3] + t23843*var2[4] + t23944*var2[5] + t24191*var2[9] + (t23741 - 0.28121*t17510*t24287 - 0.50321*t17797*t24289 - 0.50321*t17814*t24315 - 0.19821*(t17792*t24289 - 1.*t17814*t24315))*var2[10] + t24310*var2[11];
  p_output1[16]=t23724*var2[3] + t23823*var2[4] + t23907*var2[5] + t24076*var2[9] + t24310*var2[10] + (0.50321*t17814*t24293 - 0.50321*t17792*t24369 - 0.19821*(t17814*t24293 - 1.*t17792*t24369))*var2[11];
  p_output1[17]=1.;
  p_output1[18]=t24392;
  p_output1[19]=t24406;
  p_output1[20]=t24435;
  p_output1[21]=t24483;
  p_output1[22]=t24493;
  p_output1[23]=t24501;
  p_output1[24]=t24392*var2[3] + t24406*var2[4] + t24435*var2[5] + t24483*var2[9] + t24493*var2[10] + t24501*var2[11];
  p_output1[25]=t24406*var2[3] + (t15028*t16998*t17475*t23597 - 1.*t16972*t16998*t17484*t23597 + 0.15121*(-1.*t15028*t16865*t16998*t23597 - 1.*t15386*t16998*t17484*t23597) + t24381 - 0.28121*t17524*t24583 - 0.50321*t17797*t24586 - 0.50321*t17814*t24589 - 0.19821*(t17792*t24586 - 1.*t17814*t24589))*var2[4] + t24536*var2[5] + t24540*var2[9] + t24572*var2[10] + t24560*var2[11];
  p_output1[26]=t24435*var2[3] + t24536*var2[4] + (-0.50321*t17510*t17797*t23710 + 0.50321*t17803*t17814*t23710 - 0.19821*(t17510*t17792*t23710 + t17803*t17814*t23710) + t24382 + t24383 + t24384 + t24385)*var2[5] + t24649*var2[9] + t24633*var2[10] + t24624*var2[11];
  p_output1[27]=t24483*var2[3] + t24540*var2[4] + t24649*var2[5] + (t22560*t23686 + t24636 + 0.15121*(t23691 + t24637) - 0.28121*t17524*t24678 - 0.50321*t17510*t17797*t24678 + 0.50321*t17803*t17814*t24678 - 0.19821*(t17510*t17792*t24678 + t17803*t17814*t24678))*var2[9] + t24671*var2[10] + t24662*var2[11];
  p_output1[28]=t24493*var2[3] + t24572*var2[4] + t24633*var2[5] + t24671*var2[9] + (t24381 - 0.28121*t17510*t24694 - 0.50321*t17797*t24696 - 0.50321*t17814*t24711 - 0.19821*(t17792*t24696 - 1.*t17814*t24711))*var2[10] + t24706*var2[11];
  p_output1[29]=t24501*var2[3] + t24560*var2[4] + t24624*var2[5] + t24662*var2[9] + t24706*var2[10] + (0.50321*t17814*t24700 - 0.50321*t17792*t24726 - 0.19821*(t17814*t24700 - 1.*t17792*t24726))*var2[11];
  p_output1[30]=1.;
  p_output1[31]=-0.28121*t17803*t20120*t23633 + t16972*t23891 + t17475*t24046 + 0.15121*t24050 - 0.28121*t17524*t24287 + t24294 - 0.50321*t17797*t24369 - 0.19821*(t24301 + t17792*t24369);
  p_output1[32]=-0.28121*t16998*t17803*t23597 - 1.*t15028*t17475*t20120*t23597 + t16972*t17484*t20120*t23597 + 0.15121*t24522 - 0.28121*t17524*t24546 - 0.50321*t17797*t24548 - 0.50321*t17814*t24554 - 0.19821*(t17792*t24548 - 1.*t17814*t24554);
  p_output1[33]=t16972*t23635 + t17475*t24613 - 0.28121*t17524*t24615 - 0.50321*t17510*t17797*t24615 + 0.50321*t17803*t17814*t24615 - 0.19821*(t17510*t17792*t24615 + t17803*t17814*t24615) + 0.15121*t24641;
  p_output1[34]=t19856*t23686 + t19985*t24613 - 0.28121*t17524*t24655 - 0.50321*t17510*t17797*t24655 + 0.50321*t17803*t17814*t24655 - 0.19821*(t17510*t17792*t24655 + t17803*t17814*t24655) + 0.15121*t24678;
  p_output1[35]=0.28121*t17510*t20120*t23597 - 0.28121*t17803*t24694 - 0.50321*t17814*t24696 - 0.50321*t17797*t24700 - 0.19821*(-1.*t17814*t24696 + t17792*t24700);
  p_output1[36]=-0.50321*t17792*t24700 - 0.50321*t17814*t24726 - 0.19821*(-1.*t17792*t24700 - 1.*t17814*t24726);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 37, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_initial_swing_velocity_RlFoot_ParallelStance.hh"

namespace ParallelStance
{

void J_initial_swing_velocity_RlFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
