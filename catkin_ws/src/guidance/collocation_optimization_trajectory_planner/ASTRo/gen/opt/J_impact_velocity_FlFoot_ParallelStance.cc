/*
 * Automatically Generated from Mathematica.
 * Sun 12 Jun 2022 14:37:58 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t13507;
  double t15009;
  double t15474;
  double t15786;
  double t15796;
  double t15800;
  double t16057;
  double t11370;
  double t16160;
  double t16166;
  double t16169;
  double t16176;
  double t16215;
  double t16323;
  double t16325;
  double t16127;
  double t16161;
  double t16164;
  double t16214;
  double t16217;
  double t16218;
  double t16260;
  double t16262;
  double t16267;
  double t16315;
  double t16318;
  double t16329;
  double t16337;
  double t16339;
  double t16354;
  double t16357;
  double t16451;
  double t16464;
  double t16473;
  double t16444;
  double t16450;
  double t16486;
  double t16487;
  double t16497;
  double t16498;
  double t16511;
  double t16663;
  double t16665;
  double t16695;
  double t15819;
  double t15823;
  double t16142;
  double t16797;
  double t16814;
  double t16818;
  double t16824;
  double t16827;
  double t16828;
  double t16832;
  double t16840;
  double t16846;
  double t16879;
  double t16880;
  double t16882;
  double t15825;
  double t16153;
  double t16370;
  double t16769;
  double t16773;
  double t16777;
  double t16785;
  double t16791;
  double t16792;
  double t16820;
  double t16398;
  double t16401;
  double t16404;
  double t16409;
  double t17022;
  double t17023;
  double t17025;
  double t17026;
  double t17027;
  double t17036;
  double t16883;
  double t16884;
  double t16915;
  double t16917;
  double t16925;
  double t16934;
  double t16939;
  double t16946;
  double t16948;
  double t16950;
  double t16955;
  double t16957;
  double t16962;
  double t16985;
  double t17003;
  double t17004;
  double t17008;
  double t16403;
  double t16416;
  double t16418;
  double t17054;
  double t17050;
  double t17056;
  double t16580;
  double t16658;
  double t16696;
  double t16697;
  double t16698;
  double t16701;
  double t16716;
  double t16740;
  double t16743;
  double t17135;
  double t17142;
  double t17143;
  double t17146;
  double t17147;
  double t17148;
  double t17151;
  double t17165;
  double t16823;
  double t17184;
  double t17187;
  double t16492;
  double t16512;
  double t16513;
  double t16517;
  double t16536;
  double t16544;
  double t16552;
  double t17150;
  double t17171;
  double t17173;
  double t17174;
  double t17175;
  double t17177;
  double t17179;
  double t17288;
  double t17297;
  double t17305;
  double t17389;
  double t17390;
  double t17392;
  double t17394;
  double t17395;
  double t17396;
  double t17397;
  double t17443;
  double t17543;
  double t17539;
  double t17540;
  double t17545;
  double t17546;
  double t17549;
  double t17553;
  double t17557;
  double t17559;
  double t17560;
  double t17561;
  double t17835;
  double t17838;
  double t17866;
  double t17874;
  double t17875;
  double t17568;
  double t18050;
  double t18053;
  double t18054;
  double t18044;
  double t18056;
  double t18074;
  double t18077;
  double t18165;
  double t18167;
  double t18278;
  double t18329;
  double t18339;
  double t18396;
  double t18406;
  double t18408;
  double t18424;
  double t18433;
  double t18434;
  double t18436;
  double t18437;
  double t18438;
  double t18477;
  double t18498;
  double t18499;
  double t18503;
  double t18505;
  double t18516;
  double t18566;
  double t18580;
  double t18581;
  double t19325;
  double t19368;
  double t19372;
  double t19436;
  double t19437;
  double t19438;
  double t19680;
  double t19682;
  double t19683;
  double t19690;
  double t19691;
  double t19694;
  double t19698;
  double t19699;
  double t19779;
  double t19782;
  double t19805;
  double t19832;
  double t20076;
  double t20085;
  double t20196;
  double t20201;
  double t20202;
  double t20195;
  double t20205;
  double t20206;
  double t20224;
  double t20225;
  double t20226;
  double t20396;
  double t20474;
  double t20475;
  double t18379;
  double t18388;
  double t18389;
  double t18390;
  double t18392;
  double t18395;
  double t18414;
  double t18415;
  double t18435;
  double t18440;
  double t18444;
  double t18446;
  double t18454;
  double t18462;
  double t18463;
  double t19322;
  double t20700;
  double t20705;
  double t20712;
  double t20761;
  double t20763;
  double t20776;
  double t20778;
  double t20819;
  double t20824;
  double t20833;
  double t20834;
  double t20837;
  double t20838;
  double t19672;
  double t19675;
  double t20107;
  double t17871;
  double t17873;
  double t17881;
  double t17882;
  double t17916;
  double t17951;
  double t17957;
  double t18000;
  double t18019;
  double t18020;
  double t18026;
  double t18031;
  double t18035;
  double t18556;
  double t21538;
  double t21727;
  double t18501;
  double t18549;
  double t18551;
  double t18562;
  double t18563;
  double t18693;
  double t23190;
  double t23313;
  double t23440;
  double t23548;
  double t23628;
  double t20155;
  double t20163;
  double t20177;
  double t17547;
  double t17558;
  double t17563;
  double t17566;
  double t17567;
  double t17575;
  double t17583;
  double t17646;
  double t17673;
  double t17674;
  double t17682;
  double t17684;
  double t17686;
  double t21341;
  double t21361;
  double t21458;
  double t21478;
  double t21495;
  double t21808;
  double t21828;
  double t21859;
  double t22019;
  double t22268;
  double t22553;
  double t22631;
  double t22674;
  double t17065;
  double t25660;
  double t25689;
  double t20964;
  double t20965;
  double t20966;
  double t21088;
  double t21107;
  double t21197;
  double t21249;
  double t21269;
  double t24246;
  double t24275;
  double t24297;
  double t24320;
  double t24354;
  double t24384;
  double t24402;
  double t24420;
  double t18276;
  double t18277;
  double t18340;
  double t18346;
  double t18348;
  double t18351;
  double t18363;
  double t18366;
  double t18367;
  double t20383;
  double t20389;
  double t20498;
  double t20504;
  double t20508;
  double t20545;
  double t20587;
  double t20590;
  double t20611;
  double t26155;
  double t26168;
  double t26234;
  double t26584;
  double t26587;
  double t26684;
  double t26693;
  double t26828;
  double t26995;
  double t27025;
  double t20944;
  double t20946;
  double t20947;
  double t20949;
  double t20950;
  double t20953;
  double t20954;
  double t23657;
  double t23701;
  double t23794;
  double t23954;
  double t24073;
  double t24107;
  double t24142;
  double t18076;
  double t18211;
  double t18250;
  double t18251;
  double t18256;
  double t18270;
  double t18272;
  double t20208;
  double t20327;
  double t20341;
  double t20346;
  double t20350;
  double t20354;
  double t20358;
  double t26686;
  double t26840;
  double t26845;
  double t26892;
  double t26909;
  double t26935;
  double t26945;
  double t29202;
  double t29207;
  double t29218;
  double t30223;
  double t30225;
  double t30226;
  double t30227;
  double t30228;
  double t30229;
  double t30230;
  double t30231;
  double t30232;
  double t30240;
  double t30241;
  double t30242;
  double t30244;
  double t30245;
  double t30246;
  double t30247;
  double t30248;
  double t30252;
  double t30254;
  double t30255;
  double t30256;
  double t30257;
  double t30323;
  double t30351;
  double t30370;
  double t30388;
  double t30395;
  double t30401;
  double t30407;
  double t30258;
  double t30259;
  double t30260;
  double t30261;
  double t30262;
  double t30263;
  double t30264;
  double t30287;
  double t30316;
  double t30042;
  double t30072;
  double t30077;
  double t30082;
  double t30124;
  double t30159;
  double t30167;
  double t30177;
  double t30196;
  double t30209;
  double t30219;
  double t30220;
  double t29857;
  double t29867;
  double t29877;
  double t29887;
  double t29900;
  double t29910;
  double t29938;
  double t29946;
  double t29953;
  double t29983;
  double t30000;
  double t30032;
  double t30448;
  double t30449;
  double t30456;
  double t30459;
  double t30460;
  double t30461;
  double t30462;
  double t30463;
  double t30466;
  double t30468;
  double t30469;
  double t30491;
  double t30492;
  double t30493;
  double t30490;
  double t30494;
  double t30495;
  double t30498;
  double t30506;
  double t30508;
  double t30603;
  double t30606;
  double t30721;
  double t30722;
  double t30727;
  double t30732;
  double t30734;
  double t30737;
  double t30738;
  double t30754;
  double t30756;
  double t30757;
  double t30758;
  double t30759;
  double t30760;
  double t30443;
  double t30446;
  double t30470;
  double t30848;
  double t30849;
  double t30875;
  double t30892;
  double t30480;
  double t30483;
  double t30485;
  double t30833;
  double t30837;
  double t30838;
  double t30842;
  double t30846;
  double t30850;
  double t30851;
  double t30852;
  double t30856;
  double t30858;
  double t30860;
  double t30866;
  double t30868;
  double t30942;
  double t30945;
  double t30769;
  double t30770;
  double t30771;
  double t30772;
  double t30773;
  double t30774;
  double t30775;
  double t30776;
  double t30915;
  double t30917;
  double t30921;
  double t30922;
  double t30923;
  double t30924;
  double t30925;
  double t30930;
  double t30593;
  double t30601;
  double t30625;
  double t30641;
  double t30642;
  double t30653;
  double t30659;
  double t30662;
  double t30678;
  double t31033;
  double t31034;
  double t31035;
  double t31036;
  double t31038;
  double t31040;
  double t31041;
  double t31071;
  double t31078;
  double t30761;
  double t30762;
  double t30763;
  double t30764;
  double t30765;
  double t30766;
  double t30767;
  double t30895;
  double t30901;
  double t30905;
  double t30906;
  double t30907;
  double t30910;
  double t30911;
  double t30496;
  double t30509;
  double t30510;
  double t30511;
  double t30512;
  double t30524;
  double t30545;
  double t31039;
  double t31042;
  double t31046;
  double t31048;
  double t31054;
  double t31055;
  double t31057;
  double t31104;
  double t31105;
  t13507 = Sin(var1[4]);
  t15009 = Cos(var1[6]);
  t15474 = -1.*t15009;
  t15786 = 1. + t15474;
  t15796 = 0.15121*t15786;
  t15800 = Sin(var1[6]);
  t16057 = Sin(var1[5]);
  t11370 = Cos(var1[5]);
  t16160 = Cos(var1[7]);
  t16166 = t15009*t13507*t16057;
  t16169 = t11370*t13507*t15800;
  t16176 = t16166 + t16169;
  t16215 = Cos(var1[8]);
  t16323 = Sin(var1[7]);
  t16325 = Sin(var1[8]);
  t16127 = 0.15121*t15800;
  t16161 = -1.*t16160;
  t16164 = 1. + t16161;
  t16214 = 0.28121*t16164*t16176;
  t16217 = -1.*t16215;
  t16218 = 1. + t16217;
  t16260 = 0.50321*t16160*t16218*t16176;
  t16262 = t11370*t15009*t13507;
  t16267 = -1.*t13507*t16057*t15800;
  t16315 = t16262 + t16267;
  t16318 = 0.15121*t16315;
  t16329 = -0.50321*t16176*t16323*t16325;
  t16337 = t16160*t16215*t16176;
  t16339 = t16176*t16323*t16325;
  t16354 = t16337 + t16339;
  t16357 = 0.19821*t16354;
  t16451 = -1.*t11370*t15009*t13507;
  t16464 = t13507*t16057*t15800;
  t16473 = t16451 + t16464;
  t16444 = Cos(var1[4]);
  t16450 = t16444*t16160;
  t16486 = t16473*t16323;
  t16487 = t16450 + t16486;
  t16497 = t16160*t16473;
  t16498 = -1.*t16444*t16323;
  t16511 = t16497 + t16498;
  t16663 = -1.*t16444*t16160;
  t16665 = -1.*t16473*t16323;
  t16695 = t16663 + t16665;
  t15819 = -0.15121*t15800;
  t15823 = t15796 + t15819;
  t16142 = t15796 + t16127;
  t16797 = -1.*t16444*t11370*t15009;
  t16814 = t16444*t16057*t15800;
  t16818 = t16797 + t16814;
  t16824 = t16160*t16818;
  t16827 = t13507*t16323;
  t16828 = t16824 + t16827;
  t16832 = -1.*t16160*t13507;
  t16840 = t16818*t16323;
  t16846 = t16832 + t16840;
  t16879 = -1.*t16444*t15009*t16057;
  t16880 = -1.*t16444*t11370*t15800;
  t16882 = t16879 + t16880;
  t15825 = t11370*t13507*t15823;
  t16153 = t13507*t16057*t16142;
  t16370 = t15825 + t16153 + t16214 + t16260 + t16318 + t16329 + t16357;
  t16769 = t16444*t16057*t15823;
  t16773 = -1.*t16444*t11370*t16142;
  t16777 = t16444*t15009*t16057;
  t16785 = t16444*t11370*t15800;
  t16791 = t16777 + t16785;
  t16792 = 0.15121*t16791;
  t16820 = 0.28121*t16164*t16818;
  t16398 = -0.15121*t15009;
  t16401 = t16398 + t16127;
  t16404 = 0.15121*t15009;
  t16409 = t16404 + t16127;
  t17022 = 0.50321*t16160*t16218*t16818;
  t17023 = -0.50321*t16818*t16323*t16325;
  t17025 = t16160*t16215*t16818;
  t17026 = t16818*t16323*t16325;
  t17027 = t17025 + t17026;
  t17036 = 0.19821*t17027;
  t16883 = -0.50321*t16215*t16882*t16323;
  t16884 = 0.50321*t16160*t16882*t16325;
  t16915 = t16215*t16882*t16323;
  t16917 = -1.*t16160*t16882*t16325;
  t16925 = t16915 + t16917;
  t16934 = 0.19821*t16925;
  t16939 = t16883 + t16884 + t16934;
  t16946 = var2[8]*t16939;
  t16948 = 0.28121*t16882*t16323;
  t16950 = -0.50321*t16218*t16882*t16323;
  t16955 = -0.50321*t16160*t16882*t16325;
  t16957 = -1.*t16215*t16882*t16323;
  t16962 = t16160*t16882*t16325;
  t16985 = t16957 + t16962;
  t17003 = 0.19821*t16985;
  t17004 = t16948 + t16950 + t16955 + t17003;
  t17008 = var2[7]*t17004;
  t16403 = t13507*t16057*t16401;
  t16416 = -1.*t11370*t13507*t16409;
  t16418 = t16403 + t16416 + t16214 + t16260 + t16318 + t16329 + t16357;
  t17054 = -1.*t16444*t16057*t16409;
  t17050 = -1.*t16444*t11370*t16401;
  t17056 = t17050 + t17054 + t16792 + t16820 + t17022 + t17023 + t17036;
  t16580 = 0.28121*t16444*t16160;
  t16658 = 0.28121*t16473*t16323;
  t16696 = 0.50321*t16218*t16695;
  t16697 = -0.50321*t16511*t16325;
  t16698 = t16215*t16695;
  t16701 = t16511*t16325;
  t16716 = t16698 + t16701;
  t16740 = 0.19821*t16716;
  t16743 = t16580 + t16658 + t16696 + t16697 + t16740;
  t17135 = t16444*t11370*t15009;
  t17142 = -1.*t16444*t16057*t15800;
  t17143 = t17135 + t17142;
  t17146 = t16160*t17143;
  t17147 = -1.*t13507*t16323;
  t17148 = t17146 + t17147;
  t17151 = -1.*t17143*t16323;
  t17165 = t16832 + t17151;
  t16823 = -0.28121*t13507*t16323;
  t17184 = -1.*t16160*t17143;
  t17187 = t17184 + t16827;
  t16492 = -0.50321*t16215*t16487;
  t16512 = 0.50321*t16511*t16325;
  t16513 = t16215*t16487;
  t16517 = -1.*t16511*t16325;
  t16536 = t16513 + t16517;
  t16544 = 0.19821*t16536;
  t16552 = t16492 + t16512 + t16544;
  t17150 = -0.50321*t16215*t17148;
  t17171 = 0.50321*t17165*t16325;
  t17173 = t16215*t17148;
  t17174 = -1.*t17165*t16325;
  t17175 = t17173 + t17174;
  t17177 = 0.19821*t17175;
  t17179 = t17150 + t17171 + t17177;
  t17288 = t16160*t13507;
  t17297 = t17143*t16323;
  t17305 = t17288 + t17297;
  t17389 = 0.28121*t16164*t16882;
  t17390 = 0.50321*t16160*t16218*t16882;
  t17392 = 0.15121*t16818;
  t17394 = -0.50321*t16882*t16323*t16325;
  t17395 = t16160*t16215*t16882;
  t17396 = t16882*t16323*t16325;
  t17397 = t17395 + t17396;
  t17443 = 0.19821*t17397;
  t17543 = Cos(var1[3]);
  t17539 = Sin(var1[3]);
  t17540 = -1.*t11370*t17539;
  t17545 = -1.*t17543*t13507*t16057;
  t17546 = t17540 + t17545;
  t17549 = t17543*t11370*t13507;
  t17553 = -1.*t17539*t16057;
  t17557 = t17549 + t17553;
  t17559 = t15009*t17546;
  t17560 = -1.*t17557*t15800;
  t17561 = t17559 + t17560;
  t17835 = -1.*t17543*t11370*t13507;
  t17838 = t17539*t16057;
  t17866 = t17835 + t17838;
  t17874 = t17866*t15800;
  t17875 = t17559 + t17874;
  t17568 = -1.*t17546*t15800;
  t18050 = t15009*t17557;
  t18053 = t17546*t15800;
  t18054 = t18050 + t18053;
  t18044 = -1.*t17543*t16444*t16160;
  t18056 = t18054*t16323;
  t18074 = t18044 + t18056;
  t18077 = t16160*t18054;
  t18165 = t17543*t16444*t16323;
  t18167 = t18077 + t18165;
  t18278 = t17543*t16444*t16160;
  t18329 = -1.*t18054*t16323;
  t18339 = t18278 + t18329;
  t18396 = t17543*t16444*t11370*t15009;
  t18406 = -1.*t17543*t16444*t16057*t15800;
  t18408 = t18396 + t18406;
  t18424 = t16160*t18408;
  t18433 = -1.*t17543*t13507*t16323;
  t18434 = t18424 + t18433;
  t18436 = t17543*t16160*t13507;
  t18437 = t18408*t16323;
  t18438 = t18436 + t18437;
  t18477 = -1.*t17543*t11370;
  t18498 = t17539*t13507*t16057;
  t18499 = t18477 + t18498;
  t18503 = -1.*t11370*t17539*t13507;
  t18505 = -1.*t17543*t16057;
  t18516 = t18503 + t18505;
  t18566 = t15009*t18516;
  t18580 = t18499*t15800;
  t18581 = t18566 + t18580;
  t19325 = t16160*t18581;
  t19368 = -1.*t16444*t17539*t16323;
  t19372 = t19325 + t19368;
  t19436 = t16444*t16160*t17539;
  t19437 = t18581*t16323;
  t19438 = t19436 + t19437;
  t19680 = -1.*t16444*t15009*t17539*t16057;
  t19682 = -1.*t16444*t11370*t17539*t15800;
  t19683 = t19680 + t19682;
  t19690 = 0.28121*t16164*t19683;
  t19691 = 0.50321*t16160*t16218*t19683;
  t19694 = -1.*t16444*t11370*t15009*t17539;
  t19698 = t16444*t17539*t16057*t15800;
  t19699 = t19694 + t19698;
  t19779 = 0.15121*t19699;
  t19782 = -0.50321*t19683*t16323*t16325;
  t19805 = t16160*t16215*t19683;
  t19832 = t19683*t16323*t16325;
  t20076 = t19805 + t19832;
  t20085 = 0.19821*t20076;
  t20196 = t16444*t11370*t15009*t17539;
  t20201 = -1.*t16444*t17539*t16057*t15800;
  t20202 = t20196 + t20201;
  t20195 = t16160*t17539*t13507;
  t20205 = t20202*t16323;
  t20206 = t20195 + t20205;
  t20224 = t16160*t20202;
  t20225 = -1.*t17539*t13507*t16323;
  t20226 = t20224 + t20225;
  t20396 = -1.*t16160*t17539*t13507;
  t20474 = -1.*t20202*t16323;
  t20475 = t20396 + t20474;
  t18379 = -1.*t17543*t16444*t16057*t15823;
  t18388 = t17543*t16444*t11370*t16142;
  t18389 = -1.*t17543*t16444*t15009*t16057;
  t18390 = -1.*t17543*t16444*t11370*t15800;
  t18392 = t18389 + t18390;
  t18395 = 0.15121*t18392;
  t18414 = 0.28121*t16164*t18408;
  t18415 = 0.28121*t17543*t13507*t16323;
  t18435 = 0.50321*t16218*t18434;
  t18440 = -0.50321*t18438*t16325;
  t18444 = t16215*t18434;
  t18446 = t18438*t16325;
  t18454 = t18444 + t18446;
  t18462 = 0.19821*t18454;
  t18463 = t18379 + t18388 + t18395 + t18414 + t18415 + t18435 + t18440 + t18462;
  t19322 = 0.28121*t16444*t17539*t16323;
  t20700 = -1.*t11370*t15009*t17539*t13507;
  t20705 = t17539*t13507*t16057*t15800;
  t20712 = t20700 + t20705;
  t20761 = t16160*t20712;
  t20763 = t20761 + t19368;
  t20776 = t20712*t16323;
  t20778 = t19436 + t20776;
  t20819 = t17543*t11370;
  t20824 = -1.*t17539*t13507*t16057;
  t20833 = t20819 + t20824;
  t20834 = t15009*t20833;
  t20837 = t18516*t15800;
  t20838 = t20834 + t20837;
  t19672 = -1.*t16444*t11370*t17539*t15823;
  t19675 = -1.*t16444*t17539*t16057*t16142;
  t20107 = t19672 + t19675 + t19690 + t19691 + t19779 + t19782 + t20085;
  t17871 = t17866*t15823;
  t17873 = t17546*t16142;
  t17881 = 0.28121*t16164*t17875;
  t17882 = 0.50321*t16160*t16218*t17875;
  t17916 = t15009*t17866;
  t17951 = t17916 + t17568;
  t17957 = 0.15121*t17951;
  t18000 = -0.50321*t17875*t16323*t16325;
  t18019 = t16160*t16215*t17875;
  t18020 = t17875*t16323*t16325;
  t18026 = t18019 + t18020;
  t18031 = 0.19821*t18026;
  t18035 = t17871 + t17873 + t17881 + t17882 + t17957 + t18000 + t18031;
  t18556 = -1.*t18516*t15800;
  t21538 = -1.*t20833*t15800;
  t21727 = t18566 + t21538;
  t18501 = t18499*t15823;
  t18549 = t18516*t16142;
  t18551 = t15009*t18499;
  t18562 = t18551 + t18556;
  t18563 = 0.15121*t18562;
  t18693 = 0.28121*t16164*t18581;
  t23190 = t11370*t17539*t13507;
  t23313 = t17543*t16057;
  t23440 = t23190 + t23313;
  t23548 = -1.*t23440*t15800;
  t23628 = t20834 + t23548;
  t20155 = -1.*t16444*t17539*t16057*t16401;
  t20163 = t16444*t11370*t17539*t16409;
  t20177 = t20155 + t20163 + t19690 + t19691 + t19779 + t19782 + t20085;
  t17547 = t17546*t16401;
  t17558 = t17557*t16409;
  t17563 = 0.28121*t16164*t17561;
  t17566 = 0.50321*t16160*t16218*t17561;
  t17567 = -1.*t15009*t17557;
  t17575 = t17567 + t17568;
  t17583 = 0.15121*t17575;
  t17646 = -0.50321*t17561*t16323*t16325;
  t17673 = t16160*t16215*t17561;
  t17674 = t17561*t16323*t16325;
  t17682 = t17673 + t17674;
  t17684 = 0.19821*t17682;
  t17686 = t17547 + t17558 + t17563 + t17566 + t17583 + t17646 + t17684;
  t21341 = t18516*t16401;
  t21361 = t20833*t16409;
  t21458 = -1.*t15009*t20833;
  t21478 = t21458 + t18556;
  t21495 = 0.15121*t21478;
  t21808 = 0.28121*t16164*t21727;
  t21828 = 0.50321*t16160*t16218*t21727;
  t21859 = -0.50321*t21727*t16323*t16325;
  t22019 = t16160*t16215*t21727;
  t22268 = t21727*t16323*t16325;
  t22553 = t22019 + t22268;
  t22631 = 0.19821*t22553;
  t22674 = t21341 + t21361 + t21495 + t21808 + t21828 + t21859 + t22631;
  t17065 = t16404 + t15819;
  t25660 = -1.*t15009*t23440;
  t25689 = t25660 + t21538;
  t20964 = 0.28121*t20838*t16323;
  t20965 = -0.50321*t16218*t20838*t16323;
  t20966 = -0.50321*t16160*t20838*t16325;
  t21088 = -1.*t16215*t20838*t16323;
  t21107 = t16160*t20838*t16325;
  t21197 = t21088 + t21107;
  t21249 = 0.19821*t21197;
  t21269 = t20964 + t20965 + t20966 + t21249;
  t24246 = 0.28121*t23628*t16323;
  t24275 = -0.50321*t16218*t23628*t16323;
  t24297 = -0.50321*t16160*t23628*t16325;
  t24320 = -1.*t16215*t23628*t16323;
  t24354 = t16160*t23628*t16325;
  t24384 = t24320 + t24354;
  t24402 = 0.19821*t24384;
  t24420 = t24246 + t24275 + t24297 + t24402;
  t18276 = -0.28121*t17543*t16444*t16160;
  t18277 = 0.28121*t18054*t16323;
  t18340 = 0.50321*t16218*t18339;
  t18346 = -0.50321*t18167*t16325;
  t18348 = t16215*t18339;
  t18351 = t18167*t16325;
  t18363 = t18348 + t18351;
  t18366 = 0.19821*t18363;
  t18367 = t18276 + t18277 + t18340 + t18346 + t18366;
  t20383 = 0.28121*t16160*t17539*t13507;
  t20389 = 0.28121*t20202*t16323;
  t20498 = 0.50321*t16218*t20475;
  t20504 = -0.50321*t20226*t16325;
  t20508 = t16215*t20475;
  t20545 = t20226*t16325;
  t20587 = t20508 + t20545;
  t20590 = 0.19821*t20587;
  t20611 = t20383 + t20389 + t20498 + t20504 + t20590;
  t26155 = t15009*t23440;
  t26168 = t20833*t15800;
  t26234 = t26155 + t26168;
  t26584 = t16160*t26234;
  t26587 = t16444*t17539*t16323;
  t26684 = t26584 + t26587;
  t26693 = -1.*t26234*t16323;
  t26828 = t19436 + t26693;
  t26995 = -1.*t16160*t26234;
  t27025 = t26995 + t19368;
  t20944 = -0.50321*t16215*t20838*t16323;
  t20946 = 0.50321*t16160*t20838*t16325;
  t20947 = t16215*t20838*t16323;
  t20949 = -1.*t16160*t20838*t16325;
  t20950 = t20947 + t20949;
  t20953 = 0.19821*t20950;
  t20954 = t20944 + t20946 + t20953;
  t23657 = -0.50321*t16215*t23628*t16323;
  t23701 = 0.50321*t16160*t23628*t16325;
  t23794 = t16215*t23628*t16323;
  t23954 = -1.*t16160*t23628*t16325;
  t24073 = t23794 + t23954;
  t24107 = 0.19821*t24073;
  t24142 = t23657 + t23701 + t24107;
  t18076 = -0.50321*t16215*t18074;
  t18211 = 0.50321*t18167*t16325;
  t18250 = t16215*t18074;
  t18251 = -1.*t18167*t16325;
  t18256 = t18250 + t18251;
  t18270 = 0.19821*t18256;
  t18272 = t18076 + t18211 + t18270;
  t20208 = -0.50321*t16215*t20206;
  t20327 = 0.50321*t20226*t16325;
  t20341 = t16215*t20206;
  t20346 = -1.*t20226*t16325;
  t20350 = t20341 + t20346;
  t20354 = 0.19821*t20350;
  t20358 = t20208 + t20327 + t20354;
  t26686 = -0.50321*t16215*t26684;
  t26840 = 0.50321*t26828*t16325;
  t26845 = t16215*t26684;
  t26892 = -1.*t26828*t16325;
  t26909 = t26845 + t26892;
  t26935 = 0.19821*t26909;
  t26945 = t26686 + t26840 + t26935;
  t29202 = -1.*t16444*t16160*t17539;
  t29207 = t26234*t16323;
  t29218 = t29202 + t29207;
  t30223 = t18516*t15823;
  t30225 = t20833*t16142;
  t30226 = 0.28121*t16164*t20838;
  t30227 = 0.50321*t16160*t16218*t20838;
  t30228 = 0.15121*t21727;
  t30229 = -0.50321*t20838*t16323*t16325;
  t30230 = t16160*t16215*t20838;
  t30231 = t20838*t16323*t16325;
  t30232 = t30230 + t30231;
  t30240 = 0.19821*t30232;
  t30241 = t30223 + t30225 + t30226 + t30227 + t30228 + t30229 + t30240;
  t30242 = t20833*t16401;
  t30244 = t23440*t16409;
  t30245 = 0.28121*t16164*t23628;
  t30246 = 0.50321*t16160*t16218*t23628;
  t30247 = 0.15121*t25689;
  t30248 = -0.50321*t23628*t16323*t16325;
  t30252 = t16160*t16215*t23628;
  t30254 = t23628*t16323*t16325;
  t30255 = t30252 + t30254;
  t30256 = 0.19821*t30255;
  t30257 = t30242 + t30244 + t30245 + t30246 + t30247 + t30248 + t30256;
  t30323 = -0.50321*t16215*t29218;
  t30351 = 0.50321*t26684*t16325;
  t30370 = t16215*t29218;
  t30388 = -1.*t26684*t16325;
  t30395 = t30370 + t30388;
  t30401 = 0.19821*t30395;
  t30407 = t30323 + t30351 + t30401;
  t30258 = -0.28121*t16444*t16160*t17539;
  t30259 = 0.28121*t26234*t16323;
  t30260 = 0.50321*t16218*t26828;
  t30261 = -0.50321*t26684*t16325;
  t30262 = t16215*t26828;
  t30263 = t26684*t16325;
  t30264 = t30262 + t30263;
  t30287 = 0.19821*t30264;
  t30316 = t30258 + t30259 + t30260 + t30261 + t30287;
  t30042 = -1.*t16444*t17539*t16057*t15823;
  t30072 = t16444*t11370*t17539*t16142;
  t30077 = 0.15121*t19683;
  t30082 = 0.28121*t16164*t20202;
  t30124 = 0.28121*t17539*t13507*t16323;
  t30159 = 0.50321*t16218*t20226;
  t30167 = -0.50321*t20206*t16325;
  t30177 = t16215*t20226;
  t30196 = t20206*t16325;
  t30209 = t30177 + t30196;
  t30219 = 0.19821*t30209;
  t30220 = t30042 + t30072 + t30077 + t30082 + t30124 + t30159 + t30167 + t30219;
  t29857 = t17546*t15823;
  t29867 = t17557*t16142;
  t29877 = 0.15121*t17561;
  t29887 = 0.28121*t16164*t18054;
  t29900 = -0.28121*t17543*t16444*t16323;
  t29910 = 0.50321*t16218*t18167;
  t29938 = -0.50321*t18074*t16325;
  t29946 = t16215*t18167;
  t29953 = t18074*t16325;
  t29983 = t29946 + t29953;
  t30000 = 0.19821*t29983;
  t30032 = t29857 + t29867 + t29877 + t29887 + t29900 + t29910 + t29938 + t30000;
  t30448 = t17543*t16444*t15009*t16057;
  t30449 = t17543*t16444*t11370*t15800;
  t30456 = t30448 + t30449;
  t30459 = 0.28121*t16164*t30456;
  t30460 = 0.50321*t16160*t16218*t30456;
  t30461 = 0.15121*t18408;
  t30462 = -0.50321*t30456*t16323*t16325;
  t30463 = t16160*t16215*t30456;
  t30466 = t30456*t16323*t16325;
  t30468 = t30463 + t30466;
  t30469 = 0.19821*t30468;
  t30491 = -1.*t17543*t16444*t11370*t15009;
  t30492 = t17543*t16444*t16057*t15800;
  t30493 = t30491 + t30492;
  t30490 = -1.*t17543*t16160*t13507;
  t30494 = t30493*t16323;
  t30495 = t30490 + t30494;
  t30498 = t16160*t30493;
  t30506 = t17543*t13507*t16323;
  t30508 = t30498 + t30506;
  t30603 = -1.*t30493*t16323;
  t30606 = t18436 + t30603;
  t30721 = t17543*t11370*t15009*t13507;
  t30722 = -1.*t17543*t13507*t16057*t15800;
  t30727 = t30721 + t30722;
  t30732 = t16160*t30727;
  t30734 = t30732 + t18165;
  t30737 = t30727*t16323;
  t30738 = t18044 + t30737;
  t30754 = t11370*t17539;
  t30756 = t17543*t13507*t16057;
  t30757 = t30754 + t30756;
  t30758 = t15009*t30757;
  t30759 = t17557*t15800;
  t30760 = t30758 + t30759;
  t30443 = t17543*t16444*t11370*t15823;
  t30446 = t17543*t16444*t16057*t16142;
  t30470 = t30443 + t30446 + t30459 + t30460 + t30461 + t30462 + t30469;
  t30848 = -1.*t30757*t15800;
  t30849 = t18050 + t30848;
  t30875 = -1.*t17866*t15800;
  t30892 = t30758 + t30875;
  t30480 = t17543*t16444*t16057*t16401;
  t30483 = -1.*t17543*t16444*t11370*t16409;
  t30485 = t30480 + t30483 + t30459 + t30460 + t30461 + t30462 + t30469;
  t30833 = t17557*t16401;
  t30837 = t30757*t16409;
  t30838 = -1.*t15009*t30757;
  t30842 = t30838 + t17560;
  t30846 = 0.15121*t30842;
  t30850 = 0.28121*t16164*t30849;
  t30851 = 0.50321*t16160*t16218*t30849;
  t30852 = -0.50321*t30849*t16323*t16325;
  t30856 = t16160*t16215*t30849;
  t30858 = t30849*t16323*t16325;
  t30860 = t30856 + t30858;
  t30866 = 0.19821*t30860;
  t30868 = t30833 + t30837 + t30846 + t30850 + t30851 + t30852 + t30866;
  t30942 = -1.*t15009*t17866;
  t30945 = t30942 + t30848;
  t30769 = 0.28121*t30760*t16323;
  t30770 = -0.50321*t16218*t30760*t16323;
  t30771 = -0.50321*t16160*t30760*t16325;
  t30772 = -1.*t16215*t30760*t16323;
  t30773 = t16160*t30760*t16325;
  t30774 = t30772 + t30773;
  t30775 = 0.19821*t30774;
  t30776 = t30769 + t30770 + t30771 + t30775;
  t30915 = 0.28121*t30892*t16323;
  t30917 = -0.50321*t16218*t30892*t16323;
  t30921 = -0.50321*t16160*t30892*t16325;
  t30922 = -1.*t16215*t30892*t16323;
  t30923 = t16160*t30892*t16325;
  t30924 = t30922 + t30923;
  t30925 = 0.19821*t30924;
  t30930 = t30915 + t30917 + t30921 + t30925;
  t30593 = -0.28121*t17543*t16160*t13507;
  t30601 = 0.28121*t30493*t16323;
  t30625 = 0.50321*t16218*t30606;
  t30641 = -0.50321*t30508*t16325;
  t30642 = t16215*t30606;
  t30653 = t30508*t16325;
  t30659 = t30642 + t30653;
  t30662 = 0.19821*t30659;
  t30678 = t30593 + t30601 + t30625 + t30641 + t30662;
  t31033 = t30757*t15800;
  t31034 = t17916 + t31033;
  t31035 = t16160*t31034;
  t31036 = -1.*t17543*t16444*t16323;
  t31038 = t31035 + t31036;
  t31040 = -1.*t31034*t16323;
  t31041 = t18044 + t31040;
  t31071 = -1.*t16160*t31034;
  t31078 = t31071 + t18165;
  t30761 = -0.50321*t16215*t30760*t16323;
  t30762 = 0.50321*t16160*t30760*t16325;
  t30763 = t16215*t30760*t16323;
  t30764 = -1.*t16160*t30760*t16325;
  t30765 = t30763 + t30764;
  t30766 = 0.19821*t30765;
  t30767 = t30761 + t30762 + t30766;
  t30895 = -0.50321*t16215*t30892*t16323;
  t30901 = 0.50321*t16160*t30892*t16325;
  t30905 = t16215*t30892*t16323;
  t30906 = -1.*t16160*t30892*t16325;
  t30907 = t30905 + t30906;
  t30910 = 0.19821*t30907;
  t30911 = t30895 + t30901 + t30910;
  t30496 = -0.50321*t16215*t30495;
  t30509 = 0.50321*t30508*t16325;
  t30510 = t16215*t30495;
  t30511 = -1.*t30508*t16325;
  t30512 = t30510 + t30511;
  t30524 = 0.19821*t30512;
  t30545 = t30496 + t30509 + t30524;
  t31039 = -0.50321*t16215*t31038;
  t31042 = 0.50321*t31041*t16325;
  t31046 = t16215*t31038;
  t31048 = -1.*t31041*t16325;
  t31054 = t31046 + t31048;
  t31055 = 0.19821*t31054;
  t31057 = t31039 + t31042 + t31055;
  t31104 = t31034*t16323;
  t31105 = t18278 + t31104;
  p_output1[0]=(t16769 + t16773 + t16792 + t16820 + t16823 + 0.50321*t16218*t16828 - 0.50321*t16325*t16846 + 0.19821*(t16215*t16828 + t16325*t16846))*var2[4] + t16370*var2[5] + t16418*var2[6] + t16743*var2[7] + t16552*var2[8];
  p_output1[1]=t16946 + t17008 + t16370*var2[4] + (t16769 + t16773 + t16792 + t16820 + t17022 + t17023 + t17036)*var2[5] + t17056*var2[6];
  p_output1[2]=t16946 + t17008 + t16418*var2[4] + t17056*var2[5] + (t16792 + t16820 + t17022 + t17023 + t17036 + t17054 + t11370*t16444*t17065)*var2[6];
  p_output1[3]=t16743*var2[4] + t17004*var2[5] + t17004*var2[6] + (t16823 + 0.28121*t16160*t17143 - 0.50321*t16325*t17165 + 0.50321*t16218*t17187 + 0.19821*(t16325*t17165 + t16215*t17187))*var2[7] + t17179*var2[8];
  p_output1[4]=t16552*var2[4] + t16939*var2[5] + t16939*var2[6] + t17179*var2[7] + (0.50321*t16215*t17148 + 0.50321*t16325*t17305 + 0.19821*(-1.*t16215*t17148 - 1.*t16325*t17305))*var2[8];
  p_output1[5]=1.;
  p_output1[6]=t13507*t15823*t16057 - 1.*t11370*t13507*t16142 + 0.15121*t16176 + 0.28121*t16323*t16444 + 0.28121*t16164*t16473 - 0.50321*t16325*t16487 + 0.50321*t16218*t16511 + 0.19821*(t16325*t16487 + t16215*t16511);
  p_output1[7]=-1.*t11370*t15823*t16444 - 1.*t16057*t16142*t16444 + t17389 + t17390 + t17392 + t17394 + t17443;
  p_output1[8]=-1.*t16057*t16401*t16444 + t11370*t16409*t16444 + t17389 + t17390 + t17392 + t17394 + t17443;
  p_output1[9]=0.28121*t13507*t16160 + 0.28121*t16323*t17143 - 0.50321*t16325*t17148 + 0.50321*t16218*t17165 + 0.19821*(t16325*t17148 + t16215*t17165);
  p_output1[10]=0.50321*t16325*t17148 - 0.50321*t16215*t17305 + 0.19821*(-1.*t16325*t17148 + t16215*t17305);
  p_output1[11]=(t18501 + t18549 + t18563 + t18693 + t19322 + 0.50321*t16218*t19372 - 0.50321*t16325*t19438 + 0.19821*(t16215*t19372 + t16325*t19438))*var2[3] + t18463*var2[4] + t18035*var2[5] + t17686*var2[6] + t18367*var2[7] + t18272*var2[8];
  p_output1[12]=t18463*var2[3] + (t13507*t15823*t16057*t17539 - 1.*t11370*t13507*t16142*t17539 + 0.15121*(t11370*t13507*t15800*t17539 + t13507*t15009*t16057*t17539) + t19322 + 0.28121*t16164*t20712 + 0.50321*t16218*t20763 - 0.50321*t16325*t20778 + 0.19821*(t16215*t20763 + t16325*t20778))*var2[4] + t20107*var2[5] + t20177*var2[6] + t20611*var2[7] + t20358*var2[8];
  p_output1[13]=t18035*var2[3] + t20107*var2[4] + (t18501 + t18549 + t18563 + 0.50321*t16160*t16218*t18581 - 0.50321*t16323*t16325*t18581 + 0.19821*(t16160*t16215*t18581 + t16323*t16325*t18581) + t18693)*var2[5] + t22674*var2[6] + t21269*var2[7] + t20954*var2[8];
  p_output1[14]=t17686*var2[3] + t20177*var2[4] + t22674*var2[5] + (t21361 + t17065*t23440 + 0.15121*(t21458 + t15800*t23440) + 0.28121*t16164*t25689 + 0.50321*t16160*t16218*t25689 - 0.50321*t16323*t16325*t25689 + 0.19821*(t16160*t16215*t25689 + t16323*t16325*t25689))*var2[6] + t24420*var2[7] + t24142*var2[8];
  p_output1[15]=t18367*var2[3] + t20611*var2[4] + t21269*var2[5] + t24420*var2[6] + (t19322 + 0.28121*t16160*t26234 - 0.50321*t16325*t26828 + 0.50321*t16218*t27025 + 0.19821*(t16325*t26828 + t16215*t27025))*var2[7] + t26945*var2[8];
  p_output1[16]=t18272*var2[3] + t20358*var2[4] + t20954*var2[5] + t24142*var2[6] + t26945*var2[7] + (0.50321*t16215*t26684 + 0.50321*t16325*t29218 + 0.19821*(-1.*t16215*t26684 - 1.*t16325*t29218))*var2[8];
  p_output1[17]=1.;
  p_output1[18]=t30032;
  p_output1[19]=t30220;
  p_output1[20]=t30241;
  p_output1[21]=t30257;
  p_output1[22]=t30316;
  p_output1[23]=t30407;
  p_output1[24]=t30032*var2[3] + t30220*var2[4] + t30241*var2[5] + t30257*var2[6] + t30316*var2[7] + t30407*var2[8];
  p_output1[25]=t30220*var2[3] + (-1.*t13507*t15823*t16057*t17543 + t11370*t13507*t16142*t17543 + 0.15121*(-1.*t11370*t13507*t15800*t17543 - 1.*t13507*t15009*t16057*t17543) + t29900 + 0.28121*t16164*t30727 + 0.50321*t16218*t30734 - 0.50321*t16325*t30738 + 0.19821*(t16215*t30734 + t16325*t30738))*var2[4] + t30470*var2[5] + t30485*var2[6] + t30678*var2[7] + t30545*var2[8];
  p_output1[26]=t30241*var2[3] + t30470*var2[4] + (0.50321*t16160*t16218*t18054 - 0.50321*t16323*t16325*t18054 + 0.19821*(t16160*t16215*t18054 + t16323*t16325*t18054) + t29857 + t29867 + t29877 + t29887)*var2[5] + t30868*var2[6] + t30776*var2[7] + t30767*var2[8];
  p_output1[27]=t30257*var2[3] + t30485*var2[4] + t30868*var2[5] + (t17065*t17866 + t30837 + 0.15121*(t17874 + t30838) + 0.28121*t16164*t30945 + 0.50321*t16160*t16218*t30945 - 0.50321*t16323*t16325*t30945 + 0.19821*(t16160*t16215*t30945 + t16323*t16325*t30945))*var2[6] + t30930*var2[7] + t30911*var2[8];
  p_output1[28]=t30316*var2[3] + t30678*var2[4] + t30776*var2[5] + t30930*var2[6] + (t29900 + 0.28121*t16160*t31034 - 0.50321*t16325*t31041 + 0.50321*t16218*t31078 + 0.19821*(t16325*t31041 + t16215*t31078))*var2[7] + t31057*var2[8];
  p_output1[29]=t30407*var2[3] + t30545*var2[4] + t30767*var2[5] + t30911*var2[6] + t31057*var2[7] + (0.50321*t16215*t31038 + 0.50321*t16325*t31105 + 0.19821*(-1.*t16215*t31038 - 1.*t16325*t31105))*var2[8];
  p_output1[30]=1.;
  p_output1[31]=-0.28121*t16323*t16444*t17539 + t15823*t20833 + t16142*t23440 + 0.15121*t23628 + 0.28121*t16164*t26234 + 0.50321*t16218*t26684 - 0.50321*t16325*t29218 + 0.19821*(t26845 + t16325*t29218);
  p_output1[32]=-0.28121*t13507*t16323*t17543 + t15823*t16057*t16444*t17543 - 1.*t11370*t16142*t16444*t17543 + 0.15121*t30456 + 0.28121*t16164*t30493 - 0.50321*t16325*t30495 + 0.50321*t16218*t30508 + 0.19821*(t16325*t30495 + t16215*t30508);
  p_output1[33]=t15823*t17557 + t16142*t30757 + 0.28121*t16164*t30760 + 0.50321*t16160*t16218*t30760 - 0.50321*t16323*t16325*t30760 + 0.19821*(t16160*t16215*t30760 + t16323*t16325*t30760) + 0.15121*t30849;
  p_output1[34]=t16409*t17866 + t16401*t30757 + 0.28121*t16164*t30892 + 0.50321*t16160*t16218*t30892 - 0.50321*t16323*t16325*t30892 + 0.19821*(t16160*t16215*t30892 + t16323*t16325*t30892) + 0.15121*t30945;
  p_output1[35]=0.28121*t16160*t16444*t17543 + 0.28121*t16323*t31034 - 0.50321*t16325*t31038 + 0.50321*t16218*t31041 + 0.19821*(t16325*t31038 + t16215*t31041);
  p_output1[36]=0.50321*t16325*t31038 - 0.50321*t16215*t31105 + 0.19821*(-1.*t16325*t31038 + t16215*t31105);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 37, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_impact_velocity_FlFoot_ParallelStance.hh"

namespace ParallelStance
{

void J_impact_velocity_FlFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
