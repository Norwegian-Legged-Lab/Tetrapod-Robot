/*
 * Automatically Generated from Mathematica.
 * Sat 28 May 2022 17:01:27 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t1592;
  double t7911;
  double t8527;
  double t10259;
  double t10260;
  double t10267;
  double t10377;
  double t426;
  double t10480;
  double t10536;
  double t10580;
  double t10591;
  double t10653;
  double t10766;
  double t10779;
  double t10474;
  double t10494;
  double t10516;
  double t10640;
  double t10660;
  double t10661;
  double t10668;
  double t10677;
  double t10684;
  double t10725;
  double t10727;
  double t10780;
  double t10793;
  double t10798;
  double t10810;
  double t10819;
  double t11012;
  double t11013;
  double t11017;
  double t10994;
  double t11008;
  double t11019;
  double t11023;
  double t11028;
  double t11033;
  double t11034;
  double t11298;
  double t11299;
  double t11300;
  double t10274;
  double t10275;
  double t10477;
  double t12667;
  double t12754;
  double t12757;
  double t12887;
  double t12924;
  double t12974;
  double t13126;
  double t13154;
  double t13187;
  double t14369;
  double t14429;
  double t14991;
  double t10291;
  double t10478;
  double t10827;
  double t11561;
  double t11759;
  double t11768;
  double t11779;
  double t11894;
  double t11909;
  double t12758;
  double t10841;
  double t10842;
  double t10851;
  double t10855;
  double t18050;
  double t18077;
  double t18093;
  double t18095;
  double t18106;
  double t18205;
  double t15148;
  double t15207;
  double t15280;
  double t15294;
  double t15301;
  double t15302;
  double t15313;
  double t15414;
  double t15422;
  double t16739;
  double t17145;
  double t17314;
  double t17846;
  double t17847;
  double t17860;
  double t17966;
  double t18014;
  double t10844;
  double t10856;
  double t10858;
  double t18353;
  double t18302;
  double t18370;
  double t11282;
  double t11290;
  double t11301;
  double t11302;
  double t11303;
  double t11305;
  double t11348;
  double t11425;
  double t11530;
  double t18443;
  double t18457;
  double t18459;
  double t18463;
  double t18801;
  double t18836;
  double t18839;
  double t18868;
  double t12816;
  double t19016;
  double t19134;
  double t11024;
  double t11035;
  double t11036;
  double t11065;
  double t11124;
  double t11209;
  double t11256;
  double t18838;
  double t18874;
  double t18877;
  double t18879;
  double t18882;
  double t18885;
  double t18915;
  double t22541;
  double t22563;
  double t22575;
  double t23952;
  double t23995;
  double t24010;
  double t24024;
  double t24065;
  double t24086;
  double t24087;
  double t24093;
  double t24663;
  double t24458;
  double t24459;
  double t24664;
  double t24673;
  double t24675;
  double t24710;
  double t24712;
  double t24718;
  double t24728;
  double t24753;
  double t24846;
  double t24852;
  double t24857;
  double t24905;
  double t24907;
  double t24772;
  double t24953;
  double t24964;
  double t24965;
  double t24952;
  double t24966;
  double t24971;
  double t24975;
  double t24976;
  double t24977;
  double t24991;
  double t24995;
  double t25003;
  double t25075;
  double t25076;
  double t25078;
  double t25088;
  double t25089;
  double t25090;
  double t25093;
  double t25094;
  double t25102;
  double t25141;
  double t25142;
  double t25145;
  double t25149;
  double t25151;
  double t25158;
  double t25178;
  double t25179;
  double t25185;
  double t25196;
  double t25201;
  double t25203;
  double t25206;
  double t25212;
  double t25214;
  double t25237;
  double t25240;
  double t25248;
  double t25251;
  double t25252;
  double t25253;
  double t25254;
  double t25257;
  double t25259;
  double t25268;
  double t25269;
  double t25273;
  double t25275;
  double t25277;
  double t25292;
  double t25293;
  double t25294;
  double t25291;
  double t25295;
  double t25296;
  double t25299;
  double t25301;
  double t25302;
  double t25336;
  double t25340;
  double t25341;
  double t25057;
  double t25063;
  double t25067;
  double t25068;
  double t25069;
  double t25074;
  double t25084;
  double t25087;
  double t25091;
  double t25112;
  double t25117;
  double t25121;
  double t25127;
  double t25131;
  double t25137;
  double t25194;
  double t25372;
  double t25374;
  double t25377;
  double t25379;
  double t25382;
  double t25385;
  double t25386;
  double t25401;
  double t25402;
  double t25410;
  double t25411;
  double t25413;
  double t25416;
  double t25229;
  double t25236;
  double t25280;
  double t24895;
  double t24904;
  double t24913;
  double t24915;
  double t24918;
  double t24920;
  double t24921;
  double t24922;
  double t24923;
  double t24927;
  double t24933;
  double t24948;
  double t24950;
  double t25165;
  double t25457;
  double t25460;
  double t25148;
  double t25161;
  double t25163;
  double t25171;
  double t25177;
  double t25193;
  double t25486;
  double t25487;
  double t25488;
  double t25489;
  double t25490;
  double t25283;
  double t25284;
  double t25285;
  double t24674;
  double t24717;
  double t24758;
  double t24770;
  double t24771;
  double t24798;
  double t24799;
  double t24806;
  double t24807;
  double t24808;
  double t24809;
  double t24815;
  double t24827;
  double t25450;
  double t25452;
  double t25453;
  double t25454;
  double t25456;
  double t25461;
  double t25462;
  double t25463;
  double t25464;
  double t25465;
  double t25466;
  double t25469;
  double t25470;
  double t18409;
  double t25529;
  double t25530;
  double t25429;
  double t25430;
  double t25432;
  double t25433;
  double t25437;
  double t25441;
  double t25442;
  double t25444;
  double t25505;
  double t25506;
  double t25507;
  double t25508;
  double t25510;
  double t25511;
  double t25513;
  double t25516;
  double t24989;
  double t24990;
  double t25011;
  double t25020;
  double t25030;
  double t25031;
  double t25040;
  double t25043;
  double t25054;
  double t25325;
  double t25329;
  double t25342;
  double t25343;
  double t25344;
  double t25345;
  double t25348;
  double t25351;
  double t25353;
  double t25552;
  double t25553;
  double t25555;
  double t25557;
  double t25558;
  double t25559;
  double t25562;
  double t25563;
  double t25577;
  double t25578;
  double t25417;
  double t25418;
  double t25419;
  double t25420;
  double t25421;
  double t25422;
  double t25425;
  double t25491;
  double t25492;
  double t25494;
  double t25495;
  double t25496;
  double t25497;
  double t25498;
  double t24974;
  double t24979;
  double t24982;
  double t24983;
  double t24984;
  double t24985;
  double t24986;
  double t25298;
  double t25303;
  double t25304;
  double t25309;
  double t25313;
  double t25314;
  double t25318;
  double t25560;
  double t25564;
  double t25566;
  double t25568;
  double t25569;
  double t25570;
  double t25572;
  double t25601;
  double t25606;
  double t25608;
  double t25667;
  double t25673;
  double t25677;
  double t25678;
  double t25680;
  double t25681;
  double t25682;
  double t25683;
  double t25684;
  double t25688;
  double t25689;
  double t25690;
  double t25698;
  double t25699;
  double t25702;
  double t25704;
  double t25710;
  double t25711;
  double t25712;
  double t25713;
  double t25714;
  double t25715;
  double t25732;
  double t25733;
  double t25734;
  double t25735;
  double t25737;
  double t25739;
  double t25743;
  double t25716;
  double t25717;
  double t25718;
  double t25719;
  double t25721;
  double t25725;
  double t25729;
  double t25730;
  double t25731;
  double t25640;
  double t25643;
  double t25644;
  double t25645;
  double t25646;
  double t25647;
  double t25651;
  double t25655;
  double t25656;
  double t25660;
  double t25661;
  double t25662;
  double t25624;
  double t25626;
  double t25627;
  double t25628;
  double t25629;
  double t25630;
  double t25634;
  double t25635;
  double t25636;
  double t25637;
  double t25638;
  double t25639;
  double t25761;
  double t25762;
  double t25764;
  double t25765;
  double t25768;
  double t25769;
  double t25770;
  double t25771;
  double t25776;
  double t25782;
  double t25783;
  double t25793;
  double t25796;
  double t25797;
  double t25791;
  double t25798;
  double t25800;
  double t25803;
  double t25804;
  double t25805;
  double t25815;
  double t25818;
  double t25836;
  double t25837;
  double t25838;
  double t25840;
  double t25853;
  double t25858;
  double t25859;
  double t25877;
  double t25885;
  double t25886;
  double t25887;
  double t25888;
  double t25891;
  double t25757;
  double t25759;
  double t25784;
  double t25941;
  double t25942;
  double t25999;
  double t26000;
  double t25786;
  double t25787;
  double t25788;
  double t25935;
  double t25936;
  double t25937;
  double t25938;
  double t25940;
  double t25943;
  double t25944;
  double t25948;
  double t25949;
  double t25951;
  double t25952;
  double t25953;
  double t25961;
  double t26035;
  double t26036;
  double t25906;
  double t25907;
  double t25910;
  double t25911;
  double t25912;
  double t25913;
  double t25914;
  double t25915;
  double t26018;
  double t26019;
  double t26020;
  double t26021;
  double t26023;
  double t26024;
  double t26025;
  double t26026;
  double t25813;
  double t25814;
  double t25819;
  double t25820;
  double t25821;
  double t25822;
  double t25823;
  double t25824;
  double t25825;
  double t26057;
  double t26059;
  double t26060;
  double t26061;
  double t26062;
  double t26064;
  double t26065;
  double t26076;
  double t26078;
  double t25892;
  double t25893;
  double t25895;
  double t25896;
  double t25900;
  double t25901;
  double t25902;
  double t26002;
  double t26003;
  double t26004;
  double t26009;
  double t26010;
  double t26012;
  double t26014;
  double t25802;
  double t25806;
  double t25807;
  double t25808;
  double t25809;
  double t25810;
  double t25811;
  double t26063;
  double t26066;
  double t26067;
  double t26068;
  double t26069;
  double t26070;
  double t26071;
  double t26098;
  double t26099;
  t1592 = Sin(var1[4]);
  t7911 = Cos(var1[6]);
  t8527 = -1.*t7911;
  t10259 = 1. + t8527;
  t10260 = 0.15121*t10259;
  t10267 = Sin(var1[6]);
  t10377 = Sin(var1[5]);
  t426 = Cos(var1[5]);
  t10480 = Cos(var1[7]);
  t10536 = t7911*t1592*t10377;
  t10580 = t426*t1592*t10267;
  t10591 = t10536 + t10580;
  t10653 = Cos(var1[8]);
  t10766 = Sin(var1[7]);
  t10779 = Sin(var1[8]);
  t10474 = 0.15121*t10267;
  t10494 = -1.*t10480;
  t10516 = 1. + t10494;
  t10640 = 0.28121*t10516*t10591;
  t10660 = -1.*t10653;
  t10661 = 1. + t10660;
  t10668 = 0.50321*t10480*t10661*t10591;
  t10677 = t426*t7911*t1592;
  t10684 = -1.*t1592*t10377*t10267;
  t10725 = t10677 + t10684;
  t10727 = 0.15121*t10725;
  t10780 = -0.50321*t10591*t10766*t10779;
  t10793 = t10480*t10653*t10591;
  t10798 = t10591*t10766*t10779;
  t10810 = t10793 + t10798;
  t10819 = 0.19821*t10810;
  t11012 = -1.*t426*t7911*t1592;
  t11013 = t1592*t10377*t10267;
  t11017 = t11012 + t11013;
  t10994 = Cos(var1[4]);
  t11008 = t10994*t10480;
  t11019 = t11017*t10766;
  t11023 = t11008 + t11019;
  t11028 = t10480*t11017;
  t11033 = -1.*t10994*t10766;
  t11034 = t11028 + t11033;
  t11298 = -1.*t10994*t10480;
  t11299 = -1.*t11017*t10766;
  t11300 = t11298 + t11299;
  t10274 = -0.15121*t10267;
  t10275 = t10260 + t10274;
  t10477 = t10260 + t10474;
  t12667 = -1.*t10994*t426*t7911;
  t12754 = t10994*t10377*t10267;
  t12757 = t12667 + t12754;
  t12887 = t10480*t12757;
  t12924 = t1592*t10766;
  t12974 = t12887 + t12924;
  t13126 = -1.*t10480*t1592;
  t13154 = t12757*t10766;
  t13187 = t13126 + t13154;
  t14369 = -1.*t10994*t7911*t10377;
  t14429 = -1.*t10994*t426*t10267;
  t14991 = t14369 + t14429;
  t10291 = t426*t1592*t10275;
  t10478 = t1592*t10377*t10477;
  t10827 = t10291 + t10478 + t10640 + t10668 + t10727 + t10780 + t10819;
  t11561 = t10994*t10377*t10275;
  t11759 = -1.*t10994*t426*t10477;
  t11768 = t10994*t7911*t10377;
  t11779 = t10994*t426*t10267;
  t11894 = t11768 + t11779;
  t11909 = 0.15121*t11894;
  t12758 = 0.28121*t10516*t12757;
  t10841 = -0.15121*t7911;
  t10842 = t10841 + t10474;
  t10851 = 0.15121*t7911;
  t10855 = t10851 + t10474;
  t18050 = 0.50321*t10480*t10661*t12757;
  t18077 = -0.50321*t12757*t10766*t10779;
  t18093 = t10480*t10653*t12757;
  t18095 = t12757*t10766*t10779;
  t18106 = t18093 + t18095;
  t18205 = 0.19821*t18106;
  t15148 = -0.50321*t10653*t14991*t10766;
  t15207 = 0.50321*t10480*t14991*t10779;
  t15280 = t10653*t14991*t10766;
  t15294 = -1.*t10480*t14991*t10779;
  t15301 = t15280 + t15294;
  t15302 = 0.19821*t15301;
  t15313 = t15148 + t15207 + t15302;
  t15414 = var2[8]*t15313;
  t15422 = 0.28121*t14991*t10766;
  t16739 = -0.50321*t10661*t14991*t10766;
  t17145 = -0.50321*t10480*t14991*t10779;
  t17314 = -1.*t10653*t14991*t10766;
  t17846 = t10480*t14991*t10779;
  t17847 = t17314 + t17846;
  t17860 = 0.19821*t17847;
  t17966 = t15422 + t16739 + t17145 + t17860;
  t18014 = var2[7]*t17966;
  t10844 = t1592*t10377*t10842;
  t10856 = -1.*t426*t1592*t10855;
  t10858 = t10844 + t10856 + t10640 + t10668 + t10727 + t10780 + t10819;
  t18353 = -1.*t10994*t10377*t10855;
  t18302 = -1.*t10994*t426*t10842;
  t18370 = t18302 + t18353 + t11909 + t12758 + t18050 + t18077 + t18205;
  t11282 = 0.28121*t10994*t10480;
  t11290 = 0.28121*t11017*t10766;
  t11301 = 0.50321*t10661*t11300;
  t11302 = -0.50321*t11034*t10779;
  t11303 = t10653*t11300;
  t11305 = t11034*t10779;
  t11348 = t11303 + t11305;
  t11425 = 0.19821*t11348;
  t11530 = t11282 + t11290 + t11301 + t11302 + t11425;
  t18443 = t10994*t426*t7911;
  t18457 = -1.*t10994*t10377*t10267;
  t18459 = t18443 + t18457;
  t18463 = t10480*t18459;
  t18801 = -1.*t1592*t10766;
  t18836 = t18463 + t18801;
  t18839 = -1.*t18459*t10766;
  t18868 = t13126 + t18839;
  t12816 = -0.28121*t1592*t10766;
  t19016 = -1.*t10480*t18459;
  t19134 = t19016 + t12924;
  t11024 = -0.50321*t10653*t11023;
  t11035 = 0.50321*t11034*t10779;
  t11036 = t10653*t11023;
  t11065 = -1.*t11034*t10779;
  t11124 = t11036 + t11065;
  t11209 = 0.19821*t11124;
  t11256 = t11024 + t11035 + t11209;
  t18838 = -0.50321*t10653*t18836;
  t18874 = 0.50321*t18868*t10779;
  t18877 = t10653*t18836;
  t18879 = -1.*t18868*t10779;
  t18882 = t18877 + t18879;
  t18885 = 0.19821*t18882;
  t18915 = t18838 + t18874 + t18885;
  t22541 = t10480*t1592;
  t22563 = t18459*t10766;
  t22575 = t22541 + t22563;
  t23952 = 0.28121*t10516*t14991;
  t23995 = 0.50321*t10480*t10661*t14991;
  t24010 = 0.15121*t12757;
  t24024 = -0.50321*t14991*t10766*t10779;
  t24065 = t10480*t10653*t14991;
  t24086 = t14991*t10766*t10779;
  t24087 = t24065 + t24086;
  t24093 = 0.19821*t24087;
  t24663 = Cos(var1[3]);
  t24458 = Sin(var1[3]);
  t24459 = -1.*t426*t24458;
  t24664 = -1.*t24663*t1592*t10377;
  t24673 = t24459 + t24664;
  t24675 = t24663*t426*t1592;
  t24710 = -1.*t24458*t10377;
  t24712 = t24675 + t24710;
  t24718 = t7911*t24673;
  t24728 = -1.*t24712*t10267;
  t24753 = t24718 + t24728;
  t24846 = -1.*t24663*t426*t1592;
  t24852 = t24458*t10377;
  t24857 = t24846 + t24852;
  t24905 = t24857*t10267;
  t24907 = t24718 + t24905;
  t24772 = -1.*t24673*t10267;
  t24953 = t7911*t24712;
  t24964 = t24673*t10267;
  t24965 = t24953 + t24964;
  t24952 = -1.*t24663*t10994*t10480;
  t24966 = t24965*t10766;
  t24971 = t24952 + t24966;
  t24975 = t10480*t24965;
  t24976 = t24663*t10994*t10766;
  t24977 = t24975 + t24976;
  t24991 = t24663*t10994*t10480;
  t24995 = -1.*t24965*t10766;
  t25003 = t24991 + t24995;
  t25075 = t24663*t10994*t426*t7911;
  t25076 = -1.*t24663*t10994*t10377*t10267;
  t25078 = t25075 + t25076;
  t25088 = t10480*t25078;
  t25089 = -1.*t24663*t1592*t10766;
  t25090 = t25088 + t25089;
  t25093 = t24663*t10480*t1592;
  t25094 = t25078*t10766;
  t25102 = t25093 + t25094;
  t25141 = -1.*t24663*t426;
  t25142 = t24458*t1592*t10377;
  t25145 = t25141 + t25142;
  t25149 = -1.*t426*t24458*t1592;
  t25151 = -1.*t24663*t10377;
  t25158 = t25149 + t25151;
  t25178 = t7911*t25158;
  t25179 = t25145*t10267;
  t25185 = t25178 + t25179;
  t25196 = t10480*t25185;
  t25201 = -1.*t10994*t24458*t10766;
  t25203 = t25196 + t25201;
  t25206 = t10994*t10480*t24458;
  t25212 = t25185*t10766;
  t25214 = t25206 + t25212;
  t25237 = -1.*t10994*t7911*t24458*t10377;
  t25240 = -1.*t10994*t426*t24458*t10267;
  t25248 = t25237 + t25240;
  t25251 = 0.28121*t10516*t25248;
  t25252 = 0.50321*t10480*t10661*t25248;
  t25253 = -1.*t10994*t426*t7911*t24458;
  t25254 = t10994*t24458*t10377*t10267;
  t25257 = t25253 + t25254;
  t25259 = 0.15121*t25257;
  t25268 = -0.50321*t25248*t10766*t10779;
  t25269 = t10480*t10653*t25248;
  t25273 = t25248*t10766*t10779;
  t25275 = t25269 + t25273;
  t25277 = 0.19821*t25275;
  t25292 = t10994*t426*t7911*t24458;
  t25293 = -1.*t10994*t24458*t10377*t10267;
  t25294 = t25292 + t25293;
  t25291 = t10480*t24458*t1592;
  t25295 = t25294*t10766;
  t25296 = t25291 + t25295;
  t25299 = t10480*t25294;
  t25301 = -1.*t24458*t1592*t10766;
  t25302 = t25299 + t25301;
  t25336 = -1.*t10480*t24458*t1592;
  t25340 = -1.*t25294*t10766;
  t25341 = t25336 + t25340;
  t25057 = -1.*t24663*t10994*t10377*t10275;
  t25063 = t24663*t10994*t426*t10477;
  t25067 = -1.*t24663*t10994*t7911*t10377;
  t25068 = -1.*t24663*t10994*t426*t10267;
  t25069 = t25067 + t25068;
  t25074 = 0.15121*t25069;
  t25084 = 0.28121*t10516*t25078;
  t25087 = 0.28121*t24663*t1592*t10766;
  t25091 = 0.50321*t10661*t25090;
  t25112 = -0.50321*t25102*t10779;
  t25117 = t10653*t25090;
  t25121 = t25102*t10779;
  t25127 = t25117 + t25121;
  t25131 = 0.19821*t25127;
  t25137 = t25057 + t25063 + t25074 + t25084 + t25087 + t25091 + t25112 + t25131;
  t25194 = 0.28121*t10994*t24458*t10766;
  t25372 = -1.*t426*t7911*t24458*t1592;
  t25374 = t24458*t1592*t10377*t10267;
  t25377 = t25372 + t25374;
  t25379 = t10480*t25377;
  t25382 = t25379 + t25201;
  t25385 = t25377*t10766;
  t25386 = t25206 + t25385;
  t25401 = t24663*t426;
  t25402 = -1.*t24458*t1592*t10377;
  t25410 = t25401 + t25402;
  t25411 = t7911*t25410;
  t25413 = t25158*t10267;
  t25416 = t25411 + t25413;
  t25229 = -1.*t10994*t426*t24458*t10275;
  t25236 = -1.*t10994*t24458*t10377*t10477;
  t25280 = t25229 + t25236 + t25251 + t25252 + t25259 + t25268 + t25277;
  t24895 = t24857*t10275;
  t24904 = t24673*t10477;
  t24913 = 0.28121*t10516*t24907;
  t24915 = 0.50321*t10480*t10661*t24907;
  t24918 = t7911*t24857;
  t24920 = t24918 + t24772;
  t24921 = 0.15121*t24920;
  t24922 = -0.50321*t24907*t10766*t10779;
  t24923 = t10480*t10653*t24907;
  t24927 = t24907*t10766*t10779;
  t24933 = t24923 + t24927;
  t24948 = 0.19821*t24933;
  t24950 = t24895 + t24904 + t24913 + t24915 + t24921 + t24922 + t24948;
  t25165 = -1.*t25158*t10267;
  t25457 = -1.*t25410*t10267;
  t25460 = t25178 + t25457;
  t25148 = t25145*t10275;
  t25161 = t25158*t10477;
  t25163 = t7911*t25145;
  t25171 = t25163 + t25165;
  t25177 = 0.15121*t25171;
  t25193 = 0.28121*t10516*t25185;
  t25486 = t426*t24458*t1592;
  t25487 = t24663*t10377;
  t25488 = t25486 + t25487;
  t25489 = -1.*t25488*t10267;
  t25490 = t25411 + t25489;
  t25283 = -1.*t10994*t24458*t10377*t10842;
  t25284 = t10994*t426*t24458*t10855;
  t25285 = t25283 + t25284 + t25251 + t25252 + t25259 + t25268 + t25277;
  t24674 = t24673*t10842;
  t24717 = t24712*t10855;
  t24758 = 0.28121*t10516*t24753;
  t24770 = 0.50321*t10480*t10661*t24753;
  t24771 = -1.*t7911*t24712;
  t24798 = t24771 + t24772;
  t24799 = 0.15121*t24798;
  t24806 = -0.50321*t24753*t10766*t10779;
  t24807 = t10480*t10653*t24753;
  t24808 = t24753*t10766*t10779;
  t24809 = t24807 + t24808;
  t24815 = 0.19821*t24809;
  t24827 = t24674 + t24717 + t24758 + t24770 + t24799 + t24806 + t24815;
  t25450 = t25158*t10842;
  t25452 = t25410*t10855;
  t25453 = -1.*t7911*t25410;
  t25454 = t25453 + t25165;
  t25456 = 0.15121*t25454;
  t25461 = 0.28121*t10516*t25460;
  t25462 = 0.50321*t10480*t10661*t25460;
  t25463 = -0.50321*t25460*t10766*t10779;
  t25464 = t10480*t10653*t25460;
  t25465 = t25460*t10766*t10779;
  t25466 = t25464 + t25465;
  t25469 = 0.19821*t25466;
  t25470 = t25450 + t25452 + t25456 + t25461 + t25462 + t25463 + t25469;
  t18409 = t10851 + t10274;
  t25529 = -1.*t7911*t25488;
  t25530 = t25529 + t25457;
  t25429 = 0.28121*t25416*t10766;
  t25430 = -0.50321*t10661*t25416*t10766;
  t25432 = -0.50321*t10480*t25416*t10779;
  t25433 = -1.*t10653*t25416*t10766;
  t25437 = t10480*t25416*t10779;
  t25441 = t25433 + t25437;
  t25442 = 0.19821*t25441;
  t25444 = t25429 + t25430 + t25432 + t25442;
  t25505 = 0.28121*t25490*t10766;
  t25506 = -0.50321*t10661*t25490*t10766;
  t25507 = -0.50321*t10480*t25490*t10779;
  t25508 = -1.*t10653*t25490*t10766;
  t25510 = t10480*t25490*t10779;
  t25511 = t25508 + t25510;
  t25513 = 0.19821*t25511;
  t25516 = t25505 + t25506 + t25507 + t25513;
  t24989 = -0.28121*t24663*t10994*t10480;
  t24990 = 0.28121*t24965*t10766;
  t25011 = 0.50321*t10661*t25003;
  t25020 = -0.50321*t24977*t10779;
  t25030 = t10653*t25003;
  t25031 = t24977*t10779;
  t25040 = t25030 + t25031;
  t25043 = 0.19821*t25040;
  t25054 = t24989 + t24990 + t25011 + t25020 + t25043;
  t25325 = 0.28121*t10480*t24458*t1592;
  t25329 = 0.28121*t25294*t10766;
  t25342 = 0.50321*t10661*t25341;
  t25343 = -0.50321*t25302*t10779;
  t25344 = t10653*t25341;
  t25345 = t25302*t10779;
  t25348 = t25344 + t25345;
  t25351 = 0.19821*t25348;
  t25353 = t25325 + t25329 + t25342 + t25343 + t25351;
  t25552 = t7911*t25488;
  t25553 = t25410*t10267;
  t25555 = t25552 + t25553;
  t25557 = t10480*t25555;
  t25558 = t10994*t24458*t10766;
  t25559 = t25557 + t25558;
  t25562 = -1.*t25555*t10766;
  t25563 = t25206 + t25562;
  t25577 = -1.*t10480*t25555;
  t25578 = t25577 + t25201;
  t25417 = -0.50321*t10653*t25416*t10766;
  t25418 = 0.50321*t10480*t25416*t10779;
  t25419 = t10653*t25416*t10766;
  t25420 = -1.*t10480*t25416*t10779;
  t25421 = t25419 + t25420;
  t25422 = 0.19821*t25421;
  t25425 = t25417 + t25418 + t25422;
  t25491 = -0.50321*t10653*t25490*t10766;
  t25492 = 0.50321*t10480*t25490*t10779;
  t25494 = t10653*t25490*t10766;
  t25495 = -1.*t10480*t25490*t10779;
  t25496 = t25494 + t25495;
  t25497 = 0.19821*t25496;
  t25498 = t25491 + t25492 + t25497;
  t24974 = -0.50321*t10653*t24971;
  t24979 = 0.50321*t24977*t10779;
  t24982 = t10653*t24971;
  t24983 = -1.*t24977*t10779;
  t24984 = t24982 + t24983;
  t24985 = 0.19821*t24984;
  t24986 = t24974 + t24979 + t24985;
  t25298 = -0.50321*t10653*t25296;
  t25303 = 0.50321*t25302*t10779;
  t25304 = t10653*t25296;
  t25309 = -1.*t25302*t10779;
  t25313 = t25304 + t25309;
  t25314 = 0.19821*t25313;
  t25318 = t25298 + t25303 + t25314;
  t25560 = -0.50321*t10653*t25559;
  t25564 = 0.50321*t25563*t10779;
  t25566 = t10653*t25559;
  t25568 = -1.*t25563*t10779;
  t25569 = t25566 + t25568;
  t25570 = 0.19821*t25569;
  t25572 = t25560 + t25564 + t25570;
  t25601 = -1.*t10994*t10480*t24458;
  t25606 = t25555*t10766;
  t25608 = t25601 + t25606;
  t25667 = t25158*t10275;
  t25673 = t25410*t10477;
  t25677 = 0.28121*t10516*t25416;
  t25678 = 0.50321*t10480*t10661*t25416;
  t25680 = 0.15121*t25460;
  t25681 = -0.50321*t25416*t10766*t10779;
  t25682 = t10480*t10653*t25416;
  t25683 = t25416*t10766*t10779;
  t25684 = t25682 + t25683;
  t25688 = 0.19821*t25684;
  t25689 = t25667 + t25673 + t25677 + t25678 + t25680 + t25681 + t25688;
  t25690 = t25410*t10842;
  t25698 = t25488*t10855;
  t25699 = 0.28121*t10516*t25490;
  t25702 = 0.50321*t10480*t10661*t25490;
  t25704 = 0.15121*t25530;
  t25710 = -0.50321*t25490*t10766*t10779;
  t25711 = t10480*t10653*t25490;
  t25712 = t25490*t10766*t10779;
  t25713 = t25711 + t25712;
  t25714 = 0.19821*t25713;
  t25715 = t25690 + t25698 + t25699 + t25702 + t25704 + t25710 + t25714;
  t25732 = -0.50321*t10653*t25608;
  t25733 = 0.50321*t25559*t10779;
  t25734 = t10653*t25608;
  t25735 = -1.*t25559*t10779;
  t25737 = t25734 + t25735;
  t25739 = 0.19821*t25737;
  t25743 = t25732 + t25733 + t25739;
  t25716 = -0.28121*t10994*t10480*t24458;
  t25717 = 0.28121*t25555*t10766;
  t25718 = 0.50321*t10661*t25563;
  t25719 = -0.50321*t25559*t10779;
  t25721 = t10653*t25563;
  t25725 = t25559*t10779;
  t25729 = t25721 + t25725;
  t25730 = 0.19821*t25729;
  t25731 = t25716 + t25717 + t25718 + t25719 + t25730;
  t25640 = -1.*t10994*t24458*t10377*t10275;
  t25643 = t10994*t426*t24458*t10477;
  t25644 = 0.15121*t25248;
  t25645 = 0.28121*t10516*t25294;
  t25646 = 0.28121*t24458*t1592*t10766;
  t25647 = 0.50321*t10661*t25302;
  t25651 = -0.50321*t25296*t10779;
  t25655 = t10653*t25302;
  t25656 = t25296*t10779;
  t25660 = t25655 + t25656;
  t25661 = 0.19821*t25660;
  t25662 = t25640 + t25643 + t25644 + t25645 + t25646 + t25647 + t25651 + t25661;
  t25624 = t24673*t10275;
  t25626 = t24712*t10477;
  t25627 = 0.15121*t24753;
  t25628 = 0.28121*t10516*t24965;
  t25629 = -0.28121*t24663*t10994*t10766;
  t25630 = 0.50321*t10661*t24977;
  t25634 = -0.50321*t24971*t10779;
  t25635 = t10653*t24977;
  t25636 = t24971*t10779;
  t25637 = t25635 + t25636;
  t25638 = 0.19821*t25637;
  t25639 = t25624 + t25626 + t25627 + t25628 + t25629 + t25630 + t25634 + t25638;
  t25761 = t24663*t10994*t7911*t10377;
  t25762 = t24663*t10994*t426*t10267;
  t25764 = t25761 + t25762;
  t25765 = 0.28121*t10516*t25764;
  t25768 = 0.50321*t10480*t10661*t25764;
  t25769 = 0.15121*t25078;
  t25770 = -0.50321*t25764*t10766*t10779;
  t25771 = t10480*t10653*t25764;
  t25776 = t25764*t10766*t10779;
  t25782 = t25771 + t25776;
  t25783 = 0.19821*t25782;
  t25793 = -1.*t24663*t10994*t426*t7911;
  t25796 = t24663*t10994*t10377*t10267;
  t25797 = t25793 + t25796;
  t25791 = -1.*t24663*t10480*t1592;
  t25798 = t25797*t10766;
  t25800 = t25791 + t25798;
  t25803 = t10480*t25797;
  t25804 = t24663*t1592*t10766;
  t25805 = t25803 + t25804;
  t25815 = -1.*t25797*t10766;
  t25818 = t25093 + t25815;
  t25836 = t24663*t426*t7911*t1592;
  t25837 = -1.*t24663*t1592*t10377*t10267;
  t25838 = t25836 + t25837;
  t25840 = t10480*t25838;
  t25853 = t25840 + t24976;
  t25858 = t25838*t10766;
  t25859 = t24952 + t25858;
  t25877 = t426*t24458;
  t25885 = t24663*t1592*t10377;
  t25886 = t25877 + t25885;
  t25887 = t7911*t25886;
  t25888 = t24712*t10267;
  t25891 = t25887 + t25888;
  t25757 = t24663*t10994*t426*t10275;
  t25759 = t24663*t10994*t10377*t10477;
  t25784 = t25757 + t25759 + t25765 + t25768 + t25769 + t25770 + t25783;
  t25941 = -1.*t25886*t10267;
  t25942 = t24953 + t25941;
  t25999 = -1.*t24857*t10267;
  t26000 = t25887 + t25999;
  t25786 = t24663*t10994*t10377*t10842;
  t25787 = -1.*t24663*t10994*t426*t10855;
  t25788 = t25786 + t25787 + t25765 + t25768 + t25769 + t25770 + t25783;
  t25935 = t24712*t10842;
  t25936 = t25886*t10855;
  t25937 = -1.*t7911*t25886;
  t25938 = t25937 + t24728;
  t25940 = 0.15121*t25938;
  t25943 = 0.28121*t10516*t25942;
  t25944 = 0.50321*t10480*t10661*t25942;
  t25948 = -0.50321*t25942*t10766*t10779;
  t25949 = t10480*t10653*t25942;
  t25951 = t25942*t10766*t10779;
  t25952 = t25949 + t25951;
  t25953 = 0.19821*t25952;
  t25961 = t25935 + t25936 + t25940 + t25943 + t25944 + t25948 + t25953;
  t26035 = -1.*t7911*t24857;
  t26036 = t26035 + t25941;
  t25906 = 0.28121*t25891*t10766;
  t25907 = -0.50321*t10661*t25891*t10766;
  t25910 = -0.50321*t10480*t25891*t10779;
  t25911 = -1.*t10653*t25891*t10766;
  t25912 = t10480*t25891*t10779;
  t25913 = t25911 + t25912;
  t25914 = 0.19821*t25913;
  t25915 = t25906 + t25907 + t25910 + t25914;
  t26018 = 0.28121*t26000*t10766;
  t26019 = -0.50321*t10661*t26000*t10766;
  t26020 = -0.50321*t10480*t26000*t10779;
  t26021 = -1.*t10653*t26000*t10766;
  t26023 = t10480*t26000*t10779;
  t26024 = t26021 + t26023;
  t26025 = 0.19821*t26024;
  t26026 = t26018 + t26019 + t26020 + t26025;
  t25813 = -0.28121*t24663*t10480*t1592;
  t25814 = 0.28121*t25797*t10766;
  t25819 = 0.50321*t10661*t25818;
  t25820 = -0.50321*t25805*t10779;
  t25821 = t10653*t25818;
  t25822 = t25805*t10779;
  t25823 = t25821 + t25822;
  t25824 = 0.19821*t25823;
  t25825 = t25813 + t25814 + t25819 + t25820 + t25824;
  t26057 = t25886*t10267;
  t26059 = t24918 + t26057;
  t26060 = t10480*t26059;
  t26061 = -1.*t24663*t10994*t10766;
  t26062 = t26060 + t26061;
  t26064 = -1.*t26059*t10766;
  t26065 = t24952 + t26064;
  t26076 = -1.*t10480*t26059;
  t26078 = t26076 + t24976;
  t25892 = -0.50321*t10653*t25891*t10766;
  t25893 = 0.50321*t10480*t25891*t10779;
  t25895 = t10653*t25891*t10766;
  t25896 = -1.*t10480*t25891*t10779;
  t25900 = t25895 + t25896;
  t25901 = 0.19821*t25900;
  t25902 = t25892 + t25893 + t25901;
  t26002 = -0.50321*t10653*t26000*t10766;
  t26003 = 0.50321*t10480*t26000*t10779;
  t26004 = t10653*t26000*t10766;
  t26009 = -1.*t10480*t26000*t10779;
  t26010 = t26004 + t26009;
  t26012 = 0.19821*t26010;
  t26014 = t26002 + t26003 + t26012;
  t25802 = -0.50321*t10653*t25800;
  t25806 = 0.50321*t25805*t10779;
  t25807 = t10653*t25800;
  t25808 = -1.*t25805*t10779;
  t25809 = t25807 + t25808;
  t25810 = 0.19821*t25809;
  t25811 = t25802 + t25806 + t25810;
  t26063 = -0.50321*t10653*t26062;
  t26066 = 0.50321*t26065*t10779;
  t26067 = t10653*t26062;
  t26068 = -1.*t26065*t10779;
  t26069 = t26067 + t26068;
  t26070 = 0.19821*t26069;
  t26071 = t26063 + t26066 + t26070;
  t26098 = t26059*t10766;
  t26099 = t24991 + t26098;
  p_output1[0]=(t11561 + t11759 + t11909 + t12758 + t12816 + 0.50321*t10661*t12974 - 0.50321*t10779*t13187 + 0.19821*(t10653*t12974 + t10779*t13187))*var2[4] + t10827*var2[5] + t10858*var2[6] + t11530*var2[7] + t11256*var2[8];
  p_output1[1]=t15414 + t18014 + t10827*var2[4] + (t11561 + t11759 + t11909 + t12758 + t18050 + t18077 + t18205)*var2[5] + t18370*var2[6];
  p_output1[2]=t15414 + t18014 + t10858*var2[4] + t18370*var2[5] + (t11909 + t12758 + t18050 + t18077 + t18205 + t18353 + t10994*t18409*t426)*var2[6];
  p_output1[3]=t11530*var2[4] + t17966*var2[5] + t17966*var2[6] + (t12816 + 0.28121*t10480*t18459 - 0.50321*t10779*t18868 + 0.50321*t10661*t19134 + 0.19821*(t10779*t18868 + t10653*t19134))*var2[7] + t18915*var2[8];
  p_output1[4]=t11256*var2[4] + t15313*var2[5] + t15313*var2[6] + t18915*var2[7] + (0.50321*t10653*t18836 + 0.50321*t10779*t22575 + 0.19821*(-1.*t10653*t18836 - 1.*t10779*t22575))*var2[8];
  p_output1[5]=1.;
  p_output1[6]=0.15121*t10591 + 0.28121*t10766*t10994 + 0.28121*t10516*t11017 - 0.50321*t10779*t11023 + 0.50321*t10661*t11034 + 0.19821*(t10779*t11023 + t10653*t11034) + t10275*t10377*t1592 - 1.*t10477*t1592*t426;
  p_output1[7]=-1.*t10377*t10477*t10994 + t23952 + t23995 + t24010 + t24024 + t24093 - 1.*t10275*t10994*t426;
  p_output1[8]=-1.*t10377*t10842*t10994 + t23952 + t23995 + t24010 + t24024 + t24093 + t10855*t10994*t426;
  p_output1[9]=0.28121*t10480*t1592 + 0.28121*t10766*t18459 - 0.50321*t10779*t18836 + 0.50321*t10661*t18868 + 0.19821*(t10779*t18836 + t10653*t18868);
  p_output1[10]=0.50321*t10779*t18836 - 0.50321*t10653*t22575 + 0.19821*(-1.*t10779*t18836 + t10653*t22575);
  p_output1[11]=(t25148 + t25161 + t25177 + t25193 + t25194 + 0.50321*t10661*t25203 - 0.50321*t10779*t25214 + 0.19821*(t10653*t25203 + t10779*t25214))*var2[3] + t25137*var2[4] + t24950*var2[5] + t24827*var2[6] + t25054*var2[7] + t24986*var2[8];
  p_output1[12]=t25137*var2[3] + (t10275*t10377*t1592*t24458 + t25194 + 0.28121*t10516*t25377 + 0.50321*t10661*t25382 - 0.50321*t10779*t25386 + 0.19821*(t10653*t25382 + t10779*t25386) - 1.*t10477*t1592*t24458*t426 + 0.15121*(t10267*t1592*t24458*t426 + t10377*t1592*t24458*t7911))*var2[4] + t25280*var2[5] + t25285*var2[6] + t25353*var2[7] + t25318*var2[8];
  p_output1[13]=t24950*var2[3] + t25280*var2[4] + (t25148 + t25161 + t25177 + 0.50321*t10480*t10661*t25185 - 0.50321*t10766*t10779*t25185 + 0.19821*(t10480*t10653*t25185 + t10766*t10779*t25185) + t25193)*var2[5] + t25470*var2[6] + t25444*var2[7] + t25425*var2[8];
  p_output1[14]=t24827*var2[3] + t25285*var2[4] + t25470*var2[5] + (t25452 + t18409*t25488 + 0.15121*(t25453 + t10267*t25488) + 0.28121*t10516*t25530 + 0.50321*t10480*t10661*t25530 - 0.50321*t10766*t10779*t25530 + 0.19821*(t10480*t10653*t25530 + t10766*t10779*t25530))*var2[6] + t25516*var2[7] + t25498*var2[8];
  p_output1[15]=t25054*var2[3] + t25353*var2[4] + t25444*var2[5] + t25516*var2[6] + (t25194 + 0.28121*t10480*t25555 - 0.50321*t10779*t25563 + 0.50321*t10661*t25578 + 0.19821*(t10779*t25563 + t10653*t25578))*var2[7] + t25572*var2[8];
  p_output1[16]=t24986*var2[3] + t25318*var2[4] + t25425*var2[5] + t25498*var2[6] + t25572*var2[7] + (0.50321*t10653*t25559 + 0.50321*t10779*t25608 + 0.19821*(-1.*t10653*t25559 - 1.*t10779*t25608))*var2[8];
  p_output1[17]=1.;
  p_output1[18]=t25639;
  p_output1[19]=t25662;
  p_output1[20]=t25689;
  p_output1[21]=t25715;
  p_output1[22]=t25731;
  p_output1[23]=t25743;
  p_output1[24]=t25639*var2[3] + t25662*var2[4] + t25689*var2[5] + t25715*var2[6] + t25731*var2[7] + t25743*var2[8];
  p_output1[25]=t25662*var2[3] + (-1.*t10275*t10377*t1592*t24663 + t25629 + 0.28121*t10516*t25838 + 0.50321*t10661*t25853 - 0.50321*t10779*t25859 + 0.19821*(t10653*t25853 + t10779*t25859) + t10477*t1592*t24663*t426 + 0.15121*(-1.*t10267*t1592*t24663*t426 - 1.*t10377*t1592*t24663*t7911))*var2[4] + t25784*var2[5] + t25788*var2[6] + t25825*var2[7] + t25811*var2[8];
  p_output1[26]=t25689*var2[3] + t25784*var2[4] + (0.50321*t10480*t10661*t24965 - 0.50321*t10766*t10779*t24965 + 0.19821*(t10480*t10653*t24965 + t10766*t10779*t24965) + t25624 + t25626 + t25627 + t25628)*var2[5] + t25961*var2[6] + t25915*var2[7] + t25902*var2[8];
  p_output1[27]=t25715*var2[3] + t25788*var2[4] + t25961*var2[5] + (t18409*t24857 + t25936 + 0.15121*(t24905 + t25937) + 0.28121*t10516*t26036 + 0.50321*t10480*t10661*t26036 - 0.50321*t10766*t10779*t26036 + 0.19821*(t10480*t10653*t26036 + t10766*t10779*t26036))*var2[6] + t26026*var2[7] + t26014*var2[8];
  p_output1[28]=t25731*var2[3] + t25825*var2[4] + t25915*var2[5] + t26026*var2[6] + (t25629 + 0.28121*t10480*t26059 - 0.50321*t10779*t26065 + 0.50321*t10661*t26078 + 0.19821*(t10779*t26065 + t10653*t26078))*var2[7] + t26071*var2[8];
  p_output1[29]=t25743*var2[3] + t25811*var2[4] + t25902*var2[5] + t26014*var2[6] + t26071*var2[7] + (0.50321*t10653*t26062 + 0.50321*t10779*t26099 + 0.19821*(-1.*t10653*t26062 - 1.*t10779*t26099))*var2[8];
  p_output1[30]=1.;
  p_output1[31]=-0.28121*t10766*t10994*t24458 + t10275*t25410 + t10477*t25488 + 0.15121*t25490 + 0.28121*t10516*t25555 + 0.50321*t10661*t25559 - 0.50321*t10779*t25608 + 0.19821*(t25566 + t10779*t25608);
  p_output1[32]=t10275*t10377*t10994*t24663 - 0.28121*t10766*t1592*t24663 + 0.15121*t25764 + 0.28121*t10516*t25797 - 0.50321*t10779*t25800 + 0.50321*t10661*t25805 + 0.19821*(t10779*t25800 + t10653*t25805) - 1.*t10477*t10994*t24663*t426;
  p_output1[33]=t10275*t24712 + t10477*t25886 + 0.28121*t10516*t25891 + 0.50321*t10480*t10661*t25891 - 0.50321*t10766*t10779*t25891 + 0.19821*(t10480*t10653*t25891 + t10766*t10779*t25891) + 0.15121*t25942;
  p_output1[34]=t10855*t24857 + t10842*t25886 + 0.28121*t10516*t26000 + 0.50321*t10480*t10661*t26000 - 0.50321*t10766*t10779*t26000 + 0.19821*(t10480*t10653*t26000 + t10766*t10779*t26000) + 0.15121*t26036;
  p_output1[35]=0.28121*t10480*t10994*t24663 + 0.28121*t10766*t26059 - 0.50321*t10779*t26062 + 0.50321*t10661*t26065 + 0.19821*(t10779*t26062 + t10653*t26065);
  p_output1[36]=0.50321*t10779*t26062 - 0.50321*t10653*t26099 + 0.19821*(-1.*t10779*t26062 + t10653*t26099);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 37, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_impact_velocity_FlFoot_ParallelStance.hh"

namespace ParallelStance
{

void J_impact_velocity_FlFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
