/*
 * Automatically Generated from Mathematica.
 * Sat 14 May 2022 15:43:55 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t14944;
  double t45661;
  double t45847;
  double t45944;
  double t46108;
  double t46112;
  double t46266;
  double t1009;
  double t46319;
  double t46327;
  double t46331;
  double t46340;
  double t46354;
  double t46398;
  double t46399;
  double t46267;
  double t46320;
  double t46324;
  double t46341;
  double t46377;
  double t46389;
  double t46390;
  double t46391;
  double t46392;
  double t46396;
  double t46397;
  double t46400;
  double t46401;
  double t46402;
  double t46404;
  double t46405;
  double t46462;
  double t46467;
  double t46472;
  double t46454;
  double t46455;
  double t46473;
  double t46474;
  double t46477;
  double t46478;
  double t46482;
  double t46517;
  double t46518;
  double t46526;
  double t46154;
  double t46171;
  double t46270;
  double t46612;
  double t46617;
  double t46618;
  double t46625;
  double t46626;
  double t46628;
  double t46630;
  double t46634;
  double t46644;
  double t46682;
  double t46685;
  double t46687;
  double t46178;
  double t46303;
  double t46411;
  double t46603;
  double t46604;
  double t46605;
  double t46606;
  double t46607;
  double t46611;
  double t46623;
  double t46421;
  double t46425;
  double t46439;
  double t46443;
  double t46736;
  double t46737;
  double t46738;
  double t46739;
  double t46743;
  double t46747;
  double t46688;
  double t46689;
  double t46690;
  double t46691;
  double t46695;
  double t46707;
  double t46711;
  double t46712;
  double t46713;
  double t46714;
  double t46721;
  double t46722;
  double t46726;
  double t46730;
  double t46731;
  double t46732;
  double t46734;
  double t46435;
  double t46448;
  double t46452;
  double t46754;
  double t46753;
  double t46755;
  double t46512;
  double t46513;
  double t46527;
  double t46534;
  double t46535;
  double t46537;
  double t46541;
  double t46543;
  double t46544;
  double t46812;
  double t46825;
  double t46828;
  double t46830;
  double t46832;
  double t46834;
  double t46853;
  double t46858;
  double t46624;
  double t46875;
  double t46879;
  double t46476;
  double t46486;
  double t46491;
  double t46495;
  double t46499;
  double t46503;
  double t46504;
  double t46837;
  double t46859;
  double t46861;
  double t46863;
  double t46866;
  double t46867;
  double t46868;
  double t46971;
  double t46981;
  double t46982;
  double t47021;
  double t47022;
  double t47023;
  double t47024;
  double t47025;
  double t47026;
  double t47027;
  double t47028;
  double t47081;
  double t47079;
  double t47080;
  double t47082;
  double t47084;
  double t47086;
  double t47087;
  double t47089;
  double t47093;
  double t47094;
  double t47097;
  double t47111;
  double t47112;
  double t47113;
  double t47116;
  double t47117;
  double t47101;
  double t47136;
  double t47137;
  double t47138;
  double t47135;
  double t47139;
  double t47140;
  double t47142;
  double t47143;
  double t47144;
  double t47155;
  double t47156;
  double t47157;
  double t47175;
  double t47176;
  double t47177;
  double t47180;
  double t47181;
  double t47182;
  double t47184;
  double t47185;
  double t47186;
  double t47194;
  double t47195;
  double t47196;
  double t47198;
  double t47199;
  double t47200;
  double t47206;
  double t47207;
  double t47208;
  double t47212;
  double t47213;
  double t47214;
  double t47216;
  double t47217;
  double t47218;
  double t47232;
  double t47252;
  double t47266;
  double t47268;
  double t47269;
  double t47271;
  double t47272;
  double t47273;
  double t47274;
  double t47275;
  double t47276;
  double t47278;
  double t47279;
  double t47281;
  double t47294;
  double t47298;
  double t47299;
  double t47290;
  double t47300;
  double t47301;
  double t47303;
  double t47304;
  double t47305;
  double t47320;
  double t47321;
  double t47322;
  double t47167;
  double t47169;
  double t47170;
  double t47171;
  double t47172;
  double t47174;
  double t47178;
  double t47179;
  double t47183;
  double t47187;
  double t47188;
  double t47189;
  double t47190;
  double t47191;
  double t47192;
  double t47211;
  double t47343;
  double t47344;
  double t47345;
  double t47347;
  double t47348;
  double t47350;
  double t47351;
  double t47360;
  double t47361;
  double t47362;
  double t47364;
  double t47365;
  double t47366;
  double t47228;
  double t47229;
  double t47283;
  double t47114;
  double t47115;
  double t47118;
  double t47119;
  double t47120;
  double t47122;
  double t47123;
  double t47127;
  double t47128;
  double t47129;
  double t47130;
  double t47132;
  double t47133;
  double t47203;
  double t47392;
  double t47393;
  double t47197;
  double t47201;
  double t47202;
  double t47204;
  double t47205;
  double t47210;
  double t47445;
  double t47446;
  double t47447;
  double t47448;
  double t47450;
  double t47285;
  double t47286;
  double t47287;
  double t47085;
  double t47091;
  double t47098;
  double t47099;
  double t47100;
  double t47102;
  double t47103;
  double t47104;
  double t47105;
  double t47106;
  double t47107;
  double t47108;
  double t47109;
  double t47387;
  double t47388;
  double t47389;
  double t47390;
  double t47391;
  double t47394;
  double t47395;
  double t47396;
  double t47398;
  double t47401;
  double t47403;
  double t47404;
  double t47405;
  double t46763;
  double t47475;
  double t47476;
  double t47375;
  double t47377;
  double t47378;
  double t47379;
  double t47380;
  double t47381;
  double t47382;
  double t47383;
  double t47459;
  double t47460;
  double t47461;
  double t47462;
  double t47463;
  double t47464;
  double t47465;
  double t47466;
  double t47153;
  double t47154;
  double t47158;
  double t47159;
  double t47160;
  double t47161;
  double t47162;
  double t47163;
  double t47164;
  double t47314;
  double t47319;
  double t47323;
  double t47324;
  double t47327;
  double t47330;
  double t47331;
  double t47332;
  double t47333;
  double t47492;
  double t47493;
  double t47494;
  double t47495;
  double t47496;
  double t47497;
  double t47499;
  double t47500;
  double t47509;
  double t47510;
  double t47367;
  double t47368;
  double t47369;
  double t47370;
  double t47371;
  double t47372;
  double t47373;
  double t47451;
  double t47452;
  double t47453;
  double t47454;
  double t47455;
  double t47456;
  double t47457;
  double t47141;
  double t47145;
  double t47146;
  double t47147;
  double t47149;
  double t47150;
  double t47151;
  double t47302;
  double t47306;
  double t47307;
  double t47308;
  double t47309;
  double t47310;
  double t47311;
  double t47498;
  double t47501;
  double t47502;
  double t47503;
  double t47504;
  double t47505;
  double t47506;
  double t47527;
  double t47528;
  double t47529;
  double t47565;
  double t47566;
  double t47567;
  double t47568;
  double t47569;
  double t47570;
  double t47571;
  double t47572;
  double t47573;
  double t47574;
  double t47575;
  double t47576;
  double t47577;
  double t47578;
  double t47579;
  double t47580;
  double t47581;
  double t47583;
  double t47584;
  double t47586;
  double t47587;
  double t47588;
  double t47602;
  double t47603;
  double t47604;
  double t47606;
  double t47608;
  double t47609;
  double t47610;
  double t47589;
  double t47590;
  double t47591;
  double t47592;
  double t47596;
  double t47597;
  double t47599;
  double t47600;
  double t47601;
  double t47553;
  double t47554;
  double t47555;
  double t47556;
  double t47557;
  double t47558;
  double t47559;
  double t47560;
  double t47561;
  double t47562;
  double t47563;
  double t47564;
  double t47540;
  double t47541;
  double t47542;
  double t47543;
  double t47544;
  double t47545;
  double t47546;
  double t47547;
  double t47548;
  double t47550;
  double t47551;
  double t47552;
  double t47622;
  double t47629;
  double t47630;
  double t47631;
  double t47633;
  double t47639;
  double t47641;
  double t47642;
  double t47645;
  double t47648;
  double t47651;
  double t47671;
  double t47673;
  double t47679;
  double t47670;
  double t47684;
  double t47692;
  double t47696;
  double t47701;
  double t47702;
  double t47716;
  double t47717;
  double t47734;
  double t47735;
  double t47736;
  double t47738;
  double t47739;
  double t47742;
  double t47743;
  double t47753;
  double t47755;
  double t47757;
  double t47758;
  double t47759;
  double t47760;
  double t47620;
  double t47621;
  double t47652;
  double t47794;
  double t47795;
  double t47810;
  double t47811;
  double t47657;
  double t47660;
  double t47662;
  double t47789;
  double t47790;
  double t47791;
  double t47792;
  double t47793;
  double t47798;
  double t47799;
  double t47800;
  double t47801;
  double t47802;
  double t47804;
  double t47805;
  double t47806;
  double t47845;
  double t47848;
  double t47770;
  double t47771;
  double t47772;
  double t47773;
  double t47774;
  double t47775;
  double t47776;
  double t47777;
  double t47822;
  double t47823;
  double t47824;
  double t47828;
  double t47829;
  double t47830;
  double t47832;
  double t47834;
  double t47714;
  double t47715;
  double t47718;
  double t47719;
  double t47720;
  double t47721;
  double t47722;
  double t47723;
  double t47724;
  double t47871;
  double t47874;
  double t47876;
  double t47877;
  double t47878;
  double t47894;
  double t47900;
  double t47918;
  double t47919;
  double t47761;
  double t47762;
  double t47763;
  double t47764;
  double t47765;
  double t47767;
  double t47768;
  double t47812;
  double t47813;
  double t47814;
  double t47815;
  double t47816;
  double t47817;
  double t47818;
  double t47695;
  double t47703;
  double t47708;
  double t47709;
  double t47710;
  double t47711;
  double t47712;
  double t47881;
  double t47903;
  double t47905;
  double t47908;
  double t47909;
  double t47911;
  double t47912;
  double t47981;
  double t47982;
  t14944 = Sin(var1[4]);
  t45661 = Cos(var1[6]);
  t45847 = -1.*t45661;
  t45944 = 1. + t45847;
  t46108 = 0.15121*t45944;
  t46112 = Sin(var1[6]);
  t46266 = Sin(var1[5]);
  t1009 = Cos(var1[5]);
  t46319 = Cos(var1[7]);
  t46327 = t45661*t14944*t46266;
  t46331 = t1009*t14944*t46112;
  t46340 = t46327 + t46331;
  t46354 = Cos(var1[8]);
  t46398 = Sin(var1[7]);
  t46399 = Sin(var1[8]);
  t46267 = 0.15121*t46112;
  t46320 = -1.*t46319;
  t46324 = 1. + t46320;
  t46341 = 0.28121*t46324*t46340;
  t46377 = -1.*t46354;
  t46389 = 1. + t46377;
  t46390 = 0.50321*t46319*t46389*t46340;
  t46391 = t1009*t45661*t14944;
  t46392 = -1.*t14944*t46266*t46112;
  t46396 = t46391 + t46392;
  t46397 = 0.15121*t46396;
  t46400 = -0.50321*t46340*t46398*t46399;
  t46401 = t46319*t46354*t46340;
  t46402 = t46340*t46398*t46399;
  t46404 = t46401 + t46402;
  t46405 = 0.23321*t46404;
  t46462 = -1.*t1009*t45661*t14944;
  t46467 = t14944*t46266*t46112;
  t46472 = t46462 + t46467;
  t46454 = Cos(var1[4]);
  t46455 = t46454*t46319;
  t46473 = t46472*t46398;
  t46474 = t46455 + t46473;
  t46477 = t46319*t46472;
  t46478 = -1.*t46454*t46398;
  t46482 = t46477 + t46478;
  t46517 = -1.*t46454*t46319;
  t46518 = -1.*t46472*t46398;
  t46526 = t46517 + t46518;
  t46154 = -0.15121*t46112;
  t46171 = t46108 + t46154;
  t46270 = t46108 + t46267;
  t46612 = -1.*t46454*t1009*t45661;
  t46617 = t46454*t46266*t46112;
  t46618 = t46612 + t46617;
  t46625 = t46319*t46618;
  t46626 = t14944*t46398;
  t46628 = t46625 + t46626;
  t46630 = -1.*t46319*t14944;
  t46634 = t46618*t46398;
  t46644 = t46630 + t46634;
  t46682 = -1.*t46454*t45661*t46266;
  t46685 = -1.*t46454*t1009*t46112;
  t46687 = t46682 + t46685;
  t46178 = t1009*t14944*t46171;
  t46303 = t14944*t46266*t46270;
  t46411 = t46178 + t46303 + t46341 + t46390 + t46397 + t46400 + t46405;
  t46603 = t46454*t46266*t46171;
  t46604 = -1.*t46454*t1009*t46270;
  t46605 = t46454*t45661*t46266;
  t46606 = t46454*t1009*t46112;
  t46607 = t46605 + t46606;
  t46611 = 0.15121*t46607;
  t46623 = 0.28121*t46324*t46618;
  t46421 = -0.15121*t45661;
  t46425 = t46421 + t46267;
  t46439 = 0.15121*t45661;
  t46443 = t46439 + t46267;
  t46736 = 0.50321*t46319*t46389*t46618;
  t46737 = -0.50321*t46618*t46398*t46399;
  t46738 = t46319*t46354*t46618;
  t46739 = t46618*t46398*t46399;
  t46743 = t46738 + t46739;
  t46747 = 0.23321*t46743;
  t46688 = -0.50321*t46354*t46687*t46398;
  t46689 = 0.50321*t46319*t46687*t46399;
  t46690 = t46354*t46687*t46398;
  t46691 = -1.*t46319*t46687*t46399;
  t46695 = t46690 + t46691;
  t46707 = 0.23321*t46695;
  t46711 = t46688 + t46689 + t46707;
  t46712 = var2[8]*t46711;
  t46713 = 0.28121*t46687*t46398;
  t46714 = -0.50321*t46389*t46687*t46398;
  t46721 = -0.50321*t46319*t46687*t46399;
  t46722 = -1.*t46354*t46687*t46398;
  t46726 = t46319*t46687*t46399;
  t46730 = t46722 + t46726;
  t46731 = 0.23321*t46730;
  t46732 = t46713 + t46714 + t46721 + t46731;
  t46734 = var2[7]*t46732;
  t46435 = t14944*t46266*t46425;
  t46448 = -1.*t1009*t14944*t46443;
  t46452 = t46435 + t46448 + t46341 + t46390 + t46397 + t46400 + t46405;
  t46754 = -1.*t46454*t46266*t46443;
  t46753 = -1.*t46454*t1009*t46425;
  t46755 = t46753 + t46754 + t46611 + t46623 + t46736 + t46737 + t46747;
  t46512 = 0.28121*t46454*t46319;
  t46513 = 0.28121*t46472*t46398;
  t46527 = 0.50321*t46389*t46526;
  t46534 = -0.50321*t46482*t46399;
  t46535 = t46354*t46526;
  t46537 = t46482*t46399;
  t46541 = t46535 + t46537;
  t46543 = 0.23321*t46541;
  t46544 = t46512 + t46513 + t46527 + t46534 + t46543;
  t46812 = t46454*t1009*t45661;
  t46825 = -1.*t46454*t46266*t46112;
  t46828 = t46812 + t46825;
  t46830 = t46319*t46828;
  t46832 = -1.*t14944*t46398;
  t46834 = t46830 + t46832;
  t46853 = -1.*t46828*t46398;
  t46858 = t46630 + t46853;
  t46624 = -0.28121*t14944*t46398;
  t46875 = -1.*t46319*t46828;
  t46879 = t46875 + t46626;
  t46476 = -0.50321*t46354*t46474;
  t46486 = 0.50321*t46482*t46399;
  t46491 = t46354*t46474;
  t46495 = -1.*t46482*t46399;
  t46499 = t46491 + t46495;
  t46503 = 0.23321*t46499;
  t46504 = t46476 + t46486 + t46503;
  t46837 = -0.50321*t46354*t46834;
  t46859 = 0.50321*t46858*t46399;
  t46861 = t46354*t46834;
  t46863 = -1.*t46858*t46399;
  t46866 = t46861 + t46863;
  t46867 = 0.23321*t46866;
  t46868 = t46837 + t46859 + t46867;
  t46971 = t46319*t14944;
  t46981 = t46828*t46398;
  t46982 = t46971 + t46981;
  t47021 = 0.28121*t46324*t46687;
  t47022 = 0.50321*t46319*t46389*t46687;
  t47023 = 0.15121*t46618;
  t47024 = -0.50321*t46687*t46398*t46399;
  t47025 = t46319*t46354*t46687;
  t47026 = t46687*t46398*t46399;
  t47027 = t47025 + t47026;
  t47028 = 0.23321*t47027;
  t47081 = Cos(var1[3]);
  t47079 = Sin(var1[3]);
  t47080 = -1.*t1009*t47079;
  t47082 = -1.*t47081*t14944*t46266;
  t47084 = t47080 + t47082;
  t47086 = t47081*t1009*t14944;
  t47087 = -1.*t47079*t46266;
  t47089 = t47086 + t47087;
  t47093 = t45661*t47084;
  t47094 = -1.*t47089*t46112;
  t47097 = t47093 + t47094;
  t47111 = -1.*t47081*t1009*t14944;
  t47112 = t47079*t46266;
  t47113 = t47111 + t47112;
  t47116 = t47113*t46112;
  t47117 = t47093 + t47116;
  t47101 = -1.*t47084*t46112;
  t47136 = t45661*t47089;
  t47137 = t47084*t46112;
  t47138 = t47136 + t47137;
  t47135 = -1.*t47081*t46454*t46319;
  t47139 = t47138*t46398;
  t47140 = t47135 + t47139;
  t47142 = t46319*t47138;
  t47143 = t47081*t46454*t46398;
  t47144 = t47142 + t47143;
  t47155 = t47081*t46454*t46319;
  t47156 = -1.*t47138*t46398;
  t47157 = t47155 + t47156;
  t47175 = t47081*t46454*t1009*t45661;
  t47176 = -1.*t47081*t46454*t46266*t46112;
  t47177 = t47175 + t47176;
  t47180 = t46319*t47177;
  t47181 = -1.*t47081*t14944*t46398;
  t47182 = t47180 + t47181;
  t47184 = t47081*t46319*t14944;
  t47185 = t47177*t46398;
  t47186 = t47184 + t47185;
  t47194 = -1.*t47081*t1009;
  t47195 = t47079*t14944*t46266;
  t47196 = t47194 + t47195;
  t47198 = -1.*t1009*t47079*t14944;
  t47199 = -1.*t47081*t46266;
  t47200 = t47198 + t47199;
  t47206 = t45661*t47200;
  t47207 = t47196*t46112;
  t47208 = t47206 + t47207;
  t47212 = t46319*t47208;
  t47213 = -1.*t46454*t47079*t46398;
  t47214 = t47212 + t47213;
  t47216 = t46454*t46319*t47079;
  t47217 = t47208*t46398;
  t47218 = t47216 + t47217;
  t47232 = -1.*t46454*t45661*t47079*t46266;
  t47252 = -1.*t46454*t1009*t47079*t46112;
  t47266 = t47232 + t47252;
  t47268 = 0.28121*t46324*t47266;
  t47269 = 0.50321*t46319*t46389*t47266;
  t47271 = -1.*t46454*t1009*t45661*t47079;
  t47272 = t46454*t47079*t46266*t46112;
  t47273 = t47271 + t47272;
  t47274 = 0.15121*t47273;
  t47275 = -0.50321*t47266*t46398*t46399;
  t47276 = t46319*t46354*t47266;
  t47278 = t47266*t46398*t46399;
  t47279 = t47276 + t47278;
  t47281 = 0.23321*t47279;
  t47294 = t46454*t1009*t45661*t47079;
  t47298 = -1.*t46454*t47079*t46266*t46112;
  t47299 = t47294 + t47298;
  t47290 = t46319*t47079*t14944;
  t47300 = t47299*t46398;
  t47301 = t47290 + t47300;
  t47303 = t46319*t47299;
  t47304 = -1.*t47079*t14944*t46398;
  t47305 = t47303 + t47304;
  t47320 = -1.*t46319*t47079*t14944;
  t47321 = -1.*t47299*t46398;
  t47322 = t47320 + t47321;
  t47167 = -1.*t47081*t46454*t46266*t46171;
  t47169 = t47081*t46454*t1009*t46270;
  t47170 = -1.*t47081*t46454*t45661*t46266;
  t47171 = -1.*t47081*t46454*t1009*t46112;
  t47172 = t47170 + t47171;
  t47174 = 0.15121*t47172;
  t47178 = 0.28121*t46324*t47177;
  t47179 = 0.28121*t47081*t14944*t46398;
  t47183 = 0.50321*t46389*t47182;
  t47187 = -0.50321*t47186*t46399;
  t47188 = t46354*t47182;
  t47189 = t47186*t46399;
  t47190 = t47188 + t47189;
  t47191 = 0.23321*t47190;
  t47192 = t47167 + t47169 + t47174 + t47178 + t47179 + t47183 + t47187 + t47191;
  t47211 = 0.28121*t46454*t47079*t46398;
  t47343 = -1.*t1009*t45661*t47079*t14944;
  t47344 = t47079*t14944*t46266*t46112;
  t47345 = t47343 + t47344;
  t47347 = t46319*t47345;
  t47348 = t47347 + t47213;
  t47350 = t47345*t46398;
  t47351 = t47216 + t47350;
  t47360 = t47081*t1009;
  t47361 = -1.*t47079*t14944*t46266;
  t47362 = t47360 + t47361;
  t47364 = t45661*t47362;
  t47365 = t47200*t46112;
  t47366 = t47364 + t47365;
  t47228 = -1.*t46454*t1009*t47079*t46171;
  t47229 = -1.*t46454*t47079*t46266*t46270;
  t47283 = t47228 + t47229 + t47268 + t47269 + t47274 + t47275 + t47281;
  t47114 = t47113*t46171;
  t47115 = t47084*t46270;
  t47118 = 0.28121*t46324*t47117;
  t47119 = 0.50321*t46319*t46389*t47117;
  t47120 = t45661*t47113;
  t47122 = t47120 + t47101;
  t47123 = 0.15121*t47122;
  t47127 = -0.50321*t47117*t46398*t46399;
  t47128 = t46319*t46354*t47117;
  t47129 = t47117*t46398*t46399;
  t47130 = t47128 + t47129;
  t47132 = 0.23321*t47130;
  t47133 = t47114 + t47115 + t47118 + t47119 + t47123 + t47127 + t47132;
  t47203 = -1.*t47200*t46112;
  t47392 = -1.*t47362*t46112;
  t47393 = t47206 + t47392;
  t47197 = t47196*t46171;
  t47201 = t47200*t46270;
  t47202 = t45661*t47196;
  t47204 = t47202 + t47203;
  t47205 = 0.15121*t47204;
  t47210 = 0.28121*t46324*t47208;
  t47445 = t1009*t47079*t14944;
  t47446 = t47081*t46266;
  t47447 = t47445 + t47446;
  t47448 = -1.*t47447*t46112;
  t47450 = t47364 + t47448;
  t47285 = -1.*t46454*t47079*t46266*t46425;
  t47286 = t46454*t1009*t47079*t46443;
  t47287 = t47285 + t47286 + t47268 + t47269 + t47274 + t47275 + t47281;
  t47085 = t47084*t46425;
  t47091 = t47089*t46443;
  t47098 = 0.28121*t46324*t47097;
  t47099 = 0.50321*t46319*t46389*t47097;
  t47100 = -1.*t45661*t47089;
  t47102 = t47100 + t47101;
  t47103 = 0.15121*t47102;
  t47104 = -0.50321*t47097*t46398*t46399;
  t47105 = t46319*t46354*t47097;
  t47106 = t47097*t46398*t46399;
  t47107 = t47105 + t47106;
  t47108 = 0.23321*t47107;
  t47109 = t47085 + t47091 + t47098 + t47099 + t47103 + t47104 + t47108;
  t47387 = t47200*t46425;
  t47388 = t47362*t46443;
  t47389 = -1.*t45661*t47362;
  t47390 = t47389 + t47203;
  t47391 = 0.15121*t47390;
  t47394 = 0.28121*t46324*t47393;
  t47395 = 0.50321*t46319*t46389*t47393;
  t47396 = -0.50321*t47393*t46398*t46399;
  t47398 = t46319*t46354*t47393;
  t47401 = t47393*t46398*t46399;
  t47403 = t47398 + t47401;
  t47404 = 0.23321*t47403;
  t47405 = t47387 + t47388 + t47391 + t47394 + t47395 + t47396 + t47404;
  t46763 = t46439 + t46154;
  t47475 = -1.*t45661*t47447;
  t47476 = t47475 + t47392;
  t47375 = 0.28121*t47366*t46398;
  t47377 = -0.50321*t46389*t47366*t46398;
  t47378 = -0.50321*t46319*t47366*t46399;
  t47379 = -1.*t46354*t47366*t46398;
  t47380 = t46319*t47366*t46399;
  t47381 = t47379 + t47380;
  t47382 = 0.23321*t47381;
  t47383 = t47375 + t47377 + t47378 + t47382;
  t47459 = 0.28121*t47450*t46398;
  t47460 = -0.50321*t46389*t47450*t46398;
  t47461 = -0.50321*t46319*t47450*t46399;
  t47462 = -1.*t46354*t47450*t46398;
  t47463 = t46319*t47450*t46399;
  t47464 = t47462 + t47463;
  t47465 = 0.23321*t47464;
  t47466 = t47459 + t47460 + t47461 + t47465;
  t47153 = -0.28121*t47081*t46454*t46319;
  t47154 = 0.28121*t47138*t46398;
  t47158 = 0.50321*t46389*t47157;
  t47159 = -0.50321*t47144*t46399;
  t47160 = t46354*t47157;
  t47161 = t47144*t46399;
  t47162 = t47160 + t47161;
  t47163 = 0.23321*t47162;
  t47164 = t47153 + t47154 + t47158 + t47159 + t47163;
  t47314 = 0.28121*t46319*t47079*t14944;
  t47319 = 0.28121*t47299*t46398;
  t47323 = 0.50321*t46389*t47322;
  t47324 = -0.50321*t47305*t46399;
  t47327 = t46354*t47322;
  t47330 = t47305*t46399;
  t47331 = t47327 + t47330;
  t47332 = 0.23321*t47331;
  t47333 = t47314 + t47319 + t47323 + t47324 + t47332;
  t47492 = t45661*t47447;
  t47493 = t47362*t46112;
  t47494 = t47492 + t47493;
  t47495 = t46319*t47494;
  t47496 = t46454*t47079*t46398;
  t47497 = t47495 + t47496;
  t47499 = -1.*t47494*t46398;
  t47500 = t47216 + t47499;
  t47509 = -1.*t46319*t47494;
  t47510 = t47509 + t47213;
  t47367 = -0.50321*t46354*t47366*t46398;
  t47368 = 0.50321*t46319*t47366*t46399;
  t47369 = t46354*t47366*t46398;
  t47370 = -1.*t46319*t47366*t46399;
  t47371 = t47369 + t47370;
  t47372 = 0.23321*t47371;
  t47373 = t47367 + t47368 + t47372;
  t47451 = -0.50321*t46354*t47450*t46398;
  t47452 = 0.50321*t46319*t47450*t46399;
  t47453 = t46354*t47450*t46398;
  t47454 = -1.*t46319*t47450*t46399;
  t47455 = t47453 + t47454;
  t47456 = 0.23321*t47455;
  t47457 = t47451 + t47452 + t47456;
  t47141 = -0.50321*t46354*t47140;
  t47145 = 0.50321*t47144*t46399;
  t47146 = t46354*t47140;
  t47147 = -1.*t47144*t46399;
  t47149 = t47146 + t47147;
  t47150 = 0.23321*t47149;
  t47151 = t47141 + t47145 + t47150;
  t47302 = -0.50321*t46354*t47301;
  t47306 = 0.50321*t47305*t46399;
  t47307 = t46354*t47301;
  t47308 = -1.*t47305*t46399;
  t47309 = t47307 + t47308;
  t47310 = 0.23321*t47309;
  t47311 = t47302 + t47306 + t47310;
  t47498 = -0.50321*t46354*t47497;
  t47501 = 0.50321*t47500*t46399;
  t47502 = t46354*t47497;
  t47503 = -1.*t47500*t46399;
  t47504 = t47502 + t47503;
  t47505 = 0.23321*t47504;
  t47506 = t47498 + t47501 + t47505;
  t47527 = -1.*t46454*t46319*t47079;
  t47528 = t47494*t46398;
  t47529 = t47527 + t47528;
  t47565 = t47200*t46171;
  t47566 = t47362*t46270;
  t47567 = 0.28121*t46324*t47366;
  t47568 = 0.50321*t46319*t46389*t47366;
  t47569 = 0.15121*t47393;
  t47570 = -0.50321*t47366*t46398*t46399;
  t47571 = t46319*t46354*t47366;
  t47572 = t47366*t46398*t46399;
  t47573 = t47571 + t47572;
  t47574 = 0.23321*t47573;
  t47575 = t47565 + t47566 + t47567 + t47568 + t47569 + t47570 + t47574;
  t47576 = t47362*t46425;
  t47577 = t47447*t46443;
  t47578 = 0.28121*t46324*t47450;
  t47579 = 0.50321*t46319*t46389*t47450;
  t47580 = 0.15121*t47476;
  t47581 = -0.50321*t47450*t46398*t46399;
  t47583 = t46319*t46354*t47450;
  t47584 = t47450*t46398*t46399;
  t47586 = t47583 + t47584;
  t47587 = 0.23321*t47586;
  t47588 = t47576 + t47577 + t47578 + t47579 + t47580 + t47581 + t47587;
  t47602 = -0.50321*t46354*t47529;
  t47603 = 0.50321*t47497*t46399;
  t47604 = t46354*t47529;
  t47606 = -1.*t47497*t46399;
  t47608 = t47604 + t47606;
  t47609 = 0.23321*t47608;
  t47610 = t47602 + t47603 + t47609;
  t47589 = -0.28121*t46454*t46319*t47079;
  t47590 = 0.28121*t47494*t46398;
  t47591 = 0.50321*t46389*t47500;
  t47592 = -0.50321*t47497*t46399;
  t47596 = t46354*t47500;
  t47597 = t47497*t46399;
  t47599 = t47596 + t47597;
  t47600 = 0.23321*t47599;
  t47601 = t47589 + t47590 + t47591 + t47592 + t47600;
  t47553 = -1.*t46454*t47079*t46266*t46171;
  t47554 = t46454*t1009*t47079*t46270;
  t47555 = 0.15121*t47266;
  t47556 = 0.28121*t46324*t47299;
  t47557 = 0.28121*t47079*t14944*t46398;
  t47558 = 0.50321*t46389*t47305;
  t47559 = -0.50321*t47301*t46399;
  t47560 = t46354*t47305;
  t47561 = t47301*t46399;
  t47562 = t47560 + t47561;
  t47563 = 0.23321*t47562;
  t47564 = t47553 + t47554 + t47555 + t47556 + t47557 + t47558 + t47559 + t47563;
  t47540 = t47084*t46171;
  t47541 = t47089*t46270;
  t47542 = 0.15121*t47097;
  t47543 = 0.28121*t46324*t47138;
  t47544 = -0.28121*t47081*t46454*t46398;
  t47545 = 0.50321*t46389*t47144;
  t47546 = -0.50321*t47140*t46399;
  t47547 = t46354*t47144;
  t47548 = t47140*t46399;
  t47550 = t47547 + t47548;
  t47551 = 0.23321*t47550;
  t47552 = t47540 + t47541 + t47542 + t47543 + t47544 + t47545 + t47546 + t47551;
  t47622 = t47081*t46454*t45661*t46266;
  t47629 = t47081*t46454*t1009*t46112;
  t47630 = t47622 + t47629;
  t47631 = 0.28121*t46324*t47630;
  t47633 = 0.50321*t46319*t46389*t47630;
  t47639 = 0.15121*t47177;
  t47641 = -0.50321*t47630*t46398*t46399;
  t47642 = t46319*t46354*t47630;
  t47645 = t47630*t46398*t46399;
  t47648 = t47642 + t47645;
  t47651 = 0.23321*t47648;
  t47671 = -1.*t47081*t46454*t1009*t45661;
  t47673 = t47081*t46454*t46266*t46112;
  t47679 = t47671 + t47673;
  t47670 = -1.*t47081*t46319*t14944;
  t47684 = t47679*t46398;
  t47692 = t47670 + t47684;
  t47696 = t46319*t47679;
  t47701 = t47081*t14944*t46398;
  t47702 = t47696 + t47701;
  t47716 = -1.*t47679*t46398;
  t47717 = t47184 + t47716;
  t47734 = t47081*t1009*t45661*t14944;
  t47735 = -1.*t47081*t14944*t46266*t46112;
  t47736 = t47734 + t47735;
  t47738 = t46319*t47736;
  t47739 = t47738 + t47143;
  t47742 = t47736*t46398;
  t47743 = t47135 + t47742;
  t47753 = t1009*t47079;
  t47755 = t47081*t14944*t46266;
  t47757 = t47753 + t47755;
  t47758 = t45661*t47757;
  t47759 = t47089*t46112;
  t47760 = t47758 + t47759;
  t47620 = t47081*t46454*t1009*t46171;
  t47621 = t47081*t46454*t46266*t46270;
  t47652 = t47620 + t47621 + t47631 + t47633 + t47639 + t47641 + t47651;
  t47794 = -1.*t47757*t46112;
  t47795 = t47136 + t47794;
  t47810 = -1.*t47113*t46112;
  t47811 = t47758 + t47810;
  t47657 = t47081*t46454*t46266*t46425;
  t47660 = -1.*t47081*t46454*t1009*t46443;
  t47662 = t47657 + t47660 + t47631 + t47633 + t47639 + t47641 + t47651;
  t47789 = t47089*t46425;
  t47790 = t47757*t46443;
  t47791 = -1.*t45661*t47757;
  t47792 = t47791 + t47094;
  t47793 = 0.15121*t47792;
  t47798 = 0.28121*t46324*t47795;
  t47799 = 0.50321*t46319*t46389*t47795;
  t47800 = -0.50321*t47795*t46398*t46399;
  t47801 = t46319*t46354*t47795;
  t47802 = t47795*t46398*t46399;
  t47804 = t47801 + t47802;
  t47805 = 0.23321*t47804;
  t47806 = t47789 + t47790 + t47793 + t47798 + t47799 + t47800 + t47805;
  t47845 = -1.*t45661*t47113;
  t47848 = t47845 + t47794;
  t47770 = 0.28121*t47760*t46398;
  t47771 = -0.50321*t46389*t47760*t46398;
  t47772 = -0.50321*t46319*t47760*t46399;
  t47773 = -1.*t46354*t47760*t46398;
  t47774 = t46319*t47760*t46399;
  t47775 = t47773 + t47774;
  t47776 = 0.23321*t47775;
  t47777 = t47770 + t47771 + t47772 + t47776;
  t47822 = 0.28121*t47811*t46398;
  t47823 = -0.50321*t46389*t47811*t46398;
  t47824 = -0.50321*t46319*t47811*t46399;
  t47828 = -1.*t46354*t47811*t46398;
  t47829 = t46319*t47811*t46399;
  t47830 = t47828 + t47829;
  t47832 = 0.23321*t47830;
  t47834 = t47822 + t47823 + t47824 + t47832;
  t47714 = -0.28121*t47081*t46319*t14944;
  t47715 = 0.28121*t47679*t46398;
  t47718 = 0.50321*t46389*t47717;
  t47719 = -0.50321*t47702*t46399;
  t47720 = t46354*t47717;
  t47721 = t47702*t46399;
  t47722 = t47720 + t47721;
  t47723 = 0.23321*t47722;
  t47724 = t47714 + t47715 + t47718 + t47719 + t47723;
  t47871 = t47757*t46112;
  t47874 = t47120 + t47871;
  t47876 = t46319*t47874;
  t47877 = -1.*t47081*t46454*t46398;
  t47878 = t47876 + t47877;
  t47894 = -1.*t47874*t46398;
  t47900 = t47135 + t47894;
  t47918 = -1.*t46319*t47874;
  t47919 = t47918 + t47143;
  t47761 = -0.50321*t46354*t47760*t46398;
  t47762 = 0.50321*t46319*t47760*t46399;
  t47763 = t46354*t47760*t46398;
  t47764 = -1.*t46319*t47760*t46399;
  t47765 = t47763 + t47764;
  t47767 = 0.23321*t47765;
  t47768 = t47761 + t47762 + t47767;
  t47812 = -0.50321*t46354*t47811*t46398;
  t47813 = 0.50321*t46319*t47811*t46399;
  t47814 = t46354*t47811*t46398;
  t47815 = -1.*t46319*t47811*t46399;
  t47816 = t47814 + t47815;
  t47817 = 0.23321*t47816;
  t47818 = t47812 + t47813 + t47817;
  t47695 = -0.50321*t46354*t47692;
  t47703 = 0.50321*t47702*t46399;
  t47708 = t46354*t47692;
  t47709 = -1.*t47702*t46399;
  t47710 = t47708 + t47709;
  t47711 = 0.23321*t47710;
  t47712 = t47695 + t47703 + t47711;
  t47881 = -0.50321*t46354*t47878;
  t47903 = 0.50321*t47900*t46399;
  t47905 = t46354*t47878;
  t47908 = -1.*t47900*t46399;
  t47909 = t47905 + t47908;
  t47911 = 0.23321*t47909;
  t47912 = t47881 + t47903 + t47911;
  t47981 = t47874*t46398;
  t47982 = t47155 + t47981;
  p_output1[0]=(t46603 + t46604 + t46611 + t46623 + t46624 + 0.50321*t46389*t46628 - 0.50321*t46399*t46644 + 0.23321*(t46354*t46628 + t46399*t46644))*var2[4] + t46411*var2[5] + t46452*var2[6] + t46544*var2[7] + t46504*var2[8];
  p_output1[1]=t46712 + t46734 + t46411*var2[4] + (t46603 + t46604 + t46611 + t46623 + t46736 + t46737 + t46747)*var2[5] + t46755*var2[6];
  p_output1[2]=t46712 + t46734 + t46452*var2[4] + t46755*var2[5] + (t46611 + t46623 + t46736 + t46737 + t46747 + t46754 + t1009*t46454*t46763)*var2[6];
  p_output1[3]=t46544*var2[4] + t46732*var2[5] + t46732*var2[6] + (t46624 + 0.28121*t46319*t46828 - 0.50321*t46399*t46858 + 0.50321*t46389*t46879 + 0.23321*(t46399*t46858 + t46354*t46879))*var2[7] + t46868*var2[8];
  p_output1[4]=t46504*var2[4] + t46711*var2[5] + t46711*var2[6] + t46868*var2[7] + (0.50321*t46354*t46834 + 0.50321*t46399*t46982 + 0.23321*(-1.*t46354*t46834 - 1.*t46399*t46982))*var2[8];
  p_output1[5]=1.;
  p_output1[6]=t14944*t46171*t46266 - 1.*t1009*t14944*t46270 + 0.15121*t46340 + 0.28121*t46398*t46454 + 0.28121*t46324*t46472 - 0.50321*t46399*t46474 + 0.50321*t46389*t46482 + 0.23321*(t46399*t46474 + t46354*t46482);
  p_output1[7]=-1.*t1009*t46171*t46454 - 1.*t46266*t46270*t46454 + t47021 + t47022 + t47023 + t47024 + t47028;
  p_output1[8]=-1.*t46266*t46425*t46454 + t1009*t46443*t46454 + t47021 + t47022 + t47023 + t47024 + t47028;
  p_output1[9]=0.28121*t14944*t46319 + 0.28121*t46398*t46828 - 0.50321*t46399*t46834 + 0.50321*t46389*t46858 + 0.23321*(t46399*t46834 + t46354*t46858);
  p_output1[10]=0.50321*t46399*t46834 - 0.50321*t46354*t46982 + 0.23321*(-1.*t46399*t46834 + t46354*t46982);
  p_output1[11]=(t47197 + t47201 + t47205 + t47210 + t47211 + 0.50321*t46389*t47214 - 0.50321*t46399*t47218 + 0.23321*(t46354*t47214 + t46399*t47218))*var2[3] + t47192*var2[4] + t47133*var2[5] + t47109*var2[6] + t47164*var2[7] + t47151*var2[8];
  p_output1[12]=t47192*var2[3] + (t14944*t46171*t46266*t47079 - 1.*t1009*t14944*t46270*t47079 + 0.15121*(t1009*t14944*t46112*t47079 + t14944*t45661*t46266*t47079) + t47211 + 0.28121*t46324*t47345 + 0.50321*t46389*t47348 - 0.50321*t46399*t47351 + 0.23321*(t46354*t47348 + t46399*t47351))*var2[4] + t47283*var2[5] + t47287*var2[6] + t47333*var2[7] + t47311*var2[8];
  p_output1[13]=t47133*var2[3] + t47283*var2[4] + (t47197 + t47201 + t47205 + 0.50321*t46319*t46389*t47208 - 0.50321*t46398*t46399*t47208 + 0.23321*(t46319*t46354*t47208 + t46398*t46399*t47208) + t47210)*var2[5] + t47405*var2[6] + t47383*var2[7] + t47373*var2[8];
  p_output1[14]=t47109*var2[3] + t47287*var2[4] + t47405*var2[5] + (t47388 + t46763*t47447 + 0.15121*(t47389 + t46112*t47447) + 0.28121*t46324*t47476 + 0.50321*t46319*t46389*t47476 - 0.50321*t46398*t46399*t47476 + 0.23321*(t46319*t46354*t47476 + t46398*t46399*t47476))*var2[6] + t47466*var2[7] + t47457*var2[8];
  p_output1[15]=t47164*var2[3] + t47333*var2[4] + t47383*var2[5] + t47466*var2[6] + (t47211 + 0.28121*t46319*t47494 - 0.50321*t46399*t47500 + 0.50321*t46389*t47510 + 0.23321*(t46399*t47500 + t46354*t47510))*var2[7] + t47506*var2[8];
  p_output1[16]=t47151*var2[3] + t47311*var2[4] + t47373*var2[5] + t47457*var2[6] + t47506*var2[7] + (0.50321*t46354*t47497 + 0.50321*t46399*t47529 + 0.23321*(-1.*t46354*t47497 - 1.*t46399*t47529))*var2[8];
  p_output1[17]=1.;
  p_output1[18]=t47552;
  p_output1[19]=t47564;
  p_output1[20]=t47575;
  p_output1[21]=t47588;
  p_output1[22]=t47601;
  p_output1[23]=t47610;
  p_output1[24]=t47552*var2[3] + t47564*var2[4] + t47575*var2[5] + t47588*var2[6] + t47601*var2[7] + t47610*var2[8];
  p_output1[25]=t47564*var2[3] + (-1.*t14944*t46171*t46266*t47081 + t1009*t14944*t46270*t47081 + 0.15121*(-1.*t1009*t14944*t46112*t47081 - 1.*t14944*t45661*t46266*t47081) + t47544 + 0.28121*t46324*t47736 + 0.50321*t46389*t47739 - 0.50321*t46399*t47743 + 0.23321*(t46354*t47739 + t46399*t47743))*var2[4] + t47652*var2[5] + t47662*var2[6] + t47724*var2[7] + t47712*var2[8];
  p_output1[26]=t47575*var2[3] + t47652*var2[4] + (0.50321*t46319*t46389*t47138 - 0.50321*t46398*t46399*t47138 + 0.23321*(t46319*t46354*t47138 + t46398*t46399*t47138) + t47540 + t47541 + t47542 + t47543)*var2[5] + t47806*var2[6] + t47777*var2[7] + t47768*var2[8];
  p_output1[27]=t47588*var2[3] + t47662*var2[4] + t47806*var2[5] + (t46763*t47113 + t47790 + 0.15121*(t47116 + t47791) + 0.28121*t46324*t47848 + 0.50321*t46319*t46389*t47848 - 0.50321*t46398*t46399*t47848 + 0.23321*(t46319*t46354*t47848 + t46398*t46399*t47848))*var2[6] + t47834*var2[7] + t47818*var2[8];
  p_output1[28]=t47601*var2[3] + t47724*var2[4] + t47777*var2[5] + t47834*var2[6] + (t47544 + 0.28121*t46319*t47874 - 0.50321*t46399*t47900 + 0.50321*t46389*t47919 + 0.23321*(t46399*t47900 + t46354*t47919))*var2[7] + t47912*var2[8];
  p_output1[29]=t47610*var2[3] + t47712*var2[4] + t47768*var2[5] + t47818*var2[6] + t47912*var2[7] + (0.50321*t46354*t47878 + 0.50321*t46399*t47982 + 0.23321*(-1.*t46354*t47878 - 1.*t46399*t47982))*var2[8];
  p_output1[30]=1.;
  p_output1[31]=-0.28121*t46398*t46454*t47079 + t46171*t47362 + t46270*t47447 + 0.15121*t47450 + 0.28121*t46324*t47494 + 0.50321*t46389*t47497 - 0.50321*t46399*t47529 + 0.23321*(t47502 + t46399*t47529);
  p_output1[32]=-0.28121*t14944*t46398*t47081 + t46171*t46266*t46454*t47081 - 1.*t1009*t46270*t46454*t47081 + 0.15121*t47630 + 0.28121*t46324*t47679 - 0.50321*t46399*t47692 + 0.50321*t46389*t47702 + 0.23321*(t46399*t47692 + t46354*t47702);
  p_output1[33]=t46171*t47089 + t46270*t47757 + 0.28121*t46324*t47760 + 0.50321*t46319*t46389*t47760 - 0.50321*t46398*t46399*t47760 + 0.23321*(t46319*t46354*t47760 + t46398*t46399*t47760) + 0.15121*t47795;
  p_output1[34]=t46443*t47113 + t46425*t47757 + 0.28121*t46324*t47811 + 0.50321*t46319*t46389*t47811 - 0.50321*t46398*t46399*t47811 + 0.23321*(t46319*t46354*t47811 + t46398*t46399*t47811) + 0.15121*t47848;
  p_output1[35]=0.28121*t46319*t46454*t47081 + 0.28121*t46398*t47874 - 0.50321*t46399*t47878 + 0.50321*t46389*t47900 + 0.23321*(t46399*t47878 + t46354*t47900);
  p_output1[36]=0.50321*t46399*t47878 - 0.50321*t46354*t47982 + 0.23321*(-1.*t46399*t47878 + t46354*t47982);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 37, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_impact_velocity_FlFoot_ParallelStance.hh"

namespace ParallelStance
{

void J_impact_velocity_FlFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
