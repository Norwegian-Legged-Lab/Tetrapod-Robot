/*
 * Automatically Generated from Mathematica.
 * Sat 14 May 2022 15:41:30 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t4239;
  double t5498;
  double t6299;
  double t14723;
  double t14727;
  double t22236;
  double t20483;
  double t21249;
  double t21983;
  double t22353;
  double t22016;
  double t22415;
  double t22471;
  double t22945;
  double t23094;
  double t23168;
  double t23525;
  double t23544;
  double t23547;
  double t23564;
  double t23591;
  double t26433;
  double t26528;
  double t26613;
  double t27025;
  double t27292;
  double t8923;
  double t19266;
  double t22733;
  double t22808;
  double t22891;
  double t23233;
  double t23244;
  double t23368;
  double t23372;
  double t23420;
  double t23427;
  double t23463;
  double t27523;
  double t27525;
  double t27530;
  double t23556;
  double t23602;
  double t23604;
  double t23606;
  double t23609;
  double t23610;
  double t23785;
  double t23947;
  double t24276;
  double t24430;
  double t24622;
  double t24751;
  double t27545;
  double t27549;
  double t27293;
  double t27297;
  double t27317;
  double t27343;
  double t27349;
  double t27366;
  double t27378;
  double t27387;
  double t27392;
  double t27476;
  double t27514;
  double t27515;
  double t27561;
  double t27566;
  double t27526;
  double t23382;
  double t27533;
  double t27534;
  double t27535;
  double t27536;
  double t27537;
  double t27538;
  double t27600;
  double t27607;
  double t27608;
  double t27610;
  double t27611;
  double t27546;
  double t24401;
  double t27551;
  double t27552;
  double t27553;
  double t27554;
  double t27555;
  double t27556;
  double t27754;
  double t27778;
  double t27784;
  double t27799;
  double t27811;
  double t27564;
  double t27474;
  double t27567;
  double t27568;
  double t27569;
  double t27570;
  double t27571;
  double t27572;
  double t27909;
  double t27915;
  double t27917;
  double t27919;
  double t27921;
  double t27933;
  double t27936;
  double t27937;
  double t27939;
  double t27940;
  double t27943;
  double t27944;
  double t27945;
  double t27948;
  double t27950;
  double t27951;
  double t27952;
  double t27953;
  double t27954;
  double t27956;
  double t27958;
  double t27959;
  double t27976;
  double t28033;
  double t27955;
  double t27982;
  double t27983;
  double t28022;
  double t28047;
  double t28051;
  double t28052;
  double t28053;
  double t28061;
  double t28129;
  double t28233;
  double t28234;
  double t28235;
  double t28453;
  double t28458;
  double t28459;
  double t28460;
  double t28461;
  double t29110;
  double t29578;
  double t29579;
  double t29584;
  double t29586;
  double t29588;
  double t29589;
  double t29591;
  double t29597;
  double t29600;
  double t29601;
  double t29607;
  double t29608;
  double t29610;
  double t29611;
  double t29612;
  double t29614;
  double t29615;
  double t29647;
  double t29747;
  double t28474;
  double t29776;
  double t27602;
  double t27604;
  double t29777;
  double t29780;
  double t29787;
  double t29837;
  double t29838;
  double t29839;
  double t29805;
  double t29596;
  double t29809;
  double t27759;
  double t27767;
  double t29811;
  double t29812;
  double t29816;
  double t29859;
  double t29863;
  double t29866;
  double t29823;
  double t29613;
  double t29825;
  double t27910;
  double t27911;
  double t29828;
  double t29829;
  double t29831;
  double t29928;
  double t29931;
  double t29940;
  double t29973;
  double t29980;
  double t29993;
  double t29997;
  double t29999;
  double t30010;
  double t30015;
  double t30037;
  double t30007;
  double t30073;
  double t30075;
  double t28063;
  double t28065;
  double t30079;
  double t30086;
  double t30094;
  double t30640;
  double t30724;
  double t30734;
  double t31277;
  double t31288;
  double t31297;
  double t31304;
  double t31307;
  double t31308;
  double t31298;
  double t31315;
  double t31318;
  double t31321;
  double t31323;
  double t31325;
  double t31330;
  double t31331;
  double t31385;
  double t31390;
  double t31392;
  double t31383;
  double t31384;
  double t31412;
  double t31440;
  double t31447;
  double t31527;
  double t31528;
  double t31532;
  double t31474;
  double t31526;
  double t31538;
  double t31542;
  double t31543;
  double t31346;
  double t31335;
  double t31400;
  double t31459;
  double t31535;
  double t31567;
  double t31763;
  double t31869;
  double t31895;
  double t32198;
  double t32242;
  double t32630;
  double t32739;
  double t32741;
  double t32863;
  double t32841;
  double t33569;
  double t33604;
  double t33605;
  double t33174;
  double t33284;
  double t33320;
  double t33634;
  double t33635;
  double t33636;
  double t33638;
  double t33640;
  double t33644;
  double t33645;
  double t33650;
  double t33646;
  double t33791;
  double t33794;
  double t33806;
  double t33790;
  double t33808;
  double t33812;
  double t33813;
  double t33816;
  double t33821;
  double t33824;
  double t33826;
  double t33841;
  double t33842;
  double t33844;
  double t33855;
  double t33856;
  double t33858;
  double t33859;
  double t33860;
  double t33862;
  double t33863;
  double t33864;
  double t33867;
  double t33869;
  double t33873;
  double t33870;
  double t33888;
  double t33889;
  double t33890;
  double t33887;
  double t33891;
  double t33892;
  double t33893;
  double t33910;
  double t33974;
  double t33978;
  double t33979;
  double t34035;
  double t34040;
  double t34041;
  double t34059;
  double t34162;
  double t34170;
  double t34060;
  double t34062;
  double t34067;
  double t34073;
  double t34078;
  double t34180;
  double t34181;
  double t34175;
  double t34189;
  double t34206;
  double t34208;
  double t34210;
  double t34205;
  double t34211;
  double t34212;
  double t34213;
  double t34214;
  double t34220;
  double t34222;
  double t34224;
  double t34241;
  double t34242;
  double t34243;
  double t34261;
  double t34262;
  double t34253;
  double t34255;
  double t34256;
  double t34258;
  double t34259;
  double t34260;
  double t34265;
  double t34266;
  double t34263;
  double t34283;
  double t34314;
  double t34315;
  double t34317;
  double t34313;
  double t34319;
  double t34320;
  double t34321;
  double t34322;
  double t34328;
  double t34329;
  double t34330;
  double t34340;
  double t34341;
  double t34342;
  t4239 = Cos(var1[9]);
  t5498 = -1.*t4239;
  t6299 = 1. + t5498;
  t14723 = Sin(var1[9]);
  t14727 = 0.15121*t14723;
  t22236 = Cos(var1[3]);
  t20483 = Cos(var1[5]);
  t21249 = Sin(var1[3]);
  t21983 = Sin(var1[4]);
  t22353 = Sin(var1[5]);
  t22016 = t20483*t21249*t21983;
  t22415 = t22236*t22353;
  t22471 = t22016 + t22415;
  t22945 = t22236*t20483;
  t23094 = -1.*t21249*t21983*t22353;
  t23168 = t22945 + t23094;
  t23525 = Cos(var1[12]);
  t23544 = -1.*t23525;
  t23547 = 1. + t23544;
  t23564 = Sin(var1[12]);
  t23591 = -0.15121*t23564;
  t26433 = Cos(var1[15]);
  t26528 = -1.*t26433;
  t26613 = 1. + t26528;
  t27025 = -0.15121*t26613;
  t27292 = Sin(var1[15]);
  t8923 = -0.15121*t6299;
  t19266 = t8923 + t14727;
  t22733 = t19266*t22471;
  t22808 = 0.15121*t6299;
  t22891 = t22808 + t14727;
  t23233 = t22891*t23168;
  t23244 = -1.*t14723*t22471;
  t23368 = t4239*t23168;
  t23372 = t23244 + t23368;
  t23420 = t4239*t22471;
  t23427 = t14723*t23168;
  t23463 = t23420 + t23427;
  t27523 = Cos(var1[4]);
  t27525 = Sin(var1[10]);
  t27530 = Cos(var1[10]);
  t23556 = 0.15121*t23547;
  t23602 = t23556 + t23591;
  t23604 = t23602*t22471;
  t23606 = -0.15121*t23547;
  t23609 = t23606 + t23591;
  t23610 = t23609*t23168;
  t23785 = -1.*t23564*t22471;
  t23947 = t23525*t23168;
  t24276 = t23785 + t23947;
  t24430 = t23525*t22471;
  t24622 = t23564*t23168;
  t24751 = t24430 + t24622;
  t27545 = Sin(var1[13]);
  t27549 = Cos(var1[13]);
  t27293 = -0.15121*t27292;
  t27297 = t27025 + t27293;
  t27317 = t27297*t22471;
  t27343 = 0.15121*t27292;
  t27349 = t27025 + t27343;
  t27366 = t27349*t23168;
  t27378 = -1.*t27292*t22471;
  t27387 = t26433*t23168;
  t27392 = t27378 + t27387;
  t27476 = t26433*t22471;
  t27514 = t27292*t23168;
  t27515 = t27476 + t27514;
  t27561 = Sin(var1[16]);
  t27566 = Cos(var1[16]);
  t27526 = -0.28121*t27523*t27525*t21249;
  t23382 = 0.15121*t23372;
  t27533 = -1.*t27530;
  t27534 = 1. + t27533;
  t27535 = -0.28121*t27534*t23463;
  t27536 = -1.*t27523*t27525*t21249;
  t27537 = t27530*t23463;
  t27538 = t27536 + t27537;
  t27600 = Cos(var1[11]);
  t27607 = Sin(var1[11]);
  t27608 = -1.*t27530*t27523*t21249;
  t27610 = -1.*t27525*t23463;
  t27611 = t27608 + t27610;
  t27546 = -0.28121*t27523*t27545*t21249;
  t24401 = -0.15121*t24276;
  t27551 = -1.*t27549;
  t27552 = 1. + t27551;
  t27553 = 0.28121*t27552*t24751;
  t27554 = t27523*t27545*t21249;
  t27555 = t27549*t24751;
  t27556 = t27554 + t27555;
  t27754 = Cos(var1[14]);
  t27778 = Sin(var1[14]);
  t27784 = -1.*t27549*t27523*t21249;
  t27799 = t27545*t24751;
  t27811 = t27784 + t27799;
  t27564 = -0.28121*t27523*t27561*t21249;
  t27474 = -0.15121*t27392;
  t27567 = -1.*t27566;
  t27568 = 1. + t27567;
  t27569 = -0.28121*t27568*t27515;
  t27570 = -1.*t27523*t27561*t21249;
  t27571 = t27566*t27515;
  t27572 = t27570 + t27571;
  t27909 = Cos(var1[17]);
  t27915 = Sin(var1[17]);
  t27917 = -1.*t27566*t27523*t21249;
  t27919 = -1.*t27561*t27515;
  t27921 = t27917 + t27919;
  t27933 = Cos(var1[6]);
  t27936 = -1.*t27933;
  t27937 = 1. + t27936;
  t27939 = 0.15121*t27937;
  t27940 = Sin(var1[6]);
  t27943 = -0.15121*t27940;
  t27944 = t27939 + t27943;
  t27945 = t23168*t27944;
  t27948 = 0.15121*t27940;
  t27950 = t27939 + t27948;
  t27951 = t22471*t27950;
  t27952 = t27933*t23168;
  t27953 = -1.*t22471*t27940;
  t27954 = t27952 + t27953;
  t27956 = t27933*t22471;
  t27958 = t23168*t27940;
  t27959 = t27956 + t27958;
  t27976 = Cos(var1[7]);
  t28033 = Sin(var1[7]);
  t27955 = 0.15121*t27954;
  t27982 = -1.*t27976;
  t27983 = 1. + t27982;
  t28022 = 0.28121*t27983*t27959;
  t28047 = -0.28121*t27523*t21249*t28033;
  t28051 = t27976*t27959;
  t28052 = t27523*t21249*t28033;
  t28053 = t28051 + t28052;
  t28061 = Cos(var1[8]);
  t28129 = -1.*t27523*t27976*t21249;
  t28233 = t27959*t28033;
  t28234 = t28129 + t28233;
  t28235 = Sin(var1[8]);
  t28453 = -1.*t22236*t27523*t20483*t19266;
  t28458 = t22236*t27523*t22891*t22353;
  t28459 = t22236*t27523*t20483*t14723;
  t28460 = t4239*t22236*t27523*t22353;
  t28461 = t28459 + t28460;
  t29110 = -1.*t4239*t22236*t27523*t20483;
  t29578 = t22236*t27523*t14723*t22353;
  t29579 = t29110 + t29578;
  t29584 = -1.*t22236*t27523*t20483*t23602;
  t29586 = t22236*t27523*t23609*t22353;
  t29588 = t22236*t27523*t20483*t23564;
  t29589 = t23525*t22236*t27523*t22353;
  t29591 = t29588 + t29589;
  t29597 = -1.*t23525*t22236*t27523*t20483;
  t29600 = t22236*t27523*t23564*t22353;
  t29601 = t29597 + t29600;
  t29607 = -1.*t22236*t27523*t20483*t27297;
  t29608 = t22236*t27523*t27349*t22353;
  t29610 = t22236*t27523*t20483*t27292;
  t29611 = t26433*t22236*t27523*t22353;
  t29612 = t29610 + t29611;
  t29614 = -1.*t26433*t22236*t27523*t20483;
  t29615 = t22236*t27523*t27292*t22353;
  t29647 = t29614 + t29615;
  t29747 = -0.28121*t22236*t27525*t21983;
  t28474 = 0.15121*t28461;
  t29776 = -0.28121*t27534*t29579;
  t27602 = -1.*t27600;
  t27604 = 1. + t27602;
  t29777 = -1.*t22236*t27525*t21983;
  t29780 = t27530*t29579;
  t29787 = t29777 + t29780;
  t29837 = -1.*t27530*t22236*t21983;
  t29838 = -1.*t27525*t29579;
  t29839 = t29837 + t29838;
  t29805 = -0.28121*t22236*t27545*t21983;
  t29596 = -0.15121*t29591;
  t29809 = 0.28121*t27552*t29601;
  t27759 = -1.*t27754;
  t27767 = 1. + t27759;
  t29811 = t22236*t27545*t21983;
  t29812 = t27549*t29601;
  t29816 = t29811 + t29812;
  t29859 = -1.*t27549*t22236*t21983;
  t29863 = t27545*t29601;
  t29866 = t29859 + t29863;
  t29823 = -0.28121*t22236*t27561*t21983;
  t29613 = -0.15121*t29612;
  t29825 = -0.28121*t27568*t29647;
  t27910 = -1.*t27909;
  t27911 = 1. + t27910;
  t29828 = -1.*t22236*t27561*t21983;
  t29829 = t27566*t29647;
  t29831 = t29828 + t29829;
  t29928 = -1.*t27566*t22236*t21983;
  t29931 = -1.*t27561*t29647;
  t29940 = t29928 + t29931;
  t29973 = t22236*t27523*t22353*t27944;
  t29980 = -1.*t22236*t27523*t20483*t27950;
  t29993 = t22236*t27523*t27933*t22353;
  t29997 = t22236*t27523*t20483*t27940;
  t29999 = t29993 + t29997;
  t30010 = -1.*t22236*t27523*t20483*t27933;
  t30015 = t22236*t27523*t22353*t27940;
  t30037 = t30010 + t30015;
  t30007 = 0.15121*t29999;
  t30073 = 0.28121*t27983*t30037;
  t30075 = -0.28121*t22236*t21983*t28033;
  t28063 = -1.*t28061;
  t28065 = 1. + t28063;
  t30079 = t27976*t30037;
  t30086 = t22236*t21983*t28033;
  t30094 = t30079 + t30086;
  t30640 = -1.*t22236*t27976*t21983;
  t30724 = t30037*t28033;
  t30734 = t30640 + t30724;
  t31277 = t22236*t20483*t21983;
  t31288 = -1.*t21249*t22353;
  t31297 = t31277 + t31288;
  t31304 = t20483*t21249;
  t31307 = t22236*t21983*t22353;
  t31308 = t31304 + t31307;
  t31298 = t22891*t31297;
  t31315 = t19266*t31308;
  t31318 = t14723*t31297;
  t31321 = t4239*t31308;
  t31323 = t31318 + t31321;
  t31325 = t4239*t31297;
  t31330 = -1.*t14723*t31308;
  t31331 = t31325 + t31330;
  t31385 = t23564*t31297;
  t31390 = t23525*t31308;
  t31392 = t31385 + t31390;
  t31383 = t23609*t31297;
  t31384 = t23602*t31308;
  t31412 = t23525*t31297;
  t31440 = -1.*t23564*t31308;
  t31447 = t31412 + t31440;
  t31527 = t27292*t31297;
  t31528 = t26433*t31308;
  t31532 = t31527 + t31528;
  t31474 = t27349*t31297;
  t31526 = t27297*t31308;
  t31538 = t26433*t31297;
  t31542 = -1.*t27292*t31308;
  t31543 = t31538 + t31542;
  t31346 = -0.28121*t27534*t31323;
  t31335 = 0.15121*t31331;
  t31400 = 0.28121*t27552*t31392;
  t31459 = -0.15121*t31447;
  t31535 = -0.28121*t27568*t31532;
  t31567 = -0.15121*t31543;
  t31763 = t31297*t27944;
  t31869 = t31308*t27950;
  t31895 = t27933*t31308;
  t32198 = t31297*t27940;
  t32242 = t31895 + t32198;
  t32630 = t27933*t31297;
  t32739 = -1.*t31308*t27940;
  t32741 = t32630 + t32739;
  t32863 = 0.28121*t27983*t32242;
  t32841 = 0.15121*t32741;
  t33569 = -1.*t22236*t20483*t21983;
  t33604 = t21249*t22353;
  t33605 = t33569 + t33604;
  t33174 = -0.15121*t27933;
  t33284 = t33174 + t27948;
  t33320 = t31308*t33284;
  t33634 = 0.15121*t27933;
  t33635 = t33634 + t27948;
  t33636 = t33605*t33635;
  t33638 = -1.*t33605*t27940;
  t33640 = t31895 + t33638;
  t33644 = -1.*t27933*t33605;
  t33645 = t33644 + t32739;
  t33650 = 0.28121*t27983*t33640;
  t33646 = 0.15121*t33645;
  t33791 = t27933*t33605;
  t33794 = t31308*t27940;
  t33806 = t33791 + t33794;
  t33790 = 0.28121*t22236*t27523*t27976;
  t33808 = 0.28121*t33806*t28033;
  t33812 = -1.*t22236*t27523*t27976;
  t33813 = -1.*t33806*t28033;
  t33816 = t33812 + t33813;
  t33821 = t27976*t33806;
  t33824 = -1.*t22236*t27523*t28033;
  t33826 = t33821 + t33824;
  t33841 = t22236*t27523*t27976;
  t33842 = t33806*t28033;
  t33844 = t33841 + t33842;
  t33855 = 0.15121*t4239;
  t33856 = -0.15121*t14723;
  t33858 = t33855 + t33856;
  t33859 = t33858*t33605;
  t33860 = t33855 + t14727;
  t33862 = t33860*t31308;
  t33863 = -1.*t14723*t33605;
  t33864 = t33863 + t31321;
  t33867 = -1.*t4239*t33605;
  t33869 = t33867 + t31330;
  t33873 = -0.28121*t27534*t33864;
  t33870 = 0.15121*t33869;
  t33888 = t4239*t33605;
  t33889 = t14723*t31308;
  t33890 = t33888 + t33889;
  t33887 = 0.28121*t27530*t22236*t27523;
  t33891 = -0.28121*t27525*t33890;
  t33892 = t27530*t22236*t27523;
  t33893 = -1.*t27525*t33890;
  t33910 = t33892 + t33893;
  t33974 = -1.*t22236*t27523*t27525;
  t33978 = -1.*t27530*t33890;
  t33979 = t33974 + t33978;
  t34035 = t22236*t27523*t27525;
  t34040 = t27530*t33890;
  t34041 = t34035 + t34040;
  t34059 = -0.15121*t23525;
  t34162 = -1.*t23564*t33605;
  t34170 = t34162 + t31390;
  t34060 = 0.15121*t23564;
  t34062 = t34059 + t34060;
  t34067 = t34062*t33605;
  t34073 = t34059 + t23591;
  t34078 = t34073*t31308;
  t34180 = -1.*t23525*t33605;
  t34181 = t34180 + t31440;
  t34175 = 0.28121*t27552*t34170;
  t34189 = -0.15121*t34181;
  t34206 = t23525*t33605;
  t34208 = t23564*t31308;
  t34210 = t34206 + t34208;
  t34205 = 0.28121*t27549*t22236*t27523;
  t34211 = 0.28121*t27545*t34210;
  t34212 = -1.*t27549*t22236*t27523;
  t34213 = -1.*t27545*t34210;
  t34214 = t34212 + t34213;
  t34220 = -1.*t22236*t27523*t27545;
  t34222 = t27549*t34210;
  t34224 = t34220 + t34222;
  t34241 = t27549*t22236*t27523;
  t34242 = t27545*t34210;
  t34243 = t34241 + t34242;
  t34261 = -1.*t27292*t33605;
  t34262 = t34261 + t31528;
  t34253 = -0.15121*t26433;
  t34255 = t34253 + t27293;
  t34256 = t34255*t33605;
  t34258 = 0.15121*t26433;
  t34259 = t34258 + t27293;
  t34260 = t34259*t31308;
  t34265 = -1.*t26433*t33605;
  t34266 = t34265 + t31542;
  t34263 = -0.28121*t27568*t34262;
  t34283 = -0.15121*t34266;
  t34314 = t26433*t33605;
  t34315 = t27292*t31308;
  t34317 = t34314 + t34315;
  t34313 = 0.28121*t27566*t22236*t27523;
  t34319 = -0.28121*t27561*t34317;
  t34320 = t27566*t22236*t27523;
  t34321 = -1.*t27561*t34317;
  t34322 = t34320 + t34321;
  t34328 = -1.*t22236*t27523*t27561;
  t34329 = -1.*t27566*t34317;
  t34330 = t34328 + t34329;
  t34340 = t22236*t27523*t27561;
  t34341 = t27566*t34317;
  t34342 = t34340 + t34341;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=-210.915;
  p_output1[3]=-11.5758*(t22733 + t23233 + t23382 - 0.15121*t23463) - 11.5758*(t23604 + t23610 + t24401 + 0.15121*t24751) - 11.5758*(t27317 + t27366 + t27474 - 0.15121*t27515) - 13.6359*(t22733 + t23233 + 0.18121*t23372 + t27526 + t27535 - 0.28121*t27538) - 13.6359*(t23604 + t23610 - 0.18121*t24276 + t27546 + t27553 + 0.28121*t27556) - 13.6359*(t27317 + t27366 - 0.18121*t27392 + t27564 + t27569 - 0.28121*t27572) - 2.7468000000000004*(t22733 + t23233 + t23382 + t27526 + t27535 - 0.50321*t27538*t27604 - 0.50321*t27607*t27611 - 0.50321*(t27538*t27600 - 1.*t27607*t27611)) - 2.7468000000000004*(t23604 + t23610 + t24401 + t27546 + t27553 + 0.50321*t27556*t27767 - 0.50321*t27778*t27811 + 0.50321*(t27556*t27754 + t27778*t27811)) - 2.7468000000000004*(t27317 + t27366 + t27474 + t27564 + t27569 - 0.50321*t27572*t27911 - 0.50321*t27915*t27921 - 0.50321*(t27572*t27909 - 1.*t27915*t27921)) - 11.5758*(t27945 + t27951 + t27955 + 0.15121*t27959) - 13.6359*(t27945 + t27951 + 0.18121*t27954 + t28022 + t28047 + 0.28121*t28053) - 2.7468000000000004*(t27945 + t27951 + t27955 + t28022 + t28047 + 0.50321*t28053*t28065 - 0.50321*t28234*t28235 + 0.50321*(t28053*t28061 + t28234*t28235));
  p_output1[4]=-11.5758*(t28453 + t28458 + t28474 - 0.15121*t29579) - 11.5758*(t29584 + t29586 + t29596 + 0.15121*t29601) - 11.5758*(t29607 + t29608 + t29613 - 0.15121*t29647) - 13.6359*(t28453 + t28458 + 0.18121*t28461 + t29747 + t29776 - 0.28121*t29787) - 13.6359*(t29584 + t29586 - 0.18121*t29591 + t29805 + t29809 + 0.28121*t29816) - 13.6359*(t29607 + t29608 - 0.18121*t29612 + t29823 + t29825 - 0.28121*t29831) - 2.7468000000000004*(t28453 + t28458 + t28474 + t29747 + t29776 - 0.50321*t27604*t29787 - 0.50321*t27607*t29839 - 0.50321*(t27600*t29787 - 1.*t27607*t29839)) - 2.7468000000000004*(t29584 + t29586 + t29596 + t29805 + t29809 + 0.50321*t27767*t29816 - 0.50321*t27778*t29866 + 0.50321*(t27754*t29816 + t27778*t29866)) - 2.7468000000000004*(t29607 + t29608 + t29613 + t29823 + t29825 - 0.50321*t27911*t29831 - 0.50321*t27915*t29940 - 0.50321*(t27909*t29831 - 1.*t27915*t29940)) - 11.5758*(t29973 + t29980 + t30007 + 0.15121*t30037) - 13.6359*(t29973 + t29980 + 0.18121*t29999 + t30073 + t30075 + 0.28121*t30094) - 2.7468000000000004*(t29973 + t29980 + t30007 + t30073 + t30075 + 0.50321*t28065*t30094 - 0.50321*t28235*t30734 + 0.50321*(t28061*t30094 + t28235*t30734));
  p_output1[5]=-11.5758*(t31298 + t31315 - 0.15121*t31323 + t31335) - 13.6359*(t31298 + t31315 - 0.28121*t27530*t31323 + 0.18121*t31331 + t31346) - 2.7468000000000004*(t31298 + t31315 - 0.50321*t27530*t27604*t31323 + 0.50321*t27525*t27607*t31323 - 0.50321*(t27530*t27600*t31323 + t27525*t27607*t31323) + t31335 + t31346) - 13.6359*(t31383 + t31384 + 0.28121*t27549*t31392 + t31400 - 0.18121*t31447) - 11.5758*(t31383 + t31384 + 0.15121*t31392 + t31459) - 2.7468000000000004*(t31383 + t31384 + 0.50321*t27549*t27767*t31392 - 0.50321*t27545*t27778*t31392 + 0.50321*(t27549*t27754*t31392 + t27545*t27778*t31392) + t31400 + t31459) - 13.6359*(t31474 + t31526 - 0.28121*t27566*t31532 + t31535 - 0.18121*t31543) - 11.5758*(t31474 + t31526 - 0.15121*t31532 + t31567) - 2.7468000000000004*(t31474 + t31526 - 0.50321*t27566*t27911*t31532 + 0.50321*t27561*t27915*t31532 - 0.50321*(t27566*t27909*t31532 + t27561*t27915*t31532) + t31535 + t31567) - 11.5758*(t31763 + t31869 + 0.15121*t32242 + t32841) - 13.6359*(t31763 + t31869 + 0.28121*t27976*t32242 + 0.18121*t32741 + t32863) - 2.7468000000000004*(t31763 + t31869 + 0.50321*t27976*t28065*t32242 - 0.50321*t28033*t28235*t32242 + 0.50321*(t27976*t28061*t32242 + t28033*t28235*t32242) + t32841 + t32863);
  p_output1[6]=-11.5758*(t33320 + t33636 + 0.15121*t33640 + t33646) - 13.6359*(t33320 + t33636 + 0.28121*t27976*t33640 + 0.18121*t33645 + t33650) - 2.7468000000000004*(t33320 + t33636 + 0.50321*t27976*t28065*t33640 - 0.50321*t28033*t28235*t33640 + 0.50321*(t27976*t28061*t33640 + t28033*t28235*t33640) + t33646 + t33650);
  p_output1[7]=-13.6359*(t33790 + t33808 + 0.28121*t33816) - 2.7468000000000004*(t33790 + t33808 + 0.50321*t28065*t33816 - 0.50321*t28235*t33826 + 0.50321*(t28061*t33816 + t28235*t33826));
  p_output1[8]=-2.7468000000000004*(0.50321*t28235*t33826 - 0.50321*t28061*t33844 + 0.50321*(-1.*t28235*t33826 + t28061*t33844));
  p_output1[9]=-11.5758*(t33859 + t33862 - 0.15121*t33864 + t33870) - 13.6359*(t33859 + t33862 - 0.28121*t27530*t33864 + 0.18121*t33869 + t33873) - 2.7468000000000004*(t33859 + t33862 - 0.50321*t27530*t27604*t33864 + 0.50321*t27525*t27607*t33864 - 0.50321*(t27530*t27600*t33864 + t27525*t27607*t33864) + t33870 + t33873);
  p_output1[10]=-13.6359*(t33887 + t33891 - 0.28121*t33910) - 2.7468000000000004*(t33887 + t33891 - 0.50321*t27604*t33910 - 0.50321*t27607*t33979 - 0.50321*(t27600*t33910 - 1.*t27607*t33979));
  p_output1[11]=-2.7468000000000004*(-0.50321*t27600*t33910 - 0.50321*t27607*t34041 - 0.50321*(-1.*t27600*t33910 - 1.*t27607*t34041));
  p_output1[12]=-13.6359*(t34067 + t34078 + 0.28121*t27549*t34170 + t34175 - 0.18121*t34181) - 11.5758*(t34067 + t34078 + 0.15121*t34170 + t34189) - 2.7468000000000004*(t34067 + t34078 + 0.50321*t27549*t27767*t34170 - 0.50321*t27545*t27778*t34170 + 0.50321*(t27549*t27754*t34170 + t27545*t27778*t34170) + t34175 + t34189);
  p_output1[13]=-13.6359*(t34205 + t34211 + 0.28121*t34214) - 2.7468000000000004*(t34205 + t34211 + 0.50321*t27767*t34214 - 0.50321*t27778*t34224 + 0.50321*(t27754*t34214 + t27778*t34224));
  p_output1[14]=-2.7468000000000004*(0.50321*t27778*t34224 - 0.50321*t27754*t34243 + 0.50321*(-1.*t27778*t34224 + t27754*t34243));
  p_output1[15]=-13.6359*(t34256 + t34260 - 0.28121*t27566*t34262 + t34263 - 0.18121*t34266) - 11.5758*(t34256 + t34260 - 0.15121*t34262 + t34283) - 2.7468000000000004*(t34256 + t34260 - 0.50321*t27566*t27911*t34262 + 0.50321*t27561*t27915*t34262 - 0.50321*(t27566*t27909*t34262 + t27561*t27915*t34262) + t34263 + t34283);
  p_output1[16]=-13.6359*(t34313 + t34319 - 0.28121*t34322) - 2.7468000000000004*(t34313 + t34319 - 0.50321*t27911*t34322 - 0.50321*t27915*t34330 - 0.50321*(t27909*t34322 - 1.*t27915*t34330));
  p_output1[17]=-2.7468000000000004*(-0.50321*t27909*t34322 - 0.50321*t27915*t34342 - 0.50321*(-1.*t27909*t34322 - 1.*t27915*t34342));
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ge_vec_ASTRo.hh"

namespace DiagonalStance
{

void Ge_vec_ASTRo_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
