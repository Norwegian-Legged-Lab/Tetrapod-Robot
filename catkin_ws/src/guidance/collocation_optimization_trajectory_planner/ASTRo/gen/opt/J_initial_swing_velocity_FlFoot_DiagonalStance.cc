/*
 * Automatically Generated from Mathematica.
 * Thu 2 Jun 2022 14:53:30 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t6499;
  double t7020;
  double t8379;
  double t8484;
  double t8678;
  double t8808;
  double t9016;
  double t194;
  double t9068;
  double t9082;
  double t9093;
  double t9100;
  double t9122;
  double t9278;
  double t9279;
  double t9044;
  double t9076;
  double t9078;
  double t9120;
  double t9124;
  double t9128;
  double t9130;
  double t9132;
  double t9134;
  double t9242;
  double t9275;
  double t9281;
  double t9284;
  double t9287;
  double t9302;
  double t9305;
  double t10463;
  double t10464;
  double t10466;
  double t10373;
  double t10462;
  double t10467;
  double t10505;
  double t10555;
  double t10560;
  double t10569;
  double t10798;
  double t10805;
  double t10807;
  double t8824;
  double t8830;
  double t9046;
  double t10986;
  double t10987;
  double t10991;
  double t10998;
  double t11004;
  double t11006;
  double t11018;
  double t11026;
  double t11027;
  double t11133;
  double t11137;
  double t11172;
  double t8835;
  double t9057;
  double t9311;
  double t10903;
  double t10905;
  double t10910;
  double t10914;
  double t10918;
  double t10920;
  double t10992;
  double t9456;
  double t9593;
  double t9934;
  double t10000;
  double t11438;
  double t11495;
  double t11522;
  double t11524;
  double t11544;
  double t11556;
  double t11176;
  double t11213;
  double t11217;
  double t11218;
  double t11225;
  double t11231;
  double t11240;
  double t11244;
  double t11245;
  double t11333;
  double t11349;
  double t11362;
  double t11373;
  double t11376;
  double t11408;
  double t11417;
  double t11434;
  double t9866;
  double t10224;
  double t10232;
  double t11569;
  double t11566;
  double t11571;
  double t10792;
  double t10796;
  double t10812;
  double t10814;
  double t10820;
  double t10823;
  double t10881;
  double t10889;
  double t10896;
  double t11618;
  double t11619;
  double t11620;
  double t11632;
  double t11691;
  double t11743;
  double t11757;
  double t11759;
  double t10996;
  double t11791;
  double t11793;
  double t10522;
  double t10580;
  double t10585;
  double t10597;
  double t10633;
  double t10789;
  double t10790;
  double t11754;
  double t11763;
  double t11765;
  double t11766;
  double t11767;
  double t11769;
  double t11778;
  double t11828;
  double t11829;
  double t11831;
  double t11860;
  double t11861;
  double t11862;
  double t11863;
  double t11864;
  double t11865;
  double t11866;
  double t11867;
  double t12006;
  double t11999;
  double t12001;
  double t12007;
  double t12008;
  double t12011;
  double t12013;
  double t12015;
  double t12018;
  double t12019;
  double t12025;
  double t12052;
  double t12053;
  double t12054;
  double t12057;
  double t12059;
  double t12030;
  double t12111;
  double t12130;
  double t12146;
  double t12097;
  double t12184;
  double t12186;
  double t12190;
  double t12193;
  double t12194;
  double t12206;
  double t12207;
  double t12208;
  double t12229;
  double t12230;
  double t12231;
  double t12236;
  double t12239;
  double t12240;
  double t12243;
  double t12246;
  double t12248;
  double t12256;
  double t12259;
  double t12260;
  double t12262;
  double t12263;
  double t12265;
  double t12272;
  double t12273;
  double t12274;
  double t12277;
  double t12278;
  double t12279;
  double t12283;
  double t12287;
  double t12294;
  double t12315;
  double t12321;
  double t12323;
  double t12324;
  double t12325;
  double t12326;
  double t12327;
  double t12328;
  double t12329;
  double t12330;
  double t12331;
  double t12332;
  double t12333;
  double t12334;
  double t12346;
  double t12347;
  double t12348;
  double t12343;
  double t12349;
  double t12350;
  double t12352;
  double t12353;
  double t12354;
  double t12364;
  double t12365;
  double t12367;
  double t12221;
  double t12222;
  double t12223;
  double t12224;
  double t12227;
  double t12228;
  double t12232;
  double t12234;
  double t12241;
  double t12249;
  double t12250;
  double t12251;
  double t12252;
  double t12253;
  double t12254;
  double t12276;
  double t12386;
  double t12387;
  double t12388;
  double t12390;
  double t12391;
  double t12393;
  double t12394;
  double t12405;
  double t12406;
  double t12407;
  double t12408;
  double t12409;
  double t12410;
  double t12313;
  double t12314;
  double t12335;
  double t12055;
  double t12056;
  double t12064;
  double t12070;
  double t12071;
  double t12073;
  double t12075;
  double t12077;
  double t12078;
  double t12080;
  double t12087;
  double t12088;
  double t12090;
  double t12269;
  double t12437;
  double t12438;
  double t12261;
  double t12267;
  double t12268;
  double t12270;
  double t12271;
  double t12275;
  double t12466;
  double t12467;
  double t12468;
  double t12469;
  double t12470;
  double t12339;
  double t12340;
  double t12341;
  double t12010;
  double t12016;
  double t12026;
  double t12027;
  double t12028;
  double t12034;
  double t12035;
  double t12036;
  double t12037;
  double t12038;
  double t12042;
  double t12047;
  double t12049;
  double t12432;
  double t12433;
  double t12434;
  double t12435;
  double t12436;
  double t12439;
  double t12440;
  double t12441;
  double t12442;
  double t12443;
  double t12444;
  double t12445;
  double t12446;
  double t11605;
  double t12503;
  double t12504;
  double t12421;
  double t12422;
  double t12423;
  double t12424;
  double t12425;
  double t12426;
  double t12427;
  double t12428;
  double t12486;
  double t12487;
  double t12488;
  double t12489;
  double t12490;
  double t12491;
  double t12492;
  double t12493;
  double t12204;
  double t12205;
  double t12211;
  double t12212;
  double t12213;
  double t12214;
  double t12215;
  double t12217;
  double t12219;
  double t12362;
  double t12363;
  double t12369;
  double t12370;
  double t12371;
  double t12372;
  double t12373;
  double t12375;
  double t12377;
  double t12528;
  double t12529;
  double t12530;
  double t12531;
  double t12532;
  double t12533;
  double t12535;
  double t12536;
  double t12561;
  double t12563;
  double t12411;
  double t12412;
  double t12413;
  double t12416;
  double t12417;
  double t12418;
  double t12419;
  double t12471;
  double t12472;
  double t12473;
  double t12474;
  double t12475;
  double t12477;
  double t12484;
  double t12189;
  double t12195;
  double t12196;
  double t12199;
  double t12200;
  double t12201;
  double t12202;
  double t12351;
  double t12355;
  double t12356;
  double t12357;
  double t12358;
  double t12359;
  double t12360;
  double t12534;
  double t12537;
  double t12541;
  double t12542;
  double t12546;
  double t12547;
  double t12554;
  double t12675;
  double t12676;
  double t12677;
  double t12720;
  double t12721;
  double t12724;
  double t12736;
  double t12737;
  double t12740;
  double t12741;
  double t12742;
  double t12743;
  double t12744;
  double t12747;
  double t12751;
  double t12759;
  double t12761;
  double t12775;
  double t12780;
  double t12796;
  double t12803;
  double t12809;
  double t12812;
  double t12814;
  double t12826;
  double t12884;
  double t12889;
  double t12902;
  double t12916;
  double t12920;
  double t12922;
  double t12923;
  double t12827;
  double t12828;
  double t12836;
  double t12851;
  double t12853;
  double t12867;
  double t12869;
  double t12872;
  double t12876;
  double t12698;
  double t12699;
  double t12701;
  double t12704;
  double t12706;
  double t12707;
  double t12708;
  double t12710;
  double t12712;
  double t12716;
  double t12717;
  double t12718;
  double t12686;
  double t12687;
  double t12688;
  double t12689;
  double t12690;
  double t12691;
  double t12692;
  double t12693;
  double t12694;
  double t12695;
  double t12696;
  double t12697;
  double t12959;
  double t12960;
  double t12961;
  double t12962;
  double t12965;
  double t12966;
  double t12967;
  double t12968;
  double t12969;
  double t12970;
  double t12971;
  double t12979;
  double t12980;
  double t12981;
  double t12978;
  double t12982;
  double t12983;
  double t12985;
  double t12986;
  double t12987;
  double t13008;
  double t13010;
  double t13049;
  double t13051;
  double t13052;
  double t13059;
  double t13061;
  double t13069;
  double t13072;
  double t13082;
  double t13084;
  double t13085;
  double t13086;
  double t13087;
  double t13088;
  double t12954;
  double t12958;
  double t12972;
  double t13124;
  double t13125;
  double t13151;
  double t13154;
  double t12974;
  double t12975;
  double t12976;
  double t13119;
  double t13120;
  double t13121;
  double t13122;
  double t13123;
  double t13127;
  double t13128;
  double t13130;
  double t13134;
  double t13135;
  double t13136;
  double t13140;
  double t13142;
  double t13221;
  double t13222;
  double t13099;
  double t13100;
  double t13101;
  double t13102;
  double t13103;
  double t13104;
  double t13106;
  double t13107;
  double t13166;
  double t13172;
  double t13174;
  double t13188;
  double t13205;
  double t13207;
  double t13209;
  double t13210;
  double t13001;
  double t13005;
  double t13011;
  double t13014;
  double t13015;
  double t13016;
  double t13017;
  double t13018;
  double t13019;
  double t13238;
  double t13239;
  double t13240;
  double t13241;
  double t13242;
  double t13244;
  double t13245;
  double t13263;
  double t13264;
  double t13090;
  double t13091;
  double t13093;
  double t13094;
  double t13095;
  double t13096;
  double t13097;
  double t13156;
  double t13158;
  double t13160;
  double t13161;
  double t13162;
  double t13163;
  double t13164;
  double t12984;
  double t12988;
  double t12989;
  double t12990;
  double t12991;
  double t12993;
  double t12994;
  double t13243;
  double t13246;
  double t13248;
  double t13249;
  double t13250;
  double t13251;
  double t13252;
  double t13285;
  double t13287;
  t6499 = Sin(var1[4]);
  t7020 = Cos(var1[6]);
  t8379 = -1.*t7020;
  t8484 = 1. + t8379;
  t8678 = 0.15121*t8484;
  t8808 = Sin(var1[6]);
  t9016 = Sin(var1[5]);
  t194 = Cos(var1[5]);
  t9068 = Cos(var1[7]);
  t9082 = t7020*t6499*t9016;
  t9093 = t194*t6499*t8808;
  t9100 = t9082 + t9093;
  t9122 = Cos(var1[8]);
  t9278 = Sin(var1[7]);
  t9279 = Sin(var1[8]);
  t9044 = 0.15121*t8808;
  t9076 = -1.*t9068;
  t9078 = 1. + t9076;
  t9120 = 0.28121*t9078*t9100;
  t9124 = -1.*t9122;
  t9128 = 1. + t9124;
  t9130 = 0.50321*t9068*t9128*t9100;
  t9132 = t194*t7020*t6499;
  t9134 = -1.*t6499*t9016*t8808;
  t9242 = t9132 + t9134;
  t9275 = 0.15121*t9242;
  t9281 = -0.50321*t9100*t9278*t9279;
  t9284 = t9068*t9122*t9100;
  t9287 = t9100*t9278*t9279;
  t9302 = t9284 + t9287;
  t9305 = 0.19821*t9302;
  t10463 = -1.*t194*t7020*t6499;
  t10464 = t6499*t9016*t8808;
  t10466 = t10463 + t10464;
  t10373 = Cos(var1[4]);
  t10462 = t10373*t9068;
  t10467 = t10466*t9278;
  t10505 = t10462 + t10467;
  t10555 = t9068*t10466;
  t10560 = -1.*t10373*t9278;
  t10569 = t10555 + t10560;
  t10798 = -1.*t10373*t9068;
  t10805 = -1.*t10466*t9278;
  t10807 = t10798 + t10805;
  t8824 = -0.15121*t8808;
  t8830 = t8678 + t8824;
  t9046 = t8678 + t9044;
  t10986 = -1.*t10373*t194*t7020;
  t10987 = t10373*t9016*t8808;
  t10991 = t10986 + t10987;
  t10998 = t9068*t10991;
  t11004 = t6499*t9278;
  t11006 = t10998 + t11004;
  t11018 = -1.*t9068*t6499;
  t11026 = t10991*t9278;
  t11027 = t11018 + t11026;
  t11133 = -1.*t10373*t7020*t9016;
  t11137 = -1.*t10373*t194*t8808;
  t11172 = t11133 + t11137;
  t8835 = t194*t6499*t8830;
  t9057 = t6499*t9016*t9046;
  t9311 = t8835 + t9057 + t9120 + t9130 + t9275 + t9281 + t9305;
  t10903 = t10373*t9016*t8830;
  t10905 = -1.*t10373*t194*t9046;
  t10910 = t10373*t7020*t9016;
  t10914 = t10373*t194*t8808;
  t10918 = t10910 + t10914;
  t10920 = 0.15121*t10918;
  t10992 = 0.28121*t9078*t10991;
  t9456 = -0.15121*t7020;
  t9593 = t9456 + t9044;
  t9934 = 0.15121*t7020;
  t10000 = t9934 + t9044;
  t11438 = 0.50321*t9068*t9128*t10991;
  t11495 = -0.50321*t10991*t9278*t9279;
  t11522 = t9068*t9122*t10991;
  t11524 = t10991*t9278*t9279;
  t11544 = t11522 + t11524;
  t11556 = 0.19821*t11544;
  t11176 = -0.50321*t9122*t11172*t9278;
  t11213 = 0.50321*t9068*t11172*t9279;
  t11217 = t9122*t11172*t9278;
  t11218 = -1.*t9068*t11172*t9279;
  t11225 = t11217 + t11218;
  t11231 = 0.19821*t11225;
  t11240 = t11176 + t11213 + t11231;
  t11244 = var2[8]*t11240;
  t11245 = 0.28121*t11172*t9278;
  t11333 = -0.50321*t9128*t11172*t9278;
  t11349 = -0.50321*t9068*t11172*t9279;
  t11362 = -1.*t9122*t11172*t9278;
  t11373 = t9068*t11172*t9279;
  t11376 = t11362 + t11373;
  t11408 = 0.19821*t11376;
  t11417 = t11245 + t11333 + t11349 + t11408;
  t11434 = var2[7]*t11417;
  t9866 = t6499*t9016*t9593;
  t10224 = -1.*t194*t6499*t10000;
  t10232 = t9866 + t10224 + t9120 + t9130 + t9275 + t9281 + t9305;
  t11569 = -1.*t10373*t9016*t10000;
  t11566 = -1.*t10373*t194*t9593;
  t11571 = t11566 + t11569 + t10920 + t10992 + t11438 + t11495 + t11556;
  t10792 = 0.28121*t10373*t9068;
  t10796 = 0.28121*t10466*t9278;
  t10812 = 0.50321*t9128*t10807;
  t10814 = -0.50321*t10569*t9279;
  t10820 = t9122*t10807;
  t10823 = t10569*t9279;
  t10881 = t10820 + t10823;
  t10889 = 0.19821*t10881;
  t10896 = t10792 + t10796 + t10812 + t10814 + t10889;
  t11618 = t10373*t194*t7020;
  t11619 = -1.*t10373*t9016*t8808;
  t11620 = t11618 + t11619;
  t11632 = t9068*t11620;
  t11691 = -1.*t6499*t9278;
  t11743 = t11632 + t11691;
  t11757 = -1.*t11620*t9278;
  t11759 = t11018 + t11757;
  t10996 = -0.28121*t6499*t9278;
  t11791 = -1.*t9068*t11620;
  t11793 = t11791 + t11004;
  t10522 = -0.50321*t9122*t10505;
  t10580 = 0.50321*t10569*t9279;
  t10585 = t9122*t10505;
  t10597 = -1.*t10569*t9279;
  t10633 = t10585 + t10597;
  t10789 = 0.19821*t10633;
  t10790 = t10522 + t10580 + t10789;
  t11754 = -0.50321*t9122*t11743;
  t11763 = 0.50321*t11759*t9279;
  t11765 = t9122*t11743;
  t11766 = -1.*t11759*t9279;
  t11767 = t11765 + t11766;
  t11769 = 0.19821*t11767;
  t11778 = t11754 + t11763 + t11769;
  t11828 = t9068*t6499;
  t11829 = t11620*t9278;
  t11831 = t11828 + t11829;
  t11860 = 0.28121*t9078*t11172;
  t11861 = 0.50321*t9068*t9128*t11172;
  t11862 = 0.15121*t10991;
  t11863 = -0.50321*t11172*t9278*t9279;
  t11864 = t9068*t9122*t11172;
  t11865 = t11172*t9278*t9279;
  t11866 = t11864 + t11865;
  t11867 = 0.19821*t11866;
  t12006 = Cos(var1[3]);
  t11999 = Sin(var1[3]);
  t12001 = -1.*t194*t11999;
  t12007 = -1.*t12006*t6499*t9016;
  t12008 = t12001 + t12007;
  t12011 = t12006*t194*t6499;
  t12013 = -1.*t11999*t9016;
  t12015 = t12011 + t12013;
  t12018 = t7020*t12008;
  t12019 = -1.*t12015*t8808;
  t12025 = t12018 + t12019;
  t12052 = -1.*t12006*t194*t6499;
  t12053 = t11999*t9016;
  t12054 = t12052 + t12053;
  t12057 = t12054*t8808;
  t12059 = t12018 + t12057;
  t12030 = -1.*t12008*t8808;
  t12111 = t7020*t12015;
  t12130 = t12008*t8808;
  t12146 = t12111 + t12130;
  t12097 = -1.*t12006*t10373*t9068;
  t12184 = t12146*t9278;
  t12186 = t12097 + t12184;
  t12190 = t9068*t12146;
  t12193 = t12006*t10373*t9278;
  t12194 = t12190 + t12193;
  t12206 = t12006*t10373*t9068;
  t12207 = -1.*t12146*t9278;
  t12208 = t12206 + t12207;
  t12229 = t12006*t10373*t194*t7020;
  t12230 = -1.*t12006*t10373*t9016*t8808;
  t12231 = t12229 + t12230;
  t12236 = t9068*t12231;
  t12239 = -1.*t12006*t6499*t9278;
  t12240 = t12236 + t12239;
  t12243 = t12006*t9068*t6499;
  t12246 = t12231*t9278;
  t12248 = t12243 + t12246;
  t12256 = -1.*t12006*t194;
  t12259 = t11999*t6499*t9016;
  t12260 = t12256 + t12259;
  t12262 = -1.*t194*t11999*t6499;
  t12263 = -1.*t12006*t9016;
  t12265 = t12262 + t12263;
  t12272 = t7020*t12265;
  t12273 = t12260*t8808;
  t12274 = t12272 + t12273;
  t12277 = t9068*t12274;
  t12278 = -1.*t10373*t11999*t9278;
  t12279 = t12277 + t12278;
  t12283 = t10373*t9068*t11999;
  t12287 = t12274*t9278;
  t12294 = t12283 + t12287;
  t12315 = -1.*t10373*t7020*t11999*t9016;
  t12321 = -1.*t10373*t194*t11999*t8808;
  t12323 = t12315 + t12321;
  t12324 = 0.28121*t9078*t12323;
  t12325 = 0.50321*t9068*t9128*t12323;
  t12326 = -1.*t10373*t194*t7020*t11999;
  t12327 = t10373*t11999*t9016*t8808;
  t12328 = t12326 + t12327;
  t12329 = 0.15121*t12328;
  t12330 = -0.50321*t12323*t9278*t9279;
  t12331 = t9068*t9122*t12323;
  t12332 = t12323*t9278*t9279;
  t12333 = t12331 + t12332;
  t12334 = 0.19821*t12333;
  t12346 = t10373*t194*t7020*t11999;
  t12347 = -1.*t10373*t11999*t9016*t8808;
  t12348 = t12346 + t12347;
  t12343 = t9068*t11999*t6499;
  t12349 = t12348*t9278;
  t12350 = t12343 + t12349;
  t12352 = t9068*t12348;
  t12353 = -1.*t11999*t6499*t9278;
  t12354 = t12352 + t12353;
  t12364 = -1.*t9068*t11999*t6499;
  t12365 = -1.*t12348*t9278;
  t12367 = t12364 + t12365;
  t12221 = -1.*t12006*t10373*t9016*t8830;
  t12222 = t12006*t10373*t194*t9046;
  t12223 = -1.*t12006*t10373*t7020*t9016;
  t12224 = -1.*t12006*t10373*t194*t8808;
  t12227 = t12223 + t12224;
  t12228 = 0.15121*t12227;
  t12232 = 0.28121*t9078*t12231;
  t12234 = 0.28121*t12006*t6499*t9278;
  t12241 = 0.50321*t9128*t12240;
  t12249 = -0.50321*t12248*t9279;
  t12250 = t9122*t12240;
  t12251 = t12248*t9279;
  t12252 = t12250 + t12251;
  t12253 = 0.19821*t12252;
  t12254 = t12221 + t12222 + t12228 + t12232 + t12234 + t12241 + t12249 + t12253;
  t12276 = 0.28121*t10373*t11999*t9278;
  t12386 = -1.*t194*t7020*t11999*t6499;
  t12387 = t11999*t6499*t9016*t8808;
  t12388 = t12386 + t12387;
  t12390 = t9068*t12388;
  t12391 = t12390 + t12278;
  t12393 = t12388*t9278;
  t12394 = t12283 + t12393;
  t12405 = t12006*t194;
  t12406 = -1.*t11999*t6499*t9016;
  t12407 = t12405 + t12406;
  t12408 = t7020*t12407;
  t12409 = t12265*t8808;
  t12410 = t12408 + t12409;
  t12313 = -1.*t10373*t194*t11999*t8830;
  t12314 = -1.*t10373*t11999*t9016*t9046;
  t12335 = t12313 + t12314 + t12324 + t12325 + t12329 + t12330 + t12334;
  t12055 = t12054*t8830;
  t12056 = t12008*t9046;
  t12064 = 0.28121*t9078*t12059;
  t12070 = 0.50321*t9068*t9128*t12059;
  t12071 = t7020*t12054;
  t12073 = t12071 + t12030;
  t12075 = 0.15121*t12073;
  t12077 = -0.50321*t12059*t9278*t9279;
  t12078 = t9068*t9122*t12059;
  t12080 = t12059*t9278*t9279;
  t12087 = t12078 + t12080;
  t12088 = 0.19821*t12087;
  t12090 = t12055 + t12056 + t12064 + t12070 + t12075 + t12077 + t12088;
  t12269 = -1.*t12265*t8808;
  t12437 = -1.*t12407*t8808;
  t12438 = t12272 + t12437;
  t12261 = t12260*t8830;
  t12267 = t12265*t9046;
  t12268 = t7020*t12260;
  t12270 = t12268 + t12269;
  t12271 = 0.15121*t12270;
  t12275 = 0.28121*t9078*t12274;
  t12466 = t194*t11999*t6499;
  t12467 = t12006*t9016;
  t12468 = t12466 + t12467;
  t12469 = -1.*t12468*t8808;
  t12470 = t12408 + t12469;
  t12339 = -1.*t10373*t11999*t9016*t9593;
  t12340 = t10373*t194*t11999*t10000;
  t12341 = t12339 + t12340 + t12324 + t12325 + t12329 + t12330 + t12334;
  t12010 = t12008*t9593;
  t12016 = t12015*t10000;
  t12026 = 0.28121*t9078*t12025;
  t12027 = 0.50321*t9068*t9128*t12025;
  t12028 = -1.*t7020*t12015;
  t12034 = t12028 + t12030;
  t12035 = 0.15121*t12034;
  t12036 = -0.50321*t12025*t9278*t9279;
  t12037 = t9068*t9122*t12025;
  t12038 = t12025*t9278*t9279;
  t12042 = t12037 + t12038;
  t12047 = 0.19821*t12042;
  t12049 = t12010 + t12016 + t12026 + t12027 + t12035 + t12036 + t12047;
  t12432 = t12265*t9593;
  t12433 = t12407*t10000;
  t12434 = -1.*t7020*t12407;
  t12435 = t12434 + t12269;
  t12436 = 0.15121*t12435;
  t12439 = 0.28121*t9078*t12438;
  t12440 = 0.50321*t9068*t9128*t12438;
  t12441 = -0.50321*t12438*t9278*t9279;
  t12442 = t9068*t9122*t12438;
  t12443 = t12438*t9278*t9279;
  t12444 = t12442 + t12443;
  t12445 = 0.19821*t12444;
  t12446 = t12432 + t12433 + t12436 + t12439 + t12440 + t12441 + t12445;
  t11605 = t9934 + t8824;
  t12503 = -1.*t7020*t12468;
  t12504 = t12503 + t12437;
  t12421 = 0.28121*t12410*t9278;
  t12422 = -0.50321*t9128*t12410*t9278;
  t12423 = -0.50321*t9068*t12410*t9279;
  t12424 = -1.*t9122*t12410*t9278;
  t12425 = t9068*t12410*t9279;
  t12426 = t12424 + t12425;
  t12427 = 0.19821*t12426;
  t12428 = t12421 + t12422 + t12423 + t12427;
  t12486 = 0.28121*t12470*t9278;
  t12487 = -0.50321*t9128*t12470*t9278;
  t12488 = -0.50321*t9068*t12470*t9279;
  t12489 = -1.*t9122*t12470*t9278;
  t12490 = t9068*t12470*t9279;
  t12491 = t12489 + t12490;
  t12492 = 0.19821*t12491;
  t12493 = t12486 + t12487 + t12488 + t12492;
  t12204 = -0.28121*t12006*t10373*t9068;
  t12205 = 0.28121*t12146*t9278;
  t12211 = 0.50321*t9128*t12208;
  t12212 = -0.50321*t12194*t9279;
  t12213 = t9122*t12208;
  t12214 = t12194*t9279;
  t12215 = t12213 + t12214;
  t12217 = 0.19821*t12215;
  t12219 = t12204 + t12205 + t12211 + t12212 + t12217;
  t12362 = 0.28121*t9068*t11999*t6499;
  t12363 = 0.28121*t12348*t9278;
  t12369 = 0.50321*t9128*t12367;
  t12370 = -0.50321*t12354*t9279;
  t12371 = t9122*t12367;
  t12372 = t12354*t9279;
  t12373 = t12371 + t12372;
  t12375 = 0.19821*t12373;
  t12377 = t12362 + t12363 + t12369 + t12370 + t12375;
  t12528 = t7020*t12468;
  t12529 = t12407*t8808;
  t12530 = t12528 + t12529;
  t12531 = t9068*t12530;
  t12532 = t10373*t11999*t9278;
  t12533 = t12531 + t12532;
  t12535 = -1.*t12530*t9278;
  t12536 = t12283 + t12535;
  t12561 = -1.*t9068*t12530;
  t12563 = t12561 + t12278;
  t12411 = -0.50321*t9122*t12410*t9278;
  t12412 = 0.50321*t9068*t12410*t9279;
  t12413 = t9122*t12410*t9278;
  t12416 = -1.*t9068*t12410*t9279;
  t12417 = t12413 + t12416;
  t12418 = 0.19821*t12417;
  t12419 = t12411 + t12412 + t12418;
  t12471 = -0.50321*t9122*t12470*t9278;
  t12472 = 0.50321*t9068*t12470*t9279;
  t12473 = t9122*t12470*t9278;
  t12474 = -1.*t9068*t12470*t9279;
  t12475 = t12473 + t12474;
  t12477 = 0.19821*t12475;
  t12484 = t12471 + t12472 + t12477;
  t12189 = -0.50321*t9122*t12186;
  t12195 = 0.50321*t12194*t9279;
  t12196 = t9122*t12186;
  t12199 = -1.*t12194*t9279;
  t12200 = t12196 + t12199;
  t12201 = 0.19821*t12200;
  t12202 = t12189 + t12195 + t12201;
  t12351 = -0.50321*t9122*t12350;
  t12355 = 0.50321*t12354*t9279;
  t12356 = t9122*t12350;
  t12357 = -1.*t12354*t9279;
  t12358 = t12356 + t12357;
  t12359 = 0.19821*t12358;
  t12360 = t12351 + t12355 + t12359;
  t12534 = -0.50321*t9122*t12533;
  t12537 = 0.50321*t12536*t9279;
  t12541 = t9122*t12533;
  t12542 = -1.*t12536*t9279;
  t12546 = t12541 + t12542;
  t12547 = 0.19821*t12546;
  t12554 = t12534 + t12537 + t12547;
  t12675 = -1.*t10373*t9068*t11999;
  t12676 = t12530*t9278;
  t12677 = t12675 + t12676;
  t12720 = t12265*t8830;
  t12721 = t12407*t9046;
  t12724 = 0.28121*t9078*t12410;
  t12736 = 0.50321*t9068*t9128*t12410;
  t12737 = 0.15121*t12438;
  t12740 = -0.50321*t12410*t9278*t9279;
  t12741 = t9068*t9122*t12410;
  t12742 = t12410*t9278*t9279;
  t12743 = t12741 + t12742;
  t12744 = 0.19821*t12743;
  t12747 = t12720 + t12721 + t12724 + t12736 + t12737 + t12740 + t12744;
  t12751 = t12407*t9593;
  t12759 = t12468*t10000;
  t12761 = 0.28121*t9078*t12470;
  t12775 = 0.50321*t9068*t9128*t12470;
  t12780 = 0.15121*t12504;
  t12796 = -0.50321*t12470*t9278*t9279;
  t12803 = t9068*t9122*t12470;
  t12809 = t12470*t9278*t9279;
  t12812 = t12803 + t12809;
  t12814 = 0.19821*t12812;
  t12826 = t12751 + t12759 + t12761 + t12775 + t12780 + t12796 + t12814;
  t12884 = -0.50321*t9122*t12677;
  t12889 = 0.50321*t12533*t9279;
  t12902 = t9122*t12677;
  t12916 = -1.*t12533*t9279;
  t12920 = t12902 + t12916;
  t12922 = 0.19821*t12920;
  t12923 = t12884 + t12889 + t12922;
  t12827 = -0.28121*t10373*t9068*t11999;
  t12828 = 0.28121*t12530*t9278;
  t12836 = 0.50321*t9128*t12536;
  t12851 = -0.50321*t12533*t9279;
  t12853 = t9122*t12536;
  t12867 = t12533*t9279;
  t12869 = t12853 + t12867;
  t12872 = 0.19821*t12869;
  t12876 = t12827 + t12828 + t12836 + t12851 + t12872;
  t12698 = -1.*t10373*t11999*t9016*t8830;
  t12699 = t10373*t194*t11999*t9046;
  t12701 = 0.15121*t12323;
  t12704 = 0.28121*t9078*t12348;
  t12706 = 0.28121*t11999*t6499*t9278;
  t12707 = 0.50321*t9128*t12354;
  t12708 = -0.50321*t12350*t9279;
  t12710 = t9122*t12354;
  t12712 = t12350*t9279;
  t12716 = t12710 + t12712;
  t12717 = 0.19821*t12716;
  t12718 = t12698 + t12699 + t12701 + t12704 + t12706 + t12707 + t12708 + t12717;
  t12686 = t12008*t8830;
  t12687 = t12015*t9046;
  t12688 = 0.15121*t12025;
  t12689 = 0.28121*t9078*t12146;
  t12690 = -0.28121*t12006*t10373*t9278;
  t12691 = 0.50321*t9128*t12194;
  t12692 = -0.50321*t12186*t9279;
  t12693 = t9122*t12194;
  t12694 = t12186*t9279;
  t12695 = t12693 + t12694;
  t12696 = 0.19821*t12695;
  t12697 = t12686 + t12687 + t12688 + t12689 + t12690 + t12691 + t12692 + t12696;
  t12959 = t12006*t10373*t7020*t9016;
  t12960 = t12006*t10373*t194*t8808;
  t12961 = t12959 + t12960;
  t12962 = 0.28121*t9078*t12961;
  t12965 = 0.50321*t9068*t9128*t12961;
  t12966 = 0.15121*t12231;
  t12967 = -0.50321*t12961*t9278*t9279;
  t12968 = t9068*t9122*t12961;
  t12969 = t12961*t9278*t9279;
  t12970 = t12968 + t12969;
  t12971 = 0.19821*t12970;
  t12979 = -1.*t12006*t10373*t194*t7020;
  t12980 = t12006*t10373*t9016*t8808;
  t12981 = t12979 + t12980;
  t12978 = -1.*t12006*t9068*t6499;
  t12982 = t12981*t9278;
  t12983 = t12978 + t12982;
  t12985 = t9068*t12981;
  t12986 = t12006*t6499*t9278;
  t12987 = t12985 + t12986;
  t13008 = -1.*t12981*t9278;
  t13010 = t12243 + t13008;
  t13049 = t12006*t194*t7020*t6499;
  t13051 = -1.*t12006*t6499*t9016*t8808;
  t13052 = t13049 + t13051;
  t13059 = t9068*t13052;
  t13061 = t13059 + t12193;
  t13069 = t13052*t9278;
  t13072 = t12097 + t13069;
  t13082 = t194*t11999;
  t13084 = t12006*t6499*t9016;
  t13085 = t13082 + t13084;
  t13086 = t7020*t13085;
  t13087 = t12015*t8808;
  t13088 = t13086 + t13087;
  t12954 = t12006*t10373*t194*t8830;
  t12958 = t12006*t10373*t9016*t9046;
  t12972 = t12954 + t12958 + t12962 + t12965 + t12966 + t12967 + t12971;
  t13124 = -1.*t13085*t8808;
  t13125 = t12111 + t13124;
  t13151 = -1.*t12054*t8808;
  t13154 = t13086 + t13151;
  t12974 = t12006*t10373*t9016*t9593;
  t12975 = -1.*t12006*t10373*t194*t10000;
  t12976 = t12974 + t12975 + t12962 + t12965 + t12966 + t12967 + t12971;
  t13119 = t12015*t9593;
  t13120 = t13085*t10000;
  t13121 = -1.*t7020*t13085;
  t13122 = t13121 + t12019;
  t13123 = 0.15121*t13122;
  t13127 = 0.28121*t9078*t13125;
  t13128 = 0.50321*t9068*t9128*t13125;
  t13130 = -0.50321*t13125*t9278*t9279;
  t13134 = t9068*t9122*t13125;
  t13135 = t13125*t9278*t9279;
  t13136 = t13134 + t13135;
  t13140 = 0.19821*t13136;
  t13142 = t13119 + t13120 + t13123 + t13127 + t13128 + t13130 + t13140;
  t13221 = -1.*t7020*t12054;
  t13222 = t13221 + t13124;
  t13099 = 0.28121*t13088*t9278;
  t13100 = -0.50321*t9128*t13088*t9278;
  t13101 = -0.50321*t9068*t13088*t9279;
  t13102 = -1.*t9122*t13088*t9278;
  t13103 = t9068*t13088*t9279;
  t13104 = t13102 + t13103;
  t13106 = 0.19821*t13104;
  t13107 = t13099 + t13100 + t13101 + t13106;
  t13166 = 0.28121*t13154*t9278;
  t13172 = -0.50321*t9128*t13154*t9278;
  t13174 = -0.50321*t9068*t13154*t9279;
  t13188 = -1.*t9122*t13154*t9278;
  t13205 = t9068*t13154*t9279;
  t13207 = t13188 + t13205;
  t13209 = 0.19821*t13207;
  t13210 = t13166 + t13172 + t13174 + t13209;
  t13001 = -0.28121*t12006*t9068*t6499;
  t13005 = 0.28121*t12981*t9278;
  t13011 = 0.50321*t9128*t13010;
  t13014 = -0.50321*t12987*t9279;
  t13015 = t9122*t13010;
  t13016 = t12987*t9279;
  t13017 = t13015 + t13016;
  t13018 = 0.19821*t13017;
  t13019 = t13001 + t13005 + t13011 + t13014 + t13018;
  t13238 = t13085*t8808;
  t13239 = t12071 + t13238;
  t13240 = t9068*t13239;
  t13241 = -1.*t12006*t10373*t9278;
  t13242 = t13240 + t13241;
  t13244 = -1.*t13239*t9278;
  t13245 = t12097 + t13244;
  t13263 = -1.*t9068*t13239;
  t13264 = t13263 + t12193;
  t13090 = -0.50321*t9122*t13088*t9278;
  t13091 = 0.50321*t9068*t13088*t9279;
  t13093 = t9122*t13088*t9278;
  t13094 = -1.*t9068*t13088*t9279;
  t13095 = t13093 + t13094;
  t13096 = 0.19821*t13095;
  t13097 = t13090 + t13091 + t13096;
  t13156 = -0.50321*t9122*t13154*t9278;
  t13158 = 0.50321*t9068*t13154*t9279;
  t13160 = t9122*t13154*t9278;
  t13161 = -1.*t9068*t13154*t9279;
  t13162 = t13160 + t13161;
  t13163 = 0.19821*t13162;
  t13164 = t13156 + t13158 + t13163;
  t12984 = -0.50321*t9122*t12983;
  t12988 = 0.50321*t12987*t9279;
  t12989 = t9122*t12983;
  t12990 = -1.*t12987*t9279;
  t12991 = t12989 + t12990;
  t12993 = 0.19821*t12991;
  t12994 = t12984 + t12988 + t12993;
  t13243 = -0.50321*t9122*t13242;
  t13246 = 0.50321*t13245*t9279;
  t13248 = t9122*t13242;
  t13249 = -1.*t13245*t9279;
  t13250 = t13248 + t13249;
  t13251 = 0.19821*t13250;
  t13252 = t13243 + t13246 + t13251;
  t13285 = t13239*t9278;
  t13287 = t12206 + t13285;
  p_output1[0]=(t10903 + t10905 + t10920 + t10992 + t10996 + 0.50321*t11006*t9128 - 0.50321*t11027*t9279 + 0.19821*(t11006*t9122 + t11027*t9279))*var2[4] + t9311*var2[5] + t10232*var2[6] + t10896*var2[7] + t10790*var2[8];
  p_output1[1]=t11244 + t11434 + t9311*var2[4] + (t10903 + t10905 + t10920 + t10992 + t11438 + t11495 + t11556)*var2[5] + t11571*var2[6];
  p_output1[2]=t11244 + t11434 + t10232*var2[4] + t11571*var2[5] + (t10920 + t10992 + t11438 + t11495 + t11556 + t11569 + t10373*t11605*t194)*var2[6];
  p_output1[3]=t10896*var2[4] + t11417*var2[5] + t11417*var2[6] + (t10996 + 0.28121*t11620*t9068 + 0.50321*t11793*t9128 - 0.50321*t11759*t9279 + 0.19821*(t11793*t9122 + t11759*t9279))*var2[7] + t11778*var2[8];
  p_output1[4]=t10790*var2[4] + t11240*var2[5] + t11240*var2[6] + t11778*var2[7] + (0.50321*t11743*t9122 + 0.50321*t11831*t9279 + 0.19821*(-1.*t11743*t9122 - 1.*t11831*t9279))*var2[8];
  p_output1[5]=1.;
  p_output1[6]=t6499*t8830*t9016 - 1.*t194*t6499*t9046 + 0.28121*t10466*t9078 + 0.15121*t9100 + 0.50321*t10569*t9128 + 0.28121*t10373*t9278 - 0.50321*t10505*t9279 + 0.19821*(t10569*t9122 + t10505*t9279);
  p_output1[7]=t11860 + t11861 + t11862 + t11863 + t11867 - 1.*t10373*t194*t8830 - 1.*t10373*t9016*t9046;
  p_output1[8]=t11860 + t11861 + t11862 + t11863 + t11867 + t10000*t10373*t194 - 1.*t10373*t9016*t9593;
  p_output1[9]=0.28121*t6499*t9068 + 0.50321*t11759*t9128 + 0.28121*t11620*t9278 - 0.50321*t11743*t9279 + 0.19821*(t11759*t9122 + t11743*t9279);
  p_output1[10]=-0.50321*t11831*t9122 + 0.50321*t11743*t9279 + 0.19821*(t11831*t9122 - 1.*t11743*t9279);
  p_output1[11]=(t12261 + t12267 + t12271 + t12275 + t12276 + 0.50321*t12279*t9128 - 0.50321*t12294*t9279 + 0.19821*(t12279*t9122 + t12294*t9279))*var2[3] + t12254*var2[4] + t12090*var2[5] + t12049*var2[6] + t12219*var2[7] + t12202*var2[8];
  p_output1[12]=t12254*var2[3] + (t12276 + t11999*t6499*t8830*t9016 + 0.15121*(t11999*t194*t6499*t8808 + t11999*t6499*t7020*t9016) - 1.*t11999*t194*t6499*t9046 + 0.28121*t12388*t9078 + 0.50321*t12391*t9128 - 0.50321*t12394*t9279 + 0.19821*(t12391*t9122 + t12394*t9279))*var2[4] + t12335*var2[5] + t12341*var2[6] + t12377*var2[7] + t12360*var2[8];
  p_output1[13]=t12090*var2[3] + t12335*var2[4] + (t12261 + t12267 + t12271 + t12275 + 0.50321*t12274*t9068*t9128 - 0.50321*t12274*t9278*t9279 + 0.19821*(t12274*t9068*t9122 + t12274*t9278*t9279))*var2[5] + t12446*var2[6] + t12428*var2[7] + t12419*var2[8];
  p_output1[14]=t12049*var2[3] + t12341*var2[4] + t12446*var2[5] + (t12433 + t11605*t12468 + 0.15121*(t12434 + t12468*t8808) + 0.28121*t12504*t9078 + 0.50321*t12504*t9068*t9128 - 0.50321*t12504*t9278*t9279 + 0.19821*(t12504*t9068*t9122 + t12504*t9278*t9279))*var2[6] + t12493*var2[7] + t12484*var2[8];
  p_output1[15]=t12219*var2[3] + t12377*var2[4] + t12428*var2[5] + t12493*var2[6] + (t12276 + 0.28121*t12530*t9068 + 0.50321*t12563*t9128 - 0.50321*t12536*t9279 + 0.19821*(t12563*t9122 + t12536*t9279))*var2[7] + t12554*var2[8];
  p_output1[16]=t12202*var2[3] + t12360*var2[4] + t12419*var2[5] + t12484*var2[6] + t12554*var2[7] + (0.50321*t12533*t9122 + 0.50321*t12677*t9279 + 0.19821*(-1.*t12533*t9122 - 1.*t12677*t9279))*var2[8];
  p_output1[17]=1.;
  p_output1[18]=t12697;
  p_output1[19]=t12718;
  p_output1[20]=t12747;
  p_output1[21]=t12826;
  p_output1[22]=t12876;
  p_output1[23]=t12923;
  p_output1[24]=t12697*var2[3] + t12718*var2[4] + t12747*var2[5] + t12826*var2[6] + t12876*var2[7] + t12923*var2[8];
  p_output1[25]=t12718*var2[3] + (t12690 - 1.*t12006*t6499*t8830*t9016 + 0.15121*(-1.*t12006*t194*t6499*t8808 - 1.*t12006*t6499*t7020*t9016) + t12006*t194*t6499*t9046 + 0.28121*t13052*t9078 + 0.50321*t13061*t9128 - 0.50321*t13072*t9279 + 0.19821*(t13061*t9122 + t13072*t9279))*var2[4] + t12972*var2[5] + t12976*var2[6] + t13019*var2[7] + t12994*var2[8];
  p_output1[26]=t12747*var2[3] + t12972*var2[4] + (t12686 + t12687 + t12688 + t12689 + 0.50321*t12146*t9068*t9128 - 0.50321*t12146*t9278*t9279 + 0.19821*(t12146*t9068*t9122 + t12146*t9278*t9279))*var2[5] + t13142*var2[6] + t13107*var2[7] + t13097*var2[8];
  p_output1[27]=t12826*var2[3] + t12976*var2[4] + t13142*var2[5] + (t11605*t12054 + t13120 + 0.15121*(t12057 + t13121) + 0.28121*t13222*t9078 + 0.50321*t13222*t9068*t9128 - 0.50321*t13222*t9278*t9279 + 0.19821*(t13222*t9068*t9122 + t13222*t9278*t9279))*var2[6] + t13210*var2[7] + t13164*var2[8];
  p_output1[28]=t12876*var2[3] + t13019*var2[4] + t13107*var2[5] + t13210*var2[6] + (t12690 + 0.28121*t13239*t9068 + 0.50321*t13264*t9128 - 0.50321*t13245*t9279 + 0.19821*(t13264*t9122 + t13245*t9279))*var2[7] + t13252*var2[8];
  p_output1[29]=t12923*var2[3] + t12994*var2[4] + t13097*var2[5] + t13164*var2[6] + t13252*var2[7] + (0.50321*t13242*t9122 + 0.50321*t13287*t9279 + 0.19821*(-1.*t13242*t9122 - 1.*t13287*t9279))*var2[8];
  p_output1[30]=1.;
  p_output1[31]=0.15121*t12470 + t12407*t8830 + t12468*t9046 + 0.28121*t12530*t9078 + 0.50321*t12533*t9128 - 0.28121*t10373*t11999*t9278 - 0.50321*t12677*t9279 + 0.19821*(t12541 + t12677*t9279);
  p_output1[32]=0.15121*t12961 + t10373*t12006*t8830*t9016 - 1.*t10373*t12006*t194*t9046 + 0.28121*t12981*t9078 + 0.50321*t12987*t9128 - 0.28121*t12006*t6499*t9278 - 0.50321*t12983*t9279 + 0.19821*(t12987*t9122 + t12983*t9279);
  p_output1[33]=0.15121*t13125 + t12015*t8830 + t13085*t9046 + 0.28121*t13088*t9078 + 0.50321*t13088*t9068*t9128 - 0.50321*t13088*t9278*t9279 + 0.19821*(t13088*t9068*t9122 + t13088*t9278*t9279);
  p_output1[34]=t10000*t12054 + 0.15121*t13222 + 0.28121*t13154*t9078 + 0.50321*t13154*t9068*t9128 - 0.50321*t13154*t9278*t9279 + 0.19821*(t13154*t9068*t9122 + t13154*t9278*t9279) + t13085*t9593;
  p_output1[35]=0.28121*t10373*t12006*t9068 + 0.50321*t13245*t9128 + 0.28121*t13239*t9278 - 0.50321*t13242*t9279 + 0.19821*(t13245*t9122 + t13242*t9279);
  p_output1[36]=-0.50321*t13287*t9122 + 0.50321*t13242*t9279 + 0.19821*(t13287*t9122 - 1.*t13242*t9279);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 37, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_initial_swing_velocity_FlFoot_DiagonalStance.hh"

namespace DiagonalStance
{

void J_initial_swing_velocity_FlFoot_DiagonalStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
