/*
 * Automatically Generated from Mathematica.
 * Sun 12 Jun 2022 14:36:16 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t1888;
  double t2662;
  double t2663;
  double t2799;
  double t2816;
  double t2867;
  double t3693;
  double t1732;
  double t3770;
  double t4001;
  double t4003;
  double t4008;
  double t4625;
  double t5123;
  double t5135;
  double t3705;
  double t3812;
  double t3941;
  double t4486;
  double t4630;
  double t4642;
  double t4827;
  double t5089;
  double t5097;
  double t5107;
  double t5115;
  double t5147;
  double t5152;
  double t5487;
  double t5536;
  double t5683;
  double t7381;
  double t7394;
  double t7397;
  double t7353;
  double t7360;
  double t7412;
  double t7416;
  double t7597;
  double t7624;
  double t7632;
  double t7879;
  double t7958;
  double t7960;
  double t2998;
  double t3588;
  double t3751;
  double t8161;
  double t8235;
  double t8239;
  double t8248;
  double t8250;
  double t8255;
  double t8264;
  double t8266;
  double t8276;
  double t8342;
  double t8346;
  double t8347;
  double t3646;
  double t3752;
  double t5690;
  double t8069;
  double t8075;
  double t8077;
  double t8079;
  double t8121;
  double t8150;
  double t8243;
  double t7002;
  double t7004;
  double t7014;
  double t7044;
  double t8655;
  double t8677;
  double t8678;
  double t8684;
  double t8707;
  double t8735;
  double t8382;
  double t8384;
  double t8408;
  double t8424;
  double t8464;
  double t8493;
  double t8497;
  double t8503;
  double t8504;
  double t8517;
  double t8542;
  double t8545;
  double t8566;
  double t8595;
  double t8596;
  double t8597;
  double t8602;
  double t7005;
  double t7048;
  double t7050;
  double t8768;
  double t8767;
  double t8772;
  double t7748;
  double t7749;
  double t7980;
  double t8005;
  double t8007;
  double t8012;
  double t8013;
  double t8048;
  double t8059;
  double t8934;
  double t8948;
  double t8953;
  double t8965;
  double t8967;
  double t8970;
  double t8980;
  double t9057;
  double t8244;
  double t9122;
  double t9145;
  double t7558;
  double t7645;
  double t7657;
  double t7673;
  double t7691;
  double t7712;
  double t7738;
  double t8971;
  double t9079;
  double t9080;
  double t9082;
  double t9100;
  double t9104;
  double t9106;
  double t9299;
  double t9306;
  double t9311;
  double t9404;
  double t9419;
  double t9420;
  double t9421;
  double t9422;
  double t9442;
  double t9453;
  double t9463;
  double t9936;
  double t9933;
  double t9935;
  double t9942;
  double t9945;
  double t9956;
  double t9958;
  double t9959;
  double t9965;
  double t9974;
  double t9980;
  double t10156;
  double t10165;
  double t10171;
  double t10194;
  double t10204;
  double t10143;
  double t10435;
  double t10515;
  double t10534;
  double t10434;
  double t10545;
  double t10546;
  double t10564;
  double t10565;
  double t10566;
  double t10607;
  double t10616;
  double t10617;
  double t10685;
  double t10690;
  double t10691;
  double t10696;
  double t10699;
  double t10700;
  double t10706;
  double t10710;
  double t10711;
  double t10751;
  double t10755;
  double t10757;
  double t10759;
  double t10760;
  double t10761;
  double t10801;
  double t10803;
  double t10804;
  double t10824;
  double t10827;
  double t10829;
  double t10837;
  double t10845;
  double t10846;
  double t10880;
  double t10887;
  double t10888;
  double t10889;
  double t10891;
  double t10898;
  double t10899;
  double t10900;
  double t10901;
  double t10902;
  double t10905;
  double t10906;
  double t10907;
  double t10908;
  double t10936;
  double t10937;
  double t10938;
  double t10935;
  double t10939;
  double t10941;
  double t10945;
  double t10947;
  double t10949;
  double t11007;
  double t11008;
  double t11010;
  double t10674;
  double t10675;
  double t10680;
  double t10682;
  double t10683;
  double t10684;
  double t10692;
  double t10693;
  double t10705;
  double t10721;
  double t10722;
  double t10735;
  double t10739;
  double t10740;
  double t10749;
  double t10814;
  double t11035;
  double t11036;
  double t11038;
  double t11043;
  double t11044;
  double t11047;
  double t11048;
  double t11070;
  double t11072;
  double t11074;
  double t11075;
  double t11078;
  double t11080;
  double t10875;
  double t10878;
  double t10909;
  double t10175;
  double t10193;
  double t10303;
  double t10307;
  double t10337;
  double t10338;
  double t10422;
  double t10423;
  double t10424;
  double t10425;
  double t10426;
  double t10427;
  double t10428;
  double t10794;
  double t11142;
  double t11163;
  double t10758;
  double t10763;
  double t10785;
  double t10797;
  double t10799;
  double t10810;
  double t11221;
  double t11222;
  double t11223;
  double t11224;
  double t11225;
  double t10913;
  double t10914;
  double t10915;
  double t9950;
  double t9961;
  double t9983;
  double t10001;
  double t10108;
  double t10144;
  double t10147;
  double t10148;
  double t10149;
  double t10151;
  double t10152;
  double t10153;
  double t10154;
  double t11127;
  double t11129;
  double t11136;
  double t11138;
  double t11139;
  double t11164;
  double t11167;
  double t11168;
  double t11195;
  double t11196;
  double t11197;
  double t11198;
  double t11199;
  double t8864;
  double t11265;
  double t11266;
  double t11109;
  double t11111;
  double t11113;
  double t11114;
  double t11115;
  double t11116;
  double t11118;
  double t11120;
  double t11240;
  double t11241;
  double t11242;
  double t11244;
  double t11245;
  double t11246;
  double t11248;
  double t11249;
  double t10599;
  double t10600;
  double t10618;
  double t10619;
  double t10620;
  double t10622;
  double t10623;
  double t10624;
  double t10625;
  double t10970;
  double t11006;
  double t11011;
  double t11012;
  double t11016;
  double t11018;
  double t11021;
  double t11022;
  double t11023;
  double t11325;
  double t11326;
  double t11327;
  double t11331;
  double t11332;
  double t11333;
  double t11337;
  double t11338;
  double t11372;
  double t11415;
  double t11083;
  double t11084;
  double t11097;
  double t11099;
  double t11100;
  double t11105;
  double t11107;
  double t11226;
  double t11227;
  double t11228;
  double t11229;
  double t11234;
  double t11237;
  double t11238;
  double t10560;
  double t10574;
  double t10575;
  double t10576;
  double t10590;
  double t10594;
  double t10597;
  double t10944;
  double t10950;
  double t10951;
  double t10952;
  double t10954;
  double t10955;
  double t10956;
  double t11334;
  double t11341;
  double t11342;
  double t11348;
  double t11355;
  double t11360;
  double t11361;
  double t11477;
  double t11480;
  double t11481;
  double t11578;
  double t11581;
  double t11583;
  double t11585;
  double t11586;
  double t11603;
  double t11608;
  double t11610;
  double t11611;
  double t11613;
  double t11617;
  double t11619;
  double t11620;
  double t11625;
  double t11626;
  double t11627;
  double t11632;
  double t11634;
  double t11635;
  double t11636;
  double t11637;
  double t11638;
  double t11661;
  double t11663;
  double t11665;
  double t11668;
  double t11669;
  double t11670;
  double t11671;
  double t11643;
  double t11644;
  double t11645;
  double t11646;
  double t11648;
  double t11652;
  double t11653;
  double t11654;
  double t11659;
  double t11533;
  double t11534;
  double t11536;
  double t11540;
  double t11541;
  double t11542;
  double t11556;
  double t11558;
  double t11559;
  double t11560;
  double t11571;
  double t11575;
  double t11500;
  double t11501;
  double t11503;
  double t11504;
  double t11505;
  double t11506;
  double t11507;
  double t11508;
  double t11511;
  double t11512;
  double t11515;
  double t11520;
  double t11691;
  double t11696;
  double t11698;
  double t11699;
  double t11700;
  double t11703;
  double t11705;
  double t11706;
  double t11708;
  double t11709;
  double t11710;
  double t11731;
  double t11736;
  double t11743;
  double t11726;
  double t11744;
  double t11745;
  double t11749;
  double t11750;
  double t11752;
  double t11778;
  double t11780;
  double t11813;
  double t11814;
  double t11817;
  double t11821;
  double t11822;
  double t11869;
  double t11877;
  double t11914;
  double t11915;
  double t11916;
  double t11918;
  double t11919;
  double t11920;
  double t11688;
  double t11689;
  double t11711;
  double t11974;
  double t11975;
  double t11990;
  double t11991;
  double t11719;
  double t11720;
  double t11722;
  double t11968;
  double t11969;
  double t11970;
  double t11972;
  double t11973;
  double t11976;
  double t11977;
  double t11979;
  double t11980;
  double t11982;
  double t11983;
  double t11986;
  double t11987;
  double t12052;
  double t12053;
  double t11932;
  double t11936;
  double t11938;
  double t11940;
  double t11941;
  double t11943;
  double t11944;
  double t11945;
  double t12005;
  double t12006;
  double t12007;
  double t12008;
  double t12011;
  double t12012;
  double t12042;
  double t12043;
  double t11772;
  double t11773;
  double t11782;
  double t11789;
  double t11792;
  double t11793;
  double t11795;
  double t11797;
  double t11798;
  double t12073;
  double t12075;
  double t12076;
  double t12077;
  double t12078;
  double t12081;
  double t12082;
  double t12101;
  double t12102;
  double t11922;
  double t11924;
  double t11925;
  double t11926;
  double t11927;
  double t11929;
  double t11930;
  double t11992;
  double t11993;
  double t11994;
  double t11995;
  double t11998;
  double t11999;
  double t12002;
  double t11746;
  double t11753;
  double t11755;
  double t11756;
  double t11762;
  double t11764;
  double t11768;
  double t12079;
  double t12087;
  double t12089;
  double t12090;
  double t12092;
  double t12093;
  double t12094;
  double t12132;
  double t12133;
  t1888 = Sin(var1[4]);
  t2662 = Cos(var1[6]);
  t2663 = -1.*t2662;
  t2799 = 1. + t2663;
  t2816 = 0.15121*t2799;
  t2867 = Sin(var1[6]);
  t3693 = Sin(var1[5]);
  t1732 = Cos(var1[5]);
  t3770 = Cos(var1[7]);
  t4001 = t2662*t1888*t3693;
  t4003 = t1732*t1888*t2867;
  t4008 = t4001 + t4003;
  t4625 = Cos(var1[8]);
  t5123 = Sin(var1[7]);
  t5135 = Sin(var1[8]);
  t3705 = 0.15121*t2867;
  t3812 = -1.*t3770;
  t3941 = 1. + t3812;
  t4486 = 0.28121*t3941*t4008;
  t4630 = -1.*t4625;
  t4642 = 1. + t4630;
  t4827 = 0.50321*t3770*t4642*t4008;
  t5089 = t1732*t2662*t1888;
  t5097 = -1.*t1888*t3693*t2867;
  t5107 = t5089 + t5097;
  t5115 = 0.15121*t5107;
  t5147 = -0.50321*t4008*t5123*t5135;
  t5152 = t3770*t4625*t4008;
  t5487 = t4008*t5123*t5135;
  t5536 = t5152 + t5487;
  t5683 = 0.19821*t5536;
  t7381 = -1.*t1732*t2662*t1888;
  t7394 = t1888*t3693*t2867;
  t7397 = t7381 + t7394;
  t7353 = Cos(var1[4]);
  t7360 = t7353*t3770;
  t7412 = t7397*t5123;
  t7416 = t7360 + t7412;
  t7597 = t3770*t7397;
  t7624 = -1.*t7353*t5123;
  t7632 = t7597 + t7624;
  t7879 = -1.*t7353*t3770;
  t7958 = -1.*t7397*t5123;
  t7960 = t7879 + t7958;
  t2998 = -0.15121*t2867;
  t3588 = t2816 + t2998;
  t3751 = t2816 + t3705;
  t8161 = -1.*t7353*t1732*t2662;
  t8235 = t7353*t3693*t2867;
  t8239 = t8161 + t8235;
  t8248 = t3770*t8239;
  t8250 = t1888*t5123;
  t8255 = t8248 + t8250;
  t8264 = -1.*t3770*t1888;
  t8266 = t8239*t5123;
  t8276 = t8264 + t8266;
  t8342 = -1.*t7353*t2662*t3693;
  t8346 = -1.*t7353*t1732*t2867;
  t8347 = t8342 + t8346;
  t3646 = t1732*t1888*t3588;
  t3752 = t1888*t3693*t3751;
  t5690 = t3646 + t3752 + t4486 + t4827 + t5115 + t5147 + t5683;
  t8069 = t7353*t3693*t3588;
  t8075 = -1.*t7353*t1732*t3751;
  t8077 = t7353*t2662*t3693;
  t8079 = t7353*t1732*t2867;
  t8121 = t8077 + t8079;
  t8150 = 0.15121*t8121;
  t8243 = 0.28121*t3941*t8239;
  t7002 = -0.15121*t2662;
  t7004 = t7002 + t3705;
  t7014 = 0.15121*t2662;
  t7044 = t7014 + t3705;
  t8655 = 0.50321*t3770*t4642*t8239;
  t8677 = -0.50321*t8239*t5123*t5135;
  t8678 = t3770*t4625*t8239;
  t8684 = t8239*t5123*t5135;
  t8707 = t8678 + t8684;
  t8735 = 0.19821*t8707;
  t8382 = -0.50321*t4625*t8347*t5123;
  t8384 = 0.50321*t3770*t8347*t5135;
  t8408 = t4625*t8347*t5123;
  t8424 = -1.*t3770*t8347*t5135;
  t8464 = t8408 + t8424;
  t8493 = 0.19821*t8464;
  t8497 = t8382 + t8384 + t8493;
  t8503 = var2[8]*t8497;
  t8504 = 0.28121*t8347*t5123;
  t8517 = -0.50321*t4642*t8347*t5123;
  t8542 = -0.50321*t3770*t8347*t5135;
  t8545 = -1.*t4625*t8347*t5123;
  t8566 = t3770*t8347*t5135;
  t8595 = t8545 + t8566;
  t8596 = 0.19821*t8595;
  t8597 = t8504 + t8517 + t8542 + t8596;
  t8602 = var2[7]*t8597;
  t7005 = t1888*t3693*t7004;
  t7048 = -1.*t1732*t1888*t7044;
  t7050 = t7005 + t7048 + t4486 + t4827 + t5115 + t5147 + t5683;
  t8768 = -1.*t7353*t3693*t7044;
  t8767 = -1.*t7353*t1732*t7004;
  t8772 = t8767 + t8768 + t8150 + t8243 + t8655 + t8677 + t8735;
  t7748 = 0.28121*t7353*t3770;
  t7749 = 0.28121*t7397*t5123;
  t7980 = 0.50321*t4642*t7960;
  t8005 = -0.50321*t7632*t5135;
  t8007 = t4625*t7960;
  t8012 = t7632*t5135;
  t8013 = t8007 + t8012;
  t8048 = 0.19821*t8013;
  t8059 = t7748 + t7749 + t7980 + t8005 + t8048;
  t8934 = t7353*t1732*t2662;
  t8948 = -1.*t7353*t3693*t2867;
  t8953 = t8934 + t8948;
  t8965 = t3770*t8953;
  t8967 = -1.*t1888*t5123;
  t8970 = t8965 + t8967;
  t8980 = -1.*t8953*t5123;
  t9057 = t8264 + t8980;
  t8244 = -0.28121*t1888*t5123;
  t9122 = -1.*t3770*t8953;
  t9145 = t9122 + t8250;
  t7558 = -0.50321*t4625*t7416;
  t7645 = 0.50321*t7632*t5135;
  t7657 = t4625*t7416;
  t7673 = -1.*t7632*t5135;
  t7691 = t7657 + t7673;
  t7712 = 0.19821*t7691;
  t7738 = t7558 + t7645 + t7712;
  t8971 = -0.50321*t4625*t8970;
  t9079 = 0.50321*t9057*t5135;
  t9080 = t4625*t8970;
  t9082 = -1.*t9057*t5135;
  t9100 = t9080 + t9082;
  t9104 = 0.19821*t9100;
  t9106 = t8971 + t9079 + t9104;
  t9299 = t3770*t1888;
  t9306 = t8953*t5123;
  t9311 = t9299 + t9306;
  t9404 = 0.28121*t3941*t8347;
  t9419 = 0.50321*t3770*t4642*t8347;
  t9420 = 0.15121*t8239;
  t9421 = -0.50321*t8347*t5123*t5135;
  t9422 = t3770*t4625*t8347;
  t9442 = t8347*t5123*t5135;
  t9453 = t9422 + t9442;
  t9463 = 0.19821*t9453;
  t9936 = Cos(var1[3]);
  t9933 = Sin(var1[3]);
  t9935 = -1.*t1732*t9933;
  t9942 = -1.*t9936*t1888*t3693;
  t9945 = t9935 + t9942;
  t9956 = t9936*t1732*t1888;
  t9958 = -1.*t9933*t3693;
  t9959 = t9956 + t9958;
  t9965 = t2662*t9945;
  t9974 = -1.*t9959*t2867;
  t9980 = t9965 + t9974;
  t10156 = -1.*t9936*t1732*t1888;
  t10165 = t9933*t3693;
  t10171 = t10156 + t10165;
  t10194 = t10171*t2867;
  t10204 = t9965 + t10194;
  t10143 = -1.*t9945*t2867;
  t10435 = t2662*t9959;
  t10515 = t9945*t2867;
  t10534 = t10435 + t10515;
  t10434 = -1.*t9936*t7353*t3770;
  t10545 = t10534*t5123;
  t10546 = t10434 + t10545;
  t10564 = t3770*t10534;
  t10565 = t9936*t7353*t5123;
  t10566 = t10564 + t10565;
  t10607 = t9936*t7353*t3770;
  t10616 = -1.*t10534*t5123;
  t10617 = t10607 + t10616;
  t10685 = t9936*t7353*t1732*t2662;
  t10690 = -1.*t9936*t7353*t3693*t2867;
  t10691 = t10685 + t10690;
  t10696 = t3770*t10691;
  t10699 = -1.*t9936*t1888*t5123;
  t10700 = t10696 + t10699;
  t10706 = t9936*t3770*t1888;
  t10710 = t10691*t5123;
  t10711 = t10706 + t10710;
  t10751 = -1.*t9936*t1732;
  t10755 = t9933*t1888*t3693;
  t10757 = t10751 + t10755;
  t10759 = -1.*t1732*t9933*t1888;
  t10760 = -1.*t9936*t3693;
  t10761 = t10759 + t10760;
  t10801 = t2662*t10761;
  t10803 = t10757*t2867;
  t10804 = t10801 + t10803;
  t10824 = t3770*t10804;
  t10827 = -1.*t7353*t9933*t5123;
  t10829 = t10824 + t10827;
  t10837 = t7353*t3770*t9933;
  t10845 = t10804*t5123;
  t10846 = t10837 + t10845;
  t10880 = -1.*t7353*t2662*t9933*t3693;
  t10887 = -1.*t7353*t1732*t9933*t2867;
  t10888 = t10880 + t10887;
  t10889 = 0.28121*t3941*t10888;
  t10891 = 0.50321*t3770*t4642*t10888;
  t10898 = -1.*t7353*t1732*t2662*t9933;
  t10899 = t7353*t9933*t3693*t2867;
  t10900 = t10898 + t10899;
  t10901 = 0.15121*t10900;
  t10902 = -0.50321*t10888*t5123*t5135;
  t10905 = t3770*t4625*t10888;
  t10906 = t10888*t5123*t5135;
  t10907 = t10905 + t10906;
  t10908 = 0.19821*t10907;
  t10936 = t7353*t1732*t2662*t9933;
  t10937 = -1.*t7353*t9933*t3693*t2867;
  t10938 = t10936 + t10937;
  t10935 = t3770*t9933*t1888;
  t10939 = t10938*t5123;
  t10941 = t10935 + t10939;
  t10945 = t3770*t10938;
  t10947 = -1.*t9933*t1888*t5123;
  t10949 = t10945 + t10947;
  t11007 = -1.*t3770*t9933*t1888;
  t11008 = -1.*t10938*t5123;
  t11010 = t11007 + t11008;
  t10674 = -1.*t9936*t7353*t3693*t3588;
  t10675 = t9936*t7353*t1732*t3751;
  t10680 = -1.*t9936*t7353*t2662*t3693;
  t10682 = -1.*t9936*t7353*t1732*t2867;
  t10683 = t10680 + t10682;
  t10684 = 0.15121*t10683;
  t10692 = 0.28121*t3941*t10691;
  t10693 = 0.28121*t9936*t1888*t5123;
  t10705 = 0.50321*t4642*t10700;
  t10721 = -0.50321*t10711*t5135;
  t10722 = t4625*t10700;
  t10735 = t10711*t5135;
  t10739 = t10722 + t10735;
  t10740 = 0.19821*t10739;
  t10749 = t10674 + t10675 + t10684 + t10692 + t10693 + t10705 + t10721 + t10740;
  t10814 = 0.28121*t7353*t9933*t5123;
  t11035 = -1.*t1732*t2662*t9933*t1888;
  t11036 = t9933*t1888*t3693*t2867;
  t11038 = t11035 + t11036;
  t11043 = t3770*t11038;
  t11044 = t11043 + t10827;
  t11047 = t11038*t5123;
  t11048 = t10837 + t11047;
  t11070 = t9936*t1732;
  t11072 = -1.*t9933*t1888*t3693;
  t11074 = t11070 + t11072;
  t11075 = t2662*t11074;
  t11078 = t10761*t2867;
  t11080 = t11075 + t11078;
  t10875 = -1.*t7353*t1732*t9933*t3588;
  t10878 = -1.*t7353*t9933*t3693*t3751;
  t10909 = t10875 + t10878 + t10889 + t10891 + t10901 + t10902 + t10908;
  t10175 = t10171*t3588;
  t10193 = t9945*t3751;
  t10303 = 0.28121*t3941*t10204;
  t10307 = 0.50321*t3770*t4642*t10204;
  t10337 = t2662*t10171;
  t10338 = t10337 + t10143;
  t10422 = 0.15121*t10338;
  t10423 = -0.50321*t10204*t5123*t5135;
  t10424 = t3770*t4625*t10204;
  t10425 = t10204*t5123*t5135;
  t10426 = t10424 + t10425;
  t10427 = 0.19821*t10426;
  t10428 = t10175 + t10193 + t10303 + t10307 + t10422 + t10423 + t10427;
  t10794 = -1.*t10761*t2867;
  t11142 = -1.*t11074*t2867;
  t11163 = t10801 + t11142;
  t10758 = t10757*t3588;
  t10763 = t10761*t3751;
  t10785 = t2662*t10757;
  t10797 = t10785 + t10794;
  t10799 = 0.15121*t10797;
  t10810 = 0.28121*t3941*t10804;
  t11221 = t1732*t9933*t1888;
  t11222 = t9936*t3693;
  t11223 = t11221 + t11222;
  t11224 = -1.*t11223*t2867;
  t11225 = t11075 + t11224;
  t10913 = -1.*t7353*t9933*t3693*t7004;
  t10914 = t7353*t1732*t9933*t7044;
  t10915 = t10913 + t10914 + t10889 + t10891 + t10901 + t10902 + t10908;
  t9950 = t9945*t7004;
  t9961 = t9959*t7044;
  t9983 = 0.28121*t3941*t9980;
  t10001 = 0.50321*t3770*t4642*t9980;
  t10108 = -1.*t2662*t9959;
  t10144 = t10108 + t10143;
  t10147 = 0.15121*t10144;
  t10148 = -0.50321*t9980*t5123*t5135;
  t10149 = t3770*t4625*t9980;
  t10151 = t9980*t5123*t5135;
  t10152 = t10149 + t10151;
  t10153 = 0.19821*t10152;
  t10154 = t9950 + t9961 + t9983 + t10001 + t10147 + t10148 + t10153;
  t11127 = t10761*t7004;
  t11129 = t11074*t7044;
  t11136 = -1.*t2662*t11074;
  t11138 = t11136 + t10794;
  t11139 = 0.15121*t11138;
  t11164 = 0.28121*t3941*t11163;
  t11167 = 0.50321*t3770*t4642*t11163;
  t11168 = -0.50321*t11163*t5123*t5135;
  t11195 = t3770*t4625*t11163;
  t11196 = t11163*t5123*t5135;
  t11197 = t11195 + t11196;
  t11198 = 0.19821*t11197;
  t11199 = t11127 + t11129 + t11139 + t11164 + t11167 + t11168 + t11198;
  t8864 = t7014 + t2998;
  t11265 = -1.*t2662*t11223;
  t11266 = t11265 + t11142;
  t11109 = 0.28121*t11080*t5123;
  t11111 = -0.50321*t4642*t11080*t5123;
  t11113 = -0.50321*t3770*t11080*t5135;
  t11114 = -1.*t4625*t11080*t5123;
  t11115 = t3770*t11080*t5135;
  t11116 = t11114 + t11115;
  t11118 = 0.19821*t11116;
  t11120 = t11109 + t11111 + t11113 + t11118;
  t11240 = 0.28121*t11225*t5123;
  t11241 = -0.50321*t4642*t11225*t5123;
  t11242 = -0.50321*t3770*t11225*t5135;
  t11244 = -1.*t4625*t11225*t5123;
  t11245 = t3770*t11225*t5135;
  t11246 = t11244 + t11245;
  t11248 = 0.19821*t11246;
  t11249 = t11240 + t11241 + t11242 + t11248;
  t10599 = -0.28121*t9936*t7353*t3770;
  t10600 = 0.28121*t10534*t5123;
  t10618 = 0.50321*t4642*t10617;
  t10619 = -0.50321*t10566*t5135;
  t10620 = t4625*t10617;
  t10622 = t10566*t5135;
  t10623 = t10620 + t10622;
  t10624 = 0.19821*t10623;
  t10625 = t10599 + t10600 + t10618 + t10619 + t10624;
  t10970 = 0.28121*t3770*t9933*t1888;
  t11006 = 0.28121*t10938*t5123;
  t11011 = 0.50321*t4642*t11010;
  t11012 = -0.50321*t10949*t5135;
  t11016 = t4625*t11010;
  t11018 = t10949*t5135;
  t11021 = t11016 + t11018;
  t11022 = 0.19821*t11021;
  t11023 = t10970 + t11006 + t11011 + t11012 + t11022;
  t11325 = t2662*t11223;
  t11326 = t11074*t2867;
  t11327 = t11325 + t11326;
  t11331 = t3770*t11327;
  t11332 = t7353*t9933*t5123;
  t11333 = t11331 + t11332;
  t11337 = -1.*t11327*t5123;
  t11338 = t10837 + t11337;
  t11372 = -1.*t3770*t11327;
  t11415 = t11372 + t10827;
  t11083 = -0.50321*t4625*t11080*t5123;
  t11084 = 0.50321*t3770*t11080*t5135;
  t11097 = t4625*t11080*t5123;
  t11099 = -1.*t3770*t11080*t5135;
  t11100 = t11097 + t11099;
  t11105 = 0.19821*t11100;
  t11107 = t11083 + t11084 + t11105;
  t11226 = -0.50321*t4625*t11225*t5123;
  t11227 = 0.50321*t3770*t11225*t5135;
  t11228 = t4625*t11225*t5123;
  t11229 = -1.*t3770*t11225*t5135;
  t11234 = t11228 + t11229;
  t11237 = 0.19821*t11234;
  t11238 = t11226 + t11227 + t11237;
  t10560 = -0.50321*t4625*t10546;
  t10574 = 0.50321*t10566*t5135;
  t10575 = t4625*t10546;
  t10576 = -1.*t10566*t5135;
  t10590 = t10575 + t10576;
  t10594 = 0.19821*t10590;
  t10597 = t10560 + t10574 + t10594;
  t10944 = -0.50321*t4625*t10941;
  t10950 = 0.50321*t10949*t5135;
  t10951 = t4625*t10941;
  t10952 = -1.*t10949*t5135;
  t10954 = t10951 + t10952;
  t10955 = 0.19821*t10954;
  t10956 = t10944 + t10950 + t10955;
  t11334 = -0.50321*t4625*t11333;
  t11341 = 0.50321*t11338*t5135;
  t11342 = t4625*t11333;
  t11348 = -1.*t11338*t5135;
  t11355 = t11342 + t11348;
  t11360 = 0.19821*t11355;
  t11361 = t11334 + t11341 + t11360;
  t11477 = -1.*t7353*t3770*t9933;
  t11480 = t11327*t5123;
  t11481 = t11477 + t11480;
  t11578 = t10761*t3588;
  t11581 = t11074*t3751;
  t11583 = 0.28121*t3941*t11080;
  t11585 = 0.50321*t3770*t4642*t11080;
  t11586 = 0.15121*t11163;
  t11603 = -0.50321*t11080*t5123*t5135;
  t11608 = t3770*t4625*t11080;
  t11610 = t11080*t5123*t5135;
  t11611 = t11608 + t11610;
  t11613 = 0.19821*t11611;
  t11617 = t11578 + t11581 + t11583 + t11585 + t11586 + t11603 + t11613;
  t11619 = t11074*t7004;
  t11620 = t11223*t7044;
  t11625 = 0.28121*t3941*t11225;
  t11626 = 0.50321*t3770*t4642*t11225;
  t11627 = 0.15121*t11266;
  t11632 = -0.50321*t11225*t5123*t5135;
  t11634 = t3770*t4625*t11225;
  t11635 = t11225*t5123*t5135;
  t11636 = t11634 + t11635;
  t11637 = 0.19821*t11636;
  t11638 = t11619 + t11620 + t11625 + t11626 + t11627 + t11632 + t11637;
  t11661 = -0.50321*t4625*t11481;
  t11663 = 0.50321*t11333*t5135;
  t11665 = t4625*t11481;
  t11668 = -1.*t11333*t5135;
  t11669 = t11665 + t11668;
  t11670 = 0.19821*t11669;
  t11671 = t11661 + t11663 + t11670;
  t11643 = -0.28121*t7353*t3770*t9933;
  t11644 = 0.28121*t11327*t5123;
  t11645 = 0.50321*t4642*t11338;
  t11646 = -0.50321*t11333*t5135;
  t11648 = t4625*t11338;
  t11652 = t11333*t5135;
  t11653 = t11648 + t11652;
  t11654 = 0.19821*t11653;
  t11659 = t11643 + t11644 + t11645 + t11646 + t11654;
  t11533 = -1.*t7353*t9933*t3693*t3588;
  t11534 = t7353*t1732*t9933*t3751;
  t11536 = 0.15121*t10888;
  t11540 = 0.28121*t3941*t10938;
  t11541 = 0.28121*t9933*t1888*t5123;
  t11542 = 0.50321*t4642*t10949;
  t11556 = -0.50321*t10941*t5135;
  t11558 = t4625*t10949;
  t11559 = t10941*t5135;
  t11560 = t11558 + t11559;
  t11571 = 0.19821*t11560;
  t11575 = t11533 + t11534 + t11536 + t11540 + t11541 + t11542 + t11556 + t11571;
  t11500 = t9945*t3588;
  t11501 = t9959*t3751;
  t11503 = 0.15121*t9980;
  t11504 = 0.28121*t3941*t10534;
  t11505 = -0.28121*t9936*t7353*t5123;
  t11506 = 0.50321*t4642*t10566;
  t11507 = -0.50321*t10546*t5135;
  t11508 = t4625*t10566;
  t11511 = t10546*t5135;
  t11512 = t11508 + t11511;
  t11515 = 0.19821*t11512;
  t11520 = t11500 + t11501 + t11503 + t11504 + t11505 + t11506 + t11507 + t11515;
  t11691 = t9936*t7353*t2662*t3693;
  t11696 = t9936*t7353*t1732*t2867;
  t11698 = t11691 + t11696;
  t11699 = 0.28121*t3941*t11698;
  t11700 = 0.50321*t3770*t4642*t11698;
  t11703 = 0.15121*t10691;
  t11705 = -0.50321*t11698*t5123*t5135;
  t11706 = t3770*t4625*t11698;
  t11708 = t11698*t5123*t5135;
  t11709 = t11706 + t11708;
  t11710 = 0.19821*t11709;
  t11731 = -1.*t9936*t7353*t1732*t2662;
  t11736 = t9936*t7353*t3693*t2867;
  t11743 = t11731 + t11736;
  t11726 = -1.*t9936*t3770*t1888;
  t11744 = t11743*t5123;
  t11745 = t11726 + t11744;
  t11749 = t3770*t11743;
  t11750 = t9936*t1888*t5123;
  t11752 = t11749 + t11750;
  t11778 = -1.*t11743*t5123;
  t11780 = t10706 + t11778;
  t11813 = t9936*t1732*t2662*t1888;
  t11814 = -1.*t9936*t1888*t3693*t2867;
  t11817 = t11813 + t11814;
  t11821 = t3770*t11817;
  t11822 = t11821 + t10565;
  t11869 = t11817*t5123;
  t11877 = t10434 + t11869;
  t11914 = t1732*t9933;
  t11915 = t9936*t1888*t3693;
  t11916 = t11914 + t11915;
  t11918 = t2662*t11916;
  t11919 = t9959*t2867;
  t11920 = t11918 + t11919;
  t11688 = t9936*t7353*t1732*t3588;
  t11689 = t9936*t7353*t3693*t3751;
  t11711 = t11688 + t11689 + t11699 + t11700 + t11703 + t11705 + t11710;
  t11974 = -1.*t11916*t2867;
  t11975 = t10435 + t11974;
  t11990 = -1.*t10171*t2867;
  t11991 = t11918 + t11990;
  t11719 = t9936*t7353*t3693*t7004;
  t11720 = -1.*t9936*t7353*t1732*t7044;
  t11722 = t11719 + t11720 + t11699 + t11700 + t11703 + t11705 + t11710;
  t11968 = t9959*t7004;
  t11969 = t11916*t7044;
  t11970 = -1.*t2662*t11916;
  t11972 = t11970 + t9974;
  t11973 = 0.15121*t11972;
  t11976 = 0.28121*t3941*t11975;
  t11977 = 0.50321*t3770*t4642*t11975;
  t11979 = -0.50321*t11975*t5123*t5135;
  t11980 = t3770*t4625*t11975;
  t11982 = t11975*t5123*t5135;
  t11983 = t11980 + t11982;
  t11986 = 0.19821*t11983;
  t11987 = t11968 + t11969 + t11973 + t11976 + t11977 + t11979 + t11986;
  t12052 = -1.*t2662*t10171;
  t12053 = t12052 + t11974;
  t11932 = 0.28121*t11920*t5123;
  t11936 = -0.50321*t4642*t11920*t5123;
  t11938 = -0.50321*t3770*t11920*t5135;
  t11940 = -1.*t4625*t11920*t5123;
  t11941 = t3770*t11920*t5135;
  t11943 = t11940 + t11941;
  t11944 = 0.19821*t11943;
  t11945 = t11932 + t11936 + t11938 + t11944;
  t12005 = 0.28121*t11991*t5123;
  t12006 = -0.50321*t4642*t11991*t5123;
  t12007 = -0.50321*t3770*t11991*t5135;
  t12008 = -1.*t4625*t11991*t5123;
  t12011 = t3770*t11991*t5135;
  t12012 = t12008 + t12011;
  t12042 = 0.19821*t12012;
  t12043 = t12005 + t12006 + t12007 + t12042;
  t11772 = -0.28121*t9936*t3770*t1888;
  t11773 = 0.28121*t11743*t5123;
  t11782 = 0.50321*t4642*t11780;
  t11789 = -0.50321*t11752*t5135;
  t11792 = t4625*t11780;
  t11793 = t11752*t5135;
  t11795 = t11792 + t11793;
  t11797 = 0.19821*t11795;
  t11798 = t11772 + t11773 + t11782 + t11789 + t11797;
  t12073 = t11916*t2867;
  t12075 = t10337 + t12073;
  t12076 = t3770*t12075;
  t12077 = -1.*t9936*t7353*t5123;
  t12078 = t12076 + t12077;
  t12081 = -1.*t12075*t5123;
  t12082 = t10434 + t12081;
  t12101 = -1.*t3770*t12075;
  t12102 = t12101 + t10565;
  t11922 = -0.50321*t4625*t11920*t5123;
  t11924 = 0.50321*t3770*t11920*t5135;
  t11925 = t4625*t11920*t5123;
  t11926 = -1.*t3770*t11920*t5135;
  t11927 = t11925 + t11926;
  t11929 = 0.19821*t11927;
  t11930 = t11922 + t11924 + t11929;
  t11992 = -0.50321*t4625*t11991*t5123;
  t11993 = 0.50321*t3770*t11991*t5135;
  t11994 = t4625*t11991*t5123;
  t11995 = -1.*t3770*t11991*t5135;
  t11998 = t11994 + t11995;
  t11999 = 0.19821*t11998;
  t12002 = t11992 + t11993 + t11999;
  t11746 = -0.50321*t4625*t11745;
  t11753 = 0.50321*t11752*t5135;
  t11755 = t4625*t11745;
  t11756 = -1.*t11752*t5135;
  t11762 = t11755 + t11756;
  t11764 = 0.19821*t11762;
  t11768 = t11746 + t11753 + t11764;
  t12079 = -0.50321*t4625*t12078;
  t12087 = 0.50321*t12082*t5135;
  t12089 = t4625*t12078;
  t12090 = -1.*t12082*t5135;
  t12092 = t12089 + t12090;
  t12093 = 0.19821*t12092;
  t12094 = t12079 + t12087 + t12093;
  t12132 = t12075*t5123;
  t12133 = t10607 + t12132;
  p_output1[0]=(t8069 + t8075 + t8150 + t8243 + t8244 + 0.50321*t4642*t8255 - 0.50321*t5135*t8276 + 0.19821*(t4625*t8255 + t5135*t8276))*var2[4] + t5690*var2[5] + t7050*var2[6] + t8059*var2[7] + t7738*var2[8];
  p_output1[1]=t8503 + t8602 + t5690*var2[4] + (t8069 + t8075 + t8150 + t8243 + t8655 + t8677 + t8735)*var2[5] + t8772*var2[6];
  p_output1[2]=t8503 + t8602 + t7050*var2[4] + t8772*var2[5] + (t8150 + t8243 + t8655 + t8677 + t8735 + t8768 + t1732*t7353*t8864)*var2[6];
  p_output1[3]=t8059*var2[4] + t8597*var2[5] + t8597*var2[6] + (t8244 + 0.28121*t3770*t8953 - 0.50321*t5135*t9057 + 0.50321*t4642*t9145 + 0.19821*(t5135*t9057 + t4625*t9145))*var2[7] + t9106*var2[8];
  p_output1[4]=t7738*var2[4] + t8497*var2[5] + t8497*var2[6] + t9106*var2[7] + (0.50321*t4625*t8970 + 0.50321*t5135*t9311 + 0.19821*(-1.*t4625*t8970 - 1.*t5135*t9311))*var2[8];
  p_output1[5]=1.;
  p_output1[6]=t1888*t3588*t3693 - 1.*t1732*t1888*t3751 + 0.15121*t4008 + 0.28121*t5123*t7353 + 0.28121*t3941*t7397 - 0.50321*t5135*t7416 + 0.50321*t4642*t7632 + 0.19821*(t5135*t7416 + t4625*t7632);
  p_output1[7]=-1.*t1732*t3588*t7353 - 1.*t3693*t3751*t7353 + t9404 + t9419 + t9420 + t9421 + t9463;
  p_output1[8]=-1.*t3693*t7004*t7353 + t1732*t7044*t7353 + t9404 + t9419 + t9420 + t9421 + t9463;
  p_output1[9]=0.28121*t1888*t3770 + 0.28121*t5123*t8953 - 0.50321*t5135*t8970 + 0.50321*t4642*t9057 + 0.19821*(t5135*t8970 + t4625*t9057);
  p_output1[10]=0.50321*t5135*t8970 - 0.50321*t4625*t9311 + 0.19821*(-1.*t5135*t8970 + t4625*t9311);
  p_output1[11]=(t10758 + t10763 + t10799 + t10810 + t10814 + 0.50321*t10829*t4642 - 0.50321*t10846*t5135 + 0.19821*(t10829*t4625 + t10846*t5135))*var2[3] + t10749*var2[4] + t10428*var2[5] + t10154*var2[6] + t10625*var2[7] + t10597*var2[8];
  p_output1[12]=t10749*var2[3] + (t10814 + 0.28121*t11038*t3941 + 0.50321*t11044*t4642 - 0.50321*t11048*t5135 + 0.19821*(t11044*t4625 + t11048*t5135) + t1888*t3588*t3693*t9933 - 1.*t1732*t1888*t3751*t9933 + 0.15121*(t1732*t1888*t2867*t9933 + t1888*t2662*t3693*t9933))*var2[4] + t10909*var2[5] + t10915*var2[6] + t11023*var2[7] + t10956*var2[8];
  p_output1[13]=t10428*var2[3] + t10909*var2[4] + (t10758 + t10763 + t10799 + t10810 + 0.50321*t10804*t3770*t4642 - 0.50321*t10804*t5123*t5135 + 0.19821*(t10804*t3770*t4625 + t10804*t5123*t5135))*var2[5] + t11199*var2[6] + t11120*var2[7] + t11107*var2[8];
  p_output1[14]=t10154*var2[3] + t10915*var2[4] + t11199*var2[5] + (t11129 + 0.15121*(t11136 + t11223*t2867) + 0.28121*t11266*t3941 + 0.50321*t11266*t3770*t4642 - 0.50321*t11266*t5123*t5135 + 0.19821*(t11266*t3770*t4625 + t11266*t5123*t5135) + t11223*t8864)*var2[6] + t11249*var2[7] + t11238*var2[8];
  p_output1[15]=t10625*var2[3] + t11023*var2[4] + t11120*var2[5] + t11249*var2[6] + (t10814 + 0.28121*t11327*t3770 + 0.50321*t11415*t4642 - 0.50321*t11338*t5135 + 0.19821*(t11415*t4625 + t11338*t5135))*var2[7] + t11361*var2[8];
  p_output1[16]=t10597*var2[3] + t10956*var2[4] + t11107*var2[5] + t11238*var2[6] + t11361*var2[7] + (0.50321*t11333*t4625 + 0.50321*t11481*t5135 + 0.19821*(-1.*t11333*t4625 - 1.*t11481*t5135))*var2[8];
  p_output1[17]=1.;
  p_output1[18]=t11520;
  p_output1[19]=t11575;
  p_output1[20]=t11617;
  p_output1[21]=t11638;
  p_output1[22]=t11659;
  p_output1[23]=t11671;
  p_output1[24]=t11520*var2[3] + t11575*var2[4] + t11617*var2[5] + t11638*var2[6] + t11659*var2[7] + t11671*var2[8];
  p_output1[25]=t11575*var2[3] + (t11505 + 0.28121*t11817*t3941 + 0.50321*t11822*t4642 - 0.50321*t11877*t5135 + 0.19821*(t11822*t4625 + t11877*t5135) - 1.*t1888*t3588*t3693*t9936 + t1732*t1888*t3751*t9936 + 0.15121*(-1.*t1732*t1888*t2867*t9936 - 1.*t1888*t2662*t3693*t9936))*var2[4] + t11711*var2[5] + t11722*var2[6] + t11798*var2[7] + t11768*var2[8];
  p_output1[26]=t11617*var2[3] + t11711*var2[4] + (t11500 + t11501 + t11503 + t11504 + 0.50321*t10534*t3770*t4642 - 0.50321*t10534*t5123*t5135 + 0.19821*(t10534*t3770*t4625 + t10534*t5123*t5135))*var2[5] + t11987*var2[6] + t11945*var2[7] + t11930*var2[8];
  p_output1[27]=t11638*var2[3] + t11722*var2[4] + t11987*var2[5] + (t11969 + 0.15121*(t10194 + t11970) + 0.28121*t12053*t3941 + 0.50321*t12053*t3770*t4642 - 0.50321*t12053*t5123*t5135 + 0.19821*(t12053*t3770*t4625 + t12053*t5123*t5135) + t10171*t8864)*var2[6] + t12043*var2[7] + t12002*var2[8];
  p_output1[28]=t11659*var2[3] + t11798*var2[4] + t11945*var2[5] + t12043*var2[6] + (t11505 + 0.28121*t12075*t3770 + 0.50321*t12102*t4642 - 0.50321*t12082*t5135 + 0.19821*(t12102*t4625 + t12082*t5135))*var2[7] + t12094*var2[8];
  p_output1[29]=t11671*var2[3] + t11768*var2[4] + t11930*var2[5] + t12002*var2[6] + t12094*var2[7] + (0.50321*t12078*t4625 + 0.50321*t12133*t5135 + 0.19821*(-1.*t12078*t4625 - 1.*t12133*t5135))*var2[8];
  p_output1[30]=1.;
  p_output1[31]=0.15121*t11225 + t11074*t3588 + t11223*t3751 + 0.28121*t11327*t3941 + 0.50321*t11333*t4642 - 0.50321*t11481*t5135 + 0.19821*(t11342 + t11481*t5135) - 0.28121*t5123*t7353*t9933;
  p_output1[32]=0.15121*t11698 + 0.28121*t11743*t3941 + 0.50321*t11752*t4642 - 0.50321*t11745*t5135 + 0.19821*(t11752*t4625 + t11745*t5135) - 0.28121*t1888*t5123*t9936 + t3588*t3693*t7353*t9936 - 1.*t1732*t3751*t7353*t9936;
  p_output1[33]=0.15121*t11975 + t11916*t3751 + 0.28121*t11920*t3941 + 0.50321*t11920*t3770*t4642 - 0.50321*t11920*t5123*t5135 + 0.19821*(t11920*t3770*t4625 + t11920*t5123*t5135) + t3588*t9959;
  p_output1[34]=0.15121*t12053 + 0.28121*t11991*t3941 + 0.50321*t11991*t3770*t4642 - 0.50321*t11991*t5123*t5135 + 0.19821*(t11991*t3770*t4625 + t11991*t5123*t5135) + t11916*t7004 + t10171*t7044;
  p_output1[35]=0.50321*t12082*t4642 + 0.28121*t12075*t5123 - 0.50321*t12078*t5135 + 0.19821*(t12082*t4625 + t12078*t5135) + 0.28121*t3770*t7353*t9936;
  p_output1[36]=-0.50321*t12133*t4625 + 0.50321*t12078*t5135 + 0.19821*(t12133*t4625 - 1.*t12078*t5135);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 37, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_initial_swing_velocity_FlFoot_DiagonalStance.hh"

namespace DiagonalStance
{

void J_initial_swing_velocity_FlFoot_DiagonalStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
