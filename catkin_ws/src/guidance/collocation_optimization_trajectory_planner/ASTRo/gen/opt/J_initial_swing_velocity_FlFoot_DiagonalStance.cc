/*
 * Automatically Generated from Mathematica.
 * Sat 28 May 2022 16:59:54 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t960;
  double t1081;
  double t3681;
  double t5083;
  double t5085;
  double t5104;
  double t5699;
  double t880;
  double t6133;
  double t6265;
  double t6316;
  double t6473;
  double t6937;
  double t7057;
  double t7068;
  double t5779;
  double t6254;
  double t6264;
  double t6788;
  double t6985;
  double t6989;
  double t6996;
  double t7007;
  double t7011;
  double t7018;
  double t7025;
  double t7077;
  double t7090;
  double t7118;
  double t7119;
  double t7138;
  double t7596;
  double t7598;
  double t7600;
  double t7540;
  double t7587;
  double t7606;
  double t7615;
  double t7619;
  double t7620;
  double t7621;
  double t8836;
  double t8855;
  double t8903;
  double t5240;
  double t5269;
  double t5966;
  double t9808;
  double t9887;
  double t9888;
  double t9902;
  double t9909;
  double t9925;
  double t10031;
  double t10032;
  double t10045;
  double t10197;
  double t10248;
  double t10261;
  double t5400;
  double t6006;
  double t7164;
  double t9650;
  double t9651;
  double t9658;
  double t9663;
  double t9675;
  double t9793;
  double t9899;
  double t7266;
  double t7270;
  double t7325;
  double t7326;
  double t10465;
  double t10467;
  double t10479;
  double t10487;
  double t10489;
  double t10738;
  double t10262;
  double t10263;
  double t10269;
  double t10277;
  double t10279;
  double t10281;
  double t10282;
  double t10286;
  double t10297;
  double t10300;
  double t10392;
  double t10403;
  double t10405;
  double t10413;
  double t10416;
  double t10421;
  double t10441;
  double t7273;
  double t7337;
  double t7386;
  double t10749;
  double t10748;
  double t10753;
  double t8795;
  double t8812;
  double t8906;
  double t8907;
  double t8920;
  double t9438;
  double t9442;
  double t9546;
  double t9648;
  double t10894;
  double t10895;
  double t10897;
  double t10901;
  double t10902;
  double t10953;
  double t11042;
  double t11055;
  double t9901;
  double t11234;
  double t11235;
  double t7618;
  double t7622;
  double t7866;
  double t8140;
  double t8198;
  double t8512;
  double t8598;
  double t11037;
  double t11064;
  double t11110;
  double t11125;
  double t11173;
  double t11182;
  double t11191;
  double t11338;
  double t11340;
  double t11347;
  double t11533;
  double t11538;
  double t11540;
  double t11541;
  double t11542;
  double t11543;
  double t11545;
  double t11546;
  double t11587;
  double t11584;
  double t11585;
  double t11589;
  double t11593;
  double t11606;
  double t11614;
  double t11632;
  double t11634;
  double t11637;
  double t11640;
  double t11703;
  double t11704;
  double t11705;
  double t11709;
  double t11715;
  double t11665;
  double t11775;
  double t11794;
  double t11797;
  double t11773;
  double t11805;
  double t11809;
  double t11813;
  double t11816;
  double t11832;
  double t11917;
  double t11918;
  double t11922;
  double t11943;
  double t11944;
  double t11945;
  double t11948;
  double t11950;
  double t11951;
  double t11953;
  double t11954;
  double t11955;
  double t12018;
  double t12028;
  double t12035;
  double t12051;
  double t12054;
  double t12058;
  double t12111;
  double t12120;
  double t12122;
  double t12163;
  double t12183;
  double t12203;
  double t12221;
  double t12222;
  double t12228;
  double t12264;
  double t12270;
  double t12271;
  double t12272;
  double t12273;
  double t12274;
  double t12277;
  double t12290;
  double t12291;
  double t12292;
  double t12294;
  double t12300;
  double t12304;
  double t12305;
  double t12330;
  double t12337;
  double t12347;
  double t12329;
  double t12348;
  double t12353;
  double t12358;
  double t12366;
  double t12370;
  double t12387;
  double t12389;
  double t12390;
  double t11934;
  double t11936;
  double t11937;
  double t11938;
  double t11940;
  double t11941;
  double t11946;
  double t11947;
  double t11952;
  double t11970;
  double t11972;
  double t11974;
  double t11979;
  double t12001;
  double t12002;
  double t12128;
  double t12431;
  double t12432;
  double t12433;
  double t12435;
  double t12437;
  double t12439;
  double t12442;
  double t12474;
  double t12479;
  double t12482;
  double t12486;
  double t12489;
  double t12497;
  double t12260;
  double t12261;
  double t12308;
  double t11706;
  double t11708;
  double t11718;
  double t11721;
  double t11724;
  double t11725;
  double t11730;
  double t11733;
  double t11734;
  double t11744;
  double t11746;
  double t11748;
  double t11756;
  double t12073;
  double t12592;
  double t12598;
  double t12042;
  double t12060;
  double t12061;
  double t12097;
  double t12109;
  double t12125;
  double t12668;
  double t12669;
  double t12674;
  double t12679;
  double t12681;
  double t12312;
  double t12314;
  double t12319;
  double t11597;
  double t11633;
  double t11641;
  double t11661;
  double t11664;
  double t11666;
  double t11669;
  double t11670;
  double t11677;
  double t11680;
  double t11688;
  double t11689;
  double t11694;
  double t12582;
  double t12586;
  double t12588;
  double t12589;
  double t12590;
  double t12606;
  double t12607;
  double t12609;
  double t12611;
  double t12613;
  double t12619;
  double t12622;
  double t12623;
  double t10836;
  double t12767;
  double t12777;
  double t12540;
  double t12541;
  double t12544;
  double t12545;
  double t12546;
  double t12551;
  double t12552;
  double t12553;
  double t12718;
  double t12726;
  double t12734;
  double t12735;
  double t12740;
  double t12742;
  double t12745;
  double t12746;
  double t11914;
  double t11916;
  double t11923;
  double t11924;
  double t11925;
  double t11928;
  double t11930;
  double t11931;
  double t11932;
  double t12385;
  double t12386;
  double t12394;
  double t12396;
  double t12397;
  double t12398;
  double t12399;
  double t12401;
  double t12406;
  double t12895;
  double t12906;
  double t12915;
  double t12916;
  double t12929;
  double t12931;
  double t12958;
  double t12960;
  double t12990;
  double t12991;
  double t12500;
  double t12502;
  double t12505;
  double t12506;
  double t12514;
  double t12517;
  double t12520;
  double t12682;
  double t12684;
  double t12691;
  double t12692;
  double t12694;
  double t12696;
  double t12697;
  double t11812;
  double t11836;
  double t11849;
  double t11851;
  double t11861;
  double t11863;
  double t11866;
  double t12355;
  double t12371;
  double t12372;
  double t12373;
  double t12374;
  double t12375;
  double t12377;
  double t12942;
  double t12972;
  double t12975;
  double t12977;
  double t12979;
  double t12980;
  double t12983;
  double t13027;
  double t13028;
  double t13029;
  double t13165;
  double t13166;
  double t13168;
  double t13172;
  double t13173;
  double t13174;
  double t13179;
  double t13180;
  double t13181;
  double t13183;
  double t13188;
  double t13192;
  double t13195;
  double t13198;
  double t13199;
  double t13200;
  double t13201;
  double t13202;
  double t13212;
  double t13214;
  double t13217;
  double t13220;
  double t13275;
  double t13301;
  double t13310;
  double t13312;
  double t13316;
  double t13317;
  double t13319;
  double t13221;
  double t13224;
  double t13236;
  double t13243;
  double t13246;
  double t13247;
  double t13249;
  double t13251;
  double t13252;
  double t13121;
  double t13124;
  double t13125;
  double t13127;
  double t13131;
  double t13135;
  double t13136;
  double t13139;
  double t13144;
  double t13150;
  double t13151;
  double t13152;
  double t13060;
  double t13062;
  double t13065;
  double t13067;
  double t13069;
  double t13073;
  double t13080;
  double t13081;
  double t13094;
  double t13100;
  double t13102;
  double t13107;
  double t13378;
  double t13379;
  double t13396;
  double t13397;
  double t13402;
  double t13417;
  double t13422;
  double t13426;
  double t13439;
  double t13441;
  double t13443;
  double t13510;
  double t13511;
  double t13512;
  double t13502;
  double t13523;
  double t13524;
  double t13527;
  double t13528;
  double t13530;
  double t13542;
  double t13543;
  double t13564;
  double t13565;
  double t13566;
  double t13569;
  double t13570;
  double t13572;
  double t13574;
  double t13587;
  double t13589;
  double t13592;
  double t13601;
  double t13602;
  double t13604;
  double t13370;
  double t13374;
  double t13444;
  double t13682;
  double t13683;
  double t13706;
  double t13707;
  double t13476;
  double t13478;
  double t13495;
  double t13672;
  double t13673;
  double t13676;
  double t13678;
  double t13679;
  double t13686;
  double t13687;
  double t13688;
  double t13692;
  double t13693;
  double t13694;
  double t13696;
  double t13700;
  double t13758;
  double t13760;
  double t13625;
  double t13631;
  double t13632;
  double t13633;
  double t13635;
  double t13638;
  double t13642;
  double t13643;
  double t13728;
  double t13731;
  double t13732;
  double t13735;
  double t13736;
  double t13737;
  double t13739;
  double t13741;
  double t13540;
  double t13541;
  double t13546;
  double t13547;
  double t13548;
  double t13549;
  double t13550;
  double t13552;
  double t13553;
  double t13810;
  double t13812;
  double t13813;
  double t13817;
  double t13818;
  double t13820;
  double t13822;
  double t13903;
  double t13904;
  double t13607;
  double t13609;
  double t13611;
  double t13615;
  double t13617;
  double t13618;
  double t13620;
  double t13711;
  double t13713;
  double t13716;
  double t13718;
  double t13719;
  double t13721;
  double t13722;
  double t13525;
  double t13532;
  double t13533;
  double t13534;
  double t13536;
  double t13537;
  double t13538;
  double t13819;
  double t13854;
  double t13863;
  double t13869;
  double t13872;
  double t13889;
  double t13892;
  double t13994;
  double t14006;
  t960 = Sin(var1[4]);
  t1081 = Cos(var1[6]);
  t3681 = -1.*t1081;
  t5083 = 1. + t3681;
  t5085 = 0.15121*t5083;
  t5104 = Sin(var1[6]);
  t5699 = Sin(var1[5]);
  t880 = Cos(var1[5]);
  t6133 = Cos(var1[7]);
  t6265 = t1081*t960*t5699;
  t6316 = t880*t960*t5104;
  t6473 = t6265 + t6316;
  t6937 = Cos(var1[8]);
  t7057 = Sin(var1[7]);
  t7068 = Sin(var1[8]);
  t5779 = 0.15121*t5104;
  t6254 = -1.*t6133;
  t6264 = 1. + t6254;
  t6788 = 0.28121*t6264*t6473;
  t6985 = -1.*t6937;
  t6989 = 1. + t6985;
  t6996 = 0.50321*t6133*t6989*t6473;
  t7007 = t880*t1081*t960;
  t7011 = -1.*t960*t5699*t5104;
  t7018 = t7007 + t7011;
  t7025 = 0.15121*t7018;
  t7077 = -0.50321*t6473*t7057*t7068;
  t7090 = t6133*t6937*t6473;
  t7118 = t6473*t7057*t7068;
  t7119 = t7090 + t7118;
  t7138 = 0.19821*t7119;
  t7596 = -1.*t880*t1081*t960;
  t7598 = t960*t5699*t5104;
  t7600 = t7596 + t7598;
  t7540 = Cos(var1[4]);
  t7587 = t7540*t6133;
  t7606 = t7600*t7057;
  t7615 = t7587 + t7606;
  t7619 = t6133*t7600;
  t7620 = -1.*t7540*t7057;
  t7621 = t7619 + t7620;
  t8836 = -1.*t7540*t6133;
  t8855 = -1.*t7600*t7057;
  t8903 = t8836 + t8855;
  t5240 = -0.15121*t5104;
  t5269 = t5085 + t5240;
  t5966 = t5085 + t5779;
  t9808 = -1.*t7540*t880*t1081;
  t9887 = t7540*t5699*t5104;
  t9888 = t9808 + t9887;
  t9902 = t6133*t9888;
  t9909 = t960*t7057;
  t9925 = t9902 + t9909;
  t10031 = -1.*t6133*t960;
  t10032 = t9888*t7057;
  t10045 = t10031 + t10032;
  t10197 = -1.*t7540*t1081*t5699;
  t10248 = -1.*t7540*t880*t5104;
  t10261 = t10197 + t10248;
  t5400 = t880*t960*t5269;
  t6006 = t960*t5699*t5966;
  t7164 = t5400 + t6006 + t6788 + t6996 + t7025 + t7077 + t7138;
  t9650 = t7540*t5699*t5269;
  t9651 = -1.*t7540*t880*t5966;
  t9658 = t7540*t1081*t5699;
  t9663 = t7540*t880*t5104;
  t9675 = t9658 + t9663;
  t9793 = 0.15121*t9675;
  t9899 = 0.28121*t6264*t9888;
  t7266 = -0.15121*t1081;
  t7270 = t7266 + t5779;
  t7325 = 0.15121*t1081;
  t7326 = t7325 + t5779;
  t10465 = 0.50321*t6133*t6989*t9888;
  t10467 = -0.50321*t9888*t7057*t7068;
  t10479 = t6133*t6937*t9888;
  t10487 = t9888*t7057*t7068;
  t10489 = t10479 + t10487;
  t10738 = 0.19821*t10489;
  t10262 = -0.50321*t6937*t10261*t7057;
  t10263 = 0.50321*t6133*t10261*t7068;
  t10269 = t6937*t10261*t7057;
  t10277 = -1.*t6133*t10261*t7068;
  t10279 = t10269 + t10277;
  t10281 = 0.19821*t10279;
  t10282 = t10262 + t10263 + t10281;
  t10286 = var2[8]*t10282;
  t10297 = 0.28121*t10261*t7057;
  t10300 = -0.50321*t6989*t10261*t7057;
  t10392 = -0.50321*t6133*t10261*t7068;
  t10403 = -1.*t6937*t10261*t7057;
  t10405 = t6133*t10261*t7068;
  t10413 = t10403 + t10405;
  t10416 = 0.19821*t10413;
  t10421 = t10297 + t10300 + t10392 + t10416;
  t10441 = var2[7]*t10421;
  t7273 = t960*t5699*t7270;
  t7337 = -1.*t880*t960*t7326;
  t7386 = t7273 + t7337 + t6788 + t6996 + t7025 + t7077 + t7138;
  t10749 = -1.*t7540*t5699*t7326;
  t10748 = -1.*t7540*t880*t7270;
  t10753 = t10748 + t10749 + t9793 + t9899 + t10465 + t10467 + t10738;
  t8795 = 0.28121*t7540*t6133;
  t8812 = 0.28121*t7600*t7057;
  t8906 = 0.50321*t6989*t8903;
  t8907 = -0.50321*t7621*t7068;
  t8920 = t6937*t8903;
  t9438 = t7621*t7068;
  t9442 = t8920 + t9438;
  t9546 = 0.19821*t9442;
  t9648 = t8795 + t8812 + t8906 + t8907 + t9546;
  t10894 = t7540*t880*t1081;
  t10895 = -1.*t7540*t5699*t5104;
  t10897 = t10894 + t10895;
  t10901 = t6133*t10897;
  t10902 = -1.*t960*t7057;
  t10953 = t10901 + t10902;
  t11042 = -1.*t10897*t7057;
  t11055 = t10031 + t11042;
  t9901 = -0.28121*t960*t7057;
  t11234 = -1.*t6133*t10897;
  t11235 = t11234 + t9909;
  t7618 = -0.50321*t6937*t7615;
  t7622 = 0.50321*t7621*t7068;
  t7866 = t6937*t7615;
  t8140 = -1.*t7621*t7068;
  t8198 = t7866 + t8140;
  t8512 = 0.19821*t8198;
  t8598 = t7618 + t7622 + t8512;
  t11037 = -0.50321*t6937*t10953;
  t11064 = 0.50321*t11055*t7068;
  t11110 = t6937*t10953;
  t11125 = -1.*t11055*t7068;
  t11173 = t11110 + t11125;
  t11182 = 0.19821*t11173;
  t11191 = t11037 + t11064 + t11182;
  t11338 = t6133*t960;
  t11340 = t10897*t7057;
  t11347 = t11338 + t11340;
  t11533 = 0.28121*t6264*t10261;
  t11538 = 0.50321*t6133*t6989*t10261;
  t11540 = 0.15121*t9888;
  t11541 = -0.50321*t10261*t7057*t7068;
  t11542 = t6133*t6937*t10261;
  t11543 = t10261*t7057*t7068;
  t11545 = t11542 + t11543;
  t11546 = 0.19821*t11545;
  t11587 = Cos(var1[3]);
  t11584 = Sin(var1[3]);
  t11585 = -1.*t880*t11584;
  t11589 = -1.*t11587*t960*t5699;
  t11593 = t11585 + t11589;
  t11606 = t11587*t880*t960;
  t11614 = -1.*t11584*t5699;
  t11632 = t11606 + t11614;
  t11634 = t1081*t11593;
  t11637 = -1.*t11632*t5104;
  t11640 = t11634 + t11637;
  t11703 = -1.*t11587*t880*t960;
  t11704 = t11584*t5699;
  t11705 = t11703 + t11704;
  t11709 = t11705*t5104;
  t11715 = t11634 + t11709;
  t11665 = -1.*t11593*t5104;
  t11775 = t1081*t11632;
  t11794 = t11593*t5104;
  t11797 = t11775 + t11794;
  t11773 = -1.*t11587*t7540*t6133;
  t11805 = t11797*t7057;
  t11809 = t11773 + t11805;
  t11813 = t6133*t11797;
  t11816 = t11587*t7540*t7057;
  t11832 = t11813 + t11816;
  t11917 = t11587*t7540*t6133;
  t11918 = -1.*t11797*t7057;
  t11922 = t11917 + t11918;
  t11943 = t11587*t7540*t880*t1081;
  t11944 = -1.*t11587*t7540*t5699*t5104;
  t11945 = t11943 + t11944;
  t11948 = t6133*t11945;
  t11950 = -1.*t11587*t960*t7057;
  t11951 = t11948 + t11950;
  t11953 = t11587*t6133*t960;
  t11954 = t11945*t7057;
  t11955 = t11953 + t11954;
  t12018 = -1.*t11587*t880;
  t12028 = t11584*t960*t5699;
  t12035 = t12018 + t12028;
  t12051 = -1.*t880*t11584*t960;
  t12054 = -1.*t11587*t5699;
  t12058 = t12051 + t12054;
  t12111 = t1081*t12058;
  t12120 = t12035*t5104;
  t12122 = t12111 + t12120;
  t12163 = t6133*t12122;
  t12183 = -1.*t7540*t11584*t7057;
  t12203 = t12163 + t12183;
  t12221 = t7540*t6133*t11584;
  t12222 = t12122*t7057;
  t12228 = t12221 + t12222;
  t12264 = -1.*t7540*t1081*t11584*t5699;
  t12270 = -1.*t7540*t880*t11584*t5104;
  t12271 = t12264 + t12270;
  t12272 = 0.28121*t6264*t12271;
  t12273 = 0.50321*t6133*t6989*t12271;
  t12274 = -1.*t7540*t880*t1081*t11584;
  t12277 = t7540*t11584*t5699*t5104;
  t12290 = t12274 + t12277;
  t12291 = 0.15121*t12290;
  t12292 = -0.50321*t12271*t7057*t7068;
  t12294 = t6133*t6937*t12271;
  t12300 = t12271*t7057*t7068;
  t12304 = t12294 + t12300;
  t12305 = 0.19821*t12304;
  t12330 = t7540*t880*t1081*t11584;
  t12337 = -1.*t7540*t11584*t5699*t5104;
  t12347 = t12330 + t12337;
  t12329 = t6133*t11584*t960;
  t12348 = t12347*t7057;
  t12353 = t12329 + t12348;
  t12358 = t6133*t12347;
  t12366 = -1.*t11584*t960*t7057;
  t12370 = t12358 + t12366;
  t12387 = -1.*t6133*t11584*t960;
  t12389 = -1.*t12347*t7057;
  t12390 = t12387 + t12389;
  t11934 = -1.*t11587*t7540*t5699*t5269;
  t11936 = t11587*t7540*t880*t5966;
  t11937 = -1.*t11587*t7540*t1081*t5699;
  t11938 = -1.*t11587*t7540*t880*t5104;
  t11940 = t11937 + t11938;
  t11941 = 0.15121*t11940;
  t11946 = 0.28121*t6264*t11945;
  t11947 = 0.28121*t11587*t960*t7057;
  t11952 = 0.50321*t6989*t11951;
  t11970 = -0.50321*t11955*t7068;
  t11972 = t6937*t11951;
  t11974 = t11955*t7068;
  t11979 = t11972 + t11974;
  t12001 = 0.19821*t11979;
  t12002 = t11934 + t11936 + t11941 + t11946 + t11947 + t11952 + t11970 + t12001;
  t12128 = 0.28121*t7540*t11584*t7057;
  t12431 = -1.*t880*t1081*t11584*t960;
  t12432 = t11584*t960*t5699*t5104;
  t12433 = t12431 + t12432;
  t12435 = t6133*t12433;
  t12437 = t12435 + t12183;
  t12439 = t12433*t7057;
  t12442 = t12221 + t12439;
  t12474 = t11587*t880;
  t12479 = -1.*t11584*t960*t5699;
  t12482 = t12474 + t12479;
  t12486 = t1081*t12482;
  t12489 = t12058*t5104;
  t12497 = t12486 + t12489;
  t12260 = -1.*t7540*t880*t11584*t5269;
  t12261 = -1.*t7540*t11584*t5699*t5966;
  t12308 = t12260 + t12261 + t12272 + t12273 + t12291 + t12292 + t12305;
  t11706 = t11705*t5269;
  t11708 = t11593*t5966;
  t11718 = 0.28121*t6264*t11715;
  t11721 = 0.50321*t6133*t6989*t11715;
  t11724 = t1081*t11705;
  t11725 = t11724 + t11665;
  t11730 = 0.15121*t11725;
  t11733 = -0.50321*t11715*t7057*t7068;
  t11734 = t6133*t6937*t11715;
  t11744 = t11715*t7057*t7068;
  t11746 = t11734 + t11744;
  t11748 = 0.19821*t11746;
  t11756 = t11706 + t11708 + t11718 + t11721 + t11730 + t11733 + t11748;
  t12073 = -1.*t12058*t5104;
  t12592 = -1.*t12482*t5104;
  t12598 = t12111 + t12592;
  t12042 = t12035*t5269;
  t12060 = t12058*t5966;
  t12061 = t1081*t12035;
  t12097 = t12061 + t12073;
  t12109 = 0.15121*t12097;
  t12125 = 0.28121*t6264*t12122;
  t12668 = t880*t11584*t960;
  t12669 = t11587*t5699;
  t12674 = t12668 + t12669;
  t12679 = -1.*t12674*t5104;
  t12681 = t12486 + t12679;
  t12312 = -1.*t7540*t11584*t5699*t7270;
  t12314 = t7540*t880*t11584*t7326;
  t12319 = t12312 + t12314 + t12272 + t12273 + t12291 + t12292 + t12305;
  t11597 = t11593*t7270;
  t11633 = t11632*t7326;
  t11641 = 0.28121*t6264*t11640;
  t11661 = 0.50321*t6133*t6989*t11640;
  t11664 = -1.*t1081*t11632;
  t11666 = t11664 + t11665;
  t11669 = 0.15121*t11666;
  t11670 = -0.50321*t11640*t7057*t7068;
  t11677 = t6133*t6937*t11640;
  t11680 = t11640*t7057*t7068;
  t11688 = t11677 + t11680;
  t11689 = 0.19821*t11688;
  t11694 = t11597 + t11633 + t11641 + t11661 + t11669 + t11670 + t11689;
  t12582 = t12058*t7270;
  t12586 = t12482*t7326;
  t12588 = -1.*t1081*t12482;
  t12589 = t12588 + t12073;
  t12590 = 0.15121*t12589;
  t12606 = 0.28121*t6264*t12598;
  t12607 = 0.50321*t6133*t6989*t12598;
  t12609 = -0.50321*t12598*t7057*t7068;
  t12611 = t6133*t6937*t12598;
  t12613 = t12598*t7057*t7068;
  t12619 = t12611 + t12613;
  t12622 = 0.19821*t12619;
  t12623 = t12582 + t12586 + t12590 + t12606 + t12607 + t12609 + t12622;
  t10836 = t7325 + t5240;
  t12767 = -1.*t1081*t12674;
  t12777 = t12767 + t12592;
  t12540 = 0.28121*t12497*t7057;
  t12541 = -0.50321*t6989*t12497*t7057;
  t12544 = -0.50321*t6133*t12497*t7068;
  t12545 = -1.*t6937*t12497*t7057;
  t12546 = t6133*t12497*t7068;
  t12551 = t12545 + t12546;
  t12552 = 0.19821*t12551;
  t12553 = t12540 + t12541 + t12544 + t12552;
  t12718 = 0.28121*t12681*t7057;
  t12726 = -0.50321*t6989*t12681*t7057;
  t12734 = -0.50321*t6133*t12681*t7068;
  t12735 = -1.*t6937*t12681*t7057;
  t12740 = t6133*t12681*t7068;
  t12742 = t12735 + t12740;
  t12745 = 0.19821*t12742;
  t12746 = t12718 + t12726 + t12734 + t12745;
  t11914 = -0.28121*t11587*t7540*t6133;
  t11916 = 0.28121*t11797*t7057;
  t11923 = 0.50321*t6989*t11922;
  t11924 = -0.50321*t11832*t7068;
  t11925 = t6937*t11922;
  t11928 = t11832*t7068;
  t11930 = t11925 + t11928;
  t11931 = 0.19821*t11930;
  t11932 = t11914 + t11916 + t11923 + t11924 + t11931;
  t12385 = 0.28121*t6133*t11584*t960;
  t12386 = 0.28121*t12347*t7057;
  t12394 = 0.50321*t6989*t12390;
  t12396 = -0.50321*t12370*t7068;
  t12397 = t6937*t12390;
  t12398 = t12370*t7068;
  t12399 = t12397 + t12398;
  t12401 = 0.19821*t12399;
  t12406 = t12385 + t12386 + t12394 + t12396 + t12401;
  t12895 = t1081*t12674;
  t12906 = t12482*t5104;
  t12915 = t12895 + t12906;
  t12916 = t6133*t12915;
  t12929 = t7540*t11584*t7057;
  t12931 = t12916 + t12929;
  t12958 = -1.*t12915*t7057;
  t12960 = t12221 + t12958;
  t12990 = -1.*t6133*t12915;
  t12991 = t12990 + t12183;
  t12500 = -0.50321*t6937*t12497*t7057;
  t12502 = 0.50321*t6133*t12497*t7068;
  t12505 = t6937*t12497*t7057;
  t12506 = -1.*t6133*t12497*t7068;
  t12514 = t12505 + t12506;
  t12517 = 0.19821*t12514;
  t12520 = t12500 + t12502 + t12517;
  t12682 = -0.50321*t6937*t12681*t7057;
  t12684 = 0.50321*t6133*t12681*t7068;
  t12691 = t6937*t12681*t7057;
  t12692 = -1.*t6133*t12681*t7068;
  t12694 = t12691 + t12692;
  t12696 = 0.19821*t12694;
  t12697 = t12682 + t12684 + t12696;
  t11812 = -0.50321*t6937*t11809;
  t11836 = 0.50321*t11832*t7068;
  t11849 = t6937*t11809;
  t11851 = -1.*t11832*t7068;
  t11861 = t11849 + t11851;
  t11863 = 0.19821*t11861;
  t11866 = t11812 + t11836 + t11863;
  t12355 = -0.50321*t6937*t12353;
  t12371 = 0.50321*t12370*t7068;
  t12372 = t6937*t12353;
  t12373 = -1.*t12370*t7068;
  t12374 = t12372 + t12373;
  t12375 = 0.19821*t12374;
  t12377 = t12355 + t12371 + t12375;
  t12942 = -0.50321*t6937*t12931;
  t12972 = 0.50321*t12960*t7068;
  t12975 = t6937*t12931;
  t12977 = -1.*t12960*t7068;
  t12979 = t12975 + t12977;
  t12980 = 0.19821*t12979;
  t12983 = t12942 + t12972 + t12980;
  t13027 = -1.*t7540*t6133*t11584;
  t13028 = t12915*t7057;
  t13029 = t13027 + t13028;
  t13165 = t12058*t5269;
  t13166 = t12482*t5966;
  t13168 = 0.28121*t6264*t12497;
  t13172 = 0.50321*t6133*t6989*t12497;
  t13173 = 0.15121*t12598;
  t13174 = -0.50321*t12497*t7057*t7068;
  t13179 = t6133*t6937*t12497;
  t13180 = t12497*t7057*t7068;
  t13181 = t13179 + t13180;
  t13183 = 0.19821*t13181;
  t13188 = t13165 + t13166 + t13168 + t13172 + t13173 + t13174 + t13183;
  t13192 = t12482*t7270;
  t13195 = t12674*t7326;
  t13198 = 0.28121*t6264*t12681;
  t13199 = 0.50321*t6133*t6989*t12681;
  t13200 = 0.15121*t12777;
  t13201 = -0.50321*t12681*t7057*t7068;
  t13202 = t6133*t6937*t12681;
  t13212 = t12681*t7057*t7068;
  t13214 = t13202 + t13212;
  t13217 = 0.19821*t13214;
  t13220 = t13192 + t13195 + t13198 + t13199 + t13200 + t13201 + t13217;
  t13275 = -0.50321*t6937*t13029;
  t13301 = 0.50321*t12931*t7068;
  t13310 = t6937*t13029;
  t13312 = -1.*t12931*t7068;
  t13316 = t13310 + t13312;
  t13317 = 0.19821*t13316;
  t13319 = t13275 + t13301 + t13317;
  t13221 = -0.28121*t7540*t6133*t11584;
  t13224 = 0.28121*t12915*t7057;
  t13236 = 0.50321*t6989*t12960;
  t13243 = -0.50321*t12931*t7068;
  t13246 = t6937*t12960;
  t13247 = t12931*t7068;
  t13249 = t13246 + t13247;
  t13251 = 0.19821*t13249;
  t13252 = t13221 + t13224 + t13236 + t13243 + t13251;
  t13121 = -1.*t7540*t11584*t5699*t5269;
  t13124 = t7540*t880*t11584*t5966;
  t13125 = 0.15121*t12271;
  t13127 = 0.28121*t6264*t12347;
  t13131 = 0.28121*t11584*t960*t7057;
  t13135 = 0.50321*t6989*t12370;
  t13136 = -0.50321*t12353*t7068;
  t13139 = t6937*t12370;
  t13144 = t12353*t7068;
  t13150 = t13139 + t13144;
  t13151 = 0.19821*t13150;
  t13152 = t13121 + t13124 + t13125 + t13127 + t13131 + t13135 + t13136 + t13151;
  t13060 = t11593*t5269;
  t13062 = t11632*t5966;
  t13065 = 0.15121*t11640;
  t13067 = 0.28121*t6264*t11797;
  t13069 = -0.28121*t11587*t7540*t7057;
  t13073 = 0.50321*t6989*t11832;
  t13080 = -0.50321*t11809*t7068;
  t13081 = t6937*t11832;
  t13094 = t11809*t7068;
  t13100 = t13081 + t13094;
  t13102 = 0.19821*t13100;
  t13107 = t13060 + t13062 + t13065 + t13067 + t13069 + t13073 + t13080 + t13102;
  t13378 = t11587*t7540*t1081*t5699;
  t13379 = t11587*t7540*t880*t5104;
  t13396 = t13378 + t13379;
  t13397 = 0.28121*t6264*t13396;
  t13402 = 0.50321*t6133*t6989*t13396;
  t13417 = 0.15121*t11945;
  t13422 = -0.50321*t13396*t7057*t7068;
  t13426 = t6133*t6937*t13396;
  t13439 = t13396*t7057*t7068;
  t13441 = t13426 + t13439;
  t13443 = 0.19821*t13441;
  t13510 = -1.*t11587*t7540*t880*t1081;
  t13511 = t11587*t7540*t5699*t5104;
  t13512 = t13510 + t13511;
  t13502 = -1.*t11587*t6133*t960;
  t13523 = t13512*t7057;
  t13524 = t13502 + t13523;
  t13527 = t6133*t13512;
  t13528 = t11587*t960*t7057;
  t13530 = t13527 + t13528;
  t13542 = -1.*t13512*t7057;
  t13543 = t11953 + t13542;
  t13564 = t11587*t880*t1081*t960;
  t13565 = -1.*t11587*t960*t5699*t5104;
  t13566 = t13564 + t13565;
  t13569 = t6133*t13566;
  t13570 = t13569 + t11816;
  t13572 = t13566*t7057;
  t13574 = t11773 + t13572;
  t13587 = t880*t11584;
  t13589 = t11587*t960*t5699;
  t13592 = t13587 + t13589;
  t13601 = t1081*t13592;
  t13602 = t11632*t5104;
  t13604 = t13601 + t13602;
  t13370 = t11587*t7540*t880*t5269;
  t13374 = t11587*t7540*t5699*t5966;
  t13444 = t13370 + t13374 + t13397 + t13402 + t13417 + t13422 + t13443;
  t13682 = -1.*t13592*t5104;
  t13683 = t11775 + t13682;
  t13706 = -1.*t11705*t5104;
  t13707 = t13601 + t13706;
  t13476 = t11587*t7540*t5699*t7270;
  t13478 = -1.*t11587*t7540*t880*t7326;
  t13495 = t13476 + t13478 + t13397 + t13402 + t13417 + t13422 + t13443;
  t13672 = t11632*t7270;
  t13673 = t13592*t7326;
  t13676 = -1.*t1081*t13592;
  t13678 = t13676 + t11637;
  t13679 = 0.15121*t13678;
  t13686 = 0.28121*t6264*t13683;
  t13687 = 0.50321*t6133*t6989*t13683;
  t13688 = -0.50321*t13683*t7057*t7068;
  t13692 = t6133*t6937*t13683;
  t13693 = t13683*t7057*t7068;
  t13694 = t13692 + t13693;
  t13696 = 0.19821*t13694;
  t13700 = t13672 + t13673 + t13679 + t13686 + t13687 + t13688 + t13696;
  t13758 = -1.*t1081*t11705;
  t13760 = t13758 + t13682;
  t13625 = 0.28121*t13604*t7057;
  t13631 = -0.50321*t6989*t13604*t7057;
  t13632 = -0.50321*t6133*t13604*t7068;
  t13633 = -1.*t6937*t13604*t7057;
  t13635 = t6133*t13604*t7068;
  t13638 = t13633 + t13635;
  t13642 = 0.19821*t13638;
  t13643 = t13625 + t13631 + t13632 + t13642;
  t13728 = 0.28121*t13707*t7057;
  t13731 = -0.50321*t6989*t13707*t7057;
  t13732 = -0.50321*t6133*t13707*t7068;
  t13735 = -1.*t6937*t13707*t7057;
  t13736 = t6133*t13707*t7068;
  t13737 = t13735 + t13736;
  t13739 = 0.19821*t13737;
  t13741 = t13728 + t13731 + t13732 + t13739;
  t13540 = -0.28121*t11587*t6133*t960;
  t13541 = 0.28121*t13512*t7057;
  t13546 = 0.50321*t6989*t13543;
  t13547 = -0.50321*t13530*t7068;
  t13548 = t6937*t13543;
  t13549 = t13530*t7068;
  t13550 = t13548 + t13549;
  t13552 = 0.19821*t13550;
  t13553 = t13540 + t13541 + t13546 + t13547 + t13552;
  t13810 = t13592*t5104;
  t13812 = t11724 + t13810;
  t13813 = t6133*t13812;
  t13817 = -1.*t11587*t7540*t7057;
  t13818 = t13813 + t13817;
  t13820 = -1.*t13812*t7057;
  t13822 = t11773 + t13820;
  t13903 = -1.*t6133*t13812;
  t13904 = t13903 + t11816;
  t13607 = -0.50321*t6937*t13604*t7057;
  t13609 = 0.50321*t6133*t13604*t7068;
  t13611 = t6937*t13604*t7057;
  t13615 = -1.*t6133*t13604*t7068;
  t13617 = t13611 + t13615;
  t13618 = 0.19821*t13617;
  t13620 = t13607 + t13609 + t13618;
  t13711 = -0.50321*t6937*t13707*t7057;
  t13713 = 0.50321*t6133*t13707*t7068;
  t13716 = t6937*t13707*t7057;
  t13718 = -1.*t6133*t13707*t7068;
  t13719 = t13716 + t13718;
  t13721 = 0.19821*t13719;
  t13722 = t13711 + t13713 + t13721;
  t13525 = -0.50321*t6937*t13524;
  t13532 = 0.50321*t13530*t7068;
  t13533 = t6937*t13524;
  t13534 = -1.*t13530*t7068;
  t13536 = t13533 + t13534;
  t13537 = 0.19821*t13536;
  t13538 = t13525 + t13532 + t13537;
  t13819 = -0.50321*t6937*t13818;
  t13854 = 0.50321*t13822*t7068;
  t13863 = t6937*t13818;
  t13869 = -1.*t13822*t7068;
  t13872 = t13863 + t13869;
  t13889 = 0.19821*t13872;
  t13892 = t13819 + t13854 + t13889;
  t13994 = t13812*t7057;
  t14006 = t11917 + t13994;
  p_output1[0]=(-0.50321*t10045*t7068 + t9650 + t9651 + t9793 + t9899 + t9901 + 0.50321*t6989*t9925 + 0.19821*(t10045*t7068 + t6937*t9925))*var2[4] + t7164*var2[5] + t7386*var2[6] + t9648*var2[7] + t8598*var2[8];
  p_output1[1]=t10286 + t10441 + t7164*var2[4] + (t10465 + t10467 + t10738 + t9650 + t9651 + t9793 + t9899)*var2[5] + t10753*var2[6];
  p_output1[2]=t10286 + t10441 + t7386*var2[4] + t10753*var2[5] + (t10465 + t10467 + t10738 + t10749 + t10836*t7540*t880 + t9793 + t9899)*var2[6];
  p_output1[3]=t9648*var2[4] + t10421*var2[5] + t10421*var2[6] + (0.28121*t10897*t6133 + 0.50321*t11235*t6989 - 0.50321*t11055*t7068 + 0.19821*(t11235*t6937 + t11055*t7068) + t9901)*var2[7] + t11191*var2[8];
  p_output1[4]=t8598*var2[4] + t10282*var2[5] + t10282*var2[6] + t11191*var2[7] + (0.50321*t10953*t6937 + 0.50321*t11347*t7068 + 0.19821*(-1.*t10953*t6937 - 1.*t11347*t7068))*var2[8];
  p_output1[5]=1.;
  p_output1[6]=0.15121*t6473 + 0.28121*t7057*t7540 + 0.28121*t6264*t7600 - 0.50321*t7068*t7615 + 0.50321*t6989*t7621 + 0.19821*(t7068*t7615 + t6937*t7621) + t5269*t5699*t960 - 1.*t5966*t880*t960;
  p_output1[7]=t11533 + t11538 + t11540 + t11541 + t11546 - 1.*t5699*t5966*t7540 - 1.*t5269*t7540*t880;
  p_output1[8]=t11533 + t11538 + t11540 + t11541 + t11546 - 1.*t5699*t7270*t7540 + t7326*t7540*t880;
  p_output1[9]=0.50321*t11055*t6989 + 0.28121*t10897*t7057 - 0.50321*t10953*t7068 + 0.19821*(t11055*t6937 + t10953*t7068) + 0.28121*t6133*t960;
  p_output1[10]=-0.50321*t11347*t6937 + 0.50321*t10953*t7068 + 0.19821*(t11347*t6937 - 1.*t10953*t7068);
  p_output1[11]=(t12042 + t12060 + t12109 + t12125 + t12128 + 0.50321*t12203*t6989 - 0.50321*t12228*t7068 + 0.19821*(t12203*t6937 + t12228*t7068))*var2[3] + t12002*var2[4] + t11756*var2[5] + t11694*var2[6] + t11932*var2[7] + t11866*var2[8];
  p_output1[12]=t12002*var2[3] + (t12128 + 0.28121*t12433*t6264 + 0.50321*t12437*t6989 - 0.50321*t12442*t7068 + 0.19821*(t12437*t6937 + t12442*t7068) + t11584*t5269*t5699*t960 - 1.*t11584*t5966*t880*t960 + 0.15121*(t1081*t11584*t5699*t960 + t11584*t5104*t880*t960))*var2[4] + t12308*var2[5] + t12319*var2[6] + t12406*var2[7] + t12377*var2[8];
  p_output1[13]=t11756*var2[3] + t12308*var2[4] + (t12042 + t12060 + t12109 + t12125 + 0.50321*t12122*t6133*t6989 - 0.50321*t12122*t7057*t7068 + 0.19821*(t12122*t6133*t6937 + t12122*t7057*t7068))*var2[5] + t12623*var2[6] + t12553*var2[7] + t12520*var2[8];
  p_output1[14]=t11694*var2[3] + t12319*var2[4] + t12623*var2[5] + (t12586 + t10836*t12674 + 0.15121*(t12588 + t12674*t5104) + 0.28121*t12777*t6264 + 0.50321*t12777*t6133*t6989 - 0.50321*t12777*t7057*t7068 + 0.19821*(t12777*t6133*t6937 + t12777*t7057*t7068))*var2[6] + t12746*var2[7] + t12697*var2[8];
  p_output1[15]=t11932*var2[3] + t12406*var2[4] + t12553*var2[5] + t12746*var2[6] + (t12128 + 0.28121*t12915*t6133 + 0.50321*t12991*t6989 - 0.50321*t12960*t7068 + 0.19821*(t12991*t6937 + t12960*t7068))*var2[7] + t12983*var2[8];
  p_output1[16]=t11866*var2[3] + t12377*var2[4] + t12520*var2[5] + t12697*var2[6] + t12983*var2[7] + (0.50321*t12931*t6937 + 0.50321*t13029*t7068 + 0.19821*(-1.*t12931*t6937 - 1.*t13029*t7068))*var2[8];
  p_output1[17]=1.;
  p_output1[18]=t13107;
  p_output1[19]=t13152;
  p_output1[20]=t13188;
  p_output1[21]=t13220;
  p_output1[22]=t13252;
  p_output1[23]=t13319;
  p_output1[24]=t13107*var2[3] + t13152*var2[4] + t13188*var2[5] + t13220*var2[6] + t13252*var2[7] + t13319*var2[8];
  p_output1[25]=t13152*var2[3] + (t13069 + 0.28121*t13566*t6264 + 0.50321*t13570*t6989 - 0.50321*t13574*t7068 + 0.19821*(t13570*t6937 + t13574*t7068) - 1.*t11587*t5269*t5699*t960 + t11587*t5966*t880*t960 + 0.15121*(-1.*t1081*t11587*t5699*t960 - 1.*t11587*t5104*t880*t960))*var2[4] + t13444*var2[5] + t13495*var2[6] + t13553*var2[7] + t13538*var2[8];
  p_output1[26]=t13188*var2[3] + t13444*var2[4] + (t13060 + t13062 + t13065 + t13067 + 0.50321*t11797*t6133*t6989 - 0.50321*t11797*t7057*t7068 + 0.19821*(t11797*t6133*t6937 + t11797*t7057*t7068))*var2[5] + t13700*var2[6] + t13643*var2[7] + t13620*var2[8];
  p_output1[27]=t13220*var2[3] + t13495*var2[4] + t13700*var2[5] + (t10836*t11705 + t13673 + 0.15121*(t11709 + t13676) + 0.28121*t13760*t6264 + 0.50321*t13760*t6133*t6989 - 0.50321*t13760*t7057*t7068 + 0.19821*(t13760*t6133*t6937 + t13760*t7057*t7068))*var2[6] + t13741*var2[7] + t13722*var2[8];
  p_output1[28]=t13252*var2[3] + t13553*var2[4] + t13643*var2[5] + t13741*var2[6] + (t13069 + 0.28121*t13812*t6133 + 0.50321*t13904*t6989 - 0.50321*t13822*t7068 + 0.19821*(t13904*t6937 + t13822*t7068))*var2[7] + t13892*var2[8];
  p_output1[29]=t13319*var2[3] + t13538*var2[4] + t13620*var2[5] + t13722*var2[6] + t13892*var2[7] + (0.50321*t13818*t6937 + 0.50321*t14006*t7068 + 0.19821*(-1.*t13818*t6937 - 1.*t14006*t7068))*var2[8];
  p_output1[30]=1.;
  p_output1[31]=0.15121*t12681 + t12482*t5269 + t12674*t5966 + 0.28121*t12915*t6264 + 0.50321*t12931*t6989 - 0.50321*t13029*t7068 + 0.19821*(t12975 + t13029*t7068) - 0.28121*t11584*t7057*t7540;
  p_output1[32]=0.15121*t13396 + 0.28121*t13512*t6264 + 0.50321*t13530*t6989 - 0.50321*t13524*t7068 + 0.19821*(t13530*t6937 + t13524*t7068) + t11587*t5269*t5699*t7540 - 1.*t11587*t5966*t7540*t880 - 0.28121*t11587*t7057*t960;
  p_output1[33]=0.15121*t13683 + t11632*t5269 + t13592*t5966 + 0.28121*t13604*t6264 + 0.50321*t13604*t6133*t6989 - 0.50321*t13604*t7057*t7068 + 0.19821*(t13604*t6133*t6937 + t13604*t7057*t7068);
  p_output1[34]=0.15121*t13760 + 0.28121*t13707*t6264 + 0.50321*t13707*t6133*t6989 - 0.50321*t13707*t7057*t7068 + 0.19821*(t13707*t6133*t6937 + t13707*t7057*t7068) + t13592*t7270 + t11705*t7326;
  p_output1[35]=0.50321*t13822*t6989 + 0.28121*t13812*t7057 - 0.50321*t13818*t7068 + 0.19821*(t13822*t6937 + t13818*t7068) + 0.28121*t11587*t6133*t7540;
  p_output1[36]=-0.50321*t14006*t6937 + 0.50321*t13818*t7068 + 0.19821*(t14006*t6937 - 1.*t13818*t7068);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 37, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_initial_swing_velocity_FlFoot_DiagonalStance.hh"

namespace DiagonalStance
{

void J_initial_swing_velocity_FlFoot_DiagonalStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
