/*
 * Automatically Generated from Mathematica.
 * Sat 14 May 2022 15:42:32 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t1744;
  double t2482;
  double t3884;
  double t4241;
  double t4321;
  double t4368;
  double t4693;
  double t1554;
  double t5595;
  double t5838;
  double t5850;
  double t5851;
  double t7283;
  double t8379;
  double t8917;
  double t5060;
  double t5607;
  double t5610;
  double t5853;
  double t7760;
  double t7779;
  double t7796;
  double t8053;
  double t8173;
  double t8176;
  double t8271;
  double t8923;
  double t9184;
  double t9210;
  double t9784;
  double t10086;
  double t23769;
  double t24271;
  double t24282;
  double t22769;
  double t23304;
  double t24352;
  double t24416;
  double t29780;
  double t29863;
  double t30044;
  double t31271;
  double t31274;
  double t34239;
  double t4484;
  double t4584;
  double t5291;
  double t35224;
  double t35226;
  double t35235;
  double t35285;
  double t35457;
  double t35461;
  double t35474;
  double t35478;
  double t35480;
  double t35494;
  double t35495;
  double t35499;
  double t4589;
  double t5567;
  double t10299;
  double t34782;
  double t34960;
  double t35020;
  double t35025;
  double t35089;
  double t35219;
  double t35248;
  double t10557;
  double t17566;
  double t22685;
  double t22706;
  double t37448;
  double t37576;
  double t37681;
  double t37682;
  double t37683;
  double t37684;
  double t35500;
  double t36049;
  double t36126;
  double t36264;
  double t36276;
  double t36353;
  double t36365;
  double t36367;
  double t36368;
  double t36380;
  double t36708;
  double t36724;
  double t36735;
  double t36745;
  double t36762;
  double t36836;
  double t36866;
  double t22547;
  double t22713;
  double t22740;
  double t37757;
  double t37717;
  double t37799;
  double t31225;
  double t31268;
  double t34309;
  double t34311;
  double t34314;
  double t34319;
  double t34333;
  double t34339;
  double t34385;
  double t38056;
  double t38109;
  double t38114;
  double t38121;
  double t38128;
  double t38136;
  double t38150;
  double t38152;
  double t35281;
  double t38243;
  double t38245;
  double t27614;
  double t30127;
  double t30156;
  double t30157;
  double t30247;
  double t30266;
  double t30761;
  double t38140;
  double t38153;
  double t38154;
  double t38155;
  double t38189;
  double t38203;
  double t38215;
  double t38290;
  double t38291;
  double t38292;
  double t38453;
  double t38454;
  double t38463;
  double t38465;
  double t38472;
  double t38473;
  double t38474;
  double t38476;
  double t38561;
  double t38559;
  double t38560;
  double t38565;
  double t38567;
  double t38572;
  double t38574;
  double t38575;
  double t38577;
  double t38578;
  double t38579;
  double t38594;
  double t38595;
  double t38596;
  double t38599;
  double t38600;
  double t38583;
  double t38615;
  double t38616;
  double t38618;
  double t38614;
  double t38619;
  double t38620;
  double t38622;
  double t38623;
  double t38625;
  double t38636;
  double t38639;
  double t38640;
  double t38667;
  double t38672;
  double t38678;
  double t38689;
  double t38690;
  double t38692;
  double t38711;
  double t38715;
  double t38716;
  double t38749;
  double t38750;
  double t38751;
  double t38753;
  double t38754;
  double t38755;
  double t38764;
  double t38765;
  double t38767;
  double t38774;
  double t38775;
  double t38778;
  double t38787;
  double t38788;
  double t38790;
  double t38849;
  double t38857;
  double t38862;
  double t38868;
  double t38889;
  double t38893;
  double t38901;
  double t38906;
  double t38917;
  double t38919;
  double t38924;
  double t38932;
  double t38964;
  double t38975;
  double t39059;
  double t39060;
  double t39061;
  double t39057;
  double t39062;
  double t39063;
  double t39066;
  double t39071;
  double t39072;
  double t39099;
  double t39104;
  double t39108;
  double t38653;
  double t38654;
  double t38655;
  double t38656;
  double t38657;
  double t38662;
  double t38685;
  double t38688;
  double t38697;
  double t38717;
  double t38718;
  double t38719;
  double t38720;
  double t38721;
  double t38722;
  double t38769;
  double t39159;
  double t39163;
  double t39169;
  double t39178;
  double t39192;
  double t39207;
  double t39237;
  double t39288;
  double t39290;
  double t39292;
  double t39297;
  double t39300;
  double t39304;
  double t38835;
  double t38841;
  double t38993;
  double t38597;
  double t38598;
  double t38601;
  double t38602;
  double t38603;
  double t38604;
  double t38605;
  double t38606;
  double t38607;
  double t38608;
  double t38609;
  double t38611;
  double t38612;
  double t38758;
  double t39451;
  double t39452;
  double t38752;
  double t38756;
  double t38757;
  double t38760;
  double t38762;
  double t38768;
  double t39486;
  double t39487;
  double t39488;
  double t39489;
  double t39490;
  double t39009;
  double t39052;
  double t39055;
  double t38571;
  double t38576;
  double t38580;
  double t38581;
  double t38582;
  double t38584;
  double t38585;
  double t38586;
  double t38588;
  double t38589;
  double t38590;
  double t38591;
  double t38592;
  double t39445;
  double t39447;
  double t39448;
  double t39449;
  double t39450;
  double t39453;
  double t39454;
  double t39455;
  double t39460;
  double t39466;
  double t39470;
  double t39471;
  double t39472;
  double t37840;
  double t39646;
  double t39647;
  double t39419;
  double t39420;
  double t39425;
  double t39426;
  double t39427;
  double t39428;
  double t39429;
  double t39437;
  double t39518;
  double t39526;
  double t39536;
  double t39538;
  double t39539;
  double t39540;
  double t39611;
  double t39613;
  double t38634;
  double t38635;
  double t38641;
  double t38642;
  double t38643;
  double t38644;
  double t38645;
  double t38646;
  double t38650;
  double t39096;
  double t39097;
  double t39113;
  double t39118;
  double t39119;
  double t39120;
  double t39121;
  double t39131;
  double t39139;
  double t39711;
  double t39721;
  double t39724;
  double t39731;
  double t39741;
  double t39748;
  double t39760;
  double t39761;
  double t39790;
  double t39806;
  double t39317;
  double t39328;
  double t39334;
  double t39343;
  double t39415;
  double t39416;
  double t39417;
  double t39491;
  double t39493;
  double t39495;
  double t39502;
  double t39509;
  double t39512;
  double t39514;
  double t38621;
  double t38626;
  double t38628;
  double t38629;
  double t38630;
  double t38631;
  double t38632;
  double t39064;
  double t39073;
  double t39074;
  double t39076;
  double t39077;
  double t39079;
  double t39081;
  double t39758;
  double t39762;
  double t39763;
  double t39766;
  double t39770;
  double t39772;
  double t39774;
  double t39849;
  double t39850;
  double t39854;
  double t39913;
  double t39915;
  double t39916;
  double t39917;
  double t39918;
  double t39919;
  double t39920;
  double t39921;
  double t39923;
  double t39924;
  double t39925;
  double t39927;
  double t39941;
  double t39942;
  double t39947;
  double t39949;
  double t39950;
  double t39951;
  double t39952;
  double t39956;
  double t39966;
  double t39969;
  double t40014;
  double t40015;
  double t40021;
  double t40023;
  double t40026;
  double t40027;
  double t40029;
  double t39972;
  double t39976;
  double t39984;
  double t39994;
  double t39997;
  double t40006;
  double t40010;
  double t40012;
  double t40013;
  double t39899;
  double t39900;
  double t39901;
  double t39902;
  double t39904;
  double t39905;
  double t39906;
  double t39907;
  double t39908;
  double t39910;
  double t39911;
  double t39912;
  double t39876;
  double t39877;
  double t39878;
  double t39881;
  double t39882;
  double t39885;
  double t39887;
  double t39889;
  double t39891;
  double t39892;
  double t39896;
  double t39898;
  double t40049;
  double t40051;
  double t40052;
  double t40058;
  double t40060;
  double t40066;
  double t40074;
  double t40076;
  double t40079;
  double t40080;
  double t40081;
  double t40099;
  double t40102;
  double t40103;
  double t40098;
  double t40105;
  double t40106;
  double t40112;
  double t40114;
  double t40115;
  double t40127;
  double t40128;
  double t40251;
  double t40252;
  double t40253;
  double t40259;
  double t40262;
  double t40264;
  double t40265;
  double t40310;
  double t40314;
  double t40317;
  double t40320;
  double t40321;
  double t40323;
  double t40044;
  double t40045;
  double t40082;
  double t40386;
  double t40390;
  double t40410;
  double t40411;
  double t40084;
  double t40085;
  double t40090;
  double t40374;
  double t40376;
  double t40377;
  double t40378;
  double t40380;
  double t40391;
  double t40392;
  double t40393;
  double t40394;
  double t40395;
  double t40396;
  double t40397;
  double t40398;
  double t40649;
  double t40654;
  double t40344;
  double t40345;
  double t40346;
  double t40348;
  double t40349;
  double t40354;
  double t40357;
  double t40361;
  double t40432;
  double t40437;
  double t40440;
  double t40441;
  double t40453;
  double t40457;
  double t40458;
  double t40459;
  double t40125;
  double t40126;
  double t40129;
  double t40130;
  double t40131;
  double t40137;
  double t40139;
  double t40143;
  double t40176;
  double t40677;
  double t40679;
  double t40680;
  double t40683;
  double t40685;
  double t40687;
  double t40689;
  double t40706;
  double t40707;
  double t40327;
  double t40329;
  double t40330;
  double t40332;
  double t40336;
  double t40338;
  double t40339;
  double t40412;
  double t40416;
  double t40420;
  double t40426;
  double t40427;
  double t40428;
  double t40429;
  double t40110;
  double t40117;
  double t40119;
  double t40120;
  double t40121;
  double t40122;
  double t40123;
  double t40686;
  double t40691;
  double t40694;
  double t40695;
  double t40696;
  double t40697;
  double t40700;
  double t40727;
  double t40730;
  t1744 = Sin(var1[4]);
  t2482 = Cos(var1[6]);
  t3884 = -1.*t2482;
  t4241 = 1. + t3884;
  t4321 = 0.15121*t4241;
  t4368 = Sin(var1[6]);
  t4693 = Sin(var1[5]);
  t1554 = Cos(var1[5]);
  t5595 = Cos(var1[7]);
  t5838 = t2482*t1744*t4693;
  t5850 = t1554*t1744*t4368;
  t5851 = t5838 + t5850;
  t7283 = Cos(var1[8]);
  t8379 = Sin(var1[7]);
  t8917 = Sin(var1[8]);
  t5060 = 0.15121*t4368;
  t5607 = -1.*t5595;
  t5610 = 1. + t5607;
  t5853 = 0.28121*t5610*t5851;
  t7760 = -1.*t7283;
  t7779 = 1. + t7760;
  t7796 = 0.50321*t5595*t7779*t5851;
  t8053 = t1554*t2482*t1744;
  t8173 = -1.*t1744*t4693*t4368;
  t8176 = t8053 + t8173;
  t8271 = 0.15121*t8176;
  t8923 = -0.50321*t5851*t8379*t8917;
  t9184 = t5595*t7283*t5851;
  t9210 = t5851*t8379*t8917;
  t9784 = t9184 + t9210;
  t10086 = 0.23321*t9784;
  t23769 = -1.*t1554*t2482*t1744;
  t24271 = t1744*t4693*t4368;
  t24282 = t23769 + t24271;
  t22769 = Cos(var1[4]);
  t23304 = t22769*t5595;
  t24352 = t24282*t8379;
  t24416 = t23304 + t24352;
  t29780 = t5595*t24282;
  t29863 = -1.*t22769*t8379;
  t30044 = t29780 + t29863;
  t31271 = -1.*t22769*t5595;
  t31274 = -1.*t24282*t8379;
  t34239 = t31271 + t31274;
  t4484 = -0.15121*t4368;
  t4584 = t4321 + t4484;
  t5291 = t4321 + t5060;
  t35224 = -1.*t22769*t1554*t2482;
  t35226 = t22769*t4693*t4368;
  t35235 = t35224 + t35226;
  t35285 = t5595*t35235;
  t35457 = t1744*t8379;
  t35461 = t35285 + t35457;
  t35474 = -1.*t5595*t1744;
  t35478 = t35235*t8379;
  t35480 = t35474 + t35478;
  t35494 = -1.*t22769*t2482*t4693;
  t35495 = -1.*t22769*t1554*t4368;
  t35499 = t35494 + t35495;
  t4589 = t1554*t1744*t4584;
  t5567 = t1744*t4693*t5291;
  t10299 = t4589 + t5567 + t5853 + t7796 + t8271 + t8923 + t10086;
  t34782 = t22769*t4693*t4584;
  t34960 = -1.*t22769*t1554*t5291;
  t35020 = t22769*t2482*t4693;
  t35025 = t22769*t1554*t4368;
  t35089 = t35020 + t35025;
  t35219 = 0.15121*t35089;
  t35248 = 0.28121*t5610*t35235;
  t10557 = -0.15121*t2482;
  t17566 = t10557 + t5060;
  t22685 = 0.15121*t2482;
  t22706 = t22685 + t5060;
  t37448 = 0.50321*t5595*t7779*t35235;
  t37576 = -0.50321*t35235*t8379*t8917;
  t37681 = t5595*t7283*t35235;
  t37682 = t35235*t8379*t8917;
  t37683 = t37681 + t37682;
  t37684 = 0.23321*t37683;
  t35500 = -0.50321*t7283*t35499*t8379;
  t36049 = 0.50321*t5595*t35499*t8917;
  t36126 = t7283*t35499*t8379;
  t36264 = -1.*t5595*t35499*t8917;
  t36276 = t36126 + t36264;
  t36353 = 0.23321*t36276;
  t36365 = t35500 + t36049 + t36353;
  t36367 = var2[8]*t36365;
  t36368 = 0.28121*t35499*t8379;
  t36380 = -0.50321*t7779*t35499*t8379;
  t36708 = -0.50321*t5595*t35499*t8917;
  t36724 = -1.*t7283*t35499*t8379;
  t36735 = t5595*t35499*t8917;
  t36745 = t36724 + t36735;
  t36762 = 0.23321*t36745;
  t36836 = t36368 + t36380 + t36708 + t36762;
  t36866 = var2[7]*t36836;
  t22547 = t1744*t4693*t17566;
  t22713 = -1.*t1554*t1744*t22706;
  t22740 = t22547 + t22713 + t5853 + t7796 + t8271 + t8923 + t10086;
  t37757 = -1.*t22769*t4693*t22706;
  t37717 = -1.*t22769*t1554*t17566;
  t37799 = t37717 + t37757 + t35219 + t35248 + t37448 + t37576 + t37684;
  t31225 = 0.28121*t22769*t5595;
  t31268 = 0.28121*t24282*t8379;
  t34309 = 0.50321*t7779*t34239;
  t34311 = -0.50321*t30044*t8917;
  t34314 = t7283*t34239;
  t34319 = t30044*t8917;
  t34333 = t34314 + t34319;
  t34339 = 0.23321*t34333;
  t34385 = t31225 + t31268 + t34309 + t34311 + t34339;
  t38056 = t22769*t1554*t2482;
  t38109 = -1.*t22769*t4693*t4368;
  t38114 = t38056 + t38109;
  t38121 = t5595*t38114;
  t38128 = -1.*t1744*t8379;
  t38136 = t38121 + t38128;
  t38150 = -1.*t38114*t8379;
  t38152 = t35474 + t38150;
  t35281 = -0.28121*t1744*t8379;
  t38243 = -1.*t5595*t38114;
  t38245 = t38243 + t35457;
  t27614 = -0.50321*t7283*t24416;
  t30127 = 0.50321*t30044*t8917;
  t30156 = t7283*t24416;
  t30157 = -1.*t30044*t8917;
  t30247 = t30156 + t30157;
  t30266 = 0.23321*t30247;
  t30761 = t27614 + t30127 + t30266;
  t38140 = -0.50321*t7283*t38136;
  t38153 = 0.50321*t38152*t8917;
  t38154 = t7283*t38136;
  t38155 = -1.*t38152*t8917;
  t38189 = t38154 + t38155;
  t38203 = 0.23321*t38189;
  t38215 = t38140 + t38153 + t38203;
  t38290 = t5595*t1744;
  t38291 = t38114*t8379;
  t38292 = t38290 + t38291;
  t38453 = 0.28121*t5610*t35499;
  t38454 = 0.50321*t5595*t7779*t35499;
  t38463 = 0.15121*t35235;
  t38465 = -0.50321*t35499*t8379*t8917;
  t38472 = t5595*t7283*t35499;
  t38473 = t35499*t8379*t8917;
  t38474 = t38472 + t38473;
  t38476 = 0.23321*t38474;
  t38561 = Cos(var1[3]);
  t38559 = Sin(var1[3]);
  t38560 = -1.*t1554*t38559;
  t38565 = -1.*t38561*t1744*t4693;
  t38567 = t38560 + t38565;
  t38572 = t38561*t1554*t1744;
  t38574 = -1.*t38559*t4693;
  t38575 = t38572 + t38574;
  t38577 = t2482*t38567;
  t38578 = -1.*t38575*t4368;
  t38579 = t38577 + t38578;
  t38594 = -1.*t38561*t1554*t1744;
  t38595 = t38559*t4693;
  t38596 = t38594 + t38595;
  t38599 = t38596*t4368;
  t38600 = t38577 + t38599;
  t38583 = -1.*t38567*t4368;
  t38615 = t2482*t38575;
  t38616 = t38567*t4368;
  t38618 = t38615 + t38616;
  t38614 = -1.*t38561*t22769*t5595;
  t38619 = t38618*t8379;
  t38620 = t38614 + t38619;
  t38622 = t5595*t38618;
  t38623 = t38561*t22769*t8379;
  t38625 = t38622 + t38623;
  t38636 = t38561*t22769*t5595;
  t38639 = -1.*t38618*t8379;
  t38640 = t38636 + t38639;
  t38667 = t38561*t22769*t1554*t2482;
  t38672 = -1.*t38561*t22769*t4693*t4368;
  t38678 = t38667 + t38672;
  t38689 = t5595*t38678;
  t38690 = -1.*t38561*t1744*t8379;
  t38692 = t38689 + t38690;
  t38711 = t38561*t5595*t1744;
  t38715 = t38678*t8379;
  t38716 = t38711 + t38715;
  t38749 = -1.*t38561*t1554;
  t38750 = t38559*t1744*t4693;
  t38751 = t38749 + t38750;
  t38753 = -1.*t1554*t38559*t1744;
  t38754 = -1.*t38561*t4693;
  t38755 = t38753 + t38754;
  t38764 = t2482*t38755;
  t38765 = t38751*t4368;
  t38767 = t38764 + t38765;
  t38774 = t5595*t38767;
  t38775 = -1.*t22769*t38559*t8379;
  t38778 = t38774 + t38775;
  t38787 = t22769*t5595*t38559;
  t38788 = t38767*t8379;
  t38790 = t38787 + t38788;
  t38849 = -1.*t22769*t2482*t38559*t4693;
  t38857 = -1.*t22769*t1554*t38559*t4368;
  t38862 = t38849 + t38857;
  t38868 = 0.28121*t5610*t38862;
  t38889 = 0.50321*t5595*t7779*t38862;
  t38893 = -1.*t22769*t1554*t2482*t38559;
  t38901 = t22769*t38559*t4693*t4368;
  t38906 = t38893 + t38901;
  t38917 = 0.15121*t38906;
  t38919 = -0.50321*t38862*t8379*t8917;
  t38924 = t5595*t7283*t38862;
  t38932 = t38862*t8379*t8917;
  t38964 = t38924 + t38932;
  t38975 = 0.23321*t38964;
  t39059 = t22769*t1554*t2482*t38559;
  t39060 = -1.*t22769*t38559*t4693*t4368;
  t39061 = t39059 + t39060;
  t39057 = t5595*t38559*t1744;
  t39062 = t39061*t8379;
  t39063 = t39057 + t39062;
  t39066 = t5595*t39061;
  t39071 = -1.*t38559*t1744*t8379;
  t39072 = t39066 + t39071;
  t39099 = -1.*t5595*t38559*t1744;
  t39104 = -1.*t39061*t8379;
  t39108 = t39099 + t39104;
  t38653 = -1.*t38561*t22769*t4693*t4584;
  t38654 = t38561*t22769*t1554*t5291;
  t38655 = -1.*t38561*t22769*t2482*t4693;
  t38656 = -1.*t38561*t22769*t1554*t4368;
  t38657 = t38655 + t38656;
  t38662 = 0.15121*t38657;
  t38685 = 0.28121*t5610*t38678;
  t38688 = 0.28121*t38561*t1744*t8379;
  t38697 = 0.50321*t7779*t38692;
  t38717 = -0.50321*t38716*t8917;
  t38718 = t7283*t38692;
  t38719 = t38716*t8917;
  t38720 = t38718 + t38719;
  t38721 = 0.23321*t38720;
  t38722 = t38653 + t38654 + t38662 + t38685 + t38688 + t38697 + t38717 + t38721;
  t38769 = 0.28121*t22769*t38559*t8379;
  t39159 = -1.*t1554*t2482*t38559*t1744;
  t39163 = t38559*t1744*t4693*t4368;
  t39169 = t39159 + t39163;
  t39178 = t5595*t39169;
  t39192 = t39178 + t38775;
  t39207 = t39169*t8379;
  t39237 = t38787 + t39207;
  t39288 = t38561*t1554;
  t39290 = -1.*t38559*t1744*t4693;
  t39292 = t39288 + t39290;
  t39297 = t2482*t39292;
  t39300 = t38755*t4368;
  t39304 = t39297 + t39300;
  t38835 = -1.*t22769*t1554*t38559*t4584;
  t38841 = -1.*t22769*t38559*t4693*t5291;
  t38993 = t38835 + t38841 + t38868 + t38889 + t38917 + t38919 + t38975;
  t38597 = t38596*t4584;
  t38598 = t38567*t5291;
  t38601 = 0.28121*t5610*t38600;
  t38602 = 0.50321*t5595*t7779*t38600;
  t38603 = t2482*t38596;
  t38604 = t38603 + t38583;
  t38605 = 0.15121*t38604;
  t38606 = -0.50321*t38600*t8379*t8917;
  t38607 = t5595*t7283*t38600;
  t38608 = t38600*t8379*t8917;
  t38609 = t38607 + t38608;
  t38611 = 0.23321*t38609;
  t38612 = t38597 + t38598 + t38601 + t38602 + t38605 + t38606 + t38611;
  t38758 = -1.*t38755*t4368;
  t39451 = -1.*t39292*t4368;
  t39452 = t38764 + t39451;
  t38752 = t38751*t4584;
  t38756 = t38755*t5291;
  t38757 = t2482*t38751;
  t38760 = t38757 + t38758;
  t38762 = 0.15121*t38760;
  t38768 = 0.28121*t5610*t38767;
  t39486 = t1554*t38559*t1744;
  t39487 = t38561*t4693;
  t39488 = t39486 + t39487;
  t39489 = -1.*t39488*t4368;
  t39490 = t39297 + t39489;
  t39009 = -1.*t22769*t38559*t4693*t17566;
  t39052 = t22769*t1554*t38559*t22706;
  t39055 = t39009 + t39052 + t38868 + t38889 + t38917 + t38919 + t38975;
  t38571 = t38567*t17566;
  t38576 = t38575*t22706;
  t38580 = 0.28121*t5610*t38579;
  t38581 = 0.50321*t5595*t7779*t38579;
  t38582 = -1.*t2482*t38575;
  t38584 = t38582 + t38583;
  t38585 = 0.15121*t38584;
  t38586 = -0.50321*t38579*t8379*t8917;
  t38588 = t5595*t7283*t38579;
  t38589 = t38579*t8379*t8917;
  t38590 = t38588 + t38589;
  t38591 = 0.23321*t38590;
  t38592 = t38571 + t38576 + t38580 + t38581 + t38585 + t38586 + t38591;
  t39445 = t38755*t17566;
  t39447 = t39292*t22706;
  t39448 = -1.*t2482*t39292;
  t39449 = t39448 + t38758;
  t39450 = 0.15121*t39449;
  t39453 = 0.28121*t5610*t39452;
  t39454 = 0.50321*t5595*t7779*t39452;
  t39455 = -0.50321*t39452*t8379*t8917;
  t39460 = t5595*t7283*t39452;
  t39466 = t39452*t8379*t8917;
  t39470 = t39460 + t39466;
  t39471 = 0.23321*t39470;
  t39472 = t39445 + t39447 + t39450 + t39453 + t39454 + t39455 + t39471;
  t37840 = t22685 + t4484;
  t39646 = -1.*t2482*t39488;
  t39647 = t39646 + t39451;
  t39419 = 0.28121*t39304*t8379;
  t39420 = -0.50321*t7779*t39304*t8379;
  t39425 = -0.50321*t5595*t39304*t8917;
  t39426 = -1.*t7283*t39304*t8379;
  t39427 = t5595*t39304*t8917;
  t39428 = t39426 + t39427;
  t39429 = 0.23321*t39428;
  t39437 = t39419 + t39420 + t39425 + t39429;
  t39518 = 0.28121*t39490*t8379;
  t39526 = -0.50321*t7779*t39490*t8379;
  t39536 = -0.50321*t5595*t39490*t8917;
  t39538 = -1.*t7283*t39490*t8379;
  t39539 = t5595*t39490*t8917;
  t39540 = t39538 + t39539;
  t39611 = 0.23321*t39540;
  t39613 = t39518 + t39526 + t39536 + t39611;
  t38634 = -0.28121*t38561*t22769*t5595;
  t38635 = 0.28121*t38618*t8379;
  t38641 = 0.50321*t7779*t38640;
  t38642 = -0.50321*t38625*t8917;
  t38643 = t7283*t38640;
  t38644 = t38625*t8917;
  t38645 = t38643 + t38644;
  t38646 = 0.23321*t38645;
  t38650 = t38634 + t38635 + t38641 + t38642 + t38646;
  t39096 = 0.28121*t5595*t38559*t1744;
  t39097 = 0.28121*t39061*t8379;
  t39113 = 0.50321*t7779*t39108;
  t39118 = -0.50321*t39072*t8917;
  t39119 = t7283*t39108;
  t39120 = t39072*t8917;
  t39121 = t39119 + t39120;
  t39131 = 0.23321*t39121;
  t39139 = t39096 + t39097 + t39113 + t39118 + t39131;
  t39711 = t2482*t39488;
  t39721 = t39292*t4368;
  t39724 = t39711 + t39721;
  t39731 = t5595*t39724;
  t39741 = t22769*t38559*t8379;
  t39748 = t39731 + t39741;
  t39760 = -1.*t39724*t8379;
  t39761 = t38787 + t39760;
  t39790 = -1.*t5595*t39724;
  t39806 = t39790 + t38775;
  t39317 = -0.50321*t7283*t39304*t8379;
  t39328 = 0.50321*t5595*t39304*t8917;
  t39334 = t7283*t39304*t8379;
  t39343 = -1.*t5595*t39304*t8917;
  t39415 = t39334 + t39343;
  t39416 = 0.23321*t39415;
  t39417 = t39317 + t39328 + t39416;
  t39491 = -0.50321*t7283*t39490*t8379;
  t39493 = 0.50321*t5595*t39490*t8917;
  t39495 = t7283*t39490*t8379;
  t39502 = -1.*t5595*t39490*t8917;
  t39509 = t39495 + t39502;
  t39512 = 0.23321*t39509;
  t39514 = t39491 + t39493 + t39512;
  t38621 = -0.50321*t7283*t38620;
  t38626 = 0.50321*t38625*t8917;
  t38628 = t7283*t38620;
  t38629 = -1.*t38625*t8917;
  t38630 = t38628 + t38629;
  t38631 = 0.23321*t38630;
  t38632 = t38621 + t38626 + t38631;
  t39064 = -0.50321*t7283*t39063;
  t39073 = 0.50321*t39072*t8917;
  t39074 = t7283*t39063;
  t39076 = -1.*t39072*t8917;
  t39077 = t39074 + t39076;
  t39079 = 0.23321*t39077;
  t39081 = t39064 + t39073 + t39079;
  t39758 = -0.50321*t7283*t39748;
  t39762 = 0.50321*t39761*t8917;
  t39763 = t7283*t39748;
  t39766 = -1.*t39761*t8917;
  t39770 = t39763 + t39766;
  t39772 = 0.23321*t39770;
  t39774 = t39758 + t39762 + t39772;
  t39849 = -1.*t22769*t5595*t38559;
  t39850 = t39724*t8379;
  t39854 = t39849 + t39850;
  t39913 = t38755*t4584;
  t39915 = t39292*t5291;
  t39916 = 0.28121*t5610*t39304;
  t39917 = 0.50321*t5595*t7779*t39304;
  t39918 = 0.15121*t39452;
  t39919 = -0.50321*t39304*t8379*t8917;
  t39920 = t5595*t7283*t39304;
  t39921 = t39304*t8379*t8917;
  t39923 = t39920 + t39921;
  t39924 = 0.23321*t39923;
  t39925 = t39913 + t39915 + t39916 + t39917 + t39918 + t39919 + t39924;
  t39927 = t39292*t17566;
  t39941 = t39488*t22706;
  t39942 = 0.28121*t5610*t39490;
  t39947 = 0.50321*t5595*t7779*t39490;
  t39949 = 0.15121*t39647;
  t39950 = -0.50321*t39490*t8379*t8917;
  t39951 = t5595*t7283*t39490;
  t39952 = t39490*t8379*t8917;
  t39956 = t39951 + t39952;
  t39966 = 0.23321*t39956;
  t39969 = t39927 + t39941 + t39942 + t39947 + t39949 + t39950 + t39966;
  t40014 = -0.50321*t7283*t39854;
  t40015 = 0.50321*t39748*t8917;
  t40021 = t7283*t39854;
  t40023 = -1.*t39748*t8917;
  t40026 = t40021 + t40023;
  t40027 = 0.23321*t40026;
  t40029 = t40014 + t40015 + t40027;
  t39972 = -0.28121*t22769*t5595*t38559;
  t39976 = 0.28121*t39724*t8379;
  t39984 = 0.50321*t7779*t39761;
  t39994 = -0.50321*t39748*t8917;
  t39997 = t7283*t39761;
  t40006 = t39748*t8917;
  t40010 = t39997 + t40006;
  t40012 = 0.23321*t40010;
  t40013 = t39972 + t39976 + t39984 + t39994 + t40012;
  t39899 = -1.*t22769*t38559*t4693*t4584;
  t39900 = t22769*t1554*t38559*t5291;
  t39901 = 0.15121*t38862;
  t39902 = 0.28121*t5610*t39061;
  t39904 = 0.28121*t38559*t1744*t8379;
  t39905 = 0.50321*t7779*t39072;
  t39906 = -0.50321*t39063*t8917;
  t39907 = t7283*t39072;
  t39908 = t39063*t8917;
  t39910 = t39907 + t39908;
  t39911 = 0.23321*t39910;
  t39912 = t39899 + t39900 + t39901 + t39902 + t39904 + t39905 + t39906 + t39911;
  t39876 = t38567*t4584;
  t39877 = t38575*t5291;
  t39878 = 0.15121*t38579;
  t39881 = 0.28121*t5610*t38618;
  t39882 = -0.28121*t38561*t22769*t8379;
  t39885 = 0.50321*t7779*t38625;
  t39887 = -0.50321*t38620*t8917;
  t39889 = t7283*t38625;
  t39891 = t38620*t8917;
  t39892 = t39889 + t39891;
  t39896 = 0.23321*t39892;
  t39898 = t39876 + t39877 + t39878 + t39881 + t39882 + t39885 + t39887 + t39896;
  t40049 = t38561*t22769*t2482*t4693;
  t40051 = t38561*t22769*t1554*t4368;
  t40052 = t40049 + t40051;
  t40058 = 0.28121*t5610*t40052;
  t40060 = 0.50321*t5595*t7779*t40052;
  t40066 = 0.15121*t38678;
  t40074 = -0.50321*t40052*t8379*t8917;
  t40076 = t5595*t7283*t40052;
  t40079 = t40052*t8379*t8917;
  t40080 = t40076 + t40079;
  t40081 = 0.23321*t40080;
  t40099 = -1.*t38561*t22769*t1554*t2482;
  t40102 = t38561*t22769*t4693*t4368;
  t40103 = t40099 + t40102;
  t40098 = -1.*t38561*t5595*t1744;
  t40105 = t40103*t8379;
  t40106 = t40098 + t40105;
  t40112 = t5595*t40103;
  t40114 = t38561*t1744*t8379;
  t40115 = t40112 + t40114;
  t40127 = -1.*t40103*t8379;
  t40128 = t38711 + t40127;
  t40251 = t38561*t1554*t2482*t1744;
  t40252 = -1.*t38561*t1744*t4693*t4368;
  t40253 = t40251 + t40252;
  t40259 = t5595*t40253;
  t40262 = t40259 + t38623;
  t40264 = t40253*t8379;
  t40265 = t38614 + t40264;
  t40310 = t1554*t38559;
  t40314 = t38561*t1744*t4693;
  t40317 = t40310 + t40314;
  t40320 = t2482*t40317;
  t40321 = t38575*t4368;
  t40323 = t40320 + t40321;
  t40044 = t38561*t22769*t1554*t4584;
  t40045 = t38561*t22769*t4693*t5291;
  t40082 = t40044 + t40045 + t40058 + t40060 + t40066 + t40074 + t40081;
  t40386 = -1.*t40317*t4368;
  t40390 = t38615 + t40386;
  t40410 = -1.*t38596*t4368;
  t40411 = t40320 + t40410;
  t40084 = t38561*t22769*t4693*t17566;
  t40085 = -1.*t38561*t22769*t1554*t22706;
  t40090 = t40084 + t40085 + t40058 + t40060 + t40066 + t40074 + t40081;
  t40374 = t38575*t17566;
  t40376 = t40317*t22706;
  t40377 = -1.*t2482*t40317;
  t40378 = t40377 + t38578;
  t40380 = 0.15121*t40378;
  t40391 = 0.28121*t5610*t40390;
  t40392 = 0.50321*t5595*t7779*t40390;
  t40393 = -0.50321*t40390*t8379*t8917;
  t40394 = t5595*t7283*t40390;
  t40395 = t40390*t8379*t8917;
  t40396 = t40394 + t40395;
  t40397 = 0.23321*t40396;
  t40398 = t40374 + t40376 + t40380 + t40391 + t40392 + t40393 + t40397;
  t40649 = -1.*t2482*t38596;
  t40654 = t40649 + t40386;
  t40344 = 0.28121*t40323*t8379;
  t40345 = -0.50321*t7779*t40323*t8379;
  t40346 = -0.50321*t5595*t40323*t8917;
  t40348 = -1.*t7283*t40323*t8379;
  t40349 = t5595*t40323*t8917;
  t40354 = t40348 + t40349;
  t40357 = 0.23321*t40354;
  t40361 = t40344 + t40345 + t40346 + t40357;
  t40432 = 0.28121*t40411*t8379;
  t40437 = -0.50321*t7779*t40411*t8379;
  t40440 = -0.50321*t5595*t40411*t8917;
  t40441 = -1.*t7283*t40411*t8379;
  t40453 = t5595*t40411*t8917;
  t40457 = t40441 + t40453;
  t40458 = 0.23321*t40457;
  t40459 = t40432 + t40437 + t40440 + t40458;
  t40125 = -0.28121*t38561*t5595*t1744;
  t40126 = 0.28121*t40103*t8379;
  t40129 = 0.50321*t7779*t40128;
  t40130 = -0.50321*t40115*t8917;
  t40131 = t7283*t40128;
  t40137 = t40115*t8917;
  t40139 = t40131 + t40137;
  t40143 = 0.23321*t40139;
  t40176 = t40125 + t40126 + t40129 + t40130 + t40143;
  t40677 = t40317*t4368;
  t40679 = t38603 + t40677;
  t40680 = t5595*t40679;
  t40683 = -1.*t38561*t22769*t8379;
  t40685 = t40680 + t40683;
  t40687 = -1.*t40679*t8379;
  t40689 = t38614 + t40687;
  t40706 = -1.*t5595*t40679;
  t40707 = t40706 + t38623;
  t40327 = -0.50321*t7283*t40323*t8379;
  t40329 = 0.50321*t5595*t40323*t8917;
  t40330 = t7283*t40323*t8379;
  t40332 = -1.*t5595*t40323*t8917;
  t40336 = t40330 + t40332;
  t40338 = 0.23321*t40336;
  t40339 = t40327 + t40329 + t40338;
  t40412 = -0.50321*t7283*t40411*t8379;
  t40416 = 0.50321*t5595*t40411*t8917;
  t40420 = t7283*t40411*t8379;
  t40426 = -1.*t5595*t40411*t8917;
  t40427 = t40420 + t40426;
  t40428 = 0.23321*t40427;
  t40429 = t40412 + t40416 + t40428;
  t40110 = -0.50321*t7283*t40106;
  t40117 = 0.50321*t40115*t8917;
  t40119 = t7283*t40106;
  t40120 = -1.*t40115*t8917;
  t40121 = t40119 + t40120;
  t40122 = 0.23321*t40121;
  t40123 = t40110 + t40117 + t40122;
  t40686 = -0.50321*t7283*t40685;
  t40691 = 0.50321*t40689*t8917;
  t40694 = t7283*t40685;
  t40695 = -1.*t40689*t8917;
  t40696 = t40694 + t40695;
  t40697 = 0.23321*t40696;
  t40700 = t40686 + t40691 + t40697;
  t40727 = t40679*t8379;
  t40730 = t38636 + t40727;
  p_output1[0]=(t34782 + t34960 + t35219 + t35248 + t35281 + 0.50321*t35461*t7779 - 0.50321*t35480*t8917 + 0.23321*(t35461*t7283 + t35480*t8917))*var2[4] + t10299*var2[5] + t22740*var2[6] + t34385*var2[7] + t30761*var2[8];
  p_output1[1]=t36367 + t36866 + t10299*var2[4] + (t34782 + t34960 + t35219 + t35248 + t37448 + t37576 + t37684)*var2[5] + t37799*var2[6];
  p_output1[2]=t36367 + t36866 + t22740*var2[4] + t37799*var2[5] + (t35219 + t35248 + t37448 + t37576 + t37684 + t37757 + t1554*t22769*t37840)*var2[6];
  p_output1[3]=t34385*var2[4] + t36836*var2[5] + t36836*var2[6] + (t35281 + 0.28121*t38114*t5595 + 0.50321*t38245*t7779 - 0.50321*t38152*t8917 + 0.23321*(t38245*t7283 + t38152*t8917))*var2[7] + t38215*var2[8];
  p_output1[4]=t30761*var2[4] + t36365*var2[5] + t36365*var2[6] + t38215*var2[7] + (0.50321*t38136*t7283 + 0.50321*t38292*t8917 + 0.23321*(-1.*t38136*t7283 - 1.*t38292*t8917))*var2[8];
  p_output1[5]=1.;
  p_output1[6]=t1744*t4584*t4693 - 1.*t1554*t1744*t5291 + 0.28121*t24282*t5610 + 0.15121*t5851 + 0.50321*t30044*t7779 + 0.28121*t22769*t8379 - 0.50321*t24416*t8917 + 0.23321*(t30044*t7283 + t24416*t8917);
  p_output1[7]=t38453 + t38454 + t38463 + t38465 + t38476 - 1.*t1554*t22769*t4584 - 1.*t22769*t4693*t5291;
  p_output1[8]=t1554*t22706*t22769 + t38453 + t38454 + t38463 + t38465 + t38476 - 1.*t17566*t22769*t4693;
  p_output1[9]=0.28121*t1744*t5595 + 0.50321*t38152*t7779 + 0.28121*t38114*t8379 - 0.50321*t38136*t8917 + 0.23321*(t38152*t7283 + t38136*t8917);
  p_output1[10]=-0.50321*t38292*t7283 + 0.50321*t38136*t8917 + 0.23321*(t38292*t7283 - 1.*t38136*t8917);
  p_output1[11]=(t38752 + t38756 + t38762 + t38768 + t38769 + 0.50321*t38778*t7779 - 0.50321*t38790*t8917 + 0.23321*(t38778*t7283 + t38790*t8917))*var2[3] + t38722*var2[4] + t38612*var2[5] + t38592*var2[6] + t38650*var2[7] + t38632*var2[8];
  p_output1[12]=t38722*var2[3] + (t38769 + t1744*t38559*t4584*t4693 + 0.15121*(t1554*t1744*t38559*t4368 + t1744*t2482*t38559*t4693) - 1.*t1554*t1744*t38559*t5291 + 0.28121*t39169*t5610 + 0.50321*t39192*t7779 - 0.50321*t39237*t8917 + 0.23321*(t39192*t7283 + t39237*t8917))*var2[4] + t38993*var2[5] + t39055*var2[6] + t39139*var2[7] + t39081*var2[8];
  p_output1[13]=t38612*var2[3] + t38993*var2[4] + (t38752 + t38756 + t38762 + t38768 + 0.50321*t38767*t5595*t7779 - 0.50321*t38767*t8379*t8917 + 0.23321*(t38767*t5595*t7283 + t38767*t8379*t8917))*var2[5] + t39472*var2[6] + t39437*var2[7] + t39417*var2[8];
  p_output1[14]=t38592*var2[3] + t39055*var2[4] + t39472*var2[5] + (t39447 + t37840*t39488 + 0.15121*(t39448 + t39488*t4368) + 0.28121*t39647*t5610 + 0.50321*t39647*t5595*t7779 - 0.50321*t39647*t8379*t8917 + 0.23321*(t39647*t5595*t7283 + t39647*t8379*t8917))*var2[6] + t39613*var2[7] + t39514*var2[8];
  p_output1[15]=t38650*var2[3] + t39139*var2[4] + t39437*var2[5] + t39613*var2[6] + (t38769 + 0.28121*t39724*t5595 + 0.50321*t39806*t7779 - 0.50321*t39761*t8917 + 0.23321*(t39806*t7283 + t39761*t8917))*var2[7] + t39774*var2[8];
  p_output1[16]=t38632*var2[3] + t39081*var2[4] + t39417*var2[5] + t39514*var2[6] + t39774*var2[7] + (0.50321*t39748*t7283 + 0.50321*t39854*t8917 + 0.23321*(-1.*t39748*t7283 - 1.*t39854*t8917))*var2[8];
  p_output1[17]=1.;
  p_output1[18]=t39898;
  p_output1[19]=t39912;
  p_output1[20]=t39925;
  p_output1[21]=t39969;
  p_output1[22]=t40013;
  p_output1[23]=t40029;
  p_output1[24]=t39898*var2[3] + t39912*var2[4] + t39925*var2[5] + t39969*var2[6] + t40013*var2[7] + t40029*var2[8];
  p_output1[25]=t39912*var2[3] + (t39882 - 1.*t1744*t38561*t4584*t4693 + 0.15121*(-1.*t1554*t1744*t38561*t4368 - 1.*t1744*t2482*t38561*t4693) + t1554*t1744*t38561*t5291 + 0.28121*t40253*t5610 + 0.50321*t40262*t7779 - 0.50321*t40265*t8917 + 0.23321*(t40262*t7283 + t40265*t8917))*var2[4] + t40082*var2[5] + t40090*var2[6] + t40176*var2[7] + t40123*var2[8];
  p_output1[26]=t39925*var2[3] + t40082*var2[4] + (t39876 + t39877 + t39878 + t39881 + 0.50321*t38618*t5595*t7779 - 0.50321*t38618*t8379*t8917 + 0.23321*(t38618*t5595*t7283 + t38618*t8379*t8917))*var2[5] + t40398*var2[6] + t40361*var2[7] + t40339*var2[8];
  p_output1[27]=t39969*var2[3] + t40090*var2[4] + t40398*var2[5] + (t37840*t38596 + t40376 + 0.15121*(t38599 + t40377) + 0.28121*t40654*t5610 + 0.50321*t40654*t5595*t7779 - 0.50321*t40654*t8379*t8917 + 0.23321*(t40654*t5595*t7283 + t40654*t8379*t8917))*var2[6] + t40459*var2[7] + t40429*var2[8];
  p_output1[28]=t40013*var2[3] + t40176*var2[4] + t40361*var2[5] + t40459*var2[6] + (t39882 + 0.28121*t40679*t5595 + 0.50321*t40707*t7779 - 0.50321*t40689*t8917 + 0.23321*(t40707*t7283 + t40689*t8917))*var2[7] + t40700*var2[8];
  p_output1[29]=t40029*var2[3] + t40123*var2[4] + t40339*var2[5] + t40429*var2[6] + t40700*var2[7] + (0.50321*t40685*t7283 + 0.50321*t40730*t8917 + 0.23321*(-1.*t40685*t7283 - 1.*t40730*t8917))*var2[8];
  p_output1[30]=1.;
  p_output1[31]=0.15121*t39490 + t39292*t4584 + t39488*t5291 + 0.28121*t39724*t5610 + 0.50321*t39748*t7779 - 0.28121*t22769*t38559*t8379 - 0.50321*t39854*t8917 + 0.23321*(t39763 + t39854*t8917);
  p_output1[32]=0.15121*t40052 + t22769*t38561*t4584*t4693 - 1.*t1554*t22769*t38561*t5291 + 0.28121*t40103*t5610 + 0.50321*t40115*t7779 - 0.28121*t1744*t38561*t8379 - 0.50321*t40106*t8917 + 0.23321*(t40115*t7283 + t40106*t8917);
  p_output1[33]=0.15121*t40390 + t38575*t4584 + t40317*t5291 + 0.28121*t40323*t5610 + 0.50321*t40323*t5595*t7779 - 0.50321*t40323*t8379*t8917 + 0.23321*(t40323*t5595*t7283 + t40323*t8379*t8917);
  p_output1[34]=t22706*t38596 + t17566*t40317 + 0.15121*t40654 + 0.28121*t40411*t5610 + 0.50321*t40411*t5595*t7779 - 0.50321*t40411*t8379*t8917 + 0.23321*(t40411*t5595*t7283 + t40411*t8379*t8917);
  p_output1[35]=0.28121*t22769*t38561*t5595 + 0.50321*t40689*t7779 + 0.28121*t40679*t8379 - 0.50321*t40685*t8917 + 0.23321*(t40689*t7283 + t40685*t8917);
  p_output1[36]=-0.50321*t40730*t7283 + 0.50321*t40685*t8917 + 0.23321*(t40730*t7283 - 1.*t40685*t8917);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 37, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_initial_swing_velocity_FlFoot_DiagonalStance.hh"

namespace DiagonalStance
{

void J_initial_swing_velocity_FlFoot_DiagonalStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
