/*
 * Automatically Generated from Mathematica.
 * Thu 2 Jun 2022 14:54:33 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t19459;
  double t19172;
  double t19173;
  double t19464;
  double t19465;
  double t19470;
  double t19608;
  double t19609;
  double t19613;
  double t19621;
  double t19622;
  double t19633;
  double t19636;
  double t19634;
  double t19637;
  double t19694;
  double t19820;
  double t19831;
  double t19832;
  double t19833;
  double t19847;
  double t19848;
  double t19146;
  double t18289;
  double t19007;
  double t19140;
  double t19142;
  double t19861;
  double t19865;
  double t19870;
  double t19872;
  double t19874;
  double t19875;
  double t19878;
  double t19879;
  double t19882;
  double t19883;
  double t19884;
  double t19885;
  double t19889;
  double t19893;
  double t19894;
  double t17341;
  double t17380;
  double t20047;
  double t19969;
  double t20075;
  double t20076;
  double t20077;
  double t20136;
  double t20143;
  double t20144;
  double t20146;
  double t20148;
  double t20149;
  double t20151;
  double t20152;
  double t20169;
  double t20080;
  double t20082;
  double t20087;
  double t20090;
  double t20092;
  double t20112;
  double t20314;
  double t20321;
  double t20323;
  double t20326;
  double t20338;
  double t20344;
  double t20345;
  double t20346;
  double t20351;
  double t20353;
  double t20354;
  double t20362;
  double t20363;
  double t20364;
  double t20373;
  double t20378;
  double t20383;
  double t20370;
  double t20371;
  double t20372;
  double t20400;
  double t20401;
  double t20402;
  double t20422;
  double t20423;
  double t20424;
  double t20407;
  double t20409;
  double t20414;
  double t20416;
  double t20425;
  double t20426;
  double t20432;
  double t20436;
  double t20437;
  double t20438;
  double t20444;
  double t20445;
  double t20446;
  double t20447;
  double t20452;
  double t20453;
  double t20454;
  double t20455;
  double t20456;
  double t20457;
  double t20471;
  double t20472;
  double t20473;
  double t20474;
  double t20475;
  double t20480;
  double t20494;
  double t20495;
  double t20496;
  double t20486;
  double t20497;
  double t20498;
  double t20499;
  double t20500;
  double t20501;
  double t20502;
  double t20504;
  double t20505;
  double t20506;
  double t20507;
  double t20519;
  double t20523;
  double t20524;
  double t20525;
  double t20530;
  double t20534;
  double t20553;
  double t20741;
  double t20745;
  double t20746;
  double t20952;
  double t20974;
  double t20976;
  double t20997;
  double t20998;
  double t20999;
  double t20982;
  double t20990;
  double t20983;
  double t20985;
  double t20988;
  double t20995;
  double t21003;
  double t19162;
  double t20761;
  double t20763;
  double t20764;
  double t20765;
  double t20767;
  double t20773;
  double t20831;
  double t20888;
  double t20908;
  double t20941;
  double t21113;
  double t21115;
  double t21104;
  double t21109;
  double t20989;
  double t21123;
  double t21126;
  double t21127;
  double t21129;
  double t21130;
  double t21131;
  double t21001;
  double t21009;
  double t21015;
  double t21016;
  double t21033;
  double t21132;
  double t21039;
  double t21040;
  double t21137;
  double t21052;
  double t21056;
  double t21094;
  double t21194;
  double t21200;
  double t21202;
  double t21214;
  double t21215;
  double t21216;
  double t21220;
  double t21222;
  double t21223;
  double t21228;
  double t21230;
  double t21231;
  double t21286;
  double t21288;
  double t21290;
  double t21291;
  double t21296;
  double t21298;
  double t21302;
  double t21308;
  double t21311;
  double t21312;
  double t21303;
  double t21318;
  double t21319;
  double t21321;
  double t21323;
  double t21332;
  double t21334;
  double t21336;
  double t21338;
  double t21340;
  double t21341;
  double t21203;
  double t21204;
  double t21206;
  double t21208;
  double t21407;
  double t21410;
  double t21413;
  double t21415;
  double t21416;
  double t21421;
  double t21422;
  double t21423;
  double t21431;
  double t21432;
  double t21433;
  double t21420;
  double t21436;
  double t21438;
  double t21440;
  double t21449;
  double t21450;
  double t21451;
  double t21444;
  double t21446;
  double t21458;
  double t21459;
  double t21460;
  double t21462;
  double t21463;
  double t21464;
  double t21472;
  double t21474;
  double t21475;
  double t21317;
  double t21496;
  double t21498;
  double t21499;
  double t21500;
  double t21501;
  double t21502;
  double t21503;
  double t21504;
  double t21508;
  double t21510;
  double t21511;
  double t21512;
  double t21513;
  double t21514;
  double t21516;
  double t21517;
  double t21519;
  double t19163;
  double t20043;
  double t21538;
  double t21539;
  double t21541;
  double t21544;
  double t21546;
  double t21547;
  double t21528;
  double t21529;
  double t21530;
  double t21534;
  double t21535;
  double t21536;
  double t21325;
  double t21568;
  double t21569;
  double t21570;
  double t21571;
  double t21572;
  double t21574;
  double t21575;
  double t21554;
  double t21555;
  double t21556;
  double t21349;
  double t21350;
  double t21587;
  double t21588;
  double t21589;
  double t21590;
  double t21591;
  double t21593;
  double t21595;
  double t21578;
  double t21579;
  double t21580;
  double t21582;
  double t21583;
  double t21584;
  double t21615;
  double t21617;
  double t21624;
  double t21627;
  double t21603;
  double t21604;
  double t21605;
  double t21606;
  double t21607;
  double t21608;
  double t21610;
  double t21611;
  double t21612;
  double t21616;
  double t21622;
  double t21626;
  double t21630;
  double t21672;
  double t21637;
  double t21638;
  double t21676;
  double t21644;
  double t21645;
  double t21649;
  double t21650;
  double t20708;
  double t20709;
  double t20713;
  double t21720;
  double t21723;
  double t21728;
  double t21737;
  double t21739;
  double t21731;
  double t21756;
  double t21758;
  double t21211;
  double t21217;
  double t21218;
  double t21763;
  double t21765;
  double t21798;
  double t21802;
  double t21806;
  double t21834;
  double t21839;
  double t21842;
  double t21482;
  double t21484;
  double t21485;
  double t21366;
  double t21367;
  double t21876;
  double t21877;
  double t21878;
  double t21883;
  double t21884;
  double t21886;
  double t21374;
  double t21889;
  double t21890;
  double t21891;
  double t21893;
  double t21894;
  double t21895;
  double t21375;
  double t21376;
  double t21377;
  double t21393;
  double t21398;
  double t21399;
  double t21400;
  double t21406;
  double t21766;
  double t21911;
  double t21912;
  double t21913;
  double t21914;
  double t21915;
  double t21916;
  double t21917;
  double t21904;
  double t21906;
  double t21907;
  double t21783;
  double t21785;
  double t21935;
  double t21936;
  double t21937;
  double t21938;
  double t21939;
  double t21940;
  double t21941;
  double t21920;
  double t21921;
  double t21922;
  double t21924;
  double t21925;
  double t21926;
  double t20172;
  double t20358;
  double t20369;
  double t21949;
  double t21956;
  double t21958;
  double t21996;
  double t22003;
  double t22054;
  double t22057;
  double t22064;
  double t22066;
  double t22043;
  double t22044;
  double t22045;
  double t22046;
  double t22047;
  double t22048;
  double t22049;
  double t22050;
  double t22051;
  double t22052;
  double t22055;
  double t22065;
  double t22070;
  double t22075;
  double t22116;
  double t22079;
  double t22081;
  double t22124;
  double t22088;
  double t22090;
  double t22094;
  t19459 = Cos(var1[17]);
  t19172 = Sin(var1[17]);
  t19173 = 0.28121*t19172;
  t19464 = -1.*t19459;
  t19465 = 1. + t19464;
  t19470 = -0.50321*t19465;
  t19608 = -0.19821*t19459;
  t19609 = t19470 + t19608;
  t19613 = t19609*t19172;
  t19621 = -0.305*t19459*t19172;
  t19622 = t19173 + t19613 + t19621;
  t19633 = Cos(var1[16]);
  t19636 = Sin(var1[16]);
  t19634 = -1.*t19633*t19459;
  t19637 = -1.*t19636*t19172;
  t19694 = t19634 + t19637;
  t19820 = -0.15121*t19694;
  t19831 = t19633*t19459;
  t19832 = t19636*t19172;
  t19833 = t19831 + t19832;
  t19847 = -0.15121*t19833;
  t19848 = t19820 + t19847;
  t19146 = Sin(var1[15]);
  t18289 = Cos(var1[15]);
  t19007 = -1.*t18289;
  t19140 = 1. + t19007;
  t19142 = -0.15121*t19140;
  t19861 = -1.*t19633;
  t19865 = 1. + t19861;
  t19870 = -0.28121*t19865;
  t19872 = t19633*t19609;
  t19874 = 0.305*t19636*t19172;
  t19875 = t19870 + t19872 + t19874;
  t19878 = t18289*t19875;
  t19879 = t19142 + t19878;
  t19882 = -1.*t19146*t19879;
  t19883 = -0.15121*t18289;
  t19884 = 0.15121*t19146;
  t19885 = t19146*t19875;
  t19889 = t19142 + t19883 + t19884 + t19885;
  t19893 = t18289*t19889;
  t19894 = t19882 + t19893;
  t17341 = Cos(var1[4]);
  t17380 = Cos(var1[5]);
  t20047 = Sin(var1[5]);
  t19969 = Sin(var1[4]);
  t20075 = t18289*t17341*t17380;
  t20076 = -1.*t17341*t19146*t20047;
  t20077 = t20075 + t20076;
  t20136 = -1.*t19459*t19636;
  t20143 = t19633*t19172;
  t20144 = t20136 + t20143;
  t20146 = t20144*t19969;
  t20148 = t18289*t17380*t19694;
  t20149 = -1.*t19146*t19694*t20047;
  t20151 = t20148 + t20149;
  t20152 = t17341*t20151;
  t20169 = t20146 + t20152;
  t20080 = t19636*t19969;
  t20082 = t19633*t20077;
  t20087 = t20080 + t20082;
  t20090 = t19633*t19969;
  t20092 = -1.*t19636*t20077;
  t20112 = t20090 + t20092;
  t20314 = Sin(var1[3]);
  t20321 = t17380*t19146*t19694;
  t20323 = t18289*t19694*t20047;
  t20326 = t20321 + t20323;
  t20338 = t20314*t20326;
  t20344 = Cos(var1[3]);
  t20345 = t17341*t20144;
  t20346 = -1.*t19969*t20151;
  t20351 = t20345 + t20346;
  t20353 = t20344*t20351;
  t20354 = t20338 + t20353;
  t20362 = t20344*t20326;
  t20363 = -1.*t20314*t20351;
  t20364 = t20362 + t20363;
  t20373 = -1.*t18289*t17380;
  t20378 = t19146*t20047;
  t20383 = t20373 + t20378;
  t20370 = t17380*t19146*t20144;
  t20371 = t18289*t20144*t20047;
  t20372 = t20370 + t20371;
  t20400 = t17380*t19889;
  t20401 = t19879*t20047;
  t20402 = t20400 + t20401;
  t20422 = t17380*t19879;
  t20423 = -1.*t19889*t20047;
  t20424 = t20422 + t20423;
  t20407 = -1.*t20383*t20402;
  t20409 = t17380*t19146;
  t20414 = t18289*t20047;
  t20416 = t20409 + t20414;
  t20425 = -1.*t20416*t20424;
  t20426 = t20407 + t20425;
  t20432 = t20372*t20426;
  t20436 = 0.28121*t19636;
  t20437 = t19609*t19636;
  t20438 = -0.305*t19633*t19172;
  t20444 = t20436 + t20437 + t20438;
  t20445 = t20444*t19833;
  t20446 = t20372*t20402;
  t20447 = t18289*t17380*t20144;
  t20452 = -1.*t19146*t20144*t20047;
  t20453 = t20447 + t20452;
  t20454 = t20453*t20424;
  t20455 = t20445 + t20446 + t20454;
  t20456 = t20383*t20455;
  t20457 = t20432 + t20456;
  t20471 = t19833*t19969;
  t20472 = t17341*t20453;
  t20473 = t20471 + t20472;
  t20474 = t20444*t19969;
  t20475 = t17341*t20424;
  t20480 = t20474 + t20475;
  t20494 = t17341*t20444;
  t20495 = -1.*t19969*t20424;
  t20496 = t20494 + t20495;
  t20486 = -1.*t17341*t20416*t20480;
  t20497 = t19969*t20416*t20496;
  t20498 = t20407 + t20486 + t20497;
  t20499 = t20473*t20498;
  t20500 = t20473*t20480;
  t20501 = t17341*t19833;
  t20502 = -1.*t19969*t20453;
  t20504 = t20501 + t20502;
  t20505 = t20504*t20496;
  t20506 = t20446 + t20500 + t20505;
  t20507 = t17341*t20416*t20506;
  t20519 = t20499 + t20507;
  t20523 = -1.*t20144*t19969;
  t20524 = -1.*t17341*t20151;
  t20525 = t20523 + t20524;
  t20530 = -1.*t20444*t19969;
  t20534 = -1.*t17341*t20424;
  t20553 = t20530 + t20534;
  t20741 = -1.*t17380*t19146*t19694;
  t20745 = -1.*t18289*t19694*t20047;
  t20746 = t20741 + t20745;
  t20952 = -1.*t17380*t19889;
  t20974 = -1.*t19879*t20047;
  t20976 = t20952 + t20974;
  t20997 = -1.*t17380*t19146*t20144;
  t20998 = -1.*t18289*t20144*t20047;
  t20999 = t20997 + t20998;
  t20982 = -1.*t20416*t20402;
  t20990 = -1.*t20383*t20424;
  t20983 = t18289*t17380;
  t20985 = -1.*t19146*t20047;
  t20988 = t20983 + t20985;
  t20995 = t20453*t20402;
  t21003 = t20372*t20424;
  t19162 = -0.15121*t19146;
  t20761 = var2[0]*t17341*t20746;
  t20763 = t20314*t19969*t20746;
  t20764 = t20344*t20151;
  t20765 = t20763 + t20764;
  t20767 = var2[1]*t20765;
  t20773 = -1.*t20344*t19969*t20746;
  t20831 = t20314*t20151;
  t20888 = t20773 + t20831;
  t20908 = var2[2]*t20888;
  t20941 = t20453*t20426;
  t21113 = -1.*t19146*t19875;
  t21115 = t19162 + t21113;
  t21104 = 0.15121*t18289;
  t21109 = t21104 + t19878;
  t20989 = -1.*t20988*t20424;
  t21123 = t17380*t21115;
  t21126 = -1.*t21109*t20047;
  t21127 = t21123 + t21126;
  t21129 = t17380*t21109;
  t21130 = t21115*t20047;
  t21131 = t21129 + t21130;
  t21001 = t20999*t20424;
  t21009 = t20416*t20455;
  t21015 = t17341*t20999*t20498;
  t21016 = Power(t17341,2);
  t21033 = Power(t19969,2);
  t21132 = -1.*t20383*t21131;
  t21039 = -1.*t17341*t20988*t20480;
  t21040 = t19969*t20988*t20496;
  t21137 = t20372*t21131;
  t21052 = t17341*t20999*t20480;
  t21056 = -1.*t19969*t20999*t20496;
  t21094 = t17341*t20988*t20506;
  t21194 = t19459*t19636;
  t21200 = -1.*t19633*t19172;
  t21202 = t21194 + t21200;
  t21214 = t18289*t17380*t21202;
  t21215 = -1.*t19146*t21202*t20047;
  t21216 = t21214 + t21215;
  t21220 = t17380*t19146*t21202;
  t21222 = t18289*t21202*t20047;
  t21223 = t21220 + t21222;
  t21228 = t17341*t19694;
  t21230 = -1.*t19969*t21216;
  t21231 = t21228 + t21230;
  t21286 = -0.28121*t19636;
  t21288 = -1.*t19609*t19636;
  t21290 = 0.305*t19633*t19172;
  t21291 = t21286 + t21288 + t21290;
  t21296 = t17380*t19146*t21291;
  t21298 = t18289*t21291*t20047;
  t21302 = t21296 + t21298;
  t21308 = t18289*t17380*t21291;
  t21311 = -1.*t19146*t21291*t20047;
  t21312 = t21308 + t21311;
  t21303 = -1.*t20383*t21302;
  t21318 = 0.28121*t19633;
  t21319 = t21318 + t19872 + t19874;
  t21321 = t21302*t20372;
  t21323 = t20326*t20402;
  t21332 = t21319*t19969;
  t21334 = t17341*t21312;
  t21336 = t21332 + t21334;
  t21338 = t17341*t21319;
  t21340 = -1.*t19969*t21312;
  t21341 = t21338 + t21340;
  t21203 = -0.15121*t21202;
  t21204 = -0.15121*t20144;
  t21206 = t21203 + t21204;
  t21208 = var2[15]*t21206;
  t21407 = 0.305*t19459*t19636;
  t21410 = t21407 + t20438;
  t21413 = t17380*t19146*t21410;
  t21415 = t18289*t21410*t20047;
  t21416 = t21413 + t21415;
  t21421 = t18289*t17380*t21410;
  t21422 = -1.*t19146*t21410*t20047;
  t21423 = t21421 + t21422;
  t21431 = t17380*t19146*t19833;
  t21432 = t18289*t19833*t20047;
  t21433 = t21431 + t21432;
  t21420 = -1.*t20383*t21416;
  t21436 = -0.305*t19633*t19459;
  t21438 = -0.305*t19636*t19172;
  t21440 = t21436 + t21438;
  t21449 = t18289*t17380*t19833;
  t21450 = -1.*t19146*t19833*t20047;
  t21451 = t21449 + t21450;
  t21444 = t21416*t20372;
  t21446 = t21433*t20402;
  t21458 = t21440*t19969;
  t21459 = t17341*t21423;
  t21460 = t21458 + t21459;
  t21462 = t17341*t21440;
  t21463 = -1.*t19969*t21423;
  t21464 = t21462 + t21463;
  t21472 = t21202*t19969;
  t21474 = t17341*t21451;
  t21475 = t21472 + t21474;
  t21317 = t20444*t20144;
  t21496 = t19694*t19875;
  t21498 = t21317 + t21496;
  t21499 = t19833*t21498;
  t21500 = -1.*t20144*t19875;
  t21501 = -1.*t20444*t19833;
  t21502 = t21500 + t21501;
  t21503 = t20144*t21502;
  t21504 = -0.15121 + t21499 + t21503;
  t21508 = -1.*t18289*t20144*t19879;
  t21510 = -1.*t19146*t20144*t19889;
  t21511 = t21501 + t21508 + t21510;
  t21512 = t20144*t21511;
  t21513 = t18289*t19694*t19879;
  t21514 = t19146*t19694*t19889;
  t21516 = t21317 + t21513 + t21514;
  t21517 = t19833*t21516;
  t21519 = t21512 + t21517;
  t19163 = t19142 + t19162;
  t20043 = t19142 + t19884;
  t21538 = t20314*t19969*t20416;
  t21539 = t20344*t20383;
  t21541 = t21538 + t21539;
  t21544 = -1.*t20344*t19969*t20416;
  t21546 = t20314*t20383;
  t21547 = t21544 + t21546;
  t21528 = t17380*t20314*t19969;
  t21529 = t20344*t20047;
  t21530 = t21528 + t21529;
  t21534 = t20344*t17380;
  t21535 = -1.*t20314*t19969*t20047;
  t21536 = t21534 + t21535;
  t21325 = t20151*t20424;
  t21568 = -1.*t20372*t20402;
  t21569 = -1.*t20453*t20424;
  t21570 = t21501 + t21568 + t21569;
  t21571 = t20326*t21570;
  t21572 = t21317 + t21323 + t21325;
  t21574 = t20372*t21572;
  t21575 = t21571 + t21574;
  t21554 = t18289*t21530;
  t21555 = t19146*t21536;
  t21556 = t21554 + t21555;
  t21349 = t20169*t20480;
  t21350 = t20351*t20496;
  t21587 = -1.*t20473*t20480;
  t21588 = -1.*t20504*t20496;
  t21589 = t21568 + t21587 + t21588;
  t21590 = t20169*t21589;
  t21591 = t21323 + t21349 + t21350;
  t21593 = t20473*t21591;
  t21595 = t21590 + t21593;
  t21578 = -1.*t17341*t19636*t20314;
  t21579 = t19633*t21556;
  t21580 = t21578 + t21579;
  t21582 = -1.*t19633*t17341*t20314;
  t21583 = -1.*t19636*t21556;
  t21584 = t21582 + t21583;
  t21615 = -1.*t20453*t20402;
  t21617 = -1.*t20372*t20424;
  t21624 = t20151*t20402;
  t21627 = t20326*t20424;
  t21603 = var2[0]*t17341*t20988;
  t21604 = t20314*t20416;
  t21605 = -1.*t20344*t19969*t20988;
  t21606 = t21604 + t21605;
  t21607 = var2[2]*t21606;
  t21608 = t20344*t20416;
  t21610 = t20314*t19969*t20988;
  t21611 = t21608 + t21610;
  t21612 = var2[1]*t21611;
  t21616 = -1.*t20999*t20424;
  t21622 = t20151*t21570;
  t21626 = t20746*t20424;
  t21630 = t20453*t21572;
  t21672 = -1.*t20372*t21131;
  t21637 = -1.*t17341*t20999*t20480;
  t21638 = t19969*t20999*t20496;
  t21676 = t20326*t21131;
  t21644 = t17341*t20746*t20480;
  t21645 = -1.*t19969*t20746*t20496;
  t21649 = t17341*t20746*t21589;
  t21650 = t17341*t20999*t21591;
  t20708 = -1.*t19833*t19969;
  t20709 = -1.*t17341*t20453;
  t20713 = t20708 + t20709;
  t21720 = t20444*t19694;
  t21723 = t20144*t21319;
  t21728 = -1.*t20444*t20144;
  t21737 = Power(t18289,2);
  t21739 = Power(t19146,2);
  t21731 = -1.*t21319*t19833;
  t21756 = t21302*t20326;
  t21758 = t21223*t20402;
  t21211 = t19694*t19969;
  t21217 = t17341*t21216;
  t21218 = t21211 + t21217;
  t21763 = -1.*t21302*t20372;
  t21765 = -1.*t20326*t20402;
  t21798 = t20144*t21440;
  t21802 = -1.*t21202*t20444;
  t21806 = -1.*t21440*t19833;
  t21834 = t21416*t20326;
  t21839 = -1.*t21416*t20372;
  t21842 = -1.*t21433*t20402;
  t21482 = t17341*t21202;
  t21484 = -1.*t19969*t21451;
  t21485 = t21482 + t21484;
  t21366 = 0.28121*t19459;
  t21367 = t19609*t19459;
  t21876 = Power(t19172,2);
  t21877 = 0.305*t21876;
  t21878 = t21366 + t21367 + t21877;
  t21883 = t19146*t19879;
  t21884 = -1.*t18289*t19889;
  t21886 = t21883 + t21884;
  t21374 = var2[0]*t20473;
  t21889 = -1.*t20344*t17380*t19969;
  t21890 = t20314*t20047;
  t21891 = t21889 + t21890;
  t21893 = t17380*t20314;
  t21894 = t20344*t19969*t20047;
  t21895 = t21893 + t21894;
  t21375 = t20314*t20372;
  t21376 = t20344*t20504;
  t21377 = t21375 + t21376;
  t21393 = var2[2]*t21377;
  t21398 = t20344*t20372;
  t21399 = -1.*t20314*t20504;
  t21400 = t21398 + t21399;
  t21406 = var2[1]*t21400;
  t21766 = -1.*t20151*t20424;
  t21911 = t20383*t20402;
  t21912 = t20416*t20424;
  t21913 = t21911 + t21912;
  t21914 = t20326*t21913;
  t21915 = t21728 + t21765 + t21766;
  t21916 = t20383*t21915;
  t21917 = t21914 + t21916;
  t21904 = t18289*t21891;
  t21906 = t19146*t21895;
  t21907 = t21904 + t21906;
  t21783 = -1.*t20169*t20480;
  t21785 = -1.*t20351*t20496;
  t21935 = t17341*t20416*t20480;
  t21936 = -1.*t19969*t20416*t20496;
  t21937 = t21911 + t21935 + t21936;
  t21938 = t20169*t21937;
  t21939 = t21765 + t21783 + t21785;
  t21940 = t17341*t20416*t21939;
  t21941 = t21938 + t21940;
  t21920 = t20344*t17341*t19636;
  t21921 = t19633*t21907;
  t21922 = t21920 + t21921;
  t21924 = t19633*t20344*t17341;
  t21925 = -1.*t19636*t21907;
  t21926 = t21924 + t21925;
  t20172 = var2[0]*t20169;
  t20358 = var2[2]*t20354;
  t20369 = var2[1]*t20364;
  t21949 = t20383*t21302;
  t21956 = -1.*t21302*t20326;
  t21958 = -1.*t21223*t20402;
  t21996 = t20383*t21416;
  t22003 = -1.*t21416*t20326;
  t22054 = t20416*t20402;
  t22057 = t20383*t20424;
  t22064 = -1.*t20151*t20402;
  t22066 = -1.*t20326*t20424;
  t22043 = var2[0]*t17341*t20999;
  t22044 = t20314*t19969*t20999;
  t22045 = t20344*t20453;
  t22046 = t22044 + t22045;
  t22047 = var2[1]*t22046;
  t22048 = -1.*t20344*t19969*t20999;
  t22049 = t20314*t20453;
  t22050 = t22048 + t22049;
  t22051 = var2[2]*t22050;
  t22052 = t20151*t21913;
  t22055 = t20988*t20424;
  t22065 = -1.*t20746*t20424;
  t22070 = t20416*t21915;
  t22075 = t17341*t20746*t21937;
  t22116 = t20383*t21131;
  t22079 = t17341*t20988*t20480;
  t22081 = -1.*t19969*t20988*t20496;
  t22124 = -1.*t20326*t21131;
  t22088 = -1.*t17341*t20746*t20480;
  t22090 = t19969*t20746*t20496;
  t22094 = t17341*t20988*t21939;
  p_output1[0]=t17341*t17380*t19163 + 0.28121*t19636*t19969 - 1.*t17341*t20043*t20047 - 0.15121*(-1.*t17341*t17380*t19146 - 1.*t17341*t18289*t20047) - 0.28121*t19865*t20077 - 0.50321*t19465*t20087 - 0.50321*t19172*t20112 - 0.19821*(t19459*t20087 - 1.*t19172*t20112) + t20172 + t20358 + t20369 + var1[0] + t20519*var2[3] + ((-1.*t20314*t20326 - 1.*t20344*t20351)*var2[1] + t20364*var2[2])*var2[3] + t20457*var2[4] + (t20351*var2[0] - 1.*t20314*t20525*var2[1] + t20344*t20525*var2[2] + (t20498*t20504 - 1.*t19969*t20416*t20506 + t20473*(t19969*t20416*t20480 + t19969*t20416*t20553) + t17341*t20416*(t20473*t20496 + t20480*t20504 + t20504*t20553 + t20496*t20713))*var2[3])*var2[4] + t19833*t19894*var2[5] + (t20761 + t20767 + t20908 + (t21015 + t20473*(t20982 + t20990 - 1.*t20416*t20976*t21016 - 1.*t20416*t20976*t21033 + t21039 + t21040) + t17341*t20416*(t17341*t20473*t20976 - 1.*t19969*t20504*t20976 + t20995 + t21003 + t21052 + t21056) + t21094)*var2[3] + (t20941 + t20372*(-1.*t20416*t20976 + t20982 + t20989 + t20990) + t20383*(t20453*t20976 + t20995 + t21001 + t21003) + t21009)*var2[4])*var2[5] + t19848*var2[15] + (t20761 + t20767 + t20908 + (t21015 + t21094 + t20473*(t20982 + t21039 + t21040 - 1.*t20416*t21016*t21127 - 1.*t20416*t21033*t21127 + t21132) + t17341*t20416*(t20995 + t21052 + t21056 + t17341*t20473*t21127 - 1.*t19969*t20504*t21127 + t21137))*var2[3] + (t20941 + t21009 + t20372*(t20982 + t20989 - 1.*t20416*t21127 + t21132) + t20383*(t20995 + t21001 + t20453*t21127 + t21137))*var2[4] + t19833*(-1.*t18289*t19879 - 1.*t19146*t19889 + t18289*t21109 - 1.*t19146*t21115)*var2[5])*var2[15] + t19622*var2[16] + (t21208 + t21218*var2[0] + (t20344*t21223 - 1.*t20314*t21231)*var2[1] + (t20314*t21223 + t20344*t21231)*var2[2] + (t20169*t20498 + t20473*(t21303 - 1.*t17341*t20416*t21336 + t19969*t20416*t21341) + t17341*t20416*(t21321 + t21323 + t20473*t21336 + t20504*t21341 + t21349 + t21350))*var2[3] + (t20326*t20426 + t20372*(t21303 - 1.*t20416*t21312) + t20383*(t20453*t21312 + t21317 + t19833*t21319 + t21321 + t21323 + t21325))*var2[4] + t19894*t20144*var2[5])*var2[16] + (t21208 + t21374 + t21393 + t21406 + (t20473*(t21420 - 1.*t17341*t20416*t21460 + t19969*t20416*t21464) + t20498*t21475 + t17341*t20416*(t21444 + t21446 + t20473*t21460 + t20504*t21464 + t20480*t21475 + t20496*t21485))*var2[3] + (t20372*(t21420 - 1.*t20416*t21423) + t20426*t21433 + t20383*(t20444*t21202 + t20453*t21423 + t19833*t21440 + t21444 + t21446 + t20424*t21451))*var2[4] + t19894*t21202*var2[5] + (-0.305*Power(t19459,2) + t21366 + t21367)*var2[16])*var2[17] + t20169*var3[0] + t20364*var3[1] + t20354*var3[2] + t20519*var3[3] + t20457*var3[4] + t19833*t19894*var3[5] + t19848*var3[15] + t19622*var3[16] - 1.*var4[0];
  p_output1[1]=-0.28121*t17341*t19636*t20314 + t19163*t21530 + t20043*t21536 - 0.15121*(-1.*t19146*t21530 + t18289*t21536) - 0.28121*t19865*t21556 - 0.50321*t19465*t21580 - 0.50321*t19172*t21584 - 0.19821*(t19459*t21580 - 1.*t19172*t21584) + var1[1] + t17341*t20416*var2[0] + t21541*var2[1] + t21547*var2[2] + t21595*var2[3] + ((-1.*t20314*t20383 + t19969*t20344*t20416)*var2[1] + t21541*var2[2])*var2[3] + t21575*var2[4] + (-1.*t19969*t20416*var2[0] + t17341*t20314*t20416*var2[1] - 1.*t17341*t20344*t20416*var2[2] + (t20473*(t20351*t20480 + t20169*t20496 + t20496*t20525 + t20351*t20553) + t20169*(-1.*t20473*t20496 - 1.*t20480*t20504 - 1.*t20504*t20553 - 1.*t20496*t20713) + t20351*t21589 + t20504*t21591)*var2[3])*var2[4] + t21519*var2[5] + (t21603 + t21607 + t21612 + (t20169*(-1.*t17341*t20473*t20976 + t19969*t20504*t20976 + t21615 + t21617 + t21637 + t21638) + t20473*(t17341*t20169*t20976 - 1.*t19969*t20351*t20976 + t21624 + t21627 + t21644 + t21645) + t21649 + t21650)*var2[3] + (t20326*(-1.*t20453*t20976 + t21615 + t21616 + t21617) + t21622 + t20372*(t20151*t20976 + t21624 + t21626 + t21627) + t21630)*var2[4])*var2[5] + t21504*var2[15] + (t21603 + t21607 + t21612 + (t21649 + t21650 + t20169*(-1.*t17341*t20473*t21127 + t19969*t20504*t21127 + t21615 + t21637 + t21638 + t21672) + t20473*(t17341*t20169*t21127 - 1.*t19969*t20351*t21127 + t21624 + t21644 + t21645 + t21676))*var2[3] + (t21622 + t21630 + t20326*(-1.*t20453*t21127 + t21615 + t21616 + t21672) + t20372*(t20151*t21127 + t21624 + t21626 + t21676))*var2[4] + (t19833*(-1.*t19146*t19694*t19879 + t18289*t19694*t19889 + t19146*t19694*t21109 + t18289*t19694*t21115) + t20144*(t19146*t19879*t20144 - 1.*t18289*t19889*t20144 - 1.*t19146*t20144*t21109 - 1.*t18289*t20144*t21115))*var2[5])*var2[15] + ((t21218*t21589 + t20169*t21591 + t20473*(t20480*t21218 + t20496*t21231 + t20169*t21336 + t20351*t21341 + t21756 + t21758) + t20169*(-1.*t20473*t21336 - 1.*t20504*t21341 + t21763 + t21765 + t21783 + t21785))*var2[3] + (t21223*t21570 + t20326*t21572 + t20372*(t20424*t21216 + t20151*t21312 + t21720 + t21723 + t21756 + t21758) + t20326*(-1.*t20453*t21312 + t21728 + t21731 + t21763 + t21765 + t21766))*var2[4] + (t19694*t21511 + t20144*t21516 + t19833*(t18289*t19879*t21202 + t19146*t19889*t21202 + t21720 + t21723 + t19694*t21291*t21737 + t19694*t21291*t21739) + t20144*(-1.*t18289*t19694*t19879 - 1.*t19146*t19694*t19889 + t21728 + t21731 - 1.*t20144*t21291*t21737 - 1.*t20144*t21291*t21739))*var2[5] + (t20144*t21498 + t19694*t21502 + t19833*(t19875*t21202 + t19694*t21291 + t21720 + t21723) + t20144*(-1.*t19694*t19875 - 1.*t20144*t21291 + t21728 + t21731))*var2[15])*var2[16] + ((t20473*t21589 + t21475*t21591 + t20473*(t20446 + t20500 + t20505 + t20169*t21460 + t20351*t21464 + t21834) + t20169*(-1.*t20473*t21460 - 1.*t20504*t21464 - 1.*t20480*t21475 - 1.*t20496*t21485 + t21839 + t21842))*var2[3] + (t20372*t21570 + t21433*t21572 + t20372*(t20445 + t20446 + t20454 + t20151*t21423 + t21798 + t21834) + t20326*(-1.*t20453*t21423 - 1.*t20424*t21451 + t21802 + t21806 + t21839 + t21842))*var2[4] + (t19833*t21511 + t21202*t21516 + t19833*(t18289*t19879*t20144 + t19146*t19889*t20144 + t20445 + t19694*t21410*t21737 + t19694*t21410*t21739 + t21798) + t20144*(-1.*t18289*t19833*t19879 - 1.*t19146*t19833*t19889 - 1.*t20144*t21410*t21737 - 1.*t20144*t21410*t21739 + t21802 + t21806))*var2[5] + (t21202*t21498 + t19833*t21502 + t19833*(t19875*t20144 + t20445 + t19694*t21410 + t21798) + t20144*(-1.*t19833*t19875 - 1.*t20144*t21410 + t21802 + t21806))*var2[15])*var2[17] + t17341*t20416*var3[0] + t21541*var3[1] + t21547*var3[2] + t21595*var3[3] + t21575*var3[4] + t21519*var3[5] + t21504*var3[15] - 1.*var4[1];
  p_output1[2]=0.28121*t17341*t19636*t20344 + t21374 + t21393 + t21406 + t19163*t21891 + t20043*t21895 - 0.15121*(-1.*t19146*t21891 + t18289*t21895) - 0.28121*t19865*t21907 - 0.50321*t19465*t21922 - 0.50321*t19172*t21926 - 0.19821*(t19459*t21922 - 1.*t19172*t21926) + var1[2] + t21941*var2[3] + ((-1.*t20314*t20372 - 1.*t20344*t20504)*var2[1] + t21400*var2[2])*var2[3] + t21917*var2[4] + (t20504*var2[0] - 1.*t20314*t20713*var2[1] + t20344*t20713*var2[2] + (t17341*t20416*(-1.*t20351*t20480 - 1.*t20169*t20496 - 1.*t20496*t20525 - 1.*t20351*t20553) + t20169*(-1.*t19969*t20416*t20480 - 1.*t19969*t20416*t20553) + t20351*t21937 - 1.*t19969*t20416*t21939)*var2[3])*var2[4] + t20144*t21886*var2[5] + (t22043 + t22047 + t22051 + (t22075 + t20169*(t20416*t20976*t21016 + t20416*t20976*t21033 + t22054 + t22057 + t22079 + t22081) + t17341*t20416*(-1.*t17341*t20169*t20976 + t19969*t20351*t20976 + t22064 + t22066 + t22088 + t22090) + t22094)*var2[3] + (t22052 + t20326*(t20416*t20976 + t22054 + t22055 + t22057) + t20383*(-1.*t20151*t20976 + t22064 + t22065 + t22066) + t22070)*var2[4])*var2[5] + (t22043 + t22047 + t22051 + (t22075 + t22094 + t20169*(t20416*t21016*t21127 + t20416*t21033*t21127 + t22054 + t22079 + t22081 + t22116) + t17341*t20416*(-1.*t17341*t20169*t21127 + t19969*t20351*t21127 + t22064 + t22088 + t22090 + t22124))*var2[3] + (t22052 + t22070 + t20326*(t20416*t21127 + t22054 + t22055 + t22116) + t20383*(-1.*t20151*t21127 + t22064 + t22065 + t22124))*var2[4] + t20144*(t18289*t19879 + t19146*t19889 - 1.*t18289*t21109 + t19146*t21115)*var2[5])*var2[15] + t21878*var2[16] + (t20172 + t20358 + t20369 + (t21218*t21937 + t20169*(t17341*t20416*t21336 - 1.*t19969*t20416*t21341 + t21949) + t17341*t20416*(-1.*t20480*t21218 - 1.*t20496*t21231 - 1.*t20169*t21336 - 1.*t20351*t21341 + t21956 + t21958))*var2[3] + (t21223*t21913 + t20326*(t20416*t21312 + t21949) + t20383*(-1.*t19694*t20444 - 1.*t20424*t21216 - 1.*t20151*t21312 - 1.*t20144*t21319 + t21956 + t21958))*var2[4] + t19694*t21886*var2[5])*var2[16] - 0.305*var2[17] + (t21475*var2[0] + (t20344*t21433 - 1.*t20314*t21485)*var2[1] + (t20314*t21433 + t20344*t21485)*var2[2] + (t20473*t21937 + t20169*(t17341*t20416*t21460 - 1.*t19969*t20416*t21464 + t21996) + t17341*t20416*(-1.*t20169*t21460 - 1.*t20351*t21464 + t21568 + t21587 + t21588 + t22003))*var2[3] + (t20372*t21913 + t20326*(t20416*t21423 + t21996) + t20383*(-1.*t20151*t21423 - 1.*t20144*t21440 + t21501 + t21568 + t21569 + t22003))*var2[4] + t19833*t21886*var2[5] + (-0.28121*t19172 + 0.305*t19172*t19459 - 1.*t19172*t19609)*var2[16])*var2[17] + t20473*var3[0] + t21400*var3[1] + t21377*var3[2] + t21941*var3[3] + t21917*var3[4] + t20144*t21886*var3[5] + t21878*var3[16] - 0.305*var3[17] - 1.*var4[2];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "ddh_RrFoot_ParallelStance.hh"

namespace ParallelStance
{

void ddh_RrFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
