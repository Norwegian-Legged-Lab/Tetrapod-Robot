/*
 * Automatically Generated from Mathematica.
 * Sun 12 Jun 2022 14:37:22 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t20742;
  double t20721;
  double t20736;
  double t20744;
  double t20963;
  double t20973;
  double t20974;
  double t20975;
  double t21013;
  double t21023;
  double t21024;
  double t21037;
  double t21050;
  double t21038;
  double t21054;
  double t21055;
  double t21059;
  double t21333;
  double t21340;
  double t21342;
  double t21343;
  double t21350;
  double t20634;
  double t17075;
  double t17144;
  double t17511;
  double t20185;
  double t21460;
  double t21463;
  double t21466;
  double t21485;
  double t21486;
  double t21487;
  double t21493;
  double t21834;
  double t21836;
  double t21844;
  double t21849;
  double t21850;
  double t21851;
  double t21858;
  double t21864;
  double t12066;
  double t16250;
  double t22003;
  double t21909;
  double t22928;
  double t22935;
  double t22936;
  double t23167;
  double t23189;
  double t23211;
  double t23215;
  double t23240;
  double t23249;
  double t23254;
  double t23256;
  double t23280;
  double t22963;
  double t22967;
  double t22975;
  double t22985;
  double t22989;
  double t23019;
  double t24111;
  double t24130;
  double t24137;
  double t24144;
  double t24195;
  double t24205;
  double t24210;
  double t24223;
  double t24228;
  double t24235;
  double t24251;
  double t24258;
  double t24259;
  double t24260;
  double t24284;
  double t24286;
  double t24293;
  double t24274;
  double t24276;
  double t24277;
  double t24302;
  double t24322;
  double t24324;
  double t24357;
  double t24751;
  double t24877;
  double t24331;
  double t24336;
  double t24337;
  double t24348;
  double t24988;
  double t25006;
  double t25057;
  double t25616;
  double t25623;
  double t25626;
  double t25631;
  double t25642;
  double t25643;
  double t25646;
  double t25647;
  double t25652;
  double t25653;
  double t25654;
  double t25655;
  double t25656;
  double t25680;
  double t25686;
  double t25687;
  double t25696;
  double t25700;
  double t25704;
  double t25712;
  double t25716;
  double t25721;
  double t25711;
  double t25722;
  double t25724;
  double t25725;
  double t25726;
  double t25727;
  double t25729;
  double t25737;
  double t25738;
  double t25739;
  double t25740;
  double t25742;
  double t25766;
  double t25770;
  double t25798;
  double t25826;
  double t25839;
  double t25846;
  double t26030;
  double t26031;
  double t26032;
  double t26058;
  double t26059;
  double t26060;
  double t26088;
  double t26090;
  double t26097;
  double t26063;
  double t26070;
  double t26064;
  double t26067;
  double t26068;
  double t26086;
  double t26099;
  double t20635;
  double t26034;
  double t26035;
  double t26037;
  double t26038;
  double t26040;
  double t26041;
  double t26042;
  double t26044;
  double t26055;
  double t26057;
  double t26761;
  double t26770;
  double t26756;
  double t26758;
  double t26069;
  double t26855;
  double t26858;
  double t26859;
  double t26861;
  double t26868;
  double t26929;
  double t26098;
  double t26104;
  double t26170;
  double t26262;
  double t26706;
  double t27017;
  double t26733;
  double t26735;
  double t27740;
  double t26741;
  double t26743;
  double t26747;
  double t29179;
  double t29180;
  double t29181;
  double t29195;
  double t29196;
  double t29197;
  double t29201;
  double t29209;
  double t29221;
  double t29308;
  double t29316;
  double t29323;
  double t29384;
  double t29390;
  double t29498;
  double t29531;
  double t29547;
  double t29548;
  double t29602;
  double t29661;
  double t29662;
  double t29664;
  double t29658;
  double t29672;
  double t29674;
  double t29677;
  double t29679;
  double t29685;
  double t29686;
  double t29687;
  double t29690;
  double t29691;
  double t29692;
  double t29183;
  double t29184;
  double t29187;
  double t29190;
  double t29754;
  double t29767;
  double t29778;
  double t29783;
  double t29794;
  double t29870;
  double t29871;
  double t29872;
  double t29920;
  double t29924;
  double t29925;
  double t29864;
  double t29940;
  double t29941;
  double t29950;
  double t29957;
  double t29958;
  double t29959;
  double t29954;
  double t29956;
  double t30017;
  double t30018;
  double t30034;
  double t30037;
  double t30038;
  double t30040;
  double t30044;
  double t30045;
  double t30046;
  double t29670;
  double t30074;
  double t30075;
  double t30076;
  double t30078;
  double t30079;
  double t30080;
  double t30081;
  double t30083;
  double t30086;
  double t30087;
  double t30088;
  double t30090;
  double t30091;
  double t30092;
  double t30093;
  double t30094;
  double t30095;
  double t20636;
  double t21999;
  double t30111;
  double t30115;
  double t30116;
  double t30119;
  double t30121;
  double t30122;
  double t30102;
  double t30103;
  double t30105;
  double t30107;
  double t30108;
  double t30109;
  double t29680;
  double t30141;
  double t30142;
  double t30143;
  double t30144;
  double t30145;
  double t30146;
  double t30147;
  double t30130;
  double t30131;
  double t30132;
  double t29699;
  double t29700;
  double t30158;
  double t30160;
  double t30161;
  double t30162;
  double t30163;
  double t30164;
  double t30165;
  double t30150;
  double t30151;
  double t30152;
  double t30154;
  double t30155;
  double t30156;
  double t30184;
  double t30186;
  double t30191;
  double t30193;
  double t30173;
  double t30174;
  double t30175;
  double t30176;
  double t30178;
  double t30179;
  double t30180;
  double t30181;
  double t30182;
  double t30185;
  double t30189;
  double t30192;
  double t30197;
  double t30236;
  double t30202;
  double t30203;
  double t30243;
  double t30208;
  double t30210;
  double t30213;
  double t30214;
  double t25995;
  double t25996;
  double t25998;
  double t30288;
  double t30294;
  double t30299;
  double t30307;
  double t30309;
  double t30302;
  double t30326;
  double t30328;
  double t29193;
  double t29198;
  double t29199;
  double t30333;
  double t30335;
  double t30365;
  double t30369;
  double t30372;
  double t30398;
  double t30404;
  double t30406;
  double t30056;
  double t30057;
  double t30058;
  double t29718;
  double t29719;
  double t30439;
  double t30440;
  double t30441;
  double t30444;
  double t30445;
  double t30447;
  double t29735;
  double t30450;
  double t30451;
  double t30452;
  double t30454;
  double t30455;
  double t30457;
  double t29736;
  double t29739;
  double t29748;
  double t29749;
  double t29750;
  double t29751;
  double t29752;
  double t29753;
  double t30336;
  double t30472;
  double t30473;
  double t30474;
  double t30475;
  double t30476;
  double t30477;
  double t30478;
  double t30464;
  double t30465;
  double t30467;
  double t30353;
  double t30354;
  double t30499;
  double t30500;
  double t30501;
  double t30502;
  double t30503;
  double t30505;
  double t30507;
  double t30481;
  double t30482;
  double t30484;
  double t30486;
  double t30487;
  double t30488;
  double t23437;
  double t24256;
  double t24271;
  double t30517;
  double t30525;
  double t30527;
  double t30568;
  double t30574;
  double t30637;
  double t30639;
  double t30645;
  double t30647;
  double t30622;
  double t30623;
  double t30624;
  double t30626;
  double t30627;
  double t30628;
  double t30630;
  double t30631;
  double t30632;
  double t30634;
  double t30638;
  double t30646;
  double t30650;
  double t30654;
  double t30684;
  double t30657;
  double t30658;
  double t30690;
  double t30665;
  double t30667;
  double t30670;
  t20742 = Cos(var1[17]);
  t20721 = Sin(var1[17]);
  t20736 = 0.28121*t20721;
  t20744 = -1.*t20742;
  t20963 = 1. + t20744;
  t20973 = -0.50321*t20963;
  t20974 = -0.19821*t20742;
  t20975 = t20973 + t20974;
  t21013 = t20975*t20721;
  t21023 = -0.305*t20742*t20721;
  t21024 = t20736 + t21013 + t21023;
  t21037 = Cos(var1[16]);
  t21050 = Sin(var1[16]);
  t21038 = -1.*t21037*t20742;
  t21054 = -1.*t21050*t20721;
  t21055 = t21038 + t21054;
  t21059 = -0.15121*t21055;
  t21333 = t21037*t20742;
  t21340 = t21050*t20721;
  t21342 = t21333 + t21340;
  t21343 = -0.15121*t21342;
  t21350 = t21059 + t21343;
  t20634 = Sin(var1[15]);
  t17075 = Cos(var1[15]);
  t17144 = -1.*t17075;
  t17511 = 1. + t17144;
  t20185 = -0.15121*t17511;
  t21460 = -1.*t21037;
  t21463 = 1. + t21460;
  t21466 = -0.28121*t21463;
  t21485 = t21037*t20975;
  t21486 = 0.305*t21050*t20721;
  t21487 = t21466 + t21485 + t21486;
  t21493 = t17075*t21487;
  t21834 = t20185 + t21493;
  t21836 = -1.*t20634*t21834;
  t21844 = -0.15121*t17075;
  t21849 = 0.15121*t20634;
  t21850 = t20634*t21487;
  t21851 = t20185 + t21844 + t21849 + t21850;
  t21858 = t17075*t21851;
  t21864 = t21836 + t21858;
  t12066 = Cos(var1[4]);
  t16250 = Cos(var1[5]);
  t22003 = Sin(var1[5]);
  t21909 = Sin(var1[4]);
  t22928 = t17075*t12066*t16250;
  t22935 = -1.*t12066*t20634*t22003;
  t22936 = t22928 + t22935;
  t23167 = -1.*t20742*t21050;
  t23189 = t21037*t20721;
  t23211 = t23167 + t23189;
  t23215 = t23211*t21909;
  t23240 = t17075*t16250*t21055;
  t23249 = -1.*t20634*t21055*t22003;
  t23254 = t23240 + t23249;
  t23256 = t12066*t23254;
  t23280 = t23215 + t23256;
  t22963 = t21050*t21909;
  t22967 = t21037*t22936;
  t22975 = t22963 + t22967;
  t22985 = t21037*t21909;
  t22989 = -1.*t21050*t22936;
  t23019 = t22985 + t22989;
  t24111 = Sin(var1[3]);
  t24130 = t16250*t20634*t21055;
  t24137 = t17075*t21055*t22003;
  t24144 = t24130 + t24137;
  t24195 = t24111*t24144;
  t24205 = Cos(var1[3]);
  t24210 = t12066*t23211;
  t24223 = -1.*t21909*t23254;
  t24228 = t24210 + t24223;
  t24235 = t24205*t24228;
  t24251 = t24195 + t24235;
  t24258 = t24205*t24144;
  t24259 = -1.*t24111*t24228;
  t24260 = t24258 + t24259;
  t24284 = -1.*t17075*t16250;
  t24286 = t20634*t22003;
  t24293 = t24284 + t24286;
  t24274 = t16250*t20634*t23211;
  t24276 = t17075*t23211*t22003;
  t24277 = t24274 + t24276;
  t24302 = t16250*t21851;
  t24322 = t21834*t22003;
  t24324 = t24302 + t24322;
  t24357 = t16250*t21834;
  t24751 = -1.*t21851*t22003;
  t24877 = t24357 + t24751;
  t24331 = -1.*t24293*t24324;
  t24336 = t16250*t20634;
  t24337 = t17075*t22003;
  t24348 = t24336 + t24337;
  t24988 = -1.*t24348*t24877;
  t25006 = t24331 + t24988;
  t25057 = t24277*t25006;
  t25616 = 0.28121*t21050;
  t25623 = t20975*t21050;
  t25626 = -0.305*t21037*t20721;
  t25631 = t25616 + t25623 + t25626;
  t25642 = t25631*t21342;
  t25643 = t24277*t24324;
  t25646 = t17075*t16250*t23211;
  t25647 = -1.*t20634*t23211*t22003;
  t25652 = t25646 + t25647;
  t25653 = t25652*t24877;
  t25654 = t25642 + t25643 + t25653;
  t25655 = t24293*t25654;
  t25656 = t25057 + t25655;
  t25680 = t21342*t21909;
  t25686 = t12066*t25652;
  t25687 = t25680 + t25686;
  t25696 = t25631*t21909;
  t25700 = t12066*t24877;
  t25704 = t25696 + t25700;
  t25712 = t12066*t25631;
  t25716 = -1.*t21909*t24877;
  t25721 = t25712 + t25716;
  t25711 = -1.*t12066*t24348*t25704;
  t25722 = t21909*t24348*t25721;
  t25724 = t24331 + t25711 + t25722;
  t25725 = t25687*t25724;
  t25726 = t25687*t25704;
  t25727 = t12066*t21342;
  t25729 = -1.*t21909*t25652;
  t25737 = t25727 + t25729;
  t25738 = t25737*t25721;
  t25739 = t25643 + t25726 + t25738;
  t25740 = t12066*t24348*t25739;
  t25742 = t25725 + t25740;
  t25766 = -1.*t23211*t21909;
  t25770 = -1.*t12066*t23254;
  t25798 = t25766 + t25770;
  t25826 = -1.*t25631*t21909;
  t25839 = -1.*t12066*t24877;
  t25846 = t25826 + t25839;
  t26030 = -1.*t16250*t20634*t21055;
  t26031 = -1.*t17075*t21055*t22003;
  t26032 = t26030 + t26031;
  t26058 = -1.*t16250*t21851;
  t26059 = -1.*t21834*t22003;
  t26060 = t26058 + t26059;
  t26088 = -1.*t16250*t20634*t23211;
  t26090 = -1.*t17075*t23211*t22003;
  t26097 = t26088 + t26090;
  t26063 = -1.*t24348*t24324;
  t26070 = -1.*t24293*t24877;
  t26064 = t17075*t16250;
  t26067 = -1.*t20634*t22003;
  t26068 = t26064 + t26067;
  t26086 = t25652*t24324;
  t26099 = t24277*t24877;
  t20635 = -0.15121*t20634;
  t26034 = var2[0]*t12066*t26032;
  t26035 = t24111*t21909*t26032;
  t26037 = t24205*t23254;
  t26038 = t26035 + t26037;
  t26040 = var2[1]*t26038;
  t26041 = -1.*t24205*t21909*t26032;
  t26042 = t24111*t23254;
  t26044 = t26041 + t26042;
  t26055 = var2[2]*t26044;
  t26057 = t25652*t25006;
  t26761 = -1.*t20634*t21487;
  t26770 = t20635 + t26761;
  t26756 = 0.15121*t17075;
  t26758 = t26756 + t21493;
  t26069 = -1.*t26068*t24877;
  t26855 = t16250*t26770;
  t26858 = -1.*t26758*t22003;
  t26859 = t26855 + t26858;
  t26861 = t16250*t26758;
  t26868 = t26770*t22003;
  t26929 = t26861 + t26868;
  t26098 = t26097*t24877;
  t26104 = t24348*t25654;
  t26170 = t12066*t26097*t25724;
  t26262 = Power(t12066,2);
  t26706 = Power(t21909,2);
  t27017 = -1.*t24293*t26929;
  t26733 = -1.*t12066*t26068*t25704;
  t26735 = t21909*t26068*t25721;
  t27740 = t24277*t26929;
  t26741 = t12066*t26097*t25704;
  t26743 = -1.*t21909*t26097*t25721;
  t26747 = t12066*t26068*t25739;
  t29179 = t20742*t21050;
  t29180 = -1.*t21037*t20721;
  t29181 = t29179 + t29180;
  t29195 = t17075*t16250*t29181;
  t29196 = -1.*t20634*t29181*t22003;
  t29197 = t29195 + t29196;
  t29201 = t16250*t20634*t29181;
  t29209 = t17075*t29181*t22003;
  t29221 = t29201 + t29209;
  t29308 = t12066*t21055;
  t29316 = -1.*t21909*t29197;
  t29323 = t29308 + t29316;
  t29384 = -0.28121*t21050;
  t29390 = -1.*t20975*t21050;
  t29498 = 0.305*t21037*t20721;
  t29531 = t29384 + t29390 + t29498;
  t29547 = t16250*t20634*t29531;
  t29548 = t17075*t29531*t22003;
  t29602 = t29547 + t29548;
  t29661 = t17075*t16250*t29531;
  t29662 = -1.*t20634*t29531*t22003;
  t29664 = t29661 + t29662;
  t29658 = -1.*t24293*t29602;
  t29672 = 0.28121*t21037;
  t29674 = t29672 + t21485 + t21486;
  t29677 = t29602*t24277;
  t29679 = t24144*t24324;
  t29685 = t29674*t21909;
  t29686 = t12066*t29664;
  t29687 = t29685 + t29686;
  t29690 = t12066*t29674;
  t29691 = -1.*t21909*t29664;
  t29692 = t29690 + t29691;
  t29183 = -0.15121*t29181;
  t29184 = -0.15121*t23211;
  t29187 = t29183 + t29184;
  t29190 = var2[15]*t29187;
  t29754 = 0.305*t20742*t21050;
  t29767 = t29754 + t25626;
  t29778 = t16250*t20634*t29767;
  t29783 = t17075*t29767*t22003;
  t29794 = t29778 + t29783;
  t29870 = t17075*t16250*t29767;
  t29871 = -1.*t20634*t29767*t22003;
  t29872 = t29870 + t29871;
  t29920 = t16250*t20634*t21342;
  t29924 = t17075*t21342*t22003;
  t29925 = t29920 + t29924;
  t29864 = -1.*t24293*t29794;
  t29940 = -0.305*t21037*t20742;
  t29941 = -0.305*t21050*t20721;
  t29950 = t29940 + t29941;
  t29957 = t17075*t16250*t21342;
  t29958 = -1.*t20634*t21342*t22003;
  t29959 = t29957 + t29958;
  t29954 = t29794*t24277;
  t29956 = t29925*t24324;
  t30017 = t29950*t21909;
  t30018 = t12066*t29872;
  t30034 = t30017 + t30018;
  t30037 = t12066*t29950;
  t30038 = -1.*t21909*t29872;
  t30040 = t30037 + t30038;
  t30044 = t29181*t21909;
  t30045 = t12066*t29959;
  t30046 = t30044 + t30045;
  t29670 = t25631*t23211;
  t30074 = t21055*t21487;
  t30075 = t29670 + t30074;
  t30076 = t21342*t30075;
  t30078 = -1.*t23211*t21487;
  t30079 = -1.*t25631*t21342;
  t30080 = t30078 + t30079;
  t30081 = t23211*t30080;
  t30083 = -0.15121 + t30076 + t30081;
  t30086 = -1.*t17075*t23211*t21834;
  t30087 = -1.*t20634*t23211*t21851;
  t30088 = t30079 + t30086 + t30087;
  t30090 = t23211*t30088;
  t30091 = t17075*t21055*t21834;
  t30092 = t20634*t21055*t21851;
  t30093 = t29670 + t30091 + t30092;
  t30094 = t21342*t30093;
  t30095 = t30090 + t30094;
  t20636 = t20185 + t20635;
  t21999 = t20185 + t21849;
  t30111 = t24111*t21909*t24348;
  t30115 = t24205*t24293;
  t30116 = t30111 + t30115;
  t30119 = -1.*t24205*t21909*t24348;
  t30121 = t24111*t24293;
  t30122 = t30119 + t30121;
  t30102 = t16250*t24111*t21909;
  t30103 = t24205*t22003;
  t30105 = t30102 + t30103;
  t30107 = t24205*t16250;
  t30108 = -1.*t24111*t21909*t22003;
  t30109 = t30107 + t30108;
  t29680 = t23254*t24877;
  t30141 = -1.*t24277*t24324;
  t30142 = -1.*t25652*t24877;
  t30143 = t30079 + t30141 + t30142;
  t30144 = t24144*t30143;
  t30145 = t29670 + t29679 + t29680;
  t30146 = t24277*t30145;
  t30147 = t30144 + t30146;
  t30130 = t17075*t30105;
  t30131 = t20634*t30109;
  t30132 = t30130 + t30131;
  t29699 = t23280*t25704;
  t29700 = t24228*t25721;
  t30158 = -1.*t25687*t25704;
  t30160 = -1.*t25737*t25721;
  t30161 = t30141 + t30158 + t30160;
  t30162 = t23280*t30161;
  t30163 = t29679 + t29699 + t29700;
  t30164 = t25687*t30163;
  t30165 = t30162 + t30164;
  t30150 = -1.*t12066*t21050*t24111;
  t30151 = t21037*t30132;
  t30152 = t30150 + t30151;
  t30154 = -1.*t21037*t12066*t24111;
  t30155 = -1.*t21050*t30132;
  t30156 = t30154 + t30155;
  t30184 = -1.*t25652*t24324;
  t30186 = -1.*t24277*t24877;
  t30191 = t23254*t24324;
  t30193 = t24144*t24877;
  t30173 = var2[0]*t12066*t26068;
  t30174 = t24111*t24348;
  t30175 = -1.*t24205*t21909*t26068;
  t30176 = t30174 + t30175;
  t30178 = var2[2]*t30176;
  t30179 = t24205*t24348;
  t30180 = t24111*t21909*t26068;
  t30181 = t30179 + t30180;
  t30182 = var2[1]*t30181;
  t30185 = -1.*t26097*t24877;
  t30189 = t23254*t30143;
  t30192 = t26032*t24877;
  t30197 = t25652*t30145;
  t30236 = -1.*t24277*t26929;
  t30202 = -1.*t12066*t26097*t25704;
  t30203 = t21909*t26097*t25721;
  t30243 = t24144*t26929;
  t30208 = t12066*t26032*t25704;
  t30210 = -1.*t21909*t26032*t25721;
  t30213 = t12066*t26032*t30161;
  t30214 = t12066*t26097*t30163;
  t25995 = -1.*t21342*t21909;
  t25996 = -1.*t12066*t25652;
  t25998 = t25995 + t25996;
  t30288 = t25631*t21055;
  t30294 = t23211*t29674;
  t30299 = -1.*t25631*t23211;
  t30307 = Power(t17075,2);
  t30309 = Power(t20634,2);
  t30302 = -1.*t29674*t21342;
  t30326 = t29602*t24144;
  t30328 = t29221*t24324;
  t29193 = t21055*t21909;
  t29198 = t12066*t29197;
  t29199 = t29193 + t29198;
  t30333 = -1.*t29602*t24277;
  t30335 = -1.*t24144*t24324;
  t30365 = t23211*t29950;
  t30369 = -1.*t29181*t25631;
  t30372 = -1.*t29950*t21342;
  t30398 = t29794*t24144;
  t30404 = -1.*t29794*t24277;
  t30406 = -1.*t29925*t24324;
  t30056 = t12066*t29181;
  t30057 = -1.*t21909*t29959;
  t30058 = t30056 + t30057;
  t29718 = 0.28121*t20742;
  t29719 = t20975*t20742;
  t30439 = Power(t20721,2);
  t30440 = 0.305*t30439;
  t30441 = t29718 + t29719 + t30440;
  t30444 = t20634*t21834;
  t30445 = -1.*t17075*t21851;
  t30447 = t30444 + t30445;
  t29735 = var2[0]*t25687;
  t30450 = -1.*t24205*t16250*t21909;
  t30451 = t24111*t22003;
  t30452 = t30450 + t30451;
  t30454 = t16250*t24111;
  t30455 = t24205*t21909*t22003;
  t30457 = t30454 + t30455;
  t29736 = t24111*t24277;
  t29739 = t24205*t25737;
  t29748 = t29736 + t29739;
  t29749 = var2[2]*t29748;
  t29750 = t24205*t24277;
  t29751 = -1.*t24111*t25737;
  t29752 = t29750 + t29751;
  t29753 = var2[1]*t29752;
  t30336 = -1.*t23254*t24877;
  t30472 = t24293*t24324;
  t30473 = t24348*t24877;
  t30474 = t30472 + t30473;
  t30475 = t24144*t30474;
  t30476 = t30299 + t30335 + t30336;
  t30477 = t24293*t30476;
  t30478 = t30475 + t30477;
  t30464 = t17075*t30452;
  t30465 = t20634*t30457;
  t30467 = t30464 + t30465;
  t30353 = -1.*t23280*t25704;
  t30354 = -1.*t24228*t25721;
  t30499 = t12066*t24348*t25704;
  t30500 = -1.*t21909*t24348*t25721;
  t30501 = t30472 + t30499 + t30500;
  t30502 = t23280*t30501;
  t30503 = t30335 + t30353 + t30354;
  t30505 = t12066*t24348*t30503;
  t30507 = t30502 + t30505;
  t30481 = t24205*t12066*t21050;
  t30482 = t21037*t30467;
  t30484 = t30481 + t30482;
  t30486 = t21037*t24205*t12066;
  t30487 = -1.*t21050*t30467;
  t30488 = t30486 + t30487;
  t23437 = var2[0]*t23280;
  t24256 = var2[2]*t24251;
  t24271 = var2[1]*t24260;
  t30517 = t24293*t29602;
  t30525 = -1.*t29602*t24144;
  t30527 = -1.*t29221*t24324;
  t30568 = t24293*t29794;
  t30574 = -1.*t29794*t24144;
  t30637 = t24348*t24324;
  t30639 = t24293*t24877;
  t30645 = -1.*t23254*t24324;
  t30647 = -1.*t24144*t24877;
  t30622 = var2[0]*t12066*t26097;
  t30623 = t24111*t21909*t26097;
  t30624 = t24205*t25652;
  t30626 = t30623 + t30624;
  t30627 = var2[1]*t30626;
  t30628 = -1.*t24205*t21909*t26097;
  t30630 = t24111*t25652;
  t30631 = t30628 + t30630;
  t30632 = var2[2]*t30631;
  t30634 = t23254*t30474;
  t30638 = t26068*t24877;
  t30646 = -1.*t26032*t24877;
  t30650 = t24348*t30476;
  t30654 = t12066*t26032*t30501;
  t30684 = t24293*t26929;
  t30657 = t12066*t26068*t25704;
  t30658 = -1.*t21909*t26068*t25721;
  t30690 = -1.*t24144*t26929;
  t30665 = -1.*t12066*t26032*t25704;
  t30667 = t21909*t26032*t25721;
  t30670 = t12066*t26068*t30503;
  p_output1[0]=t12066*t16250*t20636 + 0.28121*t21050*t21909 - 1.*t12066*t21999*t22003 - 0.15121*(-1.*t12066*t16250*t20634 - 1.*t12066*t17075*t22003) - 0.28121*t21463*t22936 - 0.50321*t20963*t22975 - 0.50321*t20721*t23019 - 0.19821*(t20742*t22975 - 1.*t20721*t23019) + t23437 + t24256 + t24271 + var1[0] + t25742*var2[3] + ((-1.*t24111*t24144 - 1.*t24205*t24228)*var2[1] + t24260*var2[2])*var2[3] + t25656*var2[4] + (t24228*var2[0] - 1.*t24111*t25798*var2[1] + t24205*t25798*var2[2] + (t25724*t25737 - 1.*t21909*t24348*t25739 + t25687*(t21909*t24348*t25704 + t21909*t24348*t25846) + t12066*t24348*(t25687*t25721 + t25704*t25737 + t25737*t25846 + t25721*t25998))*var2[3])*var2[4] + t21342*t21864*var2[5] + (t26034 + t26040 + t26055 + (t26170 + t25687*(t26063 + t26070 - 1.*t24348*t26060*t26262 - 1.*t24348*t26060*t26706 + t26733 + t26735) + t12066*t24348*(t12066*t25687*t26060 - 1.*t21909*t25737*t26060 + t26086 + t26099 + t26741 + t26743) + t26747)*var2[3] + (t26057 + t24277*(-1.*t24348*t26060 + t26063 + t26069 + t26070) + t24293*(t25652*t26060 + t26086 + t26098 + t26099) + t26104)*var2[4])*var2[5] + t21350*var2[15] + (t26034 + t26040 + t26055 + (t26170 + t26747 + t25687*(t26063 + t26733 + t26735 - 1.*t24348*t26262*t26859 - 1.*t24348*t26706*t26859 + t27017) + t12066*t24348*(t26086 + t26741 + t26743 + t12066*t25687*t26859 - 1.*t21909*t25737*t26859 + t27740))*var2[3] + (t26057 + t26104 + t24277*(t26063 + t26069 - 1.*t24348*t26859 + t27017) + t24293*(t26086 + t26098 + t25652*t26859 + t27740))*var2[4] + t21342*(-1.*t17075*t21834 - 1.*t20634*t21851 + t17075*t26758 - 1.*t20634*t26770)*var2[5])*var2[15] + t21024*var2[16] + (t29190 + t29199*var2[0] + (t24205*t29221 - 1.*t24111*t29323)*var2[1] + (t24111*t29221 + t24205*t29323)*var2[2] + (t23280*t25724 + t25687*(t29658 - 1.*t12066*t24348*t29687 + t21909*t24348*t29692) + t12066*t24348*(t29677 + t29679 + t25687*t29687 + t25737*t29692 + t29699 + t29700))*var2[3] + (t24144*t25006 + t24277*(t29658 - 1.*t24348*t29664) + t24293*(t25652*t29664 + t29670 + t21342*t29674 + t29677 + t29679 + t29680))*var2[4] + t21864*t23211*var2[5])*var2[16] + (t29190 + t29735 + t29749 + t29753 + (t25687*(t29864 - 1.*t12066*t24348*t30034 + t21909*t24348*t30040) + t25724*t30046 + t12066*t24348*(t29954 + t29956 + t25687*t30034 + t25737*t30040 + t25704*t30046 + t25721*t30058))*var2[3] + (t24277*(t29864 - 1.*t24348*t29872) + t25006*t29925 + t24293*(t25631*t29181 + t25652*t29872 + t21342*t29950 + t29954 + t29956 + t24877*t29959))*var2[4] + t21864*t29181*var2[5] + (-0.305*Power(t20742,2) + t29718 + t29719)*var2[16])*var2[17] + t23280*var3[0] + t24260*var3[1] + t24251*var3[2] + t25742*var3[3] + t25656*var3[4] + t21342*t21864*var3[5] + t21350*var3[15] + t21024*var3[16] - 1.*var4[0];
  p_output1[1]=-0.28121*t12066*t21050*t24111 + t20636*t30105 + t21999*t30109 - 0.15121*(-1.*t20634*t30105 + t17075*t30109) - 0.28121*t21463*t30132 - 0.50321*t20963*t30152 - 0.50321*t20721*t30156 - 0.19821*(t20742*t30152 - 1.*t20721*t30156) + var1[1] + t12066*t24348*var2[0] + t30116*var2[1] + t30122*var2[2] + t30165*var2[3] + ((-1.*t24111*t24293 + t21909*t24205*t24348)*var2[1] + t30116*var2[2])*var2[3] + t30147*var2[4] + (-1.*t21909*t24348*var2[0] + t12066*t24111*t24348*var2[1] - 1.*t12066*t24205*t24348*var2[2] + (t25687*(t24228*t25704 + t23280*t25721 + t25721*t25798 + t24228*t25846) + t23280*(-1.*t25687*t25721 - 1.*t25704*t25737 - 1.*t25737*t25846 - 1.*t25721*t25998) + t24228*t30161 + t25737*t30163)*var2[3])*var2[4] + t30095*var2[5] + (t30173 + t30178 + t30182 + (t23280*(-1.*t12066*t25687*t26060 + t21909*t25737*t26060 + t30184 + t30186 + t30202 + t30203) + t25687*(t12066*t23280*t26060 - 1.*t21909*t24228*t26060 + t30191 + t30193 + t30208 + t30210) + t30213 + t30214)*var2[3] + (t24144*(-1.*t25652*t26060 + t30184 + t30185 + t30186) + t30189 + t24277*(t23254*t26060 + t30191 + t30192 + t30193) + t30197)*var2[4])*var2[5] + t30083*var2[15] + (t30173 + t30178 + t30182 + (t30213 + t30214 + t23280*(-1.*t12066*t25687*t26859 + t21909*t25737*t26859 + t30184 + t30202 + t30203 + t30236) + t25687*(t12066*t23280*t26859 - 1.*t21909*t24228*t26859 + t30191 + t30208 + t30210 + t30243))*var2[3] + (t30189 + t30197 + t24144*(-1.*t25652*t26859 + t30184 + t30185 + t30236) + t24277*(t23254*t26859 + t30191 + t30192 + t30243))*var2[4] + (t21342*(-1.*t20634*t21055*t21834 + t17075*t21055*t21851 + t20634*t21055*t26758 + t17075*t21055*t26770) + t23211*(t20634*t21834*t23211 - 1.*t17075*t21851*t23211 - 1.*t20634*t23211*t26758 - 1.*t17075*t23211*t26770))*var2[5])*var2[15] + ((t29199*t30161 + t23280*t30163 + t25687*(t25704*t29199 + t25721*t29323 + t23280*t29687 + t24228*t29692 + t30326 + t30328) + t23280*(-1.*t25687*t29687 - 1.*t25737*t29692 + t30333 + t30335 + t30353 + t30354))*var2[3] + (t29221*t30143 + t24144*t30145 + t24277*(t24877*t29197 + t23254*t29664 + t30288 + t30294 + t30326 + t30328) + t24144*(-1.*t25652*t29664 + t30299 + t30302 + t30333 + t30335 + t30336))*var2[4] + (t21055*t30088 + t23211*t30093 + t21342*(t17075*t21834*t29181 + t20634*t21851*t29181 + t30288 + t30294 + t21055*t29531*t30307 + t21055*t29531*t30309) + t23211*(-1.*t17075*t21055*t21834 - 1.*t20634*t21055*t21851 + t30299 + t30302 - 1.*t23211*t29531*t30307 - 1.*t23211*t29531*t30309))*var2[5] + (t23211*t30075 + t21055*t30080 + t21342*(t21487*t29181 + t21055*t29531 + t30288 + t30294) + t23211*(-1.*t21055*t21487 - 1.*t23211*t29531 + t30299 + t30302))*var2[15])*var2[16] + ((t25687*t30161 + t30046*t30163 + t25687*(t25643 + t25726 + t25738 + t23280*t30034 + t24228*t30040 + t30398) + t23280*(-1.*t25687*t30034 - 1.*t25737*t30040 - 1.*t25704*t30046 - 1.*t25721*t30058 + t30404 + t30406))*var2[3] + (t24277*t30143 + t29925*t30145 + t24277*(t25642 + t25643 + t25653 + t23254*t29872 + t30365 + t30398) + t24144*(-1.*t25652*t29872 - 1.*t24877*t29959 + t30369 + t30372 + t30404 + t30406))*var2[4] + (t21342*t30088 + t29181*t30093 + t21342*(t17075*t21834*t23211 + t20634*t21851*t23211 + t25642 + t21055*t29767*t30307 + t21055*t29767*t30309 + t30365) + t23211*(-1.*t17075*t21342*t21834 - 1.*t20634*t21342*t21851 - 1.*t23211*t29767*t30307 - 1.*t23211*t29767*t30309 + t30369 + t30372))*var2[5] + (t29181*t30075 + t21342*t30080 + t21342*(t21487*t23211 + t25642 + t21055*t29767 + t30365) + t23211*(-1.*t21342*t21487 - 1.*t23211*t29767 + t30369 + t30372))*var2[15])*var2[17] + t12066*t24348*var3[0] + t30116*var3[1] + t30122*var3[2] + t30165*var3[3] + t30147*var3[4] + t30095*var3[5] + t30083*var3[15] - 1.*var4[1];
  p_output1[2]=0.28121*t12066*t21050*t24205 + t29735 + t29749 + t29753 + t20636*t30452 + t21999*t30457 - 0.15121*(-1.*t20634*t30452 + t17075*t30457) - 0.28121*t21463*t30467 - 0.50321*t20963*t30484 - 0.50321*t20721*t30488 - 0.19821*(t20742*t30484 - 1.*t20721*t30488) + var1[2] + t30507*var2[3] + ((-1.*t24111*t24277 - 1.*t24205*t25737)*var2[1] + t29752*var2[2])*var2[3] + t30478*var2[4] + (t25737*var2[0] - 1.*t24111*t25998*var2[1] + t24205*t25998*var2[2] + (t12066*t24348*(-1.*t24228*t25704 - 1.*t23280*t25721 - 1.*t25721*t25798 - 1.*t24228*t25846) + t23280*(-1.*t21909*t24348*t25704 - 1.*t21909*t24348*t25846) + t24228*t30501 - 1.*t21909*t24348*t30503)*var2[3])*var2[4] + t23211*t30447*var2[5] + (t30622 + t30627 + t30632 + (t30654 + t23280*(t24348*t26060*t26262 + t24348*t26060*t26706 + t30637 + t30639 + t30657 + t30658) + t12066*t24348*(-1.*t12066*t23280*t26060 + t21909*t24228*t26060 + t30645 + t30647 + t30665 + t30667) + t30670)*var2[3] + (t30634 + t24144*(t24348*t26060 + t30637 + t30638 + t30639) + t24293*(-1.*t23254*t26060 + t30645 + t30646 + t30647) + t30650)*var2[4])*var2[5] + (t30622 + t30627 + t30632 + (t30654 + t30670 + t23280*(t24348*t26262*t26859 + t24348*t26706*t26859 + t30637 + t30657 + t30658 + t30684) + t12066*t24348*(-1.*t12066*t23280*t26859 + t21909*t24228*t26859 + t30645 + t30665 + t30667 + t30690))*var2[3] + (t30634 + t30650 + t24144*(t24348*t26859 + t30637 + t30638 + t30684) + t24293*(-1.*t23254*t26859 + t30645 + t30646 + t30690))*var2[4] + t23211*(t17075*t21834 + t20634*t21851 - 1.*t17075*t26758 + t20634*t26770)*var2[5])*var2[15] + t30441*var2[16] + (t23437 + t24256 + t24271 + (t29199*t30501 + t23280*(t12066*t24348*t29687 - 1.*t21909*t24348*t29692 + t30517) + t12066*t24348*(-1.*t25704*t29199 - 1.*t25721*t29323 - 1.*t23280*t29687 - 1.*t24228*t29692 + t30525 + t30527))*var2[3] + (t29221*t30474 + t24144*(t24348*t29664 + t30517) + t24293*(-1.*t21055*t25631 - 1.*t24877*t29197 - 1.*t23254*t29664 - 1.*t23211*t29674 + t30525 + t30527))*var2[4] + t21055*t30447*var2[5])*var2[16] - 0.305*var2[17] + (t30046*var2[0] + (t24205*t29925 - 1.*t24111*t30058)*var2[1] + (t24111*t29925 + t24205*t30058)*var2[2] + (t25687*t30501 + t23280*(t12066*t24348*t30034 - 1.*t21909*t24348*t30040 + t30568) + t12066*t24348*(-1.*t23280*t30034 - 1.*t24228*t30040 + t30141 + t30158 + t30160 + t30574))*var2[3] + (t24277*t30474 + t24144*(t24348*t29872 + t30568) + t24293*(-1.*t23254*t29872 - 1.*t23211*t29950 + t30079 + t30141 + t30142 + t30574))*var2[4] + t21342*t30447*var2[5] + (-0.28121*t20721 + 0.305*t20721*t20742 - 1.*t20721*t20975)*var2[16])*var2[17] + t25687*var3[0] + t29752*var3[1] + t29748*var3[2] + t30507*var3[3] + t30478*var3[4] + t23211*t30447*var3[5] + t30441*var3[16] - 0.305*var3[17] - 1.*var4[2];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "ddh_RrFoot_ParallelStance.hh"

namespace ParallelStance
{

void ddh_RrFoot_ParallelStance_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
