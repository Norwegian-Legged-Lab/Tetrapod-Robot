/*
 * Automatically Generated from Mathematica.
 * Sat 28 May 2022 16:59:52 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t3655;
  double t3662;
  double t3997;
  double t4375;
  double t4381;
  double t4451;
  double t3635;
  double t4564;
  double t4568;
  double t4666;
  double t4687;
  double t4688;
  double t4699;
  double t4714;
  double t4716;
  double t4531;
  double t4576;
  double t4628;
  double t4698;
  double t4707;
  double t4711;
  double t4712;
  double t4719;
  double t4722;
  double t4727;
  double t4728;
  double t4733;
  double t4735;
  double t4738;
  double t4746;
  double t4760;
  double t4563;
  double t4853;
  double t4388;
  double t4443;
  double t4920;
  double t4934;
  double t4956;
  double t4980;
  double t4987;
  double t4990;
  double t5033;
  double t5081;
  double t5082;
  double t5122;
  double t5136;
  double t5153;
  double t5117;
  double t5157;
  double t5191;
  double t5200;
  double t5211;
  double t5213;
  double t5324;
  double t5349;
  double t5352;
  double t5457;
  double t5462;
  double t5500;
  double t4811;
  double t4817;
  double t4799;
  double t4800;
  double t4863;
  double t4864;
  double t4894;
  double t4905;
  double t4966;
  double t4855;
  double t4862;
  double t5615;
  double t5617;
  double t5619;
  double t5621;
  double t5647;
  double t5649;
  double t4457;
  double t4565;
  double t4767;
  double t5521;
  double t5522;
  double t5525;
  double t5526;
  double t5527;
  double t5531;
  double t5537;
  double t5542;
  double t5543;
  double t5558;
  double t5562;
  double t5569;
  double t5576;
  double t5580;
  double t5582;
  double t5593;
  double t5596;
  double t5598;
  double t5604;
  double t5661;
  double t4810;
  double t4825;
  double t4835;
  double t6355;
  double t6394;
  double t6454;
  double t6455;
  double t6460;
  double t6479;
  double t6615;
  double t6619;
  double t4859;
  double t6816;
  double t6825;
  double t5270;
  double t5309;
  double t5357;
  double t5358;
  double t5380;
  double t5401;
  double t5431;
  double t5437;
  double t5439;
  double t6466;
  double t6678;
  double t6690;
  double t6707;
  double t6708;
  double t6782;
  double t6784;
  double t7095;
  double t7115;
  double t7116;
  double t5192;
  double t5219;
  double t5249;
  double t5262;
  double t5264;
  double t5266;
  double t5267;
  double t7428;
  double t7433;
  double t7448;
  double t7449;
  double t7458;
  double t7460;
  double t7462;
  double t7464;
  double t7630;
  double t7673;
  double t7681;
  double t7692;
  double t7701;
  double t7715;
  double t7722;
  double t7760;
  double t7786;
  double t7795;
  double t7884;
  double t7882;
  double t7894;
  double t7911;
  double t7919;
  double t7942;
  double t7949;
  double t7960;
  double t7961;
  double t7972;
  double t8158;
  double t8182;
  double t8184;
  double t8210;
  double t8215;
  double t8059;
  double t8357;
  double t8358;
  double t8359;
  double t8355;
  double t8363;
  double t8364;
  double t8371;
  double t8372;
  double t8374;
  double t8468;
  double t8472;
  double t8488;
  double t8536;
  double t8549;
  double t8551;
  double t8560;
  double t8565;
  double t8569;
  double t8584;
  double t8603;
  double t8604;
  double t8616;
  double t8622;
  double t8765;
  double t8773;
  double t8784;
  double t8788;
  double t9089;
  double t9108;
  double t9114;
  double t9127;
  double t9131;
  double t9248;
  double t9260;
  double t9275;
  double t9278;
  double t9280;
  double t9373;
  double t9401;
  double t9416;
  double t9417;
  double t7631;
  double t7637;
  double t7649;
  double t7658;
  double t7659;
  double t7664;
  double t7665;
  double t7697;
  double t7744;
  double t7798;
  double t7813;
  double t7820;
  double t7826;
  double t7840;
  double t7843;
  double t9455;
  double t9456;
  double t9457;
  double t9454;
  double t9459;
  double t9461;
  double t9464;
  double t9469;
  double t9470;
  double t9498;
  double t9502;
  double t9509;
  double t8535;
  double t9659;
  double t9661;
  double t9662;
  double t9673;
  double t9674;
  double t9678;
  double t9729;
  double t8980;
  double t9058;
  double t9421;
  double t8199;
  double t8200;
  double t8240;
  double t8243;
  double t8246;
  double t8251;
  double t8262;
  double t8288;
  double t8297;
  double t8306;
  double t8315;
  double t8326;
  double t8345;
  double t9906;
  double t9908;
  double t9912;
  double t9915;
  double t9916;
  double t9917;
  double t8575;
  double t10036;
  double t10037;
  double t8559;
  double t8573;
  double t8578;
  double t8580;
  double t8581;
  double t8611;
  double t9439;
  double t9440;
  double t9441;
  double t7918;
  double t7955;
  double t8013;
  double t8050;
  double t8051;
  double t8053;
  double t8061;
  double t8063;
  double t8086;
  double t8106;
  double t8123;
  double t8124;
  double t8139;
  double t10202;
  double t10210;
  double t10219;
  double t10222;
  double t10226;
  double t9936;
  double t9937;
  double t9939;
  double t10018;
  double t10035;
  double t10039;
  double t10042;
  double t10043;
  double t10058;
  double t10059;
  double t10069;
  double t10098;
  double t10101;
  double t5926;
  double t10267;
  double t10268;
  double t9492;
  double t9497;
  double t9510;
  double t9520;
  double t9571;
  double t9582;
  double t9585;
  double t9592;
  double t9642;
  double t9927;
  double t9928;
  double t9929;
  double t9930;
  double t9931;
  double t9932;
  double t9933;
  double t9934;
  double t10250;
  double t10251;
  double t10253;
  double t10256;
  double t10257;
  double t10258;
  double t10259;
  double t10260;
  double t8422;
  double t8429;
  double t8490;
  double t8493;
  double t8498;
  double t8501;
  double t8508;
  double t8510;
  double t8511;
  double t10301;
  double t10307;
  double t10308;
  double t10309;
  double t10310;
  double t10312;
  double t10314;
  double t10330;
  double t10387;
  double t10390;
  double t9463;
  double t9475;
  double t9478;
  double t9480;
  double t9481;
  double t9484;
  double t9485;
  double t9918;
  double t9919;
  double t9920;
  double t9921;
  double t9922;
  double t9923;
  double t9924;
  double t10231;
  double t10232;
  double t10238;
  double t10241;
  double t10245;
  double t10246;
  double t10247;
  double t8370;
  double t8375;
  double t8394;
  double t8407;
  double t8417;
  double t8419;
  double t8420;
  double t10311;
  double t10349;
  double t10350;
  double t10359;
  double t10361;
  double t10365;
  double t10370;
  double t10470;
  double t10472;
  double t10473;
  double t10516;
  double t10518;
  double t10521;
  double t10522;
  double t10523;
  double t10531;
  double t10534;
  double t10536;
  double t10537;
  double t10539;
  double t10544;
  double t10545;
  double t10554;
  double t10555;
  double t10580;
  double t10591;
  double t10593;
  double t10617;
  double t10618;
  double t10640;
  double t10641;
  double t10642;
  double t10643;
  double t10644;
  double t10651;
  double t10653;
  double t10660;
  double t10661;
  double t10663;
  double t10667;
  double t10668;
  double t10670;
  double t10671;
  double t10675;
  double t10492;
  double t10494;
  double t10496;
  double t10497;
  double t10498;
  double t10499;
  double t10500;
  double t10506;
  double t10510;
  double t10511;
  double t10513;
  double t10514;
  double t10723;
  double t10725;
  double t10727;
  double t10728;
  double t10729;
  double t10730;
  double t10731;
  double t10677;
  double t10684;
  double t10686;
  double t10691;
  double t10699;
  double t10707;
  double t10708;
  double t10709;
  double t10712;
  double t10756;
  double t10757;
  double t10765;
  double t10766;
  double t10769;
  double t10770;
  double t10773;
  double t10779;
  double t10780;
  double t10783;
  double t10785;
  double t10799;
  double t10801;
  double t10802;
  double t10798;
  double t10803;
  double t10804;
  double t10806;
  double t10807;
  double t10808;
  double t10820;
  double t10821;
  double t10856;
  double t10857;
  double t10858;
  double t10867;
  double t10869;
  double t10883;
  double t10884;
  double t10754;
  double t10755;
  double t10788;
  double t10956;
  double t10957;
  double t10958;
  double t10962;
  double t10974;
  double t10975;
  double t11016;
  double t11017;
  double t10791;
  double t10792;
  double t10793;
  double t11065;
  double t11070;
  double t11003;
  double t11005;
  double t11008;
  double t11012;
  double t11013;
  double t11019;
  double t11023;
  double t11024;
  double t11028;
  double t11033;
  double t11034;
  double t11035;
  double t11036;
  double t11211;
  double t11212;
  double t10818;
  double t10819;
  double t10822;
  double t10824;
  double t10827;
  double t10830;
  double t10831;
  double t10832;
  double t10833;
  double t10992;
  double t10993;
  double t10994;
  double t10995;
  double t10996;
  double t10997;
  double t11000;
  double t11001;
  double t11128;
  double t11137;
  double t11143;
  double t11146;
  double t11156;
  double t11157;
  double t11166;
  double t11171;
  double t11271;
  double t11274;
  double t11275;
  double t11276;
  double t11279;
  double t11280;
  double t11282;
  double t11299;
  double t11301;
  double t10805;
  double t10809;
  double t10810;
  double t10811;
  double t10813;
  double t10814;
  double t10815;
  double t10976;
  double t10978;
  double t10979;
  double t10980;
  double t10981;
  double t10982;
  double t10983;
  double t11078;
  double t11080;
  double t11081;
  double t11082;
  double t11090;
  double t11109;
  double t11124;
  double t11277;
  double t11283;
  double t11290;
  double t11291;
  double t11292;
  double t11293;
  double t11294;
  double t11389;
  double t11401;
  t3655 = Cos(var1[15]);
  t3662 = -1.*t3655;
  t3997 = 1. + t3662;
  t4375 = -0.15121*t3997;
  t4381 = Sin(var1[15]);
  t4451 = Sin(var1[4]);
  t3635 = Cos(var1[5]);
  t4564 = Sin(var1[5]);
  t4568 = Cos(var1[16]);
  t4666 = t3635*t4381*t4451;
  t4687 = t3655*t4451*t4564;
  t4688 = t4666 + t4687;
  t4699 = Cos(var1[17]);
  t4714 = Sin(var1[16]);
  t4716 = Sin(var1[17]);
  t4531 = -0.15121*t4381;
  t4576 = -1.*t4568;
  t4628 = 1. + t4576;
  t4698 = -0.28121*t4628*t4688;
  t4707 = -1.*t4699;
  t4711 = 1. + t4707;
  t4712 = -0.50321*t4568*t4711*t4688;
  t4719 = 0.50321*t4714*t4716*t4688;
  t4722 = t3655*t3635*t4451;
  t4727 = -1.*t4381*t4451*t4564;
  t4728 = t4722 + t4727;
  t4733 = -0.15121*t4728;
  t4735 = t4568*t4699*t4688;
  t4738 = t4714*t4716*t4688;
  t4746 = t4735 + t4738;
  t4760 = -0.19821*t4746;
  t4563 = t4375 + t4531;
  t4853 = Cos(var1[4]);
  t4388 = 0.15121*t4381;
  t4443 = t4375 + t4388;
  t4920 = -1.*t3655*t4853*t3635;
  t4934 = t4853*t4381*t4564;
  t4956 = t4920 + t4934;
  t4980 = -1.*t4714*t4451;
  t4987 = t4568*t4956;
  t4990 = t4980 + t4987;
  t5033 = -1.*t4568*t4451;
  t5081 = -1.*t4714*t4956;
  t5082 = t5033 + t5081;
  t5122 = -1.*t3655*t3635*t4451;
  t5136 = t4381*t4451*t4564;
  t5153 = t5122 + t5136;
  t5117 = t4853*t4714;
  t5157 = t4568*t5153;
  t5191 = t5117 + t5157;
  t5200 = t4568*t4853;
  t5211 = -1.*t4714*t5153;
  t5213 = t5200 + t5211;
  t5324 = -1.*t4853*t4714;
  t5349 = -1.*t4568*t5153;
  t5352 = t5324 + t5349;
  t5457 = -1.*t4853*t3635*t4381;
  t5462 = -1.*t3655*t4853*t4564;
  t5500 = t5457 + t5462;
  t4811 = 0.15121*t3655;
  t4817 = t4811 + t4531;
  t4799 = -0.15121*t3655;
  t4800 = t4799 + t4531;
  t4863 = t4853*t3635*t4381;
  t4864 = t3655*t4853*t4564;
  t4894 = t4863 + t4864;
  t4905 = -0.15121*t4894;
  t4966 = -0.28121*t4628*t4956;
  t4855 = -1.*t4853*t3635*t4563;
  t4862 = t4853*t4443*t4564;
  t5615 = -0.50321*t4568*t4711*t4956;
  t5617 = 0.50321*t4714*t4716*t4956;
  t5619 = t4568*t4699*t4956;
  t5621 = t4714*t4716*t4956;
  t5647 = t5619 + t5621;
  t5649 = -0.19821*t5647;
  t4457 = t3635*t4443*t4451;
  t4565 = t4563*t4451*t4564;
  t4767 = t4457 + t4565 + t4698 + t4712 + t4719 + t4733 + t4760;
  t5521 = 0.50321*t4699*t4714*t5500;
  t5522 = -0.50321*t4568*t4716*t5500;
  t5525 = t4699*t4714*t5500;
  t5526 = -1.*t4568*t4716*t5500;
  t5527 = t5525 + t5526;
  t5531 = -0.19821*t5527;
  t5537 = t5521 + t5522 + t5531;
  t5542 = var2[17]*t5537;
  t5543 = -0.28121*t4714*t5500;
  t5558 = 0.50321*t4711*t4714*t5500;
  t5562 = 0.50321*t4568*t4716*t5500;
  t5569 = -1.*t4699*t4714*t5500;
  t5576 = t4568*t4716*t5500;
  t5580 = t5569 + t5576;
  t5582 = -0.19821*t5580;
  t5593 = t5543 + t5558 + t5562 + t5582;
  t5596 = var2[16]*t5593;
  t5598 = -1.*t4853*t3635*t4817;
  t5604 = -1.*t4853*t4800*t4564;
  t5661 = t5598 + t5604 + t4905 + t4966 + t5615 + t5617 + t5649;
  t4810 = -1.*t3635*t4800*t4451;
  t4825 = t4817*t4451*t4564;
  t4835 = t4810 + t4825 + t4698 + t4712 + t4719 + t4733 + t4760;
  t6355 = t3655*t4853*t3635;
  t6394 = -1.*t4853*t4381*t4564;
  t6454 = t6355 + t6394;
  t6455 = -1.*t4568*t6454;
  t6460 = t4980 + t6455;
  t6479 = t4568*t4451;
  t6615 = -1.*t4714*t6454;
  t6619 = t6479 + t6615;
  t4859 = -0.28121*t4714*t4451;
  t6816 = t4714*t6454;
  t6825 = t5033 + t6816;
  t5270 = 0.28121*t4568*t4853;
  t5309 = -0.28121*t4714*t5153;
  t5357 = -0.50321*t4716*t5352;
  t5358 = -0.50321*t4711*t5213;
  t5380 = -1.*t4716*t5352;
  t5401 = t4699*t5213;
  t5431 = t5380 + t5401;
  t5437 = -0.19821*t5431;
  t5439 = t5270 + t5309 + t5357 + t5358 + t5437;
  t6466 = -0.50321*t4699*t6460;
  t6678 = -0.50321*t4716*t6619;
  t6690 = -1.*t4699*t6460;
  t6707 = -1.*t4716*t6619;
  t6708 = t6690 + t6707;
  t6782 = -0.19821*t6708;
  t6784 = t6466 + t6678 + t6782;
  t7095 = t4714*t4451;
  t7115 = t4568*t6454;
  t7116 = t7095 + t7115;
  t5192 = -0.50321*t4716*t5191;
  t5219 = -0.50321*t4699*t5213;
  t5249 = -1.*t4716*t5191;
  t5262 = -1.*t4699*t5213;
  t5264 = t5249 + t5262;
  t5266 = -0.19821*t5264;
  t5267 = t5192 + t5219 + t5266;
  t7428 = -0.28121*t4628*t5500;
  t7433 = -0.50321*t4568*t4711*t5500;
  t7448 = 0.50321*t4714*t4716*t5500;
  t7449 = -0.15121*t4956;
  t7458 = t4568*t4699*t5500;
  t7460 = t4714*t4716*t5500;
  t7462 = t7458 + t7460;
  t7464 = -0.19821*t7462;
  t7630 = Cos(var1[3]);
  t7673 = t3655*t7630*t4853*t3635;
  t7681 = -1.*t7630*t4853*t4381*t4564;
  t7692 = t7673 + t7681;
  t7701 = t7630*t4714*t4451;
  t7715 = t4568*t7692;
  t7722 = t7701 + t7715;
  t7760 = t4568*t7630*t4451;
  t7786 = -1.*t4714*t7692;
  t7795 = t7760 + t7786;
  t7884 = Sin(var1[3]);
  t7882 = t7630*t3635*t4451;
  t7894 = -1.*t7884*t4564;
  t7911 = t7882 + t7894;
  t7919 = -1.*t3635*t7884;
  t7942 = -1.*t7630*t4451*t4564;
  t7949 = t7919 + t7942;
  t7960 = -1.*t4381*t7911;
  t7961 = t3655*t7949;
  t7972 = t7960 + t7961;
  t8158 = -1.*t7630*t3635*t4451;
  t8182 = t7884*t4564;
  t8184 = t8158 + t8182;
  t8210 = t4381*t8184;
  t8215 = t8210 + t7961;
  t8059 = -1.*t4381*t7949;
  t8357 = t3655*t7911;
  t8358 = t4381*t7949;
  t8359 = t8357 + t8358;
  t8355 = -1.*t7630*t4853*t4714;
  t8363 = t4568*t8359;
  t8364 = t8355 + t8363;
  t8371 = -1.*t4568*t7630*t4853;
  t8372 = -1.*t4714*t8359;
  t8374 = t8371 + t8372;
  t8468 = t7630*t4853*t4714;
  t8472 = -1.*t4568*t8359;
  t8488 = t8468 + t8472;
  t8536 = -1.*t3635*t7884*t4451;
  t8549 = -1.*t7630*t4564;
  t8551 = t8536 + t8549;
  t8560 = -1.*t7630*t3635;
  t8565 = t7884*t4451*t4564;
  t8569 = t8560 + t8565;
  t8584 = t3655*t8551;
  t8603 = t4381*t8569;
  t8604 = t8584 + t8603;
  t8616 = t4853*t4714*t7884;
  t8622 = t4568*t8604;
  t8765 = t8616 + t8622;
  t8773 = t4568*t4853*t7884;
  t8784 = -1.*t4714*t8604;
  t8788 = t8773 + t8784;
  t9089 = -1.*t4853*t3635*t4381*t7884;
  t9108 = -1.*t3655*t4853*t7884*t4564;
  t9114 = t9089 + t9108;
  t9127 = -0.28121*t4628*t9114;
  t9131 = -0.50321*t4568*t4711*t9114;
  t9248 = 0.50321*t4714*t4716*t9114;
  t9260 = -1.*t3655*t4853*t3635*t7884;
  t9275 = t4853*t4381*t7884*t4564;
  t9278 = t9260 + t9275;
  t9280 = -0.15121*t9278;
  t9373 = t4568*t4699*t9114;
  t9401 = t4714*t4716*t9114;
  t9416 = t9373 + t9401;
  t9417 = -0.19821*t9416;
  t7631 = t7630*t4853*t3635*t4563;
  t7637 = 0.28121*t7630*t4714*t4451;
  t7649 = -1.*t7630*t4853*t4443*t4564;
  t7658 = -1.*t7630*t4853*t3635*t4381;
  t7659 = -1.*t3655*t7630*t4853*t4564;
  t7664 = t7658 + t7659;
  t7665 = -0.15121*t7664;
  t7697 = -0.28121*t4628*t7692;
  t7744 = -0.50321*t4711*t7722;
  t7798 = -0.50321*t4716*t7795;
  t7813 = t4699*t7722;
  t7820 = -1.*t4716*t7795;
  t7826 = t7813 + t7820;
  t7840 = -0.19821*t7826;
  t7843 = t7631 + t7637 + t7649 + t7665 + t7697 + t7744 + t7798 + t7840;
  t9455 = t3655*t4853*t3635*t7884;
  t9456 = -1.*t4853*t4381*t7884*t4564;
  t9457 = t9455 + t9456;
  t9454 = t4714*t7884*t4451;
  t9459 = t4568*t9457;
  t9461 = t9454 + t9459;
  t9464 = t4568*t7884*t4451;
  t9469 = -1.*t4714*t9457;
  t9470 = t9464 + t9469;
  t9498 = -1.*t4714*t7884*t4451;
  t9502 = -1.*t4568*t9457;
  t9509 = t9498 + t9502;
  t8535 = 0.28121*t4853*t4714*t7884;
  t9659 = -1.*t3655*t3635*t7884*t4451;
  t9661 = t4381*t7884*t4451*t4564;
  t9662 = t9659 + t9661;
  t9673 = t4568*t9662;
  t9674 = t8616 + t9673;
  t9678 = -1.*t4714*t9662;
  t9729 = t8773 + t9678;
  t8980 = -1.*t4853*t3635*t4443*t7884;
  t9058 = -1.*t4853*t4563*t7884*t4564;
  t9421 = t8980 + t9058 + t9127 + t9131 + t9248 + t9280 + t9417;
  t8199 = t4443*t8184;
  t8200 = t4563*t7949;
  t8240 = -0.28121*t4628*t8215;
  t8243 = -0.50321*t4568*t4711*t8215;
  t8246 = 0.50321*t4714*t4716*t8215;
  t8251 = t3655*t8184;
  t8262 = t8251 + t8059;
  t8288 = -0.15121*t8262;
  t8297 = t4568*t4699*t8215;
  t8306 = t4714*t4716*t8215;
  t8315 = t8297 + t8306;
  t8326 = -0.19821*t8315;
  t8345 = t8199 + t8200 + t8240 + t8243 + t8246 + t8288 + t8326;
  t9906 = t4381*t8551;
  t9908 = t7630*t3635;
  t9912 = -1.*t7884*t4451*t4564;
  t9915 = t9908 + t9912;
  t9916 = t3655*t9915;
  t9917 = t9906 + t9916;
  t8575 = -1.*t4381*t8551;
  t10036 = -1.*t4381*t9915;
  t10037 = t8584 + t10036;
  t8559 = t4563*t8551;
  t8573 = t4443*t8569;
  t8578 = t3655*t8569;
  t8580 = t8575 + t8578;
  t8581 = -0.15121*t8580;
  t8611 = -0.28121*t4628*t8604;
  t9439 = t4853*t3635*t4800*t7884;
  t9440 = -1.*t4853*t4817*t7884*t4564;
  t9441 = t9439 + t9440 + t9127 + t9131 + t9248 + t9280 + t9417;
  t7918 = t4800*t7911;
  t7955 = t4817*t7949;
  t8013 = -0.28121*t4628*t7972;
  t8050 = -0.50321*t4568*t4711*t7972;
  t8051 = 0.50321*t4714*t4716*t7972;
  t8053 = -1.*t3655*t7911;
  t8061 = t8053 + t8059;
  t8063 = -0.15121*t8061;
  t8086 = t4568*t4699*t7972;
  t8106 = t4714*t4716*t7972;
  t8123 = t8086 + t8106;
  t8124 = -0.19821*t8123;
  t8139 = t7918 + t7955 + t8013 + t8050 + t8051 + t8063 + t8124;
  t10202 = t3635*t7884*t4451;
  t10210 = t7630*t4564;
  t10219 = t10202 + t10210;
  t10222 = -1.*t4381*t10219;
  t10226 = t10222 + t9916;
  t9936 = t4817*t8551;
  t9937 = t4800*t9915;
  t9939 = -1.*t3655*t9915;
  t10018 = t8575 + t9939;
  t10035 = -0.15121*t10018;
  t10039 = -0.28121*t4628*t10037;
  t10042 = -0.50321*t4568*t4711*t10037;
  t10043 = 0.50321*t4714*t4716*t10037;
  t10058 = t4568*t4699*t10037;
  t10059 = t4714*t4716*t10037;
  t10069 = t10058 + t10059;
  t10098 = -0.19821*t10069;
  t10101 = t9936 + t9937 + t10035 + t10039 + t10042 + t10043 + t10098;
  t5926 = t4799 + t4388;
  t10267 = -1.*t3655*t10219;
  t10268 = t10267 + t10036;
  t9492 = 0.28121*t4568*t7884*t4451;
  t9497 = -0.28121*t4714*t9457;
  t9510 = -0.50321*t4716*t9509;
  t9520 = -0.50321*t4711*t9470;
  t9571 = -1.*t4716*t9509;
  t9582 = t4699*t9470;
  t9585 = t9571 + t9582;
  t9592 = -0.19821*t9585;
  t9642 = t9492 + t9497 + t9510 + t9520 + t9592;
  t9927 = -0.28121*t4714*t9917;
  t9928 = 0.50321*t4711*t4714*t9917;
  t9929 = 0.50321*t4568*t4716*t9917;
  t9930 = -1.*t4699*t4714*t9917;
  t9931 = t4568*t4716*t9917;
  t9932 = t9930 + t9931;
  t9933 = -0.19821*t9932;
  t9934 = t9927 + t9928 + t9929 + t9933;
  t10250 = -0.28121*t4714*t10226;
  t10251 = 0.50321*t4711*t4714*t10226;
  t10253 = 0.50321*t4568*t4716*t10226;
  t10256 = -1.*t4699*t4714*t10226;
  t10257 = t4568*t4716*t10226;
  t10258 = t10256 + t10257;
  t10259 = -0.19821*t10258;
  t10260 = t10250 + t10251 + t10253 + t10259;
  t8422 = -0.28121*t4568*t7630*t4853;
  t8429 = -0.28121*t4714*t8359;
  t8490 = -0.50321*t4716*t8488;
  t8493 = -0.50321*t4711*t8374;
  t8498 = -1.*t4716*t8488;
  t8501 = t4699*t8374;
  t8508 = t8498 + t8501;
  t8510 = -0.19821*t8508;
  t8511 = t8422 + t8429 + t8490 + t8493 + t8510;
  t10301 = t3655*t10219;
  t10307 = t4381*t9915;
  t10308 = t10301 + t10307;
  t10309 = -1.*t4568*t10308;
  t10310 = t8616 + t10309;
  t10312 = -1.*t4568*t4853*t7884;
  t10314 = -1.*t4714*t10308;
  t10330 = t10312 + t10314;
  t10387 = t4714*t10308;
  t10390 = t8773 + t10387;
  t9463 = -0.50321*t4716*t9461;
  t9475 = -0.50321*t4699*t9470;
  t9478 = -1.*t4716*t9461;
  t9480 = -1.*t4699*t9470;
  t9481 = t9478 + t9480;
  t9484 = -0.19821*t9481;
  t9485 = t9463 + t9475 + t9484;
  t9918 = 0.50321*t4699*t4714*t9917;
  t9919 = -0.50321*t4568*t4716*t9917;
  t9920 = t4699*t4714*t9917;
  t9921 = -1.*t4568*t4716*t9917;
  t9922 = t9920 + t9921;
  t9923 = -0.19821*t9922;
  t9924 = t9918 + t9919 + t9923;
  t10231 = 0.50321*t4699*t4714*t10226;
  t10232 = -0.50321*t4568*t4716*t10226;
  t10238 = t4699*t4714*t10226;
  t10241 = -1.*t4568*t4716*t10226;
  t10245 = t10238 + t10241;
  t10246 = -0.19821*t10245;
  t10247 = t10231 + t10232 + t10246;
  t8370 = -0.50321*t4716*t8364;
  t8375 = -0.50321*t4699*t8374;
  t8394 = -1.*t4716*t8364;
  t8407 = -1.*t4699*t8374;
  t8417 = t8394 + t8407;
  t8419 = -0.19821*t8417;
  t8420 = t8370 + t8375 + t8419;
  t10311 = -0.50321*t4699*t10310;
  t10349 = -0.50321*t4716*t10330;
  t10350 = -1.*t4699*t10310;
  t10359 = -1.*t4716*t10330;
  t10361 = t10350 + t10359;
  t10365 = -0.19821*t10361;
  t10370 = t10311 + t10349 + t10365;
  t10470 = -1.*t4853*t4714*t7884;
  t10472 = t4568*t10308;
  t10473 = t10470 + t10472;
  t10516 = t4853*t3635*t4563*t7884;
  t10518 = 0.28121*t4714*t7884*t4451;
  t10521 = -1.*t4853*t4443*t7884*t4564;
  t10522 = -0.15121*t9114;
  t10523 = -0.28121*t4628*t9457;
  t10531 = -0.50321*t4711*t9461;
  t10534 = -0.50321*t4716*t9470;
  t10536 = t4699*t9461;
  t10537 = -1.*t4716*t9470;
  t10539 = t10536 + t10537;
  t10544 = -0.19821*t10539;
  t10545 = t10516 + t10518 + t10521 + t10522 + t10523 + t10531 + t10534 + t10544;
  t10554 = t4443*t8551;
  t10555 = t4563*t9915;
  t10580 = -0.28121*t4628*t9917;
  t10591 = -0.50321*t4568*t4711*t9917;
  t10593 = 0.50321*t4714*t4716*t9917;
  t10617 = -0.15121*t10037;
  t10618 = t4568*t4699*t9917;
  t10640 = t4714*t4716*t9917;
  t10641 = t10618 + t10640;
  t10642 = -0.19821*t10641;
  t10643 = t10554 + t10555 + t10580 + t10591 + t10593 + t10617 + t10642;
  t10644 = t4800*t10219;
  t10651 = t4817*t9915;
  t10653 = -0.28121*t4628*t10226;
  t10660 = -0.50321*t4568*t4711*t10226;
  t10661 = 0.50321*t4714*t4716*t10226;
  t10663 = -0.15121*t10268;
  t10667 = t4568*t4699*t10226;
  t10668 = t4714*t4716*t10226;
  t10670 = t10667 + t10668;
  t10671 = -0.19821*t10670;
  t10675 = t10644 + t10651 + t10653 + t10660 + t10661 + t10663 + t10671;
  t10492 = -0.28121*t7630*t4853*t4714;
  t10494 = t4563*t7911;
  t10496 = t4443*t7949;
  t10497 = -0.15121*t7972;
  t10498 = -0.28121*t4628*t8359;
  t10499 = -0.50321*t4711*t8364;
  t10500 = -0.50321*t4716*t8374;
  t10506 = t4699*t8364;
  t10510 = -1.*t4716*t8374;
  t10511 = t10506 + t10510;
  t10513 = -0.19821*t10511;
  t10514 = t10492 + t10494 + t10496 + t10497 + t10498 + t10499 + t10500 + t10513;
  t10723 = -0.50321*t4716*t10473;
  t10725 = -0.50321*t4699*t10330;
  t10727 = -1.*t4716*t10473;
  t10728 = -1.*t4699*t10330;
  t10729 = t10727 + t10728;
  t10730 = -0.19821*t10729;
  t10731 = t10723 + t10725 + t10730;
  t10677 = -0.28121*t4568*t4853*t7884;
  t10684 = -0.28121*t4714*t10308;
  t10686 = -0.50321*t4716*t10310;
  t10691 = -0.50321*t4711*t10330;
  t10699 = -1.*t4716*t10310;
  t10707 = t4699*t10330;
  t10708 = t10699 + t10707;
  t10709 = -0.19821*t10708;
  t10712 = t10677 + t10684 + t10686 + t10691 + t10709;
  t10756 = t7630*t4853*t3635*t4381;
  t10757 = t3655*t7630*t4853*t4564;
  t10765 = t10756 + t10757;
  t10766 = -0.28121*t4628*t10765;
  t10769 = -0.50321*t4568*t4711*t10765;
  t10770 = 0.50321*t4714*t4716*t10765;
  t10773 = -0.15121*t7692;
  t10779 = t4568*t4699*t10765;
  t10780 = t4714*t4716*t10765;
  t10783 = t10779 + t10780;
  t10785 = -0.19821*t10783;
  t10799 = -1.*t3655*t7630*t4853*t3635;
  t10801 = t7630*t4853*t4381*t4564;
  t10802 = t10799 + t10801;
  t10798 = -1.*t7630*t4714*t4451;
  t10803 = t4568*t10802;
  t10804 = t10798 + t10803;
  t10806 = -1.*t4568*t7630*t4451;
  t10807 = -1.*t4714*t10802;
  t10808 = t10806 + t10807;
  t10820 = -1.*t4568*t10802;
  t10821 = t7701 + t10820;
  t10856 = t3655*t7630*t3635*t4451;
  t10857 = -1.*t7630*t4381*t4451*t4564;
  t10858 = t10856 + t10857;
  t10867 = t4568*t10858;
  t10869 = t8355 + t10867;
  t10883 = -1.*t4714*t10858;
  t10884 = t8371 + t10883;
  t10754 = t7630*t4853*t3635*t4443;
  t10755 = t7630*t4853*t4563*t4564;
  t10788 = t10754 + t10755 + t10766 + t10769 + t10770 + t10773 + t10785;
  t10956 = t4381*t7911;
  t10957 = t3635*t7884;
  t10958 = t7630*t4451*t4564;
  t10962 = t10957 + t10958;
  t10974 = t3655*t10962;
  t10975 = t10956 + t10974;
  t11016 = -1.*t4381*t10962;
  t11017 = t8357 + t11016;
  t10791 = -1.*t7630*t4853*t3635*t4800;
  t10792 = t7630*t4853*t4817*t4564;
  t10793 = t10791 + t10792 + t10766 + t10769 + t10770 + t10773 + t10785;
  t11065 = -1.*t4381*t8184;
  t11070 = t11065 + t10974;
  t11003 = t4817*t7911;
  t11005 = t4800*t10962;
  t11008 = -1.*t3655*t10962;
  t11012 = t7960 + t11008;
  t11013 = -0.15121*t11012;
  t11019 = -0.28121*t4628*t11017;
  t11023 = -0.50321*t4568*t4711*t11017;
  t11024 = 0.50321*t4714*t4716*t11017;
  t11028 = t4568*t4699*t11017;
  t11033 = t4714*t4716*t11017;
  t11034 = t11028 + t11033;
  t11035 = -0.19821*t11034;
  t11036 = t11003 + t11005 + t11013 + t11019 + t11023 + t11024 + t11035;
  t11211 = -1.*t3655*t8184;
  t11212 = t11211 + t11016;
  t10818 = -0.28121*t4568*t7630*t4451;
  t10819 = -0.28121*t4714*t10802;
  t10822 = -0.50321*t4716*t10821;
  t10824 = -0.50321*t4711*t10808;
  t10827 = -1.*t4716*t10821;
  t10830 = t4699*t10808;
  t10831 = t10827 + t10830;
  t10832 = -0.19821*t10831;
  t10833 = t10818 + t10819 + t10822 + t10824 + t10832;
  t10992 = -0.28121*t4714*t10975;
  t10993 = 0.50321*t4711*t4714*t10975;
  t10994 = 0.50321*t4568*t4716*t10975;
  t10995 = -1.*t4699*t4714*t10975;
  t10996 = t4568*t4716*t10975;
  t10997 = t10995 + t10996;
  t11000 = -0.19821*t10997;
  t11001 = t10992 + t10993 + t10994 + t11000;
  t11128 = -0.28121*t4714*t11070;
  t11137 = 0.50321*t4711*t4714*t11070;
  t11143 = 0.50321*t4568*t4716*t11070;
  t11146 = -1.*t4699*t4714*t11070;
  t11156 = t4568*t4716*t11070;
  t11157 = t11146 + t11156;
  t11166 = -0.19821*t11157;
  t11171 = t11128 + t11137 + t11143 + t11166;
  t11271 = t4381*t10962;
  t11274 = t8251 + t11271;
  t11275 = -1.*t4568*t11274;
  t11276 = t8355 + t11275;
  t11279 = t4568*t7630*t4853;
  t11280 = -1.*t4714*t11274;
  t11282 = t11279 + t11280;
  t11299 = t4714*t11274;
  t11301 = t8371 + t11299;
  t10805 = -0.50321*t4716*t10804;
  t10809 = -0.50321*t4699*t10808;
  t10810 = -1.*t4716*t10804;
  t10811 = -1.*t4699*t10808;
  t10813 = t10810 + t10811;
  t10814 = -0.19821*t10813;
  t10815 = t10805 + t10809 + t10814;
  t10976 = 0.50321*t4699*t4714*t10975;
  t10978 = -0.50321*t4568*t4716*t10975;
  t10979 = t4699*t4714*t10975;
  t10980 = -1.*t4568*t4716*t10975;
  t10981 = t10979 + t10980;
  t10982 = -0.19821*t10981;
  t10983 = t10976 + t10978 + t10982;
  t11078 = 0.50321*t4699*t4714*t11070;
  t11080 = -0.50321*t4568*t4716*t11070;
  t11081 = t4699*t4714*t11070;
  t11082 = -1.*t4568*t4716*t11070;
  t11090 = t11081 + t11082;
  t11109 = -0.19821*t11090;
  t11124 = t11078 + t11080 + t11109;
  t11277 = -0.50321*t4699*t11276;
  t11283 = -0.50321*t4716*t11282;
  t11290 = -1.*t4699*t11276;
  t11291 = -1.*t4716*t11282;
  t11292 = t11290 + t11291;
  t11293 = -0.19821*t11292;
  t11294 = t11277 + t11283 + t11293;
  t11389 = t4568*t11274;
  t11401 = t8468 + t11389;
  p_output1[0]=(t4855 + t4859 + t4862 + t4905 + t4966 - 0.50321*t4711*t4990 - 0.50321*t4716*t5082 - 0.19821*(t4699*t4990 - 1.*t4716*t5082))*var2[4] + t4767*var2[5] + t4835*var2[15] + t5439*var2[16] + t5267*var2[17];
  p_output1[1]=t5542 + t5596 + t4767*var2[4] + (t4855 + t4862 + t4905 + t4966 + t5615 + t5617 + t5649)*var2[5] + t5661*var2[15];
  p_output1[2]=t5542 + t5596 + t4835*var2[4] + t5661*var2[5] + (t4905 + t4966 + t5604 + t5615 + t5617 + t5649 + t3635*t4853*t5926)*var2[15];
  p_output1[3]=t5439*var2[4] + t5593*var2[5] + t5593*var2[15] + (t4859 - 0.28121*t4568*t6454 - 0.50321*t4711*t6460 - 0.50321*t4716*t6825 - 0.19821*(t4699*t6460 - 1.*t4716*t6825))*var2[16] + t6784*var2[17];
  p_output1[4]=t5267*var2[4] + t5537*var2[5] + t5537*var2[15] + t6784*var2[16] + (0.50321*t4716*t6619 - 0.50321*t4699*t7116 - 0.19821*(t4716*t6619 - 1.*t4699*t7116))*var2[17];
  p_output1[5]=1.;
  p_output1[6]=-1.*t3635*t4451*t4563 + t4443*t4451*t4564 - 0.15121*t4688 + 0.28121*t4714*t4853 - 0.28121*t4628*t5153 - 0.50321*t4711*t5191 - 0.50321*t4716*t5213 - 0.19821*(t4699*t5191 - 1.*t4716*t5213);
  p_output1[7]=-1.*t3635*t4443*t4853 - 1.*t4563*t4564*t4853 + t7428 + t7433 + t7448 + t7449 + t7464;
  p_output1[8]=t3635*t4800*t4853 - 1.*t4564*t4817*t4853 + t7428 + t7433 + t7448 + t7449 + t7464;
  p_output1[9]=0.28121*t4451*t4568 - 0.28121*t4714*t6454 - 0.50321*t4716*t6460 - 0.50321*t4711*t6619 - 0.19821*(-1.*t4716*t6460 + t4699*t6619);
  p_output1[10]=-0.50321*t4699*t6619 - 0.50321*t4716*t7116 - 0.19821*(-1.*t4699*t6619 - 1.*t4716*t7116);
  p_output1[11]=(t8535 + t8559 + t8573 + t8581 + t8611 - 0.50321*t4711*t8765 - 0.50321*t4716*t8788 - 0.19821*(t4699*t8765 - 1.*t4716*t8788))*var2[3] + t7843*var2[4] + t8345*var2[5] + t8139*var2[15] + t8511*var2[16] + t8420*var2[17];
  p_output1[12]=t7843*var2[3] + (-1.*t3635*t4451*t4563*t7884 + t4443*t4451*t4564*t7884 - 0.15121*(t3635*t4381*t4451*t7884 + t3655*t4451*t4564*t7884) + t8535 - 0.28121*t4628*t9662 - 0.50321*t4711*t9674 - 0.50321*t4716*t9729 - 0.19821*(t4699*t9674 - 1.*t4716*t9729))*var2[4] + t9421*var2[5] + t9441*var2[15] + t9642*var2[16] + t9485*var2[17];
  p_output1[13]=t8345*var2[3] + t9421*var2[4] + (t8559 + t8573 + t8581 - 0.50321*t4568*t4711*t8604 + 0.50321*t4714*t4716*t8604 - 0.19821*(t4568*t4699*t8604 + t4714*t4716*t8604) + t8611)*var2[5] + t10101*var2[15] + t9934*var2[16] + t9924*var2[17];
  p_output1[14]=t8139*var2[3] + t9441*var2[4] + t10101*var2[5] + (-0.28121*t10268*t4628 - 0.50321*t10268*t4568*t4711 + 0.50321*t10268*t4714*t4716 - 0.19821*(t10268*t4568*t4699 + t10268*t4714*t4716) + t10219*t5926 + t9937 - 0.15121*(t10219*t4381 + t9939))*var2[15] + t10260*var2[16] + t10247*var2[17];
  p_output1[15]=t8511*var2[3] + t9642*var2[4] + t9934*var2[5] + t10260*var2[15] + (-0.28121*t10308*t4568 - 0.50321*t10310*t4711 - 0.50321*t10390*t4716 - 0.19821*(t10310*t4699 - 1.*t10390*t4716) + t8535)*var2[16] + t10370*var2[17];
  p_output1[16]=t8420*var2[3] + t9485*var2[4] + t9924*var2[5] + t10247*var2[15] + t10370*var2[16] + (-0.50321*t10473*t4699 + 0.50321*t10330*t4716 - 0.19821*(-1.*t10473*t4699 + t10330*t4716))*var2[17];
  p_output1[17]=1.;
  p_output1[18]=t10514;
  p_output1[19]=t10545;
  p_output1[20]=t10643;
  p_output1[21]=t10675;
  p_output1[22]=t10712;
  p_output1[23]=t10731;
  p_output1[24]=t10514*var2[3] + t10545*var2[4] + t10643*var2[5] + t10675*var2[15] + t10712*var2[16] + t10731*var2[17];
  p_output1[25]=t10545*var2[3] + (t10492 - 0.28121*t10858*t4628 - 0.50321*t10869*t4711 - 0.50321*t10884*t4716 - 0.19821*(t10869*t4699 - 1.*t10884*t4716) + t3635*t4451*t4563*t7630 - 1.*t4443*t4451*t4564*t7630 - 0.15121*(-1.*t3635*t4381*t4451*t7630 - 1.*t3655*t4451*t4564*t7630))*var2[4] + t10788*var2[5] + t10793*var2[15] + t10833*var2[16] + t10815*var2[17];
  p_output1[26]=t10643*var2[3] + t10788*var2[4] + (t10494 + t10496 + t10497 + t10498 - 0.50321*t4568*t4711*t8359 + 0.50321*t4714*t4716*t8359 - 0.19821*(t4568*t4699*t8359 + t4714*t4716*t8359))*var2[5] + t11036*var2[15] + t11001*var2[16] + t10983*var2[17];
  p_output1[27]=t10675*var2[3] + t10793*var2[4] + t11036*var2[5] + (t11005 - 0.28121*t11212*t4628 - 0.50321*t11212*t4568*t4711 + 0.50321*t11212*t4714*t4716 - 0.19821*(t11212*t4568*t4699 + t11212*t4714*t4716) + t5926*t8184 - 0.15121*(t11008 + t8210))*var2[15] + t11171*var2[16] + t11124*var2[17];
  p_output1[28]=t10712*var2[3] + t10833*var2[4] + t11001*var2[5] + t11171*var2[15] + (t10492 - 0.28121*t11274*t4568 - 0.50321*t11276*t4711 - 0.50321*t11301*t4716 - 0.19821*(t11276*t4699 - 1.*t11301*t4716))*var2[16] + t11294*var2[17];
  p_output1[29]=t10731*var2[3] + t10815*var2[4] + t10983*var2[5] + t11124*var2[15] + t11294*var2[16] + (-0.50321*t11401*t4699 + 0.50321*t11282*t4716 - 0.19821*(-1.*t11401*t4699 + t11282*t4716))*var2[17];
  p_output1[30]=1.;
  p_output1[31]=-0.15121*t10226 + t10349 + t10219*t4563 - 0.28121*t10308*t4628 - 0.19821*(t10359 + t10473*t4699) - 0.50321*t10473*t4711 - 0.28121*t4714*t4853*t7884 + t4443*t9915;
  p_output1[32]=-0.15121*t10765 - 0.28121*t10802*t4628 - 0.50321*t10804*t4711 - 0.50321*t10808*t4716 - 0.19821*(t10804*t4699 - 1.*t10808*t4716) - 0.28121*t4451*t4714*t7630 - 1.*t3635*t4563*t4853*t7630 + t4443*t4564*t4853*t7630;
  p_output1[33]=-0.15121*t11017 + t10962*t4563 - 0.28121*t10975*t4628 - 0.50321*t10975*t4568*t4711 + 0.50321*t10975*t4714*t4716 - 0.19821*(t10975*t4568*t4699 + t10975*t4714*t4716) + t4443*t7911;
  p_output1[34]=-0.15121*t11212 - 0.28121*t11070*t4628 - 0.50321*t11070*t4568*t4711 + 0.50321*t11070*t4714*t4716 - 0.19821*(t11070*t4568*t4699 + t11070*t4714*t4716) + t10962*t4817 + t4800*t8184;
  p_output1[35]=-0.50321*t11282*t4711 - 0.28121*t11274*t4714 - 0.50321*t11276*t4716 - 0.19821*(t11282*t4699 - 1.*t11276*t4716) + 0.28121*t4568*t4853*t7630;
  p_output1[36]=-0.50321*t11282*t4699 - 0.50321*t11401*t4716 - 0.19821*(-1.*t11282*t4699 - 1.*t11401*t4716);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 37, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_impact_velocity_RrFoot_DiagonalStance.hh"

namespace DiagonalStance
{

void J_impact_velocity_RrFoot_DiagonalStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
