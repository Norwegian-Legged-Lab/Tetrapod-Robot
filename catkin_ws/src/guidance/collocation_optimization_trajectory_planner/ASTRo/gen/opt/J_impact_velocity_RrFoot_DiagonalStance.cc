/*
 * Automatically Generated from Mathematica.
 * Sat 14 May 2022 15:42:30 GMT+02:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t258;
  double t269;
  double t275;
  double t281;
  double t291;
  double t353;
  double t122;
  double t444;
  double t468;
  double t493;
  double t496;
  double t501;
  double t518;
  double t563;
  double t629;
  double t408;
  double t469;
  double t489;
  double t502;
  double t544;
  double t553;
  double t561;
  double t673;
  double t689;
  double t690;
  double t784;
  double t789;
  double t810;
  double t823;
  double t824;
  double t863;
  double t426;
  double t1062;
  double t342;
  double t346;
  double t1118;
  double t1125;
  double t1129;
  double t1188;
  double t1201;
  double t1216;
  double t1379;
  double t1387;
  double t1424;
  double t1657;
  double t1658;
  double t1780;
  double t1647;
  double t1828;
  double t1851;
  double t1985;
  double t2019;
  double t2172;
  double t2288;
  double t2289;
  double t2305;
  double t2588;
  double t2589;
  double t2663;
  double t1046;
  double t1053;
  double t988;
  double t1019;
  double t1095;
  double t1115;
  double t1116;
  double t1117;
  double t1130;
  double t1064;
  double t1082;
  double t3234;
  double t3244;
  double t3261;
  double t3264;
  double t3272;
  double t3274;
  double t356;
  double t450;
  double t906;
  double t2682;
  double t2688;
  double t2802;
  double t2808;
  double t2859;
  double t2871;
  double t2881;
  double t2898;
  double t2916;
  double t2928;
  double t2938;
  double t3025;
  double t3037;
  double t3053;
  double t3169;
  double t3192;
  double t3193;
  double t3204;
  double t3207;
  double t3284;
  double t1027;
  double t1057;
  double t1058;
  double t3977;
  double t3989;
  double t3990;
  double t3994;
  double t3995;
  double t4032;
  double t4072;
  double t4088;
  double t1065;
  double t4256;
  double t4260;
  double t2260;
  double t2267;
  double t2320;
  double t2343;
  double t2355;
  double t2390;
  double t2449;
  double t2457;
  double t2469;
  double t4008;
  double t4113;
  double t4125;
  double t4128;
  double t4142;
  double t4149;
  double t4151;
  double t4604;
  double t4608;
  double t4611;
  double t1941;
  double t2175;
  double t2201;
  double t2221;
  double t2222;
  double t2230;
  double t2243;
  double t6299;
  double t6307;
  double t6326;
  double t6392;
  double t6407;
  double t6435;
  double t6620;
  double t7282;
  double t10761;
  double t12551;
  double t12711;
  double t12715;
  double t13012;
  double t13204;
  double t13294;
  double t14727;
  double t14863;
  double t14955;
  double t17652;
  double t17590;
  double t17654;
  double t17659;
  double t17687;
  double t17703;
  double t17712;
  double t17834;
  double t17840;
  double t17847;
  double t18835;
  double t18842;
  double t18886;
  double t18913;
  double t18920;
  double t18012;
  double t19900;
  double t19907;
  double t20193;
  double t19697;
  double t20218;
  double t20251;
  double t20304;
  double t21038;
  double t21116;
  double t22340;
  double t22342;
  double t22368;
  double t23204;
  double t23205;
  double t23227;
  double t23360;
  double t23361;
  double t23583;
  double t23626;
  double t23628;
  double t23658;
  double t23700;
  double t23749;
  double t23753;
  double t23946;
  double t23952;
  double t24233;
  double t25010;
  double t25108;
  double t25274;
  double t25632;
  double t26097;
  double t26146;
  double t26567;
  double t26655;
  double t26660;
  double t26941;
  double t27168;
  double t27390;
  double t27469;
  double t27554;
  double t10762;
  double t10879;
  double t10918;
  double t10946;
  double t10998;
  double t12380;
  double t12541;
  double t12766;
  double t14316;
  double t14988;
  double t15195;
  double t15513;
  double t15770;
  double t16263;
  double t17051;
  double t27687;
  double t27753;
  double t27874;
  double t27669;
  double t27878;
  double t27900;
  double t27913;
  double t27923;
  double t28085;
  double t28445;
  double t28478;
  double t28501;
  double t22560;
  double t30065;
  double t30079;
  double t30086;
  double t30130;
  double t30132;
  double t30150;
  double t30153;
  double t24914;
  double t24915;
  double t27565;
  double t18889;
  double t18901;
  double t18924;
  double t18926;
  double t18933;
  double t18958;
  double t19001;
  double t19010;
  double t19048;
  double t19072;
  double t19368;
  double t19444;
  double t19459;
  double t31277;
  double t31296;
  double t31297;
  double t31304;
  double t31307;
  double t31318;
  double t23593;
  double t33782;
  double t33820;
  double t23346;
  double t23586;
  double t23600;
  double t23606;
  double t23609;
  double t23680;
  double t27611;
  double t27612;
  double t27613;
  double t17660;
  double t17811;
  double t17854;
  double t17904;
  double t17910;
  double t17976;
  double t18222;
  double t18240;
  double t18449;
  double t18582;
  double t18737;
  double t18791;
  double t18798;
  double t34432;
  double t34447;
  double t34453;
  double t34478;
  double t34487;
  double t33569;
  double t33629;
  double t33647;
  double t33654;
  double t33776;
  double t33834;
  double t33853;
  double t34000;
  double t34020;
  double t34045;
  double t34057;
  double t34193;
  double t34199;
  double t3692;
  double t35042;
  double t35046;
  double t28414;
  double t28442;
  double t28630;
  double t28703;
  double t28996;
  double t29053;
  double t29273;
  double t29345;
  double t29415;
  double t32198;
  double t32359;
  double t32372;
  double t32549;
  double t32557;
  double t32561;
  double t32565;
  double t32572;
  double t34828;
  double t34856;
  double t34876;
  double t34907;
  double t34913;
  double t34923;
  double t34927;
  double t34949;
  double t22255;
  double t22321;
  double t22394;
  double t22425;
  double t22449;
  double t22456;
  double t22463;
  double t22467;
  double t22468;
  double t35307;
  double t35319;
  double t35328;
  double t35332;
  double t35334;
  double t35369;
  double t35373;
  double t35416;
  double t35463;
  double t35464;
  double t27901;
  double t28285;
  double t28333;
  double t28339;
  double t28365;
  double t28366;
  double t28369;
  double t31321;
  double t31412;
  double t31460;
  double t31463;
  double t31570;
  double t31572;
  double t31595;
  double t34498;
  double t34586;
  double t34600;
  double t34652;
  double t34682;
  double t34700;
  double t34714;
  double t20268;
  double t21128;
  double t21515;
  double t21996;
  double t22053;
  double t22057;
  double t22117;
  double t35355;
  double t35423;
  double t35434;
  double t35436;
  double t35450;
  double t35452;
  double t35453;
  double t35490;
  double t35491;
  double t35492;
  double t35686;
  double t35690;
  double t35694;
  double t35698;
  double t35702;
  double t35706;
  double t35709;
  double t35710;
  double t35718;
  double t35719;
  double t35722;
  double t35726;
  double t35739;
  double t35742;
  double t35758;
  double t35768;
  double t35769;
  double t35777;
  double t35778;
  double t35784;
  double t35801;
  double t35820;
  double t35835;
  double t35852;
  double t35855;
  double t35861;
  double t35868;
  double t35870;
  double t35883;
  double t35903;
  double t35918;
  double t35940;
  double t35944;
  double t35949;
  double t35502;
  double t35529;
  double t35554;
  double t35591;
  double t35610;
  double t35624;
  double t35625;
  double t35652;
  double t35657;
  double t35674;
  double t35676;
  double t35679;
  double t35997;
  double t36001;
  double t36009;
  double t36014;
  double t36019;
  double t36027;
  double t36028;
  double t35953;
  double t35957;
  double t35962;
  double t35967;
  double t35976;
  double t35981;
  double t35983;
  double t35988;
  double t35992;
  double t36144;
  double t36149;
  double t36156;
  double t36171;
  double t36175;
  double t36179;
  double t36190;
  double t36221;
  double t36223;
  double t36250;
  double t36252;
  double t36302;
  double t36304;
  double t36306;
  double t36280;
  double t36315;
  double t36319;
  double t36323;
  double t36327;
  double t36329;
  double t36356;
  double t36357;
  double t36382;
  double t36383;
  double t36392;
  double t36537;
  double t36541;
  double t36671;
  double t36690;
  double t36131;
  double t36136;
  double t36259;
  double t37103;
  double t37123;
  double t37158;
  double t37160;
  double t37225;
  double t37311;
  double t37649;
  double t37656;
  double t36266;
  double t36268;
  double t36272;
  double t37685;
  double t37686;
  double t37582;
  double t37593;
  double t37595;
  double t37633;
  double t37634;
  double t37657;
  double t37672;
  double t37673;
  double t37675;
  double t37676;
  double t37677;
  double t37678;
  double t37680;
  double t37753;
  double t37755;
  double t36354;
  double t36355;
  double t36358;
  double t36359;
  double t36360;
  double t36361;
  double t36362;
  double t36363;
  double t36364;
  double t37462;
  double t37470;
  double t37472;
  double t37482;
  double t37496;
  double t37498;
  double t37508;
  double t37523;
  double t37701;
  double t37702;
  double t37704;
  double t37707;
  double t37708;
  double t37711;
  double t37712;
  double t37715;
  double t37885;
  double t37895;
  double t37905;
  double t37907;
  double t37918;
  double t37921;
  double t37928;
  double t38013;
  double t38017;
  double t36321;
  double t36336;
  double t36337;
  double t36340;
  double t36350;
  double t36351;
  double t36352;
  double t37315;
  double t37320;
  double t37344;
  double t37375;
  double t37381;
  double t37382;
  double t37391;
  double t37687;
  double t37688;
  double t37690;
  double t37691;
  double t37692;
  double t37696;
  double t37697;
  double t37912;
  double t37952;
  double t37955;
  double t37957;
  double t37960;
  double t37966;
  double t37990;
  double t38146;
  double t38147;
  t258 = Cos(var1[15]);
  t269 = -1.*t258;
  t275 = 1. + t269;
  t281 = -0.15121*t275;
  t291 = Sin(var1[15]);
  t353 = Sin(var1[4]);
  t122 = Cos(var1[5]);
  t444 = Sin(var1[5]);
  t468 = Cos(var1[16]);
  t493 = t122*t291*t353;
  t496 = t258*t353*t444;
  t501 = t493 + t496;
  t518 = Cos(var1[17]);
  t563 = Sin(var1[16]);
  t629 = Sin(var1[17]);
  t408 = -0.15121*t291;
  t469 = -1.*t468;
  t489 = 1. + t469;
  t502 = -0.28121*t489*t501;
  t544 = -1.*t518;
  t553 = 1. + t544;
  t561 = -0.50321*t468*t553*t501;
  t673 = 0.50321*t563*t629*t501;
  t689 = t258*t122*t353;
  t690 = -1.*t291*t353*t444;
  t784 = t689 + t690;
  t789 = -0.15121*t784;
  t810 = t468*t518*t501;
  t823 = t563*t629*t501;
  t824 = t810 + t823;
  t863 = -0.23321*t824;
  t426 = t281 + t408;
  t1062 = Cos(var1[4]);
  t342 = 0.15121*t291;
  t346 = t281 + t342;
  t1118 = -1.*t258*t1062*t122;
  t1125 = t1062*t291*t444;
  t1129 = t1118 + t1125;
  t1188 = -1.*t563*t353;
  t1201 = t468*t1129;
  t1216 = t1188 + t1201;
  t1379 = -1.*t468*t353;
  t1387 = -1.*t563*t1129;
  t1424 = t1379 + t1387;
  t1657 = -1.*t258*t122*t353;
  t1658 = t291*t353*t444;
  t1780 = t1657 + t1658;
  t1647 = t1062*t563;
  t1828 = t468*t1780;
  t1851 = t1647 + t1828;
  t1985 = t468*t1062;
  t2019 = -1.*t563*t1780;
  t2172 = t1985 + t2019;
  t2288 = -1.*t1062*t563;
  t2289 = -1.*t468*t1780;
  t2305 = t2288 + t2289;
  t2588 = -1.*t1062*t122*t291;
  t2589 = -1.*t258*t1062*t444;
  t2663 = t2588 + t2589;
  t1046 = 0.15121*t258;
  t1053 = t1046 + t408;
  t988 = -0.15121*t258;
  t1019 = t988 + t408;
  t1095 = t1062*t122*t291;
  t1115 = t258*t1062*t444;
  t1116 = t1095 + t1115;
  t1117 = -0.15121*t1116;
  t1130 = -0.28121*t489*t1129;
  t1064 = -1.*t1062*t122*t426;
  t1082 = t1062*t346*t444;
  t3234 = -0.50321*t468*t553*t1129;
  t3244 = 0.50321*t563*t629*t1129;
  t3261 = t468*t518*t1129;
  t3264 = t563*t629*t1129;
  t3272 = t3261 + t3264;
  t3274 = -0.23321*t3272;
  t356 = t122*t346*t353;
  t450 = t426*t353*t444;
  t906 = t356 + t450 + t502 + t561 + t673 + t789 + t863;
  t2682 = 0.50321*t518*t563*t2663;
  t2688 = -0.50321*t468*t629*t2663;
  t2802 = t518*t563*t2663;
  t2808 = -1.*t468*t629*t2663;
  t2859 = t2802 + t2808;
  t2871 = -0.23321*t2859;
  t2881 = t2682 + t2688 + t2871;
  t2898 = var2[17]*t2881;
  t2916 = -0.28121*t563*t2663;
  t2928 = 0.50321*t553*t563*t2663;
  t2938 = 0.50321*t468*t629*t2663;
  t3025 = -1.*t518*t563*t2663;
  t3037 = t468*t629*t2663;
  t3053 = t3025 + t3037;
  t3169 = -0.23321*t3053;
  t3192 = t2916 + t2928 + t2938 + t3169;
  t3193 = var2[16]*t3192;
  t3204 = -1.*t1062*t122*t1053;
  t3207 = -1.*t1062*t1019*t444;
  t3284 = t3204 + t3207 + t1117 + t1130 + t3234 + t3244 + t3274;
  t1027 = -1.*t122*t1019*t353;
  t1057 = t1053*t353*t444;
  t1058 = t1027 + t1057 + t502 + t561 + t673 + t789 + t863;
  t3977 = t258*t1062*t122;
  t3989 = -1.*t1062*t291*t444;
  t3990 = t3977 + t3989;
  t3994 = -1.*t468*t3990;
  t3995 = t1188 + t3994;
  t4032 = t468*t353;
  t4072 = -1.*t563*t3990;
  t4088 = t4032 + t4072;
  t1065 = -0.28121*t563*t353;
  t4256 = t563*t3990;
  t4260 = t1379 + t4256;
  t2260 = 0.28121*t468*t1062;
  t2267 = -0.28121*t563*t1780;
  t2320 = -0.50321*t629*t2305;
  t2343 = -0.50321*t553*t2172;
  t2355 = -1.*t629*t2305;
  t2390 = t518*t2172;
  t2449 = t2355 + t2390;
  t2457 = -0.23321*t2449;
  t2469 = t2260 + t2267 + t2320 + t2343 + t2457;
  t4008 = -0.50321*t518*t3995;
  t4113 = -0.50321*t629*t4088;
  t4125 = -1.*t518*t3995;
  t4128 = -1.*t629*t4088;
  t4142 = t4125 + t4128;
  t4149 = -0.23321*t4142;
  t4151 = t4008 + t4113 + t4149;
  t4604 = t563*t353;
  t4608 = t468*t3990;
  t4611 = t4604 + t4608;
  t1941 = -0.50321*t629*t1851;
  t2175 = -0.50321*t518*t2172;
  t2201 = -1.*t629*t1851;
  t2221 = -1.*t518*t2172;
  t2222 = t2201 + t2221;
  t2230 = -0.23321*t2222;
  t2243 = t1941 + t2175 + t2230;
  t6299 = -0.28121*t489*t2663;
  t6307 = -0.50321*t468*t553*t2663;
  t6326 = 0.50321*t563*t629*t2663;
  t6392 = -0.15121*t1129;
  t6407 = t468*t518*t2663;
  t6435 = t563*t629*t2663;
  t6620 = t6407 + t6435;
  t7282 = -0.23321*t6620;
  t10761 = Cos(var1[3]);
  t12551 = t258*t10761*t1062*t122;
  t12711 = -1.*t10761*t1062*t291*t444;
  t12715 = t12551 + t12711;
  t13012 = t10761*t563*t353;
  t13204 = t468*t12715;
  t13294 = t13012 + t13204;
  t14727 = t468*t10761*t353;
  t14863 = -1.*t563*t12715;
  t14955 = t14727 + t14863;
  t17652 = Sin(var1[3]);
  t17590 = t10761*t122*t353;
  t17654 = -1.*t17652*t444;
  t17659 = t17590 + t17654;
  t17687 = -1.*t122*t17652;
  t17703 = -1.*t10761*t353*t444;
  t17712 = t17687 + t17703;
  t17834 = -1.*t291*t17659;
  t17840 = t258*t17712;
  t17847 = t17834 + t17840;
  t18835 = -1.*t10761*t122*t353;
  t18842 = t17652*t444;
  t18886 = t18835 + t18842;
  t18913 = t291*t18886;
  t18920 = t18913 + t17840;
  t18012 = -1.*t291*t17712;
  t19900 = t258*t17659;
  t19907 = t291*t17712;
  t20193 = t19900 + t19907;
  t19697 = -1.*t10761*t1062*t563;
  t20218 = t468*t20193;
  t20251 = t19697 + t20218;
  t20304 = -1.*t468*t10761*t1062;
  t21038 = -1.*t563*t20193;
  t21116 = t20304 + t21038;
  t22340 = t10761*t1062*t563;
  t22342 = -1.*t468*t20193;
  t22368 = t22340 + t22342;
  t23204 = -1.*t122*t17652*t353;
  t23205 = -1.*t10761*t444;
  t23227 = t23204 + t23205;
  t23360 = -1.*t10761*t122;
  t23361 = t17652*t353*t444;
  t23583 = t23360 + t23361;
  t23626 = t258*t23227;
  t23628 = t291*t23583;
  t23658 = t23626 + t23628;
  t23700 = t1062*t563*t17652;
  t23749 = t468*t23658;
  t23753 = t23700 + t23749;
  t23946 = t468*t1062*t17652;
  t23952 = -1.*t563*t23658;
  t24233 = t23946 + t23952;
  t25010 = -1.*t1062*t122*t291*t17652;
  t25108 = -1.*t258*t1062*t17652*t444;
  t25274 = t25010 + t25108;
  t25632 = -0.28121*t489*t25274;
  t26097 = -0.50321*t468*t553*t25274;
  t26146 = 0.50321*t563*t629*t25274;
  t26567 = -1.*t258*t1062*t122*t17652;
  t26655 = t1062*t291*t17652*t444;
  t26660 = t26567 + t26655;
  t26941 = -0.15121*t26660;
  t27168 = t468*t518*t25274;
  t27390 = t563*t629*t25274;
  t27469 = t27168 + t27390;
  t27554 = -0.23321*t27469;
  t10762 = t10761*t1062*t122*t426;
  t10879 = 0.28121*t10761*t563*t353;
  t10918 = -1.*t10761*t1062*t346*t444;
  t10946 = -1.*t10761*t1062*t122*t291;
  t10998 = -1.*t258*t10761*t1062*t444;
  t12380 = t10946 + t10998;
  t12541 = -0.15121*t12380;
  t12766 = -0.28121*t489*t12715;
  t14316 = -0.50321*t553*t13294;
  t14988 = -0.50321*t629*t14955;
  t15195 = t518*t13294;
  t15513 = -1.*t629*t14955;
  t15770 = t15195 + t15513;
  t16263 = -0.23321*t15770;
  t17051 = t10762 + t10879 + t10918 + t12541 + t12766 + t14316 + t14988 + t16263;
  t27687 = t258*t1062*t122*t17652;
  t27753 = -1.*t1062*t291*t17652*t444;
  t27874 = t27687 + t27753;
  t27669 = t563*t17652*t353;
  t27878 = t468*t27874;
  t27900 = t27669 + t27878;
  t27913 = t468*t17652*t353;
  t27923 = -1.*t563*t27874;
  t28085 = t27913 + t27923;
  t28445 = -1.*t563*t17652*t353;
  t28478 = -1.*t468*t27874;
  t28501 = t28445 + t28478;
  t22560 = 0.28121*t1062*t563*t17652;
  t30065 = -1.*t258*t122*t17652*t353;
  t30079 = t291*t17652*t353*t444;
  t30086 = t30065 + t30079;
  t30130 = t468*t30086;
  t30132 = t23700 + t30130;
  t30150 = -1.*t563*t30086;
  t30153 = t23946 + t30150;
  t24914 = -1.*t1062*t122*t346*t17652;
  t24915 = -1.*t1062*t426*t17652*t444;
  t27565 = t24914 + t24915 + t25632 + t26097 + t26146 + t26941 + t27554;
  t18889 = t346*t18886;
  t18901 = t426*t17712;
  t18924 = -0.28121*t489*t18920;
  t18926 = -0.50321*t468*t553*t18920;
  t18933 = 0.50321*t563*t629*t18920;
  t18958 = t258*t18886;
  t19001 = t18958 + t18012;
  t19010 = -0.15121*t19001;
  t19048 = t468*t518*t18920;
  t19072 = t563*t629*t18920;
  t19368 = t19048 + t19072;
  t19444 = -0.23321*t19368;
  t19459 = t18889 + t18901 + t18924 + t18926 + t18933 + t19010 + t19444;
  t31277 = t291*t23227;
  t31296 = t10761*t122;
  t31297 = -1.*t17652*t353*t444;
  t31304 = t31296 + t31297;
  t31307 = t258*t31304;
  t31318 = t31277 + t31307;
  t23593 = -1.*t291*t23227;
  t33782 = -1.*t291*t31304;
  t33820 = t23626 + t33782;
  t23346 = t426*t23227;
  t23586 = t346*t23583;
  t23600 = t258*t23583;
  t23606 = t23593 + t23600;
  t23609 = -0.15121*t23606;
  t23680 = -0.28121*t489*t23658;
  t27611 = t1062*t122*t1019*t17652;
  t27612 = -1.*t1062*t1053*t17652*t444;
  t27613 = t27611 + t27612 + t25632 + t26097 + t26146 + t26941 + t27554;
  t17660 = t1019*t17659;
  t17811 = t1053*t17712;
  t17854 = -0.28121*t489*t17847;
  t17904 = -0.50321*t468*t553*t17847;
  t17910 = 0.50321*t563*t629*t17847;
  t17976 = -1.*t258*t17659;
  t18222 = t17976 + t18012;
  t18240 = -0.15121*t18222;
  t18449 = t468*t518*t17847;
  t18582 = t563*t629*t17847;
  t18737 = t18449 + t18582;
  t18791 = -0.23321*t18737;
  t18798 = t17660 + t17811 + t17854 + t17904 + t17910 + t18240 + t18791;
  t34432 = t122*t17652*t353;
  t34447 = t10761*t444;
  t34453 = t34432 + t34447;
  t34478 = -1.*t291*t34453;
  t34487 = t34478 + t31307;
  t33569 = t1053*t23227;
  t33629 = t1019*t31304;
  t33647 = -1.*t258*t31304;
  t33654 = t23593 + t33647;
  t33776 = -0.15121*t33654;
  t33834 = -0.28121*t489*t33820;
  t33853 = -0.50321*t468*t553*t33820;
  t34000 = 0.50321*t563*t629*t33820;
  t34020 = t468*t518*t33820;
  t34045 = t563*t629*t33820;
  t34057 = t34020 + t34045;
  t34193 = -0.23321*t34057;
  t34199 = t33569 + t33629 + t33776 + t33834 + t33853 + t34000 + t34193;
  t3692 = t988 + t342;
  t35042 = -1.*t258*t34453;
  t35046 = t35042 + t33782;
  t28414 = 0.28121*t468*t17652*t353;
  t28442 = -0.28121*t563*t27874;
  t28630 = -0.50321*t629*t28501;
  t28703 = -0.50321*t553*t28085;
  t28996 = -1.*t629*t28501;
  t29053 = t518*t28085;
  t29273 = t28996 + t29053;
  t29345 = -0.23321*t29273;
  t29415 = t28414 + t28442 + t28630 + t28703 + t29345;
  t32198 = -0.28121*t563*t31318;
  t32359 = 0.50321*t553*t563*t31318;
  t32372 = 0.50321*t468*t629*t31318;
  t32549 = -1.*t518*t563*t31318;
  t32557 = t468*t629*t31318;
  t32561 = t32549 + t32557;
  t32565 = -0.23321*t32561;
  t32572 = t32198 + t32359 + t32372 + t32565;
  t34828 = -0.28121*t563*t34487;
  t34856 = 0.50321*t553*t563*t34487;
  t34876 = 0.50321*t468*t629*t34487;
  t34907 = -1.*t518*t563*t34487;
  t34913 = t468*t629*t34487;
  t34923 = t34907 + t34913;
  t34927 = -0.23321*t34923;
  t34949 = t34828 + t34856 + t34876 + t34927;
  t22255 = -0.28121*t468*t10761*t1062;
  t22321 = -0.28121*t563*t20193;
  t22394 = -0.50321*t629*t22368;
  t22425 = -0.50321*t553*t21116;
  t22449 = -1.*t629*t22368;
  t22456 = t518*t21116;
  t22463 = t22449 + t22456;
  t22467 = -0.23321*t22463;
  t22468 = t22255 + t22321 + t22394 + t22425 + t22467;
  t35307 = t258*t34453;
  t35319 = t291*t31304;
  t35328 = t35307 + t35319;
  t35332 = -1.*t468*t35328;
  t35334 = t23700 + t35332;
  t35369 = -1.*t468*t1062*t17652;
  t35373 = -1.*t563*t35328;
  t35416 = t35369 + t35373;
  t35463 = t563*t35328;
  t35464 = t23946 + t35463;
  t27901 = -0.50321*t629*t27900;
  t28285 = -0.50321*t518*t28085;
  t28333 = -1.*t629*t27900;
  t28339 = -1.*t518*t28085;
  t28365 = t28333 + t28339;
  t28366 = -0.23321*t28365;
  t28369 = t27901 + t28285 + t28366;
  t31321 = 0.50321*t518*t563*t31318;
  t31412 = -0.50321*t468*t629*t31318;
  t31460 = t518*t563*t31318;
  t31463 = -1.*t468*t629*t31318;
  t31570 = t31460 + t31463;
  t31572 = -0.23321*t31570;
  t31595 = t31321 + t31412 + t31572;
  t34498 = 0.50321*t518*t563*t34487;
  t34586 = -0.50321*t468*t629*t34487;
  t34600 = t518*t563*t34487;
  t34652 = -1.*t468*t629*t34487;
  t34682 = t34600 + t34652;
  t34700 = -0.23321*t34682;
  t34714 = t34498 + t34586 + t34700;
  t20268 = -0.50321*t629*t20251;
  t21128 = -0.50321*t518*t21116;
  t21515 = -1.*t629*t20251;
  t21996 = -1.*t518*t21116;
  t22053 = t21515 + t21996;
  t22057 = -0.23321*t22053;
  t22117 = t20268 + t21128 + t22057;
  t35355 = -0.50321*t518*t35334;
  t35423 = -0.50321*t629*t35416;
  t35434 = -1.*t518*t35334;
  t35436 = -1.*t629*t35416;
  t35450 = t35434 + t35436;
  t35452 = -0.23321*t35450;
  t35453 = t35355 + t35423 + t35452;
  t35490 = -1.*t1062*t563*t17652;
  t35491 = t468*t35328;
  t35492 = t35490 + t35491;
  t35686 = t1062*t122*t426*t17652;
  t35690 = 0.28121*t563*t17652*t353;
  t35694 = -1.*t1062*t346*t17652*t444;
  t35698 = -0.15121*t25274;
  t35702 = -0.28121*t489*t27874;
  t35706 = -0.50321*t553*t27900;
  t35709 = -0.50321*t629*t28085;
  t35710 = t518*t27900;
  t35718 = -1.*t629*t28085;
  t35719 = t35710 + t35718;
  t35722 = -0.23321*t35719;
  t35726 = t35686 + t35690 + t35694 + t35698 + t35702 + t35706 + t35709 + t35722;
  t35739 = t346*t23227;
  t35742 = t426*t31304;
  t35758 = -0.28121*t489*t31318;
  t35768 = -0.50321*t468*t553*t31318;
  t35769 = 0.50321*t563*t629*t31318;
  t35777 = -0.15121*t33820;
  t35778 = t468*t518*t31318;
  t35784 = t563*t629*t31318;
  t35801 = t35778 + t35784;
  t35820 = -0.23321*t35801;
  t35835 = t35739 + t35742 + t35758 + t35768 + t35769 + t35777 + t35820;
  t35852 = t1019*t34453;
  t35855 = t1053*t31304;
  t35861 = -0.28121*t489*t34487;
  t35868 = -0.50321*t468*t553*t34487;
  t35870 = 0.50321*t563*t629*t34487;
  t35883 = -0.15121*t35046;
  t35903 = t468*t518*t34487;
  t35918 = t563*t629*t34487;
  t35940 = t35903 + t35918;
  t35944 = -0.23321*t35940;
  t35949 = t35852 + t35855 + t35861 + t35868 + t35870 + t35883 + t35944;
  t35502 = -0.28121*t10761*t1062*t563;
  t35529 = t426*t17659;
  t35554 = t346*t17712;
  t35591 = -0.15121*t17847;
  t35610 = -0.28121*t489*t20193;
  t35624 = -0.50321*t553*t20251;
  t35625 = -0.50321*t629*t21116;
  t35652 = t518*t20251;
  t35657 = -1.*t629*t21116;
  t35674 = t35652 + t35657;
  t35676 = -0.23321*t35674;
  t35679 = t35502 + t35529 + t35554 + t35591 + t35610 + t35624 + t35625 + t35676;
  t35997 = -0.50321*t629*t35492;
  t36001 = -0.50321*t518*t35416;
  t36009 = -1.*t629*t35492;
  t36014 = -1.*t518*t35416;
  t36019 = t36009 + t36014;
  t36027 = -0.23321*t36019;
  t36028 = t35997 + t36001 + t36027;
  t35953 = -0.28121*t468*t1062*t17652;
  t35957 = -0.28121*t563*t35328;
  t35962 = -0.50321*t629*t35334;
  t35967 = -0.50321*t553*t35416;
  t35976 = -1.*t629*t35334;
  t35981 = t518*t35416;
  t35983 = t35976 + t35981;
  t35988 = -0.23321*t35983;
  t35992 = t35953 + t35957 + t35962 + t35967 + t35988;
  t36144 = t10761*t1062*t122*t291;
  t36149 = t258*t10761*t1062*t444;
  t36156 = t36144 + t36149;
  t36171 = -0.28121*t489*t36156;
  t36175 = -0.50321*t468*t553*t36156;
  t36179 = 0.50321*t563*t629*t36156;
  t36190 = -0.15121*t12715;
  t36221 = t468*t518*t36156;
  t36223 = t563*t629*t36156;
  t36250 = t36221 + t36223;
  t36252 = -0.23321*t36250;
  t36302 = -1.*t258*t10761*t1062*t122;
  t36304 = t10761*t1062*t291*t444;
  t36306 = t36302 + t36304;
  t36280 = -1.*t10761*t563*t353;
  t36315 = t468*t36306;
  t36319 = t36280 + t36315;
  t36323 = -1.*t468*t10761*t353;
  t36327 = -1.*t563*t36306;
  t36329 = t36323 + t36327;
  t36356 = -1.*t468*t36306;
  t36357 = t13012 + t36356;
  t36382 = t258*t10761*t122*t353;
  t36383 = -1.*t10761*t291*t353*t444;
  t36392 = t36382 + t36383;
  t36537 = t468*t36392;
  t36541 = t19697 + t36537;
  t36671 = -1.*t563*t36392;
  t36690 = t20304 + t36671;
  t36131 = t10761*t1062*t122*t346;
  t36136 = t10761*t1062*t426*t444;
  t36259 = t36131 + t36136 + t36171 + t36175 + t36179 + t36190 + t36252;
  t37103 = t291*t17659;
  t37123 = t122*t17652;
  t37158 = t10761*t353*t444;
  t37160 = t37123 + t37158;
  t37225 = t258*t37160;
  t37311 = t37103 + t37225;
  t37649 = -1.*t291*t37160;
  t37656 = t19900 + t37649;
  t36266 = -1.*t10761*t1062*t122*t1019;
  t36268 = t10761*t1062*t1053*t444;
  t36272 = t36266 + t36268 + t36171 + t36175 + t36179 + t36190 + t36252;
  t37685 = -1.*t291*t18886;
  t37686 = t37685 + t37225;
  t37582 = t1053*t17659;
  t37593 = t1019*t37160;
  t37595 = -1.*t258*t37160;
  t37633 = t17834 + t37595;
  t37634 = -0.15121*t37633;
  t37657 = -0.28121*t489*t37656;
  t37672 = -0.50321*t468*t553*t37656;
  t37673 = 0.50321*t563*t629*t37656;
  t37675 = t468*t518*t37656;
  t37676 = t563*t629*t37656;
  t37677 = t37675 + t37676;
  t37678 = -0.23321*t37677;
  t37680 = t37582 + t37593 + t37634 + t37657 + t37672 + t37673 + t37678;
  t37753 = -1.*t258*t18886;
  t37755 = t37753 + t37649;
  t36354 = -0.28121*t468*t10761*t353;
  t36355 = -0.28121*t563*t36306;
  t36358 = -0.50321*t629*t36357;
  t36359 = -0.50321*t553*t36329;
  t36360 = -1.*t629*t36357;
  t36361 = t518*t36329;
  t36362 = t36360 + t36361;
  t36363 = -0.23321*t36362;
  t36364 = t36354 + t36355 + t36358 + t36359 + t36363;
  t37462 = -0.28121*t563*t37311;
  t37470 = 0.50321*t553*t563*t37311;
  t37472 = 0.50321*t468*t629*t37311;
  t37482 = -1.*t518*t563*t37311;
  t37496 = t468*t629*t37311;
  t37498 = t37482 + t37496;
  t37508 = -0.23321*t37498;
  t37523 = t37462 + t37470 + t37472 + t37508;
  t37701 = -0.28121*t563*t37686;
  t37702 = 0.50321*t553*t563*t37686;
  t37704 = 0.50321*t468*t629*t37686;
  t37707 = -1.*t518*t563*t37686;
  t37708 = t468*t629*t37686;
  t37711 = t37707 + t37708;
  t37712 = -0.23321*t37711;
  t37715 = t37701 + t37702 + t37704 + t37712;
  t37885 = t291*t37160;
  t37895 = t18958 + t37885;
  t37905 = -1.*t468*t37895;
  t37907 = t19697 + t37905;
  t37918 = t468*t10761*t1062;
  t37921 = -1.*t563*t37895;
  t37928 = t37918 + t37921;
  t38013 = t563*t37895;
  t38017 = t20304 + t38013;
  t36321 = -0.50321*t629*t36319;
  t36336 = -0.50321*t518*t36329;
  t36337 = -1.*t629*t36319;
  t36340 = -1.*t518*t36329;
  t36350 = t36337 + t36340;
  t36351 = -0.23321*t36350;
  t36352 = t36321 + t36336 + t36351;
  t37315 = 0.50321*t518*t563*t37311;
  t37320 = -0.50321*t468*t629*t37311;
  t37344 = t518*t563*t37311;
  t37375 = -1.*t468*t629*t37311;
  t37381 = t37344 + t37375;
  t37382 = -0.23321*t37381;
  t37391 = t37315 + t37320 + t37382;
  t37687 = 0.50321*t518*t563*t37686;
  t37688 = -0.50321*t468*t629*t37686;
  t37690 = t518*t563*t37686;
  t37691 = -1.*t468*t629*t37686;
  t37692 = t37690 + t37691;
  t37696 = -0.23321*t37692;
  t37697 = t37687 + t37688 + t37696;
  t37912 = -0.50321*t518*t37907;
  t37952 = -0.50321*t629*t37928;
  t37955 = -1.*t518*t37907;
  t37957 = -1.*t629*t37928;
  t37960 = t37955 + t37957;
  t37966 = -0.23321*t37960;
  t37990 = t37912 + t37952 + t37966;
  t38146 = t468*t37895;
  t38147 = t22340 + t38146;
  p_output1[0]=(t1064 + t1065 + t1082 + t1117 + t1130 - 0.50321*t1216*t553 - 0.50321*t1424*t629 - 0.23321*(t1216*t518 - 1.*t1424*t629))*var2[4] + t906*var2[5] + t1058*var2[15] + t2469*var2[16] + t2243*var2[17];
  p_output1[1]=t2898 + t3193 + t906*var2[4] + (t1064 + t1082 + t1117 + t1130 + t3234 + t3244 + t3274)*var2[5] + t3284*var2[15];
  p_output1[2]=t2898 + t3193 + t1058*var2[4] + t3284*var2[5] + (t1117 + t1130 + t3207 + t3234 + t3244 + t3274 + t1062*t122*t3692)*var2[15];
  p_output1[3]=t2469*var2[4] + t3192*var2[5] + t3192*var2[15] + (t1065 - 0.28121*t3990*t468 - 0.50321*t3995*t553 - 0.50321*t4260*t629 - 0.23321*(t3995*t518 - 1.*t4260*t629))*var2[16] + t4151*var2[17];
  p_output1[4]=t2243*var2[4] + t2881*var2[5] + t2881*var2[15] + t4151*var2[16] + (-0.50321*t4611*t518 + 0.50321*t4088*t629 - 0.23321*(-1.*t4611*t518 + t4088*t629))*var2[17];
  p_output1[5]=1.;
  p_output1[6]=-1.*t122*t353*t426 + t346*t353*t444 - 0.28121*t1780*t489 - 0.15121*t501 - 0.50321*t1851*t553 + 0.28121*t1062*t563 - 0.50321*t2172*t629 - 0.23321*(t1851*t518 - 1.*t2172*t629);
  p_output1[7]=-1.*t1062*t122*t346 - 1.*t1062*t426*t444 + t6299 + t6307 + t6326 + t6392 + t7282;
  p_output1[8]=t1019*t1062*t122 - 1.*t1053*t1062*t444 + t6299 + t6307 + t6326 + t6392 + t7282;
  p_output1[9]=0.28121*t353*t468 - 0.50321*t4088*t553 - 0.28121*t3990*t563 - 0.50321*t3995*t629 - 0.23321*(t4088*t518 - 1.*t3995*t629);
  p_output1[10]=-0.50321*t4088*t518 - 0.50321*t4611*t629 - 0.23321*(-1.*t4088*t518 - 1.*t4611*t629);
  p_output1[11]=(t22560 + t23346 + t23586 + t23609 + t23680 - 0.50321*t23753*t553 - 0.50321*t24233*t629 - 0.23321*(t23753*t518 - 1.*t24233*t629))*var2[3] + t17051*var2[4] + t19459*var2[5] + t18798*var2[15] + t22468*var2[16] + t22117*var2[17];
  p_output1[12]=t17051*var2[3] + (t22560 - 1.*t122*t17652*t353*t426 + t17652*t346*t353*t444 - 0.15121*(t122*t17652*t291*t353 + t17652*t258*t353*t444) - 0.28121*t30086*t489 - 0.50321*t30132*t553 - 0.50321*t30153*t629 - 0.23321*(t30132*t518 - 1.*t30153*t629))*var2[4] + t27565*var2[5] + t27613*var2[15] + t29415*var2[16] + t28369*var2[17];
  p_output1[13]=t19459*var2[3] + t27565*var2[4] + (t23346 + t23586 + t23609 + t23680 - 0.50321*t23658*t468*t553 + 0.50321*t23658*t563*t629 - 0.23321*(t23658*t468*t518 + t23658*t563*t629))*var2[5] + t34199*var2[15] + t32572*var2[16] + t31595*var2[17];
  p_output1[14]=t18798*var2[3] + t27613*var2[4] + t34199*var2[5] + (t33629 - 0.15121*(t33647 + t291*t34453) + t34453*t3692 - 0.28121*t35046*t489 - 0.50321*t35046*t468*t553 + 0.50321*t35046*t563*t629 - 0.23321*(t35046*t468*t518 + t35046*t563*t629))*var2[15] + t34949*var2[16] + t34714*var2[17];
  p_output1[15]=t22468*var2[3] + t29415*var2[4] + t32572*var2[5] + t34949*var2[15] + (t22560 - 0.28121*t35328*t468 - 0.50321*t35334*t553 - 0.50321*t35464*t629 - 0.23321*(t35334*t518 - 1.*t35464*t629))*var2[16] + t35453*var2[17];
  p_output1[16]=t22117*var2[3] + t28369*var2[4] + t31595*var2[5] + t34714*var2[15] + t35453*var2[16] + (-0.50321*t35492*t518 + 0.50321*t35416*t629 - 0.23321*(-1.*t35492*t518 + t35416*t629))*var2[17];
  p_output1[17]=1.;
  p_output1[18]=t35679;
  p_output1[19]=t35726;
  p_output1[20]=t35835;
  p_output1[21]=t35949;
  p_output1[22]=t35992;
  p_output1[23]=t36028;
  p_output1[24]=t35679*var2[3] + t35726*var2[4] + t35835*var2[5] + t35949*var2[15] + t35992*var2[16] + t36028*var2[17];
  p_output1[25]=t35726*var2[3] + (t35502 + t10761*t122*t353*t426 - 1.*t10761*t346*t353*t444 - 0.15121*(-1.*t10761*t122*t291*t353 - 1.*t10761*t258*t353*t444) - 0.28121*t36392*t489 - 0.50321*t36541*t553 - 0.50321*t36690*t629 - 0.23321*(t36541*t518 - 1.*t36690*t629))*var2[4] + t36259*var2[5] + t36272*var2[15] + t36364*var2[16] + t36352*var2[17];
  p_output1[26]=t35835*var2[3] + t36259*var2[4] + (t35529 + t35554 + t35591 + t35610 - 0.50321*t20193*t468*t553 + 0.50321*t20193*t563*t629 - 0.23321*(t20193*t468*t518 + t20193*t563*t629))*var2[5] + t37680*var2[15] + t37523*var2[16] + t37391*var2[17];
  p_output1[27]=t35949*var2[3] + t36272*var2[4] + t37680*var2[5] + (t18886*t3692 + t37593 - 0.15121*(t18913 + t37595) - 0.28121*t37755*t489 - 0.50321*t37755*t468*t553 + 0.50321*t37755*t563*t629 - 0.23321*(t37755*t468*t518 + t37755*t563*t629))*var2[15] + t37715*var2[16] + t37697*var2[17];
  p_output1[28]=t35992*var2[3] + t36364*var2[4] + t37523*var2[5] + t37715*var2[15] + (t35502 - 0.28121*t37895*t468 - 0.50321*t37907*t553 - 0.50321*t38017*t629 - 0.23321*(t37907*t518 - 1.*t38017*t629))*var2[16] + t37990*var2[17];
  p_output1[29]=t36028*var2[3] + t36352*var2[4] + t37391*var2[5] + t37697*var2[15] + t37990*var2[16] + (-0.50321*t38147*t518 + 0.50321*t37928*t629 - 0.23321*(-1.*t38147*t518 + t37928*t629))*var2[17];
  p_output1[30]=1.;
  p_output1[31]=-0.15121*t34487 + t31304*t346 + t35423 + t34453*t426 - 0.28121*t35328*t489 - 0.23321*(t35436 + t35492*t518) - 0.50321*t35492*t553 - 0.28121*t1062*t17652*t563;
  p_output1[32]=-0.15121*t36156 - 1.*t1062*t10761*t122*t426 + t1062*t10761*t346*t444 - 0.28121*t36306*t489 - 0.50321*t36319*t553 - 0.28121*t10761*t353*t563 - 0.50321*t36329*t629 - 0.23321*(t36319*t518 - 1.*t36329*t629);
  p_output1[33]=t17659*t346 - 0.15121*t37656 + t37160*t426 - 0.28121*t37311*t489 - 0.50321*t37311*t468*t553 + 0.50321*t37311*t563*t629 - 0.23321*(t37311*t468*t518 + t37311*t563*t629);
  p_output1[34]=t1019*t18886 + t1053*t37160 - 0.15121*t37755 - 0.28121*t37686*t489 - 0.50321*t37686*t468*t553 + 0.50321*t37686*t563*t629 - 0.23321*(t37686*t468*t518 + t37686*t563*t629);
  p_output1[35]=0.28121*t1062*t10761*t468 - 0.50321*t37928*t553 - 0.28121*t37895*t563 - 0.50321*t37907*t629 - 0.23321*(t37928*t518 - 1.*t37907*t629);
  p_output1[36]=-0.50321*t37928*t518 - 0.50321*t38147*t629 - 0.23321*(-1.*t37928*t518 - 1.*t38147*t629);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 37, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_impact_velocity_RrFoot_DiagonalStance.hh"

namespace DiagonalStance
{

void J_impact_velocity_RrFoot_DiagonalStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
