
classdef foot_input < ros.Message
    %foot_input MATLAB implementation of collocation_optimization_trajectory_planner/foot_input
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'collocation_optimization_trajectory_planner/foot_input' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '32264f14730479191aea36ad92c4bf91' % The MD5 Checksum of the message definition
        PropertyList = { 'Forces' 'StanceVectors' 'StanceIndices' 'DStanceIndices' } % List of non-constant message properties
        ROSPropertyList = { 'forces' 'stance_vectors' 'stance_indices' 'd_stance_indices' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Float64MultiArray' ...
            'ros.msggen.std_msgs.Float64MultiArray' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Forces
        StanceVectors
        StanceIndices
        DStanceIndices
    end
    methods
        function set.Forces(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Float64MultiArray'};
            validateattributes(val, validClasses, validAttributes, 'foot_input', 'Forces')
            obj.Forces = val;
        end
        function set.StanceVectors(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Float64MultiArray'};
            validateattributes(val, validClasses, validAttributes, 'foot_input', 'StanceVectors')
            obj.StanceVectors = val;
        end
        function set.StanceIndices(obj, val)
            validClasses = {'logical', 'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = logical.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'foot_input', 'StanceIndices');
            obj.StanceIndices = logical(val);
        end
        function set.DStanceIndices(obj, val)
            validClasses = {'logical', 'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = logical.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'foot_input', 'DStanceIndices');
            obj.DStanceIndices = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.collocation_optimization_trajectory_planner.foot_input.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.collocation_optimization_trajectory_planner.foot_input(strObj);
        end
    end
end
