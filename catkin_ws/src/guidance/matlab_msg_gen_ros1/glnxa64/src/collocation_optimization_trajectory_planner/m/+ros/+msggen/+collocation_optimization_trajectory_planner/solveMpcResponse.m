
classdef solveMpcResponse < ros.Message
    %solveMpcResponse MATLAB implementation of collocation_optimization_trajectory_planner/solveMpcResponse
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'collocation_optimization_trajectory_planner/solveMpcResponse' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '7a857964f070b1158e4bcfc0b36166a5' % The MD5 Checksum of the message definition
        PropertyList = { 'States' 'Inputs' 'T' } % List of non-constant message properties
        ROSPropertyList = { 'states' 'inputs' 't' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.collocation_optimization_trajectory_planner.states' ...
            'ros.msggen.collocation_optimization_trajectory_planner.inputs' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        States
        Inputs
        T
    end
    methods
        function set.States(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.collocation_optimization_trajectory_planner.states'};
            validateattributes(val, validClasses, validAttributes, 'solveMpcResponse', 'States')
            obj.States = val;
        end
        function set.Inputs(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.collocation_optimization_trajectory_planner.inputs'};
            validateattributes(val, validClasses, validAttributes, 'solveMpcResponse', 'Inputs')
            obj.Inputs = val;
        end
        function set.T(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'solveMpcResponse', 'T');
            obj.T = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.collocation_optimization_trajectory_planner.solveMpcResponse.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.collocation_optimization_trajectory_planner.solveMpcResponse(strObj);
        end
    end
end
